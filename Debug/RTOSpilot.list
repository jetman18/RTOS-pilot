
RTOSpilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f94  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  08014184  08014184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014910  08014910  000160b0  2**0
                  CONTENTS
  4 .ARM          00000000  08014910  08014910  000160b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014910  08014910  000160b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014910  08014910  00015910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014914  08014914  00015914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  08014918  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ce8  200000b0  080149c8  000160b0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20002d98  080149c8  00016d98  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000160b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029ae0  00000000  00000000  000160d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007196  00000000  00000000  0003fbb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022e8  00000000  00000000  00046d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ade  00000000  00000000  00049038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b7b9  00000000  00000000  0004ab16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003426c  00000000  00000000  000562cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2a02  00000000  00000000  0008a53b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015cf3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095c0  00000000  00000000  0015cf80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00166540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000b0 	.word	0x200000b0
 800020c:	00000000 	.word	0x00000000
 8000210:	0801416c 	.word	0x0801416c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000b4 	.word	0x200000b4
 800022c:	0801416c 	.word	0x0801416c

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	@ 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fmul>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d06f      	beq.n	8000f4c <__aeabi_fmul+0xf8>
 8000e6c:	441a      	add	r2, r3
 8000e6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e7a:	d01e      	beq.n	8000eba <__aeabi_fmul+0x66>
 8000e7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e88:	fba0 3101 	umull	r3, r1, r0, r1
 8000e8c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e90:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e94:	bf3e      	ittt	cc
 8000e96:	0049      	lslcc	r1, r1, #1
 8000e98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ea2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ea6:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea8:	d81d      	bhi.n	8000ee6 <__aeabi_fmul+0x92>
 8000eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb2:	bf08      	it	eq
 8000eb4:	f020 0001 	biceq.w	r0, r0, #1
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ec2:	bf08      	it	eq
 8000ec4:	0249      	lsleq	r1, r1, #9
 8000ec6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ece:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed0:	bfc2      	ittt	gt
 8000ed2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ed6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eda:	4770      	bxgt	lr
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	dc5d      	bgt.n	8000fa4 <__aeabi_fmul+0x150>
 8000ee8:	f112 0f19 	cmn.w	r2, #25
 8000eec:	bfdc      	itt	le
 8000eee:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ef2:	4770      	bxle	lr
 8000ef4:	f1c2 0200 	rsb	r2, r2, #0
 8000ef8:	0041      	lsls	r1, r0, #1
 8000efa:	fa21 f102 	lsr.w	r1, r1, r2
 8000efe:	f1c2 0220 	rsb	r2, r2, #32
 8000f02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f0a:	f140 0000 	adc.w	r0, r0, #0
 8000f0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f12:	bf08      	it	eq
 8000f14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f18:	4770      	bx	lr
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fmul+0xce>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fmul+0xe6>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e78f      	b.n	8000e6c <__aeabi_fmul+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	bf18      	it	ne
 8000f56:	ea93 0f0c 	teqne	r3, ip
 8000f5a:	d00a      	beq.n	8000f72 <__aeabi_fmul+0x11e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	d1d8      	bne.n	8000f1a <__aeabi_fmul+0xc6>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f70:	4770      	bx	lr
 8000f72:	f090 0f00 	teq	r0, #0
 8000f76:	bf17      	itett	ne
 8000f78:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f7c:	4608      	moveq	r0, r1
 8000f7e:	f091 0f00 	teqne	r1, #0
 8000f82:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f86:	d014      	beq.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_fmul+0x13e>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d10f      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f92:	ea93 0f0c 	teq	r3, ip
 8000f96:	d103      	bne.n	8000fa0 <__aeabi_fmul+0x14c>
 8000f98:	024b      	lsls	r3, r1, #9
 8000f9a:	bf18      	it	ne
 8000f9c:	4608      	movne	r0, r1
 8000f9e:	d108      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000fa0:	ea80 0001 	eor.w	r0, r0, r1
 8000fa4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fa8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb0:	4770      	bx	lr
 8000fb2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_fdiv>:
 8000fbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fc4:	bf1e      	ittt	ne
 8000fc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fca:	ea92 0f0c 	teqne	r2, ip
 8000fce:	ea93 0f0c 	teqne	r3, ip
 8000fd2:	d069      	beq.n	80010a8 <__aeabi_fdiv+0xec>
 8000fd4:	eba2 0203 	sub.w	r2, r2, r3
 8000fd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fe2:	d037      	beq.n	8001054 <__aeabi_fdiv+0x98>
 8000fe4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fe8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf38      	it	cc
 8000ff8:	005b      	lslcc	r3, r3, #1
 8000ffa:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ffe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001002:	428b      	cmp	r3, r1
 8001004:	bf24      	itt	cs
 8001006:	1a5b      	subcs	r3, r3, r1
 8001008:	ea40 000c 	orrcs.w	r0, r0, ip
 800100c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001010:	bf24      	itt	cs
 8001012:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001016:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800101a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800101e:	bf24      	itt	cs
 8001020:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001028:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800102c:	bf24      	itt	cs
 800102e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001032:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	bf18      	it	ne
 800103a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800103e:	d1e0      	bne.n	8001002 <__aeabi_fdiv+0x46>
 8001040:	2afd      	cmp	r2, #253	@ 0xfd
 8001042:	f63f af50 	bhi.w	8000ee6 <__aeabi_fmul+0x92>
 8001046:	428b      	cmp	r3, r1
 8001048:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800104c:	bf08      	it	eq
 800104e:	f020 0001 	biceq.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001058:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800105c:	327f      	adds	r2, #127	@ 0x7f
 800105e:	bfc2      	ittt	gt
 8001060:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001064:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001068:	4770      	bxgt	lr
 800106a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	3a01      	subs	r2, #1
 8001074:	e737      	b.n	8000ee6 <__aeabi_fmul+0x92>
 8001076:	f092 0f00 	teq	r2, #0
 800107a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800107e:	bf02      	ittt	eq
 8001080:	0040      	lsleq	r0, r0, #1
 8001082:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001086:	3a01      	subeq	r2, #1
 8001088:	d0f9      	beq.n	800107e <__aeabi_fdiv+0xc2>
 800108a:	ea40 000c 	orr.w	r0, r0, ip
 800108e:	f093 0f00 	teq	r3, #0
 8001092:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0049      	lsleq	r1, r1, #1
 800109a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800109e:	3b01      	subeq	r3, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fdiv+0xda>
 80010a2:	ea41 010c 	orr.w	r1, r1, ip
 80010a6:	e795      	b.n	8000fd4 <__aeabi_fdiv+0x18>
 80010a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010ac:	ea92 0f0c 	teq	r2, ip
 80010b0:	d108      	bne.n	80010c4 <__aeabi_fdiv+0x108>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	f47f af7d 	bne.w	8000fb2 <__aeabi_fmul+0x15e>
 80010b8:	ea93 0f0c 	teq	r3, ip
 80010bc:	f47f af70 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010c0:	4608      	mov	r0, r1
 80010c2:	e776      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010c4:	ea93 0f0c 	teq	r3, ip
 80010c8:	d104      	bne.n	80010d4 <__aeabi_fdiv+0x118>
 80010ca:	024b      	lsls	r3, r1, #9
 80010cc:	f43f af4c 	beq.w	8000f68 <__aeabi_fmul+0x114>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e76e      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010d4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010d8:	bf18      	it	ne
 80010da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010de:	d1ca      	bne.n	8001076 <__aeabi_fdiv+0xba>
 80010e0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010e4:	f47f af5c 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010e8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ec:	f47f af3c 	bne.w	8000f68 <__aeabi_fmul+0x114>
 80010f0:	e75f      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010f2:	bf00      	nop

080010f4 <__gesf2>:
 80010f4:	f04f 3cff 	mov.w	ip, #4294967295
 80010f8:	e006      	b.n	8001108 <__cmpsf2+0x4>
 80010fa:	bf00      	nop

080010fc <__lesf2>:
 80010fc:	f04f 0c01 	mov.w	ip, #1
 8001100:	e002      	b.n	8001108 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__cmpsf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	f84d cd04 	str.w	ip, [sp, #-4]!
 800110c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001110:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001114:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001118:	bf18      	it	ne
 800111a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800111e:	d011      	beq.n	8001144 <__cmpsf2+0x40>
 8001120:	b001      	add	sp, #4
 8001122:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001126:	bf18      	it	ne
 8001128:	ea90 0f01 	teqne	r0, r1
 800112c:	bf58      	it	pl
 800112e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001132:	bf88      	it	hi
 8001134:	17c8      	asrhi	r0, r1, #31
 8001136:	bf38      	it	cc
 8001138:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800113c:	bf18      	it	ne
 800113e:	f040 0001 	orrne.w	r0, r0, #1
 8001142:	4770      	bx	lr
 8001144:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001148:	d102      	bne.n	8001150 <__cmpsf2+0x4c>
 800114a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800114e:	d105      	bne.n	800115c <__cmpsf2+0x58>
 8001150:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001154:	d1e4      	bne.n	8001120 <__cmpsf2+0x1c>
 8001156:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800115a:	d0e1      	beq.n	8001120 <__cmpsf2+0x1c>
 800115c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <__aeabi_cfrcmple>:
 8001164:	4684      	mov	ip, r0
 8001166:	4608      	mov	r0, r1
 8001168:	4661      	mov	r1, ip
 800116a:	e7ff      	b.n	800116c <__aeabi_cfcmpeq>

0800116c <__aeabi_cfcmpeq>:
 800116c:	b50f      	push	{r0, r1, r2, r3, lr}
 800116e:	f7ff ffc9 	bl	8001104 <__cmpsf2>
 8001172:	2800      	cmp	r0, #0
 8001174:	bf48      	it	mi
 8001176:	f110 0f00 	cmnmi.w	r0, #0
 800117a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800117c <__aeabi_fcmpeq>:
 800117c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001180:	f7ff fff4 	bl	800116c <__aeabi_cfcmpeq>
 8001184:	bf0c      	ite	eq
 8001186:	2001      	moveq	r0, #1
 8001188:	2000      	movne	r0, #0
 800118a:	f85d fb08 	ldr.w	pc, [sp], #8
 800118e:	bf00      	nop

08001190 <__aeabi_fcmplt>:
 8001190:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001194:	f7ff ffea 	bl	800116c <__aeabi_cfcmpeq>
 8001198:	bf34      	ite	cc
 800119a:	2001      	movcc	r0, #1
 800119c:	2000      	movcs	r0, #0
 800119e:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a2:	bf00      	nop

080011a4 <__aeabi_fcmple>:
 80011a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a8:	f7ff ffe0 	bl	800116c <__aeabi_cfcmpeq>
 80011ac:	bf94      	ite	ls
 80011ae:	2001      	movls	r0, #1
 80011b0:	2000      	movhi	r0, #0
 80011b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b6:	bf00      	nop

080011b8 <__aeabi_fcmpge>:
 80011b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011bc:	f7ff ffd2 	bl	8001164 <__aeabi_cfrcmple>
 80011c0:	bf94      	ite	ls
 80011c2:	2001      	movls	r0, #1
 80011c4:	2000      	movhi	r0, #0
 80011c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ca:	bf00      	nop

080011cc <__aeabi_fcmpgt>:
 80011cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d0:	f7ff ffc8 	bl	8001164 <__aeabi_cfrcmple>
 80011d4:	bf34      	ite	cc
 80011d6:	2001      	movcc	r0, #1
 80011d8:	2000      	movcs	r0, #0
 80011da:	f85d fb08 	ldr.w	pc, [sp], #8
 80011de:	bf00      	nop

080011e0 <__aeabi_fcmpun>:
 80011e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011ec:	d102      	bne.n	80011f4 <__aeabi_fcmpun+0x14>
 80011ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011f2:	d108      	bne.n	8001206 <__aeabi_fcmpun+0x26>
 80011f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011f8:	d102      	bne.n	8001200 <__aeabi_fcmpun+0x20>
 80011fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011fe:	d102      	bne.n	8001206 <__aeabi_fcmpun+0x26>
 8001200:	f04f 0000 	mov.w	r0, #0
 8001204:	4770      	bx	lr
 8001206:	f04f 0001 	mov.w	r0, #1
 800120a:	4770      	bx	lr

0800120c <__aeabi_f2iz>:
 800120c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001210:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001214:	d30f      	bcc.n	8001236 <__aeabi_f2iz+0x2a>
 8001216:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800121a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800121e:	d90d      	bls.n	800123c <__aeabi_f2iz+0x30>
 8001220:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001224:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001228:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800122c:	fa23 f002 	lsr.w	r0, r3, r2
 8001230:	bf18      	it	ne
 8001232:	4240      	negne	r0, r0
 8001234:	4770      	bx	lr
 8001236:	f04f 0000 	mov.w	r0, #0
 800123a:	4770      	bx	lr
 800123c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001240:	d101      	bne.n	8001246 <__aeabi_f2iz+0x3a>
 8001242:	0242      	lsls	r2, r0, #9
 8001244:	d105      	bne.n	8001252 <__aeabi_f2iz+0x46>
 8001246:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800124a:	bf08      	it	eq
 800124c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001250:	4770      	bx	lr
 8001252:	f04f 0000 	mov.w	r0, #0
 8001256:	4770      	bx	lr

08001258 <__aeabi_f2uiz>:
 8001258:	0042      	lsls	r2, r0, #1
 800125a:	d20e      	bcs.n	800127a <__aeabi_f2uiz+0x22>
 800125c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001260:	d30b      	bcc.n	800127a <__aeabi_f2uiz+0x22>
 8001262:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001266:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800126a:	d409      	bmi.n	8001280 <__aeabi_f2uiz+0x28>
 800126c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001270:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001274:	fa23 f002 	lsr.w	r0, r3, r2
 8001278:	4770      	bx	lr
 800127a:	f04f 0000 	mov.w	r0, #0
 800127e:	4770      	bx	lr
 8001280:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001284:	d101      	bne.n	800128a <__aeabi_f2uiz+0x32>
 8001286:	0242      	lsls	r2, r0, #9
 8001288:	d102      	bne.n	8001290 <__aeabi_f2uiz+0x38>
 800128a:	f04f 30ff 	mov.w	r0, #4294967295
 800128e:	4770      	bx	lr
 8001290:	f04f 0000 	mov.w	r0, #0
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop

08001298 <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	e008      	b.n	80012b8 <ibus_init+0x20>
      ibusChannelData[i] = 1000;
 80012a6:	4a0d      	ldr	r2, [pc, #52]	@ (80012dc <ibus_init+0x44>)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	3301      	adds	r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b0d      	cmp	r3, #13
 80012bc:	ddf3      	ble.n	80012a6 <ibus_init+0xe>
    }
	uart = uartt;
 80012be:	4a08      	ldr	r2, [pc, #32]	@ (80012e0 <ibus_init+0x48>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <ibus_init+0x48>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2201      	movs	r2, #1
 80012ca:	4906      	ldr	r1, [pc, #24]	@ (80012e4 <ibus_init+0x4c>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00a fcf6 	bl	800bcbe <HAL_UART_Receive_IT>
#endif
}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200000d0 	.word	0x200000d0
 80012e0:	2000012c 	.word	0x2000012c
 80012e4:	20000128 	.word	0x20000128

080012e8 <ibus_uart_port>:

UART_HandleTypeDef *ibus_uart_port(){
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
   return uart;
 80012ec:	4b02      	ldr	r3, [pc, #8]	@ (80012f8 <ibus_uart_port+0x10>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	2000012c 	.word	0x2000012c

080012fc <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <ibus_calback+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f80d 	bl	8001324 <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 800130a:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <ibus_calback+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2201      	movs	r2, #1
 8001310:	4902      	ldr	r1, [pc, #8]	@ (800131c <ibus_calback+0x20>)
 8001312:	4618      	mov	r0, r3
 8001314:	f00a fcd3 	bl	800bcbe <HAL_UART_Receive_IT>
#endif

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000128 	.word	0x20000128
 8001320:	2000012c 	.word	0x2000012c

08001324 <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 800132e:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <ibusDataReceive+0x78>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001336:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <ibusDataReceive+0x7c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <ibusDataReceive+0x80>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800134a:	4293      	cmp	r3, r2
 800134c:	d902      	bls.n	8001354 <ibusDataReceive+0x30>
        ibusFramePosition = 0;
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <ibusDataReceive+0x84>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 8001354:	4a13      	ldr	r2, [pc, #76]	@ (80013a4 <ibusDataReceive+0x80>)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 800135a:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <ibusDataReceive+0x84>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <ibusDataReceive+0x44>
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b20      	cmp	r3, #32
 8001366:	d114      	bne.n	8001392 <ibusDataReceive+0x6e>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <ibusDataReceive+0x84>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	4a0f      	ldr	r2, [pc, #60]	@ (80013ac <ibusDataReceive+0x88>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <ibusDataReceive+0x84>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b1f      	cmp	r3, #31
 800137a:	d103      	bne.n	8001384 <ibusDataReceive+0x60>
        ibusFrameDone = TRUE;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <ibusDataReceive+0x8c>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e007      	b.n	8001394 <ibusDataReceive+0x70>
    } else {
        ibusFramePosition++;
 8001384:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <ibusDataReceive+0x84>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <ibusDataReceive+0x84>)
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	e000      	b.n	8001394 <ibusDataReceive+0x70>
        return;
 8001392:	bf00      	nop
    }
}
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	20000544 	.word	0x20000544
 80013a0:	20000548 	.word	0x20000548
 80013a4:	20000130 	.word	0x20000130
 80013a8:	20000134 	.word	0x20000134
 80013ac:	20000108 	.word	0x20000108
 80013b0:	200000cc 	.word	0x200000cc

080013b4 <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 80013ba:	4b63      	ldr	r3, [pc, #396]	@ (8001548 <ibusFrameComplete+0x194>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 80bb 	beq.w	800153a <ibusFrameComplete+0x186>
        ibusFrameDone = FALSE;
 80013c4:	4b60      	ldr	r3, [pc, #384]	@ (8001548 <ibusFrameComplete+0x194>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 80013ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013ce:	81bb      	strh	r3, [r7, #12]

        for (i = 0; i < 30; i++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e009      	b.n	80013ea <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	4a5c      	ldr	r2, [pc, #368]	@ (800154c <ibusFrameComplete+0x198>)
 80013da:	5cd3      	ldrb	r3, [r2, r3]
 80013dc:	461a      	mov	r2, r3
 80013de:	89bb      	ldrh	r3, [r7, #12]
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 30; i++)
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	3301      	adds	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2b1d      	cmp	r3, #29
 80013ee:	d9f2      	bls.n	80013d6 <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 80013f0:	4b56      	ldr	r3, [pc, #344]	@ (800154c <ibusFrameComplete+0x198>)
 80013f2:	7f9b      	ldrb	r3, [r3, #30]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b55      	ldr	r3, [pc, #340]	@ (800154c <ibusFrameComplete+0x198>)
 80013f8:	7fdb      	ldrb	r3, [r3, #31]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	4413      	add	r3, r2
 8001400:	80fb      	strh	r3, [r7, #6]

        if (chksum == rxsum) {
 8001402:	89ba      	ldrh	r2, [r7, #12]
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	429a      	cmp	r2, r3
 8001408:	f040 8097 	bne.w	800153a <ibusFrameComplete+0x186>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 800140c:	4b4f      	ldr	r3, [pc, #316]	@ (800154c <ibusFrameComplete+0x198>)
 800140e:	78db      	ldrb	r3, [r3, #3]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	4a4e      	ldr	r2, [pc, #312]	@ (800154c <ibusFrameComplete+0x198>)
 8001414:	7892      	ldrb	r2, [r2, #2]
 8001416:	4413      	add	r3, r2
 8001418:	461a      	mov	r2, r3
 800141a:	4b4d      	ldr	r3, [pc, #308]	@ (8001550 <ibusFrameComplete+0x19c>)
 800141c:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 800141e:	4b4b      	ldr	r3, [pc, #300]	@ (800154c <ibusFrameComplete+0x198>)
 8001420:	795b      	ldrb	r3, [r3, #5]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	4a49      	ldr	r2, [pc, #292]	@ (800154c <ibusFrameComplete+0x198>)
 8001426:	7912      	ldrb	r2, [r2, #4]
 8001428:	4413      	add	r3, r2
 800142a:	461a      	mov	r2, r3
 800142c:	4b48      	ldr	r3, [pc, #288]	@ (8001550 <ibusFrameComplete+0x19c>)
 800142e:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 8001430:	4b46      	ldr	r3, [pc, #280]	@ (800154c <ibusFrameComplete+0x198>)
 8001432:	79db      	ldrb	r3, [r3, #7]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	4a45      	ldr	r2, [pc, #276]	@ (800154c <ibusFrameComplete+0x198>)
 8001438:	7992      	ldrb	r2, [r2, #6]
 800143a:	4413      	add	r3, r2
 800143c:	461a      	mov	r2, r3
 800143e:	4b44      	ldr	r3, [pc, #272]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001440:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 8001442:	4b42      	ldr	r3, [pc, #264]	@ (800154c <ibusFrameComplete+0x198>)
 8001444:	7a5b      	ldrb	r3, [r3, #9]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	4a40      	ldr	r2, [pc, #256]	@ (800154c <ibusFrameComplete+0x198>)
 800144a:	7a12      	ldrb	r2, [r2, #8]
 800144c:	4413      	add	r3, r2
 800144e:	461a      	mov	r2, r3
 8001450:	4b3f      	ldr	r3, [pc, #252]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001452:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 8001454:	4b3d      	ldr	r3, [pc, #244]	@ (800154c <ibusFrameComplete+0x198>)
 8001456:	7adb      	ldrb	r3, [r3, #11]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	4a3c      	ldr	r2, [pc, #240]	@ (800154c <ibusFrameComplete+0x198>)
 800145c:	7a92      	ldrb	r2, [r2, #10]
 800145e:	4413      	add	r3, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4b3b      	ldr	r3, [pc, #236]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001464:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 8001466:	4b39      	ldr	r3, [pc, #228]	@ (800154c <ibusFrameComplete+0x198>)
 8001468:	7b5b      	ldrb	r3, [r3, #13]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	4a37      	ldr	r2, [pc, #220]	@ (800154c <ibusFrameComplete+0x198>)
 800146e:	7b12      	ldrb	r2, [r2, #12]
 8001470:	4413      	add	r3, r2
 8001472:	461a      	mov	r2, r3
 8001474:	4b36      	ldr	r3, [pc, #216]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001476:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 8001478:	4b34      	ldr	r3, [pc, #208]	@ (800154c <ibusFrameComplete+0x198>)
 800147a:	7bdb      	ldrb	r3, [r3, #15]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	4a33      	ldr	r2, [pc, #204]	@ (800154c <ibusFrameComplete+0x198>)
 8001480:	7b92      	ldrb	r2, [r2, #14]
 8001482:	4413      	add	r3, r2
 8001484:	461a      	mov	r2, r3
 8001486:	4b32      	ldr	r3, [pc, #200]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001488:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 800148a:	4b30      	ldr	r3, [pc, #192]	@ (800154c <ibusFrameComplete+0x198>)
 800148c:	7c5b      	ldrb	r3, [r3, #17]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	4a2e      	ldr	r2, [pc, #184]	@ (800154c <ibusFrameComplete+0x198>)
 8001492:	7c12      	ldrb	r2, [r2, #16]
 8001494:	4413      	add	r3, r2
 8001496:	461a      	mov	r2, r3
 8001498:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <ibusFrameComplete+0x19c>)
 800149a:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 800149c:	4b2b      	ldr	r3, [pc, #172]	@ (800154c <ibusFrameComplete+0x198>)
 800149e:	7cdb      	ldrb	r3, [r3, #19]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	4a2a      	ldr	r2, [pc, #168]	@ (800154c <ibusFrameComplete+0x198>)
 80014a4:	7c92      	ldrb	r2, [r2, #18]
 80014a6:	4413      	add	r3, r2
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <ibusFrameComplete+0x19c>)
 80014ac:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 80014ae:	4b27      	ldr	r3, [pc, #156]	@ (800154c <ibusFrameComplete+0x198>)
 80014b0:	7d5b      	ldrb	r3, [r3, #21]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	4a25      	ldr	r2, [pc, #148]	@ (800154c <ibusFrameComplete+0x198>)
 80014b6:	7d12      	ldrb	r2, [r2, #20]
 80014b8:	4413      	add	r3, r2
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <ibusFrameComplete+0x19c>)
 80014be:	625a      	str	r2, [r3, #36]	@ 0x24
            ibusChannelData[10] = (ibus[23] << 8) + ibus[22];
 80014c0:	4b22      	ldr	r3, [pc, #136]	@ (800154c <ibusFrameComplete+0x198>)
 80014c2:	7ddb      	ldrb	r3, [r3, #23]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	4a21      	ldr	r2, [pc, #132]	@ (800154c <ibusFrameComplete+0x198>)
 80014c8:	7d92      	ldrb	r2, [r2, #22]
 80014ca:	4413      	add	r3, r2
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <ibusFrameComplete+0x19c>)
 80014d0:	629a      	str	r2, [r3, #40]	@ 0x28
			ibusChannelData[11] = (ibus[25] << 8) + ibus[24];
 80014d2:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <ibusFrameComplete+0x198>)
 80014d4:	7e5b      	ldrb	r3, [r3, #25]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	4a1c      	ldr	r2, [pc, #112]	@ (800154c <ibusFrameComplete+0x198>)
 80014da:	7e12      	ldrb	r2, [r2, #24]
 80014dc:	4413      	add	r3, r2
 80014de:	461a      	mov	r2, r3
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <ibusFrameComplete+0x19c>)
 80014e2:	62da      	str	r2, [r3, #44]	@ 0x2c
			ibusChannelData[12] = (ibus[27] << 8) + ibus[26];
 80014e4:	4b19      	ldr	r3, [pc, #100]	@ (800154c <ibusFrameComplete+0x198>)
 80014e6:	7edb      	ldrb	r3, [r3, #27]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	4a18      	ldr	r2, [pc, #96]	@ (800154c <ibusFrameComplete+0x198>)
 80014ec:	7e92      	ldrb	r2, [r2, #26]
 80014ee:	4413      	add	r3, r2
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <ibusFrameComplete+0x19c>)
 80014f4:	631a      	str	r2, [r3, #48]	@ 0x30
			ibusChannelData[13] = (ibus[29] << 8) + ibus[28];
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <ibusFrameComplete+0x198>)
 80014f8:	7f5b      	ldrb	r3, [r3, #29]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	4a13      	ldr	r2, [pc, #76]	@ (800154c <ibusFrameComplete+0x198>)
 80014fe:	7f12      	ldrb	r2, [r2, #28]
 8001500:	4413      	add	r3, r2
 8001502:	461a      	mov	r2, r3
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001506:	635a      	str	r2, [r3, #52]	@ 0x34
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	e010      	b.n	8001530 <ibusFrameComplete+0x17c>
			    if(ibusChannelData[i] > 2100){
 800150e:	4a10      	ldr	r2, [pc, #64]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	f640 0234 	movw	r2, #2100	@ 0x834
 800151a:	4293      	cmp	r3, r2
 800151c:	d905      	bls.n	800152a <ibusFrameComplete+0x176>
				    ibusChannelData[i] = 1000;
 800151e:	4a0c      	ldr	r2, [pc, #48]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001526:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3301      	adds	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b0d      	cmp	r3, #13
 8001534:	ddeb      	ble.n	800150e <ibusFrameComplete+0x15a>
				}
			}
            return TRUE;
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <ibusFrameComplete+0x188>
        }
    }
    return FALSE;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	200000cc 	.word	0x200000cc
 800154c:	20000108 	.word	0x20000108
 8001550:	200000d0 	.word	0x200000d0

08001554 <mpu6050Connection>:

/* Check mpu6050 connection
 * return 1 -> not connected
 * return 0 -> connected
 */ 
int8_t mpu6050Connection(){
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
    isConnected = HAL_I2C_IsDeviceReady(i2c,IMU_DEV_ADDRES, 3, 5);
 8001558:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <mpu6050Connection+0x24>)
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	2305      	movs	r3, #5
 800155e:	2203      	movs	r2, #3
 8001560:	21d0      	movs	r1, #208	@ 0xd0
 8001562:	f007 f909 	bl	8008778 <HAL_I2C_IsDeviceReady>
 8001566:	4603      	mov	r3, r0
 8001568:	b25a      	sxtb	r2, r3
 800156a:	4b04      	ldr	r3, [pc, #16]	@ (800157c <mpu6050Connection+0x28>)
 800156c:	701a      	strb	r2, [r3, #0]
    return isConnected;
 800156e:	4b03      	ldr	r3, [pc, #12]	@ (800157c <mpu6050Connection+0x28>)
 8001570:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001574:	4618      	mov	r0, r3
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000138 	.word	0x20000138
 800157c:	2000013c 	.word	0x2000013c

08001580 <mpu6050_init>:
}

/* configuration mpu6050*/


int8_t mpu6050_init(I2C_HandleTypeDef *hi2c){
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af02      	add	r7, sp, #8
 8001586:	6078      	str	r0, [r7, #4]
	data[1] = (uint8_t)(ACC_2G<<3);
    SPI_write(&data,2);
	return 0;
#endif
#ifdef I2C
  i2c = hi2c;	
 8001588:	4a25      	ldr	r2, [pc, #148]	@ (8001620 <mpu6050_init+0xa0>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
	int8_t k = mpu6050Connection();
 800158e:	f7ff ffe1 	bl	8001554 <mpu6050Connection>
 8001592:	4603      	mov	r3, r0
 8001594:	73fb      	strb	r3, [r7, #15]
	if(!k){
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d13a      	bne.n	8001614 <mpu6050_init+0x94>
		uint8_t buffer[6];	
		buffer[0] = MPU_RA_PWR_MGMT_1; 
 800159e:	236b      	movs	r3, #107	@ 0x6b
 80015a0:	723b      	strb	r3, [r7, #8]
		buffer[1] = RESET_REG;
 80015a2:	2300      	movs	r3, #0
 80015a4:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80015a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <mpu6050_init+0xa0>)
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	f107 0208 	add.w	r2, r7, #8
 80015ae:	2301      	movs	r3, #1
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2302      	movs	r3, #2
 80015b4:	21d0      	movs	r1, #208	@ 0xd0
 80015b6:	f006 fa13 	bl	80079e0 <HAL_I2C_Master_Transmit>
		
		//buffer[0] = CONFIGURATION;
		//buffer[1] = (HZ_5<<0);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);

		buffer[0] = GYRO_REG_CONFIG;
 80015ba:	231b      	movs	r3, #27
 80015bc:	723b      	strb	r3, [r7, #8]
		buffer[1] = (GYRO_1000dps<<3);
 80015be:	2310      	movs	r3, #16
 80015c0:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80015c2:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <mpu6050_init+0xa0>)
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	f107 0208 	add.w	r2, r7, #8
 80015ca:	2301      	movs	r3, #1
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2302      	movs	r3, #2
 80015d0:	21d0      	movs	r1, #208	@ 0xd0
 80015d2:	f006 fa05 	bl	80079e0 <HAL_I2C_Master_Transmit>

		buffer[0] = ACC_REG_CONFIG;
 80015d6:	231c      	movs	r3, #28
 80015d8:	723b      	strb	r3, [r7, #8]
		buffer[1] = (ACC_16G<<3);
 80015da:	2318      	movs	r3, #24
 80015dc:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <mpu6050_init+0xa0>)
 80015e0:	6818      	ldr	r0, [r3, #0]
 80015e2:	f107 0208 	add.w	r2, r7, #8
 80015e6:	2301      	movs	r3, #1
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2302      	movs	r3, #2
 80015ec:	21d0      	movs	r1, #208	@ 0xd0
 80015ee:	f006 f9f7 	bl	80079e0 <HAL_I2C_Master_Transmit>
		//buffer[1] &= ~(1<<5);
		//buffer[1] |= (1<<5);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
		
		// set aux i2c pass through mode 
		buffer[0] = INT_PIN_CFG;
 80015f2:	2337      	movs	r3, #55	@ 0x37
 80015f4:	723b      	strb	r3, [r7, #8]
		buffer[1] |= (1<<1);
 80015f6:	7a7b      	ldrb	r3, [r7, #9]
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001600:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <mpu6050_init+0xa0>)
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	f107 0208 	add.w	r2, r7, #8
 8001608:	2301      	movs	r3, #1
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2302      	movs	r3, #2
 800160e:	21d0      	movs	r1, #208	@ 0xd0
 8001610:	f006 f9e6 	bl	80079e0 <HAL_I2C_Master_Transmit>

	}
	return k;
 8001614:	f997 300f 	ldrsb.w	r3, [r7, #15]
#endif

}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000138 	.word	0x20000138

08001624 <mpu6050_gyro_get_raw>:
/* Gyro get raw data (Lbs/s)
 * x - rate
 * y - rate
 * z - rate   
 */
void mpu6050_gyro_get_raw(axis3_t *raw){
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af02      	add	r7, sp, #8
 800162a:	6078      	str	r0, [r7, #4]
	  uint8_t buffe[6];
	  buffe[0] = (uint8_t)GYRO_DATA_REG;
 800162c:	2343      	movs	r3, #67	@ 0x43
 800162e:	723b      	strb	r3, [r7, #8]

#ifdef I2C
	  HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 8001630:	4b19      	ldr	r3, [pc, #100]	@ (8001698 <mpu6050_gyro_get_raw+0x74>)
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	f107 0208 	add.w	r2, r7, #8
 8001638:	2301      	movs	r3, #1
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	21d0      	movs	r1, #208	@ 0xd0
 8001640:	f006 f9ce 	bl	80079e0 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 8001644:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <mpu6050_gyro_get_raw+0x74>)
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	f107 0208 	add.w	r2, r7, #8
 800164c:	2301      	movs	r3, #1
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2306      	movs	r3, #6
 8001652:	21d0      	movs	r1, #208	@ 0xd0
 8001654:	f006 fac2 	bl	8007bdc <HAL_I2C_Master_Receive>
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&SPI_PORT,&buffe[0],1,1);
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
#endif
	  raw->x = (int16_t)buffe[0]<<8|buffe[1];
 8001658:	7a3b      	ldrb	r3, [r7, #8]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21a      	sxth	r2, r3
 800165e:	7a7b      	ldrb	r3, [r7, #9]
 8001660:	b21b      	sxth	r3, r3
 8001662:	4313      	orrs	r3, r2
 8001664:	b21a      	sxth	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	801a      	strh	r2, [r3, #0]
	  raw->y = (int16_t)buffe[2]<<8|buffe[3];
 800166a:	7abb      	ldrb	r3, [r7, #10]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	b21a      	sxth	r2, r3
 8001670:	7afb      	ldrb	r3, [r7, #11]
 8001672:	b21b      	sxth	r3, r3
 8001674:	4313      	orrs	r3, r2
 8001676:	b21a      	sxth	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	805a      	strh	r2, [r3, #2]
	  raw->z = (int16_t)buffe[4]<<8|buffe[5];
 800167c:	7b3b      	ldrb	r3, [r7, #12]
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	b21a      	sxth	r2, r3
 8001682:	7b7b      	ldrb	r3, [r7, #13]
 8001684:	b21b      	sxth	r3, r3
 8001686:	4313      	orrs	r3, r2
 8001688:	b21a      	sxth	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	809a      	strh	r2, [r3, #4]
	}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000138 	.word	0x20000138

0800169c <mpu6050_acc_get_raw>:
/* Acc get raw data
	*  x - axis
	*  y - axis
	*  z - axis   
	*/
void mpu6050_acc_get_raw(axis3_t *k){
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	6078      	str	r0, [r7, #4]
	axis3_t p_val =*k;
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	6810      	ldr	r0, [r2, #0]
 80016ac:	6018      	str	r0, [r3, #0]
 80016ae:	8892      	ldrh	r2, [r2, #4]
 80016b0:	809a      	strh	r2, [r3, #4]
	uint8_t buffe[6];
	buffe[0] = (uint8_t)ACC_DATA_REG;
 80016b2:	233b      	movs	r3, #59	@ 0x3b
 80016b4:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 80016b6:	4b19      	ldr	r3, [pc, #100]	@ (800171c <mpu6050_acc_get_raw+0x80>)
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	f107 0208 	add.w	r2, r7, #8
 80016be:	2301      	movs	r3, #1
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	21d0      	movs	r1, #208	@ 0xd0
 80016c6:	f006 f98b 	bl	80079e0 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 80016ca:	4b14      	ldr	r3, [pc, #80]	@ (800171c <mpu6050_acc_get_raw+0x80>)
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	f107 0208 	add.w	r2, r7, #8
 80016d2:	2301      	movs	r3, #1
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2306      	movs	r3, #6
 80016d8:	21d0      	movs	r1, #208	@ 0xd0
 80016da:	f006 fa7f 	bl	8007bdc <HAL_I2C_Master_Receive>
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
*/
      SPI_read(buffe[0],buffe,14);
#endif
	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 80016de:	7a3b      	ldrb	r3, [r7, #8]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	7a7b      	ldrb	r3, [r7, #9]
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 80016f0:	7abb      	ldrb	r3, [r7, #10]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	7afb      	ldrb	r3, [r7, #11]
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 8001702:	7b3b      	ldrb	r3, [r7, #12]
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	b21a      	sxth	r2, r3
 8001708:	7b7b      	ldrb	r3, [r7, #13]
 800170a:	b21b      	sxth	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b21a      	sxth	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	809a      	strh	r2, [r3, #4]
}
 8001714:	bf00      	nop
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000138 	.word	0x20000138

08001720 <qmc5883_init>:
#include "../Lib/axis.h"

const uint8_t qmc_addres = (0x0d<<1);
static I2C_HandleTypeDef *qmc_i2cport;

void qmc5883_init(I2C_HandleTypeDef *i2cport){
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af02      	add	r7, sp, #8
 8001726:	6078      	str	r0, [r7, #4]
	qmc_i2cport = i2cport;
 8001728:	4a12      	ldr	r2, [pc, #72]	@ (8001774 <qmc5883_init+0x54>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
    uint8_t buf[2];
    buf[0]=0x0b;
 800172e:	230b      	movs	r3, #11
 8001730:	733b      	strb	r3, [r7, #12]
    buf[1]=0X01;
 8001732:	2301      	movs	r3, #1
 8001734:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8001736:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <qmc5883_init+0x54>)
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	231a      	movs	r3, #26
 800173c:	4619      	mov	r1, r3
 800173e:	f107 020c 	add.w	r2, r7, #12
 8001742:	2301      	movs	r3, #1
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2302      	movs	r3, #2
 8001748:	f006 f94a 	bl	80079e0 <HAL_I2C_Master_Transmit>
    buf[0]=0x09;
 800174c:	2309      	movs	r3, #9
 800174e:	733b      	strb	r3, [r7, #12]
    buf[1]=0X1D;
 8001750:	231d      	movs	r3, #29
 8001752:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8001754:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <qmc5883_init+0x54>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	231a      	movs	r3, #26
 800175a:	4619      	mov	r1, r3
 800175c:	f107 020c 	add.w	r2, r7, #12
 8001760:	2301      	movs	r3, #1
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2302      	movs	r3, #2
 8001766:	f006 f93b 	bl	80079e0 <HAL_I2C_Master_Transmit>
}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000140 	.word	0x20000140

08001778 <qmc_get_raw>:

void qmc_get_raw(axis3_t *axis){
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af04      	add	r7, sp, #16
 800177e:	6078      	str	r0, [r7, #4]
	  uint8_t buf[6]={0};
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	2300      	movs	r3, #0
 8001786:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(qmc_i2cport,qmc_addres,0x00,1,buf,6,1);
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <qmc_get_raw+0x6c>)
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	231a      	movs	r3, #26
 800178e:	4619      	mov	r1, r3
 8001790:	2301      	movs	r3, #1
 8001792:	9302      	str	r3, [sp, #8]
 8001794:	2306      	movs	r3, #6
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2301      	movs	r3, #1
 80017a0:	2200      	movs	r2, #0
 80017a2:	f006 fd81 	bl	80082a8 <HAL_I2C_Mem_Read>
	  axis->x=((int16_t)buf[1]<<8|buf[0]) ;
 80017a6:	7a7b      	ldrb	r3, [r7, #9]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	7a3b      	ldrb	r3, [r7, #8]
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	801a      	strh	r2, [r3, #0]
	  axis->y=((int16_t)buf[3]<<8|buf[2]);
 80017b8:	7afb      	ldrb	r3, [r7, #11]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21a      	sxth	r2, r3
 80017be:	7abb      	ldrb	r3, [r7, #10]
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	4313      	orrs	r3, r2
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	805a      	strh	r2, [r3, #2]
	  axis->z=((int16_t)buf[5]<<8|buf[4]);
 80017ca:	7b7b      	ldrb	r3, [r7, #13]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b21a      	sxth	r2, r3
 80017d0:	7b3b      	ldrb	r3, [r7, #12]
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b21a      	sxth	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	809a      	strh	r2, [r3, #4]
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000140 	.word	0x20000140

080017e8 <black_box_init>:
FRESULT open_state;
int32_t puts_state;
/*
 * init black box
 */
void black_box_init(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	fs.file = &SDFile;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <black_box_init+0x40>)
 80017ee:	4a0f      	ldr	r2, [pc, #60]	@ (800182c <black_box_init+0x44>)
 80017f0:	605a      	str	r2, [r3, #4]
    mount_state = f_mount(&SDFatFS,"",1);
 80017f2:	2201      	movs	r2, #1
 80017f4:	490e      	ldr	r1, [pc, #56]	@ (8001830 <black_box_init+0x48>)
 80017f6:	480f      	ldr	r0, [pc, #60]	@ (8001834 <black_box_init+0x4c>)
 80017f8:	f00e f952 	bl	800faa0 <f_mount>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	4b0d      	ldr	r3, [pc, #52]	@ (8001838 <black_box_init+0x50>)
 8001802:	701a      	strb	r2, [r3, #0]
    open_state = f_open(&SDFile,"flight.TXT", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001804:	2213      	movs	r2, #19
 8001806:	490d      	ldr	r1, [pc, #52]	@ (800183c <black_box_init+0x54>)
 8001808:	4808      	ldr	r0, [pc, #32]	@ (800182c <black_box_init+0x44>)
 800180a:	f00e f9b1 	bl	800fb70 <f_open>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <black_box_init+0x58>)
 8001814:	701a      	strb	r2, [r3, #0]
    f_lseek (&SDFile,SDFile.fsize);
 8001816:	4b05      	ldr	r3, [pc, #20]	@ (800182c <black_box_init+0x44>)
 8001818:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800181c:	4619      	mov	r1, r3
 800181e:	4803      	ldr	r0, [pc, #12]	@ (800182c <black_box_init+0x44>)
 8001820:	f00e feef 	bl	8010602 <f_lseek>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000144 	.word	0x20000144
 800182c:	2000106c 	.word	0x2000106c
 8001830:	08014184 	.word	0x08014184
 8001834:	20000e38 	.word	0x20000e38
 8001838:	20000350 	.word	0x20000350
 800183c:	08014188 	.word	0x08014188
 8001840:	20000351 	.word	0x20000351

08001844 <black_box_pack_int>:
    fs.buffer_index += index;
}



void black_box_pack_int(int val){
 8001844:	b580      	push	{r7, lr}
 8001846:	b08c      	sub	sp, #48	@ 0x30
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

	fs.indexx=0;
 800184c:	4b48      	ldr	r3, [pc, #288]	@ (8001970 <black_box_pack_int+0x12c>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
	int len_str;
	int val_ = val;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	617b      	str	r3, [r7, #20]
	char str_[11];
	memset(str_,0,11);
 8001856:	f107 0308 	add.w	r3, r7, #8
 800185a:	220b      	movs	r2, #11
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f012 faae 	bl	8013dc0 <memset>
	if(val != 0){
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d02a      	beq.n	80018c0 <black_box_pack_int+0x7c>
		val = abs(val);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	bfb8      	it	lt
 8001870:	425b      	neglt	r3, r3
 8001872:	607b      	str	r3, [r7, #4]
		len_str = intToStr(val,str_,0);
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	2200      	movs	r2, #0
 800187a:	4619      	mov	r1, r3
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f91b 	bl	8001ab8 <intToStr>
 8001882:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(val_ < 0){
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b00      	cmp	r3, #0
 8001888:	da2a      	bge.n	80018e0 <black_box_pack_int+0x9c>
			for(int i = len_str; i > 0; i--){
 800188a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800188e:	e00e      	b.n	80018ae <black_box_pack_int+0x6a>
				str_[i] = str_[i - 1];
 8001890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001892:	3b01      	subs	r3, #1
 8001894:	3330      	adds	r3, #48	@ 0x30
 8001896:	443b      	add	r3, r7
 8001898:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 800189c:	f107 0208 	add.w	r2, r7, #8
 80018a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a2:	4413      	add	r3, r2
 80018a4:	460a      	mov	r2, r1
 80018a6:	701a      	strb	r2, [r3, #0]
			for(int i = len_str; i > 0; i--){
 80018a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018aa:	3b01      	subs	r3, #1
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	dced      	bgt.n	8001890 <black_box_pack_int+0x4c>
			}
			len_str ++;
 80018b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b6:	3301      	adds	r3, #1
 80018b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			str_[0] = '-';
 80018ba:	232d      	movs	r3, #45	@ 0x2d
 80018bc:	723b      	strb	r3, [r7, #8]
 80018be:	e00f      	b.n	80018e0 <black_box_pack_int+0x9c>
		}
	}
	else{
	   fs.buffer[fs.buffer_index] ='0';
 80018c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001970 <black_box_pack_int+0x12c>)
 80018c2:	891b      	ldrh	r3, [r3, #8]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001970 <black_box_pack_int+0x12c>)
 80018c8:	4413      	add	r3, r2
 80018ca:	2230      	movs	r2, #48	@ 0x30
 80018cc:	729a      	strb	r2, [r3, #10]
	   len_str = 1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	   fs.buffer_index ++;
 80018d2:	4b27      	ldr	r3, [pc, #156]	@ (8001970 <black_box_pack_int+0x12c>)
 80018d4:	891b      	ldrh	r3, [r3, #8]
 80018d6:	3301      	adds	r3, #1
 80018d8:	b29a      	uxth	r2, r3
 80018da:	4b25      	ldr	r3, [pc, #148]	@ (8001970 <black_box_pack_int+0x12c>)
 80018dc:	811a      	strh	r2, [r3, #8]
 80018de:	e044      	b.n	800196a <black_box_pack_int+0x126>
		return;
	}
	// copy str to buffer
	int str_idx = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
	int index_flag;
	int max_index = fs.buffer_index + len_str;
 80018e4:	4b22      	ldr	r3, [pc, #136]	@ (8001970 <black_box_pack_int+0x12c>)
 80018e6:	891b      	ldrh	r3, [r3, #8]
 80018e8:	461a      	mov	r2, r3
 80018ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ec:	4413      	add	r3, r2
 80018ee:	61fb      	str	r3, [r7, #28]
	if(max_index <=  MAX_BUFFER_SIZE){
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018f6:	dc08      	bgt.n	800190a <black_box_pack_int+0xc6>
		max_index = fs.buffer_index + len_str;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001970 <black_box_pack_int+0x12c>)
 80018fa:	891b      	ldrh	r3, [r3, #8]
 80018fc:	461a      	mov	r2, r3
 80018fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001900:	4413      	add	r3, r2
 8001902:	61fb      	str	r3, [r7, #28]
		index_flag = 1;
 8001904:	2301      	movs	r3, #1
 8001906:	623b      	str	r3, [r7, #32]
 8001908:	e004      	b.n	8001914 <black_box_pack_int+0xd0>
	}
	else{
		max_index = MAX_BUFFER_SIZE;
 800190a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800190e:	61fb      	str	r3, [r7, #28]
		index_flag = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
	}
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 8001914:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <black_box_pack_int+0x12c>)
 8001916:	891b      	ldrh	r3, [r3, #8]
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	e00f      	b.n	800193c <black_box_pack_int+0xf8>
			fs.buffer[j] = str_[str_idx ++];
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	627a      	str	r2, [r7, #36]	@ 0x24
 8001922:	3330      	adds	r3, #48	@ 0x30
 8001924:	443b      	add	r3, r7
 8001926:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 800192a:	4a11      	ldr	r2, [pc, #68]	@ (8001970 <black_box_pack_int+0x12c>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	4413      	add	r3, r2
 8001930:	330a      	adds	r3, #10
 8001932:	460a      	mov	r2, r1
 8001934:	701a      	strb	r2, [r3, #0]
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	3301      	adds	r3, #1
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	429a      	cmp	r2, r3
 8001942:	dbeb      	blt.n	800191c <black_box_pack_int+0xd8>
	}
	
	if(index_flag){
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d008      	beq.n	800195c <black_box_pack_int+0x118>
		fs.buffer_index += len_str;
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <black_box_pack_int+0x12c>)
 800194c:	891a      	ldrh	r2, [r3, #8]
 800194e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001950:	b29b      	uxth	r3, r3
 8001952:	4413      	add	r3, r2
 8001954:	b29a      	uxth	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <black_box_pack_int+0x12c>)
 8001958:	811a      	strh	r2, [r3, #8]
 800195a:	e006      	b.n	800196a <black_box_pack_int+0x126>
	}
	else{
		fs.buffer_index += MAX_BUFFER_SIZE;
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <black_box_pack_int+0x12c>)
 800195e:	891b      	ldrh	r3, [r3, #8]
 8001960:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b02      	ldr	r3, [pc, #8]	@ (8001970 <black_box_pack_int+0x12c>)
 8001968:	811a      	strh	r2, [r3, #8]
	}
}
 800196a:	3730      	adds	r7, #48	@ 0x30
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000144 	.word	0x20000144

08001974 <black_box_pack_str>:


void black_box_pack_str(char *c){
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

    int i = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 8001980:	e01c      	b.n	80019bc <black_box_pack_str+0x48>
        if((fs.buffer_index + i) > MAX_BUFFER_SIZE){
 8001982:	4b17      	ldr	r3, [pc, #92]	@ (80019e0 <black_box_pack_str+0x6c>)
 8001984:	891b      	ldrh	r3, [r3, #8]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001990:	dd04      	ble.n	800199c <black_box_pack_str+0x28>
                fs.buffer_index = MAX_BUFFER_SIZE;
 8001992:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <black_box_pack_str+0x6c>)
 8001994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001998:	811a      	strh	r2, [r3, #8]
                return;
 800199a:	e01d      	b.n	80019d8 <black_box_pack_str+0x64>
        }
        fs.buffer[fs.buffer_index + i] = c[i];
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	441a      	add	r2, r3
 80019a2:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <black_box_pack_str+0x6c>)
 80019a4:	891b      	ldrh	r3, [r3, #8]
 80019a6:	4619      	mov	r1, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	440b      	add	r3, r1
 80019ac:	7811      	ldrb	r1, [r2, #0]
 80019ae:	4a0c      	ldr	r2, [pc, #48]	@ (80019e0 <black_box_pack_str+0x6c>)
 80019b0:	4413      	add	r3, r2
 80019b2:	460a      	mov	r2, r1
 80019b4:	729a      	strb	r2, [r3, #10]
        i ++;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3301      	adds	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1dc      	bne.n	8001982 <black_box_pack_str+0xe>
    }
    fs.buffer_index += i;
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <black_box_pack_str+0x6c>)
 80019ca:	891a      	ldrh	r2, [r3, #8]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b02      	ldr	r3, [pc, #8]	@ (80019e0 <black_box_pack_str+0x6c>)
 80019d6:	811a      	strh	r2, [r3, #8]
}
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000144 	.word	0x20000144

080019e4 <black_box_pack_char>:

void black_box_pack_char(char c){
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
    fs.buffer[fs.buffer_index ] = c;
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <black_box_pack_char+0x30>)
 80019f0:	891b      	ldrh	r3, [r3, #8]
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <black_box_pack_char+0x30>)
 80019f6:	4413      	add	r3, r2
 80019f8:	79fa      	ldrb	r2, [r7, #7]
 80019fa:	729a      	strb	r2, [r3, #10]
    fs.buffer_index ++;
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <black_box_pack_char+0x30>)
 80019fe:	891b      	ldrh	r3, [r3, #8]
 8001a00:	3301      	adds	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <black_box_pack_char+0x30>)
 8001a06:	811a      	strh	r2, [r3, #8]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000144 	.word	0x20000144

08001a18 <black_box_load>:



void black_box_load()
 {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	  puts_state = f_puts(fs.buffer,fs.file);
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <black_box_load+0x38>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4619      	mov	r1, r3
 8001a22:	480c      	ldr	r0, [pc, #48]	@ (8001a54 <black_box_load+0x3c>)
 8001a24:	f00f f8f9 	bl	8010c1a <f_puts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a58 <black_box_load+0x40>)
 8001a2c:	6013      	str	r3, [r2, #0]
      f_sync(fs.file);
 8001a2e:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <black_box_load+0x38>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f00e fd1c 	bl	8010470 <f_sync>
      memset(fs.buffer,0,MAX_BUFFER_SIZE);
 8001a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <black_box_load+0x3c>)
 8001a40:	f012 f9be 	bl	8013dc0 <memset>
      fs.buffer_index = 0;
 8001a44:	4b02      	ldr	r3, [pc, #8]	@ (8001a50 <black_box_load+0x38>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	811a      	strh	r2, [r3, #8]
 }
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000144 	.word	0x20000144
 8001a54:	2000014e 	.word	0x2000014e
 8001a58:	20000354 	.word	0x20000354

08001a5c <reverse>:




static void reverse( char *str, int len)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001a70:	e018      	b.n	8001aa4 <reverse+0x48>
        temp = str[i];
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	441a      	add	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	440b      	add	r3, r1
 8001a88:	7812      	ldrb	r2, [r2, #0]
 8001a8a:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	701a      	strb	r2, [r3, #0]
        i++;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
        j--;
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dbe2      	blt.n	8001a72 <reverse+0x16>
    }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	371c      	adds	r7, #28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <intToStr>:

 static int intToStr(int x,  char *str, int d)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
    while (x) {
 8001ac4:	e01f      	b.n	8001b06 <intToStr+0x4e>
        str[fs.indexx++] = (x % 10) + '0';
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <intToStr+0x8c>)
 8001aca:	fb83 1302 	smull	r1, r3, r3, r2
 8001ace:	1099      	asrs	r1, r3, #2
 8001ad0:	17d3      	asrs	r3, r2, #31
 8001ad2:	1ac9      	subs	r1, r1, r3
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	1ad1      	subs	r1, r2, r3
 8001ade:	b2ca      	uxtb	r2, r1
 8001ae0:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <intToStr+0x90>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	1c59      	adds	r1, r3, #1
 8001ae6:	4818      	ldr	r0, [pc, #96]	@ (8001b48 <intToStr+0x90>)
 8001ae8:	6001      	str	r1, [r0, #0]
 8001aea:	4619      	mov	r1, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	440b      	add	r3, r1
 8001af0:	3230      	adds	r2, #48	@ 0x30
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4a12      	ldr	r2, [pc, #72]	@ (8001b44 <intToStr+0x8c>)
 8001afa:	fb82 1203 	smull	r1, r2, r2, r3
 8001afe:	1092      	asrs	r2, r2, #2
 8001b00:	17db      	asrs	r3, r3, #31
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	60fb      	str	r3, [r7, #12]
    while (x) {
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1dc      	bne.n	8001ac6 <intToStr+0xe>
    }

    while (fs.indexx < d)
 8001b0c:	e009      	b.n	8001b22 <intToStr+0x6a>
        str[fs.indexx++] = '0';
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <intToStr+0x90>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	490c      	ldr	r1, [pc, #48]	@ (8001b48 <intToStr+0x90>)
 8001b16:	600a      	str	r2, [r1, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	2230      	movs	r2, #48	@ 0x30
 8001b20:	701a      	strb	r2, [r3, #0]
    while (fs.indexx < d)
 8001b22:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <intToStr+0x90>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dcf0      	bgt.n	8001b0e <intToStr+0x56>
    reverse(str,fs.indexx);
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <intToStr+0x90>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	68b8      	ldr	r0, [r7, #8]
 8001b34:	f7ff ff92 	bl	8001a5c <reverse>
    return fs.indexx;
 8001b38:	4b03      	ldr	r3, [pc, #12]	@ (8001b48 <intToStr+0x90>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	66666667 	.word	0x66666667
 8001b48:	20000144 	.word	0x20000144

08001b4c <compassInit>:
int8_t file_open;


/*  Init compass
 */
void compassInit(){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  calibrate_value.scale_factor_axis[X] = 1.0f;
 8001b50:	4b17      	ldr	r3, [pc, #92]	@ (8001bb0 <compassInit+0x64>)
 8001b52:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b56:	60da      	str	r2, [r3, #12]
  calibrate_value.scale_factor_axis[Y] = 1.0f;
 8001b58:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <compassInit+0x64>)
 8001b5a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b5e:	611a      	str	r2, [r3, #16]
  calibrate_value.scale_factor_axis[Z] = 1.0f;
 8001b60:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <compassInit+0x64>)
 8001b62:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b66:	615a      	str	r2, [r3, #20]

  calibrate_value.hard_iron_calibrate_value[X] = 0;
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <compassInit+0x64>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
  calibrate_value.hard_iron_calibrate_value[Y] = 0;
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <compassInit+0x64>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	605a      	str	r2, [r3, #4]
  calibrate_value.hard_iron_calibrate_value[Z] = 0;
 8001b74:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <compassInit+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
	
  //file_open = black_box_create_file(&calib_file,file_name);
	 
 // epprom init
  AT24Cxx_init(&device_array, 0x00, &hi2c2);
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb4 <compassInit+0x68>)
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	480e      	ldr	r0, [pc, #56]	@ (8001bb8 <compassInit+0x6c>)
 8001b80:	f003 fbe6 	bl	8005350 <AT24Cxx_init>
  AT24Cxx_add_dev(&device_array, 0x01, &hi2c2);
 8001b84:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb4 <compassInit+0x68>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	480b      	ldr	r0, [pc, #44]	@ (8001bb8 <compassInit+0x6c>)
 8001b8a:	f003 fc21 	bl	80053d0 <AT24Cxx_add_dev>

  // init sensor
#ifdef QMC5883
  qmc5883_init(&hi2c1);
 8001b8e:	480b      	ldr	r0, [pc, #44]	@ (8001bbc <compassInit+0x70>)
 8001b90:	f7ff fdc6 	bl	8001720 <qmc5883_init>
#else
  hmc5883_init(&hi2c2);
#endif
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 8001b94:	2120      	movs	r1, #32
 8001b96:	480a      	ldr	r0, [pc, #40]	@ (8001bc0 <compassInit+0x74>)
 8001b98:	f005 fd96 	bl	80076c8 <HAL_GPIO_ReadPin>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <compassInit+0x5c>
      compass_calibrate();
 8001ba2:	f000 f8f3 	bl	8001d8c <compass_calibrate>
  }
  else{
      read_calibrate_file();
  }
}
 8001ba6:	e001      	b.n	8001bac <compassInit+0x60>
      read_calibrate_file();
 8001ba8:	f000 f87c 	bl	8001ca4 <read_calibrate_file>
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000380 	.word	0x20000380
 8001bb4:	20000838 	.word	0x20000838
 8001bb8:	2000035c 	.word	0x2000035c
 8001bbc:	200007e4 	.word	0x200007e4
 8001bc0:	40010c00 	.word	0x40010c00

08001bc4 <compass_get>:

void compass_get(axis3_t *out){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	axis3_t as;
#ifdef QMC5883
         qmc_get_raw(&as);
 8001bcc:	f107 0308 	add.w	r3, r7, #8
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fdd1 	bl	8001778 <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
    // calibrate ouput
	out->x = (as.x - calibrate_value.hard_iron_calibrate_value[X]);
 8001bd6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4b30      	ldr	r3, [pc, #192]	@ (8001ca0 <compass_get+0xdc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	801a      	strh	r2, [r3, #0]
	out->y = (as.y - calibrate_value.hard_iron_calibrate_value[Y]);
 8001bec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca0 <compass_get+0xdc>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	805a      	strh	r2, [r3, #2]
	out->z = (as.z - calibrate_value.hard_iron_calibrate_value[Z]);
 8001c02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	4b25      	ldr	r3, [pc, #148]	@ (8001ca0 <compass_get+0xdc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	809a      	strh	r2, [r3, #4]

    out->x *= calibrate_value.scale_factor_axis[X];
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f8c4 	bl	8000dac <__aeabi_i2f>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca0 <compass_get+0xdc>)
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	f7ff f911 	bl	8000e54 <__aeabi_fmul>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fae9 	bl	800120c <__aeabi_f2iz>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	b21a      	sxth	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	801a      	strh	r2, [r3, #0]
    out->y *= calibrate_value.scale_factor_axis[Y];
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff f8af 	bl	8000dac <__aeabi_i2f>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <compass_get+0xdc>)
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	4619      	mov	r1, r3
 8001c56:	4610      	mov	r0, r2
 8001c58:	f7ff f8fc 	bl	8000e54 <__aeabi_fmul>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fad4 	bl	800120c <__aeabi_f2iz>
 8001c64:	4603      	mov	r3, r0
 8001c66:	b21a      	sxth	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	805a      	strh	r2, [r3, #2]
    out->z *= calibrate_value.scale_factor_axis[Z];
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff f89a 	bl	8000dac <__aeabi_i2f>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <compass_get+0xdc>)
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4610      	mov	r0, r2
 8001c82:	f7ff f8e7 	bl	8000e54 <__aeabi_fmul>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fabf 	bl	800120c <__aeabi_f2iz>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b21a      	sxth	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	809a      	strh	r2, [r3, #4]
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000380 	.word	0x20000380

08001ca4 <read_calibrate_file>:

/* read calibrate data from eprrom
 * 
 */

void read_calibrate_file(){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
	int32_t sum_all = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
    AT24Cxx_read_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_value,0x0010,sizeof(cali_mag_t));
 8001cae:	4b33      	ldr	r3, [pc, #204]	@ (8001d7c <read_calibrate_file+0xd8>)
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	231c      	movs	r3, #28
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	4932      	ldr	r1, [pc, #200]	@ (8001d80 <read_calibrate_file+0xdc>)
 8001cb8:	f003 fce3 	bl	8005682 <AT24Cxx_read_byte_buffer>
   	sum_all += calibrate_value.scale_factor_axis[X];
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff f875 	bl	8000dac <__aeabi_i2f>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d80 <read_calibrate_file+0xdc>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4610      	mov	r0, r2
 8001ccc:	f7fe ffba 	bl	8000c44 <__addsf3>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fa9a 	bl	800120c <__aeabi_f2iz>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Y];
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff f865 	bl	8000dac <__aeabi_i2f>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <read_calibrate_file+0xdc>)
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f7fe ffaa 	bl	8000c44 <__addsf3>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fa8a 	bl	800120c <__aeabi_f2iz>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Z];
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff f855 	bl	8000dac <__aeabi_i2f>
 8001d02:	4602      	mov	r2, r0
 8001d04:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <read_calibrate_file+0xdc>)
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f7fe ff9a 	bl	8000c44 <__addsf3>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fa7a 	bl	800120c <__aeabi_f2iz>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	607b      	str	r3, [r7, #4]

    sum_all += (int)calibrate_value.hard_iron_calibrate_value[X];
 8001d1c:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <read_calibrate_file+0xdc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Y];
 8001d26:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <read_calibrate_file+0xdc>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Z];
 8001d30:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <read_calibrate_file+0xdc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	607b      	str	r3, [r7, #4]

    if(ABS(sum_all - (int)calibrate_value.sum_all_value) > 40){
 8001d3a:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <read_calibrate_file+0xdc>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	bfb8      	it	lt
 8001d4a:	425b      	neglt	r3, r3
 8001d4c:	2b28      	cmp	r3, #40	@ 0x28
 8001d4e:	dd11      	ble.n	8001d74 <read_calibrate_file+0xd0>
      while(1){
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d54:	480b      	ldr	r0, [pc, #44]	@ (8001d84 <read_calibrate_file+0xe0>)
 8001d56:	f005 fce6 	bl	8007726 <HAL_GPIO_TogglePin>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d5a:	2120      	movs	r1, #32
 8001d5c:	480a      	ldr	r0, [pc, #40]	@ (8001d88 <read_calibrate_file+0xe4>)
 8001d5e:	f005 fce2 	bl	8007726 <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001d62:	2110      	movs	r1, #16
 8001d64:	4808      	ldr	r0, [pc, #32]	@ (8001d88 <read_calibrate_file+0xe4>)
 8001d66:	f005 fcde 	bl	8007726 <HAL_GPIO_TogglePin>
       HAL_Delay(50); // 10 Hz loop
 8001d6a:	2032      	movs	r0, #50	@ 0x32
 8001d6c:	f004 fd90 	bl	8006890 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d70:	bf00      	nop
 8001d72:	e7ed      	b.n	8001d50 <read_calibrate_file+0xac>
      }
    }
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	2000035c 	.word	0x2000035c
 8001d80:	20000380 	.word	0x20000380
 8001d84:	40011000 	.word	0x40011000
 8001d88:	40010800 	.word	0x40010800

08001d8c <compass_calibrate>:


/* Calibrate function
 * write calibrate value to sd card
 */
static void compass_calibrate(){
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b095      	sub	sp, #84	@ 0x54
 8001d90:	af00      	add	r7, sp, #0
    int16_t max_val[] = {-32767,-32767,-32767};
 8001d92:	4a9f      	ldr	r2, [pc, #636]	@ (8002010 <compass_calibrate+0x284>)
 8001d94:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d9c:	6018      	str	r0, [r3, #0]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	8019      	strh	r1, [r3, #0]
    int16_t min_val[] = {32767, 32767, 32767};
 8001da2:	4a9c      	ldr	r2, [pc, #624]	@ (8002014 <compass_calibrate+0x288>)
 8001da4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001da8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dac:	6018      	str	r0, [r3, #0]
 8001dae:	3304      	adds	r3, #4
 8001db0:	8019      	strh	r1, [r3, #0]
    uint8_t fist_data = TRUE;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    cali_mag_t calibrate_temp;
    ignore_data = 0;
 8001db8:	4b97      	ldr	r3, [pc, #604]	@ (8002018 <compass_calibrate+0x28c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	801a      	strh	r2, [r3, #0]
    int16_t last_axis[3];
    axis3_t as;

	while(!file_open){
 8001dbe:	e0b5      	b.n	8001f2c <compass_calibrate+0x1a0>
 // read data from sensor
#ifdef QMC5883
         qmc_get_raw(&as);
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fcd8 	bl	8001778 <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
        if(fist_data){
 8001dc8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00c      	beq.n	8001dea <compass_calibrate+0x5e>
          last_axis[X] = as.x;
 8001dd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dd4:	81bb      	strh	r3, [r7, #12]
          last_axis[Y] = as.y;
 8001dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dda:	81fb      	strh	r3, [r7, #14]
          last_axis[Z] = as.z;
 8001ddc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001de0:	823b      	strh	r3, [r7, #16]
          fist_data = FALSE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          continue;
 8001de8:	e0a0      	b.n	8001f2c <compass_calibrate+0x1a0>
        }
        int16_t delta_x_ = as.x -  last_axis[X];
 8001dea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        int16_t delta_y_ = as.y -  last_axis[Y];
 8001dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        int16_t delta_z_ = as.z -  last_axis[Z];
 8001e12:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        // ignore wrong value and set to zero
        int16_t ckec = sqrt(sq(delta_x_) + sq(delta_y_) + sq(delta_z_));
 8001e26:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001e2a:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8001e2e:	fb03 f202 	mul.w	r2, r3, r2
 8001e32:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8001e36:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	@ 0x48
 8001e3a:	fb01 f303 	mul.w	r3, r1, r3
 8001e3e:	441a      	add	r2, r3
 8001e40:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001e44:	f9b7 1046 	ldrsh.w	r1, [r7, #70]	@ 0x46
 8001e48:	fb01 f303 	mul.w	r3, r1, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb40 	bl	80004d4 <__aeabi_i2d>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f012 f802 	bl	8013e64 <sqrt>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f7fe fe4e 	bl	8000b08 <__aeabi_d2iz>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        if(ckec > max_change){
 8001e72:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001e76:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	dd09      	ble.n	8001e92 <compass_calibrate+0x106>
            fist_data = TRUE; 
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            ignore_data ++;
 8001e84:	4b64      	ldr	r3, [pc, #400]	@ (8002018 <compass_calibrate+0x28c>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b62      	ldr	r3, [pc, #392]	@ (8002018 <compass_calibrate+0x28c>)
 8001e8e:	801a      	strh	r2, [r3, #0]
            continue;
 8001e90:	e04c      	b.n	8001f2c <compass_calibrate+0x1a0>
        }
        last_axis[X] = as.x;
 8001e92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e96:	81bb      	strh	r3, [r7, #12]
        last_axis[Y] = as.y;
 8001e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e9c:	81fb      	strh	r3, [r7, #14]
        last_axis[Z] = as.z;
 8001e9e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ea2:	823b      	strh	r3, [r7, #16]
        // get max value each axis
        if(as.x > max_val[X]) max_val[X] = as.x;
 8001ea4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ea8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001eac:	429a      	cmp	r2, r3
 8001eae:	dd02      	ble.n	8001eb6 <compass_calibrate+0x12a>
 8001eb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eb4:	873b      	strh	r3, [r7, #56]	@ 0x38
        if(as.y > max_val[Y]) max_val[Y] = as.y;
 8001eb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001eba:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	dd02      	ble.n	8001ec8 <compass_calibrate+0x13c>
 8001ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        if(as.z > max_val[Z]) max_val[Z] = as.z;
 8001ec8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ecc:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	dd02      	ble.n	8001eda <compass_calibrate+0x14e>
 8001ed4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ed8:	87bb      	strh	r3, [r7, #60]	@ 0x3c

        // min value
        if(as.x < min_val[X]) min_val[X] = as.x;
 8001eda:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ede:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	da02      	bge.n	8001eec <compass_calibrate+0x160>
 8001ee6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eea:	863b      	strh	r3, [r7, #48]	@ 0x30
        if(as.y < min_val[Y]) min_val[Y] = as.y;
 8001eec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ef0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	da02      	bge.n	8001efe <compass_calibrate+0x172>
 8001ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efc:	867b      	strh	r3, [r7, #50]	@ 0x32
        if(as.z < min_val[Z]) min_val[Z] = as.z;
 8001efe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f02:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001f06:	429a      	cmp	r2, r3
 8001f08:	da02      	bge.n	8001f10 <compass_calibrate+0x184>
 8001f0a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001f0e:	86bb      	strh	r3, [r7, #52]	@ 0x34
        black_box_pack_str(&calib_file,"\n");
		
		black_box_load(&calib_file);
        black_box_sync(&calib_file);
        */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001f10:	2110      	movs	r1, #16
 8001f12:	4842      	ldr	r0, [pc, #264]	@ (800201c <compass_calibrate+0x290>)
 8001f14:	f005 fc07 	bl	8007726 <HAL_GPIO_TogglePin>
        HAL_Delay(20); // 10 Hz loop
 8001f18:	2014      	movs	r0, #20
 8001f1a:	f004 fcb9 	bl	8006890 <HAL_Delay>

       if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5) == 0){
 8001f1e:	2120      	movs	r1, #32
 8001f20:	483f      	ldr	r0, [pc, #252]	@ (8002020 <compass_calibrate+0x294>)
 8001f22:	f005 fbd1 	bl	80076c8 <HAL_GPIO_ReadPin>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <compass_calibrate+0x1ae>
	while(!file_open){
 8001f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8002024 <compass_calibrate+0x298>)
 8001f2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f43f af44 	beq.w	8001dc0 <compass_calibrate+0x34>
 8001f38:	e000      	b.n	8001f3c <compass_calibrate+0x1b0>
              break;
 8001f3a:	bf00      	nop
          }
	  }

    // check all min value is negative sign
    if(min_val[X] > 0 || min_val[Y] > 0 || min_val[Z] > 0){
 8001f3c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	dc02      	bgt.n	8001f4a <compass_calibrate+0x1be>
 8001f44:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001f48:	2b00      	cmp	r3, #0
          // error
    }
    // check all max value is positive sign
    if(max_val[X] < 0 || max_val[Y] < 0 || max_val[Z] < 0){
 8001f4a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db02      	blt.n	8001f58 <compass_calibrate+0x1cc>
 8001f52:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001f56:	2b00      	cmp	r3, #0
          // error
    }
    // calibrate value for each axis
    calibrate_temp.hard_iron_calibrate_value[X] = (int)(max_val[X] + min_val[X])/2;
 8001f58:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001f62:	4413      	add	r3, r2
 8001f64:	0fda      	lsrs	r2, r3, #31
 8001f66:	4413      	add	r3, r2
 8001f68:	105b      	asrs	r3, r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
    calibrate_temp.hard_iron_calibrate_value[Y] = (int)(max_val[Y] + min_val[Y])/2;
 8001f6c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001f70:	461a      	mov	r2, r3
 8001f72:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001f76:	4413      	add	r3, r2
 8001f78:	0fda      	lsrs	r2, r3, #31
 8001f7a:	4413      	add	r3, r2
 8001f7c:	105b      	asrs	r3, r3, #1
 8001f7e:	61bb      	str	r3, [r7, #24]
    calibrate_temp.hard_iron_calibrate_value[Z] = (int)(max_val[Z] + min_val[Z])/2;
 8001f80:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001f84:	461a      	mov	r2, r3
 8001f86:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001f8a:	4413      	add	r3, r2
 8001f8c:	0fda      	lsrs	r2, r3, #31
 8001f8e:	4413      	add	r3, r2
 8001f90:	105b      	asrs	r3, r3, #1
 8001f92:	61fb      	str	r3, [r7, #28]

    // calculate scale factor for each axis
    int16_t x_ = abs(max_val[X]) + abs(min_val[X]);
 8001f94:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bfb8      	it	lt
 8001f9c:	425b      	neglt	r3, r3
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bfb8      	it	lt
 8001fa8:	425b      	neglt	r3, r3
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t y_ = abs(max_val[Y]) + abs(min_val[Y]);
 8001fb4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bfb8      	it	lt
 8001fbc:	425b      	neglt	r3, r3
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bfb8      	it	lt
 8001fc8:	425b      	neglt	r3, r3
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    int16_t z_ = abs(max_val[Z]) + abs(min_val[Z]);
 8001fd4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bfb8      	it	lt
 8001fdc:	425b      	neglt	r3, r3
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bfb8      	it	lt
 8001fe8:	425b      	neglt	r3, r3
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    // get largest value
    int16_t max_value = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(x_ > y_)
 8001ff8:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8001ffc:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8002000:	429a      	cmp	r2, r3
 8002002:	dd11      	ble.n	8002028 <compass_calibrate+0x29c>
        max_value = x_;
 8002004:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002008:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800200c:	e010      	b.n	8002030 <compass_calibrate+0x2a4>
 800200e:	bf00      	nop
 8002010:	08014194 	.word	0x08014194
 8002014:	0801419c 	.word	0x0801419c
 8002018:	20000358 	.word	0x20000358
 800201c:	40010800 	.word	0x40010800
 8002020:	40010c00 	.word	0x40010c00
 8002024:	2000039c 	.word	0x2000039c
    else
        max_value = y_;
 8002028:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800202c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(max_value < z_)
 8002030:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 8002034:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002038:	429a      	cmp	r2, r3
 800203a:	da02      	bge.n	8002042 <compass_calibrate+0x2b6>
        max_value = z_;
 800203c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800203e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

    // caculate scale
    calibrate_temp.scale_factor_axis[X] = (float)x_/max_value;
 8002042:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe feb0 	bl	8000dac <__aeabi_i2f>
 800204c:	4604      	mov	r4, r0
 800204e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe feaa 	bl	8000dac <__aeabi_i2f>
 8002058:	4603      	mov	r3, r0
 800205a:	4619      	mov	r1, r3
 800205c:	4620      	mov	r0, r4
 800205e:	f7fe ffad 	bl	8000fbc <__aeabi_fdiv>
 8002062:	4603      	mov	r3, r0
 8002064:	623b      	str	r3, [r7, #32]
    calibrate_temp.scale_factor_axis[Y] = (float)y_/max_value;
 8002066:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fe9e 	bl	8000dac <__aeabi_i2f>
 8002070:	4604      	mov	r4, r0
 8002072:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fe98 	bl	8000dac <__aeabi_i2f>
 800207c:	4603      	mov	r3, r0
 800207e:	4619      	mov	r1, r3
 8002080:	4620      	mov	r0, r4
 8002082:	f7fe ff9b 	bl	8000fbc <__aeabi_fdiv>
 8002086:	4603      	mov	r3, r0
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
    calibrate_temp.scale_factor_axis[Z] = (float)z_/max_value;
 800208a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fe8c 	bl	8000dac <__aeabi_i2f>
 8002094:	4604      	mov	r4, r0
 8002096:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fe86 	bl	8000dac <__aeabi_i2f>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4619      	mov	r1, r3
 80020a4:	4620      	mov	r0, r4
 80020a6:	f7fe ff89 	bl	8000fbc <__aeabi_fdiv>
 80020aa:	4603      	mov	r3, r0
 80020ac:	62bb      	str	r3, [r7, #40]	@ 0x28

    calibrate_temp.sum_all_value = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[X];
 80020b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fe79 	bl	8000dac <__aeabi_i2f>
 80020ba:	4602      	mov	r2, r0
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	4619      	mov	r1, r3
 80020c0:	4610      	mov	r0, r2
 80020c2:	f7fe fdbf 	bl	8000c44 <__addsf3>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f89f 	bl	800120c <__aeabi_f2iz>
 80020ce:	4603      	mov	r3, r0
 80020d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Y];
 80020d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fe69 	bl	8000dac <__aeabi_i2f>
 80020da:	4602      	mov	r2, r0
 80020dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020de:	4619      	mov	r1, r3
 80020e0:	4610      	mov	r0, r2
 80020e2:	f7fe fdaf 	bl	8000c44 <__addsf3>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff f88f 	bl	800120c <__aeabi_f2iz>
 80020ee:	4603      	mov	r3, r0
 80020f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Z];
 80020f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fe59 	bl	8000dac <__aeabi_i2f>
 80020fa:	4602      	mov	r2, r0
 80020fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fe:	4619      	mov	r1, r3
 8002100:	4610      	mov	r0, r2
 8002102:	f7fe fd9f 	bl	8000c44 <__addsf3>
 8002106:	4603      	mov	r3, r0
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff f87f 	bl	800120c <__aeabi_f2iz>
 800210e:	4603      	mov	r3, r0
 8002110:	62fb      	str	r3, [r7, #44]	@ 0x2c

    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[X];
 8002112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	4413      	add	r3, r2
 8002118:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Y];
 800211a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	4413      	add	r3, r2
 8002120:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Z];
 8002122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	4413      	add	r3, r2
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // write data to eprrom
    AT24Cxx_write_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_temp, 0x0010, sizeof(cali_mag_t));
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <compass_calibrate+0x3c4>)
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	f107 0114 	add.w	r1, r7, #20
 8002132:	231c      	movs	r3, #28
 8002134:	2210      	movs	r2, #16
 8002136:	f003 f9a2 	bl	800547e <AT24Cxx_write_byte_buffer>
  
   // black_box_load(&calib_file);
   // black_box_close(&calib_file);
	
	while(1){
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800213a:	2120      	movs	r1, #32
 800213c:	4805      	ldr	r0, [pc, #20]	@ (8002154 <compass_calibrate+0x3c8>)
 800213e:	f005 faf2 	bl	8007726 <HAL_GPIO_TogglePin>
      HAL_Delay(1000); // 10 Hz loop
 8002142:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002146:	f004 fba3 	bl	8006890 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800214a:	bf00      	nop
 800214c:	e7f5      	b.n	800213a <compass_calibrate+0x3ae>
 800214e:	bf00      	nop
 8002150:	2000035c 	.word	0x2000035c
 8002154:	40010800 	.word	0x40010800

08002158 <gps_init>:

/*  
 * Init function 
 */
void gps_init(UART_HandleTypeDef *uart,uint32_t baudrate)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
	_gpsUartPort = uart;
 8002162:	4a27      	ldr	r2, [pc, #156]	@ (8002200 <gps_init+0xa8>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6013      	str	r3, [r2, #0]
    _gps.timer_ = millis();
 8002168:	4b26      	ldr	r3, [pc, #152]	@ (8002204 <gps_init+0xac>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002170:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <gps_init+0xb0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4413      	add	r3, r2
 8002176:	4a25      	ldr	r2, [pc, #148]	@ (800220c <gps_init+0xb4>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	099b      	lsrs	r3, r3, #6
 800217e:	4a24      	ldr	r2, [pc, #144]	@ (8002210 <gps_init+0xb8>)
 8002180:	62d3      	str	r3, [r2, #44]	@ 0x2c
    // reset all viriables
    _payload_length = 0;
 8002182:	4b24      	ldr	r3, [pc, #144]	@ (8002214 <gps_init+0xbc>)
 8002184:	2200      	movs	r2, #0
 8002186:	801a      	strh	r2, [r3, #0]
    _payload_counter = 0;
 8002188:	4b23      	ldr	r3, [pc, #140]	@ (8002218 <gps_init+0xc0>)
 800218a:	2200      	movs	r2, #0
 800218c:	801a      	strh	r2, [r3, #0]
    _msg_id = 0;
 800218e:	4b23      	ldr	r3, [pc, #140]	@ (800221c <gps_init+0xc4>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]

    // Configuration _gps module
    HAL_UART_Transmit(_gpsUartPort,ubloxInit,sizeof(ubloxInit),1000);
 8002194:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <gps_init+0xa8>)
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800219c:	22a8      	movs	r2, #168	@ 0xa8
 800219e:	4920      	ldr	r1, [pc, #128]	@ (8002220 <gps_init+0xc8>)
 80021a0:	f009 fd0a 	bl	800bbb8 <HAL_UART_Transmit>
    HAL_Delay(10);
 80021a4:	200a      	movs	r0, #10
 80021a6:	f004 fb73 	bl	8006890 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,ubloxSbasInit,sizeof(ubloxSbasInit),1000);
 80021aa:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <gps_init+0xa8>)
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021b2:	2210      	movs	r2, #16
 80021b4:	491b      	ldr	r1, [pc, #108]	@ (8002224 <gps_init+0xcc>)
 80021b6:	f009 fcff 	bl	800bbb8 <HAL_UART_Transmit>
    HAL_Delay(10);
 80021ba:	200a      	movs	r0, #10
 80021bc:	f004 fb68 	bl	8006890 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,uart57600,sizeof(uart57600),1000);
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <gps_init+0xa8>)
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021c8:	221c      	movs	r2, #28
 80021ca:	4917      	ldr	r1, [pc, #92]	@ (8002228 <gps_init+0xd0>)
 80021cc:	f009 fcf4 	bl	800bbb8 <HAL_UART_Transmit>
    HAL_Delay(10);
 80021d0:	200a      	movs	r0, #10
 80021d2:	f004 fb5d 	bl	8006890 <HAL_Delay>
    // set baudrate
    _gpsUartPort->Init.BaudRate = baudrate;
 80021d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <gps_init+0xa8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(_gpsUartPort); 
 80021de:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <gps_init+0xa8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f009 fc98 	bl	800bb18 <HAL_UART_Init>

    // read gps using interrup
	HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <gps_init+0xa8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2201      	movs	r2, #1
 80021ee:	490f      	ldr	r1, [pc, #60]	@ (800222c <gps_init+0xd4>)
 80021f0:	4618      	mov	r0, r3
 80021f2:	f009 fd64 	bl	800bcbe <HAL_UART_Receive_IT>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200003d8 	.word	0x200003d8
 8002204:	20000544 	.word	0x20000544
 8002208:	20000548 	.word	0x20000548
 800220c:	10624dd3 	.word	0x10624dd3
 8002210:	200003a0 	.word	0x200003a0
 8002214:	200003e6 	.word	0x200003e6
 8002218:	200003e8 	.word	0x200003e8
 800221c:	200003e4 	.word	0x200003e4
 8002220:	080142bc 	.word	0x080142bc
 8002224:	20000000 	.word	0x20000000
 8002228:	08014364 	.word	0x08014364
 800222c:	200003dc 	.word	0x200003dc

08002230 <gps_uart_port>:

UART_HandleTypeDef *gps_uart_port(){
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
    return _gpsUartPort;
 8002234:	4b02      	ldr	r3, [pc, #8]	@ (8002240 <gps_uart_port+0x10>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	200003d8 	.word	0x200003d8

08002244 <gps_callback>:
/* 
 * REad gps by using interrup
 */
uint32_t gps_interrupt_count;
void gps_callback()
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
   // parse data
   gps_interrupt_count++;
 8002248:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <gps_callback+0x2c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	4a08      	ldr	r2, [pc, #32]	@ (8002270 <gps_callback+0x2c>)
 8002250:	6013      	str	r3, [r2, #0]
   newdata(_char);
 8002252:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <gps_callback+0x30>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f8f6 	bl	8002448 <newdata>
   HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <gps_callback+0x34>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2201      	movs	r2, #1
 8002262:	4904      	ldr	r1, [pc, #16]	@ (8002274 <gps_callback+0x30>)
 8002264:	4618      	mov	r0, r3
 8002266:	f009 fd2a 	bl	800bcbe <HAL_UART_Receive_IT>
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200004b4 	.word	0x200004b4
 8002274:	200003dc 	.word	0x200003dc
 8002278:	200003d8 	.word	0x200003d8

0800227c <parse_msg>:
        *ck_a += *data;
        *ck_b += *ck_a;
        data++;
    }
}
static uint8_t parse_msg(){
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
    static uint8_t _new_speed;
    static uint8_t next_fix;
    static uint32_t lastPosUpdateTime;
    static uint8_t _new_position;
    switch (_msg_id) {
 8002280:	4b67      	ldr	r3, [pc, #412]	@ (8002420 <parse_msg+0x1a4>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b12      	cmp	r3, #18
 8002286:	dc2b      	bgt.n	80022e0 <parse_msg+0x64>
 8002288:	2b02      	cmp	r3, #2
 800228a:	f2c0 80ad 	blt.w	80023e8 <parse_msg+0x16c>
 800228e:	3b02      	subs	r3, #2
 8002290:	2b10      	cmp	r3, #16
 8002292:	f200 80a9 	bhi.w	80023e8 <parse_msg+0x16c>
 8002296:	a201      	add	r2, pc, #4	@ (adr r2, 800229c <parse_msg+0x20>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022e9 	.word	0x080022e9
 80022a0:	0800235d 	.word	0x0800235d
 80022a4:	080023e9 	.word	0x080023e9
 80022a8:	080023e9 	.word	0x080023e9
 80022ac:	08002389 	.word	0x08002389
 80022b0:	080023e9 	.word	0x080023e9
 80022b4:	080023e9 	.word	0x080023e9
 80022b8:	080023e9 	.word	0x080023e9
 80022bc:	080023e9 	.word	0x080023e9
 80022c0:	080023e9 	.word	0x080023e9
 80022c4:	080023e9 	.word	0x080023e9
 80022c8:	080023e9 	.word	0x080023e9
 80022cc:	080023e9 	.word	0x080023e9
 80022d0:	080023e9 	.word	0x080023e9
 80022d4:	080023e9 	.word	0x080023e9
 80022d8:	080023e9 	.word	0x080023e9
 80022dc:	080023a1 	.word	0x080023a1
 80022e0:	2b30      	cmp	r3, #48	@ 0x30
 80022e2:	f000 8083 	beq.w	80023ec <parse_msg+0x170>
 80022e6:	e07f      	b.n	80023e8 <parse_msg+0x16c>
        case MSG_POSLLH:
            _gps.position[LON] = _buffer.posllh.longitude;
 80022e8:	4b4e      	ldr	r3, [pc, #312]	@ (8002424 <parse_msg+0x1a8>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002428 <parse_msg+0x1ac>)
 80022ee:	6013      	str	r3, [r2, #0]
            _gps.position[LAT] = _buffer.posllh.latitude;
 80022f0:	4b4c      	ldr	r3, [pc, #304]	@ (8002424 <parse_msg+0x1a8>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002428 <parse_msg+0x1ac>)
 80022f6:	6053      	str	r3, [r2, #4]
            _gps.altitude_msl = _buffer.posllh.altitude_msl;
 80022f8:	4b4a      	ldr	r3, [pc, #296]	@ (8002424 <parse_msg+0x1a8>)
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002428 <parse_msg+0x1ac>)
 8002300:	861a      	strh	r2, [r3, #48]	@ 0x30
            _gps.horizontalAccuracy = _buffer.posllh.horizontal_accuracy;
 8002302:	4b48      	ldr	r3, [pc, #288]	@ (8002424 <parse_msg+0x1a8>)
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	4a48      	ldr	r2, [pc, #288]	@ (8002428 <parse_msg+0x1ac>)
 8002308:	6213      	str	r3, [r2, #32]
            _gps.VerticalAccuracy = _buffer.posllh.vertical_accuracy;
 800230a:	4b46      	ldr	r3, [pc, #280]	@ (8002424 <parse_msg+0x1a8>)
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	4a46      	ldr	r2, [pc, #280]	@ (8002428 <parse_msg+0x1ac>)
 8002310:	6253      	str	r3, [r2, #36]	@ 0x24
            /* time update position */
            if(lastPosUpdateTime == 0){
 8002312:	4b46      	ldr	r3, [pc, #280]	@ (800242c <parse_msg+0x1b0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d06a      	beq.n	80023f0 <parse_msg+0x174>
                break;
                lastPosUpdateTime = millis();
            }
            _gps.posUpdateTime = millis() - lastPosUpdateTime;
 800231a:	4b45      	ldr	r3, [pc, #276]	@ (8002430 <parse_msg+0x1b4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002322:	4b44      	ldr	r3, [pc, #272]	@ (8002434 <parse_msg+0x1b8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4a43      	ldr	r2, [pc, #268]	@ (8002438 <parse_msg+0x1bc>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	099a      	lsrs	r2, r3, #6
 8002330:	4b3e      	ldr	r3, [pc, #248]	@ (800242c <parse_msg+0x1b0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	4a3c      	ldr	r2, [pc, #240]	@ (8002428 <parse_msg+0x1ac>)
 8002338:	6293      	str	r3, [r2, #40]	@ 0x28
            lastPosUpdateTime = millis();
 800233a:	4b3d      	ldr	r3, [pc, #244]	@ (8002430 <parse_msg+0x1b4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002342:	4b3c      	ldr	r3, [pc, #240]	@ (8002434 <parse_msg+0x1b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4413      	add	r3, r2
 8002348:	4a3b      	ldr	r2, [pc, #236]	@ (8002438 <parse_msg+0x1bc>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	099b      	lsrs	r3, r3, #6
 8002350:	4a36      	ldr	r2, [pc, #216]	@ (800242c <parse_msg+0x1b0>)
 8002352:	6013      	str	r3, [r2, #0]
            /* flag set */
            _new_position = TRUE;
 8002354:	4b39      	ldr	r3, [pc, #228]	@ (800243c <parse_msg+0x1c0>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
            break;
 800235a:	e04a      	b.n	80023f2 <parse_msg+0x176>
        case MSG_STATUS:
            next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type == FIX_3D);
 800235c:	4b31      	ldr	r3, [pc, #196]	@ (8002424 <parse_msg+0x1a8>)
 800235e:	795b      	ldrb	r3, [r3, #5]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <parse_msg+0xf8>
 8002368:	4b2e      	ldr	r3, [pc, #184]	@ (8002424 <parse_msg+0x1a8>)
 800236a:	791b      	ldrb	r3, [r3, #4]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d101      	bne.n	8002374 <parse_msg+0xf8>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <parse_msg+0xfa>
 8002374:	2300      	movs	r3, #0
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b31      	ldr	r3, [pc, #196]	@ (8002440 <parse_msg+0x1c4>)
 800237a:	701a      	strb	r2, [r3, #0]
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.status.fix_type;
 800237c:	4b29      	ldr	r3, [pc, #164]	@ (8002424 <parse_msg+0x1a8>)
 800237e:	791a      	ldrb	r2, [r3, #4]
 8002380:	4b29      	ldr	r3, [pc, #164]	@ (8002428 <parse_msg+0x1ac>)
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            break;
 8002386:	e034      	b.n	80023f2 <parse_msg+0x176>
        case MSG_SOL:
            //next_fix = (_buffer.solution.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.solution.fix_type == FIX_3D);
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.solution.fix_type;
 8002388:	4b26      	ldr	r3, [pc, #152]	@ (8002424 <parse_msg+0x1a8>)
 800238a:	7a9a      	ldrb	r2, [r3, #10]
 800238c:	4b26      	ldr	r3, [pc, #152]	@ (8002428 <parse_msg+0x1ac>)
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            _gps.numSat = _buffer.solution.satellites;
 8002392:	4b24      	ldr	r3, [pc, #144]	@ (8002424 <parse_msg+0x1a8>)
 8002394:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8002398:	4b23      	ldr	r3, [pc, #140]	@ (8002428 <parse_msg+0x1ac>)
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            break;
 800239e:	e028      	b.n	80023f2 <parse_msg+0x176>
        case MSG_VELNED:
            _gps.velocity[LAT] = _buffer.velned.ned_north;
 80023a0:	4b20      	ldr	r3, [pc, #128]	@ (8002424 <parse_msg+0x1a8>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4a20      	ldr	r2, [pc, #128]	@ (8002428 <parse_msg+0x1ac>)
 80023a6:	60d3      	str	r3, [r2, #12]
            _gps.velocity[LON] = _buffer.velned.ned_east;
 80023a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002424 <parse_msg+0x1a8>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002428 <parse_msg+0x1ac>)
 80023ae:	6093      	str	r3, [r2, #8]
            _gps.velocity[DOWN] = _buffer.velned.ned_down;
 80023b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002424 <parse_msg+0x1a8>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002428 <parse_msg+0x1ac>)
 80023b6:	6113      	str	r3, [r2, #16]
            _gps.Gspeed = _buffer.velned.speed_2d;
 80023b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002424 <parse_msg+0x1a8>)
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <parse_msg+0x1ac>)
 80023c0:	615a      	str	r2, [r3, #20]
            _gps.ground_course = _buffer.velned.heading_2d;
 80023c2:	4b18      	ldr	r3, [pc, #96]	@ (8002424 <parse_msg+0x1a8>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	4b17      	ldr	r3, [pc, #92]	@ (8002428 <parse_msg+0x1ac>)
 80023ca:	865a      	strh	r2, [r3, #50]	@ 0x32
            _gps.speedAccuracy = _buffer.velned.speed_accuracy;
 80023cc:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <parse_msg+0x1a8>)
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <parse_msg+0x1ac>)
 80023d4:	619a      	str	r2, [r3, #24]
            _gps.headingAccuracy = _buffer.velned.heading_accuracy;
 80023d6:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <parse_msg+0x1a8>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	461a      	mov	r2, r3
 80023dc:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <parse_msg+0x1ac>)
 80023de:	61da      	str	r2, [r3, #28]
            _new_speed = TRUE;
 80023e0:	4b18      	ldr	r3, [pc, #96]	@ (8002444 <parse_msg+0x1c8>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
            break;
 80023e6:	e004      	b.n	80023f2 <parse_msg+0x176>
            svinfo_rate[0] = svinfo_rate[1];
            svinfo_rate[1] = millis();
            */
            break;
        default:
            return FALSE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e014      	b.n	8002416 <parse_msg+0x19a>
            break;
 80023ec:	bf00      	nop
 80023ee:	e000      	b.n	80023f2 <parse_msg+0x176>
                break;
 80023f0:	bf00      	nop
    }
    if (_new_position && _new_speed) {
 80023f2:	4b12      	ldr	r3, [pc, #72]	@ (800243c <parse_msg+0x1c0>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00c      	beq.n	8002414 <parse_msg+0x198>
 80023fa:	4b12      	ldr	r3, [pc, #72]	@ (8002444 <parse_msg+0x1c8>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <parse_msg+0x198>
        _new_speed = _new_position = FALSE;
 8002402:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <parse_msg+0x1c0>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <parse_msg+0x1c0>)
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	4b0d      	ldr	r3, [pc, #52]	@ (8002444 <parse_msg+0x1c8>)
 800240e:	701a      	strb	r2, [r3, #0]
        return TRUE;
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <parse_msg+0x19a>
    }
    return FALSE;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	200003e4 	.word	0x200003e4
 8002424:	200003ec 	.word	0x200003ec
 8002428:	200003a0 	.word	0x200003a0
 800242c:	200004b8 	.word	0x200004b8
 8002430:	20000544 	.word	0x20000544
 8002434:	20000548 	.word	0x20000548
 8002438:	10624dd3 	.word	0x10624dd3
 800243c:	200004bc 	.word	0x200004bc
 8002440:	200004bd 	.word	0x200004bd
 8002444:	200004be 	.word	0x200004be

08002448 <newdata>:

int parse_ok;
static uint8_t newdata(uint8_t data){
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
    uint8_t parsed = FALSE;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
    static uint8_t _ck_a;
    static uint8_t _ck_b;
    static uint8_t _step = 0;
    static uint32_t current_time_ms = 0;
    switch (_step) {
 8002456:	4b85      	ldr	r3, [pc, #532]	@ (800266c <newdata+0x224>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b08      	cmp	r3, #8
 800245c:	f200 8100 	bhi.w	8002660 <newdata+0x218>
 8002460:	a201      	add	r2, pc, #4	@ (adr r2, 8002468 <newdata+0x20>)
 8002462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002466:	bf00      	nop
 8002468:	0800248d 	.word	0x0800248d
 800246c:	080024a3 	.word	0x080024a3
 8002470:	080024b7 	.word	0x080024b7
 8002474:	080024d3 	.word	0x080024d3
 8002478:	08002505 	.word	0x08002505
 800247c:	08002539 	.word	0x08002539
 8002480:	08002593 	.word	0x08002593
 8002484:	080025eb 	.word	0x080025eb
 8002488:	08002609 	.word	0x08002609
        case 0: // Sync char 1 (0xB5)
            if (PREAMBLE1 == data)
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	2bb5      	cmp	r3, #181	@ 0xb5
 8002490:	f040 80df 	bne.w	8002652 <newdata+0x20a>
                _step++;
 8002494:	4b75      	ldr	r3, [pc, #468]	@ (800266c <newdata+0x224>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	3301      	adds	r3, #1
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b73      	ldr	r3, [pc, #460]	@ (800266c <newdata+0x224>)
 800249e:	701a      	strb	r2, [r3, #0]
            break;
 80024a0:	e0d7      	b.n	8002652 <newdata+0x20a>
        case 1: // Sync char 2 (0x62)
            if (PREAMBLE2 == data) {
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2b62      	cmp	r3, #98	@ 0x62
 80024a6:	d106      	bne.n	80024b6 <newdata+0x6e>
                _step++;
 80024a8:	4b70      	ldr	r3, [pc, #448]	@ (800266c <newdata+0x224>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b6e      	ldr	r3, [pc, #440]	@ (800266c <newdata+0x224>)
 80024b2:	701a      	strb	r2, [r3, #0]
                break;
 80024b4:	e0d4      	b.n	8002660 <newdata+0x218>
            }
        case 2: // Class
            _step++;
 80024b6:	4b6d      	ldr	r3, [pc, #436]	@ (800266c <newdata+0x224>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	3301      	adds	r3, #1
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4b6b      	ldr	r3, [pc, #428]	@ (800266c <newdata+0x224>)
 80024c0:	701a      	strb	r2, [r3, #0]
            _ck_b = _ck_a = data;  
 80024c2:	4a6b      	ldr	r2, [pc, #428]	@ (8002670 <newdata+0x228>)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	7013      	strb	r3, [r2, #0]
 80024c8:	4b69      	ldr	r3, [pc, #420]	@ (8002670 <newdata+0x228>)
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	4b69      	ldr	r3, [pc, #420]	@ (8002674 <newdata+0x22c>)
 80024ce:	701a      	strb	r2, [r3, #0]
            break;
 80024d0:	e0c6      	b.n	8002660 <newdata+0x218>
        case 3: // ID
            _step++;
 80024d2:	4b66      	ldr	r3, [pc, #408]	@ (800266c <newdata+0x224>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	3301      	adds	r3, #1
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4b64      	ldr	r3, [pc, #400]	@ (800266c <newdata+0x224>)
 80024dc:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 80024de:	4b64      	ldr	r3, [pc, #400]	@ (8002670 <newdata+0x228>)
 80024e0:	781a      	ldrb	r2, [r3, #0]
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	4413      	add	r3, r2
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	4b61      	ldr	r3, [pc, #388]	@ (8002670 <newdata+0x228>)
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	4b60      	ldr	r3, [pc, #384]	@ (8002670 <newdata+0x228>)
 80024ee:	781a      	ldrb	r2, [r3, #0]
 80024f0:	4b60      	ldr	r3, [pc, #384]	@ (8002674 <newdata+0x22c>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002674 <newdata+0x22c>)
 80024fa:	701a      	strb	r2, [r3, #0]
            _msg_id = data;
 80024fc:	4a5e      	ldr	r2, [pc, #376]	@ (8002678 <newdata+0x230>)
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	7013      	strb	r3, [r2, #0]
            break;
 8002502:	e0ad      	b.n	8002660 <newdata+0x218>
        case 4: 
            _step++;
 8002504:	4b59      	ldr	r3, [pc, #356]	@ (800266c <newdata+0x224>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	b2da      	uxtb	r2, r3
 800250c:	4b57      	ldr	r3, [pc, #348]	@ (800266c <newdata+0x224>)
 800250e:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8002510:	4b57      	ldr	r3, [pc, #348]	@ (8002670 <newdata+0x228>)
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	4413      	add	r3, r2
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4b55      	ldr	r3, [pc, #340]	@ (8002670 <newdata+0x228>)
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	4b54      	ldr	r3, [pc, #336]	@ (8002670 <newdata+0x228>)
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	4b54      	ldr	r3, [pc, #336]	@ (8002674 <newdata+0x22c>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	4413      	add	r3, r2
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b52      	ldr	r3, [pc, #328]	@ (8002674 <newdata+0x22c>)
 800252c:	701a      	strb	r2, [r3, #0]
            _payload_length = data; 
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	b29a      	uxth	r2, r3
 8002532:	4b52      	ldr	r3, [pc, #328]	@ (800267c <newdata+0x234>)
 8002534:	801a      	strh	r2, [r3, #0]
            break;
 8002536:	e093      	b.n	8002660 <newdata+0x218>
        case 5: 
            _step++;
 8002538:	4b4c      	ldr	r3, [pc, #304]	@ (800266c <newdata+0x224>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	b2da      	uxtb	r2, r3
 8002540:	4b4a      	ldr	r3, [pc, #296]	@ (800266c <newdata+0x224>)
 8002542:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);      
 8002544:	4b4a      	ldr	r3, [pc, #296]	@ (8002670 <newdata+0x228>)
 8002546:	781a      	ldrb	r2, [r3, #0]
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	4413      	add	r3, r2
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b48      	ldr	r3, [pc, #288]	@ (8002670 <newdata+0x228>)
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <newdata+0x228>)
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	4b47      	ldr	r3, [pc, #284]	@ (8002674 <newdata+0x22c>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	4413      	add	r3, r2
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b45      	ldr	r3, [pc, #276]	@ (8002674 <newdata+0x22c>)
 8002560:	701a      	strb	r2, [r3, #0]
            _payload_length += (uint16_t)(data << 8);
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	b29b      	uxth	r3, r3
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	b29a      	uxth	r2, r3
 800256a:	4b44      	ldr	r3, [pc, #272]	@ (800267c <newdata+0x234>)
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	4413      	add	r3, r2
 8002570:	b29a      	uxth	r2, r3
 8002572:	4b42      	ldr	r3, [pc, #264]	@ (800267c <newdata+0x234>)
 8002574:	801a      	strh	r2, [r3, #0]
            if (_payload_length > UBLOX_BUFFER_SIZE) {
 8002576:	4b41      	ldr	r3, [pc, #260]	@ (800267c <newdata+0x234>)
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	2bc8      	cmp	r3, #200	@ 0xc8
 800257c:	d905      	bls.n	800258a <newdata+0x142>
                _payload_length = 0;
 800257e:	4b3f      	ldr	r3, [pc, #252]	@ (800267c <newdata+0x234>)
 8002580:	2200      	movs	r2, #0
 8002582:	801a      	strh	r2, [r3, #0]
                _step = 0;
 8002584:	4b39      	ldr	r3, [pc, #228]	@ (800266c <newdata+0x224>)
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
            }
            _payload_counter = 0;   
 800258a:	4b3d      	ldr	r3, [pc, #244]	@ (8002680 <newdata+0x238>)
 800258c:	2200      	movs	r2, #0
 800258e:	801a      	strh	r2, [r3, #0]
            break;
 8002590:	e066      	b.n	8002660 <newdata+0x218>
        case 6:
            _ck_b += (_ck_a += data);     
 8002592:	4b37      	ldr	r3, [pc, #220]	@ (8002670 <newdata+0x228>)
 8002594:	781a      	ldrb	r2, [r3, #0]
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	4413      	add	r3, r2
 800259a:	b2da      	uxtb	r2, r3
 800259c:	4b34      	ldr	r3, [pc, #208]	@ (8002670 <newdata+0x228>)
 800259e:	701a      	strb	r2, [r3, #0]
 80025a0:	4b33      	ldr	r3, [pc, #204]	@ (8002670 <newdata+0x228>)
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	4b33      	ldr	r3, [pc, #204]	@ (8002674 <newdata+0x22c>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4b31      	ldr	r3, [pc, #196]	@ (8002674 <newdata+0x22c>)
 80025ae:	701a      	strb	r2, [r3, #0]
            if (_payload_counter < UBLOX_BUFFER_SIZE) {
 80025b0:	4b33      	ldr	r3, [pc, #204]	@ (8002680 <newdata+0x238>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	2bc7      	cmp	r3, #199	@ 0xc7
 80025b6:	d805      	bhi.n	80025c4 <newdata+0x17c>
                _buffer.bytes[_payload_counter] = data;
 80025b8:	4b31      	ldr	r3, [pc, #196]	@ (8002680 <newdata+0x238>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	4a31      	ldr	r2, [pc, #196]	@ (8002684 <newdata+0x23c>)
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	5453      	strb	r3, [r2, r1]
            }
            if (++_payload_counter == _payload_length)
 80025c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002680 <newdata+0x238>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002680 <newdata+0x238>)
 80025ce:	801a      	strh	r2, [r3, #0]
 80025d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002680 <newdata+0x238>)
 80025d2:	881a      	ldrh	r2, [r3, #0]
 80025d4:	4b29      	ldr	r3, [pc, #164]	@ (800267c <newdata+0x234>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d13c      	bne.n	8002656 <newdata+0x20e>
                _step++;
 80025dc:	4b23      	ldr	r3, [pc, #140]	@ (800266c <newdata+0x224>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	3301      	adds	r3, #1
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b21      	ldr	r3, [pc, #132]	@ (800266c <newdata+0x224>)
 80025e6:	701a      	strb	r2, [r3, #0]
            break;
 80025e8:	e035      	b.n	8002656 <newdata+0x20e>
        case 7:
            _step++;
 80025ea:	4b20      	ldr	r3, [pc, #128]	@ (800266c <newdata+0x224>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	3301      	adds	r3, #1
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4b1e      	ldr	r3, [pc, #120]	@ (800266c <newdata+0x224>)
 80025f4:	701a      	strb	r2, [r3, #0]
            if (_ck_a != data)
 80025f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002670 <newdata+0x228>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	79fa      	ldrb	r2, [r7, #7]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d02c      	beq.n	800265a <newdata+0x212>
                _step = 0;         
 8002600:	4b1a      	ldr	r3, [pc, #104]	@ (800266c <newdata+0x224>)
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
            break;
 8002606:	e028      	b.n	800265a <newdata+0x212>
        case 8:
            _step = 0;
 8002608:	4b18      	ldr	r3, [pc, #96]	@ (800266c <newdata+0x224>)
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
            if (_ck_b != data)
 800260e:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <newdata+0x22c>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	79fa      	ldrb	r2, [r7, #7]
 8002614:	429a      	cmp	r2, r3
 8002616:	d122      	bne.n	800265e <newdata+0x216>
                break;   
			 _therad_read_time_ms = micros() - current_time_ms;
 8002618:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <newdata+0x240>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002620:	4b1a      	ldr	r3, [pc, #104]	@ (800268c <newdata+0x244>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	441a      	add	r2, r3
 8002626:	4b1a      	ldr	r3, [pc, #104]	@ (8002690 <newdata+0x248>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	4a19      	ldr	r2, [pc, #100]	@ (8002694 <newdata+0x24c>)
 800262e:	6013      	str	r3, [r2, #0]
			 current_time_ms = micros();
 8002630:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <newdata+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002638:	4b14      	ldr	r3, [pc, #80]	@ (800268c <newdata+0x244>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4413      	add	r3, r2
 800263e:	4a14      	ldr	r2, [pc, #80]	@ (8002690 <newdata+0x248>)
 8002640:	6013      	str	r3, [r2, #0]
            if (parse_msg())
 8002642:	f7ff fe1b 	bl	800227c <parse_msg>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d009      	beq.n	8002660 <newdata+0x218>
            {
                parsed = TRUE;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
 8002650:	e006      	b.n	8002660 <newdata+0x218>
            break;
 8002652:	bf00      	nop
 8002654:	e004      	b.n	8002660 <newdata+0x218>
            break;
 8002656:	bf00      	nop
 8002658:	e002      	b.n	8002660 <newdata+0x218>
            break;
 800265a:	bf00      	nop
 800265c:	e000      	b.n	8002660 <newdata+0x218>
                break;   
 800265e:	bf00      	nop
            }
    } 
    return parsed;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200004bf 	.word	0x200004bf
 8002670:	200004c0 	.word	0x200004c0
 8002674:	200004c1 	.word	0x200004c1
 8002678:	200003e4 	.word	0x200003e4
 800267c:	200003e6 	.word	0x200003e6
 8002680:	200003e8 	.word	0x200003e8
 8002684:	200003ec 	.word	0x200003ec
 8002688:	20000544 	.word	0x20000544
 800268c:	20000548 	.word	0x20000548
 8002690:	200004c4 	.word	0x200004c4
 8002694:	200003e0 	.word	0x200003e0

08002698 <imu_calibrate>:
  .gyr_lsb = 32.8f
};


static int32_t store_gyro[3];
void imu_calibrate(int16_t *offsx,int16_t *offsy,int16_t *offsz){
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
	axis3_t gyro_;
	integralFBx = 0;
 80026a4:	4b32      	ldr	r3, [pc, #200]	@ (8002770 <imu_calibrate+0xd8>)
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
	integralFBy = 0;
 80026ac:	4b31      	ldr	r3, [pc, #196]	@ (8002774 <imu_calibrate+0xdc>)
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
	integralFBz = 0;
 80026b4:	4b30      	ldr	r3, [pc, #192]	@ (8002778 <imu_calibrate+0xe0>)
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < OFFSET_CYCLE; i++){
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	e01f      	b.n	8002702 <imu_calibrate+0x6a>
		mpu6050_gyro_get_raw(&gyro_);
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe ffac 	bl	8001624 <mpu6050_gyro_get_raw>
		store_gyro[X] += gyro_.x;
 80026cc:	4b2b      	ldr	r3, [pc, #172]	@ (800277c <imu_calibrate+0xe4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a29      	ldr	r2, [pc, #164]	@ (800277c <imu_calibrate+0xe4>)
 80026d8:	6013      	str	r3, [r2, #0]
    	store_gyro[Y] += gyro_.y;
 80026da:	4b28      	ldr	r3, [pc, #160]	@ (800277c <imu_calibrate+0xe4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80026e2:	4413      	add	r3, r2
 80026e4:	4a25      	ldr	r2, [pc, #148]	@ (800277c <imu_calibrate+0xe4>)
 80026e6:	6053      	str	r3, [r2, #4]
    	store_gyro[Z] += gyro_.z;
 80026e8:	4b24      	ldr	r3, [pc, #144]	@ (800277c <imu_calibrate+0xe4>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80026f0:	4413      	add	r3, r2
 80026f2:	4a22      	ldr	r2, [pc, #136]	@ (800277c <imu_calibrate+0xe4>)
 80026f4:	6093      	str	r3, [r2, #8]
		HAL_Delay(1); // delay 1 ms
 80026f6:	2001      	movs	r0, #1
 80026f8:	f004 f8ca 	bl	8006890 <HAL_Delay>
	for(int i = 0;i < OFFSET_CYCLE; i++){
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	3301      	adds	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002708:	dbdb      	blt.n	80026c2 <imu_calibrate+0x2a>
	}
	*offsx = store_gyro[X] / OFFSET_CYCLE;
 800270a:	4b1c      	ldr	r3, [pc, #112]	@ (800277c <imu_calibrate+0xe4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1c      	ldr	r2, [pc, #112]	@ (8002780 <imu_calibrate+0xe8>)
 8002710:	fb82 1203 	smull	r1, r2, r2, r3
 8002714:	1192      	asrs	r2, r2, #6
 8002716:	17db      	asrs	r3, r3, #31
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	b21a      	sxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	801a      	strh	r2, [r3, #0]
	*offsy = store_gyro[Y] / OFFSET_CYCLE;
 8002720:	4b16      	ldr	r3, [pc, #88]	@ (800277c <imu_calibrate+0xe4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4a16      	ldr	r2, [pc, #88]	@ (8002780 <imu_calibrate+0xe8>)
 8002726:	fb82 1203 	smull	r1, r2, r2, r3
 800272a:	1192      	asrs	r2, r2, #6
 800272c:	17db      	asrs	r3, r3, #31
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	b21a      	sxth	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	801a      	strh	r2, [r3, #0]
	*offsz = store_gyro[Z] / OFFSET_CYCLE;
 8002736:	4b11      	ldr	r3, [pc, #68]	@ (800277c <imu_calibrate+0xe4>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	4a11      	ldr	r2, [pc, #68]	@ (8002780 <imu_calibrate+0xe8>)
 800273c:	fb82 1203 	smull	r1, r2, r2, r3
 8002740:	1192      	asrs	r2, r2, #6
 8002742:	17db      	asrs	r3, r3, #31
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	b21a      	sxth	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	801a      	strh	r2, [r3, #0]
	init_us = millis();
 800274c:	4b0d      	ldr	r3, [pc, #52]	@ (8002784 <imu_calibrate+0xec>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002754:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <imu_calibrate+0xf0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4413      	add	r3, r2
 800275a:	4a09      	ldr	r2, [pc, #36]	@ (8002780 <imu_calibrate+0xe8>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	099b      	lsrs	r3, r3, #6
 8002762:	4a0a      	ldr	r2, [pc, #40]	@ (800278c <imu_calibrate+0xf4>)
 8002764:	6013      	str	r3, [r2, #0]
}
 8002766:	bf00      	nop
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200004e0 	.word	0x200004e0
 8002774:	200004e4 	.word	0x200004e4
 8002778:	200004e8 	.word	0x200004e8
 800277c:	2000052c 	.word	0x2000052c
 8002780:	10624dd3 	.word	0x10624dd3
 8002784:	20000544 	.word	0x20000544
 8002788:	20000548 	.word	0x20000548
 800278c:	20000528 	.word	0x20000528

08002790 <update_ahrs>:
	m->roll   = atan2_approx(-acc.x, (1/invSqrt_(acc.y * acc.y + acc.z * acc.z)))*180/M_PIf;
}

static int8_t reset_state = 1;
// mahony filter
void update_ahrs(int16_t gx_, int16_t gy_, int16_t gz_, int16_t accx_, int16_t accy_, int16_t accz_,int16_t magx,int16_t magy,int16_t magz,float dt){
 8002790:	b5b0      	push	{r4, r5, r7, lr}
 8002792:	b0a6      	sub	sp, #152	@ 0x98
 8002794:	af00      	add	r7, sp, #0
 8002796:	4604      	mov	r4, r0
 8002798:	4608      	mov	r0, r1
 800279a:	4611      	mov	r1, r2
 800279c:	461a      	mov	r2, r3
 800279e:	4623      	mov	r3, r4
 80027a0:	80fb      	strh	r3, [r7, #6]
 80027a2:	4603      	mov	r3, r0
 80027a4:	80bb      	strh	r3, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	807b      	strh	r3, [r7, #2]
 80027aa:	4613      	mov	r3, r2
 80027ac:	803b      	strh	r3, [r7, #0]
    float acc_x,acc_y,acc_z;
    float vx, vy, vz;
    float emz,wx,wy;
    float mx,my,mz,hx,hy,bx,bz;

	gx = (gx_/config.gyr_lsb) * RAD;
 80027ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fafa 	bl	8000dac <__aeabi_i2f>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4baf      	ldr	r3, [pc, #700]	@ (8002a78 <update_ahrs+0x2e8>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	4619      	mov	r1, r3
 80027c0:	4610      	mov	r0, r2
 80027c2:	f7fe fbfb 	bl	8000fbc <__aeabi_fdiv>
 80027c6:	4603      	mov	r3, r0
 80027c8:	49ac      	ldr	r1, [pc, #688]	@ (8002a7c <update_ahrs+0x2ec>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fb42 	bl	8000e54 <__aeabi_fmul>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	gy = (gy_/config.gyr_lsb) * RAD;
 80027d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fae6 	bl	8000dac <__aeabi_i2f>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4ba5      	ldr	r3, [pc, #660]	@ (8002a78 <update_ahrs+0x2e8>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	4619      	mov	r1, r3
 80027e8:	4610      	mov	r0, r2
 80027ea:	f7fe fbe7 	bl	8000fbc <__aeabi_fdiv>
 80027ee:	4603      	mov	r3, r0
 80027f0:	49a2      	ldr	r1, [pc, #648]	@ (8002a7c <update_ahrs+0x2ec>)
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fb2e 	bl	8000e54 <__aeabi_fmul>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	gz = (gz_/config.gyr_lsb) * RAD;
 80027fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fad2 	bl	8000dac <__aeabi_i2f>
 8002808:	4602      	mov	r2, r0
 800280a:	4b9b      	ldr	r3, [pc, #620]	@ (8002a78 <update_ahrs+0x2e8>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	4619      	mov	r1, r3
 8002810:	4610      	mov	r0, r2
 8002812:	f7fe fbd3 	bl	8000fbc <__aeabi_fdiv>
 8002816:	4603      	mov	r3, r0
 8002818:	4998      	ldr	r1, [pc, #608]	@ (8002a7c <update_ahrs+0x2ec>)
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fb1a 	bl	8000e54 <__aeabi_fmul>
 8002820:	4603      	mov	r3, r0
 8002822:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	if(!((accx_ == 0) && (accy_ == 0) && ( accz_ == 0))) {
 8002826:	f9b7 3000 	ldrsh.w	r3, [r7]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d108      	bne.n	8002840 <update_ahrs+0xb0>
 800282e:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d104      	bne.n	8002840 <update_ahrs+0xb0>
 8002836:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8255 	beq.w	8002cea <update_ahrs+0x55a>
		norm = invSqrt_(accx_ * accx_ + accy_ * accy_ + accz_ * accz_);
 8002840:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002844:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002848:	fb03 f202 	mul.w	r2, r3, r2
 800284c:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 8002850:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	@ 0xa8
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	441a      	add	r2, r3
 800285a:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 800285e:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fa9f 	bl	8000dac <__aeabi_i2f>
 800286e:	4603      	mov	r3, r0
 8002870:	4618      	mov	r0, r3
 8002872:	f000 ffdb 	bl	800382c <invSqrt_>
 8002876:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
		acc_x = (float)accx_ * norm;
 800287a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fa94 	bl	8000dac <__aeabi_i2f>
 8002884:	4603      	mov	r3, r0
 8002886:	4619      	mov	r1, r3
 8002888:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800288c:	f7fe fae2 	bl	8000e54 <__aeabi_fmul>
 8002890:	4603      	mov	r3, r0
 8002892:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		acc_y = (float)accy_ * norm;
 8002896:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fa86 	bl	8000dac <__aeabi_i2f>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4619      	mov	r1, r3
 80028a4:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80028a8:	f7fe fad4 	bl	8000e54 <__aeabi_fmul>
 80028ac:	4603      	mov	r3, r0
 80028ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
		acc_z = (float)accz_ * norm;
 80028b0:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fa79 	bl	8000dac <__aeabi_i2f>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4619      	mov	r1, r3
 80028be:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80028c2:	f7fe fac7 	bl	8000e54 <__aeabi_fmul>
 80028c6:	4603      	mov	r3, r0
 80028c8:	67bb      	str	r3, [r7, #120]	@ 0x78

		if(reset_state){
 80028ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002a80 <update_ahrs+0x2f0>)
 80028cc:	f993 3000 	ldrsb.w	r3, [r3]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00c      	beq.n	80028ee <update_ahrs+0x15e>
			dcm[0][2] = acc_x;
 80028d4:	4a6b      	ldr	r2, [pc, #428]	@ (8002a84 <update_ahrs+0x2f4>)
 80028d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028da:	6093      	str	r3, [r2, #8]
			dcm[1][2] = acc_y;
 80028dc:	4a69      	ldr	r2, [pc, #420]	@ (8002a84 <update_ahrs+0x2f4>)
 80028de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028e0:	6153      	str	r3, [r2, #20]
			dcm[2][2] = acc_z;
 80028e2:	4a68      	ldr	r2, [pc, #416]	@ (8002a84 <update_ahrs+0x2f4>)
 80028e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028e6:	6213      	str	r3, [r2, #32]
			reset_state = 0;
 80028e8:	4b65      	ldr	r3, [pc, #404]	@ (8002a80 <update_ahrs+0x2f0>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
		}

        if(USE_MAG){
			norm = invSqrt_(magx * magx + magy * magy + magz * magz);
 80028ee:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80028f2:	f9b7 20b0 	ldrsh.w	r2, [r7, #176]	@ 0xb0
 80028f6:	fb03 f202 	mul.w	r2, r3, r2
 80028fa:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 80028fe:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	@ 0xb4
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	441a      	add	r2, r3
 8002908:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 800290c:	f9b7 10b8 	ldrsh.w	r1, [r7, #184]	@ 0xb8
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fa48 	bl	8000dac <__aeabi_i2f>
 800291c:	4603      	mov	r3, r0
 800291e:	4618      	mov	r0, r3
 8002920:	f000 ff84 	bl	800382c <invSqrt_>
 8002924:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
			mx = magx * norm;
 8002928:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fa3d 	bl	8000dac <__aeabi_i2f>
 8002932:	4603      	mov	r3, r0
 8002934:	4619      	mov	r1, r3
 8002936:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800293a:	f7fe fa8b 	bl	8000e54 <__aeabi_fmul>
 800293e:	4603      	mov	r3, r0
 8002940:	677b      	str	r3, [r7, #116]	@ 0x74
			my = magy * norm;
 8002942:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe fa30 	bl	8000dac <__aeabi_i2f>
 800294c:	4603      	mov	r3, r0
 800294e:	4619      	mov	r1, r3
 8002950:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002954:	f7fe fa7e 	bl	8000e54 <__aeabi_fmul>
 8002958:	4603      	mov	r3, r0
 800295a:	673b      	str	r3, [r7, #112]	@ 0x70
			mz = magz * norm;
 800295c:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fa23 	bl	8000dac <__aeabi_i2f>
 8002966:	4603      	mov	r3, r0
 8002968:	4619      	mov	r1, r3
 800296a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800296e:	f7fe fa71 	bl	8000e54 <__aeabi_fmul>
 8002972:	4603      	mov	r3, r0
 8002974:	66fb      	str	r3, [r7, #108]	@ 0x6c

			hx = mx * dcm[0][0] + my * dcm[1][0] + mz * dcm[2][0];
 8002976:	4b43      	ldr	r3, [pc, #268]	@ (8002a84 <update_ahrs+0x2f4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fa69 	bl	8000e54 <__aeabi_fmul>
 8002982:	4603      	mov	r3, r0
 8002984:	461c      	mov	r4, r3
 8002986:	4b3f      	ldr	r3, [pc, #252]	@ (8002a84 <update_ahrs+0x2f4>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fa61 	bl	8000e54 <__aeabi_fmul>
 8002992:	4603      	mov	r3, r0
 8002994:	4619      	mov	r1, r3
 8002996:	4620      	mov	r0, r4
 8002998:	f7fe f954 	bl	8000c44 <__addsf3>
 800299c:	4603      	mov	r3, r0
 800299e:	461c      	mov	r4, r3
 80029a0:	4b38      	ldr	r3, [pc, #224]	@ (8002a84 <update_ahrs+0x2f4>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fa54 	bl	8000e54 <__aeabi_fmul>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4619      	mov	r1, r3
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7fe f947 	bl	8000c44 <__addsf3>
 80029b6:	4603      	mov	r3, r0
 80029b8:	66bb      	str	r3, [r7, #104]	@ 0x68
			hy = mx * dcm[0][1] + my * dcm[1][1] + mz * dcm[2][1];
 80029ba:	4b32      	ldr	r3, [pc, #200]	@ (8002a84 <update_ahrs+0x2f4>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fa47 	bl	8000e54 <__aeabi_fmul>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461c      	mov	r4, r3
 80029ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002a84 <update_ahrs+0x2f4>)
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe fa3f 	bl	8000e54 <__aeabi_fmul>
 80029d6:	4603      	mov	r3, r0
 80029d8:	4619      	mov	r1, r3
 80029da:	4620      	mov	r0, r4
 80029dc:	f7fe f932 	bl	8000c44 <__addsf3>
 80029e0:	4603      	mov	r3, r0
 80029e2:	461c      	mov	r4, r3
 80029e4:	4b27      	ldr	r3, [pc, #156]	@ (8002a84 <update_ahrs+0x2f4>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fa32 	bl	8000e54 <__aeabi_fmul>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4619      	mov	r1, r3
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7fe f925 	bl	8000c44 <__addsf3>
 80029fa:	4603      	mov	r3, r0
 80029fc:	667b      	str	r3, [r7, #100]	@ 0x64
			bz = mx * dcm[0][2] + my * dcm[1][2] + mz * dcm[2][2];
 80029fe:	4b21      	ldr	r3, [pc, #132]	@ (8002a84 <update_ahrs+0x2f4>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe fa25 	bl	8000e54 <__aeabi_fmul>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461c      	mov	r4, r3
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <update_ahrs+0x2f4>)
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe fa1d 	bl	8000e54 <__aeabi_fmul>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f7fe f910 	bl	8000c44 <__addsf3>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461c      	mov	r4, r3
 8002a28:	4b16      	ldr	r3, [pc, #88]	@ (8002a84 <update_ahrs+0x2f4>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fa10 	bl	8000e54 <__aeabi_fmul>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4619      	mov	r1, r3
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f7fe f903 	bl	8000c44 <__addsf3>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	663b      	str	r3, [r7, #96]	@ 0x60

			bx = sqrtf(hx * hx + hy * hy);
 8002a42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a44:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002a46:	f7fe fa05 	bl	8000e54 <__aeabi_fmul>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	461c      	mov	r4, r3
 8002a4e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002a50:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002a52:	f7fe f9ff 	bl	8000e54 <__aeabi_fmul>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	f7fe f8f2 	bl	8000c44 <__addsf3>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f011 fa22 	bl	8013eac <sqrtf>
 8002a68:	65f8      	str	r0, [r7, #92]	@ 0x5c

			wx = bx * dcm[0][0] + bz * dcm[0][2];
 8002a6a:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <update_ahrs+0x2f4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe f9ef 	bl	8000e54 <__aeabi_fmul>
 8002a76:	e007      	b.n	8002a88 <update_ahrs+0x2f8>
 8002a78:	20000018 	.word	0x20000018
 8002a7c:	3c8efa35 	.word	0x3c8efa35
 8002a80:	20000024 	.word	0x20000024
 8002a84:	20000504 	.word	0x20000504
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461c      	mov	r4, r3
 8002a8c:	4b70      	ldr	r3, [pc, #448]	@ (8002c50 <update_ahrs+0x4c0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe f9de 	bl	8000e54 <__aeabi_fmul>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7fe f8d1 	bl	8000c44 <__addsf3>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	65bb      	str	r3, [r7, #88]	@ 0x58
			wy = bx * dcm[1][0] + bz * dcm[1][2];
 8002aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8002c50 <update_ahrs+0x4c0>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe f9d1 	bl	8000e54 <__aeabi_fmul>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	461c      	mov	r4, r3
 8002ab6:	4b66      	ldr	r3, [pc, #408]	@ (8002c50 <update_ahrs+0x4c0>)
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe f9c9 	bl	8000e54 <__aeabi_fmul>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	f7fe f8bc 	bl	8000c44 <__addsf3>
 8002acc:	4603      	mov	r3, r0
 8002ace:	657b      	str	r3, [r7, #84]	@ 0x54
			emz = mx * wy - my * wx;
 8002ad0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ad2:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002ad4:	f7fe f9be 	bl	8000e54 <__aeabi_fmul>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461c      	mov	r4, r3
 8002adc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002ade:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002ae0:	f7fe f9b8 	bl	8000e54 <__aeabi_fmul>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f7fe f8a9 	bl	8000c40 <__aeabi_fsub>
 8002aee:	4603      	mov	r3, r0
 8002af0:	653b      	str	r3, [r7, #80]	@ 0x50
		}
		else{
			emz = 0.0f;
		}

		vx = dcm[0][2];
 8002af2:	4b57      	ldr	r3, [pc, #348]	@ (8002c50 <update_ahrs+0x4c0>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		vy = dcm[1][2];
 8002af8:	4b55      	ldr	r3, [pc, #340]	@ (8002c50 <update_ahrs+0x4c0>)
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	64bb      	str	r3, [r7, #72]	@ 0x48
		vz = dcm[2][2];
 8002afe:	4b54      	ldr	r3, [pc, #336]	@ (8002c50 <update_ahrs+0x4c0>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	647b      	str	r3, [r7, #68]	@ 0x44

		ex = acc_y * vz - acc_z * vy;
 8002b04:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002b06:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002b08:	f7fe f9a4 	bl	8000e54 <__aeabi_fmul>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461c      	mov	r4, r3
 8002b10:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002b12:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002b14:	f7fe f99e 	bl	8000e54 <__aeabi_fmul>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f7fe f88f 	bl	8000c40 <__aeabi_fsub>
 8002b22:	4603      	mov	r3, r0
 8002b24:	643b      	str	r3, [r7, #64]	@ 0x40
		ey = acc_z * vx - acc_x * vz;
 8002b26:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002b28:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002b2a:	f7fe f993 	bl	8000e54 <__aeabi_fmul>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	461c      	mov	r4, r3
 8002b32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002b34:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002b38:	f7fe f98c 	bl	8000e54 <__aeabi_fmul>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4620      	mov	r0, r4
 8002b42:	f7fe f87d 	bl	8000c40 <__aeabi_fsub>
 8002b46:	4603      	mov	r3, r0
 8002b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
		ez = acc_x * vy - acc_y * vx;
 8002b4a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002b4c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002b50:	f7fe f980 	bl	8000e54 <__aeabi_fmul>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461c      	mov	r4, r3
 8002b58:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002b5a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002b5c:	f7fe f97a 	bl	8000e54 <__aeabi_fmul>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4619      	mov	r1, r3
 8002b64:	4620      	mov	r0, r4
 8002b66:	f7fe f86b 	bl	8000c40 <__aeabi_fsub>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	63bb      	str	r3, [r7, #56]	@ 0x38

		if( Ki_imu  > 0.0f) {
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	f04f 0100 	mov.w	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fb28 	bl	80011cc <__aeabi_fcmpgt>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d06e      	beq.n	8002c60 <update_ahrs+0x4d0>
			integralFBx +=  Ki_imu  * ex * dt;
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe f963 	bl	8000e54 <__aeabi_fmul>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f95d 	bl	8000e54 <__aeabi_fmul>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c54 <update_ahrs+0x4c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	f7fe f84d 	bl	8000c44 <__addsf3>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b29      	ldr	r3, [pc, #164]	@ (8002c54 <update_ahrs+0x4c4>)
 8002bb0:	601a      	str	r2, [r3, #0]
			integralFBy +=  Ki_imu  * ey * dt;
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe f94b 	bl	8000e54 <__aeabi_fmul>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe f945 	bl	8000e54 <__aeabi_fmul>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b22      	ldr	r3, [pc, #136]	@ (8002c58 <update_ahrs+0x4c8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	f7fe f835 	bl	8000c44 <__addsf3>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4b1e      	ldr	r3, [pc, #120]	@ (8002c58 <update_ahrs+0x4c8>)
 8002be0:	601a      	str	r2, [r3, #0]
			integralFBz +=  Ki_imu  * ez * dt;
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe f933 	bl	8000e54 <__aeabi_fmul>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe f92d 	bl	8000e54 <__aeabi_fmul>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b17      	ldr	r3, [pc, #92]	@ (8002c5c <update_ahrs+0x4cc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4619      	mov	r1, r3
 8002c04:	4610      	mov	r0, r2
 8002c06:	f7fe f81d 	bl	8000c44 <__addsf3>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b13      	ldr	r3, [pc, #76]	@ (8002c5c <update_ahrs+0x4cc>)
 8002c10:	601a      	str	r2, [r3, #0]
			gx += integralFBx;
 8002c12:	4b10      	ldr	r3, [pc, #64]	@ (8002c54 <update_ahrs+0x4c4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4619      	mov	r1, r3
 8002c18:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002c1c:	f7fe f812 	bl	8000c44 <__addsf3>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			gy += integralFBy;
 8002c26:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <update_ahrs+0x4c8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002c30:	f7fe f808 	bl	8000c44 <__addsf3>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			gz += integralFBz;
 8002c3a:	4b08      	ldr	r3, [pc, #32]	@ (8002c5c <update_ahrs+0x4cc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002c44:	f7fd fffe 	bl	8000c44 <__addsf3>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002c4e:	e013      	b.n	8002c78 <update_ahrs+0x4e8>
 8002c50:	20000504 	.word	0x20000504
 8002c54:	200004e0 	.word	0x200004e0
 8002c58:	200004e4 	.word	0x200004e4
 8002c5c:	200004e8 	.word	0x200004e8
		} else {
			integralFBx = 0.0f;
 8002c60:	4ba4      	ldr	r3, [pc, #656]	@ (8002ef4 <update_ahrs+0x764>)
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8002c68:	4ba3      	ldr	r3, [pc, #652]	@ (8002ef8 <update_ahrs+0x768>)
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8002c70:	4ba2      	ldr	r3, [pc, #648]	@ (8002efc <update_ahrs+0x76c>)
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
		}

		gx += Kp_imu * ex;
 8002c78:	4ba1      	ldr	r3, [pc, #644]	@ (8002f00 <update_ahrs+0x770>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe f8e8 	bl	8000e54 <__aeabi_fmul>
 8002c84:	4603      	mov	r3, r0
 8002c86:	4619      	mov	r1, r3
 8002c88:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002c8c:	f7fd ffda 	bl	8000c44 <__addsf3>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		gy += Kp_imu * ey;
 8002c96:	4b9a      	ldr	r3, [pc, #616]	@ (8002f00 <update_ahrs+0x770>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe f8d9 	bl	8000e54 <__aeabi_fmul>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002caa:	f7fd ffcb 	bl	8000c44 <__addsf3>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		gz += Kp_imu * ez + emz * Kp_mag;
 8002cb4:	4b92      	ldr	r3, [pc, #584]	@ (8002f00 <update_ahrs+0x770>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe f8ca 	bl	8000e54 <__aeabi_fmul>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461c      	mov	r4, r3
 8002cc4:	4b8f      	ldr	r3, [pc, #572]	@ (8002f04 <update_ahrs+0x774>)
 8002cc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe f8c3 	bl	8000e54 <__aeabi_fmul>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f7fd ffb6 	bl	8000c44 <__addsf3>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002ce0:	f7fd ffb0 	bl	8000c44 <__addsf3>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	}

	gx *= (0.5f * dt);
 8002cea:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002cee:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8002cf2:	f7fe f8af 	bl	8000e54 <__aeabi_fmul>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002cfe:	f7fe f8a9 	bl	8000e54 <__aeabi_fmul>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	gy *= (0.5f * dt);
 8002d08:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002d0c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8002d10:	f7fe f8a0 	bl	8000e54 <__aeabi_fmul>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4619      	mov	r1, r3
 8002d18:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002d1c:	f7fe f89a 	bl	8000e54 <__aeabi_fmul>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	gz *= (0.5f * dt);
 8002d26:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002d2a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8002d2e:	f7fe f891 	bl	8000e54 <__aeabi_fmul>
 8002d32:	4603      	mov	r3, r0
 8002d34:	4619      	mov	r1, r3
 8002d36:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002d3a:	f7fe f88b 	bl	8000e54 <__aeabi_fmul>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	q0 += (-q1 * gx - q2 * gy - q3 * gz);
 8002d44:	4b70      	ldr	r3, [pc, #448]	@ (8002f08 <update_ahrs+0x778>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002d4c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe f87f 	bl	8000e54 <__aeabi_fmul>
 8002d56:	4603      	mov	r3, r0
 8002d58:	461c      	mov	r4, r3
 8002d5a:	4b6c      	ldr	r3, [pc, #432]	@ (8002f0c <update_ahrs+0x77c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe f876 	bl	8000e54 <__aeabi_fmul>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f7fd ff67 	bl	8000c40 <__aeabi_fsub>
 8002d72:	4603      	mov	r3, r0
 8002d74:	461c      	mov	r4, r3
 8002d76:	4b66      	ldr	r3, [pc, #408]	@ (8002f10 <update_ahrs+0x780>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe f868 	bl	8000e54 <__aeabi_fmul>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4619      	mov	r1, r3
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f7fd ff59 	bl	8000c40 <__aeabi_fsub>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b60      	ldr	r3, [pc, #384]	@ (8002f14 <update_ahrs+0x784>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4619      	mov	r1, r3
 8002d98:	4610      	mov	r0, r2
 8002d9a:	f7fd ff53 	bl	8000c44 <__addsf3>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f14 <update_ahrs+0x784>)
 8002da4:	601a      	str	r2, [r3, #0]
	q1 += ( q0 * gx + q2 * gz - q3 * gy);
 8002da6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f14 <update_ahrs+0x784>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe f850 	bl	8000e54 <__aeabi_fmul>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461c      	mov	r4, r3
 8002db8:	4b54      	ldr	r3, [pc, #336]	@ (8002f0c <update_ahrs+0x77c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe f847 	bl	8000e54 <__aeabi_fmul>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f7fd ff3a 	bl	8000c44 <__addsf3>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	461c      	mov	r4, r3
 8002dd4:	4b4e      	ldr	r3, [pc, #312]	@ (8002f10 <update_ahrs+0x780>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe f839 	bl	8000e54 <__aeabi_fmul>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4619      	mov	r1, r3
 8002de6:	4620      	mov	r0, r4
 8002de8:	f7fd ff2a 	bl	8000c40 <__aeabi_fsub>
 8002dec:	4603      	mov	r3, r0
 8002dee:	461a      	mov	r2, r3
 8002df0:	4b45      	ldr	r3, [pc, #276]	@ (8002f08 <update_ahrs+0x778>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f7fd ff24 	bl	8000c44 <__addsf3>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b41      	ldr	r3, [pc, #260]	@ (8002f08 <update_ahrs+0x778>)
 8002e02:	601a      	str	r2, [r3, #0]
	q2 += ( q0 * gy - q1 * gz + q3 * gx);
 8002e04:	4b43      	ldr	r3, [pc, #268]	@ (8002f14 <update_ahrs+0x784>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe f821 	bl	8000e54 <__aeabi_fmul>
 8002e12:	4603      	mov	r3, r0
 8002e14:	461c      	mov	r4, r3
 8002e16:	4b3c      	ldr	r3, [pc, #240]	@ (8002f08 <update_ahrs+0x778>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe f818 	bl	8000e54 <__aeabi_fmul>
 8002e24:	4603      	mov	r3, r0
 8002e26:	4619      	mov	r1, r3
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f7fd ff09 	bl	8000c40 <__aeabi_fsub>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	461c      	mov	r4, r3
 8002e32:	4b37      	ldr	r3, [pc, #220]	@ (8002f10 <update_ahrs+0x780>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe f80a 	bl	8000e54 <__aeabi_fmul>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4619      	mov	r1, r3
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7fd fefd 	bl	8000c44 <__addsf3>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f0c <update_ahrs+0x77c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f7fd fef5 	bl	8000c44 <__addsf3>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f0c <update_ahrs+0x77c>)
 8002e60:	601a      	str	r2, [r3, #0]
	q3 += ( q0 * gz + q1 * gy - q2 * gx);
 8002e62:	4b2c      	ldr	r3, [pc, #176]	@ (8002f14 <update_ahrs+0x784>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fff2 	bl	8000e54 <__aeabi_fmul>
 8002e70:	4603      	mov	r3, r0
 8002e72:	461c      	mov	r4, r3
 8002e74:	4b24      	ldr	r3, [pc, #144]	@ (8002f08 <update_ahrs+0x778>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd ffe9 	bl	8000e54 <__aeabi_fmul>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4619      	mov	r1, r3
 8002e86:	4620      	mov	r0, r4
 8002e88:	f7fd fedc 	bl	8000c44 <__addsf3>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	461c      	mov	r4, r3
 8002e90:	4b1e      	ldr	r3, [pc, #120]	@ (8002f0c <update_ahrs+0x77c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd ffdb 	bl	8000e54 <__aeabi_fmul>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f7fd fecc 	bl	8000c40 <__aeabi_fsub>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4b18      	ldr	r3, [pc, #96]	@ (8002f10 <update_ahrs+0x780>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f7fd fec6 	bl	8000c44 <__addsf3>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4b14      	ldr	r3, [pc, #80]	@ (8002f10 <update_ahrs+0x780>)
 8002ebe:	601a      	str	r2, [r3, #0]

	norm = invSqrt_(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002ec0:	4b14      	ldr	r3, [pc, #80]	@ (8002f14 <update_ahrs+0x784>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a13      	ldr	r2, [pc, #76]	@ (8002f14 <update_ahrs+0x784>)
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fd ffc2 	bl	8000e54 <__aeabi_fmul>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	461c      	mov	r4, r3
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <update_ahrs+0x778>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8002f08 <update_ahrs+0x778>)
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd ffb8 	bl	8000e54 <__aeabi_fmul>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f7fd feab 	bl	8000c44 <__addsf3>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	461c      	mov	r4, r3
 8002ef2:	e011      	b.n	8002f18 <update_ahrs+0x788>
 8002ef4:	200004e0 	.word	0x200004e0
 8002ef8:	200004e4 	.word	0x200004e4
 8002efc:	200004e8 	.word	0x200004e8
 8002f00:	20000010 	.word	0x20000010
 8002f04:	40a00000 	.word	0x40a00000
 8002f08:	200004f8 	.word	0x200004f8
 8002f0c:	200004fc 	.word	0x200004fc
 8002f10:	20000500 	.word	0x20000500
 8002f14:	20000014 	.word	0x20000014
 8002f18:	4b96      	ldr	r3, [pc, #600]	@ (8003174 <update_ahrs+0x9e4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a95      	ldr	r2, [pc, #596]	@ (8003174 <update_ahrs+0x9e4>)
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd ff96 	bl	8000e54 <__aeabi_fmul>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f7fd fe89 	bl	8000c44 <__addsf3>
 8002f32:	4603      	mov	r3, r0
 8002f34:	461c      	mov	r4, r3
 8002f36:	4b90      	ldr	r3, [pc, #576]	@ (8003178 <update_ahrs+0x9e8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a8f      	ldr	r2, [pc, #572]	@ (8003178 <update_ahrs+0x9e8>)
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd ff87 	bl	8000e54 <__aeabi_fmul>
 8002f46:	4603      	mov	r3, r0
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f7fd fe7a 	bl	8000c44 <__addsf3>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fc6a 	bl	800382c <invSqrt_>
 8002f58:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	q0 *= norm;
 8002f5c:	4b87      	ldr	r3, [pc, #540]	@ (800317c <update_ahrs+0x9ec>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd ff75 	bl	8000e54 <__aeabi_fmul>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b83      	ldr	r3, [pc, #524]	@ (800317c <update_ahrs+0x9ec>)
 8002f70:	601a      	str	r2, [r3, #0]
	q1 *= norm;
 8002f72:	4b83      	ldr	r3, [pc, #524]	@ (8003180 <update_ahrs+0x9f0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd ff6a 	bl	8000e54 <__aeabi_fmul>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461a      	mov	r2, r3
 8002f84:	4b7e      	ldr	r3, [pc, #504]	@ (8003180 <update_ahrs+0x9f0>)
 8002f86:	601a      	str	r2, [r3, #0]
	q2 *= norm;
 8002f88:	4b7a      	ldr	r3, [pc, #488]	@ (8003174 <update_ahrs+0x9e4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd ff5f 	bl	8000e54 <__aeabi_fmul>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b76      	ldr	r3, [pc, #472]	@ (8003174 <update_ahrs+0x9e4>)
 8002f9c:	601a      	str	r2, [r3, #0]
	q3 *= norm;
 8002f9e:	4b76      	ldr	r3, [pc, #472]	@ (8003178 <update_ahrs+0x9e8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd ff54 	bl	8000e54 <__aeabi_fmul>
 8002fac:	4603      	mov	r3, r0
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4b71      	ldr	r3, [pc, #452]	@ (8003178 <update_ahrs+0x9e8>)
 8002fb2:	601a      	str	r2, [r3, #0]
	
	float q0q1 = q0*q1;
 8002fb4:	4b71      	ldr	r3, [pc, #452]	@ (800317c <update_ahrs+0x9ec>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a71      	ldr	r2, [pc, #452]	@ (8003180 <update_ahrs+0x9f0>)
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd ff48 	bl	8000e54 <__aeabi_fmul>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	637b      	str	r3, [r7, #52]	@ 0x34
	float q0q2 = q0*q2;
 8002fc8:	4b6c      	ldr	r3, [pc, #432]	@ (800317c <update_ahrs+0x9ec>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a69      	ldr	r2, [pc, #420]	@ (8003174 <update_ahrs+0x9e4>)
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd ff3e 	bl	8000e54 <__aeabi_fmul>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	633b      	str	r3, [r7, #48]	@ 0x30
	float q0q3 = q0*q3;
 8002fdc:	4b67      	ldr	r3, [pc, #412]	@ (800317c <update_ahrs+0x9ec>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a65      	ldr	r2, [pc, #404]	@ (8003178 <update_ahrs+0x9e8>)
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd ff34 	bl	8000e54 <__aeabi_fmul>
 8002fec:	4603      	mov	r3, r0
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float q1q1 = q1*q1;
 8002ff0:	4b63      	ldr	r3, [pc, #396]	@ (8003180 <update_ahrs+0x9f0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a62      	ldr	r2, [pc, #392]	@ (8003180 <update_ahrs+0x9f0>)
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd ff2a 	bl	8000e54 <__aeabi_fmul>
 8003000:	4603      	mov	r3, r0
 8003002:	62bb      	str	r3, [r7, #40]	@ 0x28
	float q1q2 = q1*q2;
 8003004:	4b5e      	ldr	r3, [pc, #376]	@ (8003180 <update_ahrs+0x9f0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a5a      	ldr	r2, [pc, #360]	@ (8003174 <update_ahrs+0x9e4>)
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd ff20 	bl	8000e54 <__aeabi_fmul>
 8003014:	4603      	mov	r3, r0
 8003016:	627b      	str	r3, [r7, #36]	@ 0x24
	float q1q3 = q1*q3;
 8003018:	4b59      	ldr	r3, [pc, #356]	@ (8003180 <update_ahrs+0x9f0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a56      	ldr	r2, [pc, #344]	@ (8003178 <update_ahrs+0x9e8>)
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd ff16 	bl	8000e54 <__aeabi_fmul>
 8003028:	4603      	mov	r3, r0
 800302a:	623b      	str	r3, [r7, #32]
	float q2q2 = q2*q2;
 800302c:	4b51      	ldr	r3, [pc, #324]	@ (8003174 <update_ahrs+0x9e4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a50      	ldr	r2, [pc, #320]	@ (8003174 <update_ahrs+0x9e4>)
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd ff0c 	bl	8000e54 <__aeabi_fmul>
 800303c:	4603      	mov	r3, r0
 800303e:	61fb      	str	r3, [r7, #28]
	float q2q3 = q2*q3;
 8003040:	4b4c      	ldr	r3, [pc, #304]	@ (8003174 <update_ahrs+0x9e4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a4c      	ldr	r2, [pc, #304]	@ (8003178 <update_ahrs+0x9e8>)
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd ff02 	bl	8000e54 <__aeabi_fmul>
 8003050:	4603      	mov	r3, r0
 8003052:	61bb      	str	r3, [r7, #24]
	float q3q3 = q3*q3;
 8003054:	4b48      	ldr	r3, [pc, #288]	@ (8003178 <update_ahrs+0x9e8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a47      	ldr	r2, [pc, #284]	@ (8003178 <update_ahrs+0x9e8>)
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd fef8 	bl	8000e54 <__aeabi_fmul>
 8003064:	4603      	mov	r3, r0
 8003066:	617b      	str	r3, [r7, #20]

	// Quaternion to Rotation matrix
	dcm[0][0] = 2.0f*(0.5f - q2q2  - q3q3);
 8003068:	69f9      	ldr	r1, [r7, #28]
 800306a:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800306e:	f7fd fde7 	bl	8000c40 <__aeabi_fsub>
 8003072:	4603      	mov	r3, r0
 8003074:	6979      	ldr	r1, [r7, #20]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fde2 	bl	8000c40 <__aeabi_fsub>
 800307c:	4603      	mov	r3, r0
 800307e:	4619      	mov	r1, r3
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd fddf 	bl	8000c44 <__addsf3>
 8003086:	4603      	mov	r3, r0
 8003088:	461a      	mov	r2, r3
 800308a:	4b3e      	ldr	r3, [pc, #248]	@ (8003184 <update_ahrs+0x9f4>)
 800308c:	601a      	str	r2, [r3, #0]
	dcm[1][0] = 2.0f*(q1q2 - q0q3);
 800308e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003090:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003092:	f7fd fdd5 	bl	8000c40 <__aeabi_fsub>
 8003096:	4603      	mov	r3, r0
 8003098:	4619      	mov	r1, r3
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd fdd2 	bl	8000c44 <__addsf3>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b37      	ldr	r3, [pc, #220]	@ (8003184 <update_ahrs+0x9f4>)
 80030a6:	60da      	str	r2, [r3, #12]
	dcm[2][0] = 2.0f*(q1q3 + q0q2);
 80030a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030aa:	6a38      	ldr	r0, [r7, #32]
 80030ac:	f7fd fdca 	bl	8000c44 <__addsf3>
 80030b0:	4603      	mov	r3, r0
 80030b2:	4619      	mov	r1, r3
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fd fdc5 	bl	8000c44 <__addsf3>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	4b31      	ldr	r3, [pc, #196]	@ (8003184 <update_ahrs+0x9f4>)
 80030c0:	619a      	str	r2, [r3, #24]
	dcm[0][1] = 2.0f*(q1q2 + q0q3);
 80030c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80030c6:	f7fd fdbd 	bl	8000c44 <__addsf3>
 80030ca:	4603      	mov	r3, r0
 80030cc:	4619      	mov	r1, r3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fdb8 	bl	8000c44 <__addsf3>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003184 <update_ahrs+0x9f4>)
 80030da:	605a      	str	r2, [r3, #4]
	dcm[1][1] = 2.0f*(0.5f - q1q1 - q3q3);
 80030dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030de:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80030e2:	f7fd fdad 	bl	8000c40 <__aeabi_fsub>
 80030e6:	4603      	mov	r3, r0
 80030e8:	6979      	ldr	r1, [r7, #20]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd fda8 	bl	8000c40 <__aeabi_fsub>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4619      	mov	r1, r3
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fd fda5 	bl	8000c44 <__addsf3>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461a      	mov	r2, r3
 80030fe:	4b21      	ldr	r3, [pc, #132]	@ (8003184 <update_ahrs+0x9f4>)
 8003100:	611a      	str	r2, [r3, #16]
	dcm[2][1] = 2.0f*(q2q3 - q0q1);
 8003102:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003104:	69b8      	ldr	r0, [r7, #24]
 8003106:	f7fd fd9b 	bl	8000c40 <__aeabi_fsub>
 800310a:	4603      	mov	r3, r0
 800310c:	4619      	mov	r1, r3
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd fd98 	bl	8000c44 <__addsf3>
 8003114:	4603      	mov	r3, r0
 8003116:	461a      	mov	r2, r3
 8003118:	4b1a      	ldr	r3, [pc, #104]	@ (8003184 <update_ahrs+0x9f4>)
 800311a:	61da      	str	r2, [r3, #28]
	dcm[0][2] = 2.0f*(q1q3 - q0q2);
 800311c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800311e:	6a38      	ldr	r0, [r7, #32]
 8003120:	f7fd fd8e 	bl	8000c40 <__aeabi_fsub>
 8003124:	4603      	mov	r3, r0
 8003126:	4619      	mov	r1, r3
 8003128:	4618      	mov	r0, r3
 800312a:	f7fd fd8b 	bl	8000c44 <__addsf3>
 800312e:	4603      	mov	r3, r0
 8003130:	461a      	mov	r2, r3
 8003132:	4b14      	ldr	r3, [pc, #80]	@ (8003184 <update_ahrs+0x9f4>)
 8003134:	609a      	str	r2, [r3, #8]
	dcm[1][2] = 2.0f*(q2q3 + q0q1);
 8003136:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003138:	69b8      	ldr	r0, [r7, #24]
 800313a:	f7fd fd83 	bl	8000c44 <__addsf3>
 800313e:	4603      	mov	r3, r0
 8003140:	4619      	mov	r1, r3
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd fd7e 	bl	8000c44 <__addsf3>
 8003148:	4603      	mov	r3, r0
 800314a:	461a      	mov	r2, r3
 800314c:	4b0d      	ldr	r3, [pc, #52]	@ (8003184 <update_ahrs+0x9f4>)
 800314e:	615a      	str	r2, [r3, #20]
	dcm[2][2] = 2.0f*(0.5f - q1q1 - q2q2);
 8003150:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003152:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8003156:	f7fd fd73 	bl	8000c40 <__aeabi_fsub>
 800315a:	4603      	mov	r3, r0
 800315c:	69f9      	ldr	r1, [r7, #28]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd fd6e 	bl	8000c40 <__aeabi_fsub>
 8003164:	4603      	mov	r3, r0
 8003166:	4619      	mov	r1, r3
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd fd6b 	bl	8000c44 <__addsf3>
 800316e:	4603      	mov	r3, r0
 8003170:	461a      	mov	r2, r3
 8003172:	e009      	b.n	8003188 <update_ahrs+0x9f8>
 8003174:	200004fc 	.word	0x200004fc
 8003178:	20000500 	.word	0x20000500
 800317c:	20000014 	.word	0x20000014
 8003180:	200004f8 	.word	0x200004f8
 8003184:	20000504 	.word	0x20000504
 8003188:	4ba3      	ldr	r3, [pc, #652]	@ (8003418 <update_ahrs+0xc88>)
 800318a:	621a      	str	r2, [r3, #32]
	
    // Rotate acceleration from Body frame to earth frame
	int16_t acc_Eframex = dcm[0][0]*accx_ + dcm[1][0]*accy_ + dcm[2][0]*accz_;
 800318c:	4ba2      	ldr	r3, [pc, #648]	@ (8003418 <update_ahrs+0xc88>)
 800318e:	681c      	ldr	r4, [r3, #0]
 8003190:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd fe09 	bl	8000dac <__aeabi_i2f>
 800319a:	4603      	mov	r3, r0
 800319c:	4619      	mov	r1, r3
 800319e:	4620      	mov	r0, r4
 80031a0:	f7fd fe58 	bl	8000e54 <__aeabi_fmul>
 80031a4:	4603      	mov	r3, r0
 80031a6:	461d      	mov	r5, r3
 80031a8:	4b9b      	ldr	r3, [pc, #620]	@ (8003418 <update_ahrs+0xc88>)
 80031aa:	68dc      	ldr	r4, [r3, #12]
 80031ac:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd fdfb 	bl	8000dac <__aeabi_i2f>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4619      	mov	r1, r3
 80031ba:	4620      	mov	r0, r4
 80031bc:	f7fd fe4a 	bl	8000e54 <__aeabi_fmul>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4619      	mov	r1, r3
 80031c4:	4628      	mov	r0, r5
 80031c6:	f7fd fd3d 	bl	8000c44 <__addsf3>
 80031ca:	4603      	mov	r3, r0
 80031cc:	461d      	mov	r5, r3
 80031ce:	4b92      	ldr	r3, [pc, #584]	@ (8003418 <update_ahrs+0xc88>)
 80031d0:	699c      	ldr	r4, [r3, #24]
 80031d2:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd fde8 	bl	8000dac <__aeabi_i2f>
 80031dc:	4603      	mov	r3, r0
 80031de:	4619      	mov	r1, r3
 80031e0:	4620      	mov	r0, r4
 80031e2:	f7fd fe37 	bl	8000e54 <__aeabi_fmul>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4619      	mov	r1, r3
 80031ea:	4628      	mov	r0, r5
 80031ec:	f7fd fd2a 	bl	8000c44 <__addsf3>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe f80a 	bl	800120c <__aeabi_f2iz>
 80031f8:	4603      	mov	r3, r0
 80031fa:	827b      	strh	r3, [r7, #18]
	int16_t acc_Eframey = dcm[0][1]*accx_ + dcm[1][1]*accy_ + dcm[2][1]*accz_;
 80031fc:	4b86      	ldr	r3, [pc, #536]	@ (8003418 <update_ahrs+0xc88>)
 80031fe:	685c      	ldr	r4, [r3, #4]
 8003200:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd fdd1 	bl	8000dac <__aeabi_i2f>
 800320a:	4603      	mov	r3, r0
 800320c:	4619      	mov	r1, r3
 800320e:	4620      	mov	r0, r4
 8003210:	f7fd fe20 	bl	8000e54 <__aeabi_fmul>
 8003214:	4603      	mov	r3, r0
 8003216:	461d      	mov	r5, r3
 8003218:	4b7f      	ldr	r3, [pc, #508]	@ (8003418 <update_ahrs+0xc88>)
 800321a:	691c      	ldr	r4, [r3, #16]
 800321c:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd fdc3 	bl	8000dac <__aeabi_i2f>
 8003226:	4603      	mov	r3, r0
 8003228:	4619      	mov	r1, r3
 800322a:	4620      	mov	r0, r4
 800322c:	f7fd fe12 	bl	8000e54 <__aeabi_fmul>
 8003230:	4603      	mov	r3, r0
 8003232:	4619      	mov	r1, r3
 8003234:	4628      	mov	r0, r5
 8003236:	f7fd fd05 	bl	8000c44 <__addsf3>
 800323a:	4603      	mov	r3, r0
 800323c:	461d      	mov	r5, r3
 800323e:	4b76      	ldr	r3, [pc, #472]	@ (8003418 <update_ahrs+0xc88>)
 8003240:	69dc      	ldr	r4, [r3, #28]
 8003242:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd fdb0 	bl	8000dac <__aeabi_i2f>
 800324c:	4603      	mov	r3, r0
 800324e:	4619      	mov	r1, r3
 8003250:	4620      	mov	r0, r4
 8003252:	f7fd fdff 	bl	8000e54 <__aeabi_fmul>
 8003256:	4603      	mov	r3, r0
 8003258:	4619      	mov	r1, r3
 800325a:	4628      	mov	r0, r5
 800325c:	f7fd fcf2 	bl	8000c44 <__addsf3>
 8003260:	4603      	mov	r3, r0
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd ffd2 	bl	800120c <__aeabi_f2iz>
 8003268:	4603      	mov	r3, r0
 800326a:	823b      	strh	r3, [r7, #16]
	int16_t acc_Eframez = dcm[0][2]*accx_ + dcm[1][2]*accy_ + dcm[2][2]*accz_;
 800326c:	4b6a      	ldr	r3, [pc, #424]	@ (8003418 <update_ahrs+0xc88>)
 800326e:	689c      	ldr	r4, [r3, #8]
 8003270:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd fd99 	bl	8000dac <__aeabi_i2f>
 800327a:	4603      	mov	r3, r0
 800327c:	4619      	mov	r1, r3
 800327e:	4620      	mov	r0, r4
 8003280:	f7fd fde8 	bl	8000e54 <__aeabi_fmul>
 8003284:	4603      	mov	r3, r0
 8003286:	461d      	mov	r5, r3
 8003288:	4b63      	ldr	r3, [pc, #396]	@ (8003418 <update_ahrs+0xc88>)
 800328a:	695c      	ldr	r4, [r3, #20]
 800328c:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd fd8b 	bl	8000dac <__aeabi_i2f>
 8003296:	4603      	mov	r3, r0
 8003298:	4619      	mov	r1, r3
 800329a:	4620      	mov	r0, r4
 800329c:	f7fd fdda 	bl	8000e54 <__aeabi_fmul>
 80032a0:	4603      	mov	r3, r0
 80032a2:	4619      	mov	r1, r3
 80032a4:	4628      	mov	r0, r5
 80032a6:	f7fd fccd 	bl	8000c44 <__addsf3>
 80032aa:	4603      	mov	r3, r0
 80032ac:	461d      	mov	r5, r3
 80032ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003418 <update_ahrs+0xc88>)
 80032b0:	6a1c      	ldr	r4, [r3, #32]
 80032b2:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd fd78 	bl	8000dac <__aeabi_i2f>
 80032bc:	4603      	mov	r3, r0
 80032be:	4619      	mov	r1, r3
 80032c0:	4620      	mov	r0, r4
 80032c2:	f7fd fdc7 	bl	8000e54 <__aeabi_fmul>
 80032c6:	4603      	mov	r3, r0
 80032c8:	4619      	mov	r1, r3
 80032ca:	4628      	mov	r0, r5
 80032cc:	f7fd fcba 	bl	8000c44 <__addsf3>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd ff9a 	bl	800120c <__aeabi_f2iz>
 80032d8:	4603      	mov	r3, r0
 80032da:	81fb      	strh	r3, [r7, #14]
	acc_Eframez -= 2000;
 80032dc:	89fb      	ldrh	r3, [r7, #14]
 80032de:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	81fb      	strh	r3, [r7, #14]


	const float accTrueScale = 9.81f/2000.0f; // 2048
 80032e6:	4b4d      	ldr	r3, [pc, #308]	@ (800341c <update_ahrs+0xc8c>)
 80032e8:	60bb      	str	r3, [r7, #8]
	acc_Eframe[X] = acc_Eframex*accTrueScale;
 80032ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd fd5c 	bl	8000dac <__aeabi_i2f>
 80032f4:	4603      	mov	r3, r0
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd fdab 	bl	8000e54 <__aeabi_fmul>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	4b47      	ldr	r3, [pc, #284]	@ (8003420 <update_ahrs+0xc90>)
 8003304:	601a      	str	r2, [r3, #0]
	acc_Eframe[Y] = acc_Eframey*accTrueScale;
 8003306:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd fd4e 	bl	8000dac <__aeabi_i2f>
 8003310:	4603      	mov	r3, r0
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd fd9d 	bl	8000e54 <__aeabi_fmul>
 800331a:	4603      	mov	r3, r0
 800331c:	461a      	mov	r2, r3
 800331e:	4b40      	ldr	r3, [pc, #256]	@ (8003420 <update_ahrs+0xc90>)
 8003320:	605a      	str	r2, [r3, #4]
	acc_Eframe[Z] = acc_Eframez*accTrueScale;
 8003322:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd fd40 	bl	8000dac <__aeabi_i2f>
 800332c:	4603      	mov	r3, r0
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd fd8f 	bl	8000e54 <__aeabi_fmul>
 8003336:	4603      	mov	r3, r0
 8003338:	461a      	mov	r2, r3
 800333a:	4b39      	ldr	r3, [pc, #228]	@ (8003420 <update_ahrs+0xc90>)
 800333c:	609a      	str	r2, [r3, #8]

	acc_Eframe[X] = fapplyDeadband(acc_Eframe[X],0.02);
 800333e:	4b38      	ldr	r3, [pc, #224]	@ (8003420 <update_ahrs+0xc90>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4938      	ldr	r1, [pc, #224]	@ (8003424 <update_ahrs+0xc94>)
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fa47 	bl	80037d8 <fapplyDeadband>
 800334a:	4603      	mov	r3, r0
 800334c:	4a34      	ldr	r2, [pc, #208]	@ (8003420 <update_ahrs+0xc90>)
 800334e:	6013      	str	r3, [r2, #0]
	acc_Eframe[Y] = fapplyDeadband(acc_Eframe[Y],0.02);
 8003350:	4b33      	ldr	r3, [pc, #204]	@ (8003420 <update_ahrs+0xc90>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4933      	ldr	r1, [pc, #204]	@ (8003424 <update_ahrs+0xc94>)
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fa3e 	bl	80037d8 <fapplyDeadband>
 800335c:	4603      	mov	r3, r0
 800335e:	4a30      	ldr	r2, [pc, #192]	@ (8003420 <update_ahrs+0xc90>)
 8003360:	6053      	str	r3, [r2, #4]
	acc_Eframe[Z] = fapplyDeadband(acc_Eframe[Z],0.02);
 8003362:	4b2f      	ldr	r3, [pc, #188]	@ (8003420 <update_ahrs+0xc90>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	492f      	ldr	r1, [pc, #188]	@ (8003424 <update_ahrs+0xc94>)
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fa35 	bl	80037d8 <fapplyDeadband>
 800336e:	4603      	mov	r3, r0
 8003370:	4a2b      	ldr	r2, [pc, #172]	@ (8003420 <update_ahrs+0xc90>)
 8003372:	6093      	str	r3, [r2, #8]

    if(millis() - init_us < 5000){
 8003374:	4b2c      	ldr	r3, [pc, #176]	@ (8003428 <update_ahrs+0xc98>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800337c:	4b2b      	ldr	r3, [pc, #172]	@ (800342c <update_ahrs+0xc9c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4413      	add	r3, r2
 8003382:	4a2b      	ldr	r2, [pc, #172]	@ (8003430 <update_ahrs+0xca0>)
 8003384:	fba2 2303 	umull	r2, r3, r2, r3
 8003388:	099a      	lsrs	r2, r3, #6
 800338a:	4b2a      	ldr	r3, [pc, #168]	@ (8003434 <update_ahrs+0xca4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003394:	4293      	cmp	r3, r2
 8003396:	d80b      	bhi.n	80033b0 <update_ahrs+0xc20>
    	acc_Eframe[X] = 0;
 8003398:	4b21      	ldr	r3, [pc, #132]	@ (8003420 <update_ahrs+0xc90>)
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
    	acc_Eframe[Y] = 0;
 80033a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003420 <update_ahrs+0xc90>)
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	605a      	str	r2, [r3, #4]
    	acc_Eframe[Z] = 0;
 80033a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003420 <update_ahrs+0xc90>)
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]

	//position_test += velocity_test*0.01f + 0.5* acc_Eframe[Z]* 0.01f * 0.01f;

	//velocity_test += acc_Eframe[Z]*0.01f;

	AHRS.pitch = -atan2_approx(-dcm[0][2],sqrtf(1 - dcm[0][2]*dcm[0][2]))*DEG;
 80033b0:	4b19      	ldr	r3, [pc, #100]	@ (8003418 <update_ahrs+0xc88>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80033b8:	4b17      	ldr	r3, [pc, #92]	@ (8003418 <update_ahrs+0xc88>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4a16      	ldr	r2, [pc, #88]	@ (8003418 <update_ahrs+0xc88>)
 80033be:	6892      	ldr	r2, [r2, #8]
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd fd46 	bl	8000e54 <__aeabi_fmul>
 80033c8:	4603      	mov	r3, r0
 80033ca:	4619      	mov	r1, r3
 80033cc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80033d0:	f7fd fc36 	bl	8000c40 <__aeabi_fsub>
 80033d4:	4603      	mov	r3, r0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f010 fd68 	bl	8013eac <sqrtf>
 80033dc:	4603      	mov	r3, r0
 80033de:	4619      	mov	r1, r3
 80033e0:	4620      	mov	r0, r4
 80033e2:	f000 f939 	bl	8003658 <atan2_approx>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80033ec:	4912      	ldr	r1, [pc, #72]	@ (8003438 <update_ahrs+0xca8>)
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd fd30 	bl	8000e54 <__aeabi_fmul>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	4b10      	ldr	r3, [pc, #64]	@ (800343c <update_ahrs+0xcac>)
 80033fa:	605a      	str	r2, [r3, #4]
	AHRS.roll = -atan2_approx(-dcm[1][2],dcm[2][2])*DEG;
 80033fc:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <update_ahrs+0xc88>)
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003404:	4a04      	ldr	r2, [pc, #16]	@ (8003418 <update_ahrs+0xc88>)
 8003406:	6a12      	ldr	r2, [r2, #32]
 8003408:	4611      	mov	r1, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f000 f924 	bl	8003658 <atan2_approx>
 8003410:	4603      	mov	r3, r0
 8003412:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003416:	e013      	b.n	8003440 <update_ahrs+0xcb0>
 8003418:	20000504 	.word	0x20000504
 800341c:	3ba0ba20 	.word	0x3ba0ba20
 8003420:	200004ec 	.word	0x200004ec
 8003424:	3ca3d70a 	.word	0x3ca3d70a
 8003428:	20000544 	.word	0x20000544
 800342c:	20000548 	.word	0x20000548
 8003430:	10624dd3 	.word	0x10624dd3
 8003434:	20000528 	.word	0x20000528
 8003438:	42652ee0 	.word	0x42652ee0
 800343c:	200004c8 	.word	0x200004c8
 8003440:	4932      	ldr	r1, [pc, #200]	@ (800350c <update_ahrs+0xd7c>)
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd fd06 	bl	8000e54 <__aeabi_fmul>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	4b30      	ldr	r3, [pc, #192]	@ (8003510 <update_ahrs+0xd80>)
 800344e:	601a      	str	r2, [r3, #0]
	float yaw_ = -atan2_approx(dcm[0][1],dcm[0][0])*DEG;
 8003450:	4b30      	ldr	r3, [pc, #192]	@ (8003514 <update_ahrs+0xd84>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4a2f      	ldr	r2, [pc, #188]	@ (8003514 <update_ahrs+0xd84>)
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f000 f8fc 	bl	8003658 <atan2_approx>
 8003460:	4603      	mov	r3, r0
 8003462:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003466:	4929      	ldr	r1, [pc, #164]	@ (800350c <update_ahrs+0xd7c>)
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd fcf3 	bl	8000e54 <__aeabi_fmul>
 800346e:	4603      	mov	r3, r0
 8003470:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	if(yaw_ < 0){
 8003474:	f04f 0100 	mov.w	r1, #0
 8003478:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800347c:	f7fd fe88 	bl	8001190 <__aeabi_fcmplt>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <update_ahrs+0xd06>
		 yaw_ = 360 + yaw_;
 8003486:	4924      	ldr	r1, [pc, #144]	@ (8003518 <update_ahrs+0xd88>)
 8003488:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800348c:	f7fd fbda 	bl	8000c44 <__addsf3>
 8003490:	4603      	mov	r3, r0
 8003492:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	}
	AHRS.yaw =  yaw_;
 8003496:	4a1e      	ldr	r2, [pc, #120]	@ (8003510 <update_ahrs+0xd80>)
 8003498:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800349c:	6093      	str	r3, [r2, #8]
	AHRS.roll_rate  = gx_/config.gyr_lsb;
 800349e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fc82 	bl	8000dac <__aeabi_i2f>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b1c      	ldr	r3, [pc, #112]	@ (800351c <update_ahrs+0xd8c>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	4619      	mov	r1, r3
 80034b0:	4610      	mov	r0, r2
 80034b2:	f7fd fd83 	bl	8000fbc <__aeabi_fdiv>
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b15      	ldr	r3, [pc, #84]	@ (8003510 <update_ahrs+0xd80>)
 80034bc:	60da      	str	r2, [r3, #12]
	AHRS.pitch_rate = -gy_/config.gyr_lsb;
 80034be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034c2:	425b      	negs	r3, r3
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fd fc71 	bl	8000dac <__aeabi_i2f>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b13      	ldr	r3, [pc, #76]	@ (800351c <update_ahrs+0xd8c>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4619      	mov	r1, r3
 80034d2:	4610      	mov	r0, r2
 80034d4:	f7fd fd72 	bl	8000fbc <__aeabi_fdiv>
 80034d8:	4603      	mov	r3, r0
 80034da:	461a      	mov	r2, r3
 80034dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003510 <update_ahrs+0xd80>)
 80034de:	611a      	str	r2, [r3, #16]
	AHRS.yaw_rate   = -gz_/config.gyr_lsb;
 80034e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034e4:	425b      	negs	r3, r3
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd fc60 	bl	8000dac <__aeabi_i2f>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b0b      	ldr	r3, [pc, #44]	@ (800351c <update_ahrs+0xd8c>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	4619      	mov	r1, r3
 80034f4:	4610      	mov	r0, r2
 80034f6:	f7fd fd61 	bl	8000fbc <__aeabi_fdiv>
 80034fa:	4603      	mov	r3, r0
 80034fc:	461a      	mov	r2, r3
 80034fe:	4b04      	ldr	r3, [pc, #16]	@ (8003510 <update_ahrs+0xd80>)
 8003500:	615a      	str	r2, [r3, #20]

}
 8003502:	bf00      	nop
 8003504:	3798      	adds	r7, #152	@ 0x98
 8003506:	46bd      	mov	sp, r7
 8003508:	bdb0      	pop	{r4, r5, r7, pc}
 800350a:	bf00      	nop
 800350c:	42652ee0 	.word	0x42652ee0
 8003510:	200004c8 	.word	0x200004c8
 8003514:	20000504 	.word	0x20000504
 8003518:	43b40000 	.word	0x43b40000
 800351c:	20000018 	.word	0x20000018

08003520 <sin_approx>:
#define sinPolyCoef5  8.333017292e-3f                                          // Double:  8.333017291562218127986291618761571373087e-3
#define sinPolyCoef7 -1.980661520e-4f                                          // Double: -1.980661520135080504411629636078917643846e-4
#define sinPolyCoef9  2.600054768e-6f                                          // Double:  2.600054767890361277123254766503271638682e-6
#endif
float sin_approx(float x)
{
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
    int32_t xint = x;
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fd fe6f 	bl	800120c <__aeabi_f2iz>
 800352e:	4603      	mov	r3, r0
 8003530:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f113 0f20 	cmn.w	r3, #32
 8003538:	db02      	blt.n	8003540 <sin_approx+0x20>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b20      	cmp	r3, #32
 800353e:	dd08      	ble.n	8003552 <sin_approx+0x32>
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e074      	b.n	8003630 <sin_approx+0x110>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 8003546:	493c      	ldr	r1, [pc, #240]	@ (8003638 <sin_approx+0x118>)
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7fd fb79 	bl	8000c40 <__aeabi_fsub>
 800354e:	4603      	mov	r3, r0
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	493a      	ldr	r1, [pc, #232]	@ (800363c <sin_approx+0x11c>)
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7fd fe39 	bl	80011cc <__aeabi_fcmpgt>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f2      	bne.n	8003546 <sin_approx+0x26>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 8003560:	e005      	b.n	800356e <sin_approx+0x4e>
 8003562:	4935      	ldr	r1, [pc, #212]	@ (8003638 <sin_approx+0x118>)
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7fd fb6d 	bl	8000c44 <__addsf3>
 800356a:	4603      	mov	r3, r0
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	4934      	ldr	r1, [pc, #208]	@ (8003640 <sin_approx+0x120>)
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7fd fe0d 	bl	8001190 <__aeabi_fcmplt>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f2      	bne.n	8003562 <sin_approx+0x42>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 800357c:	4931      	ldr	r1, [pc, #196]	@ (8003644 <sin_approx+0x124>)
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd fe24 	bl	80011cc <__aeabi_fcmpgt>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <sin_approx+0x82>
 800358a:	492e      	ldr	r1, [pc, #184]	@ (8003644 <sin_approx+0x124>)
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7fd fb57 	bl	8000c40 <__aeabi_fsub>
 8003592:	4603      	mov	r3, r0
 8003594:	4619      	mov	r1, r3
 8003596:	482b      	ldr	r0, [pc, #172]	@ (8003644 <sin_approx+0x124>)
 8003598:	f7fd fb52 	bl	8000c40 <__aeabi_fsub>
 800359c:	4603      	mov	r3, r0
 800359e:	607b      	str	r3, [r7, #4]
 80035a0:	e011      	b.n	80035c6 <sin_approx+0xa6>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 80035a2:	4929      	ldr	r1, [pc, #164]	@ (8003648 <sin_approx+0x128>)
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd fdf3 	bl	8001190 <__aeabi_fcmplt>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <sin_approx+0xa6>
 80035b0:	4924      	ldr	r1, [pc, #144]	@ (8003644 <sin_approx+0x124>)
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd fb46 	bl	8000c44 <__addsf3>
 80035b8:	4603      	mov	r3, r0
 80035ba:	4619      	mov	r1, r3
 80035bc:	4822      	ldr	r0, [pc, #136]	@ (8003648 <sin_approx+0x128>)
 80035be:	f7fd fb3f 	bl	8000c40 <__aeabi_fsub>
 80035c2:	4603      	mov	r3, r0
 80035c4:	607b      	str	r3, [r7, #4]
    float x2 = x * x;
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fd fc43 	bl	8000e54 <__aeabi_fmul>
 80035ce:	4603      	mov	r3, r0
 80035d0:	60bb      	str	r3, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7fd fc3d 	bl	8000e54 <__aeabi_fmul>
 80035da:	4603      	mov	r3, r0
 80035dc:	461c      	mov	r4, r3
 80035de:	f04f 0100 	mov.w	r1, #0
 80035e2:	68b8      	ldr	r0, [r7, #8]
 80035e4:	f7fd fc36 	bl	8000e54 <__aeabi_fmul>
 80035e8:	4603      	mov	r3, r0
 80035ea:	4918      	ldr	r1, [pc, #96]	@ (800364c <sin_approx+0x12c>)
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fd fb27 	bl	8000c40 <__aeabi_fsub>
 80035f2:	4603      	mov	r3, r0
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fd fc2c 	bl	8000e54 <__aeabi_fmul>
 80035fc:	4603      	mov	r3, r0
 80035fe:	4914      	ldr	r1, [pc, #80]	@ (8003650 <sin_approx+0x130>)
 8003600:	4618      	mov	r0, r3
 8003602:	f7fd fb1f 	bl	8000c44 <__addsf3>
 8003606:	4603      	mov	r3, r0
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd fc22 	bl	8000e54 <__aeabi_fmul>
 8003610:	4603      	mov	r3, r0
 8003612:	4910      	ldr	r1, [pc, #64]	@ (8003654 <sin_approx+0x134>)
 8003614:	4618      	mov	r0, r3
 8003616:	f7fd fb13 	bl	8000c40 <__aeabi_fsub>
 800361a:	4603      	mov	r3, r0
 800361c:	4619      	mov	r1, r3
 800361e:	4620      	mov	r0, r4
 8003620:	f7fd fc18 	bl	8000e54 <__aeabi_fmul>
 8003624:	4603      	mov	r3, r0
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fb0b 	bl	8000c44 <__addsf3>
 800362e:	4603      	mov	r3, r0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	bd90      	pop	{r4, r7, pc}
 8003638:	40c90fdb 	.word	0x40c90fdb
 800363c:	40490fdb 	.word	0x40490fdb
 8003640:	c0490fdb 	.word	0xc0490fdb
 8003644:	3fc90fdb 	.word	0x3fc90fdb
 8003648:	bfc90fdb 	.word	0xbfc90fdb
 800364c:	3941e792 	.word	0x3941e792
 8003650:	3c083097 	.word	0x3c083097
 8003654:	3e2aa815 	.word	0x3e2aa815

08003658 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 8003658:	b590      	push	{r4, r7, lr}
 800365a:	b08b      	sub	sp, #44	@ 0x2c
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003668:	623b      	str	r3, [r7, #32]
    absY = fabsf(y);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003670:	61fb      	str	r3, [r7, #28]
    res  = MAX(absX, absY);
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	6979      	ldr	r1, [r7, #20]
 800367c:	69b8      	ldr	r0, [r7, #24]
 800367e:	f7fd fda5 	bl	80011cc <__aeabi_fcmpgt>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <atan2_approx+0x34>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	e000      	b.n	800368e <atan2_approx+0x36>
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (res) res = MIN(absX, absY) / res;
 8003690:	f04f 0100 	mov.w	r1, #0
 8003694:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003696:	f7fd fd71 	bl	800117c <__aeabi_fcmpeq>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d114      	bne.n	80036ca <atan2_approx+0x72>
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68f9      	ldr	r1, [r7, #12]
 80036aa:	6938      	ldr	r0, [r7, #16]
 80036ac:	f7fd fd70 	bl	8001190 <__aeabi_fcmplt>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <atan2_approx+0x62>
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	e000      	b.n	80036bc <atan2_approx+0x64>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd fc7c 	bl	8000fbc <__aeabi_fdiv>
 80036c4:	4603      	mov	r3, r0
 80036c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c8:	e002      	b.n	80036d0 <atan2_approx+0x78>
    else res = 0.0f;
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 80036d0:	4938      	ldr	r1, [pc, #224]	@ (80037b4 <atan2_approx+0x15c>)
 80036d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036d4:	f7fd fbbe 	bl	8000e54 <__aeabi_fmul>
 80036d8:	4603      	mov	r3, r0
 80036da:	4937      	ldr	r1, [pc, #220]	@ (80037b8 <atan2_approx+0x160>)
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd faaf 	bl	8000c40 <__aeabi_fsub>
 80036e2:	4603      	mov	r3, r0
 80036e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fbb4 	bl	8000e54 <__aeabi_fmul>
 80036ec:	4603      	mov	r3, r0
 80036ee:	4933      	ldr	r1, [pc, #204]	@ (80037bc <atan2_approx+0x164>)
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd faa5 	bl	8000c40 <__aeabi_fsub>
 80036f6:	4603      	mov	r3, r0
 80036f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fd fbaa 	bl	8000e54 <__aeabi_fmul>
 8003700:	4603      	mov	r3, r0
 8003702:	492f      	ldr	r1, [pc, #188]	@ (80037c0 <atan2_approx+0x168>)
 8003704:	4618      	mov	r0, r3
 8003706:	f7fd fa9b 	bl	8000c40 <__aeabi_fsub>
 800370a:	4603      	mov	r3, r0
 800370c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800370e:	4618      	mov	r0, r3
 8003710:	f7fd fba0 	bl	8000e54 <__aeabi_fmul>
 8003714:	4603      	mov	r3, r0
 8003716:	492b      	ldr	r1, [pc, #172]	@ (80037c4 <atan2_approx+0x16c>)
 8003718:	4618      	mov	r0, r3
 800371a:	f7fd fa91 	bl	8000c40 <__aeabi_fsub>
 800371e:	4603      	mov	r3, r0
 8003720:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8003724:	4928      	ldr	r1, [pc, #160]	@ (80037c8 <atan2_approx+0x170>)
 8003726:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003728:	f7fd fb94 	bl	8000e54 <__aeabi_fmul>
 800372c:	4603      	mov	r3, r0
 800372e:	4927      	ldr	r1, [pc, #156]	@ (80037cc <atan2_approx+0x174>)
 8003730:	4618      	mov	r0, r3
 8003732:	f7fd fa87 	bl	8000c44 <__addsf3>
 8003736:	4603      	mov	r3, r0
 8003738:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd fb8a 	bl	8000e54 <__aeabi_fmul>
 8003740:	4603      	mov	r3, r0
 8003742:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd fa7c 	bl	8000c44 <__addsf3>
 800374c:	4603      	mov	r3, r0
 800374e:	4619      	mov	r1, r3
 8003750:	4620      	mov	r0, r4
 8003752:	f7fd fc33 	bl	8000fbc <__aeabi_fdiv>
 8003756:	4603      	mov	r3, r0
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 800375a:	6a39      	ldr	r1, [r7, #32]
 800375c:	69f8      	ldr	r0, [r7, #28]
 800375e:	f7fd fd35 	bl	80011cc <__aeabi_fcmpgt>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <atan2_approx+0x11c>
 8003768:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800376a:	4819      	ldr	r0, [pc, #100]	@ (80037d0 <atan2_approx+0x178>)
 800376c:	f7fd fa68 	bl	8000c40 <__aeabi_fsub>
 8003770:	4603      	mov	r3, r0
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
    if (x < 0) res = M_PIf - res;
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	6838      	ldr	r0, [r7, #0]
 800377a:	f7fd fd09 	bl	8001190 <__aeabi_fcmplt>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <atan2_approx+0x138>
 8003784:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003786:	4813      	ldr	r0, [pc, #76]	@ (80037d4 <atan2_approx+0x17c>)
 8003788:	f7fd fa5a 	bl	8000c40 <__aeabi_fsub>
 800378c:	4603      	mov	r3, r0
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) res = -res;
 8003790:	f04f 0100 	mov.w	r1, #0
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7fd fcfb 	bl	8001190 <__aeabi_fcmplt>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <atan2_approx+0x150>
 80037a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
    return res;
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	372c      	adds	r7, #44	@ 0x2c
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd90      	pop	{r4, r7, pc}
 80037b2:	bf00      	nop
 80037b4:	3d4e0939 	.word	0x3d4e0939
 80037b8:	3e9eb5e3 	.word	0x3e9eb5e3
 80037bc:	3e16fa88 	.word	0x3e16fa88
 80037c0:	3f7ffe45 	.word	0x3f7ffe45
 80037c4:	34a8dfa7 	.word	0x34a8dfa7
 80037c8:	3f24fb99 	.word	0x3f24fb99
 80037cc:	3e16a269 	.word	0x3e16a269
 80037d0:	3fc90fdb 	.word	0x3fc90fdb
 80037d4:	40490fdb 	.word	0x40490fdb

080037d8 <fapplyDeadband>:

    return value >= 0 ? value - deadband : value + deadband;
}

float fapplyDeadband(const float value, const float deadband)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
    if (fabsf(value) < deadband) {
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037e8:	4619      	mov	r1, r3
 80037ea:	6838      	ldr	r0, [r7, #0]
 80037ec:	f7fd fcee 	bl	80011cc <__aeabi_fcmpgt>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <fapplyDeadband+0x24>
        return 0;
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	e012      	b.n	8003822 <fapplyDeadband+0x4a>
    }

    return value >= 0 ? value - deadband : value + deadband;
 80037fc:	f04f 0100 	mov.w	r1, #0
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7fd fcd9 	bl	80011b8 <__aeabi_fcmpge>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <fapplyDeadband+0x40>
 800380c:	6839      	ldr	r1, [r7, #0]
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd fa16 	bl	8000c40 <__aeabi_fsub>
 8003814:	4603      	mov	r3, r0
 8003816:	e004      	b.n	8003822 <fapplyDeadband+0x4a>
 8003818:	6839      	ldr	r1, [r7, #0]
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd fa12 	bl	8000c44 <__addsf3>
 8003820:	4603      	mov	r3, r0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <invSqrt_>:
    return (num << 12) / den;
}


float invSqrt_(float x)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8003834:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fd fb0b 	bl	8000e54 <__aeabi_fmul>
 800383e:	4603      	mov	r3, r0
 8003840:	617b      	str	r3, [r7, #20]
	float y = x;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8003846:	f107 0310 	add.w	r3, r7, #16
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	105a      	asrs	r2, r3, #1
 8003852:	4b13      	ldr	r3, [pc, #76]	@ (80038a0 <invSqrt_+0x74>)
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8003858:	f107 030c 	add.w	r3, r7, #12
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	6979      	ldr	r1, [r7, #20]
 8003864:	4618      	mov	r0, r3
 8003866:	f7fd faf5 	bl	8000e54 <__aeabi_fmul>
 800386a:	4603      	mov	r3, r0
 800386c:	461a      	mov	r2, r3
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4619      	mov	r1, r3
 8003872:	4610      	mov	r0, r2
 8003874:	f7fd faee 	bl	8000e54 <__aeabi_fmul>
 8003878:	4603      	mov	r3, r0
 800387a:	4619      	mov	r1, r3
 800387c:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8003880:	f7fd f9de 	bl	8000c40 <__aeabi_fsub>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4619      	mov	r1, r3
 800388c:	4610      	mov	r0, r2
 800388e:	f7fd fae1 	bl	8000e54 <__aeabi_fmul>
 8003892:	4603      	mov	r3, r0
 8003894:	613b      	str	r3, [r7, #16]
	//y = y * (1.5f - (halfx * y * y));
	return y;
 8003896:	693b      	ldr	r3, [r7, #16]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	5f3759df 	.word	0x5f3759df

080038a4 <constrainf>:
    else
        return amt;
}

static inline float constrainf(float amt, float low, float high)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f7fd fc6c 	bl	8001190 <__aeabi_fcmplt>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <constrainf+0x1e>
        return low;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	e009      	b.n	80038d6 <constrainf+0x32>
    else if (amt > high)
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7fd fc81 	bl	80011cc <__aeabi_fcmpgt>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <constrainf+0x30>
        return high;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	e000      	b.n	80038d6 <constrainf+0x32>
    else
        return amt;
 80038d4:	68fb      	ldr	r3, [r7, #12]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <pid_init>:
#include "string.h"

#define usTosec(x)    (x *(1e-06f))
#define MAX_WAIT_TIME 500000

void pid_init(pid_t  *pid_in,float kp, float ki, float kd, float f_cut_D, float maxI){
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	603b      	str	r3, [r7, #0]
  memset(pid_in,0,sizeof(pid_t));
 80038ec:	2224      	movs	r2, #36	@ 0x24
 80038ee:	2100      	movs	r1, #0
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f010 fa65 	bl	8013dc0 <memset>
  pid_in->kp = kp;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	601a      	str	r2, [r3, #0]
  pid_in->ki = ki;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	605a      	str	r2, [r3, #4]
  pid_in->kd = kd;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	609a      	str	r2, [r3, #8]
  pid_in->f_cut_D = f_cut_D;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	61da      	str	r2, [r3, #28]
  pid_in->I_range = maxI;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	619a      	str	r2, [r3, #24]
  pid_in->last_input = 0;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
  pid_in->D_filted = 0;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	615a      	str	r2, [r3, #20]
  pid_in->init = 1;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2020 	strb.w	r2, [r3, #32]
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <pid_calculate>:

float pid_calculate(pid_t *pid_in,float input, float setpoint,float scaler,float dt){
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b08b      	sub	sp, #44	@ 0x2c
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
   if(pid_in->init){
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d009      	beq.n	8003960 <pid_calculate+0x2c>
       pid_in->last_input = input;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	611a      	str	r2, [r3, #16]
       pid_in->init = 0;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2020 	strb.w	r2, [r3, #32]
       return 0.0f;
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	e0a8      	b.n	8003ab2 <pid_calculate+0x17e>
   }

   float error = setpoint - input;
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd f96c 	bl	8000c40 <__aeabi_fsub>
 8003968:	4603      	mov	r3, r0
 800396a:	623b      	str	r3, [r7, #32]
   float output = error*pid_in->kp*scaler;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6a39      	ldr	r1, [r7, #32]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fd fa6e 	bl	8000e54 <__aeabi_fmul>
 8003978:	4603      	mov	r3, r0
 800397a:	4619      	mov	r1, r3
 800397c:	6838      	ldr	r0, [r7, #0]
 800397e:	f7fd fa69 	bl	8000e54 <__aeabi_fmul>
 8003982:	4603      	mov	r3, r0
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24

   if(pid_in->ki > 0){
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f04f 0100 	mov.w	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f7fd fc1c 	bl	80011cc <__aeabi_fcmpgt>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d02b      	beq.n	80039f2 <pid_calculate+0xbe>
      pid_in->i_term += error *pid_in->ki *dt;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	68dc      	ldr	r4, [r3, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	6a39      	ldr	r1, [r7, #32]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fd fa55 	bl	8000e54 <__aeabi_fmul>
 80039aa:	4603      	mov	r3, r0
 80039ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fd fa50 	bl	8000e54 <__aeabi_fmul>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4619      	mov	r1, r3
 80039b8:	4620      	mov	r0, r4
 80039ba:	f7fd f943 	bl	8000c44 <__addsf3>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	60da      	str	r2, [r3, #12]
      pid_in->i_term = constrainf(pid_in->i_term,-pid_in->I_range,pid_in->I_range);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	68d8      	ldr	r0, [r3, #12]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	461a      	mov	r2, r3
 80039d8:	f7ff ff64 	bl	80038a4 <constrainf>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	60da      	str	r2, [r3, #12]
      output += pid_in->i_term;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	4619      	mov	r1, r3
 80039e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039ea:	f7fd f92b 	bl	8000c44 <__addsf3>
 80039ee:	4603      	mov	r3, r0
 80039f0:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   if(pid_in->kd > 0){
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f04f 0100 	mov.w	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd fbe6 	bl	80011cc <__aeabi_fcmpgt>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d054      	beq.n	8003ab0 <pid_calculate+0x17c>
        // low pass filter
        float RC = 1.0f / (2 *M_PIf *pid_in->f_cut_D);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	492c      	ldr	r1, [pc, #176]	@ (8003abc <pid_calculate+0x188>)
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd fa21 	bl	8000e54 <__aeabi_fmul>
 8003a12:	4603      	mov	r3, r0
 8003a14:	4619      	mov	r1, r3
 8003a16:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003a1a:	f7fd facf 	bl	8000fbc <__aeabi_fdiv>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	61fb      	str	r3, [r7, #28]
        float gain_lpf = dt/(RC + dt);
 8003a22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a24:	69f8      	ldr	r0, [r7, #28]
 8003a26:	f7fd f90d 	bl	8000c44 <__addsf3>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003a30:	f7fd fac4 	bl	8000fbc <__aeabi_fdiv>
 8003a34:	4603      	mov	r3, r0
 8003a36:	61bb      	str	r3, [r7, #24]
        float delta =  (input - pid_in->last_input)*pid_in->kd;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	68b8      	ldr	r0, [r7, #8]
 8003a40:	f7fd f8fe 	bl	8000c40 <__aeabi_fsub>
 8003a44:	4603      	mov	r3, r0
 8003a46:	461a      	mov	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f7fd fa00 	bl	8000e54 <__aeabi_fmul>
 8003a54:	4603      	mov	r3, r0
 8003a56:	617b      	str	r3, [r7, #20]
        pid_in->last_input = input;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	611a      	str	r2, [r3, #16]
        delta /= dt;
 8003a5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a60:	6978      	ldr	r0, [r7, #20]
 8003a62:	f7fd faab 	bl	8000fbc <__aeabi_fdiv>
 8003a66:	4603      	mov	r3, r0
 8003a68:	617b      	str	r3, [r7, #20]
        pid_in->D_filted += gain_lpf*(delta - pid_in->D_filted);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	695c      	ldr	r4, [r3, #20]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	4619      	mov	r1, r3
 8003a74:	6978      	ldr	r0, [r7, #20]
 8003a76:	f7fd f8e3 	bl	8000c40 <__aeabi_fsub>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	69b9      	ldr	r1, [r7, #24]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd f9e8 	bl	8000e54 <__aeabi_fmul>
 8003a84:	4603      	mov	r3, r0
 8003a86:	4619      	mov	r1, r3
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7fd f8db 	bl	8000c44 <__addsf3>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	615a      	str	r2, [r3, #20]
        output -= pid_in->D_filted*scaler;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	6839      	ldr	r1, [r7, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fd f9d9 	bl	8000e54 <__aeabi_fmul>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003aa8:	f7fd f8ca 	bl	8000c40 <__aeabi_fsub>
 8003aac:	4603      	mov	r3, r0
 8003aae:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   return output;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	372c      	adds	r7, #44	@ 0x2c
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd90      	pop	{r4, r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40c90fdb 	.word	0x40c90fdb

08003ac0 <constrain>:
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	da01      	bge.n	8003ad8 <constrain+0x18>
        return low;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	e006      	b.n	8003ae6 <constrain+0x26>
    else if (amt > high)
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	dd01      	ble.n	8003ae4 <constrain+0x24>
        return high;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	e000      	b.n	8003ae6 <constrain+0x26>
        return amt;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <initPWM>:
uint8_t pwm_lock_status;

/*
 * init pwm 
 */
void initPWM(TIM_HandleTypeDef *htim){
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	htimm = htim;
 8003af8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b6c <initPWM+0x7c>)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6013      	str	r3, [r2, #0]
	pr_status = 1;
 8003afe:	4b1c      	ldr	r3, [pc, #112]	@ (8003b70 <initPWM+0x80>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
	pwm_lock_status = 0;
 8003b04:	4b1b      	ldr	r3, [pc, #108]	@ (8003b74 <initPWM+0x84>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	701a      	strb	r2, [r3, #0]
	pwm_last_update_ms= 0;
 8003b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b78 <initPWM+0x88>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch1);
 8003b10:	2100      	movs	r1, #0
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f007 f932 	bl	800ad7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch2);
 8003b18:	2104      	movs	r1, #4
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f007 f92e 	bl	800ad7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch3);
 8003b20:	2108      	movs	r1, #8
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f007 f92a 	bl	800ad7c <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim,ch4);
	__HAL_TIM_SetAutoreload(htimm,PWM_RELOAD_AFFTER);
 8003b28:	4b10      	ldr	r3, [pc, #64]	@ (8003b6c <initPWM+0x7c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b34:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <initPWM+0x7c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b3c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SetCompare (htimm,ch1,1000);
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <initPWM+0x7c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b48:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare (htimm,ch2,1500);
 8003b4a:	4b08      	ldr	r3, [pc, #32]	@ (8003b6c <initPWM+0x7c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003b54:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare (htimm,ch3,1500);
 8003b56:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <initPWM+0x7c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003b60:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000538 	.word	0x20000538
 8003b70:	20000540 	.word	0x20000540
 8003b74:	20000541 	.word	0x20000541
 8003b78:	2000053c 	.word	0x2000053c

08003b7c <writePwm>:


void writePwm(uint32_t Channel,int16_t dulty,int8_t invert)
{     if( invert){
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	807b      	strh	r3, [r7, #2]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	707b      	strb	r3, [r7, #1]
 8003b8c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d009      	beq.n	8003ba8 <writePwm+0x2c>
	    dulty -= 1000;
 8003b94:	887b      	ldrh	r3, [r7, #2]
 8003b96:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	807b      	strh	r3, [r7, #2]
	    dulty  = 2000 - dulty; 
 8003b9e:	887b      	ldrh	r3, [r7, #2]
 8003ba0:	f5c3 63fa 	rsb	r3, r3, #2000	@ 0x7d0
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	807b      	strh	r3, [r7, #2]
      }
	  dulty = constrain(dulty,1000,2000);
 8003ba8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bac:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003bb0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff ff83 	bl	8003ac0 <constrain>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d106      	bne.n	8003bd2 <writePwm+0x56>
 8003bc4:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <writePwm+0x94>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003bce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003bd0:	e019      	b.n	8003c06 <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d106      	bne.n	8003be6 <writePwm+0x6a>
 8003bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003c10 <writePwm+0x94>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003be2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003be4:	e00f      	b.n	8003c06 <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d106      	bne.n	8003bfa <writePwm+0x7e>
 8003bec:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <writePwm+0x94>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bf6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003bf8:	e005      	b.n	8003c06 <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003bfa:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <writePwm+0x94>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c04:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000538 	.word	0x20000538

08003c14 <write_pwm_ctrl>:

void write_pwm_ctrl(uint16_t throtlle,uint16_t servoL,uint16_t servoR){
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	80fb      	strh	r3, [r7, #6]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	80bb      	strh	r3, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	807b      	strh	r3, [r7, #2]
      if(pr_status || pwm_lock_status){
 8003c26:	4b17      	ldr	r3, [pc, #92]	@ (8003c84 <write_pwm_ctrl+0x70>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d103      	bne.n	8003c36 <write_pwm_ctrl+0x22>
 8003c2e:	4b16      	ldr	r3, [pc, #88]	@ (8003c88 <write_pwm_ctrl+0x74>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <write_pwm_ctrl+0x34>
           pwm_last_update_ms = HAL_GetTick();
 8003c36:	f002 fe21 	bl	800687c <HAL_GetTick>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4a13      	ldr	r2, [pc, #76]	@ (8003c8c <write_pwm_ctrl+0x78>)
 8003c3e:	6013      	str	r3, [r2, #0]
		   pr_status = 0;
 8003c40:	4b10      	ldr	r3, [pc, #64]	@ (8003c84 <write_pwm_ctrl+0x70>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	701a      	strb	r2, [r3, #0]
		   return;
 8003c46:	e019      	b.n	8003c7c <write_pwm_ctrl+0x68>
	  }
	 writePwm(TIM_CHANNEL_1,throtlle,INVERT);
 8003c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	4619      	mov	r1, r3
 8003c50:	2000      	movs	r0, #0
 8003c52:	f7ff ff93 	bl	8003b7c <writePwm>
     writePwm(TIM_CHANNEL_2,servoL,INVERT);
 8003c56:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	2004      	movs	r0, #4
 8003c60:	f7ff ff8c 	bl	8003b7c <writePwm>
     writePwm(TIM_CHANNEL_3,servoR,NOT_INVERT);
 8003c64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	2008      	movs	r0, #8
 8003c6e:	f7ff ff85 	bl	8003b7c <writePwm>
	pwm_last_update_ms = HAL_GetTick();
 8003c72:	f002 fe03 	bl	800687c <HAL_GetTick>
 8003c76:	4603      	mov	r3, r0
 8003c78:	4a04      	ldr	r2, [pc, #16]	@ (8003c8c <write_pwm_ctrl+0x78>)
 8003c7a:	6013      	str	r3, [r2, #0]
}
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000540 	.word	0x20000540
 8003c88:	20000541 	.word	0x20000541
 8003c8c:	2000053c 	.word	0x2000053c

08003c90 <timer_start>:
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}

void timer_start(TIM_HandleTypeDef *htimz){
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	htimmz = htimz;
 8003c98:	4a05      	ldr	r2, [pc, #20]	@ (8003cb0 <timer_start+0x20>)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htimmz);
 8003c9e:	4b04      	ldr	r3, [pc, #16]	@ (8003cb0 <timer_start+0x20>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f006 ffb2 	bl	800ac0c <HAL_TIM_Base_Start_IT>
}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20000544 	.word	0x20000544

08003cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003cba:	4b0c      	ldr	r3, [pc, #48]	@ (8003cec <MX_DMA_Init+0x38>)
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8003cec <MX_DMA_Init+0x38>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6153      	str	r3, [r2, #20]
 8003cc6:	4b09      	ldr	r3, [pc, #36]	@ (8003cec <MX_DMA_Init+0x38>)
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	607b      	str	r3, [r7, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2105      	movs	r1, #5
 8003cd6:	200e      	movs	r0, #14
 8003cd8:	f002 feb3 	bl	8006a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003cdc:	200e      	movs	r0, #14
 8003cde:	f002 fecc 	bl	8006a7a <HAL_NVIC_EnableIRQ>

}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000

08003cf0 <HAL_UART_RxCpltCallback>:
#include "../flight/plane.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
    if(huart == ibus_uart_port())
 8003cf8:	f7fd faf6 	bl	80012e8 <ibus_uart_port>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d102      	bne.n	8003d0a <HAL_UART_RxCpltCallback+0x1a>
	{
		ibus_calback();
 8003d04:	f7fd fafa 	bl	80012fc <ibus_calback>
    }
    else if(huart == gps_uart_port()){
        gps_callback();
    }
}
 8003d08:	e007      	b.n	8003d1a <HAL_UART_RxCpltCallback+0x2a>
    else if(huart == gps_uart_port()){
 8003d0a:	f7fe fa91 	bl	8002230 <gps_uart_port>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d101      	bne.n	8003d1a <HAL_UART_RxCpltCallback+0x2a>
        gps_callback();
 8003d16:	f7fe fa95 	bl	8002244 <gps_callback>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
    if(huart == &huart1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a04      	ldr	r2, [pc, #16]	@ (8003d40 <HAL_UART_TxCpltCallback+0x1c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d101      	bne.n	8003d38 <HAL_UART_TxCpltCallback+0x14>
	{
		mavlink_tx_cpl_callback();
 8003d34:	f002 fd6e 	bl	8006814 <mavlink_tx_cpl_callback>
    }
}
 8003d38:	bf00      	nop
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	200009ec 	.word	0x200009ec

08003d44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4a06      	ldr	r2, [pc, #24]	@ (8003d6c <vApplicationGetIdleTaskMemory+0x28>)
 8003d54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4a05      	ldr	r2, [pc, #20]	@ (8003d70 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2280      	movs	r2, #128	@ 0x80
 8003d60:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr
 8003d6c:	20000560 	.word	0x20000560
 8003d70:	200005b4 	.word	0x200005b4

08003d74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003d74:	b5b0      	push	{r4, r5, r7, lr}
 8003d76:	b0a4      	sub	sp, #144	@ 0x90
 8003d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	 timer_start(&htim7);
 8003d7a:	4832      	ldr	r0, [pc, #200]	@ (8003e44 <MX_FREERTOS_Init+0xd0>)
 8003d7c:	f7ff ff88 	bl	8003c90 <timer_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, ahrs_task, osPriorityHigh, 0, 128);
 8003d80:	4b31      	ldr	r3, [pc, #196]	@ (8003e48 <MX_FREERTOS_Init+0xd4>)
 8003d82:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8003d86:	461d      	mov	r5, r3
 8003d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8003d94:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f00d f9a1 	bl	80110e2 <osThreadCreate>
 8003da0:	4603      	mov	r3, r0
 8003da2:	4a2a      	ldr	r2, [pc, #168]	@ (8003e4c <MX_FREERTOS_Init+0xd8>)
 8003da4:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, blackbox, osPriorityLow, 0, 512);
 8003da6:	4b2a      	ldr	r3, [pc, #168]	@ (8003e50 <MX_FREERTOS_Init+0xdc>)
 8003da8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8003dac:	461d      	mov	r5, r3
 8003dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003db2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003db6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8003dba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f00d f98e 	bl	80110e2 <osThreadCreate>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4a22      	ldr	r2, [pc, #136]	@ (8003e54 <MX_FREERTOS_Init+0xe0>)
 8003dca:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, led_indicate, osPriorityLow, 0, 128);
 8003dcc:	4b22      	ldr	r3, [pc, #136]	@ (8003e58 <MX_FREERTOS_Init+0xe4>)
 8003dce:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8003dd2:	461d      	mov	r5, r3
 8003dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ddc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8003de0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f00d f97b 	bl	80110e2 <osThreadCreate>
 8003dec:	4603      	mov	r3, r0
 8003dee:	4a1b      	ldr	r2, [pc, #108]	@ (8003e5c <MX_FREERTOS_Init+0xe8>)
 8003df0:	6013      	str	r3, [r2, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, read_sensor, osPriorityRealtime, 0, 128);
 8003df2:	4b1b      	ldr	r3, [pc, #108]	@ (8003e60 <MX_FREERTOS_Init+0xec>)
 8003df4:	f107 0420 	add.w	r4, r7, #32
 8003df8:	461d      	mov	r5, r3
 8003dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 8003e06:	f107 0320 	add.w	r3, r7, #32
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f00d f968 	bl	80110e2 <osThreadCreate>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4a13      	ldr	r2, [pc, #76]	@ (8003e64 <MX_FREERTOS_Init+0xf0>)
 8003e16:	6013      	str	r3, [r2, #0]

  /* definition and creation of task5 */
  osThreadDef(task5, mavlinkOSD, osPriorityNormal, 0, 128);
 8003e18:	4b13      	ldr	r3, [pc, #76]	@ (8003e68 <MX_FREERTOS_Init+0xf4>)
 8003e1a:	1d3c      	adds	r4, r7, #4
 8003e1c:	461d      	mov	r5, r3
 8003e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task5Handle = osThreadCreate(osThread(task5), NULL);
 8003e2a:	1d3b      	adds	r3, r7, #4
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f00d f957 	bl	80110e2 <osThreadCreate>
 8003e34:	4603      	mov	r3, r0
 8003e36:	4a0d      	ldr	r2, [pc, #52]	@ (8003e6c <MX_FREERTOS_Init+0xf8>)
 8003e38:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003e3a:	bf00      	nop
 8003e3c:	3790      	adds	r7, #144	@ 0x90
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bdb0      	pop	{r4, r5, r7, pc}
 8003e42:	bf00      	nop
 8003e44:	200009a4 	.word	0x200009a4
 8003e48:	080141ac 	.word	0x080141ac
 8003e4c:	2000054c 	.word	0x2000054c
 8003e50:	080141d0 	.word	0x080141d0
 8003e54:	20000550 	.word	0x20000550
 8003e58:	080141f4 	.word	0x080141f4
 8003e5c:	20000554 	.word	0x20000554
 8003e60:	08014218 	.word	0x08014218
 8003e64:	20000558 	.word	0x20000558
 8003e68:	0801423c 	.word	0x0801423c
 8003e6c:	2000055c 	.word	0x2000055c

08003e70 <ahrs_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ahrs_task */
void ahrs_task(void const * argument)
{
 8003e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e74:	b08c      	sub	sp, #48	@ 0x30
 8003e76:	af06      	add	r7, sp, #24
 8003e78:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ahrs_task */
	ibus_init(&huart2);
 8003e7a:	4849      	ldr	r0, [pc, #292]	@ (8003fa0 <ahrs_task+0x130>)
 8003e7c:	f7fd fa0c 	bl	8001298 <ibus_init>
	gps_init(&huart3,57600);
 8003e80:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8003e84:	4847      	ldr	r0, [pc, #284]	@ (8003fa4 <ahrs_task+0x134>)
 8003e86:	f7fe f967 	bl	8002158 <gps_init>
	attitude_ctrl_init();
 8003e8a:	f001 fc89 	bl	80057a0 <attitude_ctrl_init>
	initPWM(&htim3);
 8003e8e:	4846      	ldr	r0, [pc, #280]	@ (8003fa8 <ahrs_task+0x138>)
 8003e90:	f7ff fe2e 	bl	8003af0 <initPWM>
	//ms5611_init(&hi2c2);
	//bmp280_init(&hi2c2);
	last_call = micros();
 8003e94:	4b45      	ldr	r3, [pc, #276]	@ (8003fac <ahrs_task+0x13c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e9c:	4b44      	ldr	r3, [pc, #272]	@ (8003fb0 <ahrs_task+0x140>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	4a44      	ldr	r2, [pc, #272]	@ (8003fb4 <ahrs_task+0x144>)
 8003ea4:	6013      	str	r3, [r2, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10; // 100 hz loop
 8003ea6:	230a      	movs	r3, #10
 8003ea8:	613b      	str	r3, [r7, #16]
	xLastWakeTime = xTaskGetTickCount();
 8003eaa:	f00e fd59 	bl	8012960 <xTaskGetTickCount>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug

    float dt = (micros() - last_call)*(1e-6f);
 8003eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8003fac <ahrs_task+0x13c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eba:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb0 <ahrs_task+0x140>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	441a      	add	r2, r3
 8003ec0:	4b3c      	ldr	r3, [pc, #240]	@ (8003fb4 <ahrs_task+0x144>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fc ff6c 	bl	8000da4 <__aeabi_ui2f>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	493a      	ldr	r1, [pc, #232]	@ (8003fb8 <ahrs_task+0x148>)
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fc ffbf 	bl	8000e54 <__aeabi_fmul>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	617b      	str	r3, [r7, #20]
    last_call = micros();
 8003eda:	4b34      	ldr	r3, [pc, #208]	@ (8003fac <ahrs_task+0x13c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ee2:	4b33      	ldr	r3, [pc, #204]	@ (8003fb0 <ahrs_task+0x140>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	4a32      	ldr	r2, [pc, #200]	@ (8003fb4 <ahrs_task+0x144>)
 8003eea:	6013      	str	r3, [r2, #0]
    if(dt < 0)
 8003eec:	f04f 0100 	mov.w	r1, #0
 8003ef0:	6978      	ldr	r0, [r7, #20]
 8003ef2:	f7fd f94d 	bl	8001190 <__aeabi_fcmplt>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <ahrs_task+0x92>
		dt = 0;
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
	//timer_calculate_boottime();
    //ms5611_start();
    //bmp280_read_fixed(dt);
    ibusFrameComplete();
 8003f02:	f7fd fa57 	bl	80013b4 <ibusFrameComplete>
    update_ahrs(gyro_imu[0],gyro_imu[1],gyro_imu[2],acc_imu[0],acc_imu[1],acc_imu[2],mag_raw[0],mag_raw[1],mag_raw[2],dt);
 8003f06:	4b2d      	ldr	r3, [pc, #180]	@ (8003fbc <ahrs_task+0x14c>)
 8003f08:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003fbc <ahrs_task+0x14c>)
 8003f0e:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8003f12:	4b2a      	ldr	r3, [pc, #168]	@ (8003fbc <ahrs_task+0x14c>)
 8003f14:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8003f18:	4b29      	ldr	r3, [pc, #164]	@ (8003fc0 <ahrs_task+0x150>)
 8003f1a:	f9b3 8000 	ldrsh.w	r8, [r3]
 8003f1e:	4b28      	ldr	r3, [pc, #160]	@ (8003fc0 <ahrs_task+0x150>)
 8003f20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f24:	4a26      	ldr	r2, [pc, #152]	@ (8003fc0 <ahrs_task+0x150>)
 8003f26:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8003f2a:	4926      	ldr	r1, [pc, #152]	@ (8003fc4 <ahrs_task+0x154>)
 8003f2c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003f30:	4824      	ldr	r0, [pc, #144]	@ (8003fc4 <ahrs_task+0x154>)
 8003f32:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8003f36:	4c23      	ldr	r4, [pc, #140]	@ (8003fc4 <ahrs_task+0x154>)
 8003f38:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 8003f3c:	697d      	ldr	r5, [r7, #20]
 8003f3e:	9505      	str	r5, [sp, #20]
 8003f40:	9404      	str	r4, [sp, #16]
 8003f42:	9003      	str	r0, [sp, #12]
 8003f44:	9102      	str	r1, [sp, #8]
 8003f46:	9201      	str	r2, [sp, #4]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	4643      	mov	r3, r8
 8003f4c:	4672      	mov	r2, lr
 8003f4e:	4661      	mov	r1, ip
 8003f50:	4630      	mov	r0, r6
 8003f52:	f7fe fc1d 	bl	8002790 <update_ahrs>
    attitude_ctrl(dt);
 8003f56:	6978      	ldr	r0, [r7, #20]
 8003f58:	f001 fc9e 	bl	8005898 <attitude_ctrl>
	//rate_stabilize(dt);

    if(ibusChannelData[CH5] < CHANNEL_HIGH ){
 8003f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc8 <ahrs_task+0x158>)
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d808      	bhi.n	8003f7a <ahrs_task+0x10a>
    	 vTaskSuspend(task2Handle);
 8003f68:	4b18      	ldr	r3, [pc, #96]	@ (8003fcc <ahrs_task+0x15c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f00e fabb 	bl	80124e8 <vTaskSuspend>
    	 black_box_reset = TRUE;
 8003f72:	4b17      	ldr	r3, [pc, #92]	@ (8003fd0 <ahrs_task+0x160>)
 8003f74:	2201      	movs	r2, #1
 8003f76:	701a      	strb	r2, [r3, #0]
 8003f78:	e004      	b.n	8003f84 <ahrs_task+0x114>
    }else{
    	 vTaskResume(task2Handle);
 8003f7a:	4b14      	ldr	r3, [pc, #80]	@ (8003fcc <ahrs_task+0x15c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f00e fb82 	bl	8012688 <vTaskResume>
    }

    //vTaskSuspend(NULL);
    vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8003f84:	f107 030c 	add.w	r3, r7, #12
 8003f88:	6939      	ldr	r1, [r7, #16]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f00e f9f6 	bl	801237c <vTaskDelayUntil>
    stack_task_ahrs = uxTaskGetStackHighWaterMark( NULL );
 8003f90:	2000      	movs	r0, #0
 8003f92:	f00e ffbf 	bl	8012f14 <uxTaskGetStackHighWaterMark>
 8003f96:	4603      	mov	r3, r0
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd4 <ahrs_task+0x164>)
 8003f9c:	801a      	strh	r2, [r3, #0]
  {
 8003f9e:	e788      	b.n	8003eb2 <ahrs_task+0x42>
 8003fa0:	20000a34 	.word	0x20000a34
 8003fa4:	20000a7c 	.word	0x20000a7c
 8003fa8:	2000095c 	.word	0x2000095c
 8003fac:	20000544 	.word	0x20000544
 8003fb0:	20000548 	.word	0x20000548
 8003fb4:	200007d8 	.word	0x200007d8
 8003fb8:	358637bd 	.word	0x358637bd
 8003fbc:	200007c0 	.word	0x200007c0
 8003fc0:	200007c8 	.word	0x200007c8
 8003fc4:	200007d0 	.word	0x200007d0
 8003fc8:	200000d0 	.word	0x200000d0
 8003fcc:	20000550 	.word	0x20000550
 8003fd0:	200007dc 	.word	0x200007dc
 8003fd4:	200007b4 	.word	0x200007b4

08003fd8 <blackbox>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blackbox */
void blackbox(void const * argument)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	@ 0x28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blackbox */

	//vTaskSuspend(NULL);
	black_box_init();
 8003fe0:	f7fd fc02 	bl	80017e8 <black_box_init>
	black_box_reset = TRUE;
 8003fe4:	4b6e      	ldr	r3, [pc, #440]	@ (80041a0 <blackbox+0x1c8>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;  // 25 ms
 8003fea:	2332      	movs	r3, #50	@ 0x32
 8003fec:	627b      	str	r3, [r7, #36]	@ 0x24
	xLastWakeTime = xTaskGetTickCount();
 8003fee:	f00e fcb7 	bl	8012960 <xTaskGetTickCount>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	uint32_t current_time = micros();
 8003ff6:	4b6b      	ldr	r3, [pc, #428]	@ (80041a4 <blackbox+0x1cc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80041a8 <blackbox+0x1d0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4413      	add	r3, r2
 8004004:	623b      	str	r3, [r7, #32]
    if(black_box_reset){
 8004006:	4b66      	ldr	r3, [pc, #408]	@ (80041a0 <blackbox+0x1c8>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <blackbox+0x42>
    	black_box_pack_str("----new data-----\n");
 800400e:	4867      	ldr	r0, [pc, #412]	@ (80041ac <blackbox+0x1d4>)
 8004010:	f7fd fcb0 	bl	8001974 <black_box_pack_str>
    	black_box_reset = FALSE;
 8004014:	4b62      	ldr	r3, [pc, #392]	@ (80041a0 <blackbox+0x1c8>)
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
    }
    int16_t vx = _gps.velocity[0];
 800401a:	4b65      	ldr	r3, [pc, #404]	@ (80041b0 <blackbox+0x1d8>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	83fb      	strh	r3, [r7, #30]
    int16_t vy = _gps.velocity[0];
 8004020:	4b63      	ldr	r3, [pc, #396]	@ (80041b0 <blackbox+0x1d8>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	83bb      	strh	r3, [r7, #28]
    int16_t vz = _gps.velocity[0];
 8004026:	4b62      	ldr	r3, [pc, #392]	@ (80041b0 <blackbox+0x1d8>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	837b      	strh	r3, [r7, #26]

    int32_t v_g = sqrt(sq(vx) + sq(vy) + sq(vz)) ;
 800402c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004030:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004034:	fb03 f202 	mul.w	r2, r3, r2
 8004038:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800403c:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	441a      	add	r2, r3
 8004046:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800404a:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	4413      	add	r3, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f7fc fa3d 	bl	80004d4 <__aeabi_i2d>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4610      	mov	r0, r2
 8004060:	4619      	mov	r1, r3
 8004062:	f00f feff 	bl	8013e64 <sqrt>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4610      	mov	r0, r2
 800406c:	4619      	mov	r1, r3
 800406e:	f7fc fd4b 	bl	8000b08 <__aeabi_d2iz>
 8004072:	4603      	mov	r3, r0
 8004074:	617b      	str	r3, [r7, #20]
    uint32_t time_ms =  millis();
 8004076:	4b4b      	ldr	r3, [pc, #300]	@ (80041a4 <blackbox+0x1cc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800407e:	4b4a      	ldr	r3, [pc, #296]	@ (80041a8 <blackbox+0x1d0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4413      	add	r3, r2
 8004084:	4a4b      	ldr	r2, [pc, #300]	@ (80041b4 <blackbox+0x1dc>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	099b      	lsrs	r3, r3, #6
 800408c:	613b      	str	r3, [r7, #16]
    black_box_pack_int(time_ms);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4618      	mov	r0, r3
 8004092:	f7fd fbd7 	bl	8001844 <black_box_pack_int>
    black_box_pack_char(' ');
 8004096:	2020      	movs	r0, #32
 8004098:	f7fd fca4 	bl	80019e4 <black_box_pack_char>

	black_box_pack_int((int)AHRS.roll*100);
 800409c:	4b46      	ldr	r3, [pc, #280]	@ (80041b8 <blackbox+0x1e0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fd f8b3 	bl	800120c <__aeabi_f2iz>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2264      	movs	r2, #100	@ 0x64
 80040aa:	fb02 f303 	mul.w	r3, r2, r3
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fd fbc8 	bl	8001844 <black_box_pack_int>
	black_box_pack_char(' ');
 80040b4:	2020      	movs	r0, #32
 80040b6:	f7fd fc95 	bl	80019e4 <black_box_pack_char>
	black_box_pack_int((int)roll_desired*100);
 80040ba:	4b40      	ldr	r3, [pc, #256]	@ (80041bc <blackbox+0x1e4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fd f8a4 	bl	800120c <__aeabi_f2iz>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2264      	movs	r2, #100	@ 0x64
 80040c8:	fb02 f303 	mul.w	r3, r2, r3
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fd fbb9 	bl	8001844 <black_box_pack_int>
	black_box_pack_char(' ');
 80040d2:	2020      	movs	r0, #32
 80040d4:	f7fd fc86 	bl	80019e4 <black_box_pack_char>
	black_box_pack_int((int)AHRS.pitch*100);// cm
 80040d8:	4b37      	ldr	r3, [pc, #220]	@ (80041b8 <blackbox+0x1e0>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fd f895 	bl	800120c <__aeabi_f2iz>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2264      	movs	r2, #100	@ 0x64
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fd fbaa 	bl	8001844 <black_box_pack_int>
	black_box_pack_char(' ');
 80040f0:	2020      	movs	r0, #32
 80040f2:	f7fd fc77 	bl	80019e4 <black_box_pack_char>
	black_box_pack_int((int)pitch_desired*100);
 80040f6:	4b32      	ldr	r3, [pc, #200]	@ (80041c0 <blackbox+0x1e8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fd f886 	bl	800120c <__aeabi_f2iz>
 8004100:	4603      	mov	r3, r0
 8004102:	2264      	movs	r2, #100	@ 0x64
 8004104:	fb02 f303 	mul.w	r3, r2, r3
 8004108:	4618      	mov	r0, r3
 800410a:	f7fd fb9b 	bl	8001844 <black_box_pack_int>
	black_box_pack_char(' ');
 800410e:	2020      	movs	r0, #32
 8004110:	f7fd fc68 	bl	80019e4 <black_box_pack_char>
	black_box_pack_int((int)v_estimate*100);
 8004114:	4b2b      	ldr	r3, [pc, #172]	@ (80041c4 <blackbox+0x1ec>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7fd f877 	bl	800120c <__aeabi_f2iz>
 800411e:	4603      	mov	r3, r0
 8004120:	2264      	movs	r2, #100	@ 0x64
 8004122:	fb02 f303 	mul.w	r3, r2, r3
 8004126:	4618      	mov	r0, r3
 8004128:	f7fd fb8c 	bl	8001844 <black_box_pack_int>
	black_box_pack_char(' ');
 800412c:	2020      	movs	r0, #32
 800412e:	f7fd fc59 	bl	80019e4 <black_box_pack_char>
	black_box_pack_int(v_g);
 8004132:	6978      	ldr	r0, [r7, #20]
 8004134:	f7fd fb86 	bl	8001844 <black_box_pack_int>
	black_box_pack_char(' ');
 8004138:	2020      	movs	r0, #32
 800413a:	f7fd fc53 	bl	80019e4 <black_box_pack_char>
	black_box_pack_int(_gps.fix);
 800413e:	4b1c      	ldr	r3, [pc, #112]	@ (80041b0 <blackbox+0x1d8>)
 8004140:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004144:	4618      	mov	r0, r3
 8004146:	f7fd fb7d 	bl	8001844 <black_box_pack_int>
	black_box_pack_char('\n');
 800414a:	200a      	movs	r0, #10
 800414c:	f7fd fc4a 	bl	80019e4 <black_box_pack_char>
	black_box_load();
 8004150:	f7fd fc62 	bl	8001a18 <black_box_load>

	write_time = micros() - current_time;
 8004154:	4b13      	ldr	r3, [pc, #76]	@ (80041a4 <blackbox+0x1cc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800415c:	4b12      	ldr	r3, [pc, #72]	@ (80041a8 <blackbox+0x1d0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	441a      	add	r2, r3
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	4a18      	ldr	r2, [pc, #96]	@ (80041c8 <blackbox+0x1f0>)
 8004168:	6013      	str	r3, [r2, #0]
	if(write_time > 10 && puts_state != -1){
 800416a:	4b17      	ldr	r3, [pc, #92]	@ (80041c8 <blackbox+0x1f0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b0a      	cmp	r3, #10
 8004170:	d908      	bls.n	8004184 <blackbox+0x1ac>
 8004172:	4b16      	ldr	r3, [pc, #88]	@ (80041cc <blackbox+0x1f4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	d003      	beq.n	8004184 <blackbox+0x1ac>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800417c:	2110      	movs	r1, #16
 800417e:	4814      	ldr	r0, [pc, #80]	@ (80041d0 <blackbox+0x1f8>)
 8004180:	f003 fad1 	bl	8007726 <HAL_GPIO_TogglePin>
	}

	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8004184:	f107 030c 	add.w	r3, r7, #12
 8004188:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800418a:	4618      	mov	r0, r3
 800418c:	f00e f8f6 	bl	801237c <vTaskDelayUntil>
    stack_task_blackbox = uxTaskGetStackHighWaterMark( NULL );
 8004190:	2000      	movs	r0, #0
 8004192:	f00e febf 	bl	8012f14 <uxTaskGetStackHighWaterMark>
 8004196:	4603      	mov	r3, r0
 8004198:	b29a      	uxth	r2, r3
 800419a:	4b0e      	ldr	r3, [pc, #56]	@ (80041d4 <blackbox+0x1fc>)
 800419c:	801a      	strh	r2, [r3, #0]
  {
 800419e:	e72a      	b.n	8003ff6 <blackbox+0x1e>
 80041a0:	200007dc 	.word	0x200007dc
 80041a4:	20000544 	.word	0x20000544
 80041a8:	20000548 	.word	0x20000548
 80041ac:	08014258 	.word	0x08014258
 80041b0:	200003a0 	.word	0x200003a0
 80041b4:	10624dd3 	.word	0x10624dd3
 80041b8:	200004c8 	.word	0x200004c8
 80041bc:	20000b08 	.word	0x20000b08
 80041c0:	20000b0c 	.word	0x20000b0c
 80041c4:	20000c04 	.word	0x20000c04
 80041c8:	200007e0 	.word	0x200007e0
 80041cc:	20000354 	.word	0x20000354
 80041d0:	40010800 	.word	0x40010800
 80041d4:	200007bc 	.word	0x200007bc

080041d8 <led_indicate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_indicate */
void led_indicate(void const * argument)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		delay = 500;
		vTaskSuspend(task2Handle);
	}
	*/
	if(_gps.fix > 1){
 80041e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004214 <led_indicate+0x3c>)
 80041e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d903      	bls.n	80041f2 <led_indicate+0x1a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80041ea:	2120      	movs	r1, #32
 80041ec:	480a      	ldr	r0, [pc, #40]	@ (8004218 <led_indicate+0x40>)
 80041ee:	f003 fa9a 	bl	8007726 <HAL_GPIO_TogglePin>
	}
	stack_task_led = uxTaskGetStackHighWaterMark( NULL );
 80041f2:	2000      	movs	r0, #0
 80041f4:	f00e fe8e 	bl	8012f14 <uxTaskGetStackHighWaterMark>
 80041f8:	4603      	mov	r3, r0
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	4b07      	ldr	r3, [pc, #28]	@ (800421c <led_indicate+0x44>)
 80041fe:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004200:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004204:	4806      	ldr	r0, [pc, #24]	@ (8004220 <led_indicate+0x48>)
 8004206:	f003 fa8e 	bl	8007726 <HAL_GPIO_TogglePin>
    osDelay(100);
 800420a:	2064      	movs	r0, #100	@ 0x64
 800420c:	f00c ffb5 	bl	801117a <osDelay>
	if(_gps.fix > 1){
 8004210:	e7e6      	b.n	80041e0 <led_indicate+0x8>
 8004212:	bf00      	nop
 8004214:	200003a0 	.word	0x200003a0
 8004218:	40010800 	.word	0x40010800
 800421c:	200007b6 	.word	0x200007b6
 8004220:	40011000 	.word	0x40011000
 8004224:	00000000 	.word	0x00000000

08004228 <read_sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_sensor */
void read_sensor(void const * argument)
{
 8004228:	b5b0      	push	{r4, r5, r7, lr}
 800422a:	b08e      	sub	sp, #56	@ 0x38
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_sensor */
  /* Infinite loop */
	int16_t gyso_offset[3] = {0,0,0};
 8004230:	2300      	movs	r3, #0
 8004232:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004234:	2300      	movs	r3, #0
 8004236:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004238:	2300      	movs	r3, #0
 800423a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	axis3_t raw;
	uint8_t sample_count = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t gyro_add[3] = {0,0,0};
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	2300      	movs	r3, #0
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	2300      	movs	r3, #0
 800424c:	61fb      	str	r3, [r7, #28]
	uint8_t first_loop = 1;
 800424e:	2301      	movs	r3, #1
 8004250:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	compassInit();
 8004254:	f7fd fc7a 	bl	8001b4c <compassInit>
	mpu6050_init(&hi2c2);
 8004258:	488f      	ldr	r0, [pc, #572]	@ (8004498 <read_sensor+0x270>)
 800425a:	f7fd f991 	bl	8001580 <mpu6050_init>
	HAL_Delay(2000);
 800425e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004262:	f002 fb15 	bl	8006890 <HAL_Delay>
	imu_calibrate(&gyso_offset[0],&gyso_offset[1],&gyso_offset[2]);
 8004266:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800426a:	1d1a      	adds	r2, r3, #4
 800426c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004270:	1c99      	adds	r1, r3, #2
 8004272:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe fa0e 	bl	8002698 <imu_calibrate>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2;
 800427c:	2302      	movs	r3, #2
 800427e:	633b      	str	r3, [r7, #48]	@ 0x30
	xLastWakeTime = xTaskGetTickCount();
 8004280:	f00e fb6e 	bl	8012960 <xTaskGetTickCount>
 8004284:	4603      	mov	r3, r0
 8004286:	613b      	str	r3, [r7, #16]

	for(;;)
	{
		mpu6050_gyro_get_raw(&raw);
 8004288:	f107 0320 	add.w	r3, r7, #32
 800428c:	4618      	mov	r0, r3
 800428e:	f7fd f9c9 	bl	8001624 <mpu6050_gyro_get_raw>
		gyro_add[0] += (raw.x - gyso_offset[0]);
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004298:	4619      	mov	r1, r3
 800429a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800429e:	1acb      	subs	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
		gyro_add[1] += (raw.y - gyso_offset[1]);
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80042aa:	4619      	mov	r1, r3
 80042ac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80042b0:	1acb      	subs	r3, r1, r3
 80042b2:	4413      	add	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
		gyro_add[2] += (raw.z - gyso_offset[2]);
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80042bc:	4619      	mov	r1, r3
 80042be:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80042c2:	1acb      	subs	r3, r1, r3
 80042c4:	4413      	add	r3, r2
 80042c6:	61fb      	str	r3, [r7, #28]
		sample_count ++;
 80042c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80042cc:	3301      	adds	r3, #1
 80042ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if(sample_count >= 5){
 80042d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d937      	bls.n	800434a <read_sensor+0x122>
		   axis3_t mag;
		   compass_get(&mag);
 80042da:	f107 0308 	add.w	r3, r7, #8
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fd fc70 	bl	8001bc4 <compass_get>
		   mag_raw[0] = mag.x;
 80042e4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80042e8:	4b6c      	ldr	r3, [pc, #432]	@ (800449c <read_sensor+0x274>)
 80042ea:	801a      	strh	r2, [r3, #0]
		   mag_raw[1] = mag.y;
 80042ec:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80042f0:	4b6a      	ldr	r3, [pc, #424]	@ (800449c <read_sensor+0x274>)
 80042f2:	805a      	strh	r2, [r3, #2]
		   mag_raw[2] = mag.z;
 80042f4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80042f8:	4b68      	ldr	r3, [pc, #416]	@ (800449c <read_sensor+0x274>)
 80042fa:	809a      	strh	r2, [r3, #4]

		   gyro_imu[0] = (int16_t)(gyro_add[0]/5);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	4a68      	ldr	r2, [pc, #416]	@ (80044a0 <read_sensor+0x278>)
 8004300:	fb82 1203 	smull	r1, r2, r2, r3
 8004304:	1052      	asrs	r2, r2, #1
 8004306:	17db      	asrs	r3, r3, #31
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	b21a      	sxth	r2, r3
 800430c:	4b65      	ldr	r3, [pc, #404]	@ (80044a4 <read_sensor+0x27c>)
 800430e:	801a      	strh	r2, [r3, #0]
		   gyro_imu[1] = (int16_t)(gyro_add[1]/5);
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	4a63      	ldr	r2, [pc, #396]	@ (80044a0 <read_sensor+0x278>)
 8004314:	fb82 1203 	smull	r1, r2, r2, r3
 8004318:	1052      	asrs	r2, r2, #1
 800431a:	17db      	asrs	r3, r3, #31
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	b21a      	sxth	r2, r3
 8004320:	4b60      	ldr	r3, [pc, #384]	@ (80044a4 <read_sensor+0x27c>)
 8004322:	805a      	strh	r2, [r3, #2]
		   gyro_imu[2] = (int16_t)(gyro_add[2]/5);
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4a5e      	ldr	r2, [pc, #376]	@ (80044a0 <read_sensor+0x278>)
 8004328:	fb82 1203 	smull	r1, r2, r2, r3
 800432c:	1052      	asrs	r2, r2, #1
 800432e:	17db      	asrs	r3, r3, #31
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	b21a      	sxth	r2, r3
 8004334:	4b5b      	ldr	r3, [pc, #364]	@ (80044a4 <read_sensor+0x27c>)
 8004336:	809a      	strh	r2, [r3, #4]
		   gyro_add[0] = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
		   gyro_add[1] = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	61bb      	str	r3, [r7, #24]
		   gyro_add[2] = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	61fb      	str	r3, [r7, #28]
		   sample_count = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		   //vTaskResume(task1Handle);
		}

		raw.x = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	843b      	strh	r3, [r7, #32]
		raw.y = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	847b      	strh	r3, [r7, #34]	@ 0x22
		raw.z = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	84bb      	strh	r3, [r7, #36]	@ 0x24

		mpu6050_acc_get_raw(&raw);
 8004356:	f107 0320 	add.w	r3, r7, #32
 800435a:	4618      	mov	r0, r3
 800435c:	f7fd f99e 	bl	800169c <mpu6050_acc_get_raw>
		if(first_loop){
 8004360:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00e      	beq.n	8004386 <read_sensor+0x15e>
			acc_imu[0] = raw.x;
 8004368:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800436c:	4b4e      	ldr	r3, [pc, #312]	@ (80044a8 <read_sensor+0x280>)
 800436e:	801a      	strh	r2, [r3, #0]
			acc_imu[1] = raw.y;
 8004370:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8004374:	4b4c      	ldr	r3, [pc, #304]	@ (80044a8 <read_sensor+0x280>)
 8004376:	805a      	strh	r2, [r3, #2]
			acc_imu[2] = raw.z;
 8004378:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800437c:	4b4a      	ldr	r3, [pc, #296]	@ (80044a8 <read_sensor+0x280>)
 800437e:	809a      	strh	r2, [r3, #4]
			first_loop = 0;
 8004380:	2300      	movs	r3, #0
 8004382:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		}
		// low pass filter
		acc_imu[0] += 0.1*(raw.x - acc_imu[0]);
 8004386:	4b48      	ldr	r3, [pc, #288]	@ (80044a8 <read_sensor+0x280>)
 8004388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800438c:	4618      	mov	r0, r3
 800438e:	f7fc f8a1 	bl	80004d4 <__aeabi_i2d>
 8004392:	4604      	mov	r4, r0
 8004394:	460d      	mov	r5, r1
 8004396:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800439a:	461a      	mov	r2, r3
 800439c:	4b42      	ldr	r3, [pc, #264]	@ (80044a8 <read_sensor+0x280>)
 800439e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fc f895 	bl	80004d4 <__aeabi_i2d>
 80043aa:	a339      	add	r3, pc, #228	@ (adr r3, 8004490 <read_sensor+0x268>)
 80043ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b0:	f7fc f8fa 	bl	80005a8 <__aeabi_dmul>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4620      	mov	r0, r4
 80043ba:	4629      	mov	r1, r5
 80043bc:	f7fb ff3e 	bl	800023c <__adddf3>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	f7fc fb9e 	bl	8000b08 <__aeabi_d2iz>
 80043cc:	4603      	mov	r3, r0
 80043ce:	b21a      	sxth	r2, r3
 80043d0:	4b35      	ldr	r3, [pc, #212]	@ (80044a8 <read_sensor+0x280>)
 80043d2:	801a      	strh	r2, [r3, #0]
		acc_imu[1] += 0.1*(raw.y - acc_imu[1]);
 80043d4:	4b34      	ldr	r3, [pc, #208]	@ (80044a8 <read_sensor+0x280>)
 80043d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fc f87a 	bl	80004d4 <__aeabi_i2d>
 80043e0:	4604      	mov	r4, r0
 80043e2:	460d      	mov	r5, r1
 80043e4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80043e8:	461a      	mov	r2, r3
 80043ea:	4b2f      	ldr	r3, [pc, #188]	@ (80044a8 <read_sensor+0x280>)
 80043ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fc f86e 	bl	80004d4 <__aeabi_i2d>
 80043f8:	a325      	add	r3, pc, #148	@ (adr r3, 8004490 <read_sensor+0x268>)
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	f7fc f8d3 	bl	80005a8 <__aeabi_dmul>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4620      	mov	r0, r4
 8004408:	4629      	mov	r1, r5
 800440a:	f7fb ff17 	bl	800023c <__adddf3>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4610      	mov	r0, r2
 8004414:	4619      	mov	r1, r3
 8004416:	f7fc fb77 	bl	8000b08 <__aeabi_d2iz>
 800441a:	4603      	mov	r3, r0
 800441c:	b21a      	sxth	r2, r3
 800441e:	4b22      	ldr	r3, [pc, #136]	@ (80044a8 <read_sensor+0x280>)
 8004420:	805a      	strh	r2, [r3, #2]
		acc_imu[2] += 0.1*(raw.z - acc_imu[2]);
 8004422:	4b21      	ldr	r3, [pc, #132]	@ (80044a8 <read_sensor+0x280>)
 8004424:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc f853 	bl	80004d4 <__aeabi_i2d>
 800442e:	4604      	mov	r4, r0
 8004430:	460d      	mov	r5, r1
 8004432:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004436:	461a      	mov	r2, r3
 8004438:	4b1b      	ldr	r3, [pc, #108]	@ (80044a8 <read_sensor+0x280>)
 800443a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	4618      	mov	r0, r3
 8004442:	f7fc f847 	bl	80004d4 <__aeabi_i2d>
 8004446:	a312      	add	r3, pc, #72	@ (adr r3, 8004490 <read_sensor+0x268>)
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f7fc f8ac 	bl	80005a8 <__aeabi_dmul>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4620      	mov	r0, r4
 8004456:	4629      	mov	r1, r5
 8004458:	f7fb fef0 	bl	800023c <__adddf3>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	f7fc fb50 	bl	8000b08 <__aeabi_d2iz>
 8004468:	4603      	mov	r3, r0
 800446a:	b21a      	sxth	r2, r3
 800446c:	4b0e      	ldr	r3, [pc, #56]	@ (80044a8 <read_sensor+0x280>)
 800446e:	809a      	strh	r2, [r3, #4]
	    stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 8004470:	2000      	movs	r0, #0
 8004472:	f00e fd4f 	bl	8012f14 <uxTaskGetStackHighWaterMark>
 8004476:	4603      	mov	r3, r0
 8004478:	b29a      	uxth	r2, r3
 800447a:	4b0c      	ldr	r3, [pc, #48]	@ (80044ac <read_sensor+0x284>)
 800447c:	801a      	strh	r2, [r3, #0]
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800447e:	f107 0310 	add.w	r3, r7, #16
 8004482:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004484:	4618      	mov	r0, r3
 8004486:	f00d ff79 	bl	801237c <vTaskDelayUntil>
		mpu6050_gyro_get_raw(&raw);
 800448a:	e6fd      	b.n	8004288 <read_sensor+0x60>
 800448c:	f3af 8000 	nop.w
 8004490:	9999999a 	.word	0x9999999a
 8004494:	3fb99999 	.word	0x3fb99999
 8004498:	20000838 	.word	0x20000838
 800449c:	200007d0 	.word	0x200007d0
 80044a0:	66666667 	.word	0x66666667
 80044a4:	200007c0 	.word	0x200007c0
 80044a8:	200007c8 	.word	0x200007c8
 80044ac:	200007b8 	.word	0x200007b8

080044b0 <mavlinkOSD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mavlinkOSD */
void mavlinkOSD(void const * argument)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mavlinkOSD */
	mavlinkInit(1,1,&huart1,57600);
 80044b8:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 80044bc:	4a0d      	ldr	r2, [pc, #52]	@ (80044f4 <mavlinkOSD+0x44>)
 80044be:	2101      	movs	r1, #1
 80044c0:	2001      	movs	r0, #1
 80044c2:	f002 f855 	bl	8006570 <mavlinkInit>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;  // 25 ms
 80044c6:	2332      	movs	r3, #50	@ 0x32
 80044c8:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 80044ca:	f00e fa49 	bl	8012960 <xTaskGetTickCount>
 80044ce:	4603      	mov	r3, r0
 80044d0:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	mavlink_osd();
 80044d2:	f002 f883 	bl	80065dc <mavlink_osd>
	//mavlink_send_heartbeat();
	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 80044d6:	f107 0308 	add.w	r3, r7, #8
 80044da:	68f9      	ldr	r1, [r7, #12]
 80044dc:	4618      	mov	r0, r3
 80044de:	f00d ff4d 	bl	801237c <vTaskDelayUntil>
    stack_task_mavOSD = uxTaskGetStackHighWaterMark( NULL );
 80044e2:	2000      	movs	r0, #0
 80044e4:	f00e fd16 	bl	8012f14 <uxTaskGetStackHighWaterMark>
 80044e8:	4603      	mov	r3, r0
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	4b02      	ldr	r3, [pc, #8]	@ (80044f8 <mavlinkOSD+0x48>)
 80044ee:	801a      	strh	r2, [r3, #0]
	mavlink_osd();
 80044f0:	bf00      	nop
 80044f2:	e7ee      	b.n	80044d2 <mavlinkOSD+0x22>
 80044f4:	200009ec 	.word	0x200009ec
 80044f8:	200007ba 	.word	0x200007ba

080044fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004502:	f107 0310 	add.w	r3, r7, #16
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	605a      	str	r2, [r3, #4]
 800450c:	609a      	str	r2, [r3, #8]
 800450e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004510:	4b46      	ldr	r3, [pc, #280]	@ (800462c <MX_GPIO_Init+0x130>)
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	4a45      	ldr	r2, [pc, #276]	@ (800462c <MX_GPIO_Init+0x130>)
 8004516:	f043 0310 	orr.w	r3, r3, #16
 800451a:	6193      	str	r3, [r2, #24]
 800451c:	4b43      	ldr	r3, [pc, #268]	@ (800462c <MX_GPIO_Init+0x130>)
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004528:	4b40      	ldr	r3, [pc, #256]	@ (800462c <MX_GPIO_Init+0x130>)
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	4a3f      	ldr	r2, [pc, #252]	@ (800462c <MX_GPIO_Init+0x130>)
 800452e:	f043 0304 	orr.w	r3, r3, #4
 8004532:	6193      	str	r3, [r2, #24]
 8004534:	4b3d      	ldr	r3, [pc, #244]	@ (800462c <MX_GPIO_Init+0x130>)
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004540:	4b3a      	ldr	r3, [pc, #232]	@ (800462c <MX_GPIO_Init+0x130>)
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	4a39      	ldr	r2, [pc, #228]	@ (800462c <MX_GPIO_Init+0x130>)
 8004546:	f043 0308 	orr.w	r3, r3, #8
 800454a:	6193      	str	r3, [r2, #24]
 800454c:	4b37      	ldr	r3, [pc, #220]	@ (800462c <MX_GPIO_Init+0x130>)
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004558:	4b34      	ldr	r3, [pc, #208]	@ (800462c <MX_GPIO_Init+0x130>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	4a33      	ldr	r2, [pc, #204]	@ (800462c <MX_GPIO_Init+0x130>)
 800455e:	f043 0320 	orr.w	r3, r3, #32
 8004562:	6193      	str	r3, [r2, #24]
 8004564:	4b31      	ldr	r3, [pc, #196]	@ (800462c <MX_GPIO_Init+0x130>)
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004570:	2200      	movs	r2, #0
 8004572:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004576:	482e      	ldr	r0, [pc, #184]	@ (8004630 <MX_GPIO_Init+0x134>)
 8004578:	f003 f8bd 	bl	80076f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800457c:	2200      	movs	r2, #0
 800457e:	2130      	movs	r1, #48	@ 0x30
 8004580:	482c      	ldr	r0, [pc, #176]	@ (8004634 <MX_GPIO_Init+0x138>)
 8004582:	f003 f8b8 	bl	80076f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8004586:	2200      	movs	r2, #0
 8004588:	21c0      	movs	r1, #192	@ 0xc0
 800458a:	482b      	ldr	r0, [pc, #172]	@ (8004638 <MX_GPIO_Init+0x13c>)
 800458c:	f003 f8b3 	bl	80076f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8004590:	2200      	movs	r2, #0
 8004592:	2118      	movs	r1, #24
 8004594:	4829      	ldr	r0, [pc, #164]	@ (800463c <MX_GPIO_Init+0x140>)
 8004596:	f003 f8ae 	bl	80076f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800459a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800459e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045a0:	2301      	movs	r3, #1
 80045a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a8:	2302      	movs	r3, #2
 80045aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045ac:	f107 0310 	add.w	r3, r7, #16
 80045b0:	4619      	mov	r1, r3
 80045b2:	481f      	ldr	r0, [pc, #124]	@ (8004630 <MX_GPIO_Init+0x134>)
 80045b4:	f002 fef4 	bl	80073a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80045b8:	2330      	movs	r3, #48	@ 0x30
 80045ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045bc:	2301      	movs	r3, #1
 80045be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c4:	2302      	movs	r3, #2
 80045c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c8:	f107 0310 	add.w	r3, r7, #16
 80045cc:	4619      	mov	r1, r3
 80045ce:	4819      	ldr	r0, [pc, #100]	@ (8004634 <MX_GPIO_Init+0x138>)
 80045d0:	f002 fee6 	bl	80073a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80045d4:	23c0      	movs	r3, #192	@ 0xc0
 80045d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045d8:	2301      	movs	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e0:	2302      	movs	r3, #2
 80045e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045e4:	f107 0310 	add.w	r3, r7, #16
 80045e8:	4619      	mov	r1, r3
 80045ea:	4813      	ldr	r0, [pc, #76]	@ (8004638 <MX_GPIO_Init+0x13c>)
 80045ec:	f002 fed8 	bl	80073a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80045f0:	2318      	movs	r3, #24
 80045f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045f4:	2301      	movs	r3, #1
 80045f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fc:	2302      	movs	r3, #2
 80045fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004600:	f107 0310 	add.w	r3, r7, #16
 8004604:	4619      	mov	r1, r3
 8004606:	480d      	ldr	r0, [pc, #52]	@ (800463c <MX_GPIO_Init+0x140>)
 8004608:	f002 feca 	bl	80073a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800460c:	2320      	movs	r3, #32
 800460e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004614:	2302      	movs	r3, #2
 8004616:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004618:	f107 0310 	add.w	r3, r7, #16
 800461c:	4619      	mov	r1, r3
 800461e:	4807      	ldr	r0, [pc, #28]	@ (800463c <MX_GPIO_Init+0x140>)
 8004620:	f002 febe 	bl	80073a0 <HAL_GPIO_Init>

}
 8004624:	bf00      	nop
 8004626:	3720      	adds	r7, #32
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40021000 	.word	0x40021000
 8004630:	40011000 	.word	0x40011000
 8004634:	40010800 	.word	0x40010800
 8004638:	40011400 	.word	0x40011400
 800463c:	40010c00 	.word	0x40010c00

08004640 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004644:	4b12      	ldr	r3, [pc, #72]	@ (8004690 <MX_I2C1_Init+0x50>)
 8004646:	4a13      	ldr	r2, [pc, #76]	@ (8004694 <MX_I2C1_Init+0x54>)
 8004648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800464a:	4b11      	ldr	r3, [pc, #68]	@ (8004690 <MX_I2C1_Init+0x50>)
 800464c:	4a12      	ldr	r2, [pc, #72]	@ (8004698 <MX_I2C1_Init+0x58>)
 800464e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004650:	4b0f      	ldr	r3, [pc, #60]	@ (8004690 <MX_I2C1_Init+0x50>)
 8004652:	2200      	movs	r2, #0
 8004654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004656:	4b0e      	ldr	r3, [pc, #56]	@ (8004690 <MX_I2C1_Init+0x50>)
 8004658:	2200      	movs	r2, #0
 800465a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800465c:	4b0c      	ldr	r3, [pc, #48]	@ (8004690 <MX_I2C1_Init+0x50>)
 800465e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004664:	4b0a      	ldr	r3, [pc, #40]	@ (8004690 <MX_I2C1_Init+0x50>)
 8004666:	2200      	movs	r2, #0
 8004668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800466a:	4b09      	ldr	r3, [pc, #36]	@ (8004690 <MX_I2C1_Init+0x50>)
 800466c:	2200      	movs	r2, #0
 800466e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004670:	4b07      	ldr	r3, [pc, #28]	@ (8004690 <MX_I2C1_Init+0x50>)
 8004672:	2200      	movs	r2, #0
 8004674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004676:	4b06      	ldr	r3, [pc, #24]	@ (8004690 <MX_I2C1_Init+0x50>)
 8004678:	2200      	movs	r2, #0
 800467a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800467c:	4804      	ldr	r0, [pc, #16]	@ (8004690 <MX_I2C1_Init+0x50>)
 800467e:	f003 f86b 	bl	8007758 <HAL_I2C_Init>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004688:	f000 f92a 	bl	80048e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800468c:	bf00      	nop
 800468e:	bd80      	pop	{r7, pc}
 8004690:	200007e4 	.word	0x200007e4
 8004694:	40005400 	.word	0x40005400
 8004698:	00061a80 	.word	0x00061a80

0800469c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80046a0:	4b12      	ldr	r3, [pc, #72]	@ (80046ec <MX_I2C2_Init+0x50>)
 80046a2:	4a13      	ldr	r2, [pc, #76]	@ (80046f0 <MX_I2C2_Init+0x54>)
 80046a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80046a6:	4b11      	ldr	r3, [pc, #68]	@ (80046ec <MX_I2C2_Init+0x50>)
 80046a8:	4a12      	ldr	r2, [pc, #72]	@ (80046f4 <MX_I2C2_Init+0x58>)
 80046aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80046ac:	4b0f      	ldr	r3, [pc, #60]	@ (80046ec <MX_I2C2_Init+0x50>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80046b2:	4b0e      	ldr	r3, [pc, #56]	@ (80046ec <MX_I2C2_Init+0x50>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046b8:	4b0c      	ldr	r3, [pc, #48]	@ (80046ec <MX_I2C2_Init+0x50>)
 80046ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80046be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046c0:	4b0a      	ldr	r3, [pc, #40]	@ (80046ec <MX_I2C2_Init+0x50>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80046c6:	4b09      	ldr	r3, [pc, #36]	@ (80046ec <MX_I2C2_Init+0x50>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046cc:	4b07      	ldr	r3, [pc, #28]	@ (80046ec <MX_I2C2_Init+0x50>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046d2:	4b06      	ldr	r3, [pc, #24]	@ (80046ec <MX_I2C2_Init+0x50>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80046d8:	4804      	ldr	r0, [pc, #16]	@ (80046ec <MX_I2C2_Init+0x50>)
 80046da:	f003 f83d 	bl	8007758 <HAL_I2C_Init>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80046e4:	f000 f8fc 	bl	80048e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80046e8:	bf00      	nop
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20000838 	.word	0x20000838
 80046f0:	40005800 	.word	0x40005800
 80046f4:	00061a80 	.word	0x00061a80

080046f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08a      	sub	sp, #40	@ 0x28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004700:	f107 0318 	add.w	r3, r7, #24
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	609a      	str	r2, [r3, #8]
 800470c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2b      	ldr	r2, [pc, #172]	@ (80047c0 <HAL_I2C_MspInit+0xc8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d124      	bne.n	8004762 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004718:	4b2a      	ldr	r3, [pc, #168]	@ (80047c4 <HAL_I2C_MspInit+0xcc>)
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	4a29      	ldr	r2, [pc, #164]	@ (80047c4 <HAL_I2C_MspInit+0xcc>)
 800471e:	f043 0308 	orr.w	r3, r3, #8
 8004722:	6193      	str	r3, [r2, #24]
 8004724:	4b27      	ldr	r3, [pc, #156]	@ (80047c4 <HAL_I2C_MspInit+0xcc>)
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004730:	23c0      	movs	r3, #192	@ 0xc0
 8004732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004734:	2312      	movs	r3, #18
 8004736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004738:	2303      	movs	r3, #3
 800473a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800473c:	f107 0318 	add.w	r3, r7, #24
 8004740:	4619      	mov	r1, r3
 8004742:	4821      	ldr	r0, [pc, #132]	@ (80047c8 <HAL_I2C_MspInit+0xd0>)
 8004744:	f002 fe2c 	bl	80073a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004748:	4b1e      	ldr	r3, [pc, #120]	@ (80047c4 <HAL_I2C_MspInit+0xcc>)
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	4a1d      	ldr	r2, [pc, #116]	@ (80047c4 <HAL_I2C_MspInit+0xcc>)
 800474e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004752:	61d3      	str	r3, [r2, #28]
 8004754:	4b1b      	ldr	r3, [pc, #108]	@ (80047c4 <HAL_I2C_MspInit+0xcc>)
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004760:	e029      	b.n	80047b6 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a19      	ldr	r2, [pc, #100]	@ (80047cc <HAL_I2C_MspInit+0xd4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d124      	bne.n	80047b6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800476c:	4b15      	ldr	r3, [pc, #84]	@ (80047c4 <HAL_I2C_MspInit+0xcc>)
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	4a14      	ldr	r2, [pc, #80]	@ (80047c4 <HAL_I2C_MspInit+0xcc>)
 8004772:	f043 0308 	orr.w	r3, r3, #8
 8004776:	6193      	str	r3, [r2, #24]
 8004778:	4b12      	ldr	r3, [pc, #72]	@ (80047c4 <HAL_I2C_MspInit+0xcc>)
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004784:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800478a:	2312      	movs	r3, #18
 800478c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800478e:	2303      	movs	r3, #3
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004792:	f107 0318 	add.w	r3, r7, #24
 8004796:	4619      	mov	r1, r3
 8004798:	480b      	ldr	r0, [pc, #44]	@ (80047c8 <HAL_I2C_MspInit+0xd0>)
 800479a:	f002 fe01 	bl	80073a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800479e:	4b09      	ldr	r3, [pc, #36]	@ (80047c4 <HAL_I2C_MspInit+0xcc>)
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	4a08      	ldr	r2, [pc, #32]	@ (80047c4 <HAL_I2C_MspInit+0xcc>)
 80047a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047a8:	61d3      	str	r3, [r2, #28]
 80047aa:	4b06      	ldr	r3, [pc, #24]	@ (80047c4 <HAL_I2C_MspInit+0xcc>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]
}
 80047b6:	bf00      	nop
 80047b8:	3728      	adds	r7, #40	@ 0x28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40005400 	.word	0x40005400
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40010c00 	.word	0x40010c00
 80047cc:	40005800 	.word	0x40005800

080047d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047d4:	f002 f82a 	bl	800682c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047d8:	f000 f81c 	bl	8004814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047dc:	f7ff fe8e 	bl	80044fc <MX_GPIO_Init>
  MX_DMA_Init();
 80047e0:	f7ff fa68 	bl	8003cb4 <MX_DMA_Init>
  MX_I2C1_Init();
 80047e4:	f7ff ff2c 	bl	8004640 <MX_I2C1_Init>
  MX_I2C2_Init();
 80047e8:	f7ff ff58 	bl	800469c <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80047ec:	f000 f87e 	bl	80048ec <MX_SDIO_SD_Init>
  MX_TIM7_Init();
 80047f0:	f000 fad4 	bl	8004d9c <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80047f4:	f000 fb96 	bl	8004f24 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80047f8:	f000 fbbe 	bl	8004f78 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80047fc:	f000 fbe6 	bl	8004fcc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8004800:	f000 fa40 	bl	8004c84 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004804:	f008 fe60 	bl	800d4c8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8004808:	f7ff fab4 	bl	8003d74 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800480c:	f00c fc62 	bl	80110d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004810:	bf00      	nop
 8004812:	e7fd      	b.n	8004810 <main+0x40>

08004814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b090      	sub	sp, #64	@ 0x40
 8004818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800481a:	f107 0318 	add.w	r3, r7, #24
 800481e:	2228      	movs	r2, #40	@ 0x28
 8004820:	2100      	movs	r1, #0
 8004822:	4618      	mov	r0, r3
 8004824:	f00f facc 	bl	8013dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004828:	1d3b      	adds	r3, r7, #4
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	605a      	str	r2, [r3, #4]
 8004830:	609a      	str	r2, [r3, #8]
 8004832:	60da      	str	r2, [r3, #12]
 8004834:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004836:	2301      	movs	r3, #1
 8004838:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800483a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800483e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004840:	2300      	movs	r3, #0
 8004842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004844:	2301      	movs	r3, #1
 8004846:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004848:	2302      	movs	r3, #2
 800484a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800484c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004850:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004852:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8004856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004858:	f107 0318 	add.w	r3, r7, #24
 800485c:	4618      	mov	r0, r3
 800485e:	f004 fdbd 	bl	80093dc <HAL_RCC_OscConfig>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004868:	f000 f83a 	bl	80048e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800486c:	230f      	movs	r3, #15
 800486e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004870:	2302      	movs	r3, #2
 8004872:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004878:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800487c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004882:	1d3b      	adds	r3, r7, #4
 8004884:	2102      	movs	r1, #2
 8004886:	4618      	mov	r0, r3
 8004888:	f005 f82a 	bl	80098e0 <HAL_RCC_ClockConfig>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004892:	f000 f825 	bl	80048e0 <Error_Handler>
  }
}
 8004896:	bf00      	nop
 8004898:	3740      	adds	r7, #64	@ 0x40
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b0:	d102      	bne.n	80048b8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80048b2:	f001 ffd1 	bl	8006858 <HAL_IncTick>
  else if(htim->Instance == TIM7){
	  TIMER_CALLBACK();
  }

  /* USER CODE END Callback 1 */
}
 80048b6:	e00b      	b.n	80048d0 <HAL_TIM_PeriodElapsedCallback+0x30>
  else if(htim->Instance == TIM7){
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a06      	ldr	r2, [pc, #24]	@ (80048d8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d106      	bne.n	80048d0 <HAL_TIM_PeriodElapsedCallback+0x30>
	  TIMER_CALLBACK();
 80048c2:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80048ca:	33ff      	adds	r3, #255	@ 0xff
 80048cc:	4a03      	ldr	r2, [pc, #12]	@ (80048dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80048ce:	6013      	str	r3, [r2, #0]
}
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40001400 	.word	0x40001400
 80048dc:	20000548 	.word	0x20000548

080048e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048e4:	b672      	cpsid	i
}
 80048e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048e8:	bf00      	nop
 80048ea:	e7fd      	b.n	80048e8 <Error_Handler+0x8>

080048ec <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80048f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004928 <MX_SDIO_SD_Init+0x3c>)
 80048f2:	4a0e      	ldr	r2, [pc, #56]	@ (800492c <MX_SDIO_SD_Init+0x40>)
 80048f4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80048f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004928 <MX_SDIO_SD_Init+0x3c>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80048fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <MX_SDIO_SD_Init+0x3c>)
 80048fe:	2200      	movs	r2, #0
 8004900:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004902:	4b09      	ldr	r3, [pc, #36]	@ (8004928 <MX_SDIO_SD_Init+0x3c>)
 8004904:	2200      	movs	r2, #0
 8004906:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004908:	4b07      	ldr	r3, [pc, #28]	@ (8004928 <MX_SDIO_SD_Init+0x3c>)
 800490a:	2200      	movs	r2, #0
 800490c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800490e:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <MX_SDIO_SD_Init+0x3c>)
 8004910:	2200      	movs	r2, #0
 8004912:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 255;
 8004914:	4b04      	ldr	r3, [pc, #16]	@ (8004928 <MX_SDIO_SD_Init+0x3c>)
 8004916:	22ff      	movs	r2, #255	@ 0xff
 8004918:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.ClockDiv = 255;
 800491a:	4b03      	ldr	r3, [pc, #12]	@ (8004928 <MX_SDIO_SD_Init+0x3c>)
 800491c:	22ff      	movs	r2, #255	@ 0xff
 800491e:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 2 */

}
 8004920:	bf00      	nop
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr
 8004928:	2000088c 	.word	0x2000088c
 800492c:	40018000 	.word	0x40018000

08004930 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08a      	sub	sp, #40	@ 0x28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004938:	f107 0318 	add.w	r3, r7, #24
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	605a      	str	r2, [r3, #4]
 8004942:	609a      	str	r2, [r3, #8]
 8004944:	60da      	str	r2, [r3, #12]
  if(sdHandle->Instance==SDIO)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a22      	ldr	r2, [pc, #136]	@ (80049d4 <HAL_SD_MspInit+0xa4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d13c      	bne.n	80049ca <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004950:	4b21      	ldr	r3, [pc, #132]	@ (80049d8 <HAL_SD_MspInit+0xa8>)
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	4a20      	ldr	r2, [pc, #128]	@ (80049d8 <HAL_SD_MspInit+0xa8>)
 8004956:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800495a:	6153      	str	r3, [r2, #20]
 800495c:	4b1e      	ldr	r3, [pc, #120]	@ (80049d8 <HAL_SD_MspInit+0xa8>)
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004968:	4b1b      	ldr	r3, [pc, #108]	@ (80049d8 <HAL_SD_MspInit+0xa8>)
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	4a1a      	ldr	r2, [pc, #104]	@ (80049d8 <HAL_SD_MspInit+0xa8>)
 800496e:	f043 0310 	orr.w	r3, r3, #16
 8004972:	6193      	str	r3, [r2, #24]
 8004974:	4b18      	ldr	r3, [pc, #96]	@ (80049d8 <HAL_SD_MspInit+0xa8>)
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004980:	4b15      	ldr	r3, [pc, #84]	@ (80049d8 <HAL_SD_MspInit+0xa8>)
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	4a14      	ldr	r2, [pc, #80]	@ (80049d8 <HAL_SD_MspInit+0xa8>)
 8004986:	f043 0320 	orr.w	r3, r3, #32
 800498a:	6193      	str	r3, [r2, #24]
 800498c:	4b12      	ldr	r3, [pc, #72]	@ (80049d8 <HAL_SD_MspInit+0xa8>)
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8004998:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800499c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499e:	2302      	movs	r3, #2
 80049a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049a2:	2303      	movs	r3, #3
 80049a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049a6:	f107 0318 	add.w	r3, r7, #24
 80049aa:	4619      	mov	r1, r3
 80049ac:	480b      	ldr	r0, [pc, #44]	@ (80049dc <HAL_SD_MspInit+0xac>)
 80049ae:	f002 fcf7 	bl	80073a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80049b2:	2304      	movs	r3, #4
 80049b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b6:	2302      	movs	r3, #2
 80049b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049ba:	2303      	movs	r3, #3
 80049bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049be:	f107 0318 	add.w	r3, r7, #24
 80049c2:	4619      	mov	r1, r3
 80049c4:	4806      	ldr	r0, [pc, #24]	@ (80049e0 <HAL_SD_MspInit+0xb0>)
 80049c6:	f002 fceb 	bl	80073a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80049ca:	bf00      	nop
 80049cc:	3728      	adds	r7, #40	@ 0x28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40018000 	.word	0x40018000
 80049d8:	40021000 	.word	0x40021000
 80049dc:	40011000 	.word	0x40011000
 80049e0:	40011400 	.word	0x40011400

080049e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80049ea:	4b18      	ldr	r3, [pc, #96]	@ (8004a4c <HAL_MspInit+0x68>)
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	4a17      	ldr	r2, [pc, #92]	@ (8004a4c <HAL_MspInit+0x68>)
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	6193      	str	r3, [r2, #24]
 80049f6:	4b15      	ldr	r3, [pc, #84]	@ (8004a4c <HAL_MspInit+0x68>)
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a02:	4b12      	ldr	r3, [pc, #72]	@ (8004a4c <HAL_MspInit+0x68>)
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	4a11      	ldr	r2, [pc, #68]	@ (8004a4c <HAL_MspInit+0x68>)
 8004a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a0c:	61d3      	str	r3, [r2, #28]
 8004a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a4c <HAL_MspInit+0x68>)
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a16:	607b      	str	r3, [r7, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	210f      	movs	r1, #15
 8004a1e:	f06f 0001 	mvn.w	r0, #1
 8004a22:	f002 f80e 	bl	8006a42 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004a26:	4b0a      	ldr	r3, [pc, #40]	@ (8004a50 <HAL_MspInit+0x6c>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	4a04      	ldr	r2, [pc, #16]	@ (8004a50 <HAL_MspInit+0x6c>)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a42:	bf00      	nop
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	40010000 	.word	0x40010000

08004a54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08e      	sub	sp, #56	@ 0x38
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004a6a:	4b34      	ldr	r3, [pc, #208]	@ (8004b3c <HAL_InitTick+0xe8>)
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	4a33      	ldr	r2, [pc, #204]	@ (8004b3c <HAL_InitTick+0xe8>)
 8004a70:	f043 0301 	orr.w	r3, r3, #1
 8004a74:	61d3      	str	r3, [r2, #28]
 8004a76:	4b31      	ldr	r3, [pc, #196]	@ (8004b3c <HAL_InitTick+0xe8>)
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004a82:	f107 0210 	add.w	r2, r7, #16
 8004a86:	f107 0314 	add.w	r3, r7, #20
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f005 f897 	bl	8009bc0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d103      	bne.n	8004aa4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004a9c:	f005 f868 	bl	8009b70 <HAL_RCC_GetPCLK1Freq>
 8004aa0:	6378      	str	r0, [r7, #52]	@ 0x34
 8004aa2:	e004      	b.n	8004aae <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004aa4:	f005 f864 	bl	8009b70 <HAL_RCC_GetPCLK1Freq>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab0:	4a23      	ldr	r2, [pc, #140]	@ (8004b40 <HAL_InitTick+0xec>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	0c9b      	lsrs	r3, r3, #18
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004abc:	4b21      	ldr	r3, [pc, #132]	@ (8004b44 <HAL_InitTick+0xf0>)
 8004abe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004ac2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8004ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8004b44 <HAL_InitTick+0xf0>)
 8004ac6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004aca:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8004acc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b44 <HAL_InitTick+0xf0>)
 8004ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8004ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b44 <HAL_InitTick+0xf0>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b44 <HAL_InitTick+0xf0>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ade:	4b19      	ldr	r3, [pc, #100]	@ (8004b44 <HAL_InitTick+0xf0>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8004ae4:	4817      	ldr	r0, [pc, #92]	@ (8004b44 <HAL_InitTick+0xf0>)
 8004ae6:	f006 f841 	bl	800ab6c <HAL_TIM_Base_Init>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004af0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d11b      	bne.n	8004b30 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8004af8:	4812      	ldr	r0, [pc, #72]	@ (8004b44 <HAL_InitTick+0xf0>)
 8004afa:	f006 f887 	bl	800ac0c <HAL_TIM_Base_Start_IT>
 8004afe:	4603      	mov	r3, r0
 8004b00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004b04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d111      	bne.n	8004b30 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004b0c:	201c      	movs	r0, #28
 8004b0e:	f001 ffb4 	bl	8006a7a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b0f      	cmp	r3, #15
 8004b16:	d808      	bhi.n	8004b2a <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8004b18:	2200      	movs	r2, #0
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	201c      	movs	r0, #28
 8004b1e:	f001 ff90 	bl	8006a42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b22:	4a09      	ldr	r2, [pc, #36]	@ (8004b48 <HAL_InitTick+0xf4>)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	e002      	b.n	8004b30 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004b30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3738      	adds	r7, #56	@ 0x38
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	431bde83 	.word	0x431bde83
 8004b44:	20000910 	.word	0x20000910
 8004b48:	20000038 	.word	0x20000038

08004b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004b50:	bf00      	nop
 8004b52:	e7fd      	b.n	8004b50 <NMI_Handler+0x4>

08004b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b58:	bf00      	nop
 8004b5a:	e7fd      	b.n	8004b58 <HardFault_Handler+0x4>

08004b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b60:	bf00      	nop
 8004b62:	e7fd      	b.n	8004b60 <MemManage_Handler+0x4>

08004b64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b68:	bf00      	nop
 8004b6a:	e7fd      	b.n	8004b68 <BusFault_Handler+0x4>

08004b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b70:	bf00      	nop
 8004b72:	e7fd      	b.n	8004b70 <UsageFault_Handler+0x4>

08004b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b78:	bf00      	nop
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr

08004b80 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004b84:	4802      	ldr	r0, [pc, #8]	@ (8004b90 <DMA1_Channel4_IRQHandler+0x10>)
 8004b86:	f002 f9a1 	bl	8006ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004b8a:	bf00      	nop
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000ac4 	.word	0x20000ac4

08004b94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b98:	4802      	ldr	r0, [pc, #8]	@ (8004ba4 <TIM2_IRQHandler+0x10>)
 8004b9a:	f006 f9a9 	bl	800aef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004b9e:	bf00      	nop
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000910 	.word	0x20000910

08004ba8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004bac:	4802      	ldr	r0, [pc, #8]	@ (8004bb8 <TIM3_IRQHandler+0x10>)
 8004bae:	f006 f99f 	bl	800aef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004bb2:	bf00      	nop
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	2000095c 	.word	0x2000095c

08004bbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004bc0:	4802      	ldr	r0, [pc, #8]	@ (8004bcc <USART1_IRQHandler+0x10>)
 8004bc2:	f007 f911 	bl	800bde8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004bc6:	bf00      	nop
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	200009ec 	.word	0x200009ec

08004bd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004bd4:	4802      	ldr	r0, [pc, #8]	@ (8004be0 <USART2_IRQHandler+0x10>)
 8004bd6:	f007 f907 	bl	800bde8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004bda:	bf00      	nop
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000a34 	.word	0x20000a34

08004be4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004be8:	4802      	ldr	r0, [pc, #8]	@ (8004bf4 <USART3_IRQHandler+0x10>)
 8004bea:	f007 f8fd 	bl	800bde8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000a7c 	.word	0x20000a7c

08004bf8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004bfc:	4802      	ldr	r0, [pc, #8]	@ (8004c08 <TIM7_IRQHandler+0x10>)
 8004bfe:	f006 f977 	bl	800aef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004c02:	bf00      	nop
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	200009a4 	.word	0x200009a4

08004c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c14:	4a14      	ldr	r2, [pc, #80]	@ (8004c68 <_sbrk+0x5c>)
 8004c16:	4b15      	ldr	r3, [pc, #84]	@ (8004c6c <_sbrk+0x60>)
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c20:	4b13      	ldr	r3, [pc, #76]	@ (8004c70 <_sbrk+0x64>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d102      	bne.n	8004c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c28:	4b11      	ldr	r3, [pc, #68]	@ (8004c70 <_sbrk+0x64>)
 8004c2a:	4a12      	ldr	r2, [pc, #72]	@ (8004c74 <_sbrk+0x68>)
 8004c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c2e:	4b10      	ldr	r3, [pc, #64]	@ (8004c70 <_sbrk+0x64>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4413      	add	r3, r2
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d207      	bcs.n	8004c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c3c:	f00f f8d8 	bl	8013df0 <__errno>
 8004c40:	4603      	mov	r3, r0
 8004c42:	220c      	movs	r2, #12
 8004c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c46:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4a:	e009      	b.n	8004c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c4c:	4b08      	ldr	r3, [pc, #32]	@ (8004c70 <_sbrk+0x64>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c52:	4b07      	ldr	r3, [pc, #28]	@ (8004c70 <_sbrk+0x64>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4413      	add	r3, r2
 8004c5a:	4a05      	ldr	r2, [pc, #20]	@ (8004c70 <_sbrk+0x64>)
 8004c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	2000c000 	.word	0x2000c000
 8004c6c:	00004000 	.word	0x00004000
 8004c70:	20000958 	.word	0x20000958
 8004c74:	20002d98 	.word	0x20002d98

08004c78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08e      	sub	sp, #56	@ 0x38
 8004c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	605a      	str	r2, [r3, #4]
 8004c94:	609a      	str	r2, [r3, #8]
 8004c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c98:	f107 0320 	add.w	r3, r7, #32
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ca2:	1d3b      	adds	r3, r7, #4
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	605a      	str	r2, [r3, #4]
 8004caa:	609a      	str	r2, [r3, #8]
 8004cac:	60da      	str	r2, [r3, #12]
 8004cae:	611a      	str	r2, [r3, #16]
 8004cb0:	615a      	str	r2, [r3, #20]
 8004cb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004cb4:	4b37      	ldr	r3, [pc, #220]	@ (8004d94 <MX_TIM3_Init+0x110>)
 8004cb6:	4a38      	ldr	r2, [pc, #224]	@ (8004d98 <MX_TIM3_Init+0x114>)
 8004cb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8004cba:	4b36      	ldr	r3, [pc, #216]	@ (8004d94 <MX_TIM3_Init+0x110>)
 8004cbc:	2247      	movs	r2, #71	@ 0x47
 8004cbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cc0:	4b34      	ldr	r3, [pc, #208]	@ (8004d94 <MX_TIM3_Init+0x110>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004cc6:	4b33      	ldr	r3, [pc, #204]	@ (8004d94 <MX_TIM3_Init+0x110>)
 8004cc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ccc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cce:	4b31      	ldr	r3, [pc, #196]	@ (8004d94 <MX_TIM3_Init+0x110>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8004d94 <MX_TIM3_Init+0x110>)
 8004cd6:	2280      	movs	r2, #128	@ 0x80
 8004cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004cda:	482e      	ldr	r0, [pc, #184]	@ (8004d94 <MX_TIM3_Init+0x110>)
 8004cdc:	f005 ff46 	bl	800ab6c <HAL_TIM_Base_Init>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004ce6:	f7ff fdfb 	bl	80048e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004cf0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4827      	ldr	r0, [pc, #156]	@ (8004d94 <MX_TIM3_Init+0x110>)
 8004cf8:	f006 fac4 	bl	800b284 <HAL_TIM_ConfigClockSource>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004d02:	f7ff fded 	bl	80048e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004d06:	4823      	ldr	r0, [pc, #140]	@ (8004d94 <MX_TIM3_Init+0x110>)
 8004d08:	f005 ffe0 	bl	800accc <HAL_TIM_PWM_Init>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004d12:	f7ff fde5 	bl	80048e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d16:	2300      	movs	r3, #0
 8004d18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d1e:	f107 0320 	add.w	r3, r7, #32
 8004d22:	4619      	mov	r1, r3
 8004d24:	481b      	ldr	r0, [pc, #108]	@ (8004d94 <MX_TIM3_Init+0x110>)
 8004d26:	f006 fe79 	bl	800ba1c <HAL_TIMEx_MasterConfigSynchronization>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004d30:	f7ff fdd6 	bl	80048e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d34:	2360      	movs	r3, #96	@ 0x60
 8004d36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d44:	1d3b      	adds	r3, r7, #4
 8004d46:	2200      	movs	r2, #0
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4812      	ldr	r0, [pc, #72]	@ (8004d94 <MX_TIM3_Init+0x110>)
 8004d4c:	f006 f9d8 	bl	800b100 <HAL_TIM_PWM_ConfigChannel>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004d56:	f7ff fdc3 	bl	80048e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d5a:	1d3b      	adds	r3, r7, #4
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	4619      	mov	r1, r3
 8004d60:	480c      	ldr	r0, [pc, #48]	@ (8004d94 <MX_TIM3_Init+0x110>)
 8004d62:	f006 f9cd 	bl	800b100 <HAL_TIM_PWM_ConfigChannel>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004d6c:	f7ff fdb8 	bl	80048e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d70:	1d3b      	adds	r3, r7, #4
 8004d72:	2208      	movs	r2, #8
 8004d74:	4619      	mov	r1, r3
 8004d76:	4807      	ldr	r0, [pc, #28]	@ (8004d94 <MX_TIM3_Init+0x110>)
 8004d78:	f006 f9c2 	bl	800b100 <HAL_TIM_PWM_ConfigChannel>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8004d82:	f7ff fdad 	bl	80048e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004d86:	4803      	ldr	r0, [pc, #12]	@ (8004d94 <MX_TIM3_Init+0x110>)
 8004d88:	f000 f880 	bl	8004e8c <HAL_TIM_MspPostInit>

}
 8004d8c:	bf00      	nop
 8004d8e:	3738      	adds	r7, #56	@ 0x38
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	2000095c 	.word	0x2000095c
 8004d98:	40000400 	.word	0x40000400

08004d9c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004da2:	463b      	mov	r3, r7
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004daa:	4b15      	ldr	r3, [pc, #84]	@ (8004e00 <MX_TIM7_Init+0x64>)
 8004dac:	4a15      	ldr	r2, [pc, #84]	@ (8004e04 <MX_TIM7_Init+0x68>)
 8004dae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8004db0:	4b13      	ldr	r3, [pc, #76]	@ (8004e00 <MX_TIM7_Init+0x64>)
 8004db2:	2247      	movs	r2, #71	@ 0x47
 8004db4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004db6:	4b12      	ldr	r3, [pc, #72]	@ (8004e00 <MX_TIM7_Init+0x64>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8004dbc:	4b10      	ldr	r3, [pc, #64]	@ (8004e00 <MX_TIM7_Init+0x64>)
 8004dbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004dc2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e00 <MX_TIM7_Init+0x64>)
 8004dc6:	2280      	movs	r2, #128	@ 0x80
 8004dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004dca:	480d      	ldr	r0, [pc, #52]	@ (8004e00 <MX_TIM7_Init+0x64>)
 8004dcc:	f005 fece 	bl	800ab6c <HAL_TIM_Base_Init>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004dd6:	f7ff fd83 	bl	80048e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dde:	2300      	movs	r3, #0
 8004de0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004de2:	463b      	mov	r3, r7
 8004de4:	4619      	mov	r1, r3
 8004de6:	4806      	ldr	r0, [pc, #24]	@ (8004e00 <MX_TIM7_Init+0x64>)
 8004de8:	f006 fe18 	bl	800ba1c <HAL_TIMEx_MasterConfigSynchronization>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8004df2:	f7ff fd75 	bl	80048e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	200009a4 	.word	0x200009a4
 8004e04:	40001400 	.word	0x40001400

08004e08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1a      	ldr	r2, [pc, #104]	@ (8004e80 <HAL_TIM_Base_MspInit+0x78>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d114      	bne.n	8004e44 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004e84 <HAL_TIM_Base_MspInit+0x7c>)
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	4a19      	ldr	r2, [pc, #100]	@ (8004e84 <HAL_TIM_Base_MspInit+0x7c>)
 8004e20:	f043 0302 	orr.w	r3, r3, #2
 8004e24:	61d3      	str	r3, [r2, #28]
 8004e26:	4b17      	ldr	r3, [pc, #92]	@ (8004e84 <HAL_TIM_Base_MspInit+0x7c>)
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004e32:	2200      	movs	r2, #0
 8004e34:	2105      	movs	r1, #5
 8004e36:	201d      	movs	r0, #29
 8004e38:	f001 fe03 	bl	8006a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e3c:	201d      	movs	r0, #29
 8004e3e:	f001 fe1c 	bl	8006a7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004e42:	e018      	b.n	8004e76 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a0f      	ldr	r2, [pc, #60]	@ (8004e88 <HAL_TIM_Base_MspInit+0x80>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d113      	bne.n	8004e76 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <HAL_TIM_Base_MspInit+0x7c>)
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	4a0c      	ldr	r2, [pc, #48]	@ (8004e84 <HAL_TIM_Base_MspInit+0x7c>)
 8004e54:	f043 0320 	orr.w	r3, r3, #32
 8004e58:	61d3      	str	r3, [r2, #28]
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <HAL_TIM_Base_MspInit+0x7c>)
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8004e66:	2200      	movs	r2, #0
 8004e68:	2105      	movs	r1, #5
 8004e6a:	2037      	movs	r0, #55	@ 0x37
 8004e6c:	f001 fde9 	bl	8006a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004e70:	2037      	movs	r0, #55	@ 0x37
 8004e72:	f001 fe02 	bl	8006a7a <HAL_NVIC_EnableIRQ>
}
 8004e76:	bf00      	nop
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40021000 	.word	0x40021000
 8004e88:	40001400 	.word	0x40001400

08004e8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e94:	f107 0310 	add.w	r3, r7, #16
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	605a      	str	r2, [r3, #4]
 8004e9e:	609a      	str	r2, [r3, #8]
 8004ea0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f14 <HAL_TIM_MspPostInit+0x88>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d12f      	bne.n	8004f0c <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eac:	4b1a      	ldr	r3, [pc, #104]	@ (8004f18 <HAL_TIM_MspPostInit+0x8c>)
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	4a19      	ldr	r2, [pc, #100]	@ (8004f18 <HAL_TIM_MspPostInit+0x8c>)
 8004eb2:	f043 0304 	orr.w	r3, r3, #4
 8004eb6:	6193      	str	r3, [r2, #24]
 8004eb8:	4b17      	ldr	r3, [pc, #92]	@ (8004f18 <HAL_TIM_MspPostInit+0x8c>)
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec4:	4b14      	ldr	r3, [pc, #80]	@ (8004f18 <HAL_TIM_MspPostInit+0x8c>)
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	4a13      	ldr	r2, [pc, #76]	@ (8004f18 <HAL_TIM_MspPostInit+0x8c>)
 8004eca:	f043 0308 	orr.w	r3, r3, #8
 8004ece:	6193      	str	r3, [r2, #24]
 8004ed0:	4b11      	ldr	r3, [pc, #68]	@ (8004f18 <HAL_TIM_MspPostInit+0x8c>)
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004edc:	23c0      	movs	r3, #192	@ 0xc0
 8004ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ee8:	f107 0310 	add.w	r3, r7, #16
 8004eec:	4619      	mov	r1, r3
 8004eee:	480b      	ldr	r0, [pc, #44]	@ (8004f1c <HAL_TIM_MspPostInit+0x90>)
 8004ef0:	f002 fa56 	bl	80073a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004efc:	2302      	movs	r3, #2
 8004efe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f00:	f107 0310 	add.w	r3, r7, #16
 8004f04:	4619      	mov	r1, r3
 8004f06:	4806      	ldr	r0, [pc, #24]	@ (8004f20 <HAL_TIM_MspPostInit+0x94>)
 8004f08:	f002 fa4a 	bl	80073a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004f0c:	bf00      	nop
 8004f0e:	3720      	adds	r7, #32
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	40010800 	.word	0x40010800
 8004f20:	40010c00 	.word	0x40010c00

08004f24 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f28:	4b11      	ldr	r3, [pc, #68]	@ (8004f70 <MX_USART1_UART_Init+0x4c>)
 8004f2a:	4a12      	ldr	r2, [pc, #72]	@ (8004f74 <MX_USART1_UART_Init+0x50>)
 8004f2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004f2e:	4b10      	ldr	r3, [pc, #64]	@ (8004f70 <MX_USART1_UART_Init+0x4c>)
 8004f30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f36:	4b0e      	ldr	r3, [pc, #56]	@ (8004f70 <MX_USART1_UART_Init+0x4c>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f70 <MX_USART1_UART_Init+0x4c>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f42:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <MX_USART1_UART_Init+0x4c>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f48:	4b09      	ldr	r3, [pc, #36]	@ (8004f70 <MX_USART1_UART_Init+0x4c>)
 8004f4a:	220c      	movs	r2, #12
 8004f4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f4e:	4b08      	ldr	r3, [pc, #32]	@ (8004f70 <MX_USART1_UART_Init+0x4c>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f54:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <MX_USART1_UART_Init+0x4c>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f5a:	4805      	ldr	r0, [pc, #20]	@ (8004f70 <MX_USART1_UART_Init+0x4c>)
 8004f5c:	f006 fddc 	bl	800bb18 <HAL_UART_Init>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004f66:	f7ff fcbb 	bl	80048e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004f6a:	bf00      	nop
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	200009ec 	.word	0x200009ec
 8004f74:	40013800 	.word	0x40013800

08004f78 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f7c:	4b11      	ldr	r3, [pc, #68]	@ (8004fc4 <MX_USART2_UART_Init+0x4c>)
 8004f7e:	4a12      	ldr	r2, [pc, #72]	@ (8004fc8 <MX_USART2_UART_Init+0x50>)
 8004f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004f82:	4b10      	ldr	r3, [pc, #64]	@ (8004fc4 <MX_USART2_UART_Init+0x4c>)
 8004f84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc4 <MX_USART2_UART_Init+0x4c>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f90:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc4 <MX_USART2_UART_Init+0x4c>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f96:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc4 <MX_USART2_UART_Init+0x4c>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f9c:	4b09      	ldr	r3, [pc, #36]	@ (8004fc4 <MX_USART2_UART_Init+0x4c>)
 8004f9e:	220c      	movs	r2, #12
 8004fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fa2:	4b08      	ldr	r3, [pc, #32]	@ (8004fc4 <MX_USART2_UART_Init+0x4c>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fa8:	4b06      	ldr	r3, [pc, #24]	@ (8004fc4 <MX_USART2_UART_Init+0x4c>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004fae:	4805      	ldr	r0, [pc, #20]	@ (8004fc4 <MX_USART2_UART_Init+0x4c>)
 8004fb0:	f006 fdb2 	bl	800bb18 <HAL_UART_Init>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004fba:	f7ff fc91 	bl	80048e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004fbe:	bf00      	nop
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000a34 	.word	0x20000a34
 8004fc8:	40004400 	.word	0x40004400

08004fcc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004fd0:	4b11      	ldr	r3, [pc, #68]	@ (8005018 <MX_USART3_UART_Init+0x4c>)
 8004fd2:	4a12      	ldr	r2, [pc, #72]	@ (800501c <MX_USART3_UART_Init+0x50>)
 8004fd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004fd6:	4b10      	ldr	r3, [pc, #64]	@ (8005018 <MX_USART3_UART_Init+0x4c>)
 8004fd8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004fdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004fde:	4b0e      	ldr	r3, [pc, #56]	@ (8005018 <MX_USART3_UART_Init+0x4c>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8005018 <MX_USART3_UART_Init+0x4c>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004fea:	4b0b      	ldr	r3, [pc, #44]	@ (8005018 <MX_USART3_UART_Init+0x4c>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004ff0:	4b09      	ldr	r3, [pc, #36]	@ (8005018 <MX_USART3_UART_Init+0x4c>)
 8004ff2:	220c      	movs	r2, #12
 8004ff4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ff6:	4b08      	ldr	r3, [pc, #32]	@ (8005018 <MX_USART3_UART_Init+0x4c>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ffc:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <MX_USART3_UART_Init+0x4c>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005002:	4805      	ldr	r0, [pc, #20]	@ (8005018 <MX_USART3_UART_Init+0x4c>)
 8005004:	f006 fd88 	bl	800bb18 <HAL_UART_Init>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800500e:	f7ff fc67 	bl	80048e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005012:	bf00      	nop
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000a7c 	.word	0x20000a7c
 800501c:	40004800 	.word	0x40004800

08005020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08e      	sub	sp, #56	@ 0x38
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	605a      	str	r2, [r3, #4]
 8005032:	609a      	str	r2, [r3, #8]
 8005034:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a7c      	ldr	r2, [pc, #496]	@ (800522c <HAL_UART_MspInit+0x20c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d161      	bne.n	8005104 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005040:	4b7b      	ldr	r3, [pc, #492]	@ (8005230 <HAL_UART_MspInit+0x210>)
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	4a7a      	ldr	r2, [pc, #488]	@ (8005230 <HAL_UART_MspInit+0x210>)
 8005046:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800504a:	6193      	str	r3, [r2, #24]
 800504c:	4b78      	ldr	r3, [pc, #480]	@ (8005230 <HAL_UART_MspInit+0x210>)
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005054:	623b      	str	r3, [r7, #32]
 8005056:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005058:	4b75      	ldr	r3, [pc, #468]	@ (8005230 <HAL_UART_MspInit+0x210>)
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	4a74      	ldr	r2, [pc, #464]	@ (8005230 <HAL_UART_MspInit+0x210>)
 800505e:	f043 0304 	orr.w	r3, r3, #4
 8005062:	6193      	str	r3, [r2, #24]
 8005064:	4b72      	ldr	r3, [pc, #456]	@ (8005230 <HAL_UART_MspInit+0x210>)
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005070:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005074:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005076:	2302      	movs	r3, #2
 8005078:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800507a:	2303      	movs	r3, #3
 800507c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800507e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005082:	4619      	mov	r1, r3
 8005084:	486b      	ldr	r0, [pc, #428]	@ (8005234 <HAL_UART_MspInit+0x214>)
 8005086:	f002 f98b 	bl	80073a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800508a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005090:	2300      	movs	r3, #0
 8005092:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005094:	2300      	movs	r3, #0
 8005096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800509c:	4619      	mov	r1, r3
 800509e:	4865      	ldr	r0, [pc, #404]	@ (8005234 <HAL_UART_MspInit+0x214>)
 80050a0:	f002 f97e 	bl	80073a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80050a4:	4b64      	ldr	r3, [pc, #400]	@ (8005238 <HAL_UART_MspInit+0x218>)
 80050a6:	4a65      	ldr	r2, [pc, #404]	@ (800523c <HAL_UART_MspInit+0x21c>)
 80050a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050aa:	4b63      	ldr	r3, [pc, #396]	@ (8005238 <HAL_UART_MspInit+0x218>)
 80050ac:	2210      	movs	r2, #16
 80050ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050b0:	4b61      	ldr	r3, [pc, #388]	@ (8005238 <HAL_UART_MspInit+0x218>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050b6:	4b60      	ldr	r3, [pc, #384]	@ (8005238 <HAL_UART_MspInit+0x218>)
 80050b8:	2280      	movs	r2, #128	@ 0x80
 80050ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050bc:	4b5e      	ldr	r3, [pc, #376]	@ (8005238 <HAL_UART_MspInit+0x218>)
 80050be:	2200      	movs	r2, #0
 80050c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050c2:	4b5d      	ldr	r3, [pc, #372]	@ (8005238 <HAL_UART_MspInit+0x218>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80050c8:	4b5b      	ldr	r3, [pc, #364]	@ (8005238 <HAL_UART_MspInit+0x218>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80050ce:	4b5a      	ldr	r3, [pc, #360]	@ (8005238 <HAL_UART_MspInit+0x218>)
 80050d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80050d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80050d6:	4858      	ldr	r0, [pc, #352]	@ (8005238 <HAL_UART_MspInit+0x218>)
 80050d8:	f001 fcde 	bl	8006a98 <HAL_DMA_Init>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80050e2:	f7ff fbfd 	bl	80048e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a53      	ldr	r2, [pc, #332]	@ (8005238 <HAL_UART_MspInit+0x218>)
 80050ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80050ec:	4a52      	ldr	r2, [pc, #328]	@ (8005238 <HAL_UART_MspInit+0x218>)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80050f2:	2200      	movs	r2, #0
 80050f4:	2105      	movs	r1, #5
 80050f6:	2025      	movs	r0, #37	@ 0x25
 80050f8:	f001 fca3 	bl	8006a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050fc:	2025      	movs	r0, #37	@ 0x25
 80050fe:	f001 fcbc 	bl	8006a7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005102:	e08e      	b.n	8005222 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART2)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a4d      	ldr	r2, [pc, #308]	@ (8005240 <HAL_UART_MspInit+0x220>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d138      	bne.n	8005180 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 800510e:	4b48      	ldr	r3, [pc, #288]	@ (8005230 <HAL_UART_MspInit+0x210>)
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	4a47      	ldr	r2, [pc, #284]	@ (8005230 <HAL_UART_MspInit+0x210>)
 8005114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005118:	61d3      	str	r3, [r2, #28]
 800511a:	4b45      	ldr	r3, [pc, #276]	@ (8005230 <HAL_UART_MspInit+0x210>)
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005122:	61bb      	str	r3, [r7, #24]
 8005124:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005126:	4b42      	ldr	r3, [pc, #264]	@ (8005230 <HAL_UART_MspInit+0x210>)
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	4a41      	ldr	r2, [pc, #260]	@ (8005230 <HAL_UART_MspInit+0x210>)
 800512c:	f043 0304 	orr.w	r3, r3, #4
 8005130:	6193      	str	r3, [r2, #24]
 8005132:	4b3f      	ldr	r3, [pc, #252]	@ (8005230 <HAL_UART_MspInit+0x210>)
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800513e:	2304      	movs	r3, #4
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005142:	2302      	movs	r3, #2
 8005144:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005146:	2303      	movs	r3, #3
 8005148:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800514a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800514e:	4619      	mov	r1, r3
 8005150:	4838      	ldr	r0, [pc, #224]	@ (8005234 <HAL_UART_MspInit+0x214>)
 8005152:	f002 f925 	bl	80073a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005156:	2308      	movs	r3, #8
 8005158:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800515a:	2300      	movs	r3, #0
 800515c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515e:	2300      	movs	r3, #0
 8005160:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005166:	4619      	mov	r1, r3
 8005168:	4832      	ldr	r0, [pc, #200]	@ (8005234 <HAL_UART_MspInit+0x214>)
 800516a:	f002 f919 	bl	80073a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800516e:	2200      	movs	r2, #0
 8005170:	2105      	movs	r1, #5
 8005172:	2026      	movs	r0, #38	@ 0x26
 8005174:	f001 fc65 	bl	8006a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005178:	2026      	movs	r0, #38	@ 0x26
 800517a:	f001 fc7e 	bl	8006a7a <HAL_NVIC_EnableIRQ>
}
 800517e:	e050      	b.n	8005222 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART3)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a2f      	ldr	r2, [pc, #188]	@ (8005244 <HAL_UART_MspInit+0x224>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d14b      	bne.n	8005222 <HAL_UART_MspInit+0x202>
    __HAL_RCC_USART3_CLK_ENABLE();
 800518a:	4b29      	ldr	r3, [pc, #164]	@ (8005230 <HAL_UART_MspInit+0x210>)
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	4a28      	ldr	r2, [pc, #160]	@ (8005230 <HAL_UART_MspInit+0x210>)
 8005190:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005194:	61d3      	str	r3, [r2, #28]
 8005196:	4b26      	ldr	r3, [pc, #152]	@ (8005230 <HAL_UART_MspInit+0x210>)
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051a2:	4b23      	ldr	r3, [pc, #140]	@ (8005230 <HAL_UART_MspInit+0x210>)
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	4a22      	ldr	r2, [pc, #136]	@ (8005230 <HAL_UART_MspInit+0x210>)
 80051a8:	f043 0320 	orr.w	r3, r3, #32
 80051ac:	6193      	str	r3, [r2, #24]
 80051ae:	4b20      	ldr	r3, [pc, #128]	@ (8005230 <HAL_UART_MspInit+0x210>)
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80051ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c0:	2302      	movs	r3, #2
 80051c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051c4:	2303      	movs	r3, #3
 80051c6:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051cc:	4619      	mov	r1, r3
 80051ce:	481e      	ldr	r0, [pc, #120]	@ (8005248 <HAL_UART_MspInit+0x228>)
 80051d0:	f002 f8e6 	bl	80073a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80051d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051da:	2300      	movs	r3, #0
 80051dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051e6:	4619      	mov	r1, r3
 80051e8:	4817      	ldr	r0, [pc, #92]	@ (8005248 <HAL_UART_MspInit+0x228>)
 80051ea:	f002 f8d9 	bl	80073a0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 80051ee:	4b17      	ldr	r3, [pc, #92]	@ (800524c <HAL_UART_MspInit+0x22c>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80051f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80051fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80051fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051fe:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005202:	637b      	str	r3, [r7, #52]	@ 0x34
 8005204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005206:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800520a:	637b      	str	r3, [r7, #52]	@ 0x34
 800520c:	4a0f      	ldr	r2, [pc, #60]	@ (800524c <HAL_UART_MspInit+0x22c>)
 800520e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005210:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005212:	2200      	movs	r2, #0
 8005214:	2105      	movs	r1, #5
 8005216:	2027      	movs	r0, #39	@ 0x27
 8005218:	f001 fc13 	bl	8006a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800521c:	2027      	movs	r0, #39	@ 0x27
 800521e:	f001 fc2c 	bl	8006a7a <HAL_NVIC_EnableIRQ>
}
 8005222:	bf00      	nop
 8005224:	3738      	adds	r7, #56	@ 0x38
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40013800 	.word	0x40013800
 8005230:	40021000 	.word	0x40021000
 8005234:	40010800 	.word	0x40010800
 8005238:	20000ac4 	.word	0x20000ac4
 800523c:	40020044 	.word	0x40020044
 8005240:	40004400 	.word	0x40004400
 8005244:	40004800 	.word	0x40004800
 8005248:	40011400 	.word	0x40011400
 800524c:	40010000 	.word	0x40010000

08005250 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005250:	f7ff fd12 	bl	8004c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005254:	480b      	ldr	r0, [pc, #44]	@ (8005284 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005256:	490c      	ldr	r1, [pc, #48]	@ (8005288 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005258:	4a0c      	ldr	r2, [pc, #48]	@ (800528c <LoopFillZerobss+0x16>)
  movs r3, #0
 800525a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800525c:	e002      	b.n	8005264 <LoopCopyDataInit>

0800525e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800525e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005262:	3304      	adds	r3, #4

08005264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005268:	d3f9      	bcc.n	800525e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800526a:	4a09      	ldr	r2, [pc, #36]	@ (8005290 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800526c:	4c09      	ldr	r4, [pc, #36]	@ (8005294 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800526e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005270:	e001      	b.n	8005276 <LoopFillZerobss>

08005272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005274:	3204      	adds	r2, #4

08005276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005278:	d3fb      	bcc.n	8005272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800527a:	f00e fdbf 	bl	8013dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800527e:	f7ff faa7 	bl	80047d0 <main>
  bx lr
 8005282:	4770      	bx	lr
  ldr r0, =_sdata
 8005284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005288:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800528c:	08014918 	.word	0x08014918
  ldr r2, =_sbss
 8005290:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8005294:	20002d98 	.word	0x20002d98

08005298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005298:	e7fe      	b.n	8005298 <ADC1_2_IRQHandler>
	...

0800529c <AT24Cxx_get_max_addr>:
#include <stdio.h>

#include "AT24Cxx_stm32_hal.h"

uint16_t AT24Cxx_get_max_addr ( AT24Cxx_device_t* dev )
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	791b      	ldrb	r3, [r3, #4]
 80052a8:	2b05      	cmp	r3, #5
 80052aa:	d820      	bhi.n	80052ee <AT24Cxx_get_max_addr+0x52>
 80052ac:	a201      	add	r2, pc, #4	@ (adr r2, 80052b4 <AT24Cxx_get_max_addr+0x18>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052cd 	.word	0x080052cd
 80052b8:	080052d1 	.word	0x080052d1
 80052bc:	080052d7 	.word	0x080052d7
 80052c0:	080052dd 	.word	0x080052dd
 80052c4:	080052e3 	.word	0x080052e3
 80052c8:	080052e9 	.word	0x080052e9
	case AT24C01:
		return AT24C01_MAX_ADDR;
 80052cc:	237f      	movs	r3, #127	@ 0x7f
 80052ce:	e00f      	b.n	80052f0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C32:
		return AT24C32_MAX_ADDR;
 80052d0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80052d4:	e00c      	b.n	80052f0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C64:
		return AT24C64_MAX_ADDR;
 80052d6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80052da:	e009      	b.n	80052f0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C128:
		return AT24C128_MAX_ADDR;
 80052dc:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80052e0:	e006      	b.n	80052f0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C256:
		return AT24C256_MAX_ADDR;
 80052e2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80052e6:	e003      	b.n	80052f0 <AT24Cxx_get_max_addr+0x54>
		break;
		//not supported yet, will overflow
	case AT24C512:
		return AT24C512_MAX_ADDR;
 80052e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80052ec:	e000      	b.n	80052f0 <AT24Cxx_get_max_addr+0x54>
		break;
	default:
		return 0;
 80052ee:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop

080052fc <AT24Cxx_get_pg_size>:

uint16_t AT24Cxx_get_pg_size ( AT24Cxx_device_t* dev )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	791b      	ldrb	r3, [r3, #4]
 8005308:	2b05      	cmp	r3, #5
 800530a:	d81b      	bhi.n	8005344 <AT24Cxx_get_pg_size+0x48>
 800530c:	a201      	add	r2, pc, #4	@ (adr r2, 8005314 <AT24Cxx_get_pg_size+0x18>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	0800532d 	.word	0x0800532d
 8005318:	08005331 	.word	0x08005331
 800531c:	08005335 	.word	0x08005335
 8005320:	08005339 	.word	0x08005339
 8005324:	0800533d 	.word	0x0800533d
 8005328:	08005341 	.word	0x08005341
	case AT24C01:
		return AT24C01_PG_SIZE;
 800532c:	2308      	movs	r3, #8
 800532e:	e00a      	b.n	8005346 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C32:
		return AT24C32_PG_SIZE;
 8005330:	2320      	movs	r3, #32
 8005332:	e008      	b.n	8005346 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C64:
		return AT24C64_PG_SIZE;
 8005334:	2320      	movs	r3, #32
 8005336:	e006      	b.n	8005346 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C128:
		return AT24C128_PG_SIZE;
 8005338:	2340      	movs	r3, #64	@ 0x40
 800533a:	e004      	b.n	8005346 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C256:
		return AT24C256_PG_SIZE;
 800533c:	2340      	movs	r3, #64	@ 0x40
 800533e:	e002      	b.n	8005346 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C512:
		//not supported yet, will overflow
		return AT24C512_PG_SIZE;
 8005340:	2380      	movs	r3, #128	@ 0x80
 8005342:	e000      	b.n	8005346 <AT24Cxx_get_pg_size+0x4a>
		break;
	default:
		return 0;
 8005344:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr

08005350 <AT24Cxx_init>:

AT24Cxx_ERR_TypeDef AT24Cxx_init( AT24Cxx_devices_t* devices, 
	uint8_t init_dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	460b      	mov	r3, r1
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	72fb      	strb	r3, [r7, #11]
	//adds first device to AT32Cxx_devices array
	//further devices should be added by calling AT24Cxx_add_dev()
	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 800535e:	2114      	movs	r1, #20
 8005360:	2001      	movs	r0, #1
 8005362:	f00e fc63 	bl	8013c2c <calloc>
 8005366:	4603      	mov	r3, r0
 8005368:	613b      	str	r3, [r7, #16]
	if ( at == NULL )
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d102      	bne.n	8005376 <AT24Cxx_init+0x26>
		return at_init_err;
 8005370:	f04f 33ff 	mov.w	r3, #4294967295
 8005374:	e028      	b.n	80053c8 <AT24Cxx_init+0x78>

	for(uint8_t i = 0; i < 8; i++)
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]
 800537a:	e007      	b.n	800538c <AT24Cxx_init+0x3c>
			devices->devices[i] = 0x00;
 800537c:	7dfa      	ldrb	r2, [r7, #23]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2100      	movs	r1, #0
 8005382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < 8; i++)
 8005386:	7dfb      	ldrb	r3, [r7, #23]
 8005388:	3301      	adds	r3, #1
 800538a:	75fb      	strb	r3, [r7, #23]
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	2b07      	cmp	r3, #7
 8005390:	d9f4      	bls.n	800537c <AT24Cxx_init+0x2c>

	at->dev_addr = init_dev_addr;
 8005392:	7afb      	ldrb	r3, [r7, #11]
 8005394:	b29a      	uxth	r2, r3
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	2200      	movs	r2, #0
 800539e:	60da      	str	r2, [r3, #12]
	at->prev_dev = NULL;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2200      	movs	r2, #0
 80053a4:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2205      	movs	r2, #5
 80053aa:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2201      	movs	r2, #1
 80053b6:	721a      	strb	r2, [r3, #8]
	devices->dev_count = 1;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[0] = at;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	601a      	str	r2, [r3, #0]

	return at_ok;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <AT24Cxx_add_dev>:

AT24Cxx_ERR_TypeDef AT24Cxx_add_dev( AT24Cxx_devices_t* devices, 
	uint8_t dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	460b      	mov	r3, r1
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	72fb      	strb	r3, [r7, #11]
	if(devices->dev_count == 0 || devices->dev_count > 8)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d004      	beq.n	80053f2 <AT24Cxx_add_dev+0x22>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d902      	bls.n	80053f8 <AT24Cxx_add_dev+0x28>
		return at_add_dev_err;
 80053f2:	f06f 0301 	mvn.w	r3, #1
 80053f6:	e03e      	b.n	8005476 <AT24Cxx_add_dev+0xa6>

	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 80053f8:	2114      	movs	r1, #20
 80053fa:	2001      	movs	r0, #1
 80053fc:	f00e fc16 	bl	8013c2c <calloc>
 8005400:	4603      	mov	r3, r0
 8005402:	617b      	str	r3, [r7, #20]
	if ( at == NULL )
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <AT24Cxx_add_dev+0x40>
		return at_add_dev_err;
 800540a:	f06f 0301 	mvn.w	r3, #1
 800540e:	e032      	b.n	8005476 <AT24Cxx_add_dev+0xa6>

	at->dev_addr = dev_addr;
 8005410:	7afb      	ldrb	r3, [r7, #11]
 8005412:	b29a      	uxth	r2, r3
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2200      	movs	r2, #0
 800541c:	60da      	str	r2, [r3, #12]
	at->prev_dev = devices->devices[devices->dev_count-1];
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005424:	1e5a      	subs	r2, r3, #1
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2205      	movs	r2, #5
 8005434:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2201      	movs	r2, #1
 8005440:	721a      	strb	r2, [r3, #8]
	devices->dev_count++;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005448:	3301      	adds	r3, #1
 800544a:	b2da      	uxtb	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[devices->dev_count-1] = at;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005458:	1e5a      	subs	r2, r3, #1
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6979      	ldr	r1, [r7, #20]
 800545e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//update previous device's next device
	devices->devices[devices->dev_count-2]->next_dev = at;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005468:	1e9a      	subs	r2, r3, #2
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	60da      	str	r2, [r3, #12]
	return at_ok;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <AT24Cxx_write_byte_buffer>:
	return at_w_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_write_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 800547e:	b5b0      	push	{r4, r5, r7, lr}
 8005480:	b08a      	sub	sp, #40	@ 0x28
 8005482:	af04      	add	r7, sp, #16
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	4611      	mov	r1, r2
 800548a:	461a      	mov	r2, r3
 800548c:	460b      	mov	r3, r1
 800548e:	80fb      	strh	r3, [r7, #6]
 8005490:	4613      	mov	r3, r2
 8005492:	80bb      	strh	r3, [r7, #4]
	//TODO checks

	uint8_t page_size = AT24Cxx_get_pg_size(dev);
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f7ff ff31 	bl	80052fc <AT24Cxx_get_pg_size>
 800549a:	4603      	mov	r3, r0
 800549c:	75bb      	strb	r3, [r7, #22]

	uint8_t page_remaining = page_size - mem_addr % page_size;
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	7dba      	ldrb	r2, [r7, #22]
 80054a2:	fb93 f1f2 	sdiv	r1, r3, r2
 80054a6:	fb01 f202 	mul.w	r2, r1, r2
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	7dba      	ldrb	r2, [r7, #22]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	757b      	strb	r3, [r7, #21]

	uint8_t page_writes = (buf_length - page_remaining) / page_size;
 80054b4:	88ba      	ldrh	r2, [r7, #4]
 80054b6:	7d7b      	ldrb	r3, [r7, #21]
 80054b8:	1ad2      	subs	r2, r2, r3
 80054ba:	7dbb      	ldrb	r3, [r7, #22]
 80054bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80054c0:	753b      	strb	r3, [r7, #20]
	uint8_t remainder_writes = (buf_length - page_remaining) % page_size;
 80054c2:	88ba      	ldrh	r2, [r7, #4]
 80054c4:	7d7b      	ldrb	r3, [r7, #21]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	7dba      	ldrb	r2, [r7, #22]
 80054ca:	fb93 f1f2 	sdiv	r1, r3, r2
 80054ce:	fb01 f202 	mul.w	r2, r1, r2
 80054d2:	1a9b      	subs	r3, r3, r2
 80054d4:	74fb      	strb	r3, [r7, #19]

	//finish first page
	if((mem_addr + page_remaining) > 0x00 &&
 80054d6:	88fa      	ldrh	r2, [r7, #6]
 80054d8:	7d7b      	ldrb	r3, [r7, #21]
 80054da:	4413      	add	r3, r2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	dd23      	ble.n	8005528 <AT24Cxx_write_byte_buffer+0xaa>
		(mem_addr + page_remaining) < AT24Cxx_get_max_addr(dev)){
 80054e0:	88fa      	ldrh	r2, [r7, #6]
 80054e2:	7d7b      	ldrb	r3, [r7, #21]
 80054e4:	18d4      	adds	r4, r2, r3
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f7ff fed8 	bl	800529c <AT24Cxx_get_max_addr>
 80054ec:	4603      	mov	r3, r0
	if((mem_addr + page_remaining) > 0x00 &&
 80054ee:	429c      	cmp	r4, r3
 80054f0:	da1a      	bge.n	8005528 <AT24Cxx_write_byte_buffer+0xaa>

		while(HAL_I2C_Mem_Write(dev->dev_port,
 80054f2:	bf00      	nop
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	88db      	ldrh	r3, [r3, #6]
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	b21b      	sxth	r3, r3
 8005500:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005504:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Write(dev->dev_port,
 8005506:	b299      	uxth	r1, r3
 8005508:	7d7b      	ldrb	r3, [r7, #21]
 800550a:	b29b      	uxth	r3, r3
 800550c:	88fa      	ldrh	r2, [r7, #6]
 800550e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8005512:	9402      	str	r4, [sp, #8]
 8005514:	9301      	str	r3, [sp, #4]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	2310      	movs	r3, #16
 800551c:	f002 fdca 	bl	80080b4 <HAL_I2C_Mem_Write>
 8005520:	4603      	mov	r3, r0
				(uint16_t) mem_addr,
				I2C_MEMADD_SIZE_16BIT,
				data_buf,
				page_remaining,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e6      	bne.n	80054f4 <AT24Cxx_write_byte_buffer+0x76>
	if((mem_addr + page_remaining) > 0x00 &&
 8005526:	e002      	b.n	800552e <AT24Cxx_write_byte_buffer+0xb0>
	}else return at_w_bytes_err;
 8005528:	f06f 0304 	mvn.w	r3, #4
 800552c:	e0a5      	b.n	800567a <AT24Cxx_write_byte_buffer+0x1fc>

	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 800552e:	2300      	movs	r3, #0
 8005530:	75fb      	strb	r3, [r7, #23]
 8005532:	e04e      	b.n	80055d2 <AT24Cxx_write_byte_buffer+0x154>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8005534:	88fa      	ldrh	r2, [r7, #6]
 8005536:	7d7b      	ldrb	r3, [r7, #21]
 8005538:	441a      	add	r2, r3
 800553a:	7dfb      	ldrb	r3, [r7, #23]
 800553c:	7db9      	ldrb	r1, [r7, #22]
 800553e:	fb01 f303 	mul.w	r3, r1, r3
 8005542:	4413      	add	r3, r2
 8005544:	2b00      	cmp	r3, #0
 8005546:	dd3e      	ble.n	80055c6 <AT24Cxx_write_byte_buffer+0x148>
			(mem_addr + page_remaining + (current_page * page_size)) < AT24Cxx_get_max_addr(dev)){
 8005548:	88fa      	ldrh	r2, [r7, #6]
 800554a:	7d7b      	ldrb	r3, [r7, #21]
 800554c:	441a      	add	r2, r3
 800554e:	7dfb      	ldrb	r3, [r7, #23]
 8005550:	7db9      	ldrb	r1, [r7, #22]
 8005552:	fb01 f303 	mul.w	r3, r1, r3
 8005556:	18d4      	adds	r4, r2, r3
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f7ff fe9f 	bl	800529c <AT24Cxx_get_max_addr>
 800555e:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8005560:	429c      	cmp	r4, r3
 8005562:	da30      	bge.n	80055c6 <AT24Cxx_write_byte_buffer+0x148>

				while(HAL_I2C_Mem_Write(dev->dev_port,
 8005564:	bf00      	nop
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6818      	ldr	r0, [r3, #0]
					AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	88db      	ldrh	r3, [r3, #6]
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	b21b      	sxth	r3, r3
 8005572:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005576:	b21b      	sxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8005578:	b29c      	uxth	r4, r3
					(uint16_t) mem_addr + page_remaining + (current_page * page_size),
 800557a:	7d7b      	ldrb	r3, [r7, #21]
 800557c:	b29a      	uxth	r2, r3
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	4413      	add	r3, r2
 8005582:	b29a      	uxth	r2, r3
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	b29b      	uxth	r3, r3
 8005588:	7db9      	ldrb	r1, [r7, #22]
 800558a:	b289      	uxth	r1, r1
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	b29b      	uxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8005592:	4413      	add	r3, r2
 8005594:	b29d      	uxth	r5, r3
					I2C_MEMADD_SIZE_16BIT,
					data_buf + page_remaining + (current_page * page_size),
 8005596:	7d7b      	ldrb	r3, [r7, #21]
 8005598:	7dfa      	ldrb	r2, [r7, #23]
 800559a:	7db9      	ldrb	r1, [r7, #22]
 800559c:	fb01 f202 	mul.w	r2, r1, r2
 80055a0:	4413      	add	r3, r2
				while(HAL_I2C_Mem_Write(dev->dev_port,
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	4413      	add	r3, r2
 80055a6:	7dba      	ldrb	r2, [r7, #22]
 80055a8:	b292      	uxth	r2, r2
 80055aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80055ae:	9102      	str	r1, [sp, #8]
 80055b0:	9201      	str	r2, [sp, #4]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	2310      	movs	r3, #16
 80055b6:	462a      	mov	r2, r5
 80055b8:	4621      	mov	r1, r4
 80055ba:	f002 fd7b 	bl	80080b4 <HAL_I2C_Mem_Write>
 80055be:	4603      	mov	r3, r0
					page_size,
					AT24Cxx_I2C_TIMOUT) != HAL_OK);
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1d0      	bne.n	8005566 <AT24Cxx_write_byte_buffer+0xe8>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 80055c4:	e002      	b.n	80055cc <AT24Cxx_write_byte_buffer+0x14e>
		}else return at_w_bytes_err;
 80055c6:	f06f 0304 	mvn.w	r3, #4
 80055ca:	e056      	b.n	800567a <AT24Cxx_write_byte_buffer+0x1fc>
	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
 80055ce:	3301      	adds	r3, #1
 80055d0:	75fb      	strb	r3, [r7, #23]
 80055d2:	7dfa      	ldrb	r2, [r7, #23]
 80055d4:	7d3b      	ldrb	r3, [r7, #20]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d3ac      	bcc.n	8005534 <AT24Cxx_write_byte_buffer+0xb6>
	}

	if(remainder_writes){
 80055da:	7cfb      	ldrb	r3, [r7, #19]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d04b      	beq.n	8005678 <AT24Cxx_write_byte_buffer+0x1fa>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 80055e0:	88fa      	ldrh	r2, [r7, #6]
 80055e2:	7d7b      	ldrb	r3, [r7, #21]
 80055e4:	441a      	add	r2, r3
 80055e6:	7d3b      	ldrb	r3, [r7, #20]
 80055e8:	7db9      	ldrb	r1, [r7, #22]
 80055ea:	fb01 f303 	mul.w	r3, r1, r3
 80055ee:	4413      	add	r3, r2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	dd3e      	ble.n	8005672 <AT24Cxx_write_byte_buffer+0x1f4>
			(mem_addr + page_remaining + (page_writes * page_size)) < AT24Cxx_get_max_addr(dev)){
 80055f4:	88fa      	ldrh	r2, [r7, #6]
 80055f6:	7d7b      	ldrb	r3, [r7, #21]
 80055f8:	441a      	add	r2, r3
 80055fa:	7d3b      	ldrb	r3, [r7, #20]
 80055fc:	7db9      	ldrb	r1, [r7, #22]
 80055fe:	fb01 f303 	mul.w	r3, r1, r3
 8005602:	18d4      	adds	r4, r2, r3
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7ff fe49 	bl	800529c <AT24Cxx_get_max_addr>
 800560a:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 800560c:	429c      	cmp	r4, r3
 800560e:	da30      	bge.n	8005672 <AT24Cxx_write_byte_buffer+0x1f4>

			while(HAL_I2C_Mem_Write(dev->dev_port,
 8005610:	bf00      	nop
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	88db      	ldrh	r3, [r3, #6]
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	b21b      	sxth	r3, r3
 800561e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005622:	b21b      	sxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8005624:	b29c      	uxth	r4, r3
				(uint16_t) mem_addr + page_remaining + (page_writes * page_size),
 8005626:	7d7b      	ldrb	r3, [r7, #21]
 8005628:	b29a      	uxth	r2, r3
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	4413      	add	r3, r2
 800562e:	b29a      	uxth	r2, r3
 8005630:	7d3b      	ldrb	r3, [r7, #20]
 8005632:	b29b      	uxth	r3, r3
 8005634:	7db9      	ldrb	r1, [r7, #22]
 8005636:	b289      	uxth	r1, r1
 8005638:	fb01 f303 	mul.w	r3, r1, r3
 800563c:	b29b      	uxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 800563e:	4413      	add	r3, r2
 8005640:	b29d      	uxth	r5, r3
				I2C_MEMADD_SIZE_16BIT,
				data_buf + page_remaining + (page_writes * page_size),
 8005642:	7d7b      	ldrb	r3, [r7, #21]
 8005644:	7d3a      	ldrb	r2, [r7, #20]
 8005646:	7db9      	ldrb	r1, [r7, #22]
 8005648:	fb01 f202 	mul.w	r2, r1, r2
 800564c:	4413      	add	r3, r2
			while(HAL_I2C_Mem_Write(dev->dev_port,
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	4413      	add	r3, r2
 8005652:	7cfa      	ldrb	r2, [r7, #19]
 8005654:	b292      	uxth	r2, r2
 8005656:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800565a:	9102      	str	r1, [sp, #8]
 800565c:	9201      	str	r2, [sp, #4]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	2310      	movs	r3, #16
 8005662:	462a      	mov	r2, r5
 8005664:	4621      	mov	r1, r4
 8005666:	f002 fd25 	bl	80080b4 <HAL_I2C_Mem_Write>
 800566a:	4603      	mov	r3, r0
				remainder_writes,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1d0      	bne.n	8005612 <AT24Cxx_write_byte_buffer+0x194>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8005670:	e002      	b.n	8005678 <AT24Cxx_write_byte_buffer+0x1fa>
		}else return at_w_bytes_err;
 8005672:	f06f 0304 	mvn.w	r3, #4
 8005676:	e000      	b.n	800567a <AT24Cxx_write_byte_buffer+0x1fc>
	}

	return at_ok;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bdb0      	pop	{r4, r5, r7, pc}

08005682 <AT24Cxx_read_byte_buffer>:
	return at_r_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_read_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b088      	sub	sp, #32
 8005686:	af04      	add	r7, sp, #16
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	4611      	mov	r1, r2
 800568e:	461a      	mov	r2, r3
 8005690:	460b      	mov	r3, r1
 8005692:	80fb      	strh	r3, [r7, #6]
 8005694:	4613      	mov	r3, r2
 8005696:	80bb      	strh	r3, [r7, #4]
	if(mem_addr > 0x00 && mem_addr < AT24Cxx_get_max_addr(dev)){
 8005698:	88fb      	ldrh	r3, [r7, #6]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d022      	beq.n	80056e4 <AT24Cxx_read_byte_buffer+0x62>
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f7ff fdfc 	bl	800529c <AT24Cxx_get_max_addr>
 80056a4:	4603      	mov	r3, r0
 80056a6:	461a      	mov	r2, r3
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d21a      	bcs.n	80056e4 <AT24Cxx_read_byte_buffer+0x62>
		while(HAL_I2C_Mem_Read(dev->dev_port,
 80056ae:	bf00      	nop
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_R | (dev->dev_addr << 1) ,
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	88db      	ldrh	r3, [r3, #6]
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	b21b      	sxth	r3, r3
 80056bc:	f043 03a1 	orr.w	r3, r3, #161	@ 0xa1
 80056c0:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Read(dev->dev_port,
 80056c2:	b299      	uxth	r1, r3
 80056c4:	88fa      	ldrh	r2, [r7, #6]
 80056c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80056ca:	9302      	str	r3, [sp, #8]
 80056cc:	88bb      	ldrh	r3, [r7, #4]
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	2310      	movs	r3, #16
 80056d6:	f002 fde7 	bl	80082a8 <HAL_I2C_Mem_Read>
 80056da:	4603      	mov	r3, r0
				(uint16_t) mem_addr, I2C_MEMADD_SIZE_16BIT, data_buf, buf_length,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e7      	bne.n	80056b0 <AT24Cxx_read_byte_buffer+0x2e>
		return at_ok;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e001      	b.n	80056e8 <AT24Cxx_read_byte_buffer+0x66>
	}
	return at_r_bytes_err;
 80056e4:	f06f 0306 	mvn.w	r3, #6
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static int constrain(int amt, int low, int high)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	429a      	cmp	r2, r3
 8005702:	da01      	bge.n	8005708 <constrain+0x18>
        return low;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	e006      	b.n	8005716 <constrain+0x26>
    else if (amt > high)
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	429a      	cmp	r2, r3
 800570e:	dd01      	ble.n	8005714 <constrain+0x24>
        return high;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	e000      	b.n	8005716 <constrain+0x26>
    else
        return amt;
 8005714:	68fb      	ldr	r3, [r7, #12]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr

08005720 <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
    if (amt < low)
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f7fb fd2e 	bl	8001190 <__aeabi_fcmplt>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <constrainf+0x1e>
        return low;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	e009      	b.n	8005752 <constrainf+0x32>
    else if (amt > high)
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7fb fd43 	bl	80011cc <__aeabi_fcmpgt>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <constrainf+0x30>
        return high;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	e000      	b.n	8005752 <constrainf+0x32>
    else
        return amt;
 8005750:	68fb      	ldr	r3, [r7, #12]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
    float RC = 1 / (2 * M_PIf * f_cut);
 8005766:	490d      	ldr	r1, [pc, #52]	@ (800579c <pt1FilterGain+0x40>)
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7fb fb73 	bl	8000e54 <__aeabi_fmul>
 800576e:	4603      	mov	r3, r0
 8005770:	4619      	mov	r1, r3
 8005772:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005776:	f7fb fc21 	bl	8000fbc <__aeabi_fdiv>
 800577a:	4603      	mov	r3, r0
 800577c:	60fb      	str	r3, [r7, #12]
    return dT/ (RC + dT);
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7fb fa5f 	bl	8000c44 <__addsf3>
 8005786:	4603      	mov	r3, r0
 8005788:	4619      	mov	r1, r3
 800578a:	6838      	ldr	r0, [r7, #0]
 800578c:	f7fb fc16 	bl	8000fbc <__aeabi_fdiv>
 8005790:	4603      	mov	r3, r0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40c90fdb 	.word	0x40c90fdb

080057a0 <attitude_ctrl_init>:

float ab_speed_filted;

float v_estimate;

void attitude_ctrl_init(){
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af02      	add	r7, sp, #8

   speed_filter_reset = TRUE;
 80057a6:	4b2d      	ldr	r3, [pc, #180]	@ (800585c <attitude_ctrl_init+0xbc>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	701a      	strb	r2, [r3, #0]
   ab_speed_filted = 0.0f;
 80057ac:	4b2c      	ldr	r3, [pc, #176]	@ (8005860 <attitude_ctrl_init+0xc0>)
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
   // init pid 
   pid_init(&roll_angle_pid,4,0,0,F_CUT_OFF,100);
 80057b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005864 <attitude_ctrl_init+0xc4>)
 80057b6:	9301      	str	r3, [sp, #4]
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80057ca:	4827      	ldr	r0, [pc, #156]	@ (8005868 <attitude_ctrl_init+0xc8>)
 80057cc:	f7fe f887 	bl	80038de <pid_init>
   pid_init(&roll_rate_pid,1.8,2.5,0,F_CUT_OFF,130);
 80057d0:	4b26      	ldr	r3, [pc, #152]	@ (800586c <attitude_ctrl_init+0xcc>)
 80057d2:	9301      	str	r3, [sp, #4]
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	4a24      	ldr	r2, [pc, #144]	@ (8005870 <attitude_ctrl_init+0xd0>)
 80057e0:	4924      	ldr	r1, [pc, #144]	@ (8005874 <attitude_ctrl_init+0xd4>)
 80057e2:	4825      	ldr	r0, [pc, #148]	@ (8005878 <attitude_ctrl_init+0xd8>)
 80057e4:	f7fe f87b 	bl	80038de <pid_init>

   pid_init(&pitch_angle_pid,25,0,0,F_CUT_OFF,100);
 80057e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005864 <attitude_ctrl_init+0xc4>)
 80057ea:	9301      	str	r3, [sp, #4]
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	4920      	ldr	r1, [pc, #128]	@ (800587c <attitude_ctrl_init+0xdc>)
 80057fc:	4820      	ldr	r0, [pc, #128]	@ (8005880 <attitude_ctrl_init+0xe0>)
 80057fe:	f7fe f86e 	bl	80038de <pid_init>
   pid_init(&pitch_rate_pid,4,2.5,0,F_CUT_OFF,130);
 8005802:	4b1a      	ldr	r3, [pc, #104]	@ (800586c <attitude_ctrl_init+0xcc>)
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	4a17      	ldr	r2, [pc, #92]	@ (8005870 <attitude_ctrl_init+0xd0>)
 8005812:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8005816:	481b      	ldr	r0, [pc, #108]	@ (8005884 <attitude_ctrl_init+0xe4>)
 8005818:	f7fe f861 	bl	80038de <pid_init>

   // rate 
   pid_init(&roll_rate_t,4,0,0,F_CUT_OFF,300);
 800581c:	4b1a      	ldr	r3, [pc, #104]	@ (8005888 <attitude_ctrl_init+0xe8>)
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	f04f 0300 	mov.w	r3, #0
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8005832:	4816      	ldr	r0, [pc, #88]	@ (800588c <attitude_ctrl_init+0xec>)
 8005834:	f7fe f853 	bl	80038de <pid_init>
   pid_init(&pitch_rate_t,4,0,0,F_CUT_OFF,300);
 8005838:	4b13      	ldr	r3, [pc, #76]	@ (8005888 <attitude_ctrl_init+0xe8>)
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	f04f 0300 	mov.w	r3, #0
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800584e:	4810      	ldr	r0, [pc, #64]	@ (8005890 <attitude_ctrl_init+0xf0>)
 8005850:	f7fe f845 	bl	80038de <pid_init>

}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20000b10 	.word	0x20000b10
 8005860:	20000c00 	.word	0x20000c00
 8005864:	42c80000 	.word	0x42c80000
 8005868:	20000b5c 	.word	0x20000b5c
 800586c:	43020000 	.word	0x43020000
 8005870:	40200000 	.word	0x40200000
 8005874:	3fe66666 	.word	0x3fe66666
 8005878:	20000b14 	.word	0x20000b14
 800587c:	41c80000 	.word	0x41c80000
 8005880:	20000b80 	.word	0x20000b80
 8005884:	20000b38 	.word	0x20000b38
 8005888:	43960000 	.word	0x43960000
 800588c:	20000ba4 	.word	0x20000ba4
 8005890:	20000bc8 	.word	0x20000bc8
 8005894:	00000000 	.word	0x00000000

08005898 <attitude_ctrl>:

void attitude_ctrl(float dt){ 
 8005898:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800589c:	b09a      	sub	sp, #104	@ 0x68
 800589e:	af02      	add	r7, sp, #8
 80058a0:	6078      	str	r0, [r7, #4]
    if(dt < 0 || dt > MAX_WAIT_TIME){
 80058a2:	f04f 0100 	mov.w	r1, #0
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fb fc72 	bl	8001190 <__aeabi_fcmplt>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f040 8381 	bne.w	8005fb6 <attitude_ctrl+0x71e>
 80058b4:	4973      	ldr	r1, [pc, #460]	@ (8005a84 <attitude_ctrl+0x1ec>)
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fb fc88 	bl	80011cc <__aeabi_fcmpgt>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f040 8379 	bne.w	8005fb6 <attitude_ctrl+0x71e>
        return;
    }
    uint16_t servoL,servoR;

    float roll_rate_measurement = AHRS.roll_rate;
 80058c4:	4b70      	ldr	r3, [pc, #448]	@ (8005a88 <attitude_ctrl+0x1f0>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	65bb      	str	r3, [r7, #88]	@ 0x58
    float pitch_rate_measurement = AHRS.pitch_rate;
 80058ca:	4b6f      	ldr	r3, [pc, #444]	@ (8005a88 <attitude_ctrl+0x1f0>)
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	657b      	str	r3, [r7, #84]	@ 0x54

    float roll_measurement = AHRS.roll;
 80058d0:	4b6d      	ldr	r3, [pc, #436]	@ (8005a88 <attitude_ctrl+0x1f0>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	653b      	str	r3, [r7, #80]	@ 0x50
    float pitch_measurement = AHRS.pitch;
 80058d6:	4b6c      	ldr	r3, [pc, #432]	@ (8005a88 <attitude_ctrl+0x1f0>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	64fb      	str	r3, [r7, #76]	@ 0x4c

    static float roll_pid_smooth = 0.0f;
    static float pitch_pid_smooth = 0.0f;


    roll_desired = ((int)ibusChannelData[0] - 1500)*0.1f;
 80058dc:	4b6b      	ldr	r3, [pc, #428]	@ (8005a8c <attitude_ctrl+0x1f4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fb fa61 	bl	8000dac <__aeabi_i2f>
 80058ea:	4603      	mov	r3, r0
 80058ec:	4965      	ldr	r1, [pc, #404]	@ (8005a84 <attitude_ctrl+0x1ec>)
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fb fab0 	bl	8000e54 <__aeabi_fmul>
 80058f4:	4603      	mov	r3, r0
 80058f6:	461a      	mov	r2, r3
 80058f8:	4b65      	ldr	r3, [pc, #404]	@ (8005a90 <attitude_ctrl+0x1f8>)
 80058fa:	601a      	str	r2, [r3, #0]
	pitch_desired = ((int)ibusChannelData[1] - 1500)*-0.15f;
 80058fc:	4b63      	ldr	r3, [pc, #396]	@ (8005a8c <attitude_ctrl+0x1f4>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005904:	4618      	mov	r0, r3
 8005906:	f7fb fa51 	bl	8000dac <__aeabi_i2f>
 800590a:	4603      	mov	r3, r0
 800590c:	4961      	ldr	r1, [pc, #388]	@ (8005a94 <attitude_ctrl+0x1fc>)
 800590e:	4618      	mov	r0, r3
 8005910:	f7fb faa0 	bl	8000e54 <__aeabi_fmul>
 8005914:	4603      	mov	r3, r0
 8005916:	461a      	mov	r2, r3
 8005918:	4b5f      	ldr	r3, [pc, #380]	@ (8005a98 <attitude_ctrl+0x200>)
 800591a:	601a      	str	r2, [r3, #0]

    v_estimate = dynamic_speed_esitmate(dt);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fb67 	bl	8005ff0 <dynamic_speed_esitmate>
 8005922:	4603      	mov	r3, r0
 8005924:	4a5d      	ldr	r2, [pc, #372]	@ (8005a9c <attitude_ctrl+0x204>)
 8005926:	6013      	str	r3, [r2, #0]
    if(v_estimate < 0)
 8005928:	4b5c      	ldr	r3, [pc, #368]	@ (8005a9c <attitude_ctrl+0x204>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f04f 0100 	mov.w	r1, #0
 8005930:	4618      	mov	r0, r3
 8005932:	f7fb fc2d 	bl	8001190 <__aeabi_fcmplt>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <attitude_ctrl+0xac>
    	v_estimate = 0;
 800593c:	4b57      	ldr	r3, [pc, #348]	@ (8005a9c <attitude_ctrl+0x204>)
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	601a      	str	r2, [r3, #0]

    // pid scale with velocity
	float pid_velo_scale;
    if(_gps.fix > 1){
 8005944:	4b56      	ldr	r3, [pc, #344]	@ (8005aa0 <attitude_ctrl+0x208>)
 8005946:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800594a:	2b01      	cmp	r3, #1
 800594c:	f240 808d 	bls.w	8005a6a <attitude_ctrl+0x1d2>
        float vn = (float)_gps.velocity[0]/100;  // m
 8005950:	4b53      	ldr	r3, [pc, #332]	@ (8005aa0 <attitude_ctrl+0x208>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	4618      	mov	r0, r3
 8005956:	f7fb fa29 	bl	8000dac <__aeabi_i2f>
 800595a:	4603      	mov	r3, r0
 800595c:	4951      	ldr	r1, [pc, #324]	@ (8005aa4 <attitude_ctrl+0x20c>)
 800595e:	4618      	mov	r0, r3
 8005960:	f7fb fb2c 	bl	8000fbc <__aeabi_fdiv>
 8005964:	4603      	mov	r3, r0
 8005966:	647b      	str	r3, [r7, #68]	@ 0x44
        float ve = (float)_gps.velocity[1]/100;  // m
 8005968:	4b4d      	ldr	r3, [pc, #308]	@ (8005aa0 <attitude_ctrl+0x208>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4618      	mov	r0, r3
 800596e:	f7fb fa1d 	bl	8000dac <__aeabi_i2f>
 8005972:	4603      	mov	r3, r0
 8005974:	494b      	ldr	r1, [pc, #300]	@ (8005aa4 <attitude_ctrl+0x20c>)
 8005976:	4618      	mov	r0, r3
 8005978:	f7fb fb20 	bl	8000fbc <__aeabi_fdiv>
 800597c:	4603      	mov	r3, r0
 800597e:	643b      	str	r3, [r7, #64]	@ 0x40
        float vd = (float)_gps.velocity[2]/100;  // m
 8005980:	4b47      	ldr	r3, [pc, #284]	@ (8005aa0 <attitude_ctrl+0x208>)
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	4618      	mov	r0, r3
 8005986:	f7fb fa11 	bl	8000dac <__aeabi_i2f>
 800598a:	4603      	mov	r3, r0
 800598c:	4945      	ldr	r1, [pc, #276]	@ (8005aa4 <attitude_ctrl+0x20c>)
 800598e:	4618      	mov	r0, r3
 8005990:	f7fb fb14 	bl	8000fbc <__aeabi_fdiv>
 8005994:	4603      	mov	r3, r0
 8005996:	63fb      	str	r3, [r7, #60]	@ 0x3c

        float absolute_velocity = sqrtf(sq(vn) + sq(ve) + sq(vd));
 8005998:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800599a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800599c:	f7fb fa5a 	bl	8000e54 <__aeabi_fmul>
 80059a0:	4603      	mov	r3, r0
 80059a2:	461c      	mov	r4, r3
 80059a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059a6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80059a8:	f7fb fa54 	bl	8000e54 <__aeabi_fmul>
 80059ac:	4603      	mov	r3, r0
 80059ae:	4619      	mov	r1, r3
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7fb f947 	bl	8000c44 <__addsf3>
 80059b6:	4603      	mov	r3, r0
 80059b8:	461c      	mov	r4, r3
 80059ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059bc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80059be:	f7fb fa49 	bl	8000e54 <__aeabi_fmul>
 80059c2:	4603      	mov	r3, r0
 80059c4:	4619      	mov	r1, r3
 80059c6:	4620      	mov	r0, r4
 80059c8:	f7fb f93c 	bl	8000c44 <__addsf3>
 80059cc:	4603      	mov	r3, r0
 80059ce:	4618      	mov	r0, r3
 80059d0:	f00e fa6c 	bl	8013eac <sqrtf>
 80059d4:	63b8      	str	r0, [r7, #56]	@ 0x38
        absolute_velocity = constrainf(absolute_velocity,0,MAX_SPEED); 
 80059d6:	4a34      	ldr	r2, [pc, #208]	@ (8005aa8 <attitude_ctrl+0x210>)
 80059d8:	f04f 0100 	mov.w	r1, #0
 80059dc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80059de:	f7ff fe9f 	bl	8005720 <constrainf>
 80059e2:	63b8      	str	r0, [r7, #56]	@ 0x38
        if(speed_filter_reset){
 80059e4:	4b31      	ldr	r3, [pc, #196]	@ (8005aac <attitude_ctrl+0x214>)
 80059e6:	f993 3000 	ldrsb.w	r3, [r3]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <attitude_ctrl+0x162>
            ab_speed_filted = absolute_velocity;
 80059ee:	4a30      	ldr	r2, [pc, #192]	@ (8005ab0 <attitude_ctrl+0x218>)
 80059f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f2:	6013      	str	r3, [r2, #0]
            speed_filter_reset = FALSE;
 80059f4:	4b2d      	ldr	r3, [pc, #180]	@ (8005aac <attitude_ctrl+0x214>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	701a      	strb	r2, [r3, #0]
        }
        ab_speed_filted += pt1FilterGain(10,dt)*(absolute_velocity - ab_speed_filted);
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	482d      	ldr	r0, [pc, #180]	@ (8005ab4 <attitude_ctrl+0x21c>)
 80059fe:	f7ff fead 	bl	800575c <pt1FilterGain>
 8005a02:	4604      	mov	r4, r0
 8005a04:	4b2a      	ldr	r3, [pc, #168]	@ (8005ab0 <attitude_ctrl+0x218>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a0c:	f7fb f918 	bl	8000c40 <__aeabi_fsub>
 8005a10:	4603      	mov	r3, r0
 8005a12:	4619      	mov	r1, r3
 8005a14:	4620      	mov	r0, r4
 8005a16:	f7fb fa1d 	bl	8000e54 <__aeabi_fmul>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4b24      	ldr	r3, [pc, #144]	@ (8005ab0 <attitude_ctrl+0x218>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4619      	mov	r1, r3
 8005a24:	4610      	mov	r0, r2
 8005a26:	f7fb f90d 	bl	8000c44 <__addsf3>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4b20      	ldr	r3, [pc, #128]	@ (8005ab0 <attitude_ctrl+0x218>)
 8005a30:	601a      	str	r2, [r3, #0]
        pid_velo_scale = 1.0/(1 + sq(ab_speed_filted)*0.001f);
 8005a32:	4b1f      	ldr	r3, [pc, #124]	@ (8005ab0 <attitude_ctrl+0x218>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a1e      	ldr	r2, [pc, #120]	@ (8005ab0 <attitude_ctrl+0x218>)
 8005a38:	6812      	ldr	r2, [r2, #0]
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fb fa09 	bl	8000e54 <__aeabi_fmul>
 8005a42:	4603      	mov	r3, r0
 8005a44:	491c      	ldr	r1, [pc, #112]	@ (8005ab8 <attitude_ctrl+0x220>)
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fb fa04 	bl	8000e54 <__aeabi_fmul>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fb f8f6 	bl	8000c44 <__addsf3>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005a60:	f7fb faac 	bl	8000fbc <__aeabi_fdiv>
 8005a64:	4603      	mov	r3, r0
 8005a66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a68:	e02b      	b.n	8005ac2 <attitude_ctrl+0x22a>
    }
    else{
        speed_filter_reset = TRUE;
 8005a6a:	4b10      	ldr	r3, [pc, #64]	@ (8005aac <attitude_ctrl+0x214>)
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	701a      	strb	r2, [r3, #0]

    	if(ibusChannelData[CH6] > CHANNEL_HIGH){
 8005a70:	4b06      	ldr	r3, [pc, #24]	@ (8005a8c <attitude_ctrl+0x1f4>)
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d91f      	bls.n	8005abc <attitude_ctrl+0x224>
    		pid_velo_scale = 1;
 8005a7c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005a80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a82:	e01e      	b.n	8005ac2 <attitude_ctrl+0x22a>
 8005a84:	3dcccccd 	.word	0x3dcccccd
 8005a88:	200004c8 	.word	0x200004c8
 8005a8c:	200000d0 	.word	0x200000d0
 8005a90:	20000b08 	.word	0x20000b08
 8005a94:	be19999a 	.word	0xbe19999a
 8005a98:	20000b0c 	.word	0x20000b0c
 8005a9c:	20000c04 	.word	0x20000c04
 8005aa0:	200003a0 	.word	0x200003a0
 8005aa4:	42c80000 	.word	0x42c80000
 8005aa8:	41f00000 	.word	0x41f00000
 8005aac:	20000b10 	.word	0x20000b10
 8005ab0:	20000c00 	.word	0x20000c00
 8005ab4:	41200000 	.word	0x41200000
 8005ab8:	3a83126f 	.word	0x3a83126f
    	}else{
    		pid_velo_scale = 0.5f;
 8005abc:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8005ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
    	}
    }
    float v_ = constrainf(v_estimate - 15,0,15);
 8005ac2:	4b9c      	ldr	r3, [pc, #624]	@ (8005d34 <attitude_ctrl+0x49c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	499c      	ldr	r1, [pc, #624]	@ (8005d38 <attitude_ctrl+0x4a0>)
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fb f8b9 	bl	8000c40 <__aeabi_fsub>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4a99      	ldr	r2, [pc, #612]	@ (8005d38 <attitude_ctrl+0x4a0>)
 8005ad2:	f04f 0100 	mov.w	r1, #0
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff fe22 	bl	8005720 <constrainf>
 8005adc:	6378      	str	r0, [r7, #52]	@ 0x34
	pid_velo_scale = 15.0f/(15.0f + sq(v_)*0.07f);
 8005ade:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005ae0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005ae2:	f7fb f9b7 	bl	8000e54 <__aeabi_fmul>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	4994      	ldr	r1, [pc, #592]	@ (8005d3c <attitude_ctrl+0x4a4>)
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fb f9b2 	bl	8000e54 <__aeabi_fmul>
 8005af0:	4603      	mov	r3, r0
 8005af2:	4991      	ldr	r1, [pc, #580]	@ (8005d38 <attitude_ctrl+0x4a0>)
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fb f8a5 	bl	8000c44 <__addsf3>
 8005afa:	4603      	mov	r3, r0
 8005afc:	4619      	mov	r1, r3
 8005afe:	488e      	ldr	r0, [pc, #568]	@ (8005d38 <attitude_ctrl+0x4a0>)
 8005b00:	f7fb fa5c 	bl	8000fbc <__aeabi_fdiv>
 8005b04:	4603      	mov	r3, r0
 8005b06:	64bb      	str	r3, [r7, #72]	@ 0x48

    const float pid_roll_vel_scale = constrainf(pid_velo_scale,0.5f,1.0f);
 8005b08:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005b0c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005b10:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8005b12:	f7ff fe05 	bl	8005720 <constrainf>
 8005b16:	6338      	str	r0, [r7, #48]	@ 0x30
    const float pid_pitch_vel_scale = constrainf(pid_velo_scale,0.5f,1.0f);
 8005b18:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005b1c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005b20:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8005b22:	f7ff fdfd 	bl	8005720 <constrainf>
 8005b26:	62f8      	str	r0, [r7, #44]	@ 0x2c


    // stablize mode
    if(ibusChannelData[CH5] > CHANNEL_HIGH ){
 8005b28:	4b85      	ldr	r3, [pc, #532]	@ (8005d40 <attitude_ctrl+0x4a8>)
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8005b30:	4293      	cmp	r3, r2
 8005b32:	f240 8195 	bls.w	8005e60 <attitude_ctrl+0x5c8>
    	if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 8005b36:	4b82      	ldr	r3, [pc, #520]	@ (8005d40 <attitude_ctrl+0x4a8>)
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d920      	bls.n	8005b84 <attitude_ctrl+0x2ec>
			roll_pid_rc_gain = ((int)ibusChannelData[CH7] - 1000)*0.002f;
 8005b42:	4b7f      	ldr	r3, [pc, #508]	@ (8005d40 <attitude_ctrl+0x4a8>)
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fb f92e 	bl	8000dac <__aeabi_i2f>
 8005b50:	4603      	mov	r3, r0
 8005b52:	497c      	ldr	r1, [pc, #496]	@ (8005d44 <attitude_ctrl+0x4ac>)
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fb f97d 	bl	8000e54 <__aeabi_fmul>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4b7a      	ldr	r3, [pc, #488]	@ (8005d48 <attitude_ctrl+0x4b0>)
 8005b60:	601a      	str	r2, [r3, #0]
			roll_trim = ((int)ibusChannelData[CH8] - 1500)*-0.1f;
 8005b62:	4b77      	ldr	r3, [pc, #476]	@ (8005d40 <attitude_ctrl+0x4a8>)
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fb f91e 	bl	8000dac <__aeabi_i2f>
 8005b70:	4603      	mov	r3, r0
 8005b72:	4976      	ldr	r1, [pc, #472]	@ (8005d4c <attitude_ctrl+0x4b4>)
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fb f96d 	bl	8000e54 <__aeabi_fmul>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	4b74      	ldr	r3, [pc, #464]	@ (8005d50 <attitude_ctrl+0x4b8>)
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	e01f      	b.n	8005bc4 <attitude_ctrl+0x32c>
		}else{
			pitch_pid_rc_gain = ((int)ibusChannelData[CH7] - 1000)*0.002f;
 8005b84:	4b6e      	ldr	r3, [pc, #440]	@ (8005d40 <attitude_ctrl+0x4a8>)
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fb f90d 	bl	8000dac <__aeabi_i2f>
 8005b92:	4603      	mov	r3, r0
 8005b94:	496b      	ldr	r1, [pc, #428]	@ (8005d44 <attitude_ctrl+0x4ac>)
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fb f95c 	bl	8000e54 <__aeabi_fmul>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8005d54 <attitude_ctrl+0x4bc>)
 8005ba2:	601a      	str	r2, [r3, #0]
			pitch_trim = ((int)ibusChannelData[CH8] - 1500)*-0.1f;
 8005ba4:	4b66      	ldr	r3, [pc, #408]	@ (8005d40 <attitude_ctrl+0x4a8>)
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fb f8fd 	bl	8000dac <__aeabi_i2f>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	4965      	ldr	r1, [pc, #404]	@ (8005d4c <attitude_ctrl+0x4b4>)
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fb f94c 	bl	8000e54 <__aeabi_fmul>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	4b65      	ldr	r3, [pc, #404]	@ (8005d58 <attitude_ctrl+0x4c0>)
 8005bc2:	601a      	str	r2, [r3, #0]
		}
        
        // roll axis
        float roll_rate_desired =  pid_calculate(&roll_angle_pid,roll_measurement,roll_desired + roll_trim,1.0f,dt);
 8005bc4:	4b65      	ldr	r3, [pc, #404]	@ (8005d5c <attitude_ctrl+0x4c4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a61      	ldr	r2, [pc, #388]	@ (8005d50 <attitude_ctrl+0x4b8>)
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fb f838 	bl	8000c44 <__addsf3>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005be0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005be2:	485f      	ldr	r0, [pc, #380]	@ (8005d60 <attitude_ctrl+0x4c8>)
 8005be4:	f7fd fea6 	bl	8003934 <pid_calculate>
 8005be8:	6238      	str	r0, [r7, #32]
        roll_rate_desired = constrainf(roll_rate_desired,-ROLL_RATE_LIMIT,ROLL_RATE_LIMIT);
 8005bea:	4a5e      	ldr	r2, [pc, #376]	@ (8005d64 <attitude_ctrl+0x4cc>)
 8005bec:	495e      	ldr	r1, [pc, #376]	@ (8005d68 <attitude_ctrl+0x4d0>)
 8005bee:	6a38      	ldr	r0, [r7, #32]
 8005bf0:	f7ff fd96 	bl	8005720 <constrainf>
 8005bf4:	6238      	str	r0, [r7, #32]
        float r_rate_pid  =  pid_calculate(&roll_rate_pid, roll_rate_measurement,roll_rate_desired,pid_roll_vel_scale,dt);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	6a3a      	ldr	r2, [r7, #32]
 8005bfe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005c00:	485a      	ldr	r0, [pc, #360]	@ (8005d6c <attitude_ctrl+0x4d4>)
 8005c02:	f7fd fe97 	bl	8003934 <pid_calculate>
 8005c06:	61f8      	str	r0, [r7, #28]
        //float FF_roll = roll_rate_desired*ff_roll_gain;
        //r_rate_pid = r_rate_pid + FF_roll;
        roll_pid_smooth += pt1FilterGain(4,dt)*(r_rate_pid - roll_pid_smooth);
 8005c08:	6879      	ldr	r1, [r7, #4]
 8005c0a:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8005c0e:	f7ff fda5 	bl	800575c <pt1FilterGain>
 8005c12:	4604      	mov	r4, r0
 8005c14:	4b56      	ldr	r3, [pc, #344]	@ (8005d70 <attitude_ctrl+0x4d8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	69f8      	ldr	r0, [r7, #28]
 8005c1c:	f7fb f810 	bl	8000c40 <__aeabi_fsub>
 8005c20:	4603      	mov	r3, r0
 8005c22:	4619      	mov	r1, r3
 8005c24:	4620      	mov	r0, r4
 8005c26:	f7fb f915 	bl	8000e54 <__aeabi_fmul>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	4b50      	ldr	r3, [pc, #320]	@ (8005d70 <attitude_ctrl+0x4d8>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4619      	mov	r1, r3
 8005c34:	4610      	mov	r0, r2
 8005c36:	f7fb f805 	bl	8000c44 <__addsf3>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4b4c      	ldr	r3, [pc, #304]	@ (8005d70 <attitude_ctrl+0x4d8>)
 8005c40:	601a      	str	r2, [r3, #0]
        //pitch axiss
        float pitcj_rate_desired =  pid_calculate(&pitch_angle_pid,pitch_measurement,pitch_desired + pitch_trim,0.1f,dt);
 8005c42:	4b4c      	ldr	r3, [pc, #304]	@ (8005d74 <attitude_ctrl+0x4dc>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a44      	ldr	r2, [pc, #272]	@ (8005d58 <attitude_ctrl+0x4c0>)
 8005c48:	6812      	ldr	r2, [r2, #0]
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fa fff9 	bl	8000c44 <__addsf3>
 8005c52:	4603      	mov	r3, r0
 8005c54:	461a      	mov	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	4b47      	ldr	r3, [pc, #284]	@ (8005d78 <attitude_ctrl+0x4e0>)
 8005c5c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005c5e:	4847      	ldr	r0, [pc, #284]	@ (8005d7c <attitude_ctrl+0x4e4>)
 8005c60:	f7fd fe68 	bl	8003934 <pid_calculate>
 8005c64:	61b8      	str	r0, [r7, #24]
        pitcj_rate_desired = constrainf(pitcj_rate_desired,-PITCH_RATE_LIMIT,PITCH_RATE_LIMIT);
 8005c66:	4a46      	ldr	r2, [pc, #280]	@ (8005d80 <attitude_ctrl+0x4e8>)
 8005c68:	4946      	ldr	r1, [pc, #280]	@ (8005d84 <attitude_ctrl+0x4ec>)
 8005c6a:	69b8      	ldr	r0, [r7, #24]
 8005c6c:	f7ff fd58 	bl	8005720 <constrainf>
 8005c70:	61b8      	str	r0, [r7, #24]
        float p_rate_pid  =  pid_calculate(&pitch_rate_pid, pitch_rate_measurement,pitcj_rate_desired,pid_pitch_vel_scale ,dt);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c7c:	4842      	ldr	r0, [pc, #264]	@ (8005d88 <attitude_ctrl+0x4f0>)
 8005c7e:	f7fd fe59 	bl	8003934 <pid_calculate>
 8005c82:	6178      	str	r0, [r7, #20]
        //float FF_pitch = pitcj_rate_desired*ff_pitch_gain;
        //p_rate_pid = p_rate_pid - FF_pitch;
        pitch_pid_smooth += pt1FilterGain(4,dt)*(p_rate_pid - pitch_pid_smooth);
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8005c8a:	f7ff fd67 	bl	800575c <pt1FilterGain>
 8005c8e:	4604      	mov	r4, r0
 8005c90:	4b3e      	ldr	r3, [pc, #248]	@ (8005d8c <attitude_ctrl+0x4f4>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4619      	mov	r1, r3
 8005c96:	6978      	ldr	r0, [r7, #20]
 8005c98:	f7fa ffd2 	bl	8000c40 <__aeabi_fsub>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f7fb f8d7 	bl	8000e54 <__aeabi_fmul>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4b38      	ldr	r3, [pc, #224]	@ (8005d8c <attitude_ctrl+0x4f4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f7fa ffc7 	bl	8000c44 <__addsf3>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	461a      	mov	r2, r3
 8005cba:	4b34      	ldr	r3, [pc, #208]	@ (8005d8c <attitude_ctrl+0x4f4>)
 8005cbc:	601a      	str	r2, [r3, #0]

        //r_rate_pid = r_rate_pid * roll_pid_rc_gain;
        //p_rate_pid = p_rate_pid * pid_pitch_vel_scale;// * pitch_pid_rc_gain;

		if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 8005cbe:	4b20      	ldr	r3, [pc, #128]	@ (8005d40 <attitude_ctrl+0x4a8>)
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d964      	bls.n	8005d94 <attitude_ctrl+0x4fc>
				int s1 = 1500 - ibusChannelData[CH2];
 8005cca:	4b1d      	ldr	r3, [pc, #116]	@ (8005d40 <attitude_ctrl+0x4a8>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	60fb      	str	r3, [r7, #12]

				servoL = 1500 - roll_pid_smooth - s1;// - pitch_pid_filted;
 8005cd6:	4b26      	ldr	r3, [pc, #152]	@ (8005d70 <attitude_ctrl+0x4d8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	482c      	ldr	r0, [pc, #176]	@ (8005d90 <attitude_ctrl+0x4f8>)
 8005cde:	f7fa ffaf 	bl	8000c40 <__aeabi_fsub>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	461c      	mov	r4, r3
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7fb f860 	bl	8000dac <__aeabi_i2f>
 8005cec:	4603      	mov	r3, r0
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f7fa ffa5 	bl	8000c40 <__aeabi_fsub>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fb faad 	bl	8001258 <__aeabi_f2uiz>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
				servoR = 1500 + roll_pid_smooth - s1;// - pitch_pid_filted;
 8005d04:	4b1a      	ldr	r3, [pc, #104]	@ (8005d70 <attitude_ctrl+0x4d8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4921      	ldr	r1, [pc, #132]	@ (8005d90 <attitude_ctrl+0x4f8>)
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fa ff9a 	bl	8000c44 <__addsf3>
 8005d10:	4603      	mov	r3, r0
 8005d12:	461c      	mov	r4, r3
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f7fb f849 	bl	8000dac <__aeabi_i2f>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f7fa ff8e 	bl	8000c40 <__aeabi_fsub>
 8005d24:	4603      	mov	r3, r0
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fb fa96 	bl	8001258 <__aeabi_f2uiz>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8005d32:	e085      	b.n	8005e40 <attitude_ctrl+0x5a8>
 8005d34:	20000c04 	.word	0x20000c04
 8005d38:	41700000 	.word	0x41700000
 8005d3c:	3d8f5c29 	.word	0x3d8f5c29
 8005d40:	200000d0 	.word	0x200000d0
 8005d44:	3b03126f 	.word	0x3b03126f
 8005d48:	20000bf0 	.word	0x20000bf0
 8005d4c:	bdcccccd 	.word	0xbdcccccd
 8005d50:	20000bf4 	.word	0x20000bf4
 8005d54:	20000bf8 	.word	0x20000bf8
 8005d58:	20000bfc 	.word	0x20000bfc
 8005d5c:	20000b08 	.word	0x20000b08
 8005d60:	20000b5c 	.word	0x20000b5c
 8005d64:	42480000 	.word	0x42480000
 8005d68:	c2480000 	.word	0xc2480000
 8005d6c:	20000b14 	.word	0x20000b14
 8005d70:	20000c08 	.word	0x20000c08
 8005d74:	20000b0c 	.word	0x20000b0c
 8005d78:	3dcccccd 	.word	0x3dcccccd
 8005d7c:	20000b80 	.word	0x20000b80
 8005d80:	43960000 	.word	0x43960000
 8005d84:	c3960000 	.word	0xc3960000
 8005d88:	20000b38 	.word	0x20000b38
 8005d8c:	20000c0c 	.word	0x20000c0c
 8005d90:	44bb8000 	.word	0x44bb8000
		}else{
				int s1 = 1500 - ibusChannelData[CH1];
 8005d94:	4b8e      	ldr	r3, [pc, #568]	@ (8005fd0 <attitude_ctrl+0x738>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	613b      	str	r3, [r7, #16]

				servoL = 1500 +  s1*0.5 + pitch_pid_smooth;
 8005da0:	6938      	ldr	r0, [r7, #16]
 8005da2:	f7fa fb97 	bl	80004d4 <__aeabi_i2d>
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	4b8a      	ldr	r3, [pc, #552]	@ (8005fd4 <attitude_ctrl+0x73c>)
 8005dac:	f7fa fbfc 	bl	80005a8 <__aeabi_dmul>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4610      	mov	r0, r2
 8005db6:	4619      	mov	r1, r3
 8005db8:	a381      	add	r3, pc, #516	@ (adr r3, 8005fc0 <attitude_ctrl+0x728>)
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	f7fa fa3d 	bl	800023c <__adddf3>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4614      	mov	r4, r2
 8005dc8:	461d      	mov	r5, r3
 8005dca:	4b83      	ldr	r3, [pc, #524]	@ (8005fd8 <attitude_ctrl+0x740>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fa fb92 	bl	80004f8 <__aeabi_f2d>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4620      	mov	r0, r4
 8005dda:	4629      	mov	r1, r5
 8005ddc:	f7fa fa2e 	bl	800023c <__adddf3>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4610      	mov	r0, r2
 8005de6:	4619      	mov	r1, r3
 8005de8:	f7fa feb6 	bl	8000b58 <__aeabi_d2uiz>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
				servoR = 1500 -  s1*0.5 + pitch_pid_smooth;
 8005df2:	6938      	ldr	r0, [r7, #16]
 8005df4:	f7fa fb6e 	bl	80004d4 <__aeabi_i2d>
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	4b75      	ldr	r3, [pc, #468]	@ (8005fd4 <attitude_ctrl+0x73c>)
 8005dfe:	f7fa fbd3 	bl	80005a8 <__aeabi_dmul>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	a16e      	add	r1, pc, #440	@ (adr r1, 8005fc0 <attitude_ctrl+0x728>)
 8005e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e0c:	f7fa fa14 	bl	8000238 <__aeabi_dsub>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4614      	mov	r4, r2
 8005e16:	461d      	mov	r5, r3
 8005e18:	4b6f      	ldr	r3, [pc, #444]	@ (8005fd8 <attitude_ctrl+0x740>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fa fb6b 	bl	80004f8 <__aeabi_f2d>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4620      	mov	r0, r4
 8005e28:	4629      	mov	r1, r5
 8005e2a:	f7fa fa07 	bl	800023c <__adddf3>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	4610      	mov	r0, r2
 8005e34:	4619      	mov	r1, r3
 8005e36:	f7fa fe8f 	bl	8000b58 <__aeabi_d2uiz>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
		}

		if(ibusChannelData[CH10] > CHANNEL_HIGH ){
 8005e40:	4b63      	ldr	r3, [pc, #396]	@ (8005fd0 <attitude_ctrl+0x738>)
 8005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e44:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	f240 8091 	bls.w	8005f70 <attitude_ctrl+0x6d8>
			pitch_rate_pid.i_term = 0;
 8005e4e:	4b63      	ldr	r3, [pc, #396]	@ (8005fdc <attitude_ctrl+0x744>)
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	60da      	str	r2, [r3, #12]
			roll_rate_pid.i_term = 0;
 8005e56:	4b62      	ldr	r3, [pc, #392]	@ (8005fe0 <attitude_ctrl+0x748>)
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	60da      	str	r2, [r3, #12]
 8005e5e:	e087      	b.n	8005f70 <attitude_ctrl+0x6d8>
		}
        
    }
    // manual mode
    else{
        int s1 = 1500 - ibusChannelData[CH1];
 8005e60:	4b5b      	ldr	r3, [pc, #364]	@ (8005fd0 <attitude_ctrl+0x738>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8005e68:	3304      	adds	r3, #4
 8005e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
        int s2 = 1500 - ibusChannelData[CH2];
 8005e6c:	4b58      	ldr	r3, [pc, #352]	@ (8005fd0 <attitude_ctrl+0x738>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8005e74:	3304      	adds	r3, #4
 8005e76:	627b      	str	r3, [r7, #36]	@ 0x24

        smooth_ch1 += 0.8*(s1*0.5 - smooth_ch1);
 8005e78:	4b5a      	ldr	r3, [pc, #360]	@ (8005fe4 <attitude_ctrl+0x74c>)
 8005e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fa fb28 	bl	80004d4 <__aeabi_i2d>
 8005e84:	4604      	mov	r4, r0
 8005e86:	460d      	mov	r5, r1
 8005e88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e8a:	f7fa fb23 	bl	80004d4 <__aeabi_i2d>
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	4b50      	ldr	r3, [pc, #320]	@ (8005fd4 <attitude_ctrl+0x73c>)
 8005e94:	f7fa fb88 	bl	80005a8 <__aeabi_dmul>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4690      	mov	r8, r2
 8005e9e:	4699      	mov	r9, r3
 8005ea0:	4b50      	ldr	r3, [pc, #320]	@ (8005fe4 <attitude_ctrl+0x74c>)
 8005ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fa fb14 	bl	80004d4 <__aeabi_i2d>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4640      	mov	r0, r8
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	f7fa f9c0 	bl	8000238 <__aeabi_dsub>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	a341      	add	r3, pc, #260	@ (adr r3, 8005fc8 <attitude_ctrl+0x730>)
 8005ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec6:	f7fa fb6f 	bl	80005a8 <__aeabi_dmul>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4620      	mov	r0, r4
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	f7fa f9b3 	bl	800023c <__adddf3>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4610      	mov	r0, r2
 8005edc:	4619      	mov	r1, r3
 8005ede:	f7fa fe13 	bl	8000b08 <__aeabi_d2iz>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	b21a      	sxth	r2, r3
 8005ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8005fe4 <attitude_ctrl+0x74c>)
 8005ee8:	801a      	strh	r2, [r3, #0]
        smooth_ch2 += 0.8*(s2 - smooth_ch2);
 8005eea:	4b3f      	ldr	r3, [pc, #252]	@ (8005fe8 <attitude_ctrl+0x750>)
 8005eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fa faef 	bl	80004d4 <__aeabi_i2d>
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	460d      	mov	r5, r1
 8005efa:	4b3b      	ldr	r3, [pc, #236]	@ (8005fe8 <attitude_ctrl+0x750>)
 8005efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f00:	461a      	mov	r2, r3
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	1a9b      	subs	r3, r3, r2
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fa fae4 	bl	80004d4 <__aeabi_i2d>
 8005f0c:	a32e      	add	r3, pc, #184	@ (adr r3, 8005fc8 <attitude_ctrl+0x730>)
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f7fa fb49 	bl	80005a8 <__aeabi_dmul>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	4629      	mov	r1, r5
 8005f1e:	f7fa f98d 	bl	800023c <__adddf3>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4610      	mov	r0, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	f7fa fded 	bl	8000b08 <__aeabi_d2iz>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	b21a      	sxth	r2, r3
 8005f32:	4b2d      	ldr	r3, [pc, #180]	@ (8005fe8 <attitude_ctrl+0x750>)
 8005f34:	801a      	strh	r2, [r3, #0]
            
        servoL = 1500 + smooth_ch1 - smooth_ch2;
 8005f36:	4b2b      	ldr	r3, [pc, #172]	@ (8005fe4 <attitude_ctrl+0x74c>)
 8005f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8005fe8 <attitude_ctrl+0x750>)
 8005f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8005f4e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        servoR = 1500 - smooth_ch1 - smooth_ch2;
 8005f52:	4b24      	ldr	r3, [pc, #144]	@ (8005fe4 <attitude_ctrl+0x74c>)
 8005f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	4b23      	ldr	r3, [pc, #140]	@ (8005fe8 <attitude_ctrl+0x750>)
 8005f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	4413      	add	r3, r2
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
        
    }

    servoL = constrain(servoL,SERVO_MIN_PWM,SERVO_MAX_PWM);
 8005f70:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8005f74:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005f78:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff fbb7 	bl	80056f0 <constrain>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    servoR = constrain(servoR,SERVO_MIN_PWM,SERVO_MAX_PWM);
 8005f88:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8005f8c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005f90:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff fbab 	bl	80056f0 <constrain>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    write_pwm_ctrl(ibusChannelData[CH3],servoL,servoR);
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd0 <attitude_ctrl+0x738>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8005faa:	f8b7 105e 	ldrh.w	r1, [r7, #94]	@ 0x5e
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fd fe30 	bl	8003c14 <write_pwm_ctrl>
 8005fb4:	e000      	b.n	8005fb8 <attitude_ctrl+0x720>
        return;
 8005fb6:	bf00      	nop

}
 8005fb8:	3760      	adds	r7, #96	@ 0x60
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005fc0:	00000000 	.word	0x00000000
 8005fc4:	40977000 	.word	0x40977000
 8005fc8:	9999999a 	.word	0x9999999a
 8005fcc:	3fe99999 	.word	0x3fe99999
 8005fd0:	200000d0 	.word	0x200000d0
 8005fd4:	3fe00000 	.word	0x3fe00000
 8005fd8:	20000c0c 	.word	0x20000c0c
 8005fdc:	20000b38 	.word	0x20000b38
 8005fe0:	20000b14 	.word	0x20000b14
 8005fe4:	20000bec 	.word	0x20000bec
 8005fe8:	20000bee 	.word	0x20000bee
 8005fec:	00000000 	.word	0x00000000

08005ff0 <dynamic_speed_esitmate>:
static float Cd = 0.01;
static float weigh = 0.8; // kg

static float velocity = 0;

float dynamic_speed_esitmate(float dt){
 8005ff0:	b5b0      	push	{r4, r5, r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
    float Thrust = (float)(ibusChannelData[CH3] - 1000) * 0.009;
 8005ff8:	4b41      	ldr	r3, [pc, #260]	@ (8006100 <dynamic_speed_esitmate+0x110>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8006000:	4618      	mov	r0, r3
 8006002:	f7fa fecf 	bl	8000da4 <__aeabi_ui2f>
 8006006:	4603      	mov	r3, r0
 8006008:	4618      	mov	r0, r3
 800600a:	f7fa fa75 	bl	80004f8 <__aeabi_f2d>
 800600e:	a33a      	add	r3, pc, #232	@ (adr r3, 80060f8 <dynamic_speed_esitmate+0x108>)
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f7fa fac8 	bl	80005a8 <__aeabi_dmul>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4610      	mov	r0, r2
 800601e:	4619      	mov	r1, r3
 8006020:	f7fa fdba 	bl	8000b98 <__aeabi_d2f>
 8006024:	4603      	mov	r3, r0
 8006026:	60fb      	str	r3, [r7, #12]
    float acc = (Thrust - sign(velocity)*sq(velocity)*Cd + weigh * gravity * sin_approx(AHRS.pitch*RAD))/weigh;
 8006028:	4b36      	ldr	r3, [pc, #216]	@ (8006104 <dynamic_speed_esitmate+0x114>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f04f 0100 	mov.w	r1, #0
 8006030:	4618      	mov	r0, r3
 8006032:	f7fb f8cb 	bl	80011cc <__aeabi_fcmpgt>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <dynamic_speed_esitmate+0x52>
 800603c:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
 8006040:	e000      	b.n	8006044 <dynamic_speed_esitmate+0x54>
 8006042:	4c31      	ldr	r4, [pc, #196]	@ (8006108 <dynamic_speed_esitmate+0x118>)
 8006044:	4b2f      	ldr	r3, [pc, #188]	@ (8006104 <dynamic_speed_esitmate+0x114>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a2e      	ldr	r2, [pc, #184]	@ (8006104 <dynamic_speed_esitmate+0x114>)
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	4611      	mov	r1, r2
 800604e:	4618      	mov	r0, r3
 8006050:	f7fa ff00 	bl	8000e54 <__aeabi_fmul>
 8006054:	4603      	mov	r3, r0
 8006056:	4619      	mov	r1, r3
 8006058:	4620      	mov	r0, r4
 800605a:	f7fa fefb 	bl	8000e54 <__aeabi_fmul>
 800605e:	4603      	mov	r3, r0
 8006060:	461a      	mov	r2, r3
 8006062:	4b2a      	ldr	r3, [pc, #168]	@ (800610c <dynamic_speed_esitmate+0x11c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4619      	mov	r1, r3
 8006068:	4610      	mov	r0, r2
 800606a:	f7fa fef3 	bl	8000e54 <__aeabi_fmul>
 800606e:	4603      	mov	r3, r0
 8006070:	4619      	mov	r1, r3
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7fa fde4 	bl	8000c40 <__aeabi_fsub>
 8006078:	4603      	mov	r3, r0
 800607a:	461c      	mov	r4, r3
 800607c:	4b24      	ldr	r3, [pc, #144]	@ (8006110 <dynamic_speed_esitmate+0x120>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a24      	ldr	r2, [pc, #144]	@ (8006114 <dynamic_speed_esitmate+0x124>)
 8006082:	6812      	ldr	r2, [r2, #0]
 8006084:	4611      	mov	r1, r2
 8006086:	4618      	mov	r0, r3
 8006088:	f7fa fee4 	bl	8000e54 <__aeabi_fmul>
 800608c:	4603      	mov	r3, r0
 800608e:	461d      	mov	r5, r3
 8006090:	4b21      	ldr	r3, [pc, #132]	@ (8006118 <dynamic_speed_esitmate+0x128>)
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	4921      	ldr	r1, [pc, #132]	@ (800611c <dynamic_speed_esitmate+0x12c>)
 8006096:	4618      	mov	r0, r3
 8006098:	f7fa fedc 	bl	8000e54 <__aeabi_fmul>
 800609c:	4603      	mov	r3, r0
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fd fa3e 	bl	8003520 <sin_approx>
 80060a4:	4603      	mov	r3, r0
 80060a6:	4619      	mov	r1, r3
 80060a8:	4628      	mov	r0, r5
 80060aa:	f7fa fed3 	bl	8000e54 <__aeabi_fmul>
 80060ae:	4603      	mov	r3, r0
 80060b0:	4619      	mov	r1, r3
 80060b2:	4620      	mov	r0, r4
 80060b4:	f7fa fdc6 	bl	8000c44 <__addsf3>
 80060b8:	4603      	mov	r3, r0
 80060ba:	461a      	mov	r2, r3
 80060bc:	4b14      	ldr	r3, [pc, #80]	@ (8006110 <dynamic_speed_esitmate+0x120>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f7fa ff7a 	bl	8000fbc <__aeabi_fdiv>
 80060c8:	4603      	mov	r3, r0
 80060ca:	60bb      	str	r3, [r7, #8]
    velocity += acc*dt;
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	68b8      	ldr	r0, [r7, #8]
 80060d0:	f7fa fec0 	bl	8000e54 <__aeabi_fmul>
 80060d4:	4603      	mov	r3, r0
 80060d6:	461a      	mov	r2, r3
 80060d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006104 <dynamic_speed_esitmate+0x114>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f7fa fdb0 	bl	8000c44 <__addsf3>
 80060e4:	4603      	mov	r3, r0
 80060e6:	461a      	mov	r2, r3
 80060e8:	4b06      	ldr	r3, [pc, #24]	@ (8006104 <dynamic_speed_esitmate+0x114>)
 80060ea:	601a      	str	r2, [r3, #0]
    return velocity;
 80060ec:	4b05      	ldr	r3, [pc, #20]	@ (8006104 <dynamic_speed_esitmate+0x114>)
 80060ee:	681b      	ldr	r3, [r3, #0]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bdb0      	pop	{r4, r5, r7, pc}
 80060f8:	8d4fdf3b 	.word	0x8d4fdf3b
 80060fc:	3f826e97 	.word	0x3f826e97
 8006100:	200000d0 	.word	0x200000d0
 8006104:	20000c10 	.word	0x20000c10
 8006108:	bf800000 	.word	0xbf800000
 800610c:	20000030 	.word	0x20000030
 8006110:	20000034 	.word	0x20000034
 8006114:	2000002c 	.word	0x2000002c
 8006118:	200004c8 	.word	0x200004c8
 800611c:	3c8efa35 	.word	0x3c8efa35

08006120 <mapI>:
}


#define Feq2Sec(F) (1.0f/F)

static int32_t mapI(int val, int min_in,int max_in,int min_out, int max_out){
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
   int out = (val - min_in)*(max_out - min_out)/(max_in - min_in);
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	6a39      	ldr	r1, [r7, #32]
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	1a8a      	subs	r2, r1, r2
 800613a:	fb03 f202 	mul.w	r2, r3, r2
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	1acb      	subs	r3, r1, r3
 8006144:	fb92 f3f3 	sdiv	r3, r2, r3
 8006148:	617b      	str	r3, [r7, #20]
}
 800614a:	bf00      	nop
 800614c:	4618      	mov	r0, r3
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr

08006156 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8006156:	b480      	push	{r7}
 8006158:	b085      	sub	sp, #20
 800615a:	af00      	add	r7, sp, #0
 800615c:	4603      	mov	r3, r0
 800615e:	6039      	str	r1, [r7, #0]
 8006160:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b2da      	uxtb	r2, r3
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	4053      	eors	r3, r2
 800616c:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	b25a      	sxtb	r2, r3
 8006174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006178:	4053      	eors	r3, r2
 800617a:	b25b      	sxtb	r3, r3
 800617c:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	0a1b      	lsrs	r3, r3, #8
 8006184:	b29b      	uxth	r3, r3
 8006186:	b21a      	sxth	r2, r3
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	021b      	lsls	r3, r3, #8
 800618c:	b21b      	sxth	r3, r3
 800618e:	4053      	eors	r3, r2
 8006190:	b21a      	sxth	r2, r3
 8006192:	7bfb      	ldrb	r3, [r7, #15]
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	b21b      	sxth	r3, r3
 8006198:	4053      	eors	r3, r2
 800619a:	b21a      	sxth	r2, r3
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	091b      	lsrs	r3, r3, #4
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	b21b      	sxth	r3, r3
 80061a4:	4053      	eors	r3, r2
 80061a6:	b21b      	sxth	r3, r3
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	801a      	strh	r2, [r3, #0]
}
 80061ae:	bf00      	nop
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bc80      	pop	{r7}
 80061b6:	4770      	bx	lr

080061b8 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80061c6:	801a      	strh	r2, [r3, #0]
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr

080061d2 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	460b      	mov	r3, r1
 80061dc:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 80061de:	f107 030e 	add.w	r3, r7, #14
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff ffe8 	bl	80061b8 <crc_init>
	while (length--) {
 80061e8:	e009      	b.n	80061fe <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	f107 020e 	add.w	r2, r7, #14
 80061f6:	4611      	mov	r1, r2
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff ffac 	bl	8006156 <crc_accumulate>
	while (length--) {
 80061fe:	887b      	ldrh	r3, [r7, #2]
 8006200:	1e5a      	subs	r2, r3, #1
 8006202:	807a      	strh	r2, [r7, #2]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f0      	bne.n	80061ea <crc_calculate+0x18>
        }
        return crcTmp;
 8006208:	89fb      	ldrh	r3, [r7, #14]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b086      	sub	sp, #24
 8006216:	af00      	add	r7, sp, #0
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	4613      	mov	r3, r2
 800621e:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	617b      	str	r3, [r7, #20]
	while (length--) {
 8006224:	e007      	b.n	8006236 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	617a      	str	r2, [r7, #20]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	68f9      	ldr	r1, [r7, #12]
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff ff90 	bl	8006156 <crc_accumulate>
	while (length--) {
 8006236:	88fb      	ldrh	r3, [r7, #6]
 8006238:	1e5a      	subs	r2, r3, #1
 800623a:	80fa      	strh	r2, [r7, #6]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1f2      	bne.n	8006226 <crc_accumulate_buffer+0x14>
        }
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	4603      	mov	r3, r0
 8006254:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8006256:	79fa      	ldrb	r2, [r7, #7]
 8006258:	4613      	mov	r3, r2
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4a03      	ldr	r2, [pc, #12]	@ (8006270 <mavlink_get_channel_status+0x24>)
 8006262:	4413      	add	r3, r2
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	20000df8 	.word	0x20000df8

08006274 <mavlink_finalize_message_chan>:
						      uint8_t chan, uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
 8006274:	b590      	push	{r4, r7, lr}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	4608      	mov	r0, r1
 800627e:	4611      	mov	r1, r2
 8006280:	461a      	mov	r2, r3
 8006282:	4603      	mov	r3, r0
 8006284:	70fb      	strb	r3, [r7, #3]
 8006286:	460b      	mov	r3, r1
 8006288:	70bb      	strb	r3, [r7, #2]
 800628a:	4613      	mov	r3, r2
 800628c:	707b      	strb	r3, [r7, #1]
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	22fe      	movs	r2, #254	@ 0xfe
 8006292:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	7e3a      	ldrb	r2, [r7, #24]
 8006298:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	78fa      	ldrb	r2, [r7, #3]
 800629e:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	78ba      	ldrb	r2, [r7, #2]
 80062a4:	719a      	strb	r2, [r3, #6]
	// One sequence number per component
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 80062a6:	787b      	ldrb	r3, [r7, #1]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff ffcf 	bl	800624c <mavlink_get_channel_status>
 80062ae:	4603      	mov	r3, r0
 80062b0:	799a      	ldrb	r2, [r3, #6]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 80062b6:	787b      	ldrb	r3, [r7, #1]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff ffc7 	bl	800624c <mavlink_get_channel_status>
 80062be:	4603      	mov	r3, r0
 80062c0:	799c      	ldrb	r4, [r3, #6]
 80062c2:	787b      	ldrb	r3, [r7, #1]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff ffc1 	bl	800624c <mavlink_get_channel_status>
 80062ca:	4603      	mov	r3, r0
 80062cc:	1c62      	adds	r2, r4, #1
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	719a      	strb	r2, [r3, #6]
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3303      	adds	r3, #3
 80062d6:	2105      	movs	r1, #5
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff ff7a 	bl	80061d2 <crc_calculate>
 80062de:	4603      	mov	r3, r0
 80062e0:	461a      	mov	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f103 0108 	add.w	r1, r3, #8
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	78db      	ldrb	r3, [r3, #3]
 80062f2:	461a      	mov	r2, r3
 80062f4:	f7ff ff8d 	bl	8006212 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &msg->checksum);
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	7f3b      	ldrb	r3, [r7, #28]
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f7ff ff29 	bl	8006156 <crc_accumulate>
#endif
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b299      	uxth	r1, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3308      	adds	r3, #8
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	78d2      	ldrb	r2, [r2, #3]
 8006312:	4413      	add	r3, r2
 8006314:	b2ca      	uxtb	r2, r1
 8006316:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	b29b      	uxth	r3, r3
 800631e:	0a1b      	lsrs	r3, r3, #8
 8006320:	b299      	uxth	r1, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f103 0208 	add.w	r2, r3, #8
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	78db      	ldrb	r3, [r3, #3]
 800632c:	3301      	adds	r3, #1
 800632e:	4413      	add	r3, r2
 8006330:	b2ca      	uxtb	r2, r1
 8006332:	701a      	strb	r2, [r3, #0]

	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 8006334:	7e3b      	ldrb	r3, [r7, #24]
 8006336:	b29b      	uxth	r3, r3
 8006338:	3308      	adds	r3, #8
 800633a:	b29b      	uxth	r3, r3
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	bd90      	pop	{r4, r7, pc}

08006344 <mavlink_finalize_message>:
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
#if MAVLINK_CRC_EXTRA
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t length, uint8_t crc_extra)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af02      	add	r7, sp, #8
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	4608      	mov	r0, r1
 800634e:	4611      	mov	r1, r2
 8006350:	461a      	mov	r2, r3
 8006352:	4603      	mov	r3, r0
 8006354:	70fb      	strb	r3, [r7, #3]
 8006356:	460b      	mov	r3, r1
 8006358:	70bb      	strb	r3, [r7, #2]
 800635a:	4613      	mov	r3, r2
 800635c:	707b      	strb	r3, [r7, #1]
	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
 800635e:	78ba      	ldrb	r2, [r7, #2]
 8006360:	78f9      	ldrb	r1, [r7, #3]
 8006362:	7c3b      	ldrb	r3, [r7, #16]
 8006364:	9301      	str	r3, [sp, #4]
 8006366:	787b      	ldrb	r3, [r7, #1]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	2300      	movs	r3, #0
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7ff ff81 	bl	8006274 <mavlink_finalize_message_chan>
 8006372:	4603      	mov	r3, r0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	1c99      	adds	r1, r3, #2
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	78db      	ldrb	r3, [r3, #3]
 800638e:	3306      	adds	r3, #6
 8006390:	461a      	mov	r2, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f00d fd58 	bl	8013e48 <memcpy>

	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	78db      	ldrb	r3, [r3, #3]
 800639c:	3306      	adds	r3, #6
 800639e:	461a      	mov	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4413      	add	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	0a1b      	lsrs	r3, r3, #8
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3301      	adds	r3, #1
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]

	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	78db      	ldrb	r3, [r3, #3]
 80063c8:	3308      	adds	r3, #8
 80063ca:	b29b      	uxth	r3, r3
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <mavlink_msg_heartbeat_pack>:
 * @param system_status System status flag, see MAV_STATE ENUM
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af02      	add	r7, sp, #8
 80063da:	603a      	str	r2, [r7, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	4603      	mov	r3, r0
 80063e0:	71fb      	strb	r3, [r7, #7]
 80063e2:	460b      	mov	r3, r1
 80063e4:	71bb      	strb	r3, [r7, #6]
 80063e6:	4613      	mov	r3, r2
 80063e8:	717b      	strb	r3, [r7, #5]
	_mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
	mavlink_heartbeat_t packet;
	packet.custom_mode = custom_mode;
 80063ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ec:	60fb      	str	r3, [r7, #12]
	packet.type = type;
 80063ee:	797b      	ldrb	r3, [r7, #5]
 80063f0:	743b      	strb	r3, [r7, #16]
	packet.autopilot = autopilot;
 80063f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063f6:	747b      	strb	r3, [r7, #17]
	packet.base_mode = base_mode;
 80063f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063fc:	74bb      	strb	r3, [r7, #18]
	packet.system_status = system_status;
 80063fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006402:	74fb      	strb	r3, [r7, #19]
	packet.mavlink_version = 3;
 8006404:	2303      	movs	r3, #3
 8006406:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	3308      	adds	r3, #8
 800640c:	f107 010c 	add.w	r1, r7, #12
 8006410:	2209      	movs	r2, #9
 8006412:	4618      	mov	r0, r3
 8006414:	f00d fd18 	bl	8013e48 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2200      	movs	r2, #0
 800641c:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 800641e:	79ba      	ldrb	r2, [r7, #6]
 8006420:	79f9      	ldrb	r1, [r7, #7]
 8006422:	2332      	movs	r3, #50	@ 0x32
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	2309      	movs	r3, #9
 8006428:	6838      	ldr	r0, [r7, #0]
 800642a:	f7ff ff8b 	bl	8006344 <mavlink_finalize_message>
 800642e:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <mavlink_msg_attitude_pack>:
 * @param yawspeed Yaw angular speed (rad/s)
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_attitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08e      	sub	sp, #56	@ 0x38
 800643c:	af02      	add	r7, sp, #8
 800643e:	60ba      	str	r2, [r7, #8]
 8006440:	607b      	str	r3, [r7, #4]
 8006442:	4603      	mov	r3, r0
 8006444:	73fb      	strb	r3, [r7, #15]
 8006446:	460b      	mov	r3, r1
 8006448:	73bb      	strb	r3, [r7, #14]
	_mav_put_float(buf, 24, yawspeed);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_ATTITUDE_LEN);
#else
	mavlink_attitude_t packet;
	packet.time_boot_ms = time_boot_ms;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	617b      	str	r3, [r7, #20]
	packet.roll = roll;
 800644e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006450:	61bb      	str	r3, [r7, #24]
	packet.pitch = pitch;
 8006452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006454:	61fb      	str	r3, [r7, #28]
	packet.yaw = yaw;
 8006456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006458:	623b      	str	r3, [r7, #32]
	packet.rollspeed = rollspeed;
 800645a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800645c:	627b      	str	r3, [r7, #36]	@ 0x24
	packet.pitchspeed = pitchspeed;
 800645e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006460:	62bb      	str	r3, [r7, #40]	@ 0x28
	packet.yawspeed = yawspeed;
 8006462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006464:	62fb      	str	r3, [r7, #44]	@ 0x2c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	3308      	adds	r3, #8
 800646a:	f107 0114 	add.w	r1, r7, #20
 800646e:	221c      	movs	r2, #28
 8006470:	4618      	mov	r0, r3
 8006472:	f00d fce9 	bl	8013e48 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_ATTITUDE;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	221e      	movs	r2, #30
 800647a:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
 800647c:	7bba      	ldrb	r2, [r7, #14]
 800647e:	7bf9      	ldrb	r1, [r7, #15]
 8006480:	2327      	movs	r3, #39	@ 0x27
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	231c      	movs	r3, #28
 8006486:	68b8      	ldr	r0, [r7, #8]
 8006488:	f7ff ff5c 	bl	8006344 <mavlink_finalize_message>
 800648c:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
}
 800648e:	4618      	mov	r0, r3
 8006490:	3730      	adds	r7, #48	@ 0x30
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <mavlink_msg_rc_channels_raw_pack>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rc_channels_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b08c      	sub	sp, #48	@ 0x30
 800649a:	af02      	add	r7, sp, #8
 800649c:	60ba      	str	r2, [r7, #8]
 800649e:	607b      	str	r3, [r7, #4]
 80064a0:	4603      	mov	r3, r0
 80064a2:	73fb      	strb	r3, [r7, #15]
 80064a4:	460b      	mov	r3, r1
 80064a6:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint8_t(buf, 21, rssi);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#else
	mavlink_rc_channels_raw_t packet;
	packet.time_boot_ms = time_boot_ms;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	613b      	str	r3, [r7, #16]
	packet.chan1_raw = chan1_raw;
 80064ac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80064ae:	82bb      	strh	r3, [r7, #20]
	packet.chan2_raw = chan2_raw;
 80064b0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80064b2:	82fb      	strh	r3, [r7, #22]
	packet.chan3_raw = chan3_raw;
 80064b4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80064b6:	833b      	strh	r3, [r7, #24]
	packet.chan4_raw = chan4_raw;
 80064b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80064bc:	837b      	strh	r3, [r7, #26]
	packet.chan5_raw = chan5_raw;
 80064be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80064c2:	83bb      	strh	r3, [r7, #28]
	packet.chan6_raw = chan6_raw;
 80064c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80064c8:	83fb      	strh	r3, [r7, #30]
	packet.chan7_raw = chan7_raw;
 80064ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80064ce:	843b      	strh	r3, [r7, #32]
	packet.chan8_raw = chan8_raw;
 80064d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80064d4:	847b      	strh	r3, [r7, #34]	@ 0x22
	packet.port = port;
 80064d6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80064da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	packet.rssi = rssi;
 80064de:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80064e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	3308      	adds	r3, #8
 80064ea:	f107 0110 	add.w	r1, r7, #16
 80064ee:	2216      	movs	r2, #22
 80064f0:	4618      	mov	r0, r3
 80064f2:	f00d fca9 	bl	8013e48 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_RC_CHANNELS_RAW;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2223      	movs	r2, #35	@ 0x23
 80064fa:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
 80064fc:	7bba      	ldrb	r2, [r7, #14]
 80064fe:	7bf9      	ldrb	r1, [r7, #15]
 8006500:	23f4      	movs	r3, #244	@ 0xf4
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	2316      	movs	r3, #22
 8006506:	68b8      	ldr	r0, [r7, #8]
 8006508:	f7ff ff1c 	bl	8006344 <mavlink_finalize_message>
 800650c:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
}
 800650e:	4618      	mov	r0, r3
 8006510:	3728      	adds	r7, #40	@ 0x28
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <mavlink_msg_vfr_hud_pack>:
 * @param climb Current climb rate in meters/second
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b08c      	sub	sp, #48	@ 0x30
 800651a:	af02      	add	r7, sp, #8
 800651c:	60ba      	str	r2, [r7, #8]
 800651e:	607b      	str	r3, [r7, #4]
 8006520:	4603      	mov	r3, r0
 8006522:	73fb      	strb	r3, [r7, #15]
 8006524:	460b      	mov	r3, r1
 8006526:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint16_t(buf, 18, throttle);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_VFR_HUD_LEN);
#else
	mavlink_vfr_hud_t packet;
	packet.airspeed = airspeed;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	617b      	str	r3, [r7, #20]
	packet.groundspeed = groundspeed;
 800652c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652e:	61bb      	str	r3, [r7, #24]
	packet.alt = alt;
 8006530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006532:	61fb      	str	r3, [r7, #28]
	packet.climb = climb;
 8006534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006536:	623b      	str	r3, [r7, #32]
	packet.heading = heading;
 8006538:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800653a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	packet.throttle = throttle;
 800653c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800653e:	84fb      	strh	r3, [r7, #38]	@ 0x26

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	3308      	adds	r3, #8
 8006544:	f107 0114 	add.w	r1, r7, #20
 8006548:	2214      	movs	r2, #20
 800654a:	4618      	mov	r0, r3
 800654c:	f00d fc7c 	bl	8013e48 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	224a      	movs	r2, #74	@ 0x4a
 8006554:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 8006556:	7bba      	ldrb	r2, [r7, #14]
 8006558:	7bf9      	ldrb	r1, [r7, #15]
 800655a:	2314      	movs	r3, #20
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	2314      	movs	r3, #20
 8006560:	68b8      	ldr	r0, [r7, #8]
 8006562:	f7ff feef 	bl	8006344 <mavlink_finalize_message>
 8006566:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
}
 8006568:	4618      	mov	r0, r3
 800656a:	3728      	adds	r7, #40	@ 0x28
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <mavlinkInit>:
static int isTxcpl;
uint32_t send_time_us;

extern float v_estimate;

void mavlinkInit(uint8_t syss_id, uint8_t comm_id,UART_HandleTypeDef *uartt,uint32_t baudrate){
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	60ba      	str	r2, [r7, #8]
 8006578:	607b      	str	r3, [r7, #4]
 800657a:	4603      	mov	r3, r0
 800657c:	73fb      	strb	r3, [r7, #15]
 800657e:	460b      	mov	r3, r1
 8006580:	73bb      	strb	r3, [r7, #14]
    isTxcpl = 1;
 8006582:	4b10      	ldr	r3, [pc, #64]	@ (80065c4 <mavlinkInit+0x54>)
 8006584:	2201      	movs	r2, #1
 8006586:	601a      	str	r2, [r3, #0]
    index_ =0;
 8006588:	4b0f      	ldr	r3, [pc, #60]	@ (80065c8 <mavlinkInit+0x58>)
 800658a:	2200      	movs	r2, #0
 800658c:	701a      	strb	r2, [r3, #0]
	sys_id  = syss_id;
 800658e:	4a0f      	ldr	r2, [pc, #60]	@ (80065cc <mavlinkInit+0x5c>)
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	7013      	strb	r3, [r2, #0]
    com_id  = comm_id;
 8006594:	4a0e      	ldr	r2, [pc, #56]	@ (80065d0 <mavlinkInit+0x60>)
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	7013      	strb	r3, [r2, #0]
	uart = uartt;
 800659a:	4a0e      	ldr	r2, [pc, #56]	@ (80065d4 <mavlinkInit+0x64>)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	6013      	str	r3, [r2, #0]
    uartt->Init.BaudRate = baudrate;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(uartt);
 80065a6:	68b8      	ldr	r0, [r7, #8]
 80065a8:	f005 fab6 	bl	800bb18 <HAL_UART_Init>
	HAL_UART_Receive_IT(uart, &data,1);
 80065ac:	4b09      	ldr	r3, [pc, #36]	@ (80065d4 <mavlinkInit+0x64>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2201      	movs	r2, #1
 80065b2:	4909      	ldr	r1, [pc, #36]	@ (80065d8 <mavlinkInit+0x68>)
 80065b4:	4618      	mov	r0, r3
 80065b6:	f005 fb82 	bl	800bcbe <HAL_UART_Receive_IT>
}
 80065ba:	bf00      	nop
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20000df4 	.word	0x20000df4
 80065c8:	20000d25 	.word	0x20000d25
 80065cc:	20000d26 	.word	0x20000d26
 80065d0:	20000d27 	.word	0x20000d27
 80065d4:	20000d28 	.word	0x20000d28
 80065d8:	20000d24 	.word	0x20000d24

080065dc <mavlink_osd>:
*   Attitude
*   GPS 
*   RC signal
*   heartbeat
*/
void mavlink_osd(){
 80065dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065de:	b093      	sub	sp, #76	@ 0x4c
 80065e0:	af0a      	add	r7, sp, #40	@ 0x28
	static uint8_t count_ = 0;
	static uint8_t count2_ = 0;
	if(isTxcpl)
 80065e2:	4b7c      	ldr	r3, [pc, #496]	@ (80067d4 <mavlink_osd+0x1f8>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 80ef 	beq.w	80067ca <mavlink_osd+0x1ee>
	{
		switch (count_)
 80065ec:	4b7a      	ldr	r3, [pc, #488]	@ (80067d8 <mavlink_osd+0x1fc>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d071      	beq.n	80066d8 <mavlink_osd+0xfc>
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	f300 80d8 	bgt.w	80067aa <mavlink_osd+0x1ce>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <mavlink_osd+0x28>
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d02f      	beq.n	8006662 <mavlink_osd+0x86>
 8006602:	e0d2      	b.n	80067aa <mavlink_osd+0x1ce>
		{
		// fast display
		case 0:  
			mavlink_msg_attitude_pack(sys_id,com_id,&msg,0,AHRS.roll*RAD,AHRS.pitch*RAD,0,0,0,0);
 8006604:	4b75      	ldr	r3, [pc, #468]	@ (80067dc <mavlink_osd+0x200>)
 8006606:	781c      	ldrb	r4, [r3, #0]
 8006608:	4b75      	ldr	r3, [pc, #468]	@ (80067e0 <mavlink_osd+0x204>)
 800660a:	781d      	ldrb	r5, [r3, #0]
 800660c:	4b75      	ldr	r3, [pc, #468]	@ (80067e4 <mavlink_osd+0x208>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4975      	ldr	r1, [pc, #468]	@ (80067e8 <mavlink_osd+0x20c>)
 8006612:	4618      	mov	r0, r3
 8006614:	f7fa fc1e 	bl	8000e54 <__aeabi_fmul>
 8006618:	4603      	mov	r3, r0
 800661a:	461e      	mov	r6, r3
 800661c:	4b71      	ldr	r3, [pc, #452]	@ (80067e4 <mavlink_osd+0x208>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	4971      	ldr	r1, [pc, #452]	@ (80067e8 <mavlink_osd+0x20c>)
 8006622:	4618      	mov	r0, r3
 8006624:	f7fa fc16 	bl	8000e54 <__aeabi_fmul>
 8006628:	4603      	mov	r3, r0
 800662a:	461a      	mov	r2, r3
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	9305      	str	r3, [sp, #20]
 8006632:	f04f 0300 	mov.w	r3, #0
 8006636:	9304      	str	r3, [sp, #16]
 8006638:	f04f 0300 	mov.w	r3, #0
 800663c:	9303      	str	r3, [sp, #12]
 800663e:	f04f 0300 	mov.w	r3, #0
 8006642:	9302      	str	r3, [sp, #8]
 8006644:	9201      	str	r2, [sp, #4]
 8006646:	9600      	str	r6, [sp, #0]
 8006648:	2300      	movs	r3, #0
 800664a:	4a68      	ldr	r2, [pc, #416]	@ (80067ec <mavlink_osd+0x210>)
 800664c:	4629      	mov	r1, r5
 800664e:	4620      	mov	r0, r4
 8006650:	f7ff fef2 	bl	8006438 <mavlink_msg_attitude_pack>
			count_ ++;
 8006654:	4b60      	ldr	r3, [pc, #384]	@ (80067d8 <mavlink_osd+0x1fc>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	3301      	adds	r3, #1
 800665a:	b2da      	uxtb	r2, r3
 800665c:	4b5e      	ldr	r3, [pc, #376]	@ (80067d8 <mavlink_osd+0x1fc>)
 800665e:	701a      	strb	r2, [r3, #0]
			break;
 8006660:	e0a3      	b.n	80067aa <mavlink_osd+0x1ce>
		case 1:  
			float airspeed = 314;    // osd in km/h
 8006662:	4b63      	ldr	r3, [pc, #396]	@ (80067f0 <mavlink_osd+0x214>)
 8006664:	61bb      	str	r3, [r7, #24]
			float groundspeed = 57;  // osd in km/h
 8006666:	4b63      	ldr	r3, [pc, #396]	@ (80067f4 <mavlink_osd+0x218>)
 8006668:	617b      	str	r3, [r7, #20]
			uint16_t throttle = (ibusChannelData[CH3] - 1000)*0.1f;
 800666a:	4b63      	ldr	r3, [pc, #396]	@ (80067f8 <mavlink_osd+0x21c>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8006672:	4618      	mov	r0, r3
 8006674:	f7fa fb96 	bl	8000da4 <__aeabi_ui2f>
 8006678:	4603      	mov	r3, r0
 800667a:	4960      	ldr	r1, [pc, #384]	@ (80067fc <mavlink_osd+0x220>)
 800667c:	4618      	mov	r0, r3
 800667e:	f7fa fbe9 	bl	8000e54 <__aeabi_fmul>
 8006682:	4603      	mov	r3, r0
 8006684:	4618      	mov	r0, r3
 8006686:	f7fa fde7 	bl	8001258 <__aeabi_f2uiz>
 800668a:	4603      	mov	r3, r0
 800668c:	827b      	strh	r3, [r7, #18]
			float alt = 333;
 800668e:	4b5c      	ldr	r3, [pc, #368]	@ (8006800 <mavlink_osd+0x224>)
 8006690:	60fb      	str	r3, [r7, #12]
			float climb = 5;
 8006692:	4b5c      	ldr	r3, [pc, #368]	@ (8006804 <mavlink_osd+0x228>)
 8006694:	60bb      	str	r3, [r7, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 8006696:	4b51      	ldr	r3, [pc, #324]	@ (80067dc <mavlink_osd+0x200>)
 8006698:	781c      	ldrb	r4, [r3, #0]
 800669a:	4b51      	ldr	r3, [pc, #324]	@ (80067e0 <mavlink_osd+0x204>)
 800669c:	781d      	ldrb	r5, [r3, #0]
						airspeed, groundspeed,AHRS.yaw, throttle,alt, climb);
 800669e:	4b51      	ldr	r3, [pc, #324]	@ (80067e4 <mavlink_osd+0x208>)
 80066a0:	689b      	ldr	r3, [r3, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fa fdb2 	bl	800120c <__aeabi_f2iz>
 80066a8:	4603      	mov	r3, r0
 80066aa:	b21b      	sxth	r3, r3
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	9204      	str	r2, [sp, #16]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	9203      	str	r2, [sp, #12]
 80066b4:	8a7a      	ldrh	r2, [r7, #18]
 80066b6:	9202      	str	r2, [sp, #8]
 80066b8:	9301      	str	r3, [sp, #4]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	4a4a      	ldr	r2, [pc, #296]	@ (80067ec <mavlink_osd+0x210>)
 80066c2:	4629      	mov	r1, r5
 80066c4:	4620      	mov	r0, r4
 80066c6:	f7ff ff26 	bl	8006516 <mavlink_msg_vfr_hud_pack>
			count_ ++;
 80066ca:	4b43      	ldr	r3, [pc, #268]	@ (80067d8 <mavlink_osd+0x1fc>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	3301      	adds	r3, #1
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	4b41      	ldr	r3, [pc, #260]	@ (80067d8 <mavlink_osd+0x1fc>)
 80066d4:	701a      	strb	r2, [r3, #0]
			break;
 80066d6:	e068      	b.n	80067aa <mavlink_osd+0x1ce>
		case 2:
			switch (count2_)
 80066d8:	4b4b      	ldr	r3, [pc, #300]	@ (8006808 <mavlink_osd+0x22c>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d046      	beq.n	800676e <mavlink_osd+0x192>
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	dc5f      	bgt.n	80067a4 <mavlink_osd+0x1c8>
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <mavlink_osd+0x112>
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d007      	beq.n	80066fc <mavlink_osd+0x120>
 80066ec:	e05a      	b.n	80067a4 <mavlink_osd+0x1c8>
			{
			case 0:
				//mavlink_msg_gps_raw_int_pack(sys_id,com_id,&msg,
				//						0, _gps.fix,_gps.position[0],_gps.position[1],1200,
				//						1 , 1 , 2200,0 ,abs(v_estimate));
				count2_ ++;
 80066ee:	4b46      	ldr	r3, [pc, #280]	@ (8006808 <mavlink_osd+0x22c>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	3301      	adds	r3, #1
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	4b44      	ldr	r3, [pc, #272]	@ (8006808 <mavlink_osd+0x22c>)
 80066f8:	701a      	strb	r2, [r3, #0]

				break;
 80066fa:	e053      	b.n	80067a4 <mavlink_osd+0x1c8>
			case 1:
			    uint8_t rssi = mapI(ibusChannelData[CH11],1000,2000,0,255);
 80066fc:	4b3e      	ldr	r3, [pc, #248]	@ (80067f8 <mavlink_osd+0x21c>)
 80066fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006700:	4618      	mov	r0, r3
 8006702:	23ff      	movs	r3, #255	@ 0xff
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	2300      	movs	r3, #0
 8006708:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800670c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006710:	f7ff fd06 	bl	8006120 <mapI>
 8006714:	4603      	mov	r3, r0
 8006716:	773b      	strb	r3, [r7, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8006718:	4b30      	ldr	r3, [pc, #192]	@ (80067dc <mavlink_osd+0x200>)
 800671a:	781c      	ldrb	r4, [r3, #0]
 800671c:	4b30      	ldr	r3, [pc, #192]	@ (80067e0 <mavlink_osd+0x204>)
 800671e:	781d      	ldrb	r5, [r3, #0]
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 8006720:	4b35      	ldr	r3, [pc, #212]	@ (80067f8 <mavlink_osd+0x21c>)
 8006722:	68db      	ldr	r3, [r3, #12]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8006724:	b29b      	uxth	r3, r3
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 8006726:	4a34      	ldr	r2, [pc, #208]	@ (80067f8 <mavlink_osd+0x21c>)
 8006728:	6992      	ldr	r2, [r2, #24]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 800672a:	b292      	uxth	r2, r2
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 800672c:	4932      	ldr	r1, [pc, #200]	@ (80067f8 <mavlink_osd+0x21c>)
 800672e:	69c9      	ldr	r1, [r1, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8006730:	b289      	uxth	r1, r1
 8006732:	7f38      	ldrb	r0, [r7, #28]
 8006734:	9009      	str	r0, [sp, #36]	@ 0x24
 8006736:	2000      	movs	r0, #0
 8006738:	9008      	str	r0, [sp, #32]
 800673a:	2000      	movs	r0, #0
 800673c:	9007      	str	r0, [sp, #28]
 800673e:	2000      	movs	r0, #0
 8006740:	9006      	str	r0, [sp, #24]
 8006742:	2000      	movs	r0, #0
 8006744:	9005      	str	r0, [sp, #20]
 8006746:	2000      	movs	r0, #0
 8006748:	9004      	str	r0, [sp, #16]
 800674a:	9103      	str	r1, [sp, #12]
 800674c:	9202      	str	r2, [sp, #8]
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	2300      	movs	r3, #0
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	2300      	movs	r3, #0
 8006756:	4a25      	ldr	r2, [pc, #148]	@ (80067ec <mavlink_osd+0x210>)
 8006758:	4629      	mov	r1, r5
 800675a:	4620      	mov	r0, r4
 800675c:	f7ff fe9b 	bl	8006496 <mavlink_msg_rc_channels_raw_pack>
						0,0,0,
						0,0,rssi);
				count2_ ++;
 8006760:	4b29      	ldr	r3, [pc, #164]	@ (8006808 <mavlink_osd+0x22c>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	3301      	adds	r3, #1
 8006766:	b2da      	uxtb	r2, r3
 8006768:	4b27      	ldr	r3, [pc, #156]	@ (8006808 <mavlink_osd+0x22c>)
 800676a:	701a      	strb	r2, [r3, #0]
				break;
 800676c:	e01a      	b.n	80067a4 <mavlink_osd+0x1c8>
			case 2: // send heartbeat
				uint8_t type = MAV_TYPE_FIXED_WING;
 800676e:	2301      	movs	r3, #1
 8006770:	77fb      	strb	r3, [r7, #31]
				uint8_t autopilot = MAV_AUTOPILOT_GENERIC;
 8006772:	2300      	movs	r3, #0
 8006774:	77bb      	strb	r3, [r7, #30]
				uint8_t base_mode = MAV_MODE_FLAG_TEST_ENABLED;
 8006776:	2302      	movs	r3, #2
 8006778:	777b      	strb	r3, [r7, #29]
				mavlink_msg_heartbeat_pack(sys_id,com_id,&msg,type,autopilot,base_mode,base_mode, MAV_STATE_UNINIT);
 800677a:	4b18      	ldr	r3, [pc, #96]	@ (80067dc <mavlink_osd+0x200>)
 800677c:	7818      	ldrb	r0, [r3, #0]
 800677e:	4b18      	ldr	r3, [pc, #96]	@ (80067e0 <mavlink_osd+0x204>)
 8006780:	7819      	ldrb	r1, [r3, #0]
 8006782:	7f7b      	ldrb	r3, [r7, #29]
 8006784:	7ffa      	ldrb	r2, [r7, #31]
 8006786:	2400      	movs	r4, #0
 8006788:	9403      	str	r4, [sp, #12]
 800678a:	9302      	str	r3, [sp, #8]
 800678c:	7f7b      	ldrb	r3, [r7, #29]
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	7fbb      	ldrb	r3, [r7, #30]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	4613      	mov	r3, r2
 8006796:	4a15      	ldr	r2, [pc, #84]	@ (80067ec <mavlink_osd+0x210>)
 8006798:	f7ff fe1c 	bl	80063d4 <mavlink_msg_heartbeat_pack>
				count2_ = 0;
 800679c:	4b1a      	ldr	r3, [pc, #104]	@ (8006808 <mavlink_osd+0x22c>)
 800679e:	2200      	movs	r2, #0
 80067a0:	701a      	strb	r2, [r3, #0]
				break;
 80067a2:	bf00      	nop
				                                     0,q,0,0,0,thrust);
		        count2_ = 0;
				break;
			*/
			}
			count_ = 0;
 80067a4:	4b0c      	ldr	r3, [pc, #48]	@ (80067d8 <mavlink_osd+0x1fc>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	701a      	strb	r2, [r3, #0]
		}
		uint16_t len_data = mavlink_msg_to_send_buffer(buffer__,&msg);
 80067aa:	4910      	ldr	r1, [pc, #64]	@ (80067ec <mavlink_osd+0x210>)
 80067ac:	4817      	ldr	r0, [pc, #92]	@ (800680c <mavlink_osd+0x230>)
 80067ae:	f7ff fde5 	bl	800637c <mavlink_msg_to_send_buffer>
 80067b2:	4603      	mov	r3, r0
 80067b4:	80fb      	strh	r3, [r7, #6]
	    HAL_UART_Transmit_DMA(uart,buffer__,len_data);
 80067b6:	4b16      	ldr	r3, [pc, #88]	@ (8006810 <mavlink_osd+0x234>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	88fa      	ldrh	r2, [r7, #6]
 80067bc:	4913      	ldr	r1, [pc, #76]	@ (800680c <mavlink_osd+0x230>)
 80067be:	4618      	mov	r0, r3
 80067c0:	f005 faa2 	bl	800bd08 <HAL_UART_Transmit_DMA>
	    isTxcpl = 0;
 80067c4:	4b03      	ldr	r3, [pc, #12]	@ (80067d4 <mavlink_osd+0x1f8>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	601a      	str	r2, [r3, #0]
	}
}
 80067ca:	bf00      	nop
 80067cc:	3724      	adds	r7, #36	@ 0x24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000df4 	.word	0x20000df4
 80067d8:	20000e28 	.word	0x20000e28
 80067dc:	20000d26 	.word	0x20000d26
 80067e0:	20000d27 	.word	0x20000d27
 80067e4:	200004c8 	.word	0x200004c8
 80067e8:	3c8efa35 	.word	0x3c8efa35
 80067ec:	20000c14 	.word	0x20000c14
 80067f0:	439d0000 	.word	0x439d0000
 80067f4:	42640000 	.word	0x42640000
 80067f8:	200000d0 	.word	0x200000d0
 80067fc:	3dcccccd 	.word	0x3dcccccd
 8006800:	43a68000 	.word	0x43a68000
 8006804:	40a00000 	.word	0x40a00000
 8006808:	20000e29 	.word	0x20000e29
 800680c:	20000d2c 	.word	0x20000d2c
 8006810:	20000d28 	.word	0x20000d28

08006814 <mavlink_tx_cpl_callback>:
/*
 * 
 */
uint32_t temp;
void mavlink_tx_cpl_callback()
{   
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
	//send_time_us = millis() - temp;
	//temp = millis();
	isTxcpl = 1;
 8006818:	4b03      	ldr	r3, [pc, #12]	@ (8006828 <mavlink_tx_cpl_callback+0x14>)
 800681a:	2201      	movs	r2, #1
 800681c:	601a      	str	r2, [r3, #0]
}
 800681e:	bf00      	nop
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	20000df4 	.word	0x20000df4

0800682c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006830:	4b08      	ldr	r3, [pc, #32]	@ (8006854 <HAL_Init+0x28>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a07      	ldr	r2, [pc, #28]	@ (8006854 <HAL_Init+0x28>)
 8006836:	f043 0310 	orr.w	r3, r3, #16
 800683a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800683c:	2003      	movs	r0, #3
 800683e:	f000 f8f5 	bl	8006a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006842:	200f      	movs	r0, #15
 8006844:	f7fe f906 	bl	8004a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006848:	f7fe f8cc 	bl	80049e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	40022000 	.word	0x40022000

08006858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800685c:	4b05      	ldr	r3, [pc, #20]	@ (8006874 <HAL_IncTick+0x1c>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	4b05      	ldr	r3, [pc, #20]	@ (8006878 <HAL_IncTick+0x20>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4413      	add	r3, r2
 8006868:	4a03      	ldr	r2, [pc, #12]	@ (8006878 <HAL_IncTick+0x20>)
 800686a:	6013      	str	r3, [r2, #0]
}
 800686c:	bf00      	nop
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr
 8006874:	2000003c 	.word	0x2000003c
 8006878:	20000e2c 	.word	0x20000e2c

0800687c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
  return uwTick;
 8006880:	4b02      	ldr	r3, [pc, #8]	@ (800688c <HAL_GetTick+0x10>)
 8006882:	681b      	ldr	r3, [r3, #0]
}
 8006884:	4618      	mov	r0, r3
 8006886:	46bd      	mov	sp, r7
 8006888:	bc80      	pop	{r7}
 800688a:	4770      	bx	lr
 800688c:	20000e2c 	.word	0x20000e2c

08006890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006898:	f7ff fff0 	bl	800687c <HAL_GetTick>
 800689c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a8:	d005      	beq.n	80068b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80068aa:	4b0a      	ldr	r3, [pc, #40]	@ (80068d4 <HAL_Delay+0x44>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4413      	add	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80068b6:	bf00      	nop
 80068b8:	f7ff ffe0 	bl	800687c <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d8f7      	bhi.n	80068b8 <HAL_Delay+0x28>
  {
  }
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	2000003c 	.word	0x2000003c

080068d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068e8:	4b0c      	ldr	r3, [pc, #48]	@ (800691c <__NVIC_SetPriorityGrouping+0x44>)
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80068f4:	4013      	ands	r3, r2
 80068f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800690a:	4a04      	ldr	r2, [pc, #16]	@ (800691c <__NVIC_SetPriorityGrouping+0x44>)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	60d3      	str	r3, [r2, #12]
}
 8006910:	bf00      	nop
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	bc80      	pop	{r7}
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	e000ed00 	.word	0xe000ed00

08006920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006924:	4b04      	ldr	r3, [pc, #16]	@ (8006938 <__NVIC_GetPriorityGrouping+0x18>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	0a1b      	lsrs	r3, r3, #8
 800692a:	f003 0307 	and.w	r3, r3, #7
}
 800692e:	4618      	mov	r0, r3
 8006930:	46bd      	mov	sp, r7
 8006932:	bc80      	pop	{r7}
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	e000ed00 	.word	0xe000ed00

0800693c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	4603      	mov	r3, r0
 8006944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800694a:	2b00      	cmp	r3, #0
 800694c:	db0b      	blt.n	8006966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800694e:	79fb      	ldrb	r3, [r7, #7]
 8006950:	f003 021f 	and.w	r2, r3, #31
 8006954:	4906      	ldr	r1, [pc, #24]	@ (8006970 <__NVIC_EnableIRQ+0x34>)
 8006956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	2001      	movs	r0, #1
 800695e:	fa00 f202 	lsl.w	r2, r0, r2
 8006962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	bc80      	pop	{r7}
 800696e:	4770      	bx	lr
 8006970:	e000e100 	.word	0xe000e100

08006974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	6039      	str	r1, [r7, #0]
 800697e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006984:	2b00      	cmp	r3, #0
 8006986:	db0a      	blt.n	800699e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	b2da      	uxtb	r2, r3
 800698c:	490c      	ldr	r1, [pc, #48]	@ (80069c0 <__NVIC_SetPriority+0x4c>)
 800698e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006992:	0112      	lsls	r2, r2, #4
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	440b      	add	r3, r1
 8006998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800699c:	e00a      	b.n	80069b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	4908      	ldr	r1, [pc, #32]	@ (80069c4 <__NVIC_SetPriority+0x50>)
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	3b04      	subs	r3, #4
 80069ac:	0112      	lsls	r2, r2, #4
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	440b      	add	r3, r1
 80069b2:	761a      	strb	r2, [r3, #24]
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bc80      	pop	{r7}
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	e000e100 	.word	0xe000e100
 80069c4:	e000ed00 	.word	0xe000ed00

080069c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b089      	sub	sp, #36	@ 0x24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	f1c3 0307 	rsb	r3, r3, #7
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	bf28      	it	cs
 80069e6:	2304      	movcs	r3, #4
 80069e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	3304      	adds	r3, #4
 80069ee:	2b06      	cmp	r3, #6
 80069f0:	d902      	bls.n	80069f8 <NVIC_EncodePriority+0x30>
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	3b03      	subs	r3, #3
 80069f6:	e000      	b.n	80069fa <NVIC_EncodePriority+0x32>
 80069f8:	2300      	movs	r3, #0
 80069fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	fa02 f303 	lsl.w	r3, r2, r3
 8006a06:	43da      	mvns	r2, r3
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	401a      	ands	r2, r3
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a10:	f04f 31ff 	mov.w	r1, #4294967295
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1a:	43d9      	mvns	r1, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a20:	4313      	orrs	r3, r2
         );
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3724      	adds	r7, #36	@ 0x24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bc80      	pop	{r7}
 8006a2a:	4770      	bx	lr

08006a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff ff4f 	bl	80068d8 <__NVIC_SetPriorityGrouping>
}
 8006a3a:	bf00      	nop
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b086      	sub	sp, #24
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	4603      	mov	r3, r0
 8006a4a:	60b9      	str	r1, [r7, #8]
 8006a4c:	607a      	str	r2, [r7, #4]
 8006a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a54:	f7ff ff64 	bl	8006920 <__NVIC_GetPriorityGrouping>
 8006a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	6978      	ldr	r0, [r7, #20]
 8006a60:	f7ff ffb2 	bl	80069c8 <NVIC_EncodePriority>
 8006a64:	4602      	mov	r2, r0
 8006a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff ff81 	bl	8006974 <__NVIC_SetPriority>
}
 8006a72:	bf00      	nop
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	4603      	mov	r3, r0
 8006a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff ff57 	bl	800693c <__NVIC_EnableIRQ>
}
 8006a8e:	bf00      	nop
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e059      	b.n	8006b62 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8006b6c <HAL_DMA_Init+0xd4>)
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d80f      	bhi.n	8006ada <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8006b70 <HAL_DMA_Init+0xd8>)
 8006ac2:	4413      	add	r3, r2
 8006ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8006b74 <HAL_DMA_Init+0xdc>)
 8006ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aca:	091b      	lsrs	r3, r3, #4
 8006acc:	009a      	lsls	r2, r3, #2
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a28      	ldr	r2, [pc, #160]	@ (8006b78 <HAL_DMA_Init+0xe0>)
 8006ad6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006ad8:	e00e      	b.n	8006af8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	4b26      	ldr	r3, [pc, #152]	@ (8006b7c <HAL_DMA_Init+0xe4>)
 8006ae2:	4413      	add	r3, r2
 8006ae4:	4a23      	ldr	r2, [pc, #140]	@ (8006b74 <HAL_DMA_Init+0xdc>)
 8006ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aea:	091b      	lsrs	r3, r3, #4
 8006aec:	009a      	lsls	r2, r3, #2
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a22      	ldr	r2, [pc, #136]	@ (8006b80 <HAL_DMA_Init+0xe8>)
 8006af6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006b0e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006b12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr
 8006b6c:	40020407 	.word	0x40020407
 8006b70:	bffdfff8 	.word	0xbffdfff8
 8006b74:	cccccccd 	.word	0xcccccccd
 8006b78:	40020000 	.word	0x40020000
 8006b7c:	bffdfbf8 	.word	0xbffdfbf8
 8006b80:	40020400 	.word	0x40020400

08006b84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_DMA_Start_IT+0x20>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e04b      	b.n	8006c3c <HAL_DMA_Start_IT+0xb8>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d13a      	bne.n	8006c2e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0201 	bic.w	r2, r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 fbb1 	bl	8007344 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d008      	beq.n	8006bfc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 020e 	orr.w	r2, r2, #14
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	e00f      	b.n	8006c1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0204 	bic.w	r2, r2, #4
 8006c0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 020a 	orr.w	r2, r2, #10
 8006c1a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0201 	orr.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	e005      	b.n	8006c3a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006c36:	2302      	movs	r3, #2
 8006c38:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d008      	beq.n	8006c6e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2204      	movs	r2, #4
 8006c60:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e020      	b.n	8006cb0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 020e 	bic.w	r2, r2, #14
 8006c7c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0201 	bic.w	r2, r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c96:	2101      	movs	r1, #1
 8006c98:	fa01 f202 	lsl.w	r2, r1, r2
 8006c9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bc80      	pop	{r7}
 8006cb8:	4770      	bx	lr
	...

08006cbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d005      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	73fb      	strb	r3, [r7, #15]
 8006cde:	e0d6      	b.n	8006e8e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 020e 	bic.w	r2, r2, #14
 8006cee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0201 	bic.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	4b64      	ldr	r3, [pc, #400]	@ (8006e98 <HAL_DMA_Abort_IT+0x1dc>)
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d958      	bls.n	8006dbe <HAL_DMA_Abort_IT+0x102>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a62      	ldr	r2, [pc, #392]	@ (8006e9c <HAL_DMA_Abort_IT+0x1e0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d04f      	beq.n	8006db6 <HAL_DMA_Abort_IT+0xfa>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a61      	ldr	r2, [pc, #388]	@ (8006ea0 <HAL_DMA_Abort_IT+0x1e4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d048      	beq.n	8006db2 <HAL_DMA_Abort_IT+0xf6>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a5f      	ldr	r2, [pc, #380]	@ (8006ea4 <HAL_DMA_Abort_IT+0x1e8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d040      	beq.n	8006dac <HAL_DMA_Abort_IT+0xf0>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8006ea8 <HAL_DMA_Abort_IT+0x1ec>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d038      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xea>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a5c      	ldr	r2, [pc, #368]	@ (8006eac <HAL_DMA_Abort_IT+0x1f0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d030      	beq.n	8006da0 <HAL_DMA_Abort_IT+0xe4>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a5b      	ldr	r2, [pc, #364]	@ (8006eb0 <HAL_DMA_Abort_IT+0x1f4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d028      	beq.n	8006d9a <HAL_DMA_Abort_IT+0xde>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a52      	ldr	r2, [pc, #328]	@ (8006e98 <HAL_DMA_Abort_IT+0x1dc>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d020      	beq.n	8006d94 <HAL_DMA_Abort_IT+0xd8>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a57      	ldr	r2, [pc, #348]	@ (8006eb4 <HAL_DMA_Abort_IT+0x1f8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d019      	beq.n	8006d90 <HAL_DMA_Abort_IT+0xd4>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a55      	ldr	r2, [pc, #340]	@ (8006eb8 <HAL_DMA_Abort_IT+0x1fc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d012      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xd0>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a54      	ldr	r2, [pc, #336]	@ (8006ebc <HAL_DMA_Abort_IT+0x200>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00a      	beq.n	8006d86 <HAL_DMA_Abort_IT+0xca>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a52      	ldr	r2, [pc, #328]	@ (8006ec0 <HAL_DMA_Abort_IT+0x204>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d102      	bne.n	8006d80 <HAL_DMA_Abort_IT+0xc4>
 8006d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d7e:	e01b      	b.n	8006db8 <HAL_DMA_Abort_IT+0xfc>
 8006d80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006d84:	e018      	b.n	8006db8 <HAL_DMA_Abort_IT+0xfc>
 8006d86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006d8a:	e015      	b.n	8006db8 <HAL_DMA_Abort_IT+0xfc>
 8006d8c:	2310      	movs	r3, #16
 8006d8e:	e013      	b.n	8006db8 <HAL_DMA_Abort_IT+0xfc>
 8006d90:	2301      	movs	r3, #1
 8006d92:	e011      	b.n	8006db8 <HAL_DMA_Abort_IT+0xfc>
 8006d94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d98:	e00e      	b.n	8006db8 <HAL_DMA_Abort_IT+0xfc>
 8006d9a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006d9e:	e00b      	b.n	8006db8 <HAL_DMA_Abort_IT+0xfc>
 8006da0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006da4:	e008      	b.n	8006db8 <HAL_DMA_Abort_IT+0xfc>
 8006da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006daa:	e005      	b.n	8006db8 <HAL_DMA_Abort_IT+0xfc>
 8006dac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006db0:	e002      	b.n	8006db8 <HAL_DMA_Abort_IT+0xfc>
 8006db2:	2310      	movs	r3, #16
 8006db4:	e000      	b.n	8006db8 <HAL_DMA_Abort_IT+0xfc>
 8006db6:	2301      	movs	r3, #1
 8006db8:	4a42      	ldr	r2, [pc, #264]	@ (8006ec4 <HAL_DMA_Abort_IT+0x208>)
 8006dba:	6053      	str	r3, [r2, #4]
 8006dbc:	e057      	b.n	8006e6e <HAL_DMA_Abort_IT+0x1b2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a36      	ldr	r2, [pc, #216]	@ (8006e9c <HAL_DMA_Abort_IT+0x1e0>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d04f      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x1ac>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a34      	ldr	r2, [pc, #208]	@ (8006ea0 <HAL_DMA_Abort_IT+0x1e4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d048      	beq.n	8006e64 <HAL_DMA_Abort_IT+0x1a8>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a33      	ldr	r2, [pc, #204]	@ (8006ea4 <HAL_DMA_Abort_IT+0x1e8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d040      	beq.n	8006e5e <HAL_DMA_Abort_IT+0x1a2>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a31      	ldr	r2, [pc, #196]	@ (8006ea8 <HAL_DMA_Abort_IT+0x1ec>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d038      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x19c>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a30      	ldr	r2, [pc, #192]	@ (8006eac <HAL_DMA_Abort_IT+0x1f0>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d030      	beq.n	8006e52 <HAL_DMA_Abort_IT+0x196>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a2e      	ldr	r2, [pc, #184]	@ (8006eb0 <HAL_DMA_Abort_IT+0x1f4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d028      	beq.n	8006e4c <HAL_DMA_Abort_IT+0x190>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a26      	ldr	r2, [pc, #152]	@ (8006e98 <HAL_DMA_Abort_IT+0x1dc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d020      	beq.n	8006e46 <HAL_DMA_Abort_IT+0x18a>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a2a      	ldr	r2, [pc, #168]	@ (8006eb4 <HAL_DMA_Abort_IT+0x1f8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d019      	beq.n	8006e42 <HAL_DMA_Abort_IT+0x186>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a29      	ldr	r2, [pc, #164]	@ (8006eb8 <HAL_DMA_Abort_IT+0x1fc>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d012      	beq.n	8006e3e <HAL_DMA_Abort_IT+0x182>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a27      	ldr	r2, [pc, #156]	@ (8006ebc <HAL_DMA_Abort_IT+0x200>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d00a      	beq.n	8006e38 <HAL_DMA_Abort_IT+0x17c>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a26      	ldr	r2, [pc, #152]	@ (8006ec0 <HAL_DMA_Abort_IT+0x204>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d102      	bne.n	8006e32 <HAL_DMA_Abort_IT+0x176>
 8006e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e30:	e01b      	b.n	8006e6a <HAL_DMA_Abort_IT+0x1ae>
 8006e32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006e36:	e018      	b.n	8006e6a <HAL_DMA_Abort_IT+0x1ae>
 8006e38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e3c:	e015      	b.n	8006e6a <HAL_DMA_Abort_IT+0x1ae>
 8006e3e:	2310      	movs	r3, #16
 8006e40:	e013      	b.n	8006e6a <HAL_DMA_Abort_IT+0x1ae>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e011      	b.n	8006e6a <HAL_DMA_Abort_IT+0x1ae>
 8006e46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e4a:	e00e      	b.n	8006e6a <HAL_DMA_Abort_IT+0x1ae>
 8006e4c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006e50:	e00b      	b.n	8006e6a <HAL_DMA_Abort_IT+0x1ae>
 8006e52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006e56:	e008      	b.n	8006e6a <HAL_DMA_Abort_IT+0x1ae>
 8006e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e5c:	e005      	b.n	8006e6a <HAL_DMA_Abort_IT+0x1ae>
 8006e5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e62:	e002      	b.n	8006e6a <HAL_DMA_Abort_IT+0x1ae>
 8006e64:	2310      	movs	r3, #16
 8006e66:	e000      	b.n	8006e6a <HAL_DMA_Abort_IT+0x1ae>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	4a17      	ldr	r2, [pc, #92]	@ (8006ec8 <HAL_DMA_Abort_IT+0x20c>)
 8006e6c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	4798      	blx	r3
    } 
  }
  return status;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	40020080 	.word	0x40020080
 8006e9c:	40020008 	.word	0x40020008
 8006ea0:	4002001c 	.word	0x4002001c
 8006ea4:	40020030 	.word	0x40020030
 8006ea8:	40020044 	.word	0x40020044
 8006eac:	40020058 	.word	0x40020058
 8006eb0:	4002006c 	.word	0x4002006c
 8006eb4:	40020408 	.word	0x40020408
 8006eb8:	4002041c 	.word	0x4002041c
 8006ebc:	40020430 	.word	0x40020430
 8006ec0:	40020444 	.word	0x40020444
 8006ec4:	40020400 	.word	0x40020400
 8006ec8:	40020000 	.word	0x40020000

08006ecc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee8:	2204      	movs	r2, #4
 8006eea:	409a      	lsls	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 80f1 	beq.w	80070d8 <HAL_DMA_IRQHandler+0x20c>
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 80eb 	beq.w	80070d8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0320 	and.w	r3, r3, #32
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d107      	bne.n	8006f20 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0204 	bic.w	r2, r2, #4
 8006f1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	4b5f      	ldr	r3, [pc, #380]	@ (80070a4 <HAL_DMA_IRQHandler+0x1d8>)
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d958      	bls.n	8006fde <HAL_DMA_IRQHandler+0x112>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a5d      	ldr	r2, [pc, #372]	@ (80070a8 <HAL_DMA_IRQHandler+0x1dc>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d04f      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x10a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a5c      	ldr	r2, [pc, #368]	@ (80070ac <HAL_DMA_IRQHandler+0x1e0>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d048      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0x106>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a5a      	ldr	r2, [pc, #360]	@ (80070b0 <HAL_DMA_IRQHandler+0x1e4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d040      	beq.n	8006fcc <HAL_DMA_IRQHandler+0x100>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a59      	ldr	r2, [pc, #356]	@ (80070b4 <HAL_DMA_IRQHandler+0x1e8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d038      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xfa>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a57      	ldr	r2, [pc, #348]	@ (80070b8 <HAL_DMA_IRQHandler+0x1ec>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d030      	beq.n	8006fc0 <HAL_DMA_IRQHandler+0xf4>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a56      	ldr	r2, [pc, #344]	@ (80070bc <HAL_DMA_IRQHandler+0x1f0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d028      	beq.n	8006fba <HAL_DMA_IRQHandler+0xee>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a4d      	ldr	r2, [pc, #308]	@ (80070a4 <HAL_DMA_IRQHandler+0x1d8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d020      	beq.n	8006fb4 <HAL_DMA_IRQHandler+0xe8>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a52      	ldr	r2, [pc, #328]	@ (80070c0 <HAL_DMA_IRQHandler+0x1f4>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d019      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0xe4>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a50      	ldr	r2, [pc, #320]	@ (80070c4 <HAL_DMA_IRQHandler+0x1f8>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d012      	beq.n	8006fac <HAL_DMA_IRQHandler+0xe0>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a4f      	ldr	r2, [pc, #316]	@ (80070c8 <HAL_DMA_IRQHandler+0x1fc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00a      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xda>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a4d      	ldr	r2, [pc, #308]	@ (80070cc <HAL_DMA_IRQHandler+0x200>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d102      	bne.n	8006fa0 <HAL_DMA_IRQHandler+0xd4>
 8006f9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006f9e:	e01b      	b.n	8006fd8 <HAL_DMA_IRQHandler+0x10c>
 8006fa0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006fa4:	e018      	b.n	8006fd8 <HAL_DMA_IRQHandler+0x10c>
 8006fa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006faa:	e015      	b.n	8006fd8 <HAL_DMA_IRQHandler+0x10c>
 8006fac:	2340      	movs	r3, #64	@ 0x40
 8006fae:	e013      	b.n	8006fd8 <HAL_DMA_IRQHandler+0x10c>
 8006fb0:	2304      	movs	r3, #4
 8006fb2:	e011      	b.n	8006fd8 <HAL_DMA_IRQHandler+0x10c>
 8006fb4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006fb8:	e00e      	b.n	8006fd8 <HAL_DMA_IRQHandler+0x10c>
 8006fba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006fbe:	e00b      	b.n	8006fd8 <HAL_DMA_IRQHandler+0x10c>
 8006fc0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006fc4:	e008      	b.n	8006fd8 <HAL_DMA_IRQHandler+0x10c>
 8006fc6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006fca:	e005      	b.n	8006fd8 <HAL_DMA_IRQHandler+0x10c>
 8006fcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fd0:	e002      	b.n	8006fd8 <HAL_DMA_IRQHandler+0x10c>
 8006fd2:	2340      	movs	r3, #64	@ 0x40
 8006fd4:	e000      	b.n	8006fd8 <HAL_DMA_IRQHandler+0x10c>
 8006fd6:	2304      	movs	r3, #4
 8006fd8:	4a3d      	ldr	r2, [pc, #244]	@ (80070d0 <HAL_DMA_IRQHandler+0x204>)
 8006fda:	6053      	str	r3, [r2, #4]
 8006fdc:	e057      	b.n	800708e <HAL_DMA_IRQHandler+0x1c2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a31      	ldr	r2, [pc, #196]	@ (80070a8 <HAL_DMA_IRQHandler+0x1dc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d04f      	beq.n	8007088 <HAL_DMA_IRQHandler+0x1bc>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a2f      	ldr	r2, [pc, #188]	@ (80070ac <HAL_DMA_IRQHandler+0x1e0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d048      	beq.n	8007084 <HAL_DMA_IRQHandler+0x1b8>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a2e      	ldr	r2, [pc, #184]	@ (80070b0 <HAL_DMA_IRQHandler+0x1e4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d040      	beq.n	800707e <HAL_DMA_IRQHandler+0x1b2>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a2c      	ldr	r2, [pc, #176]	@ (80070b4 <HAL_DMA_IRQHandler+0x1e8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d038      	beq.n	8007078 <HAL_DMA_IRQHandler+0x1ac>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a2b      	ldr	r2, [pc, #172]	@ (80070b8 <HAL_DMA_IRQHandler+0x1ec>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d030      	beq.n	8007072 <HAL_DMA_IRQHandler+0x1a6>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a29      	ldr	r2, [pc, #164]	@ (80070bc <HAL_DMA_IRQHandler+0x1f0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d028      	beq.n	800706c <HAL_DMA_IRQHandler+0x1a0>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a21      	ldr	r2, [pc, #132]	@ (80070a4 <HAL_DMA_IRQHandler+0x1d8>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d020      	beq.n	8007066 <HAL_DMA_IRQHandler+0x19a>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a25      	ldr	r2, [pc, #148]	@ (80070c0 <HAL_DMA_IRQHandler+0x1f4>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d019      	beq.n	8007062 <HAL_DMA_IRQHandler+0x196>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a24      	ldr	r2, [pc, #144]	@ (80070c4 <HAL_DMA_IRQHandler+0x1f8>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d012      	beq.n	800705e <HAL_DMA_IRQHandler+0x192>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a22      	ldr	r2, [pc, #136]	@ (80070c8 <HAL_DMA_IRQHandler+0x1fc>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00a      	beq.n	8007058 <HAL_DMA_IRQHandler+0x18c>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a21      	ldr	r2, [pc, #132]	@ (80070cc <HAL_DMA_IRQHandler+0x200>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d102      	bne.n	8007052 <HAL_DMA_IRQHandler+0x186>
 800704c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007050:	e01b      	b.n	800708a <HAL_DMA_IRQHandler+0x1be>
 8007052:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007056:	e018      	b.n	800708a <HAL_DMA_IRQHandler+0x1be>
 8007058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800705c:	e015      	b.n	800708a <HAL_DMA_IRQHandler+0x1be>
 800705e:	2340      	movs	r3, #64	@ 0x40
 8007060:	e013      	b.n	800708a <HAL_DMA_IRQHandler+0x1be>
 8007062:	2304      	movs	r3, #4
 8007064:	e011      	b.n	800708a <HAL_DMA_IRQHandler+0x1be>
 8007066:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800706a:	e00e      	b.n	800708a <HAL_DMA_IRQHandler+0x1be>
 800706c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007070:	e00b      	b.n	800708a <HAL_DMA_IRQHandler+0x1be>
 8007072:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007076:	e008      	b.n	800708a <HAL_DMA_IRQHandler+0x1be>
 8007078:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800707c:	e005      	b.n	800708a <HAL_DMA_IRQHandler+0x1be>
 800707e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007082:	e002      	b.n	800708a <HAL_DMA_IRQHandler+0x1be>
 8007084:	2340      	movs	r3, #64	@ 0x40
 8007086:	e000      	b.n	800708a <HAL_DMA_IRQHandler+0x1be>
 8007088:	2304      	movs	r3, #4
 800708a:	4a12      	ldr	r2, [pc, #72]	@ (80070d4 <HAL_DMA_IRQHandler+0x208>)
 800708c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 8136 	beq.w	8007304 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80070a0:	e130      	b.n	8007304 <HAL_DMA_IRQHandler+0x438>
 80070a2:	bf00      	nop
 80070a4:	40020080 	.word	0x40020080
 80070a8:	40020008 	.word	0x40020008
 80070ac:	4002001c 	.word	0x4002001c
 80070b0:	40020030 	.word	0x40020030
 80070b4:	40020044 	.word	0x40020044
 80070b8:	40020058 	.word	0x40020058
 80070bc:	4002006c 	.word	0x4002006c
 80070c0:	40020408 	.word	0x40020408
 80070c4:	4002041c 	.word	0x4002041c
 80070c8:	40020430 	.word	0x40020430
 80070cc:	40020444 	.word	0x40020444
 80070d0:	40020400 	.word	0x40020400
 80070d4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070dc:	2202      	movs	r2, #2
 80070de:	409a      	lsls	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4013      	ands	r3, r2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80dd 	beq.w	80072a4 <HAL_DMA_IRQHandler+0x3d8>
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 80d7 	beq.w	80072a4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10b      	bne.n	800711c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 020a 	bic.w	r2, r2, #10
 8007112:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	4b7b      	ldr	r3, [pc, #492]	@ (8007310 <HAL_DMA_IRQHandler+0x444>)
 8007124:	429a      	cmp	r2, r3
 8007126:	d958      	bls.n	80071da <HAL_DMA_IRQHandler+0x30e>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a79      	ldr	r2, [pc, #484]	@ (8007314 <HAL_DMA_IRQHandler+0x448>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d04f      	beq.n	80071d2 <HAL_DMA_IRQHandler+0x306>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a78      	ldr	r2, [pc, #480]	@ (8007318 <HAL_DMA_IRQHandler+0x44c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d048      	beq.n	80071ce <HAL_DMA_IRQHandler+0x302>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a76      	ldr	r2, [pc, #472]	@ (800731c <HAL_DMA_IRQHandler+0x450>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d040      	beq.n	80071c8 <HAL_DMA_IRQHandler+0x2fc>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a75      	ldr	r2, [pc, #468]	@ (8007320 <HAL_DMA_IRQHandler+0x454>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d038      	beq.n	80071c2 <HAL_DMA_IRQHandler+0x2f6>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a73      	ldr	r2, [pc, #460]	@ (8007324 <HAL_DMA_IRQHandler+0x458>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d030      	beq.n	80071bc <HAL_DMA_IRQHandler+0x2f0>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a72      	ldr	r2, [pc, #456]	@ (8007328 <HAL_DMA_IRQHandler+0x45c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d028      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x2ea>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a69      	ldr	r2, [pc, #420]	@ (8007310 <HAL_DMA_IRQHandler+0x444>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d020      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x2e4>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a6e      	ldr	r2, [pc, #440]	@ (800732c <HAL_DMA_IRQHandler+0x460>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d019      	beq.n	80071ac <HAL_DMA_IRQHandler+0x2e0>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a6c      	ldr	r2, [pc, #432]	@ (8007330 <HAL_DMA_IRQHandler+0x464>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d012      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x2dc>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a6b      	ldr	r2, [pc, #428]	@ (8007334 <HAL_DMA_IRQHandler+0x468>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00a      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x2d6>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a69      	ldr	r2, [pc, #420]	@ (8007338 <HAL_DMA_IRQHandler+0x46c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d102      	bne.n	800719c <HAL_DMA_IRQHandler+0x2d0>
 8007196:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800719a:	e01b      	b.n	80071d4 <HAL_DMA_IRQHandler+0x308>
 800719c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80071a0:	e018      	b.n	80071d4 <HAL_DMA_IRQHandler+0x308>
 80071a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071a6:	e015      	b.n	80071d4 <HAL_DMA_IRQHandler+0x308>
 80071a8:	2320      	movs	r3, #32
 80071aa:	e013      	b.n	80071d4 <HAL_DMA_IRQHandler+0x308>
 80071ac:	2302      	movs	r3, #2
 80071ae:	e011      	b.n	80071d4 <HAL_DMA_IRQHandler+0x308>
 80071b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80071b4:	e00e      	b.n	80071d4 <HAL_DMA_IRQHandler+0x308>
 80071b6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80071ba:	e00b      	b.n	80071d4 <HAL_DMA_IRQHandler+0x308>
 80071bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80071c0:	e008      	b.n	80071d4 <HAL_DMA_IRQHandler+0x308>
 80071c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80071c6:	e005      	b.n	80071d4 <HAL_DMA_IRQHandler+0x308>
 80071c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071cc:	e002      	b.n	80071d4 <HAL_DMA_IRQHandler+0x308>
 80071ce:	2320      	movs	r3, #32
 80071d0:	e000      	b.n	80071d4 <HAL_DMA_IRQHandler+0x308>
 80071d2:	2302      	movs	r3, #2
 80071d4:	4a59      	ldr	r2, [pc, #356]	@ (800733c <HAL_DMA_IRQHandler+0x470>)
 80071d6:	6053      	str	r3, [r2, #4]
 80071d8:	e057      	b.n	800728a <HAL_DMA_IRQHandler+0x3be>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a4d      	ldr	r2, [pc, #308]	@ (8007314 <HAL_DMA_IRQHandler+0x448>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d04f      	beq.n	8007284 <HAL_DMA_IRQHandler+0x3b8>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a4b      	ldr	r2, [pc, #300]	@ (8007318 <HAL_DMA_IRQHandler+0x44c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d048      	beq.n	8007280 <HAL_DMA_IRQHandler+0x3b4>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a4a      	ldr	r2, [pc, #296]	@ (800731c <HAL_DMA_IRQHandler+0x450>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d040      	beq.n	800727a <HAL_DMA_IRQHandler+0x3ae>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a48      	ldr	r2, [pc, #288]	@ (8007320 <HAL_DMA_IRQHandler+0x454>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d038      	beq.n	8007274 <HAL_DMA_IRQHandler+0x3a8>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a47      	ldr	r2, [pc, #284]	@ (8007324 <HAL_DMA_IRQHandler+0x458>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d030      	beq.n	800726e <HAL_DMA_IRQHandler+0x3a2>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a45      	ldr	r2, [pc, #276]	@ (8007328 <HAL_DMA_IRQHandler+0x45c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d028      	beq.n	8007268 <HAL_DMA_IRQHandler+0x39c>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a3d      	ldr	r2, [pc, #244]	@ (8007310 <HAL_DMA_IRQHandler+0x444>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d020      	beq.n	8007262 <HAL_DMA_IRQHandler+0x396>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a41      	ldr	r2, [pc, #260]	@ (800732c <HAL_DMA_IRQHandler+0x460>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d019      	beq.n	800725e <HAL_DMA_IRQHandler+0x392>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a40      	ldr	r2, [pc, #256]	@ (8007330 <HAL_DMA_IRQHandler+0x464>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d012      	beq.n	800725a <HAL_DMA_IRQHandler+0x38e>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a3e      	ldr	r2, [pc, #248]	@ (8007334 <HAL_DMA_IRQHandler+0x468>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d00a      	beq.n	8007254 <HAL_DMA_IRQHandler+0x388>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a3d      	ldr	r2, [pc, #244]	@ (8007338 <HAL_DMA_IRQHandler+0x46c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d102      	bne.n	800724e <HAL_DMA_IRQHandler+0x382>
 8007248:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800724c:	e01b      	b.n	8007286 <HAL_DMA_IRQHandler+0x3ba>
 800724e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007252:	e018      	b.n	8007286 <HAL_DMA_IRQHandler+0x3ba>
 8007254:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007258:	e015      	b.n	8007286 <HAL_DMA_IRQHandler+0x3ba>
 800725a:	2320      	movs	r3, #32
 800725c:	e013      	b.n	8007286 <HAL_DMA_IRQHandler+0x3ba>
 800725e:	2302      	movs	r3, #2
 8007260:	e011      	b.n	8007286 <HAL_DMA_IRQHandler+0x3ba>
 8007262:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007266:	e00e      	b.n	8007286 <HAL_DMA_IRQHandler+0x3ba>
 8007268:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800726c:	e00b      	b.n	8007286 <HAL_DMA_IRQHandler+0x3ba>
 800726e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007272:	e008      	b.n	8007286 <HAL_DMA_IRQHandler+0x3ba>
 8007274:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007278:	e005      	b.n	8007286 <HAL_DMA_IRQHandler+0x3ba>
 800727a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800727e:	e002      	b.n	8007286 <HAL_DMA_IRQHandler+0x3ba>
 8007280:	2320      	movs	r3, #32
 8007282:	e000      	b.n	8007286 <HAL_DMA_IRQHandler+0x3ba>
 8007284:	2302      	movs	r3, #2
 8007286:	4a2e      	ldr	r2, [pc, #184]	@ (8007340 <HAL_DMA_IRQHandler+0x474>)
 8007288:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007296:	2b00      	cmp	r3, #0
 8007298:	d034      	beq.n	8007304 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80072a2:	e02f      	b.n	8007304 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a8:	2208      	movs	r2, #8
 80072aa:	409a      	lsls	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4013      	ands	r3, r2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d028      	beq.n	8007306 <HAL_DMA_IRQHandler+0x43a>
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f003 0308 	and.w	r3, r3, #8
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d023      	beq.n	8007306 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 020e 	bic.w	r2, r2, #14
 80072cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d6:	2101      	movs	r1, #1
 80072d8:	fa01 f202 	lsl.w	r2, r1, r2
 80072dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
    }
  }
  return;
 8007304:	bf00      	nop
 8007306:	bf00      	nop
}
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	40020080 	.word	0x40020080
 8007314:	40020008 	.word	0x40020008
 8007318:	4002001c 	.word	0x4002001c
 800731c:	40020030 	.word	0x40020030
 8007320:	40020044 	.word	0x40020044
 8007324:	40020058 	.word	0x40020058
 8007328:	4002006c 	.word	0x4002006c
 800732c:	40020408 	.word	0x40020408
 8007330:	4002041c 	.word	0x4002041c
 8007334:	40020430 	.word	0x40020430
 8007338:	40020444 	.word	0x40020444
 800733c:	40020400 	.word	0x40020400
 8007340:	40020000 	.word	0x40020000

08007344 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800735a:	2101      	movs	r1, #1
 800735c:	fa01 f202 	lsl.w	r2, r1, r2
 8007360:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2b10      	cmp	r3, #16
 8007370:	d108      	bne.n	8007384 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007382:	e007      	b.n	8007394 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	60da      	str	r2, [r3, #12]
}
 8007394:	bf00      	nop
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	bc80      	pop	{r7}
 800739c:	4770      	bx	lr
	...

080073a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b08b      	sub	sp, #44	@ 0x2c
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80073aa:	2300      	movs	r3, #0
 80073ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80073ae:	2300      	movs	r3, #0
 80073b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073b2:	e179      	b.n	80076a8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80073b4:	2201      	movs	r2, #1
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	4013      	ands	r3, r2
 80073c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	f040 8168 	bne.w	80076a2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	4a96      	ldr	r2, [pc, #600]	@ (8007630 <HAL_GPIO_Init+0x290>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d05e      	beq.n	800749a <HAL_GPIO_Init+0xfa>
 80073dc:	4a94      	ldr	r2, [pc, #592]	@ (8007630 <HAL_GPIO_Init+0x290>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d875      	bhi.n	80074ce <HAL_GPIO_Init+0x12e>
 80073e2:	4a94      	ldr	r2, [pc, #592]	@ (8007634 <HAL_GPIO_Init+0x294>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d058      	beq.n	800749a <HAL_GPIO_Init+0xfa>
 80073e8:	4a92      	ldr	r2, [pc, #584]	@ (8007634 <HAL_GPIO_Init+0x294>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d86f      	bhi.n	80074ce <HAL_GPIO_Init+0x12e>
 80073ee:	4a92      	ldr	r2, [pc, #584]	@ (8007638 <HAL_GPIO_Init+0x298>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d052      	beq.n	800749a <HAL_GPIO_Init+0xfa>
 80073f4:	4a90      	ldr	r2, [pc, #576]	@ (8007638 <HAL_GPIO_Init+0x298>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d869      	bhi.n	80074ce <HAL_GPIO_Init+0x12e>
 80073fa:	4a90      	ldr	r2, [pc, #576]	@ (800763c <HAL_GPIO_Init+0x29c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d04c      	beq.n	800749a <HAL_GPIO_Init+0xfa>
 8007400:	4a8e      	ldr	r2, [pc, #568]	@ (800763c <HAL_GPIO_Init+0x29c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d863      	bhi.n	80074ce <HAL_GPIO_Init+0x12e>
 8007406:	4a8e      	ldr	r2, [pc, #568]	@ (8007640 <HAL_GPIO_Init+0x2a0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d046      	beq.n	800749a <HAL_GPIO_Init+0xfa>
 800740c:	4a8c      	ldr	r2, [pc, #560]	@ (8007640 <HAL_GPIO_Init+0x2a0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d85d      	bhi.n	80074ce <HAL_GPIO_Init+0x12e>
 8007412:	2b12      	cmp	r3, #18
 8007414:	d82a      	bhi.n	800746c <HAL_GPIO_Init+0xcc>
 8007416:	2b12      	cmp	r3, #18
 8007418:	d859      	bhi.n	80074ce <HAL_GPIO_Init+0x12e>
 800741a:	a201      	add	r2, pc, #4	@ (adr r2, 8007420 <HAL_GPIO_Init+0x80>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	0800749b 	.word	0x0800749b
 8007424:	08007475 	.word	0x08007475
 8007428:	08007487 	.word	0x08007487
 800742c:	080074c9 	.word	0x080074c9
 8007430:	080074cf 	.word	0x080074cf
 8007434:	080074cf 	.word	0x080074cf
 8007438:	080074cf 	.word	0x080074cf
 800743c:	080074cf 	.word	0x080074cf
 8007440:	080074cf 	.word	0x080074cf
 8007444:	080074cf 	.word	0x080074cf
 8007448:	080074cf 	.word	0x080074cf
 800744c:	080074cf 	.word	0x080074cf
 8007450:	080074cf 	.word	0x080074cf
 8007454:	080074cf 	.word	0x080074cf
 8007458:	080074cf 	.word	0x080074cf
 800745c:	080074cf 	.word	0x080074cf
 8007460:	080074cf 	.word	0x080074cf
 8007464:	0800747d 	.word	0x0800747d
 8007468:	08007491 	.word	0x08007491
 800746c:	4a75      	ldr	r2, [pc, #468]	@ (8007644 <HAL_GPIO_Init+0x2a4>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d013      	beq.n	800749a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007472:	e02c      	b.n	80074ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	623b      	str	r3, [r7, #32]
          break;
 800747a:	e029      	b.n	80074d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	3304      	adds	r3, #4
 8007482:	623b      	str	r3, [r7, #32]
          break;
 8007484:	e024      	b.n	80074d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	3308      	adds	r3, #8
 800748c:	623b      	str	r3, [r7, #32]
          break;
 800748e:	e01f      	b.n	80074d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	330c      	adds	r3, #12
 8007496:	623b      	str	r3, [r7, #32]
          break;
 8007498:	e01a      	b.n	80074d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80074a2:	2304      	movs	r3, #4
 80074a4:	623b      	str	r3, [r7, #32]
          break;
 80074a6:	e013      	b.n	80074d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d105      	bne.n	80074bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80074b0:	2308      	movs	r3, #8
 80074b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	611a      	str	r2, [r3, #16]
          break;
 80074ba:	e009      	b.n	80074d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80074bc:	2308      	movs	r3, #8
 80074be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	69fa      	ldr	r2, [r7, #28]
 80074c4:	615a      	str	r2, [r3, #20]
          break;
 80074c6:	e003      	b.n	80074d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80074c8:	2300      	movs	r3, #0
 80074ca:	623b      	str	r3, [r7, #32]
          break;
 80074cc:	e000      	b.n	80074d0 <HAL_GPIO_Init+0x130>
          break;
 80074ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	2bff      	cmp	r3, #255	@ 0xff
 80074d4:	d801      	bhi.n	80074da <HAL_GPIO_Init+0x13a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	e001      	b.n	80074de <HAL_GPIO_Init+0x13e>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3304      	adds	r3, #4
 80074de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	2bff      	cmp	r3, #255	@ 0xff
 80074e4:	d802      	bhi.n	80074ec <HAL_GPIO_Init+0x14c>
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	e002      	b.n	80074f2 <HAL_GPIO_Init+0x152>
 80074ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ee:	3b08      	subs	r3, #8
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	210f      	movs	r1, #15
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007500:	43db      	mvns	r3, r3
 8007502:	401a      	ands	r2, r3
 8007504:	6a39      	ldr	r1, [r7, #32]
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	fa01 f303 	lsl.w	r3, r1, r3
 800750c:	431a      	orrs	r2, r3
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 80c1 	beq.w	80076a2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007520:	4b49      	ldr	r3, [pc, #292]	@ (8007648 <HAL_GPIO_Init+0x2a8>)
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	4a48      	ldr	r2, [pc, #288]	@ (8007648 <HAL_GPIO_Init+0x2a8>)
 8007526:	f043 0301 	orr.w	r3, r3, #1
 800752a:	6193      	str	r3, [r2, #24]
 800752c:	4b46      	ldr	r3, [pc, #280]	@ (8007648 <HAL_GPIO_Init+0x2a8>)
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	60bb      	str	r3, [r7, #8]
 8007536:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007538:	4a44      	ldr	r2, [pc, #272]	@ (800764c <HAL_GPIO_Init+0x2ac>)
 800753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753c:	089b      	lsrs	r3, r3, #2
 800753e:	3302      	adds	r3, #2
 8007540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007544:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	f003 0303 	and.w	r3, r3, #3
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	220f      	movs	r2, #15
 8007550:	fa02 f303 	lsl.w	r3, r2, r3
 8007554:	43db      	mvns	r3, r3
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	4013      	ands	r3, r2
 800755a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a3c      	ldr	r2, [pc, #240]	@ (8007650 <HAL_GPIO_Init+0x2b0>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d01f      	beq.n	80075a4 <HAL_GPIO_Init+0x204>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a3b      	ldr	r2, [pc, #236]	@ (8007654 <HAL_GPIO_Init+0x2b4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d019      	beq.n	80075a0 <HAL_GPIO_Init+0x200>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a3a      	ldr	r2, [pc, #232]	@ (8007658 <HAL_GPIO_Init+0x2b8>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d013      	beq.n	800759c <HAL_GPIO_Init+0x1fc>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a39      	ldr	r2, [pc, #228]	@ (800765c <HAL_GPIO_Init+0x2bc>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00d      	beq.n	8007598 <HAL_GPIO_Init+0x1f8>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a38      	ldr	r2, [pc, #224]	@ (8007660 <HAL_GPIO_Init+0x2c0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d007      	beq.n	8007594 <HAL_GPIO_Init+0x1f4>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a37      	ldr	r2, [pc, #220]	@ (8007664 <HAL_GPIO_Init+0x2c4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d101      	bne.n	8007590 <HAL_GPIO_Init+0x1f0>
 800758c:	2305      	movs	r3, #5
 800758e:	e00a      	b.n	80075a6 <HAL_GPIO_Init+0x206>
 8007590:	2306      	movs	r3, #6
 8007592:	e008      	b.n	80075a6 <HAL_GPIO_Init+0x206>
 8007594:	2304      	movs	r3, #4
 8007596:	e006      	b.n	80075a6 <HAL_GPIO_Init+0x206>
 8007598:	2303      	movs	r3, #3
 800759a:	e004      	b.n	80075a6 <HAL_GPIO_Init+0x206>
 800759c:	2302      	movs	r3, #2
 800759e:	e002      	b.n	80075a6 <HAL_GPIO_Init+0x206>
 80075a0:	2301      	movs	r3, #1
 80075a2:	e000      	b.n	80075a6 <HAL_GPIO_Init+0x206>
 80075a4:	2300      	movs	r3, #0
 80075a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a8:	f002 0203 	and.w	r2, r2, #3
 80075ac:	0092      	lsls	r2, r2, #2
 80075ae:	4093      	lsls	r3, r2
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80075b6:	4925      	ldr	r1, [pc, #148]	@ (800764c <HAL_GPIO_Init+0x2ac>)
 80075b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ba:	089b      	lsrs	r3, r3, #2
 80075bc:	3302      	adds	r3, #2
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d006      	beq.n	80075de <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80075d0:	4b25      	ldr	r3, [pc, #148]	@ (8007668 <HAL_GPIO_Init+0x2c8>)
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	4924      	ldr	r1, [pc, #144]	@ (8007668 <HAL_GPIO_Init+0x2c8>)
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	4313      	orrs	r3, r2
 80075da:	608b      	str	r3, [r1, #8]
 80075dc:	e006      	b.n	80075ec <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80075de:	4b22      	ldr	r3, [pc, #136]	@ (8007668 <HAL_GPIO_Init+0x2c8>)
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	43db      	mvns	r3, r3
 80075e6:	4920      	ldr	r1, [pc, #128]	@ (8007668 <HAL_GPIO_Init+0x2c8>)
 80075e8:	4013      	ands	r3, r2
 80075ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d006      	beq.n	8007606 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80075f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007668 <HAL_GPIO_Init+0x2c8>)
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	491a      	ldr	r1, [pc, #104]	@ (8007668 <HAL_GPIO_Init+0x2c8>)
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	4313      	orrs	r3, r2
 8007602:	60cb      	str	r3, [r1, #12]
 8007604:	e006      	b.n	8007614 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007606:	4b18      	ldr	r3, [pc, #96]	@ (8007668 <HAL_GPIO_Init+0x2c8>)
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	43db      	mvns	r3, r3
 800760e:	4916      	ldr	r1, [pc, #88]	@ (8007668 <HAL_GPIO_Init+0x2c8>)
 8007610:	4013      	ands	r3, r2
 8007612:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d025      	beq.n	800766c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007620:	4b11      	ldr	r3, [pc, #68]	@ (8007668 <HAL_GPIO_Init+0x2c8>)
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	4910      	ldr	r1, [pc, #64]	@ (8007668 <HAL_GPIO_Init+0x2c8>)
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	4313      	orrs	r3, r2
 800762a:	604b      	str	r3, [r1, #4]
 800762c:	e025      	b.n	800767a <HAL_GPIO_Init+0x2da>
 800762e:	bf00      	nop
 8007630:	10320000 	.word	0x10320000
 8007634:	10310000 	.word	0x10310000
 8007638:	10220000 	.word	0x10220000
 800763c:	10210000 	.word	0x10210000
 8007640:	10120000 	.word	0x10120000
 8007644:	10110000 	.word	0x10110000
 8007648:	40021000 	.word	0x40021000
 800764c:	40010000 	.word	0x40010000
 8007650:	40010800 	.word	0x40010800
 8007654:	40010c00 	.word	0x40010c00
 8007658:	40011000 	.word	0x40011000
 800765c:	40011400 	.word	0x40011400
 8007660:	40011800 	.word	0x40011800
 8007664:	40011c00 	.word	0x40011c00
 8007668:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800766c:	4b15      	ldr	r3, [pc, #84]	@ (80076c4 <HAL_GPIO_Init+0x324>)
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	43db      	mvns	r3, r3
 8007674:	4913      	ldr	r1, [pc, #76]	@ (80076c4 <HAL_GPIO_Init+0x324>)
 8007676:	4013      	ands	r3, r2
 8007678:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d006      	beq.n	8007694 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007686:	4b0f      	ldr	r3, [pc, #60]	@ (80076c4 <HAL_GPIO_Init+0x324>)
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	490e      	ldr	r1, [pc, #56]	@ (80076c4 <HAL_GPIO_Init+0x324>)
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	4313      	orrs	r3, r2
 8007690:	600b      	str	r3, [r1, #0]
 8007692:	e006      	b.n	80076a2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007694:	4b0b      	ldr	r3, [pc, #44]	@ (80076c4 <HAL_GPIO_Init+0x324>)
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	43db      	mvns	r3, r3
 800769c:	4909      	ldr	r1, [pc, #36]	@ (80076c4 <HAL_GPIO_Init+0x324>)
 800769e:	4013      	ands	r3, r2
 80076a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80076a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a4:	3301      	adds	r3, #1
 80076a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ae:	fa22 f303 	lsr.w	r3, r2, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f47f ae7e 	bne.w	80073b4 <HAL_GPIO_Init+0x14>
  }
}
 80076b8:	bf00      	nop
 80076ba:	bf00      	nop
 80076bc:	372c      	adds	r7, #44	@ 0x2c
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc80      	pop	{r7}
 80076c2:	4770      	bx	lr
 80076c4:	40010400 	.word	0x40010400

080076c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	887b      	ldrh	r3, [r7, #2]
 80076da:	4013      	ands	r3, r2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80076e0:	2301      	movs	r3, #1
 80076e2:	73fb      	strb	r3, [r7, #15]
 80076e4:	e001      	b.n	80076ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80076e6:	2300      	movs	r3, #0
 80076e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bc80      	pop	{r7}
 80076f4:	4770      	bx	lr

080076f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b083      	sub	sp, #12
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	460b      	mov	r3, r1
 8007700:	807b      	strh	r3, [r7, #2]
 8007702:	4613      	mov	r3, r2
 8007704:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007706:	787b      	ldrb	r3, [r7, #1]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800770c:	887a      	ldrh	r2, [r7, #2]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007712:	e003      	b.n	800771c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007714:	887b      	ldrh	r3, [r7, #2]
 8007716:	041a      	lsls	r2, r3, #16
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	611a      	str	r2, [r3, #16]
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	bc80      	pop	{r7}
 8007724:	4770      	bx	lr

08007726 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	460b      	mov	r3, r1
 8007730:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007738:	887a      	ldrh	r2, [r7, #2]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4013      	ands	r3, r2
 800773e:	041a      	lsls	r2, r3, #16
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	43d9      	mvns	r1, r3
 8007744:	887b      	ldrh	r3, [r7, #2]
 8007746:	400b      	ands	r3, r1
 8007748:	431a      	orrs	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	611a      	str	r2, [r3, #16]
}
 800774e:	bf00      	nop
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e12b      	b.n	80079c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d106      	bne.n	8007784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7fc ffba 	bl	80046f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2224      	movs	r2, #36	@ 0x24
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f022 0201 	bic.w	r2, r2, #1
 800779a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80077bc:	f002 f9d8 	bl	8009b70 <HAL_RCC_GetPCLK1Freq>
 80077c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	4a81      	ldr	r2, [pc, #516]	@ (80079cc <HAL_I2C_Init+0x274>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d807      	bhi.n	80077dc <HAL_I2C_Init+0x84>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4a80      	ldr	r2, [pc, #512]	@ (80079d0 <HAL_I2C_Init+0x278>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	bf94      	ite	ls
 80077d4:	2301      	movls	r3, #1
 80077d6:	2300      	movhi	r3, #0
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	e006      	b.n	80077ea <HAL_I2C_Init+0x92>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4a7d      	ldr	r2, [pc, #500]	@ (80079d4 <HAL_I2C_Init+0x27c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	bf94      	ite	ls
 80077e4:	2301      	movls	r3, #1
 80077e6:	2300      	movhi	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e0e7      	b.n	80079c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4a78      	ldr	r2, [pc, #480]	@ (80079d8 <HAL_I2C_Init+0x280>)
 80077f6:	fba2 2303 	umull	r2, r3, r2, r3
 80077fa:	0c9b      	lsrs	r3, r3, #18
 80077fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	4a6a      	ldr	r2, [pc, #424]	@ (80079cc <HAL_I2C_Init+0x274>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d802      	bhi.n	800782c <HAL_I2C_Init+0xd4>
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	3301      	adds	r3, #1
 800782a:	e009      	b.n	8007840 <HAL_I2C_Init+0xe8>
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007832:	fb02 f303 	mul.w	r3, r2, r3
 8007836:	4a69      	ldr	r2, [pc, #420]	@ (80079dc <HAL_I2C_Init+0x284>)
 8007838:	fba2 2303 	umull	r2, r3, r2, r3
 800783c:	099b      	lsrs	r3, r3, #6
 800783e:	3301      	adds	r3, #1
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6812      	ldr	r2, [r2, #0]
 8007844:	430b      	orrs	r3, r1
 8007846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007852:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	495c      	ldr	r1, [pc, #368]	@ (80079cc <HAL_I2C_Init+0x274>)
 800785c:	428b      	cmp	r3, r1
 800785e:	d819      	bhi.n	8007894 <HAL_I2C_Init+0x13c>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	1e59      	subs	r1, r3, #1
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	fbb1 f3f3 	udiv	r3, r1, r3
 800786e:	1c59      	adds	r1, r3, #1
 8007870:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007874:	400b      	ands	r3, r1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <HAL_I2C_Init+0x138>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	1e59      	subs	r1, r3, #1
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	fbb1 f3f3 	udiv	r3, r1, r3
 8007888:	3301      	adds	r3, #1
 800788a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800788e:	e051      	b.n	8007934 <HAL_I2C_Init+0x1dc>
 8007890:	2304      	movs	r3, #4
 8007892:	e04f      	b.n	8007934 <HAL_I2C_Init+0x1dc>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d111      	bne.n	80078c0 <HAL_I2C_Init+0x168>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	1e58      	subs	r0, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6859      	ldr	r1, [r3, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	440b      	add	r3, r1
 80078aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80078ae:	3301      	adds	r3, #1
 80078b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bf0c      	ite	eq
 80078b8:	2301      	moveq	r3, #1
 80078ba:	2300      	movne	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	e012      	b.n	80078e6 <HAL_I2C_Init+0x18e>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	1e58      	subs	r0, r3, #1
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6859      	ldr	r1, [r3, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	440b      	add	r3, r1
 80078ce:	0099      	lsls	r1, r3, #2
 80078d0:	440b      	add	r3, r1
 80078d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80078d6:	3301      	adds	r3, #1
 80078d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078dc:	2b00      	cmp	r3, #0
 80078de:	bf0c      	ite	eq
 80078e0:	2301      	moveq	r3, #1
 80078e2:	2300      	movne	r3, #0
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <HAL_I2C_Init+0x196>
 80078ea:	2301      	movs	r3, #1
 80078ec:	e022      	b.n	8007934 <HAL_I2C_Init+0x1dc>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10e      	bne.n	8007914 <HAL_I2C_Init+0x1bc>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	1e58      	subs	r0, r3, #1
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6859      	ldr	r1, [r3, #4]
 80078fe:	460b      	mov	r3, r1
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	440b      	add	r3, r1
 8007904:	fbb0 f3f3 	udiv	r3, r0, r3
 8007908:	3301      	adds	r3, #1
 800790a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800790e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007912:	e00f      	b.n	8007934 <HAL_I2C_Init+0x1dc>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	1e58      	subs	r0, r3, #1
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6859      	ldr	r1, [r3, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	440b      	add	r3, r1
 8007922:	0099      	lsls	r1, r3, #2
 8007924:	440b      	add	r3, r1
 8007926:	fbb0 f3f3 	udiv	r3, r0, r3
 800792a:	3301      	adds	r3, #1
 800792c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007930:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007934:	6879      	ldr	r1, [r7, #4]
 8007936:	6809      	ldr	r1, [r1, #0]
 8007938:	4313      	orrs	r3, r2
 800793a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	69da      	ldr	r2, [r3, #28]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	431a      	orrs	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007962:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	6911      	ldr	r1, [r2, #16]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	68d2      	ldr	r2, [r2, #12]
 800796e:	4311      	orrs	r1, r2
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	6812      	ldr	r2, [r2, #0]
 8007974:	430b      	orrs	r3, r1
 8007976:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	695a      	ldr	r2, [r3, #20]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0201 	orr.w	r2, r2, #1
 80079a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	000186a0 	.word	0x000186a0
 80079d0:	001e847f 	.word	0x001e847f
 80079d4:	003d08ff 	.word	0x003d08ff
 80079d8:	431bde83 	.word	0x431bde83
 80079dc:	10624dd3 	.word	0x10624dd3

080079e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	607a      	str	r2, [r7, #4]
 80079ea:	461a      	mov	r2, r3
 80079ec:	460b      	mov	r3, r1
 80079ee:	817b      	strh	r3, [r7, #10]
 80079f0:	4613      	mov	r3, r2
 80079f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80079f4:	f7fe ff42 	bl	800687c <HAL_GetTick>
 80079f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b20      	cmp	r3, #32
 8007a04:	f040 80e0 	bne.w	8007bc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	2319      	movs	r3, #25
 8007a0e:	2201      	movs	r2, #1
 8007a10:	4970      	ldr	r1, [pc, #448]	@ (8007bd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f001 faac 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e0d3      	b.n	8007bca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d101      	bne.n	8007a30 <HAL_I2C_Master_Transmit+0x50>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e0cc      	b.n	8007bca <HAL_I2C_Master_Transmit+0x1ea>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d007      	beq.n	8007a56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f042 0201 	orr.w	r2, r2, #1
 8007a54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2221      	movs	r2, #33	@ 0x21
 8007a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2210      	movs	r2, #16
 8007a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	893a      	ldrh	r2, [r7, #8]
 8007a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4a50      	ldr	r2, [pc, #320]	@ (8007bd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8007a96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007a98:	8979      	ldrh	r1, [r7, #10]
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	6a3a      	ldr	r2, [r7, #32]
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 ff98 	bl	80089d4 <I2C_MasterRequestWrite>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e08d      	b.n	8007bca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aae:	2300      	movs	r3, #0
 8007ab0:	613b      	str	r3, [r7, #16]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	695b      	ldr	r3, [r3, #20]
 8007ab8:	613b      	str	r3, [r7, #16]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	613b      	str	r3, [r7, #16]
 8007ac2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007ac4:	e066      	b.n	8007b94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	6a39      	ldr	r1, [r7, #32]
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f001 fb6a 	bl	80091a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00d      	beq.n	8007af2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ada:	2b04      	cmp	r3, #4
 8007adc:	d107      	bne.n	8007aee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007aec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e06b      	b.n	8007bca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af6:	781a      	ldrb	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	f003 0304 	and.w	r3, r3, #4
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	d11b      	bne.n	8007b68 <HAL_I2C_Master_Transmit+0x188>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d017      	beq.n	8007b68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3c:	781a      	ldrb	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b60:	3b01      	subs	r3, #1
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	6a39      	ldr	r1, [r7, #32]
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f001 fb61 	bl	8009234 <I2C_WaitOnBTFFlagUntilTimeout>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00d      	beq.n	8007b94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	d107      	bne.n	8007b90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e01a      	b.n	8007bca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d194      	bne.n	8007ac6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	e000      	b.n	8007bca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007bc8:	2302      	movs	r3, #2
  }
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	00100002 	.word	0x00100002
 8007bd8:	ffff0000 	.word	0xffff0000

08007bdc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08c      	sub	sp, #48	@ 0x30
 8007be0:	af02      	add	r7, sp, #8
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	607a      	str	r2, [r7, #4]
 8007be6:	461a      	mov	r2, r3
 8007be8:	460b      	mov	r3, r1
 8007bea:	817b      	strh	r3, [r7, #10]
 8007bec:	4613      	mov	r3, r2
 8007bee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007bf4:	f7fe fe42 	bl	800687c <HAL_GetTick>
 8007bf8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	f040 824b 	bne.w	800809e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	2319      	movs	r3, #25
 8007c0e:	2201      	movs	r2, #1
 8007c10:	497f      	ldr	r1, [pc, #508]	@ (8007e10 <HAL_I2C_Master_Receive+0x234>)
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f001 f9ac 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8007c1e:	2302      	movs	r3, #2
 8007c20:	e23e      	b.n	80080a0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d101      	bne.n	8007c30 <HAL_I2C_Master_Receive+0x54>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	e237      	b.n	80080a0 <HAL_I2C_Master_Receive+0x4c4>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d007      	beq.n	8007c56 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f042 0201 	orr.w	r2, r2, #1
 8007c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2222      	movs	r2, #34	@ 0x22
 8007c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2210      	movs	r2, #16
 8007c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	893a      	ldrh	r2, [r7, #8]
 8007c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4a5f      	ldr	r2, [pc, #380]	@ (8007e14 <HAL_I2C_Master_Receive+0x238>)
 8007c96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007c98:	8979      	ldrh	r1, [r7, #10]
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 ff1a 	bl	8008ad8 <I2C_MasterRequestRead>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e1f8      	b.n	80080a0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d113      	bne.n	8007cde <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	61fb      	str	r3, [r7, #28]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	61fb      	str	r3, [r7, #28]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	61fb      	str	r3, [r7, #28]
 8007cca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	e1cc      	b.n	8008078 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d11e      	bne.n	8007d24 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007cf6:	b672      	cpsid	i
}
 8007cf8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61bb      	str	r3, [r7, #24]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	61bb      	str	r3, [r7, #24]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	61bb      	str	r3, [r7, #24]
 8007d0e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007d20:	b662      	cpsie	i
}
 8007d22:	e035      	b.n	8007d90 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d11e      	bne.n	8007d6a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d3c:	b672      	cpsid	i
}
 8007d3e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	617b      	str	r3, [r7, #20]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007d66:	b662      	cpsie	i
}
 8007d68:	e012      	b.n	8007d90 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	613b      	str	r3, [r7, #16]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	613b      	str	r3, [r7, #16]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	613b      	str	r3, [r7, #16]
 8007d8e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007d90:	e172      	b.n	8008078 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	f200 811f 	bhi.w	8007fda <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d123      	bne.n	8007dec <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007da6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f001 fa8b 	bl	80092c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e173      	b.n	80080a0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	691a      	ldr	r2, [r3, #16]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	3b01      	subs	r3, #1
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007dea:	e145      	b.n	8008078 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d152      	bne.n	8007e9a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	4906      	ldr	r1, [pc, #24]	@ (8007e18 <HAL_I2C_Master_Receive+0x23c>)
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f001 f8b6 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d008      	beq.n	8007e1c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e148      	b.n	80080a0 <HAL_I2C_Master_Receive+0x4c4>
 8007e0e:	bf00      	nop
 8007e10:	00100002 	.word	0x00100002
 8007e14:	ffff0000 	.word	0xffff0000
 8007e18:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007e1c:	b672      	cpsid	i
}
 8007e1e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691a      	ldr	r2, [r3, #16]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3a:	b2d2      	uxtb	r2, r2
 8007e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007e62:	b662      	cpsie	i
}
 8007e64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	691a      	ldr	r2, [r3, #16]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e70:	b2d2      	uxtb	r2, r2
 8007e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e82:	3b01      	subs	r3, #1
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	3b01      	subs	r3, #1
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007e98:	e0ee      	b.n	8008078 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	4981      	ldr	r1, [pc, #516]	@ (80080a8 <HAL_I2C_Master_Receive+0x4cc>)
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f001 f863 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e0f5      	b.n	80080a0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ec2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ec4:	b672      	cpsid	i
}
 8007ec6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	691a      	ldr	r2, [r3, #16]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed2:	b2d2      	uxtb	r2, r2
 8007ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007efa:	4b6c      	ldr	r3, [pc, #432]	@ (80080ac <HAL_I2C_Master_Receive+0x4d0>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	08db      	lsrs	r3, r3, #3
 8007f00:	4a6b      	ldr	r2, [pc, #428]	@ (80080b0 <HAL_I2C_Master_Receive+0x4d4>)
 8007f02:	fba2 2303 	umull	r2, r3, r2, r3
 8007f06:	0a1a      	lsrs	r2, r3, #8
 8007f08:	4613      	mov	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	00da      	lsls	r2, r3, #3
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d118      	bne.n	8007f52 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3a:	f043 0220 	orr.w	r2, r3, #32
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007f42:	b662      	cpsie	i
}
 8007f44:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e0a6      	b.n	80080a0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	f003 0304 	and.w	r3, r3, #4
 8007f5c:	2b04      	cmp	r3, #4
 8007f5e:	d1d9      	bne.n	8007f14 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	691a      	ldr	r2, [r3, #16]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7a:	b2d2      	uxtb	r2, r2
 8007f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007fa2:	b662      	cpsie	i
}
 8007fa4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb0:	b2d2      	uxtb	r2, r2
 8007fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007fd8:	e04e      	b.n	8008078 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f001 f970 	bl	80092c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e058      	b.n	80080a0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	691a      	ldr	r2, [r3, #16]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff8:	b2d2      	uxtb	r2, r2
 8007ffa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008000:	1c5a      	adds	r2, r3, #1
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800800a:	3b01      	subs	r3, #1
 800800c:	b29a      	uxth	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008016:	b29b      	uxth	r3, r3
 8008018:	3b01      	subs	r3, #1
 800801a:	b29a      	uxth	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	f003 0304 	and.w	r3, r3, #4
 800802a:	2b04      	cmp	r3, #4
 800802c:	d124      	bne.n	8008078 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008032:	2b03      	cmp	r3, #3
 8008034:	d107      	bne.n	8008046 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008044:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	691a      	ldr	r2, [r3, #16]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008050:	b2d2      	uxtb	r2, r2
 8008052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008062:	3b01      	subs	r3, #1
 8008064:	b29a      	uxth	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800806e:	b29b      	uxth	r3, r3
 8008070:	3b01      	subs	r3, #1
 8008072:	b29a      	uxth	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800807c:	2b00      	cmp	r3, #0
 800807e:	f47f ae88 	bne.w	8007d92 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2220      	movs	r2, #32
 8008086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	e000      	b.n	80080a0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800809e:	2302      	movs	r3, #2
  }
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3728      	adds	r7, #40	@ 0x28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	00010004 	.word	0x00010004
 80080ac:	20000028 	.word	0x20000028
 80080b0:	14f8b589 	.word	0x14f8b589

080080b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af02      	add	r7, sp, #8
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	4608      	mov	r0, r1
 80080be:	4611      	mov	r1, r2
 80080c0:	461a      	mov	r2, r3
 80080c2:	4603      	mov	r3, r0
 80080c4:	817b      	strh	r3, [r7, #10]
 80080c6:	460b      	mov	r3, r1
 80080c8:	813b      	strh	r3, [r7, #8]
 80080ca:	4613      	mov	r3, r2
 80080cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80080ce:	f7fe fbd5 	bl	800687c <HAL_GetTick>
 80080d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b20      	cmp	r3, #32
 80080de:	f040 80d9 	bne.w	8008294 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	2319      	movs	r3, #25
 80080e8:	2201      	movs	r2, #1
 80080ea:	496d      	ldr	r1, [pc, #436]	@ (80082a0 <HAL_I2C_Mem_Write+0x1ec>)
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 ff3f 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80080f8:	2302      	movs	r3, #2
 80080fa:	e0cc      	b.n	8008296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008102:	2b01      	cmp	r3, #1
 8008104:	d101      	bne.n	800810a <HAL_I2C_Mem_Write+0x56>
 8008106:	2302      	movs	r3, #2
 8008108:	e0c5      	b.n	8008296 <HAL_I2C_Mem_Write+0x1e2>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	2b01      	cmp	r3, #1
 800811e:	d007      	beq.n	8008130 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0201 	orr.w	r2, r2, #1
 800812e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800813e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2221      	movs	r2, #33	@ 0x21
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2240      	movs	r2, #64	@ 0x40
 800814c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a3a      	ldr	r2, [r7, #32]
 800815a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008160:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008166:	b29a      	uxth	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4a4d      	ldr	r2, [pc, #308]	@ (80082a4 <HAL_I2C_Mem_Write+0x1f0>)
 8008170:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008172:	88f8      	ldrh	r0, [r7, #6]
 8008174:	893a      	ldrh	r2, [r7, #8]
 8008176:	8979      	ldrh	r1, [r7, #10]
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	9301      	str	r3, [sp, #4]
 800817c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	4603      	mov	r3, r0
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 fd76 	bl	8008c74 <I2C_RequestMemoryWrite>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d052      	beq.n	8008234 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e081      	b.n	8008296 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f001 f804 	bl	80091a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00d      	beq.n	80081be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d107      	bne.n	80081ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e06b      	b.n	8008296 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c2:	781a      	ldrb	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ce:	1c5a      	adds	r2, r3, #1
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081d8:	3b01      	subs	r3, #1
 80081da:	b29a      	uxth	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	3b01      	subs	r3, #1
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	d11b      	bne.n	8008234 <HAL_I2C_Mem_Write+0x180>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008200:	2b00      	cmp	r3, #0
 8008202:	d017      	beq.n	8008234 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008208:	781a      	ldrb	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800821e:	3b01      	subs	r3, #1
 8008220:	b29a      	uxth	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800822a:	b29b      	uxth	r3, r3
 800822c:	3b01      	subs	r3, #1
 800822e:	b29a      	uxth	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1aa      	bne.n	8008192 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 fff7 	bl	8009234 <I2C_WaitOnBTFFlagUntilTimeout>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00d      	beq.n	8008268 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008250:	2b04      	cmp	r3, #4
 8008252:	d107      	bne.n	8008264 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008262:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e016      	b.n	8008296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2220      	movs	r2, #32
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	e000      	b.n	8008296 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008294:	2302      	movs	r3, #2
  }
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	00100002 	.word	0x00100002
 80082a4:	ffff0000 	.word	0xffff0000

080082a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08c      	sub	sp, #48	@ 0x30
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	4608      	mov	r0, r1
 80082b2:	4611      	mov	r1, r2
 80082b4:	461a      	mov	r2, r3
 80082b6:	4603      	mov	r3, r0
 80082b8:	817b      	strh	r3, [r7, #10]
 80082ba:	460b      	mov	r3, r1
 80082bc:	813b      	strh	r3, [r7, #8]
 80082be:	4613      	mov	r3, r2
 80082c0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80082c6:	f7fe fad9 	bl	800687c <HAL_GetTick>
 80082ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b20      	cmp	r3, #32
 80082d6:	f040 8244 	bne.w	8008762 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	2319      	movs	r3, #25
 80082e0:	2201      	movs	r2, #1
 80082e2:	4982      	ldr	r1, [pc, #520]	@ (80084ec <HAL_I2C_Mem_Read+0x244>)
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 fe43 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80082f0:	2302      	movs	r3, #2
 80082f2:	e237      	b.n	8008764 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d101      	bne.n	8008302 <HAL_I2C_Mem_Read+0x5a>
 80082fe:	2302      	movs	r3, #2
 8008300:	e230      	b.n	8008764 <HAL_I2C_Mem_Read+0x4bc>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b01      	cmp	r3, #1
 8008316:	d007      	beq.n	8008328 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f042 0201 	orr.w	r2, r2, #1
 8008326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2222      	movs	r2, #34	@ 0x22
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2240      	movs	r2, #64	@ 0x40
 8008344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008352:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008358:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800835e:	b29a      	uxth	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4a62      	ldr	r2, [pc, #392]	@ (80084f0 <HAL_I2C_Mem_Read+0x248>)
 8008368:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800836a:	88f8      	ldrh	r0, [r7, #6]
 800836c:	893a      	ldrh	r2, [r7, #8]
 800836e:	8979      	ldrh	r1, [r7, #10]
 8008370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	4603      	mov	r3, r0
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 fd10 	bl	8008da0 <I2C_RequestMemoryRead>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e1ec      	b.n	8008764 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800838e:	2b00      	cmp	r3, #0
 8008390:	d113      	bne.n	80083ba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008392:	2300      	movs	r3, #0
 8008394:	61fb      	str	r3, [r7, #28]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	61fb      	str	r3, [r7, #28]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	61fb      	str	r3, [r7, #28]
 80083a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	e1c0      	b.n	800873c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d11e      	bne.n	8008400 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80083d2:	b672      	cpsid	i
}
 80083d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083d6:	2300      	movs	r3, #0
 80083d8:	61bb      	str	r3, [r7, #24]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	61bb      	str	r3, [r7, #24]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	61bb      	str	r3, [r7, #24]
 80083ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80083fc:	b662      	cpsie	i
}
 80083fe:	e035      	b.n	800846c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008404:	2b02      	cmp	r3, #2
 8008406:	d11e      	bne.n	8008446 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008416:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008418:	b672      	cpsid	i
}
 800841a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008440:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008442:	b662      	cpsie	i
}
 8008444:	e012      	b.n	800846c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008454:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008456:	2300      	movs	r3, #0
 8008458:	613b      	str	r3, [r7, #16]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	613b      	str	r3, [r7, #16]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	613b      	str	r3, [r7, #16]
 800846a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800846c:	e166      	b.n	800873c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008472:	2b03      	cmp	r3, #3
 8008474:	f200 811f 	bhi.w	80086b6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800847c:	2b01      	cmp	r3, #1
 800847e:	d123      	bne.n	80084c8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008482:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 ff1d 	bl	80092c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e167      	b.n	8008764 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	691a      	ldr	r2, [r3, #16]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800849e:	b2d2      	uxtb	r2, r2
 80084a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a6:	1c5a      	adds	r2, r3, #1
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084b0:	3b01      	subs	r3, #1
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084bc:	b29b      	uxth	r3, r3
 80084be:	3b01      	subs	r3, #1
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80084c6:	e139      	b.n	800873c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d152      	bne.n	8008576 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80084d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d6:	2200      	movs	r2, #0
 80084d8:	4906      	ldr	r1, [pc, #24]	@ (80084f4 <HAL_I2C_Mem_Read+0x24c>)
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 fd48 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d008      	beq.n	80084f8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e13c      	b.n	8008764 <HAL_I2C_Mem_Read+0x4bc>
 80084ea:	bf00      	nop
 80084ec:	00100002 	.word	0x00100002
 80084f0:	ffff0000 	.word	0xffff0000
 80084f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80084f8:	b672      	cpsid	i
}
 80084fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800850a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	691a      	ldr	r2, [r3, #16]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851e:	1c5a      	adds	r2, r3, #1
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008528:	3b01      	subs	r3, #1
 800852a:	b29a      	uxth	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008534:	b29b      	uxth	r3, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	b29a      	uxth	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800853e:	b662      	cpsie	i
}
 8008540:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	691a      	ldr	r2, [r3, #16]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800854c:	b2d2      	uxtb	r2, r2
 800854e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800855e:	3b01      	subs	r3, #1
 8008560:	b29a      	uxth	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800856a:	b29b      	uxth	r3, r3
 800856c:	3b01      	subs	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008574:	e0e2      	b.n	800873c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857c:	2200      	movs	r2, #0
 800857e:	497b      	ldr	r1, [pc, #492]	@ (800876c <HAL_I2C_Mem_Read+0x4c4>)
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 fcf5 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e0e9      	b.n	8008764 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800859e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80085a0:	b672      	cpsid	i
}
 80085a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	691a      	ldr	r2, [r3, #16]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ae:	b2d2      	uxtb	r2, r2
 80085b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b6:	1c5a      	adds	r2, r3, #1
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085c0:	3b01      	subs	r3, #1
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	3b01      	subs	r3, #1
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80085d6:	4b66      	ldr	r3, [pc, #408]	@ (8008770 <HAL_I2C_Mem_Read+0x4c8>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	08db      	lsrs	r3, r3, #3
 80085dc:	4a65      	ldr	r2, [pc, #404]	@ (8008774 <HAL_I2C_Mem_Read+0x4cc>)
 80085de:	fba2 2303 	umull	r2, r3, r2, r3
 80085e2:	0a1a      	lsrs	r2, r3, #8
 80085e4:	4613      	mov	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	00da      	lsls	r2, r3, #3
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80085f0:	6a3b      	ldr	r3, [r7, #32]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d118      	bne.n	800862e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2220      	movs	r2, #32
 8008606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008616:	f043 0220 	orr.w	r2, r3, #32
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800861e:	b662      	cpsie	i
}
 8008620:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e09a      	b.n	8008764 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b04      	cmp	r3, #4
 800863a:	d1d9      	bne.n	80085f0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800864a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	691a      	ldr	r2, [r3, #16]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008656:	b2d2      	uxtb	r2, r2
 8008658:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865e:	1c5a      	adds	r2, r3, #1
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008668:	3b01      	subs	r3, #1
 800866a:	b29a      	uxth	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008674:	b29b      	uxth	r3, r3
 8008676:	3b01      	subs	r3, #1
 8008678:	b29a      	uxth	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800867e:	b662      	cpsie	i
}
 8008680:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	691a      	ldr	r2, [r3, #16]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868c:	b2d2      	uxtb	r2, r2
 800868e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008694:	1c5a      	adds	r2, r3, #1
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800869e:	3b01      	subs	r3, #1
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80086b4:	e042      	b.n	800873c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 fe02 	bl	80092c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e04c      	b.n	8008764 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	691a      	ldr	r2, [r3, #16]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d4:	b2d2      	uxtb	r2, r2
 80086d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086e6:	3b01      	subs	r3, #1
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	3b01      	subs	r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	f003 0304 	and.w	r3, r3, #4
 8008706:	2b04      	cmp	r3, #4
 8008708:	d118      	bne.n	800873c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	691a      	ldr	r2, [r3, #16]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008714:	b2d2      	uxtb	r2, r2
 8008716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008726:	3b01      	subs	r3, #1
 8008728:	b29a      	uxth	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008732:	b29b      	uxth	r3, r3
 8008734:	3b01      	subs	r3, #1
 8008736:	b29a      	uxth	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008740:	2b00      	cmp	r3, #0
 8008742:	f47f ae94 	bne.w	800846e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2220      	movs	r2, #32
 800874a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	e000      	b.n	8008764 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8008762:	2302      	movs	r3, #2
  }
}
 8008764:	4618      	mov	r0, r3
 8008766:	3728      	adds	r7, #40	@ 0x28
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	00010004 	.word	0x00010004
 8008770:	20000028 	.word	0x20000028
 8008774:	14f8b589 	.word	0x14f8b589

08008778 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b08a      	sub	sp, #40	@ 0x28
 800877c:	af02      	add	r7, sp, #8
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	607a      	str	r2, [r7, #4]
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	460b      	mov	r3, r1
 8008786:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008788:	f7fe f878 	bl	800687c <HAL_GetTick>
 800878c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b20      	cmp	r3, #32
 800879c:	f040 8111 	bne.w	80089c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	2319      	movs	r3, #25
 80087a6:	2201      	movs	r2, #1
 80087a8:	4988      	ldr	r1, [pc, #544]	@ (80089cc <HAL_I2C_IsDeviceReady+0x254>)
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f000 fbe0 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80087b6:	2302      	movs	r3, #2
 80087b8:	e104      	b.n	80089c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d101      	bne.n	80087c8 <HAL_I2C_IsDeviceReady+0x50>
 80087c4:	2302      	movs	r3, #2
 80087c6:	e0fd      	b.n	80089c4 <HAL_I2C_IsDeviceReady+0x24c>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d007      	beq.n	80087ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f042 0201 	orr.w	r2, r2, #1
 80087ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80087fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2224      	movs	r2, #36	@ 0x24
 8008802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4a70      	ldr	r2, [pc, #448]	@ (80089d0 <HAL_I2C_IsDeviceReady+0x258>)
 8008810:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008820:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2200      	movs	r2, #0
 800882a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f000 fb9e 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00d      	beq.n	8008856 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008844:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008848:	d103      	bne.n	8008852 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008850:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e0b6      	b.n	80089c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008856:	897b      	ldrh	r3, [r7, #10]
 8008858:	b2db      	uxtb	r3, r3
 800885a:	461a      	mov	r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008864:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008866:	f7fe f809 	bl	800687c <HAL_GetTick>
 800886a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b02      	cmp	r3, #2
 8008878:	bf0c      	ite	eq
 800887a:	2301      	moveq	r3, #1
 800887c:	2300      	movne	r3, #0
 800887e:	b2db      	uxtb	r3, r3
 8008880:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800888c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008890:	bf0c      	ite	eq
 8008892:	2301      	moveq	r3, #1
 8008894:	2300      	movne	r3, #0
 8008896:	b2db      	uxtb	r3, r3
 8008898:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800889a:	e025      	b.n	80088e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800889c:	f7fd ffee 	bl	800687c <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d302      	bcc.n	80088b2 <HAL_I2C_IsDeviceReady+0x13a>
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d103      	bne.n	80088ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	22a0      	movs	r2, #160	@ 0xa0
 80088b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	f003 0302 	and.w	r3, r3, #2
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	bf0c      	ite	eq
 80088c8:	2301      	moveq	r3, #1
 80088ca:	2300      	movne	r3, #0
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088de:	bf0c      	ite	eq
 80088e0:	2301      	moveq	r3, #1
 80088e2:	2300      	movne	r3, #0
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2ba0      	cmp	r3, #160	@ 0xa0
 80088f2:	d005      	beq.n	8008900 <HAL_I2C_IsDeviceReady+0x188>
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d102      	bne.n	8008900 <HAL_I2C_IsDeviceReady+0x188>
 80088fa:	7dbb      	ldrb	r3, [r7, #22]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0cd      	beq.n	800889c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2220      	movs	r2, #32
 8008904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	2b02      	cmp	r3, #2
 8008914:	d129      	bne.n	800896a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008924:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008926:	2300      	movs	r3, #0
 8008928:	613b      	str	r3, [r7, #16]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	613b      	str	r3, [r7, #16]
 800893a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	2319      	movs	r3, #25
 8008942:	2201      	movs	r2, #1
 8008944:	4921      	ldr	r1, [pc, #132]	@ (80089cc <HAL_I2C_IsDeviceReady+0x254>)
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 fb12 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e036      	b.n	80089c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2220      	movs	r2, #32
 800895a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	e02c      	b.n	80089c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008978:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008982:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	2319      	movs	r3, #25
 800898a:	2201      	movs	r2, #1
 800898c:	490f      	ldr	r1, [pc, #60]	@ (80089cc <HAL_I2C_IsDeviceReady+0x254>)
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 faee 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e012      	b.n	80089c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	3301      	adds	r3, #1
 80089a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	f4ff af32 	bcc.w	8008812 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2220      	movs	r2, #32
 80089b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e000      	b.n	80089c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80089c2:	2302      	movs	r3, #2
  }
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3720      	adds	r7, #32
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	00100002 	.word	0x00100002
 80089d0:	ffff0000 	.word	0xffff0000

080089d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af02      	add	r7, sp, #8
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	607a      	str	r2, [r7, #4]
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	460b      	mov	r3, r1
 80089e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2b08      	cmp	r3, #8
 80089ee:	d006      	beq.n	80089fe <I2C_MasterRequestWrite+0x2a>
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d003      	beq.n	80089fe <I2C_MasterRequestWrite+0x2a>
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80089fc:	d108      	bne.n	8008a10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a0c:	601a      	str	r2, [r3, #0]
 8008a0e:	e00b      	b.n	8008a28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a14:	2b12      	cmp	r3, #18
 8008a16:	d107      	bne.n	8008a28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 fa9b 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00d      	beq.n	8008a5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a4e:	d103      	bne.n	8008a58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e035      	b.n	8008ac8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a64:	d108      	bne.n	8008a78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a66:	897b      	ldrh	r3, [r7, #10]
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008a74:	611a      	str	r2, [r3, #16]
 8008a76:	e01b      	b.n	8008ab0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008a78:	897b      	ldrh	r3, [r7, #10]
 8008a7a:	11db      	asrs	r3, r3, #7
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	f003 0306 	and.w	r3, r3, #6
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	f063 030f 	orn	r3, r3, #15
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	490e      	ldr	r1, [pc, #56]	@ (8008ad0 <I2C_MasterRequestWrite+0xfc>)
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 fae4 	bl	8009064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d001      	beq.n	8008aa6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e010      	b.n	8008ac8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008aa6:	897b      	ldrh	r3, [r7, #10]
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	4907      	ldr	r1, [pc, #28]	@ (8008ad4 <I2C_MasterRequestWrite+0x100>)
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 fad4 	bl	8009064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e000      	b.n	8008ac8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	00010008 	.word	0x00010008
 8008ad4:	00010002 	.word	0x00010002

08008ad8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b088      	sub	sp, #32
 8008adc:	af02      	add	r7, sp, #8
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	607a      	str	r2, [r7, #4]
 8008ae2:	603b      	str	r3, [r7, #0]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008afc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2b08      	cmp	r3, #8
 8008b02:	d006      	beq.n	8008b12 <I2C_MasterRequestRead+0x3a>
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d003      	beq.n	8008b12 <I2C_MasterRequestRead+0x3a>
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008b10:	d108      	bne.n	8008b24 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	e00b      	b.n	8008b3c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b28:	2b11      	cmp	r3, #17
 8008b2a:	d107      	bne.n	8008b3c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 fa11 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00d      	beq.n	8008b70 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b62:	d103      	bne.n	8008b6c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e079      	b.n	8008c64 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b78:	d108      	bne.n	8008b8c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008b7a:	897b      	ldrh	r3, [r7, #10]
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	f043 0301 	orr.w	r3, r3, #1
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	611a      	str	r2, [r3, #16]
 8008b8a:	e05f      	b.n	8008c4c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008b8c:	897b      	ldrh	r3, [r7, #10]
 8008b8e:	11db      	asrs	r3, r3, #7
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	f003 0306 	and.w	r3, r3, #6
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	f063 030f 	orn	r3, r3, #15
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	4930      	ldr	r1, [pc, #192]	@ (8008c6c <I2C_MasterRequestRead+0x194>)
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 fa5a 	bl	8009064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e054      	b.n	8008c64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008bba:	897b      	ldrh	r3, [r7, #10]
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	4929      	ldr	r1, [pc, #164]	@ (8008c70 <I2C_MasterRequestRead+0x198>)
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 fa4a 	bl	8009064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e044      	b.n	8008c64 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bda:	2300      	movs	r3, #0
 8008bdc:	613b      	str	r3, [r7, #16]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	613b      	str	r3, [r7, #16]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	613b      	str	r3, [r7, #16]
 8008bee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008bfe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f000 f9af 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00d      	beq.n	8008c34 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c26:	d103      	bne.n	8008c30 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c2e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e017      	b.n	8008c64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008c34:	897b      	ldrh	r3, [r7, #10]
 8008c36:	11db      	asrs	r3, r3, #7
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	f003 0306 	and.w	r3, r3, #6
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	f063 030e 	orn	r3, r3, #14
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	4907      	ldr	r1, [pc, #28]	@ (8008c70 <I2C_MasterRequestRead+0x198>)
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 fa06 	bl	8009064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e000      	b.n	8008c64 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	00010008 	.word	0x00010008
 8008c70:	00010002 	.word	0x00010002

08008c74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b088      	sub	sp, #32
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	4608      	mov	r0, r1
 8008c7e:	4611      	mov	r1, r2
 8008c80:	461a      	mov	r2, r3
 8008c82:	4603      	mov	r3, r0
 8008c84:	817b      	strh	r3, [r7, #10]
 8008c86:	460b      	mov	r3, r1
 8008c88:	813b      	strh	r3, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 f960 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00d      	beq.n	8008cd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cc4:	d103      	bne.n	8008cce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ccc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e05f      	b.n	8008d92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008cd2:	897b      	ldrh	r3, [r7, #10]
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008ce0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce4:	6a3a      	ldr	r2, [r7, #32]
 8008ce6:	492d      	ldr	r1, [pc, #180]	@ (8008d9c <I2C_RequestMemoryWrite+0x128>)
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 f9bb 	bl	8009064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e04c      	b.n	8008d92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	617b      	str	r3, [r7, #20]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d10:	6a39      	ldr	r1, [r7, #32]
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f000 fa46 	bl	80091a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00d      	beq.n	8008d3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	d107      	bne.n	8008d36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e02b      	b.n	8008d92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d3a:	88fb      	ldrh	r3, [r7, #6]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d105      	bne.n	8008d4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d40:	893b      	ldrh	r3, [r7, #8]
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	611a      	str	r2, [r3, #16]
 8008d4a:	e021      	b.n	8008d90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008d4c:	893b      	ldrh	r3, [r7, #8]
 8008d4e:	0a1b      	lsrs	r3, r3, #8
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d5c:	6a39      	ldr	r1, [r7, #32]
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f000 fa20 	bl	80091a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00d      	beq.n	8008d86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d107      	bne.n	8008d82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e005      	b.n	8008d92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d86:	893b      	ldrh	r3, [r7, #8]
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	00010002 	.word	0x00010002

08008da0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af02      	add	r7, sp, #8
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	4608      	mov	r0, r1
 8008daa:	4611      	mov	r1, r2
 8008dac:	461a      	mov	r2, r3
 8008dae:	4603      	mov	r3, r0
 8008db0:	817b      	strh	r3, [r7, #10]
 8008db2:	460b      	mov	r3, r1
 8008db4:	813b      	strh	r3, [r7, #8]
 8008db6:	4613      	mov	r3, r2
 8008db8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008dc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008dd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	6a3b      	ldr	r3, [r7, #32]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 f8c2 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00d      	beq.n	8008e0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e00:	d103      	bne.n	8008e0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e0aa      	b.n	8008f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008e0e:	897b      	ldrh	r3, [r7, #10]
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	461a      	mov	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008e1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e20:	6a3a      	ldr	r2, [r7, #32]
 8008e22:	4952      	ldr	r1, [pc, #328]	@ (8008f6c <I2C_RequestMemoryRead+0x1cc>)
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 f91d 	bl	8009064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e097      	b.n	8008f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e34:	2300      	movs	r3, #0
 8008e36:	617b      	str	r3, [r7, #20]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	617b      	str	r3, [r7, #20]
 8008e48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e4c:	6a39      	ldr	r1, [r7, #32]
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 f9a8 	bl	80091a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00d      	beq.n	8008e76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	d107      	bne.n	8008e72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e076      	b.n	8008f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e76:	88fb      	ldrh	r3, [r7, #6]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d105      	bne.n	8008e88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e7c:	893b      	ldrh	r3, [r7, #8]
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	611a      	str	r2, [r3, #16]
 8008e86:	e021      	b.n	8008ecc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008e88:	893b      	ldrh	r3, [r7, #8]
 8008e8a:	0a1b      	lsrs	r3, r3, #8
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e98:	6a39      	ldr	r1, [r7, #32]
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f000 f982 	bl	80091a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00d      	beq.n	8008ec2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	d107      	bne.n	8008ebe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ebc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e050      	b.n	8008f64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ec2:	893b      	ldrh	r3, [r7, #8]
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ece:	6a39      	ldr	r1, [r7, #32]
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 f967 	bl	80091a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00d      	beq.n	8008ef8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	d107      	bne.n	8008ef4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ef2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e035      	b.n	8008f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f000 f82b 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00d      	beq.n	8008f3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f2e:	d103      	bne.n	8008f38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e013      	b.n	8008f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008f3c:	897b      	ldrh	r3, [r7, #10]
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	f043 0301 	orr.w	r3, r3, #1
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f4e:	6a3a      	ldr	r2, [r7, #32]
 8008f50:	4906      	ldr	r1, [pc, #24]	@ (8008f6c <I2C_RequestMemoryRead+0x1cc>)
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 f886 	bl	8009064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e000      	b.n	8008f64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	00010002 	.word	0x00010002

08008f70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	603b      	str	r3, [r7, #0]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f80:	e048      	b.n	8009014 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f88:	d044      	beq.n	8009014 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f8a:	f7fd fc77 	bl	800687c <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d302      	bcc.n	8008fa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d139      	bne.n	8009014 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	0c1b      	lsrs	r3, r3, #16
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d10d      	bne.n	8008fc6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	43da      	mvns	r2, r3
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	bf0c      	ite	eq
 8008fbc:	2301      	moveq	r3, #1
 8008fbe:	2300      	movne	r3, #0
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	e00c      	b.n	8008fe0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	43da      	mvns	r2, r3
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	bf0c      	ite	eq
 8008fd8:	2301      	moveq	r3, #1
 8008fda:	2300      	movne	r3, #0
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	461a      	mov	r2, r3
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d116      	bne.n	8009014 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2220      	movs	r2, #32
 8008ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009000:	f043 0220 	orr.w	r2, r3, #32
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e023      	b.n	800905c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	0c1b      	lsrs	r3, r3, #16
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b01      	cmp	r3, #1
 800901c:	d10d      	bne.n	800903a <I2C_WaitOnFlagUntilTimeout+0xca>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	43da      	mvns	r2, r3
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	4013      	ands	r3, r2
 800902a:	b29b      	uxth	r3, r3
 800902c:	2b00      	cmp	r3, #0
 800902e:	bf0c      	ite	eq
 8009030:	2301      	moveq	r3, #1
 8009032:	2300      	movne	r3, #0
 8009034:	b2db      	uxtb	r3, r3
 8009036:	461a      	mov	r2, r3
 8009038:	e00c      	b.n	8009054 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	43da      	mvns	r2, r3
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	4013      	ands	r3, r2
 8009046:	b29b      	uxth	r3, r3
 8009048:	2b00      	cmp	r3, #0
 800904a:	bf0c      	ite	eq
 800904c:	2301      	moveq	r3, #1
 800904e:	2300      	movne	r3, #0
 8009050:	b2db      	uxtb	r3, r3
 8009052:	461a      	mov	r2, r3
 8009054:	79fb      	ldrb	r3, [r7, #7]
 8009056:	429a      	cmp	r2, r3
 8009058:	d093      	beq.n	8008f82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009072:	e071      	b.n	8009158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800907e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009082:	d123      	bne.n	80090cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009092:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800909c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b8:	f043 0204 	orr.w	r2, r3, #4
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e067      	b.n	800919c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d2:	d041      	beq.n	8009158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090d4:	f7fd fbd2 	bl	800687c <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d302      	bcc.n	80090ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d136      	bne.n	8009158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	0c1b      	lsrs	r3, r3, #16
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d10c      	bne.n	800910e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	43da      	mvns	r2, r3
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	4013      	ands	r3, r2
 8009100:	b29b      	uxth	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	bf14      	ite	ne
 8009106:	2301      	movne	r3, #1
 8009108:	2300      	moveq	r3, #0
 800910a:	b2db      	uxtb	r3, r3
 800910c:	e00b      	b.n	8009126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	43da      	mvns	r2, r3
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	4013      	ands	r3, r2
 800911a:	b29b      	uxth	r3, r3
 800911c:	2b00      	cmp	r3, #0
 800911e:	bf14      	ite	ne
 8009120:	2301      	movne	r3, #1
 8009122:	2300      	moveq	r3, #0
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d016      	beq.n	8009158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2220      	movs	r2, #32
 8009134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009144:	f043 0220 	orr.w	r2, r3, #32
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e021      	b.n	800919c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	0c1b      	lsrs	r3, r3, #16
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b01      	cmp	r3, #1
 8009160:	d10c      	bne.n	800917c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	43da      	mvns	r2, r3
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	4013      	ands	r3, r2
 800916e:	b29b      	uxth	r3, r3
 8009170:	2b00      	cmp	r3, #0
 8009172:	bf14      	ite	ne
 8009174:	2301      	movne	r3, #1
 8009176:	2300      	moveq	r3, #0
 8009178:	b2db      	uxtb	r3, r3
 800917a:	e00b      	b.n	8009194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	43da      	mvns	r2, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	4013      	ands	r3, r2
 8009188:	b29b      	uxth	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	bf14      	ite	ne
 800918e:	2301      	movne	r3, #1
 8009190:	2300      	moveq	r3, #0
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	f47f af6d 	bne.w	8009074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80091b0:	e034      	b.n	800921c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f000 f8e3 	bl	800937e <I2C_IsAcknowledgeFailed>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	e034      	b.n	800922c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c8:	d028      	beq.n	800921c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091ca:	f7fd fb57 	bl	800687c <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d302      	bcc.n	80091e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d11d      	bne.n	800921c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091ea:	2b80      	cmp	r3, #128	@ 0x80
 80091ec:	d016      	beq.n	800921c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2220      	movs	r2, #32
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009208:	f043 0220 	orr.w	r2, r3, #32
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e007      	b.n	800922c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009226:	2b80      	cmp	r3, #128	@ 0x80
 8009228:	d1c3      	bne.n	80091b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009240:	e034      	b.n	80092ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 f89b 	bl	800937e <I2C_IsAcknowledgeFailed>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e034      	b.n	80092bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009258:	d028      	beq.n	80092ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800925a:	f7fd fb0f 	bl	800687c <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	429a      	cmp	r2, r3
 8009268:	d302      	bcc.n	8009270 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d11d      	bne.n	80092ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	f003 0304 	and.w	r3, r3, #4
 800927a:	2b04      	cmp	r3, #4
 800927c:	d016      	beq.n	80092ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2220      	movs	r2, #32
 8009288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009298:	f043 0220 	orr.w	r2, r3, #32
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e007      	b.n	80092bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	f003 0304 	and.w	r3, r3, #4
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	d1c3      	bne.n	8009242 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80092d0:	e049      	b.n	8009366 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b10      	cmp	r3, #16
 80092de:	d119      	bne.n	8009314 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f06f 0210 	mvn.w	r2, #16
 80092e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2220      	movs	r2, #32
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	e030      	b.n	8009376 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009314:	f7fd fab2 	bl	800687c <HAL_GetTick>
 8009318:	4602      	mov	r2, r0
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	429a      	cmp	r2, r3
 8009322:	d302      	bcc.n	800932a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d11d      	bne.n	8009366 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009334:	2b40      	cmp	r3, #64	@ 0x40
 8009336:	d016      	beq.n	8009366 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2220      	movs	r2, #32
 8009342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009352:	f043 0220 	orr.w	r2, r3, #32
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e007      	b.n	8009376 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009370:	2b40      	cmp	r3, #64	@ 0x40
 8009372:	d1ae      	bne.n	80092d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	695b      	ldr	r3, [r3, #20]
 800938c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009394:	d11b      	bne.n	80093ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800939e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2220      	movs	r2, #32
 80093aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ba:	f043 0204 	orr.w	r2, r3, #4
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e000      	b.n	80093d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bc80      	pop	{r7}
 80093d8:	4770      	bx	lr
	...

080093dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d101      	bne.n	80093ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e272      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 0301 	and.w	r3, r3, #1
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 8087 	beq.w	800950a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80093fc:	4b92      	ldr	r3, [pc, #584]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	f003 030c 	and.w	r3, r3, #12
 8009404:	2b04      	cmp	r3, #4
 8009406:	d00c      	beq.n	8009422 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009408:	4b8f      	ldr	r3, [pc, #572]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	f003 030c 	and.w	r3, r3, #12
 8009410:	2b08      	cmp	r3, #8
 8009412:	d112      	bne.n	800943a <HAL_RCC_OscConfig+0x5e>
 8009414:	4b8c      	ldr	r3, [pc, #560]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800941c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009420:	d10b      	bne.n	800943a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009422:	4b89      	ldr	r3, [pc, #548]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d06c      	beq.n	8009508 <HAL_RCC_OscConfig+0x12c>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d168      	bne.n	8009508 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e24c      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009442:	d106      	bne.n	8009452 <HAL_RCC_OscConfig+0x76>
 8009444:	4b80      	ldr	r3, [pc, #512]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a7f      	ldr	r2, [pc, #508]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 800944a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	e02e      	b.n	80094b0 <HAL_RCC_OscConfig+0xd4>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10c      	bne.n	8009474 <HAL_RCC_OscConfig+0x98>
 800945a:	4b7b      	ldr	r3, [pc, #492]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a7a      	ldr	r2, [pc, #488]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 8009460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	4b78      	ldr	r3, [pc, #480]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a77      	ldr	r2, [pc, #476]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 800946c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	e01d      	b.n	80094b0 <HAL_RCC_OscConfig+0xd4>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800947c:	d10c      	bne.n	8009498 <HAL_RCC_OscConfig+0xbc>
 800947e:	4b72      	ldr	r3, [pc, #456]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a71      	ldr	r2, [pc, #452]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 8009484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	4b6f      	ldr	r3, [pc, #444]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a6e      	ldr	r2, [pc, #440]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 8009490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009494:	6013      	str	r3, [r2, #0]
 8009496:	e00b      	b.n	80094b0 <HAL_RCC_OscConfig+0xd4>
 8009498:	4b6b      	ldr	r3, [pc, #428]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a6a      	ldr	r2, [pc, #424]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 800949e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094a2:	6013      	str	r3, [r2, #0]
 80094a4:	4b68      	ldr	r3, [pc, #416]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a67      	ldr	r2, [pc, #412]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 80094aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80094ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d013      	beq.n	80094e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094b8:	f7fd f9e0 	bl	800687c <HAL_GetTick>
 80094bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094be:	e008      	b.n	80094d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094c0:	f7fd f9dc 	bl	800687c <HAL_GetTick>
 80094c4:	4602      	mov	r2, r0
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	2b64      	cmp	r3, #100	@ 0x64
 80094cc:	d901      	bls.n	80094d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e200      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094d2:	4b5d      	ldr	r3, [pc, #372]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d0f0      	beq.n	80094c0 <HAL_RCC_OscConfig+0xe4>
 80094de:	e014      	b.n	800950a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094e0:	f7fd f9cc 	bl	800687c <HAL_GetTick>
 80094e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094e6:	e008      	b.n	80094fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094e8:	f7fd f9c8 	bl	800687c <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	2b64      	cmp	r3, #100	@ 0x64
 80094f4:	d901      	bls.n	80094fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80094f6:	2303      	movs	r3, #3
 80094f8:	e1ec      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094fa:	4b53      	ldr	r3, [pc, #332]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1f0      	bne.n	80094e8 <HAL_RCC_OscConfig+0x10c>
 8009506:	e000      	b.n	800950a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0302 	and.w	r3, r3, #2
 8009512:	2b00      	cmp	r3, #0
 8009514:	d063      	beq.n	80095de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009516:	4b4c      	ldr	r3, [pc, #304]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	f003 030c 	and.w	r3, r3, #12
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00b      	beq.n	800953a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009522:	4b49      	ldr	r3, [pc, #292]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	f003 030c 	and.w	r3, r3, #12
 800952a:	2b08      	cmp	r3, #8
 800952c:	d11c      	bne.n	8009568 <HAL_RCC_OscConfig+0x18c>
 800952e:	4b46      	ldr	r3, [pc, #280]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009536:	2b00      	cmp	r3, #0
 8009538:	d116      	bne.n	8009568 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800953a:	4b43      	ldr	r3, [pc, #268]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f003 0302 	and.w	r3, r3, #2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d005      	beq.n	8009552 <HAL_RCC_OscConfig+0x176>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d001      	beq.n	8009552 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e1c0      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009552:	4b3d      	ldr	r3, [pc, #244]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	00db      	lsls	r3, r3, #3
 8009560:	4939      	ldr	r1, [pc, #228]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 8009562:	4313      	orrs	r3, r2
 8009564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009566:	e03a      	b.n	80095de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d020      	beq.n	80095b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009570:	4b36      	ldr	r3, [pc, #216]	@ (800964c <HAL_RCC_OscConfig+0x270>)
 8009572:	2201      	movs	r2, #1
 8009574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009576:	f7fd f981 	bl	800687c <HAL_GetTick>
 800957a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800957c:	e008      	b.n	8009590 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800957e:	f7fd f97d 	bl	800687c <HAL_GetTick>
 8009582:	4602      	mov	r2, r0
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	2b02      	cmp	r3, #2
 800958a:	d901      	bls.n	8009590 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800958c:	2303      	movs	r3, #3
 800958e:	e1a1      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009590:	4b2d      	ldr	r3, [pc, #180]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 0302 	and.w	r3, r3, #2
 8009598:	2b00      	cmp	r3, #0
 800959a:	d0f0      	beq.n	800957e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800959c:	4b2a      	ldr	r3, [pc, #168]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	695b      	ldr	r3, [r3, #20]
 80095a8:	00db      	lsls	r3, r3, #3
 80095aa:	4927      	ldr	r1, [pc, #156]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 80095ac:	4313      	orrs	r3, r2
 80095ae:	600b      	str	r3, [r1, #0]
 80095b0:	e015      	b.n	80095de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095b2:	4b26      	ldr	r3, [pc, #152]	@ (800964c <HAL_RCC_OscConfig+0x270>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095b8:	f7fd f960 	bl	800687c <HAL_GetTick>
 80095bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095be:	e008      	b.n	80095d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095c0:	f7fd f95c 	bl	800687c <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d901      	bls.n	80095d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e180      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1f0      	bne.n	80095c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 0308 	and.w	r3, r3, #8
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d03a      	beq.n	8009660 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d019      	beq.n	8009626 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80095f2:	4b17      	ldr	r3, [pc, #92]	@ (8009650 <HAL_RCC_OscConfig+0x274>)
 80095f4:	2201      	movs	r2, #1
 80095f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095f8:	f7fd f940 	bl	800687c <HAL_GetTick>
 80095fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095fe:	e008      	b.n	8009612 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009600:	f7fd f93c 	bl	800687c <HAL_GetTick>
 8009604:	4602      	mov	r2, r0
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	2b02      	cmp	r3, #2
 800960c:	d901      	bls.n	8009612 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800960e:	2303      	movs	r3, #3
 8009610:	e160      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009612:	4b0d      	ldr	r3, [pc, #52]	@ (8009648 <HAL_RCC_OscConfig+0x26c>)
 8009614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009616:	f003 0302 	and.w	r3, r3, #2
 800961a:	2b00      	cmp	r3, #0
 800961c:	d0f0      	beq.n	8009600 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800961e:	2001      	movs	r0, #1
 8009620:	f000 fafe 	bl	8009c20 <RCC_Delay>
 8009624:	e01c      	b.n	8009660 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009626:	4b0a      	ldr	r3, [pc, #40]	@ (8009650 <HAL_RCC_OscConfig+0x274>)
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800962c:	f7fd f926 	bl	800687c <HAL_GetTick>
 8009630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009632:	e00f      	b.n	8009654 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009634:	f7fd f922 	bl	800687c <HAL_GetTick>
 8009638:	4602      	mov	r2, r0
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	2b02      	cmp	r3, #2
 8009640:	d908      	bls.n	8009654 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e146      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
 8009646:	bf00      	nop
 8009648:	40021000 	.word	0x40021000
 800964c:	42420000 	.word	0x42420000
 8009650:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009654:	4b92      	ldr	r3, [pc, #584]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009658:	f003 0302 	and.w	r3, r3, #2
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1e9      	bne.n	8009634 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 0304 	and.w	r3, r3, #4
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 80a6 	beq.w	80097ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800966e:	2300      	movs	r3, #0
 8009670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009672:	4b8b      	ldr	r3, [pc, #556]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10d      	bne.n	800969a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800967e:	4b88      	ldr	r3, [pc, #544]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	4a87      	ldr	r2, [pc, #540]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009688:	61d3      	str	r3, [r2, #28]
 800968a:	4b85      	ldr	r3, [pc, #532]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 800968c:	69db      	ldr	r3, [r3, #28]
 800968e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009692:	60bb      	str	r3, [r7, #8]
 8009694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009696:	2301      	movs	r3, #1
 8009698:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800969a:	4b82      	ldr	r3, [pc, #520]	@ (80098a4 <HAL_RCC_OscConfig+0x4c8>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d118      	bne.n	80096d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80096a6:	4b7f      	ldr	r3, [pc, #508]	@ (80098a4 <HAL_RCC_OscConfig+0x4c8>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a7e      	ldr	r2, [pc, #504]	@ (80098a4 <HAL_RCC_OscConfig+0x4c8>)
 80096ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80096b2:	f7fd f8e3 	bl	800687c <HAL_GetTick>
 80096b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096b8:	e008      	b.n	80096cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096ba:	f7fd f8df 	bl	800687c <HAL_GetTick>
 80096be:	4602      	mov	r2, r0
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	2b64      	cmp	r3, #100	@ 0x64
 80096c6:	d901      	bls.n	80096cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e103      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096cc:	4b75      	ldr	r3, [pc, #468]	@ (80098a4 <HAL_RCC_OscConfig+0x4c8>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d0f0      	beq.n	80096ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d106      	bne.n	80096ee <HAL_RCC_OscConfig+0x312>
 80096e0:	4b6f      	ldr	r3, [pc, #444]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 80096e2:	6a1b      	ldr	r3, [r3, #32]
 80096e4:	4a6e      	ldr	r2, [pc, #440]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 80096e6:	f043 0301 	orr.w	r3, r3, #1
 80096ea:	6213      	str	r3, [r2, #32]
 80096ec:	e02d      	b.n	800974a <HAL_RCC_OscConfig+0x36e>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10c      	bne.n	8009710 <HAL_RCC_OscConfig+0x334>
 80096f6:	4b6a      	ldr	r3, [pc, #424]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	4a69      	ldr	r2, [pc, #420]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 80096fc:	f023 0301 	bic.w	r3, r3, #1
 8009700:	6213      	str	r3, [r2, #32]
 8009702:	4b67      	ldr	r3, [pc, #412]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	4a66      	ldr	r2, [pc, #408]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009708:	f023 0304 	bic.w	r3, r3, #4
 800970c:	6213      	str	r3, [r2, #32]
 800970e:	e01c      	b.n	800974a <HAL_RCC_OscConfig+0x36e>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	2b05      	cmp	r3, #5
 8009716:	d10c      	bne.n	8009732 <HAL_RCC_OscConfig+0x356>
 8009718:	4b61      	ldr	r3, [pc, #388]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 800971a:	6a1b      	ldr	r3, [r3, #32]
 800971c:	4a60      	ldr	r2, [pc, #384]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 800971e:	f043 0304 	orr.w	r3, r3, #4
 8009722:	6213      	str	r3, [r2, #32]
 8009724:	4b5e      	ldr	r3, [pc, #376]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009726:	6a1b      	ldr	r3, [r3, #32]
 8009728:	4a5d      	ldr	r2, [pc, #372]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 800972a:	f043 0301 	orr.w	r3, r3, #1
 800972e:	6213      	str	r3, [r2, #32]
 8009730:	e00b      	b.n	800974a <HAL_RCC_OscConfig+0x36e>
 8009732:	4b5b      	ldr	r3, [pc, #364]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	4a5a      	ldr	r2, [pc, #360]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009738:	f023 0301 	bic.w	r3, r3, #1
 800973c:	6213      	str	r3, [r2, #32]
 800973e:	4b58      	ldr	r3, [pc, #352]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	4a57      	ldr	r2, [pc, #348]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009744:	f023 0304 	bic.w	r3, r3, #4
 8009748:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d015      	beq.n	800977e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009752:	f7fd f893 	bl	800687c <HAL_GetTick>
 8009756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009758:	e00a      	b.n	8009770 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800975a:	f7fd f88f 	bl	800687c <HAL_GetTick>
 800975e:	4602      	mov	r2, r0
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009768:	4293      	cmp	r3, r2
 800976a:	d901      	bls.n	8009770 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800976c:	2303      	movs	r3, #3
 800976e:	e0b1      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009770:	4b4b      	ldr	r3, [pc, #300]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009772:	6a1b      	ldr	r3, [r3, #32]
 8009774:	f003 0302 	and.w	r3, r3, #2
 8009778:	2b00      	cmp	r3, #0
 800977a:	d0ee      	beq.n	800975a <HAL_RCC_OscConfig+0x37e>
 800977c:	e014      	b.n	80097a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800977e:	f7fd f87d 	bl	800687c <HAL_GetTick>
 8009782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009784:	e00a      	b.n	800979c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009786:	f7fd f879 	bl	800687c <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009794:	4293      	cmp	r3, r2
 8009796:	d901      	bls.n	800979c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	e09b      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800979c:	4b40      	ldr	r3, [pc, #256]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 800979e:	6a1b      	ldr	r3, [r3, #32]
 80097a0:	f003 0302 	and.w	r3, r3, #2
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1ee      	bne.n	8009786 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80097a8:	7dfb      	ldrb	r3, [r7, #23]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d105      	bne.n	80097ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097ae:	4b3c      	ldr	r3, [pc, #240]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	4a3b      	ldr	r2, [pc, #236]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 80097b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 8087 	beq.w	80098d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80097c4:	4b36      	ldr	r3, [pc, #216]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	f003 030c 	and.w	r3, r3, #12
 80097cc:	2b08      	cmp	r3, #8
 80097ce:	d061      	beq.n	8009894 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d146      	bne.n	8009866 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097d8:	4b33      	ldr	r3, [pc, #204]	@ (80098a8 <HAL_RCC_OscConfig+0x4cc>)
 80097da:	2200      	movs	r2, #0
 80097dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097de:	f7fd f84d 	bl	800687c <HAL_GetTick>
 80097e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80097e4:	e008      	b.n	80097f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097e6:	f7fd f849 	bl	800687c <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d901      	bls.n	80097f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e06d      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80097f8:	4b29      	ldr	r3, [pc, #164]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1f0      	bne.n	80097e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800980c:	d108      	bne.n	8009820 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800980e:	4b24      	ldr	r3, [pc, #144]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	4921      	ldr	r1, [pc, #132]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 800981c:	4313      	orrs	r3, r2
 800981e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009820:	4b1f      	ldr	r3, [pc, #124]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a19      	ldr	r1, [r3, #32]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009830:	430b      	orrs	r3, r1
 8009832:	491b      	ldr	r1, [pc, #108]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009834:	4313      	orrs	r3, r2
 8009836:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009838:	4b1b      	ldr	r3, [pc, #108]	@ (80098a8 <HAL_RCC_OscConfig+0x4cc>)
 800983a:	2201      	movs	r2, #1
 800983c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800983e:	f7fd f81d 	bl	800687c <HAL_GetTick>
 8009842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009844:	e008      	b.n	8009858 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009846:	f7fd f819 	bl	800687c <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	2b02      	cmp	r3, #2
 8009852:	d901      	bls.n	8009858 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009854:	2303      	movs	r3, #3
 8009856:	e03d      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009858:	4b11      	ldr	r3, [pc, #68]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d0f0      	beq.n	8009846 <HAL_RCC_OscConfig+0x46a>
 8009864:	e035      	b.n	80098d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009866:	4b10      	ldr	r3, [pc, #64]	@ (80098a8 <HAL_RCC_OscConfig+0x4cc>)
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800986c:	f7fd f806 	bl	800687c <HAL_GetTick>
 8009870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009872:	e008      	b.n	8009886 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009874:	f7fd f802 	bl	800687c <HAL_GetTick>
 8009878:	4602      	mov	r2, r0
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	2b02      	cmp	r3, #2
 8009880:	d901      	bls.n	8009886 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e026      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009886:	4b06      	ldr	r3, [pc, #24]	@ (80098a0 <HAL_RCC_OscConfig+0x4c4>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1f0      	bne.n	8009874 <HAL_RCC_OscConfig+0x498>
 8009892:	e01e      	b.n	80098d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	69db      	ldr	r3, [r3, #28]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d107      	bne.n	80098ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e019      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
 80098a0:	40021000 	.word	0x40021000
 80098a4:	40007000 	.word	0x40007000
 80098a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80098ac:	4b0b      	ldr	r3, [pc, #44]	@ (80098dc <HAL_RCC_OscConfig+0x500>)
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a1b      	ldr	r3, [r3, #32]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d106      	bne.n	80098ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d001      	beq.n	80098d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e000      	b.n	80098d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3718      	adds	r7, #24
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	40021000 	.word	0x40021000

080098e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d101      	bne.n	80098f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e0d0      	b.n	8009a96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80098f4:	4b6a      	ldr	r3, [pc, #424]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1c0>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 0307 	and.w	r3, r3, #7
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d910      	bls.n	8009924 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009902:	4b67      	ldr	r3, [pc, #412]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f023 0207 	bic.w	r2, r3, #7
 800990a:	4965      	ldr	r1, [pc, #404]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1c0>)
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	4313      	orrs	r3, r2
 8009910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009912:	4b63      	ldr	r3, [pc, #396]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 0307 	and.w	r3, r3, #7
 800991a:	683a      	ldr	r2, [r7, #0]
 800991c:	429a      	cmp	r2, r3
 800991e:	d001      	beq.n	8009924 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e0b8      	b.n	8009a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0302 	and.w	r3, r3, #2
 800992c:	2b00      	cmp	r3, #0
 800992e:	d020      	beq.n	8009972 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 0304 	and.w	r3, r3, #4
 8009938:	2b00      	cmp	r3, #0
 800993a:	d005      	beq.n	8009948 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800993c:	4b59      	ldr	r3, [pc, #356]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	4a58      	ldr	r2, [pc, #352]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8009942:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009946:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0308 	and.w	r3, r3, #8
 8009950:	2b00      	cmp	r3, #0
 8009952:	d005      	beq.n	8009960 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009954:	4b53      	ldr	r3, [pc, #332]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	4a52      	ldr	r2, [pc, #328]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800995a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800995e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009960:	4b50      	ldr	r3, [pc, #320]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	494d      	ldr	r1, [pc, #308]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800996e:	4313      	orrs	r3, r2
 8009970:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	d040      	beq.n	8009a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d107      	bne.n	8009996 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009986:	4b47      	ldr	r3, [pc, #284]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d115      	bne.n	80099be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e07f      	b.n	8009a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	2b02      	cmp	r3, #2
 800999c:	d107      	bne.n	80099ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800999e:	4b41      	ldr	r3, [pc, #260]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d109      	bne.n	80099be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e073      	b.n	8009a96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099ae:	4b3d      	ldr	r3, [pc, #244]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0302 	and.w	r3, r3, #2
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d101      	bne.n	80099be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	e06b      	b.n	8009a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80099be:	4b39      	ldr	r3, [pc, #228]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	f023 0203 	bic.w	r2, r3, #3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	4936      	ldr	r1, [pc, #216]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80099cc:	4313      	orrs	r3, r2
 80099ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80099d0:	f7fc ff54 	bl	800687c <HAL_GetTick>
 80099d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099d6:	e00a      	b.n	80099ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099d8:	f7fc ff50 	bl	800687c <HAL_GetTick>
 80099dc:	4602      	mov	r2, r0
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d901      	bls.n	80099ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e053      	b.n	8009a96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099ee:	4b2d      	ldr	r3, [pc, #180]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f003 020c 	and.w	r2, r3, #12
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d1eb      	bne.n	80099d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a00:	4b27      	ldr	r3, [pc, #156]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0307 	and.w	r3, r3, #7
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d210      	bcs.n	8009a30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a0e:	4b24      	ldr	r3, [pc, #144]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f023 0207 	bic.w	r2, r3, #7
 8009a16:	4922      	ldr	r1, [pc, #136]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a1e:	4b20      	ldr	r3, [pc, #128]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0307 	and.w	r3, r3, #7
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d001      	beq.n	8009a30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e032      	b.n	8009a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d008      	beq.n	8009a4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a3c:	4b19      	ldr	r3, [pc, #100]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	4916      	ldr	r1, [pc, #88]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0308 	and.w	r3, r3, #8
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d009      	beq.n	8009a6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009a5a:	4b12      	ldr	r3, [pc, #72]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	00db      	lsls	r3, r3, #3
 8009a68:	490e      	ldr	r1, [pc, #56]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009a6e:	f000 f821 	bl	8009ab4 <HAL_RCC_GetSysClockFreq>
 8009a72:	4602      	mov	r2, r0
 8009a74:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	091b      	lsrs	r3, r3, #4
 8009a7a:	f003 030f 	and.w	r3, r3, #15
 8009a7e:	490a      	ldr	r1, [pc, #40]	@ (8009aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8009a80:	5ccb      	ldrb	r3, [r1, r3]
 8009a82:	fa22 f303 	lsr.w	r3, r2, r3
 8009a86:	4a09      	ldr	r2, [pc, #36]	@ (8009aac <HAL_RCC_ClockConfig+0x1cc>)
 8009a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009a8a:	4b09      	ldr	r3, [pc, #36]	@ (8009ab0 <HAL_RCC_ClockConfig+0x1d0>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fa ffe0 	bl	8004a54 <HAL_InitTick>

  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	40022000 	.word	0x40022000
 8009aa4:	40021000 	.word	0x40021000
 8009aa8:	08014380 	.word	0x08014380
 8009aac:	20000028 	.word	0x20000028
 8009ab0:	20000038 	.word	0x20000038

08009ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	60fb      	str	r3, [r7, #12]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	60bb      	str	r3, [r7, #8]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	617b      	str	r3, [r7, #20]
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8009aca:	2300      	movs	r3, #0
 8009acc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009ace:	4b1e      	ldr	r3, [pc, #120]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x94>)
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f003 030c 	and.w	r3, r3, #12
 8009ada:	2b04      	cmp	r3, #4
 8009adc:	d002      	beq.n	8009ae4 <HAL_RCC_GetSysClockFreq+0x30>
 8009ade:	2b08      	cmp	r3, #8
 8009ae0:	d003      	beq.n	8009aea <HAL_RCC_GetSysClockFreq+0x36>
 8009ae2:	e027      	b.n	8009b34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009ae4:	4b19      	ldr	r3, [pc, #100]	@ (8009b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8009ae6:	613b      	str	r3, [r7, #16]
      break;
 8009ae8:	e027      	b.n	8009b3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	0c9b      	lsrs	r3, r3, #18
 8009aee:	f003 030f 	and.w	r3, r3, #15
 8009af2:	4a17      	ldr	r2, [pc, #92]	@ (8009b50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009af4:	5cd3      	ldrb	r3, [r2, r3]
 8009af6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d010      	beq.n	8009b24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009b02:	4b11      	ldr	r3, [pc, #68]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x94>)
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	0c5b      	lsrs	r3, r3, #17
 8009b08:	f003 0301 	and.w	r3, r3, #1
 8009b0c:	4a11      	ldr	r2, [pc, #68]	@ (8009b54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8009b0e:	5cd3      	ldrb	r3, [r2, r3]
 8009b10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a0d      	ldr	r2, [pc, #52]	@ (8009b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8009b16:	fb03 f202 	mul.w	r2, r3, r2
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b20:	617b      	str	r3, [r7, #20]
 8009b22:	e004      	b.n	8009b2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a0c      	ldr	r2, [pc, #48]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009b28:	fb02 f303 	mul.w	r3, r2, r3
 8009b2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	613b      	str	r3, [r7, #16]
      break;
 8009b32:	e002      	b.n	8009b3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009b34:	4b05      	ldr	r3, [pc, #20]	@ (8009b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8009b36:	613b      	str	r3, [r7, #16]
      break;
 8009b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009b3a:	693b      	ldr	r3, [r7, #16]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	371c      	adds	r7, #28
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bc80      	pop	{r7}
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	40021000 	.word	0x40021000
 8009b4c:	007a1200 	.word	0x007a1200
 8009b50:	08014398 	.word	0x08014398
 8009b54:	080143a8 	.word	0x080143a8
 8009b58:	003d0900 	.word	0x003d0900

08009b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b60:	4b02      	ldr	r3, [pc, #8]	@ (8009b6c <HAL_RCC_GetHCLKFreq+0x10>)
 8009b62:	681b      	ldr	r3, [r3, #0]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bc80      	pop	{r7}
 8009b6a:	4770      	bx	lr
 8009b6c:	20000028 	.word	0x20000028

08009b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009b74:	f7ff fff2 	bl	8009b5c <HAL_RCC_GetHCLKFreq>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	4b05      	ldr	r3, [pc, #20]	@ (8009b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	0a1b      	lsrs	r3, r3, #8
 8009b80:	f003 0307 	and.w	r3, r3, #7
 8009b84:	4903      	ldr	r1, [pc, #12]	@ (8009b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b86:	5ccb      	ldrb	r3, [r1, r3]
 8009b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	40021000 	.word	0x40021000
 8009b94:	08014390 	.word	0x08014390

08009b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009b9c:	f7ff ffde 	bl	8009b5c <HAL_RCC_GetHCLKFreq>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	4b05      	ldr	r3, [pc, #20]	@ (8009bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	0adb      	lsrs	r3, r3, #11
 8009ba8:	f003 0307 	and.w	r3, r3, #7
 8009bac:	4903      	ldr	r1, [pc, #12]	@ (8009bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8009bae:	5ccb      	ldrb	r3, [r1, r3]
 8009bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	40021000 	.word	0x40021000
 8009bbc:	08014390 	.word	0x08014390

08009bc0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	220f      	movs	r2, #15
 8009bce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009bd0:	4b11      	ldr	r3, [pc, #68]	@ (8009c18 <HAL_RCC_GetClockConfig+0x58>)
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f003 0203 	and.w	r2, r3, #3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8009c18 <HAL_RCC_GetClockConfig+0x58>)
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009be8:	4b0b      	ldr	r3, [pc, #44]	@ (8009c18 <HAL_RCC_GetClockConfig+0x58>)
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009bf4:	4b08      	ldr	r3, [pc, #32]	@ (8009c18 <HAL_RCC_GetClockConfig+0x58>)
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	08db      	lsrs	r3, r3, #3
 8009bfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009c02:	4b06      	ldr	r3, [pc, #24]	@ (8009c1c <HAL_RCC_GetClockConfig+0x5c>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0207 	and.w	r2, r3, #7
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8009c0e:	bf00      	nop
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bc80      	pop	{r7}
 8009c16:	4770      	bx	lr
 8009c18:	40021000 	.word	0x40021000
 8009c1c:	40022000 	.word	0x40022000

08009c20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009c28:	4b0a      	ldr	r3, [pc, #40]	@ (8009c54 <RCC_Delay+0x34>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8009c58 <RCC_Delay+0x38>)
 8009c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c32:	0a5b      	lsrs	r3, r3, #9
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	fb02 f303 	mul.w	r3, r2, r3
 8009c3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009c3c:	bf00      	nop
  }
  while (Delay --);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	1e5a      	subs	r2, r3, #1
 8009c42:	60fa      	str	r2, [r7, #12]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1f9      	bne.n	8009c3c <RCC_Delay+0x1c>
}
 8009c48:	bf00      	nop
 8009c4a:	bf00      	nop
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bc80      	pop	{r7}
 8009c52:	4770      	bx	lr
 8009c54:	20000028 	.word	0x20000028
 8009c58:	10624dd3 	.word	0x10624dd3

08009c5c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e022      	b.n	8009cb4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d105      	bne.n	8009c86 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7fa fe55 	bl	8004930 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2203      	movs	r2, #3
 8009c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f814 	bl	8009cbc <HAL_SD_InitCard>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e00a      	b.n	8009cb4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009cbc:	b5b0      	push	{r4, r5, r7, lr}
 8009cbe:	b08e      	sub	sp, #56	@ 0x38
 8009cc0:	af04      	add	r7, sp, #16
 8009cc2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009cd8:	2376      	movs	r3, #118	@ 0x76
 8009cda:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681d      	ldr	r5, [r3, #0]
 8009ce0:	466c      	mov	r4, sp
 8009ce2:	f107 0314 	add.w	r3, r7, #20
 8009ce6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009cea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009cee:	f107 0308 	add.w	r3, r7, #8
 8009cf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f002 fec3 	bl	800ca80 <SDIO_Init>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8009d00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d001      	beq.n	8009d0c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e04f      	b.n	8009dac <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009d0c:	4b29      	ldr	r3, [pc, #164]	@ (8009db4 <HAL_SD_InitCard+0xf8>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f002 fef8 	bl	800cb0c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009d1c:	4b25      	ldr	r3, [pc, #148]	@ (8009db4 <HAL_SD_InitCard+0xf8>)
 8009d1e:	2201      	movs	r2, #1
 8009d20:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009d22:	2002      	movs	r0, #2
 8009d24:	f7fc fdb4 	bl	8006890 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fe69 	bl	800aa00 <SD_PowerON>
 8009d2e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d30:	6a3b      	ldr	r3, [r7, #32]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00b      	beq.n	8009d4e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	431a      	orrs	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e02e      	b.n	8009dac <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fd87 	bl	800a862 <SD_InitCard>
 8009d54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d56:	6a3b      	ldr	r3, [r7, #32]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00b      	beq.n	8009d74 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d68:	6a3b      	ldr	r3, [r7, #32]
 8009d6a:	431a      	orrs	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e01b      	b.n	8009dac <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f002 ff51 	bl	800cc24 <SDMMC_CmdBlockLength>
 8009d82:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d84:	6a3b      	ldr	r3, [r7, #32]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00f      	beq.n	8009daa <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8009db8 <HAL_SD_InitCard+0xfc>)
 8009d90:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	431a      	orrs	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e000      	b.n	8009dac <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3728      	adds	r7, #40	@ 0x28
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bdb0      	pop	{r4, r5, r7, pc}
 8009db4:	423000a0 	.word	0x423000a0
 8009db8:	004005ff 	.word	0x004005ff

08009dbc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b092      	sub	sp, #72	@ 0x48
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009dca:	f7fc fd57 	bl	800687c <HAL_GetTick>
 8009dce:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d107      	bne.n	8009dee <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009de2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e1bd      	b.n	800a16a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	f040 81b0 	bne.w	800a15c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009e02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	441a      	add	r2, r3
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d907      	bls.n	8009e20 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e14:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e1a4      	b.n	800a16a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2203      	movs	r2, #3
 8009e24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d002      	beq.n	8009e3e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3a:	025b      	lsls	r3, r3, #9
 8009e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e42:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	025b      	lsls	r3, r3, #9
 8009e48:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009e4a:	2390      	movs	r3, #144	@ 0x90
 8009e4c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009e4e:	2302      	movs	r3, #2
 8009e50:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009e56:	2301      	movs	r3, #1
 8009e58:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f107 0214 	add.w	r2, r7, #20
 8009e62:	4611      	mov	r1, r2
 8009e64:	4618      	mov	r0, r3
 8009e66:	f002 feb2 	bl	800cbce <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d90a      	bls.n	8009e86 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2202      	movs	r2, #2
 8009e74:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f002 ff15 	bl	800ccac <SDMMC_CmdReadMultiBlock>
 8009e82:	6478      	str	r0, [r7, #68]	@ 0x44
 8009e84:	e009      	b.n	8009e9a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009e92:	4618      	mov	r0, r3
 8009e94:	f002 fee8 	bl	800cc68 <SDMMC_CmdReadSingleBlock>
 8009e98:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d012      	beq.n	8009ec6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a7a      	ldr	r2, [pc, #488]	@ (800a090 <HAL_SD_ReadBlocks+0x2d4>)
 8009ea6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009eae:	431a      	orrs	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e151      	b.n	800a16a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009eca:	e061      	b.n	8009f90 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ed2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d03c      	beq.n	8009f54 <HAL_SD_ReadBlocks+0x198>
 8009eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d039      	beq.n	8009f54 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ee4:	e033      	b.n	8009f4e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f002 fdf2 	bl	800cad4 <SDIO_ReadFIFO>
 8009ef0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ef8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009efc:	3301      	adds	r3, #1
 8009efe:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f02:	3b01      	subs	r3, #1
 8009f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f08:	0a1b      	lsrs	r3, r3, #8
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f0e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f12:	3301      	adds	r3, #1
 8009f14:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f1e:	0c1b      	lsrs	r3, r3, #16
 8009f20:	b2da      	uxtb	r2, r3
 8009f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f24:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f28:	3301      	adds	r3, #1
 8009f2a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f34:	0e1b      	lsrs	r3, r3, #24
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f3a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f3e:	3301      	adds	r3, #1
 8009f40:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f44:	3b01      	subs	r3, #1
 8009f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8009f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f50:	2b07      	cmp	r3, #7
 8009f52:	d9c8      	bls.n	8009ee6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009f54:	f7fc fc92 	bl	800687c <HAL_GetTick>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d902      	bls.n	8009f6a <HAL_SD_ReadBlocks+0x1ae>
 8009f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d112      	bne.n	8009f90 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a48      	ldr	r2, [pc, #288]	@ (800a090 <HAL_SD_ReadBlocks+0x2d4>)
 8009f70:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f76:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e0ec      	b.n	800a16a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f96:	f240 332a 	movw	r3, #810	@ 0x32a
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d095      	beq.n	8009ecc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d022      	beq.n	8009ff4 <HAL_SD_ReadBlocks+0x238>
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d91f      	bls.n	8009ff4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fb8:	2b03      	cmp	r3, #3
 8009fba:	d01b      	beq.n	8009ff4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f002 fed9 	bl	800cd78 <SDMMC_CmdStopTransfer>
 8009fc6:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d012      	beq.n	8009ff4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a2f      	ldr	r2, [pc, #188]	@ (800a090 <HAL_SD_ReadBlocks+0x2d4>)
 8009fd4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fdc:	431a      	orrs	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2200      	movs	r2, #0
 8009fee:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e0ba      	b.n	800a16a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ffa:	f003 0308 	and.w	r3, r3, #8
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d012      	beq.n	800a028 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a22      	ldr	r2, [pc, #136]	@ (800a090 <HAL_SD_ReadBlocks+0x2d4>)
 800a008:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a00e:	f043 0208 	orr.w	r2, r3, #8
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	e0a0      	b.n	800a16a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a02e:	f003 0302 	and.w	r3, r3, #2
 800a032:	2b00      	cmp	r3, #0
 800a034:	d012      	beq.n	800a05c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a15      	ldr	r2, [pc, #84]	@ (800a090 <HAL_SD_ReadBlocks+0x2d4>)
 800a03c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a042:	f043 0202 	orr.w	r2, r3, #2
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e086      	b.n	800a16a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a062:	f003 0320 	and.w	r3, r3, #32
 800a066:	2b00      	cmp	r3, #0
 800a068:	d063      	beq.n	800a132 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a08      	ldr	r2, [pc, #32]	@ (800a090 <HAL_SD_ReadBlocks+0x2d4>)
 800a070:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a076:	f043 0220 	orr.w	r2, r3, #32
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	e06c      	b.n	800a16a <HAL_SD_ReadBlocks+0x3ae>
 800a090:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4618      	mov	r0, r3
 800a09a:	f002 fd1b 	bl	800cad4 <SDIO_ReadFIFO>
 800a09e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800a0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a2:	b2da      	uxtb	r2, r3
 800a0a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0a6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a0a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a0ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b6:	0a1b      	lsrs	r3, r3, #8
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0bc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a0be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a0c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0cc:	0c1b      	lsrs	r3, r3, #16
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a0d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a0da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e2:	0e1b      	lsrs	r3, r3, #24
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0e8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a0f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a0f6:	f7fc fbc1 	bl	800687c <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a102:	429a      	cmp	r2, r3
 800a104:	d902      	bls.n	800a10c <HAL_SD_ReadBlocks+0x350>
 800a106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d112      	bne.n	800a132 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a18      	ldr	r2, [pc, #96]	@ (800a174 <HAL_SD_ReadBlocks+0x3b8>)
 800a112:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a118:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e01b      	b.n	800a16a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d002      	beq.n	800a146 <HAL_SD_ReadBlocks+0x38a>
 800a140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1a6      	bne.n	800a094 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a14e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a158:	2300      	movs	r3, #0
 800a15a:	e006      	b.n	800a16a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a160:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a168:	2301      	movs	r3, #1
  }
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3748      	adds	r7, #72	@ 0x48
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	004005ff 	.word	0x004005ff

0800a178 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b092      	sub	sp, #72	@ 0x48
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
 800a184:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a186:	f7fc fb79 	bl	800687c <HAL_GetTick>
 800a18a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d107      	bne.n	800a1aa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a19e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e166      	b.n	800a478 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	f040 8159 	bne.w	800a46a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a1be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	441a      	add	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d907      	bls.n	800a1dc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1d0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e14d      	b.n	800a478 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2203      	movs	r2, #3
 800a1e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d002      	beq.n	800a1fa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f6:	025b      	lsls	r3, r3, #9
 800a1f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fe:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	025b      	lsls	r3, r3, #9
 800a204:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a206:	2390      	movs	r3, #144	@ 0x90
 800a208:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a20a:	2300      	movs	r3, #0
 800a20c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a20e:	2300      	movs	r3, #0
 800a210:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a212:	2301      	movs	r3, #1
 800a214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f107 0218 	add.w	r2, r7, #24
 800a21e:	4611      	mov	r1, r2
 800a220:	4618      	mov	r0, r3
 800a222:	f002 fcd4 	bl	800cbce <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d90a      	bls.n	800a242 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2220      	movs	r2, #32
 800a230:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a238:	4618      	mov	r0, r3
 800a23a:	f002 fd7b 	bl	800cd34 <SDMMC_CmdWriteMultiBlock>
 800a23e:	6478      	str	r0, [r7, #68]	@ 0x44
 800a240:	e009      	b.n	800a256 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2210      	movs	r2, #16
 800a246:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a24e:	4618      	mov	r0, r3
 800a250:	f002 fd4e 	bl	800ccf0 <SDMMC_CmdWriteSingleBlock>
 800a254:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d012      	beq.n	800a282 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a87      	ldr	r2, [pc, #540]	@ (800a480 <HAL_SD_WriteBlocks+0x308>)
 800a262:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a26a:	431a      	orrs	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e0fa      	b.n	800a478 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a286:	e065      	b.n	800a354 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a28e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a292:	2b00      	cmp	r3, #0
 800a294:	d040      	beq.n	800a318 <HAL_SD_WriteBlocks+0x1a0>
 800a296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d03d      	beq.n	800a318 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a29c:	2300      	movs	r3, #0
 800a29e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2a0:	e037      	b.n	800a312 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800a2a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a2a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a2b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	021a      	lsls	r2, r3, #8
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a2c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a2c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a2cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	041a      	lsls	r2, r3, #16
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2da:	3301      	adds	r3, #1
 800a2dc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a2de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a2e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	061a      	lsls	r2, r3, #24
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a2f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a2f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f107 0214 	add.w	r2, r7, #20
 800a304:	4611      	mov	r1, r2
 800a306:	4618      	mov	r0, r3
 800a308:	f002 fbf0 	bl	800caec <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a30c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a30e:	3301      	adds	r3, #1
 800a310:	643b      	str	r3, [r7, #64]	@ 0x40
 800a312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a314:	2b07      	cmp	r3, #7
 800a316:	d9c4      	bls.n	800a2a2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a318:	f7fc fab0 	bl	800687c <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a324:	429a      	cmp	r2, r3
 800a326:	d902      	bls.n	800a32e <HAL_SD_WriteBlocks+0x1b6>
 800a328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d112      	bne.n	800a354 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a53      	ldr	r2, [pc, #332]	@ (800a480 <HAL_SD_WriteBlocks+0x308>)
 800a334:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a33a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a33c:	431a      	orrs	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a350:	2303      	movs	r3, #3
 800a352:	e091      	b.n	800a478 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a35a:	f240 331a 	movw	r3, #794	@ 0x31a
 800a35e:	4013      	ands	r3, r2
 800a360:	2b00      	cmp	r3, #0
 800a362:	d091      	beq.n	800a288 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a36a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d022      	beq.n	800a3b8 <HAL_SD_WriteBlocks+0x240>
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d91f      	bls.n	800a3b8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a37c:	2b03      	cmp	r3, #3
 800a37e:	d01b      	beq.n	800a3b8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4618      	mov	r0, r3
 800a386:	f002 fcf7 	bl	800cd78 <SDMMC_CmdStopTransfer>
 800a38a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a38c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d012      	beq.n	800a3b8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a3a      	ldr	r2, [pc, #232]	@ (800a480 <HAL_SD_WriteBlocks+0x308>)
 800a398:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a39e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3a0:	431a      	orrs	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e05f      	b.n	800a478 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3be:	f003 0308 	and.w	r3, r3, #8
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d012      	beq.n	800a3ec <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a2d      	ldr	r2, [pc, #180]	@ (800a480 <HAL_SD_WriteBlocks+0x308>)
 800a3cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d2:	f043 0208 	orr.w	r2, r3, #8
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e045      	b.n	800a478 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3f2:	f003 0302 	and.w	r3, r3, #2
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d012      	beq.n	800a420 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a20      	ldr	r2, [pc, #128]	@ (800a480 <HAL_SD_WriteBlocks+0x308>)
 800a400:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a406:	f043 0202 	orr.w	r2, r3, #2
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e02b      	b.n	800a478 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a426:	f003 0310 	and.w	r3, r3, #16
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d012      	beq.n	800a454 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a13      	ldr	r2, [pc, #76]	@ (800a480 <HAL_SD_WriteBlocks+0x308>)
 800a434:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a43a:	f043 0210 	orr.w	r2, r3, #16
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	e011      	b.n	800a478 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a45c:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	e006      	b.n	800a478 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a46e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a476:	2301      	movs	r3, #1
  }
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3748      	adds	r7, #72	@ 0x48
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	004005ff 	.word	0x004005ff

0800a484 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a492:	0f9b      	lsrs	r3, r3, #30
 800a494:	b2da      	uxtb	r2, r3
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a49e:	0e9b      	lsrs	r3, r3, #26
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	f003 030f 	and.w	r3, r3, #15
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4b0:	0e1b      	lsrs	r3, r3, #24
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	f003 0303 	and.w	r3, r3, #3
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4c2:	0c1b      	lsrs	r3, r3, #16
 800a4c4:	b2da      	uxtb	r2, r3
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4ce:	0a1b      	lsrs	r3, r3, #8
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4da:	b2da      	uxtb	r2, r3
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4e4:	0d1b      	lsrs	r3, r3, #20
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4f0:	0c1b      	lsrs	r3, r3, #16
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	f003 030f 	and.w	r3, r3, #15
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a502:	0bdb      	lsrs	r3, r3, #15
 800a504:	b2db      	uxtb	r3, r3
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a514:	0b9b      	lsrs	r3, r3, #14
 800a516:	b2db      	uxtb	r3, r3
 800a518:	f003 0301 	and.w	r3, r3, #1
 800a51c:	b2da      	uxtb	r2, r3
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a526:	0b5b      	lsrs	r3, r3, #13
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	b2da      	uxtb	r2, r3
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a538:	0b1b      	lsrs	r3, r3, #12
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	b2da      	uxtb	r2, r3
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2200      	movs	r2, #0
 800a54a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a550:	2b00      	cmp	r3, #0
 800a552:	d163      	bne.n	800a61c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a558:	009a      	lsls	r2, r3, #2
 800a55a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a55e:	4013      	ands	r3, r2
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800a564:	0f92      	lsrs	r2, r2, #30
 800a566:	431a      	orrs	r2, r3
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a570:	0edb      	lsrs	r3, r3, #27
 800a572:	b2db      	uxtb	r3, r3
 800a574:	f003 0307 	and.w	r3, r3, #7
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a582:	0e1b      	lsrs	r3, r3, #24
 800a584:	b2db      	uxtb	r3, r3
 800a586:	f003 0307 	and.w	r3, r3, #7
 800a58a:	b2da      	uxtb	r2, r3
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a594:	0d5b      	lsrs	r3, r3, #21
 800a596:	b2db      	uxtb	r3, r3
 800a598:	f003 0307 	and.w	r3, r3, #7
 800a59c:	b2da      	uxtb	r2, r3
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5a6:	0c9b      	lsrs	r3, r3, #18
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	f003 0307 	and.w	r3, r3, #7
 800a5ae:	b2da      	uxtb	r2, r3
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5b8:	0bdb      	lsrs	r3, r3, #15
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	f003 0307 	and.w	r3, r3, #7
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	1c5a      	adds	r2, r3, #1
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	7e1b      	ldrb	r3, [r3, #24]
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	f003 0307 	and.w	r3, r3, #7
 800a5da:	3302      	adds	r3, #2
 800a5dc:	2201      	movs	r2, #1
 800a5de:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a5e6:	fb03 f202 	mul.w	r2, r3, r2
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	7a1b      	ldrb	r3, [r3, #8]
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	f003 030f 	and.w	r3, r3, #15
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	409a      	lsls	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800a608:	0a52      	lsrs	r2, r2, #9
 800a60a:	fb03 f202 	mul.w	r2, r3, r2
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a618:	661a      	str	r2, [r3, #96]	@ 0x60
 800a61a:	e031      	b.n	800a680 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a620:	2b01      	cmp	r3, #1
 800a622:	d11d      	bne.n	800a660 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a628:	041b      	lsls	r3, r3, #16
 800a62a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a632:	0c1b      	lsrs	r3, r3, #16
 800a634:	431a      	orrs	r2, r3
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	3301      	adds	r3, #1
 800a640:	029a      	lsls	r2, r3, #10
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a654:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	661a      	str	r2, [r3, #96]	@ 0x60
 800a65e:	e00f      	b.n	800a680 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a58      	ldr	r2, [pc, #352]	@ (800a7c8 <HAL_SD_GetCardCSD+0x344>)
 800a666:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a66c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e09d      	b.n	800a7bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a684:	0b9b      	lsrs	r3, r3, #14
 800a686:	b2db      	uxtb	r3, r3
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a696:	09db      	lsrs	r3, r3, #7
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a69e:	b2da      	uxtb	r2, r3
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6ae:	b2da      	uxtb	r2, r3
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6b8:	0fdb      	lsrs	r3, r3, #31
 800a6ba:	b2da      	uxtb	r2, r3
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6c4:	0f5b      	lsrs	r3, r3, #29
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	f003 0303 	and.w	r3, r3, #3
 800a6cc:	b2da      	uxtb	r2, r3
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6d6:	0e9b      	lsrs	r3, r3, #26
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	f003 0307 	and.w	r3, r3, #7
 800a6de:	b2da      	uxtb	r2, r3
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6e8:	0d9b      	lsrs	r3, r3, #22
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	f003 030f 	and.w	r3, r3, #15
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6fa:	0d5b      	lsrs	r3, r3, #21
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	b2da      	uxtb	r2, r3
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a716:	0c1b      	lsrs	r3, r3, #16
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	b2da      	uxtb	r2, r3
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a72a:	0bdb      	lsrs	r3, r3, #15
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	b2da      	uxtb	r2, r3
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a73e:	0b9b      	lsrs	r3, r3, #14
 800a740:	b2db      	uxtb	r3, r3
 800a742:	f003 0301 	and.w	r3, r3, #1
 800a746:	b2da      	uxtb	r2, r3
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a752:	0b5b      	lsrs	r3, r3, #13
 800a754:	b2db      	uxtb	r3, r3
 800a756:	f003 0301 	and.w	r3, r3, #1
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a766:	0b1b      	lsrs	r3, r3, #12
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	f003 0301 	and.w	r3, r3, #1
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a77a:	0a9b      	lsrs	r3, r3, #10
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	f003 0303 	and.w	r3, r3, #3
 800a782:	b2da      	uxtb	r2, r3
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a78e:	0a1b      	lsrs	r3, r3, #8
 800a790:	b2db      	uxtb	r3, r3
 800a792:	f003 0303 	and.w	r3, r3, #3
 800a796:	b2da      	uxtb	r2, r3
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7a2:	085b      	lsrs	r3, r3, #1
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bc80      	pop	{r7}
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	004005ff 	.word	0x004005ff

0800a7cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bc80      	pop	{r7}
 800a820:	4770      	bx	lr

0800a822 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b086      	sub	sp, #24
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a82a:	2300      	movs	r3, #0
 800a82c:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a82e:	f107 030c 	add.w	r3, r7, #12
 800a832:	4619      	mov	r1, r3
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f971 	bl	800ab1c <SD_SendStatus>
 800a83a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d005      	beq.n	800a84e <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	431a      	orrs	r2, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	0a5b      	lsrs	r3, r3, #9
 800a852:	f003 030f 	and.w	r3, r3, #15
 800a856:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a858:	693b      	ldr	r3, [r7, #16]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3718      	adds	r7, #24
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a862:	b5b0      	push	{r4, r5, r7, lr}
 800a864:	b094      	sub	sp, #80	@ 0x50
 800a866:	af04      	add	r7, sp, #16
 800a868:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a86a:	2301      	movs	r3, #1
 800a86c:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4618      	mov	r0, r3
 800a874:	f002 f957 	bl	800cb26 <SDIO_GetPowerState>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d102      	bne.n	800a884 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a87e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a882:	e0b8      	b.n	800a9f6 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a888:	2b03      	cmp	r3, #3
 800a88a:	d02f      	beq.n	800a8ec <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4618      	mov	r0, r3
 800a892:	f002 fb38 	bl	800cf06 <SDMMC_CmdSendCID>
 800a896:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d001      	beq.n	800a8a2 <SD_InitCard+0x40>
    {
      return errorstate;
 800a89e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8a0:	e0a9      	b.n	800a9f6 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f002 f97e 	bl	800cbaa <SDIO_GetResponse>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2104      	movs	r1, #4
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f002 f975 	bl	800cbaa <SDIO_GetResponse>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2108      	movs	r1, #8
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f002 f96c 	bl	800cbaa <SDIO_GetResponse>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	210c      	movs	r1, #12
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f002 f963 	bl	800cbaa <SDIO_GetResponse>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8f0:	2b03      	cmp	r3, #3
 800a8f2:	d00d      	beq.n	800a910 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f107 020e 	add.w	r2, r7, #14
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	4618      	mov	r0, r3
 800a900:	f002 fb3e 	bl	800cf80 <SDMMC_CmdSetRelAdd>
 800a904:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <SD_InitCard+0xae>
    {
      return errorstate;
 800a90c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a90e:	e072      	b.n	800a9f6 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a914:	2b03      	cmp	r3, #3
 800a916:	d036      	beq.n	800a986 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a918:	89fb      	ldrh	r3, [r7, #14]
 800a91a:	461a      	mov	r2, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a928:	041b      	lsls	r3, r3, #16
 800a92a:	4619      	mov	r1, r3
 800a92c:	4610      	mov	r0, r2
 800a92e:	f002 fb08 	bl	800cf42 <SDMMC_CmdSendCSD>
 800a932:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d001      	beq.n	800a93e <SD_InitCard+0xdc>
    {
      return errorstate;
 800a93a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a93c:	e05b      	b.n	800a9f6 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2100      	movs	r1, #0
 800a944:	4618      	mov	r0, r3
 800a946:	f002 f930 	bl	800cbaa <SDIO_GetResponse>
 800a94a:	4602      	mov	r2, r0
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2104      	movs	r1, #4
 800a956:	4618      	mov	r0, r3
 800a958:	f002 f927 	bl	800cbaa <SDIO_GetResponse>
 800a95c:	4602      	mov	r2, r0
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2108      	movs	r1, #8
 800a968:	4618      	mov	r0, r3
 800a96a:	f002 f91e 	bl	800cbaa <SDIO_GetResponse>
 800a96e:	4602      	mov	r2, r0
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	210c      	movs	r1, #12
 800a97a:	4618      	mov	r0, r3
 800a97c:	f002 f915 	bl	800cbaa <SDIO_GetResponse>
 800a980:	4602      	mov	r2, r0
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2104      	movs	r1, #4
 800a98c:	4618      	mov	r0, r3
 800a98e:	f002 f90c 	bl	800cbaa <SDIO_GetResponse>
 800a992:	4603      	mov	r3, r0
 800a994:	0d1a      	lsrs	r2, r3, #20
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a99a:	f107 0310 	add.w	r3, r7, #16
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7ff fd6f 	bl	800a484 <HAL_SD_GetCardCSD>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a9ac:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a9b0:	e021      	b.n	800a9f6 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6819      	ldr	r1, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9ba:	041b      	lsls	r3, r3, #16
 800a9bc:	2200      	movs	r2, #0
 800a9be:	461c      	mov	r4, r3
 800a9c0:	4615      	mov	r5, r2
 800a9c2:	4622      	mov	r2, r4
 800a9c4:	462b      	mov	r3, r5
 800a9c6:	4608      	mov	r0, r1
 800a9c8:	f002 f9f8 	bl	800cdbc <SDMMC_CmdSelDesel>
 800a9cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d001      	beq.n	800a9d8 <SD_InitCard+0x176>
  {
    return errorstate;
 800a9d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9d6:	e00e      	b.n	800a9f6 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681d      	ldr	r5, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	466c      	mov	r4, sp
 800a9e0:	f103 0210 	add.w	r2, r3, #16
 800a9e4:	ca07      	ldmia	r2, {r0, r1, r2}
 800a9e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	f002 f846 	bl	800ca80 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3740      	adds	r7, #64	@ 0x40
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800aa00 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	617b      	str	r3, [r7, #20]
 800aa10:	2300      	movs	r3, #0
 800aa12:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f002 f9f2 	bl	800ce02 <SDMMC_CmdGoIdleState>
 800aa1e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <SD_PowerON+0x2a>
  {
    return errorstate;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	e072      	b.n	800ab10 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f002 fa05 	bl	800ce3e <SDMMC_CmdOperCond>
 800aa34:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00d      	beq.n	800aa58 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f002 f9db 	bl	800ce02 <SDMMC_CmdGoIdleState>
 800aa4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d004      	beq.n	800aa5e <SD_PowerON+0x5e>
    {
      return errorstate;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	e05b      	b.n	800ab10 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d137      	bne.n	800aad6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f002 fa05 	bl	800ce7c <SDMMC_CmdAppCommand>
 800aa72:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d02d      	beq.n	800aad6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa7a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800aa7e:	e047      	b.n	800ab10 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2100      	movs	r1, #0
 800aa86:	4618      	mov	r0, r3
 800aa88:	f002 f9f8 	bl	800ce7c <SDMMC_CmdAppCommand>
 800aa8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d001      	beq.n	800aa98 <SD_PowerON+0x98>
    {
      return errorstate;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	e03b      	b.n	800ab10 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	491e      	ldr	r1, [pc, #120]	@ (800ab18 <SD_PowerON+0x118>)
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f002 fa0e 	bl	800cec0 <SDMMC_CmdAppOperCommand>
 800aaa4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d002      	beq.n	800aab2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aaac:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800aab0:	e02e      	b.n	800ab10 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2100      	movs	r1, #0
 800aab8:	4618      	mov	r0, r3
 800aaba:	f002 f876 	bl	800cbaa <SDIO_GetResponse>
 800aabe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	0fdb      	lsrs	r3, r3, #31
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d101      	bne.n	800aacc <SD_PowerON+0xcc>
 800aac8:	2301      	movs	r3, #1
 800aaca:	e000      	b.n	800aace <SD_PowerON+0xce>
 800aacc:	2300      	movs	r3, #0
 800aace:	613b      	str	r3, [r7, #16]

    count++;
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	3301      	adds	r3, #1
 800aad4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800aadc:	4293      	cmp	r3, r2
 800aade:	d802      	bhi.n	800aae6 <SD_PowerON+0xe6>
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d0cc      	beq.n	800aa80 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d902      	bls.n	800aaf6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800aaf0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aaf4:	e00c      	b.n	800ab10 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d003      	beq.n	800ab08 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	645a      	str	r2, [r3, #68]	@ 0x44
 800ab06:	e002      	b.n	800ab0e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	c1100000 	.word	0xc1100000

0800ab1c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d102      	bne.n	800ab32 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ab2c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ab30:	e018      	b.n	800ab64 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab3a:	041b      	lsls	r3, r3, #16
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4610      	mov	r0, r2
 800ab40:	f002 fa3f 	bl	800cfc2 <SDMMC_CmdSendStatus>
 800ab44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	e009      	b.n	800ab64 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2100      	movs	r1, #0
 800ab56:	4618      	mov	r0, r3
 800ab58:	f002 f827 	bl	800cbaa <SDIO_GetResponse>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e041      	b.n	800ac02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d106      	bne.n	800ab98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f7fa f938 	bl	8004e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2202      	movs	r2, #2
 800ab9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3304      	adds	r3, #4
 800aba8:	4619      	mov	r1, r3
 800abaa:	4610      	mov	r0, r2
 800abac:	f000 fc56 	bl	800b45c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
	...

0800ac0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d001      	beq.n	800ac24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac20:	2301      	movs	r3, #1
 800ac22:	e044      	b.n	800acae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2202      	movs	r2, #2
 800ac28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68da      	ldr	r2, [r3, #12]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f042 0201 	orr.w	r2, r2, #1
 800ac3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a1d      	ldr	r2, [pc, #116]	@ (800acb8 <HAL_TIM_Base_Start_IT+0xac>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d018      	beq.n	800ac78 <HAL_TIM_Base_Start_IT+0x6c>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a1c      	ldr	r2, [pc, #112]	@ (800acbc <HAL_TIM_Base_Start_IT+0xb0>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d013      	beq.n	800ac78 <HAL_TIM_Base_Start_IT+0x6c>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac58:	d00e      	beq.n	800ac78 <HAL_TIM_Base_Start_IT+0x6c>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a18      	ldr	r2, [pc, #96]	@ (800acc0 <HAL_TIM_Base_Start_IT+0xb4>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d009      	beq.n	800ac78 <HAL_TIM_Base_Start_IT+0x6c>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a16      	ldr	r2, [pc, #88]	@ (800acc4 <HAL_TIM_Base_Start_IT+0xb8>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d004      	beq.n	800ac78 <HAL_TIM_Base_Start_IT+0x6c>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a15      	ldr	r2, [pc, #84]	@ (800acc8 <HAL_TIM_Base_Start_IT+0xbc>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d111      	bne.n	800ac9c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	f003 0307 	and.w	r3, r3, #7
 800ac82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2b06      	cmp	r3, #6
 800ac88:	d010      	beq.n	800acac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f042 0201 	orr.w	r2, r2, #1
 800ac98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac9a:	e007      	b.n	800acac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f042 0201 	orr.w	r2, r2, #1
 800acaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3714      	adds	r7, #20
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bc80      	pop	{r7}
 800acb6:	4770      	bx	lr
 800acb8:	40012c00 	.word	0x40012c00
 800acbc:	40013400 	.word	0x40013400
 800acc0:	40000400 	.word	0x40000400
 800acc4:	40000800 	.word	0x40000800
 800acc8:	40000c00 	.word	0x40000c00

0800accc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e041      	b.n	800ad62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d106      	bne.n	800acf8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f839 	bl	800ad6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2202      	movs	r2, #2
 800acfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	3304      	adds	r3, #4
 800ad08:	4619      	mov	r1, r3
 800ad0a:	4610      	mov	r0, r2
 800ad0c:	f000 fba6 	bl	800b45c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b083      	sub	sp, #12
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ad72:	bf00      	nop
 800ad74:	370c      	adds	r7, #12
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bc80      	pop	{r7}
 800ad7a:	4770      	bx	lr

0800ad7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d109      	bne.n	800ada0 <HAL_TIM_PWM_Start+0x24>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	bf14      	ite	ne
 800ad98:	2301      	movne	r3, #1
 800ad9a:	2300      	moveq	r3, #0
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	e022      	b.n	800ade6 <HAL_TIM_PWM_Start+0x6a>
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	2b04      	cmp	r3, #4
 800ada4:	d109      	bne.n	800adba <HAL_TIM_PWM_Start+0x3e>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800adac:	b2db      	uxtb	r3, r3
 800adae:	2b01      	cmp	r3, #1
 800adb0:	bf14      	ite	ne
 800adb2:	2301      	movne	r3, #1
 800adb4:	2300      	moveq	r3, #0
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	e015      	b.n	800ade6 <HAL_TIM_PWM_Start+0x6a>
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2b08      	cmp	r3, #8
 800adbe:	d109      	bne.n	800add4 <HAL_TIM_PWM_Start+0x58>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	2b01      	cmp	r3, #1
 800adca:	bf14      	ite	ne
 800adcc:	2301      	movne	r3, #1
 800adce:	2300      	moveq	r3, #0
 800add0:	b2db      	uxtb	r3, r3
 800add2:	e008      	b.n	800ade6 <HAL_TIM_PWM_Start+0x6a>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b01      	cmp	r3, #1
 800adde:	bf14      	ite	ne
 800ade0:	2301      	movne	r3, #1
 800ade2:	2300      	moveq	r3, #0
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	e072      	b.n	800aed4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d104      	bne.n	800adfe <HAL_TIM_PWM_Start+0x82>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2202      	movs	r2, #2
 800adf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800adfc:	e013      	b.n	800ae26 <HAL_TIM_PWM_Start+0xaa>
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b04      	cmp	r3, #4
 800ae02:	d104      	bne.n	800ae0e <HAL_TIM_PWM_Start+0x92>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2202      	movs	r2, #2
 800ae08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae0c:	e00b      	b.n	800ae26 <HAL_TIM_PWM_Start+0xaa>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b08      	cmp	r3, #8
 800ae12:	d104      	bne.n	800ae1e <HAL_TIM_PWM_Start+0xa2>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2202      	movs	r2, #2
 800ae18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae1c:	e003      	b.n	800ae26 <HAL_TIM_PWM_Start+0xaa>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2202      	movs	r2, #2
 800ae22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 fdd0 	bl	800b9d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a28      	ldr	r2, [pc, #160]	@ (800aedc <HAL_TIM_PWM_Start+0x160>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d004      	beq.n	800ae48 <HAL_TIM_PWM_Start+0xcc>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a27      	ldr	r2, [pc, #156]	@ (800aee0 <HAL_TIM_PWM_Start+0x164>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d101      	bne.n	800ae4c <HAL_TIM_PWM_Start+0xd0>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e000      	b.n	800ae4e <HAL_TIM_PWM_Start+0xd2>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d007      	beq.n	800ae62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ae60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a1d      	ldr	r2, [pc, #116]	@ (800aedc <HAL_TIM_PWM_Start+0x160>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d018      	beq.n	800ae9e <HAL_TIM_PWM_Start+0x122>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a1b      	ldr	r2, [pc, #108]	@ (800aee0 <HAL_TIM_PWM_Start+0x164>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d013      	beq.n	800ae9e <HAL_TIM_PWM_Start+0x122>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae7e:	d00e      	beq.n	800ae9e <HAL_TIM_PWM_Start+0x122>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a17      	ldr	r2, [pc, #92]	@ (800aee4 <HAL_TIM_PWM_Start+0x168>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d009      	beq.n	800ae9e <HAL_TIM_PWM_Start+0x122>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a16      	ldr	r2, [pc, #88]	@ (800aee8 <HAL_TIM_PWM_Start+0x16c>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d004      	beq.n	800ae9e <HAL_TIM_PWM_Start+0x122>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a14      	ldr	r2, [pc, #80]	@ (800aeec <HAL_TIM_PWM_Start+0x170>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d111      	bne.n	800aec2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	f003 0307 	and.w	r3, r3, #7
 800aea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2b06      	cmp	r3, #6
 800aeae:	d010      	beq.n	800aed2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f042 0201 	orr.w	r2, r2, #1
 800aebe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aec0:	e007      	b.n	800aed2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f042 0201 	orr.w	r2, r2, #1
 800aed0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	40012c00 	.word	0x40012c00
 800aee0:	40013400 	.word	0x40013400
 800aee4:	40000400 	.word	0x40000400
 800aee8:	40000800 	.word	0x40000800
 800aeec:	40000c00 	.word	0x40000c00

0800aef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	f003 0302 	and.w	r3, r3, #2
 800af02:	2b02      	cmp	r3, #2
 800af04:	d122      	bne.n	800af4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	f003 0302 	and.w	r3, r3, #2
 800af10:	2b02      	cmp	r3, #2
 800af12:	d11b      	bne.n	800af4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f06f 0202 	mvn.w	r2, #2
 800af1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2201      	movs	r2, #1
 800af22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	f003 0303 	and.w	r3, r3, #3
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d003      	beq.n	800af3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fa76 	bl	800b424 <HAL_TIM_IC_CaptureCallback>
 800af38:	e005      	b.n	800af46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fa69 	bl	800b412 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 fa78 	bl	800b436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	f003 0304 	and.w	r3, r3, #4
 800af56:	2b04      	cmp	r3, #4
 800af58:	d122      	bne.n	800afa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	f003 0304 	and.w	r3, r3, #4
 800af64:	2b04      	cmp	r3, #4
 800af66:	d11b      	bne.n	800afa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f06f 0204 	mvn.w	r2, #4
 800af70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2202      	movs	r2, #2
 800af76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af82:	2b00      	cmp	r3, #0
 800af84:	d003      	beq.n	800af8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fa4c 	bl	800b424 <HAL_TIM_IC_CaptureCallback>
 800af8c:	e005      	b.n	800af9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fa3f 	bl	800b412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 fa4e 	bl	800b436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	f003 0308 	and.w	r3, r3, #8
 800afaa:	2b08      	cmp	r3, #8
 800afac:	d122      	bne.n	800aff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	f003 0308 	and.w	r3, r3, #8
 800afb8:	2b08      	cmp	r3, #8
 800afba:	d11b      	bne.n	800aff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f06f 0208 	mvn.w	r2, #8
 800afc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2204      	movs	r2, #4
 800afca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	69db      	ldr	r3, [r3, #28]
 800afd2:	f003 0303 	and.w	r3, r3, #3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d003      	beq.n	800afe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fa22 	bl	800b424 <HAL_TIM_IC_CaptureCallback>
 800afe0:	e005      	b.n	800afee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fa15 	bl	800b412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 fa24 	bl	800b436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	f003 0310 	and.w	r3, r3, #16
 800affe:	2b10      	cmp	r3, #16
 800b000:	d122      	bne.n	800b048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	f003 0310 	and.w	r3, r3, #16
 800b00c:	2b10      	cmp	r3, #16
 800b00e:	d11b      	bne.n	800b048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f06f 0210 	mvn.w	r2, #16
 800b018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2208      	movs	r2, #8
 800b01e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	69db      	ldr	r3, [r3, #28]
 800b026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d003      	beq.n	800b036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f9f8 	bl	800b424 <HAL_TIM_IC_CaptureCallback>
 800b034:	e005      	b.n	800b042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f9eb 	bl	800b412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 f9fa 	bl	800b436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	691b      	ldr	r3, [r3, #16]
 800b04e:	f003 0301 	and.w	r3, r3, #1
 800b052:	2b01      	cmp	r3, #1
 800b054:	d10e      	bne.n	800b074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	f003 0301 	and.w	r3, r3, #1
 800b060:	2b01      	cmp	r3, #1
 800b062:	d107      	bne.n	800b074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f06f 0201 	mvn.w	r2, #1
 800b06c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f7f9 fc16 	bl	80048a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b07e:	2b80      	cmp	r3, #128	@ 0x80
 800b080:	d10e      	bne.n	800b0a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b08c:	2b80      	cmp	r3, #128	@ 0x80
 800b08e:	d107      	bne.n	800b0a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 fd33 	bl	800bb06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0aa:	2b40      	cmp	r3, #64	@ 0x40
 800b0ac:	d10e      	bne.n	800b0cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0b8:	2b40      	cmp	r3, #64	@ 0x40
 800b0ba:	d107      	bne.n	800b0cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b0c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f9be 	bl	800b448 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	f003 0320 	and.w	r3, r3, #32
 800b0d6:	2b20      	cmp	r3, #32
 800b0d8:	d10e      	bne.n	800b0f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	f003 0320 	and.w	r3, r3, #32
 800b0e4:	2b20      	cmp	r3, #32
 800b0e6:	d107      	bne.n	800b0f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f06f 0220 	mvn.w	r2, #32
 800b0f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fcfe 	bl	800baf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b0f8:	bf00      	nop
 800b0fa:	3708      	adds	r7, #8
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b116:	2b01      	cmp	r3, #1
 800b118:	d101      	bne.n	800b11e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b11a:	2302      	movs	r3, #2
 800b11c:	e0ae      	b.n	800b27c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b0c      	cmp	r3, #12
 800b12a:	f200 809f 	bhi.w	800b26c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b12e:	a201      	add	r2, pc, #4	@ (adr r2, 800b134 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b134:	0800b169 	.word	0x0800b169
 800b138:	0800b26d 	.word	0x0800b26d
 800b13c:	0800b26d 	.word	0x0800b26d
 800b140:	0800b26d 	.word	0x0800b26d
 800b144:	0800b1a9 	.word	0x0800b1a9
 800b148:	0800b26d 	.word	0x0800b26d
 800b14c:	0800b26d 	.word	0x0800b26d
 800b150:	0800b26d 	.word	0x0800b26d
 800b154:	0800b1eb 	.word	0x0800b1eb
 800b158:	0800b26d 	.word	0x0800b26d
 800b15c:	0800b26d 	.word	0x0800b26d
 800b160:	0800b26d 	.word	0x0800b26d
 800b164:	0800b22b 	.word	0x0800b22b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68b9      	ldr	r1, [r7, #8]
 800b16e:	4618      	mov	r0, r3
 800b170:	f000 f9ee 	bl	800b550 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	699a      	ldr	r2, [r3, #24]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f042 0208 	orr.w	r2, r2, #8
 800b182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	699a      	ldr	r2, [r3, #24]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f022 0204 	bic.w	r2, r2, #4
 800b192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	6999      	ldr	r1, [r3, #24]
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	691a      	ldr	r2, [r3, #16]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	430a      	orrs	r2, r1
 800b1a4:	619a      	str	r2, [r3, #24]
      break;
 800b1a6:	e064      	b.n	800b272 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68b9      	ldr	r1, [r7, #8]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f000 fa3e 	bl	800b630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	699a      	ldr	r2, [r3, #24]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	699a      	ldr	r2, [r3, #24]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	6999      	ldr	r1, [r3, #24]
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	021a      	lsls	r2, r3, #8
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	430a      	orrs	r2, r1
 800b1e6:	619a      	str	r2, [r3, #24]
      break;
 800b1e8:	e043      	b.n	800b272 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68b9      	ldr	r1, [r7, #8]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f000 fa91 	bl	800b718 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	69da      	ldr	r2, [r3, #28]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f042 0208 	orr.w	r2, r2, #8
 800b204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	69da      	ldr	r2, [r3, #28]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f022 0204 	bic.w	r2, r2, #4
 800b214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	69d9      	ldr	r1, [r3, #28]
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	691a      	ldr	r2, [r3, #16]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	430a      	orrs	r2, r1
 800b226:	61da      	str	r2, [r3, #28]
      break;
 800b228:	e023      	b.n	800b272 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	68b9      	ldr	r1, [r7, #8]
 800b230:	4618      	mov	r0, r3
 800b232:	f000 fae5 	bl	800b800 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	69da      	ldr	r2, [r3, #28]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	69da      	ldr	r2, [r3, #28]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	69d9      	ldr	r1, [r3, #28]
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	691b      	ldr	r3, [r3, #16]
 800b260:	021a      	lsls	r2, r3, #8
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	430a      	orrs	r2, r1
 800b268:	61da      	str	r2, [r3, #28]
      break;
 800b26a:	e002      	b.n	800b272 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	75fb      	strb	r3, [r7, #23]
      break;
 800b270:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b27a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3718      	adds	r7, #24
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d101      	bne.n	800b2a0 <HAL_TIM_ConfigClockSource+0x1c>
 800b29c:	2302      	movs	r3, #2
 800b29e:	e0b4      	b.n	800b40a <HAL_TIM_ConfigClockSource+0x186>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2202      	movs	r2, #2
 800b2ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b2be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b2c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2d8:	d03e      	beq.n	800b358 <HAL_TIM_ConfigClockSource+0xd4>
 800b2da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2de:	f200 8087 	bhi.w	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b2e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2e6:	f000 8086 	beq.w	800b3f6 <HAL_TIM_ConfigClockSource+0x172>
 800b2ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2ee:	d87f      	bhi.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b2f0:	2b70      	cmp	r3, #112	@ 0x70
 800b2f2:	d01a      	beq.n	800b32a <HAL_TIM_ConfigClockSource+0xa6>
 800b2f4:	2b70      	cmp	r3, #112	@ 0x70
 800b2f6:	d87b      	bhi.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b2f8:	2b60      	cmp	r3, #96	@ 0x60
 800b2fa:	d050      	beq.n	800b39e <HAL_TIM_ConfigClockSource+0x11a>
 800b2fc:	2b60      	cmp	r3, #96	@ 0x60
 800b2fe:	d877      	bhi.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b300:	2b50      	cmp	r3, #80	@ 0x50
 800b302:	d03c      	beq.n	800b37e <HAL_TIM_ConfigClockSource+0xfa>
 800b304:	2b50      	cmp	r3, #80	@ 0x50
 800b306:	d873      	bhi.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b308:	2b40      	cmp	r3, #64	@ 0x40
 800b30a:	d058      	beq.n	800b3be <HAL_TIM_ConfigClockSource+0x13a>
 800b30c:	2b40      	cmp	r3, #64	@ 0x40
 800b30e:	d86f      	bhi.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b310:	2b30      	cmp	r3, #48	@ 0x30
 800b312:	d064      	beq.n	800b3de <HAL_TIM_ConfigClockSource+0x15a>
 800b314:	2b30      	cmp	r3, #48	@ 0x30
 800b316:	d86b      	bhi.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b318:	2b20      	cmp	r3, #32
 800b31a:	d060      	beq.n	800b3de <HAL_TIM_ConfigClockSource+0x15a>
 800b31c:	2b20      	cmp	r3, #32
 800b31e:	d867      	bhi.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b320:	2b00      	cmp	r3, #0
 800b322:	d05c      	beq.n	800b3de <HAL_TIM_ConfigClockSource+0x15a>
 800b324:	2b10      	cmp	r3, #16
 800b326:	d05a      	beq.n	800b3de <HAL_TIM_ConfigClockSource+0x15a>
 800b328:	e062      	b.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b33a:	f000 fb2c 	bl	800b996 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b34c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	609a      	str	r2, [r3, #8]
      break;
 800b356:	e04f      	b.n	800b3f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b368:	f000 fb15 	bl	800b996 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	689a      	ldr	r2, [r3, #8]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b37a:	609a      	str	r2, [r3, #8]
      break;
 800b37c:	e03c      	b.n	800b3f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b38a:	461a      	mov	r2, r3
 800b38c:	f000 fa8c 	bl	800b8a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2150      	movs	r1, #80	@ 0x50
 800b396:	4618      	mov	r0, r3
 800b398:	f000 fae3 	bl	800b962 <TIM_ITRx_SetConfig>
      break;
 800b39c:	e02c      	b.n	800b3f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	f000 faaa 	bl	800b904 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2160      	movs	r1, #96	@ 0x60
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 fad3 	bl	800b962 <TIM_ITRx_SetConfig>
      break;
 800b3bc:	e01c      	b.n	800b3f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	f000 fa6c 	bl	800b8a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2140      	movs	r1, #64	@ 0x40
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f000 fac3 	bl	800b962 <TIM_ITRx_SetConfig>
      break;
 800b3dc:	e00c      	b.n	800b3f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	f000 faba 	bl	800b962 <TIM_ITRx_SetConfig>
      break;
 800b3ee:	e003      	b.n	800b3f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3f4:	e000      	b.n	800b3f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b3f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b408:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b412:	b480      	push	{r7}
 800b414:	b083      	sub	sp, #12
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b41a:	bf00      	nop
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	bc80      	pop	{r7}
 800b422:	4770      	bx	lr

0800b424 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b42c:	bf00      	nop
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	bc80      	pop	{r7}
 800b434:	4770      	bx	lr

0800b436 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b436:	b480      	push	{r7}
 800b438:	b083      	sub	sp, #12
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b43e:	bf00      	nop
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	bc80      	pop	{r7}
 800b446:	4770      	bx	lr

0800b448 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	bc80      	pop	{r7}
 800b458:	4770      	bx	lr
	...

0800b45c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a33      	ldr	r2, [pc, #204]	@ (800b53c <TIM_Base_SetConfig+0xe0>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d013      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a32      	ldr	r2, [pc, #200]	@ (800b540 <TIM_Base_SetConfig+0xe4>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d00f      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b482:	d00b      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4a2f      	ldr	r2, [pc, #188]	@ (800b544 <TIM_Base_SetConfig+0xe8>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d007      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a2e      	ldr	r2, [pc, #184]	@ (800b548 <TIM_Base_SetConfig+0xec>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d003      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a2d      	ldr	r2, [pc, #180]	@ (800b54c <TIM_Base_SetConfig+0xf0>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d108      	bne.n	800b4ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a22      	ldr	r2, [pc, #136]	@ (800b53c <TIM_Base_SetConfig+0xe0>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d013      	beq.n	800b4de <TIM_Base_SetConfig+0x82>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a21      	ldr	r2, [pc, #132]	@ (800b540 <TIM_Base_SetConfig+0xe4>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d00f      	beq.n	800b4de <TIM_Base_SetConfig+0x82>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4c4:	d00b      	beq.n	800b4de <TIM_Base_SetConfig+0x82>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4a1e      	ldr	r2, [pc, #120]	@ (800b544 <TIM_Base_SetConfig+0xe8>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d007      	beq.n	800b4de <TIM_Base_SetConfig+0x82>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a1d      	ldr	r2, [pc, #116]	@ (800b548 <TIM_Base_SetConfig+0xec>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d003      	beq.n	800b4de <TIM_Base_SetConfig+0x82>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a1c      	ldr	r2, [pc, #112]	@ (800b54c <TIM_Base_SetConfig+0xf0>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d108      	bne.n	800b4f0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	689a      	ldr	r2, [r3, #8]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4a09      	ldr	r2, [pc, #36]	@ (800b53c <TIM_Base_SetConfig+0xe0>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d003      	beq.n	800b524 <TIM_Base_SetConfig+0xc8>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	4a08      	ldr	r2, [pc, #32]	@ (800b540 <TIM_Base_SetConfig+0xe4>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d103      	bne.n	800b52c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	691a      	ldr	r2, [r3, #16]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	615a      	str	r2, [r3, #20]
}
 800b532:	bf00      	nop
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	bc80      	pop	{r7}
 800b53a:	4770      	bx	lr
 800b53c:	40012c00 	.word	0x40012c00
 800b540:	40013400 	.word	0x40013400
 800b544:	40000400 	.word	0x40000400
 800b548:	40000800 	.word	0x40000800
 800b54c:	40000c00 	.word	0x40000c00

0800b550 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b550:	b480      	push	{r7}
 800b552:	b087      	sub	sp, #28
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a1b      	ldr	r3, [r3, #32]
 800b55e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a1b      	ldr	r3, [r3, #32]
 800b564:	f023 0201 	bic.w	r2, r3, #1
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	699b      	ldr	r3, [r3, #24]
 800b576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b57e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f023 0303 	bic.w	r3, r3, #3
 800b586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	4313      	orrs	r3, r2
 800b590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	f023 0302 	bic.w	r3, r3, #2
 800b598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4a20      	ldr	r2, [pc, #128]	@ (800b628 <TIM_OC1_SetConfig+0xd8>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d003      	beq.n	800b5b4 <TIM_OC1_SetConfig+0x64>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4a1f      	ldr	r2, [pc, #124]	@ (800b62c <TIM_OC1_SetConfig+0xdc>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d10c      	bne.n	800b5ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	f023 0308 	bic.w	r3, r3, #8
 800b5ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	f023 0304 	bic.w	r3, r3, #4
 800b5cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a15      	ldr	r2, [pc, #84]	@ (800b628 <TIM_OC1_SetConfig+0xd8>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d003      	beq.n	800b5de <TIM_OC1_SetConfig+0x8e>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a14      	ldr	r2, [pc, #80]	@ (800b62c <TIM_OC1_SetConfig+0xdc>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d111      	bne.n	800b602 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b5ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	695b      	ldr	r3, [r3, #20]
 800b5f2:	693a      	ldr	r2, [r7, #16]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	693a      	ldr	r2, [r7, #16]
 800b5fe:	4313      	orrs	r3, r2
 800b600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	693a      	ldr	r2, [r7, #16]
 800b606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	685a      	ldr	r2, [r3, #4]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	621a      	str	r2, [r3, #32]
}
 800b61c:	bf00      	nop
 800b61e:	371c      	adds	r7, #28
 800b620:	46bd      	mov	sp, r7
 800b622:	bc80      	pop	{r7}
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	40012c00 	.word	0x40012c00
 800b62c:	40013400 	.word	0x40013400

0800b630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b630:	b480      	push	{r7}
 800b632:	b087      	sub	sp, #28
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6a1b      	ldr	r3, [r3, #32]
 800b63e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a1b      	ldr	r3, [r3, #32]
 800b644:	f023 0210 	bic.w	r2, r3, #16
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	699b      	ldr	r3, [r3, #24]
 800b656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b65e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	021b      	lsls	r3, r3, #8
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	4313      	orrs	r3, r2
 800b672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	f023 0320 	bic.w	r3, r3, #32
 800b67a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	011b      	lsls	r3, r3, #4
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	4313      	orrs	r3, r2
 800b686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a21      	ldr	r2, [pc, #132]	@ (800b710 <TIM_OC2_SetConfig+0xe0>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d003      	beq.n	800b698 <TIM_OC2_SetConfig+0x68>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a20      	ldr	r2, [pc, #128]	@ (800b714 <TIM_OC2_SetConfig+0xe4>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d10d      	bne.n	800b6b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b69e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	011b      	lsls	r3, r3, #4
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4a16      	ldr	r2, [pc, #88]	@ (800b710 <TIM_OC2_SetConfig+0xe0>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d003      	beq.n	800b6c4 <TIM_OC2_SetConfig+0x94>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4a15      	ldr	r2, [pc, #84]	@ (800b714 <TIM_OC2_SetConfig+0xe4>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d113      	bne.n	800b6ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b6ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b6d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	695b      	ldr	r3, [r3, #20]
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	693a      	ldr	r2, [r7, #16]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	693a      	ldr	r2, [r7, #16]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	621a      	str	r2, [r3, #32]
}
 800b706:	bf00      	nop
 800b708:	371c      	adds	r7, #28
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bc80      	pop	{r7}
 800b70e:	4770      	bx	lr
 800b710:	40012c00 	.word	0x40012c00
 800b714:	40013400 	.word	0x40013400

0800b718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b718:	b480      	push	{r7}
 800b71a:	b087      	sub	sp, #28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a1b      	ldr	r3, [r3, #32]
 800b72c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	69db      	ldr	r3, [r3, #28]
 800b73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f023 0303 	bic.w	r3, r3, #3
 800b74e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	4313      	orrs	r3, r2
 800b758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	021b      	lsls	r3, r3, #8
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a21      	ldr	r2, [pc, #132]	@ (800b7f8 <TIM_OC3_SetConfig+0xe0>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d003      	beq.n	800b77e <TIM_OC3_SetConfig+0x66>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a20      	ldr	r2, [pc, #128]	@ (800b7fc <TIM_OC3_SetConfig+0xe4>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d10d      	bne.n	800b79a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	021b      	lsls	r3, r3, #8
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	4313      	orrs	r3, r2
 800b790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a16      	ldr	r2, [pc, #88]	@ (800b7f8 <TIM_OC3_SetConfig+0xe0>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d003      	beq.n	800b7aa <TIM_OC3_SetConfig+0x92>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a15      	ldr	r2, [pc, #84]	@ (800b7fc <TIM_OC3_SetConfig+0xe4>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d113      	bne.n	800b7d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b7b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	011b      	lsls	r3, r3, #4
 800b7c0:	693a      	ldr	r2, [r7, #16]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	011b      	lsls	r3, r3, #4
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	693a      	ldr	r2, [r7, #16]
 800b7d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	685a      	ldr	r2, [r3, #4]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	621a      	str	r2, [r3, #32]
}
 800b7ec:	bf00      	nop
 800b7ee:	371c      	adds	r7, #28
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bc80      	pop	{r7}
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	40012c00 	.word	0x40012c00
 800b7fc:	40013400 	.word	0x40013400

0800b800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b800:	b480      	push	{r7}
 800b802:	b087      	sub	sp, #28
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a1b      	ldr	r3, [r3, #32]
 800b814:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	69db      	ldr	r3, [r3, #28]
 800b826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b82e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	021b      	lsls	r3, r3, #8
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	4313      	orrs	r3, r2
 800b842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b84a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	031b      	lsls	r3, r3, #12
 800b852:	693a      	ldr	r2, [r7, #16]
 800b854:	4313      	orrs	r3, r2
 800b856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a11      	ldr	r2, [pc, #68]	@ (800b8a0 <TIM_OC4_SetConfig+0xa0>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d003      	beq.n	800b868 <TIM_OC4_SetConfig+0x68>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a10      	ldr	r2, [pc, #64]	@ (800b8a4 <TIM_OC4_SetConfig+0xa4>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d109      	bne.n	800b87c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b86e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	695b      	ldr	r3, [r3, #20]
 800b874:	019b      	lsls	r3, r3, #6
 800b876:	697a      	ldr	r2, [r7, #20]
 800b878:	4313      	orrs	r3, r2
 800b87a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	685a      	ldr	r2, [r3, #4]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	621a      	str	r2, [r3, #32]
}
 800b896:	bf00      	nop
 800b898:	371c      	adds	r7, #28
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bc80      	pop	{r7}
 800b89e:	4770      	bx	lr
 800b8a0:	40012c00 	.word	0x40012c00
 800b8a4:	40013400 	.word	0x40013400

0800b8a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b087      	sub	sp, #28
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6a1b      	ldr	r3, [r3, #32]
 800b8b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	f023 0201 	bic.w	r2, r3, #1
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	699b      	ldr	r3, [r3, #24]
 800b8ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b8d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	011b      	lsls	r3, r3, #4
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f023 030a 	bic.w	r3, r3, #10
 800b8e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	693a      	ldr	r2, [r7, #16]
 800b8f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	621a      	str	r2, [r3, #32]
}
 800b8fa:	bf00      	nop
 800b8fc:	371c      	adds	r7, #28
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bc80      	pop	{r7}
 800b902:	4770      	bx	lr

0800b904 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b904:	b480      	push	{r7}
 800b906:	b087      	sub	sp, #28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6a1b      	ldr	r3, [r3, #32]
 800b914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6a1b      	ldr	r3, [r3, #32]
 800b91a:	f023 0210 	bic.w	r2, r3, #16
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	699b      	ldr	r3, [r3, #24]
 800b926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b92e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	031b      	lsls	r3, r3, #12
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	4313      	orrs	r3, r2
 800b938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b940:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	011b      	lsls	r3, r3, #4
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	4313      	orrs	r3, r2
 800b94a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	693a      	ldr	r2, [r7, #16]
 800b950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	697a      	ldr	r2, [r7, #20]
 800b956:	621a      	str	r2, [r3, #32]
}
 800b958:	bf00      	nop
 800b95a:	371c      	adds	r7, #28
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bc80      	pop	{r7}
 800b960:	4770      	bx	lr

0800b962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b962:	b480      	push	{r7}
 800b964:	b085      	sub	sp, #20
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
 800b96a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	4313      	orrs	r3, r2
 800b980:	f043 0307 	orr.w	r3, r3, #7
 800b984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	68fa      	ldr	r2, [r7, #12]
 800b98a:	609a      	str	r2, [r3, #8]
}
 800b98c:	bf00      	nop
 800b98e:	3714      	adds	r7, #20
 800b990:	46bd      	mov	sp, r7
 800b992:	bc80      	pop	{r7}
 800b994:	4770      	bx	lr

0800b996 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b996:	b480      	push	{r7}
 800b998:	b087      	sub	sp, #28
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	60f8      	str	r0, [r7, #12]
 800b99e:	60b9      	str	r1, [r7, #8]
 800b9a0:	607a      	str	r2, [r7, #4]
 800b9a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b9b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	021a      	lsls	r2, r3, #8
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	431a      	orrs	r2, r3
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	697a      	ldr	r2, [r7, #20]
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	609a      	str	r2, [r3, #8]
}
 800b9ca:	bf00      	nop
 800b9cc:	371c      	adds	r7, #28
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bc80      	pop	{r7}
 800b9d2:	4770      	bx	lr

0800b9d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b087      	sub	sp, #28
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	f003 031f 	and.w	r3, r3, #31
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6a1a      	ldr	r2, [r3, #32]
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	43db      	mvns	r3, r3
 800b9f6:	401a      	ands	r2, r3
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6a1a      	ldr	r2, [r3, #32]
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	f003 031f 	and.w	r3, r3, #31
 800ba06:	6879      	ldr	r1, [r7, #4]
 800ba08:	fa01 f303 	lsl.w	r3, r1, r3
 800ba0c:	431a      	orrs	r2, r3
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	621a      	str	r2, [r3, #32]
}
 800ba12:	bf00      	nop
 800ba14:	371c      	adds	r7, #28
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bc80      	pop	{r7}
 800ba1a:	4770      	bx	lr

0800ba1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d101      	bne.n	800ba34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba30:	2302      	movs	r3, #2
 800ba32:	e050      	b.n	800bad6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2202      	movs	r2, #2
 800ba40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a1b      	ldr	r2, [pc, #108]	@ (800bae0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d018      	beq.n	800baaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a19      	ldr	r2, [pc, #100]	@ (800bae4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d013      	beq.n	800baaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba8a:	d00e      	beq.n	800baaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a15      	ldr	r2, [pc, #84]	@ (800bae8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d009      	beq.n	800baaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a14      	ldr	r2, [pc, #80]	@ (800baec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d004      	beq.n	800baaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a12      	ldr	r2, [pc, #72]	@ (800baf0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d10c      	bne.n	800bac4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	4313      	orrs	r3, r2
 800baba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	68ba      	ldr	r2, [r7, #8]
 800bac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3714      	adds	r7, #20
 800bada:	46bd      	mov	sp, r7
 800badc:	bc80      	pop	{r7}
 800bade:	4770      	bx	lr
 800bae0:	40012c00 	.word	0x40012c00
 800bae4:	40013400 	.word	0x40013400
 800bae8:	40000400 	.word	0x40000400
 800baec:	40000800 	.word	0x40000800
 800baf0:	40000c00 	.word	0x40000c00

0800baf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bafc:	bf00      	nop
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bc80      	pop	{r7}
 800bb04:	4770      	bx	lr

0800bb06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb06:	b480      	push	{r7}
 800bb08:	b083      	sub	sp, #12
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb0e:	bf00      	nop
 800bb10:	370c      	adds	r7, #12
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bc80      	pop	{r7}
 800bb16:	4770      	bx	lr

0800bb18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d101      	bne.n	800bb2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	e042      	b.n	800bbb0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d106      	bne.n	800bb44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7f9 fa6e 	bl	8005020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2224      	movs	r2, #36	@ 0x24
 800bb48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68da      	ldr	r2, [r3, #12]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bb5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 ff01 	bl	800c964 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	691a      	ldr	r2, [r3, #16]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bb70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	695a      	ldr	r2, [r3, #20]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bb80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68da      	ldr	r2, [r3, #12]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bb90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2200      	movs	r2, #0
 800bb96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2220      	movs	r2, #32
 800bb9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2220      	movs	r2, #32
 800bba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b08a      	sub	sp, #40	@ 0x28
 800bbbc:	af02      	add	r7, sp, #8
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	603b      	str	r3, [r7, #0]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	2b20      	cmp	r3, #32
 800bbd6:	d16d      	bne.n	800bcb4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d002      	beq.n	800bbe4 <HAL_UART_Transmit+0x2c>
 800bbde:	88fb      	ldrh	r3, [r7, #6]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d101      	bne.n	800bbe8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e066      	b.n	800bcb6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2200      	movs	r2, #0
 800bbec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2221      	movs	r2, #33	@ 0x21
 800bbf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bbf6:	f7fa fe41 	bl	800687c <HAL_GetTick>
 800bbfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	88fa      	ldrh	r2, [r7, #6]
 800bc00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	88fa      	ldrh	r2, [r7, #6]
 800bc06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc10:	d108      	bne.n	800bc24 <HAL_UART_Transmit+0x6c>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	691b      	ldr	r3, [r3, #16]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d104      	bne.n	800bc24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	61bb      	str	r3, [r7, #24]
 800bc22:	e003      	b.n	800bc2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bc2c:	e02a      	b.n	800bc84 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	2200      	movs	r2, #0
 800bc36:	2180      	movs	r1, #128	@ 0x80
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f000 fc29 	bl	800c490 <UART_WaitOnFlagUntilTimeout>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d001      	beq.n	800bc48 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800bc44:	2303      	movs	r3, #3
 800bc46:	e036      	b.n	800bcb6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10b      	bne.n	800bc66 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	881b      	ldrh	r3, [r3, #0]
 800bc52:	461a      	mov	r2, r3
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	3302      	adds	r3, #2
 800bc62:	61bb      	str	r3, [r7, #24]
 800bc64:	e007      	b.n	800bc76 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	781a      	ldrb	r2, [r3, #0]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	3301      	adds	r3, #1
 800bc74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1cf      	bne.n	800bc2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	2200      	movs	r2, #0
 800bc96:	2140      	movs	r1, #64	@ 0x40
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	f000 fbf9 	bl	800c490 <UART_WaitOnFlagUntilTimeout>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800bca4:	2303      	movs	r3, #3
 800bca6:	e006      	b.n	800bcb6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2220      	movs	r2, #32
 800bcac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	e000      	b.n	800bcb6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800bcb4:	2302      	movs	r3, #2
  }
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3720      	adds	r7, #32
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b084      	sub	sp, #16
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	60f8      	str	r0, [r7, #12]
 800bcc6:	60b9      	str	r1, [r7, #8]
 800bcc8:	4613      	mov	r3, r2
 800bcca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	2b20      	cmp	r3, #32
 800bcd6:	d112      	bne.n	800bcfe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d002      	beq.n	800bce4 <HAL_UART_Receive_IT+0x26>
 800bcde:	88fb      	ldrh	r3, [r7, #6]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d101      	bne.n	800bce8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e00b      	b.n	800bd00 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2200      	movs	r2, #0
 800bcec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bcee:	88fb      	ldrh	r3, [r7, #6]
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	68b9      	ldr	r1, [r7, #8]
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f000 fc39 	bl	800c56c <UART_Start_Receive_IT>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	e000      	b.n	800bd00 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800bcfe:	2302      	movs	r3, #2
  }
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b08c      	sub	sp, #48	@ 0x30
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	4613      	mov	r3, r2
 800bd14:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	2b20      	cmp	r3, #32
 800bd20:	d156      	bne.n	800bdd0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d002      	beq.n	800bd2e <HAL_UART_Transmit_DMA+0x26>
 800bd28:	88fb      	ldrh	r3, [r7, #6]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d101      	bne.n	800bd32 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e04f      	b.n	800bdd2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800bd32:	68ba      	ldr	r2, [r7, #8]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	88fa      	ldrh	r2, [r7, #6]
 800bd3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	88fa      	ldrh	r2, [r7, #6]
 800bd42:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2200      	movs	r2, #0
 800bd48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2221      	movs	r2, #33	@ 0x21
 800bd4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd56:	4a21      	ldr	r2, [pc, #132]	@ (800bddc <HAL_UART_Transmit_DMA+0xd4>)
 800bd58:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd5e:	4a20      	ldr	r2, [pc, #128]	@ (800bde0 <HAL_UART_Transmit_DMA+0xd8>)
 800bd60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd66:	4a1f      	ldr	r2, [pc, #124]	@ (800bde4 <HAL_UART_Transmit_DMA+0xdc>)
 800bd68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd6e:	2200      	movs	r2, #0
 800bd70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800bd72:	f107 0308 	add.w	r3, r7, #8
 800bd76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800bd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd7e:	6819      	ldr	r1, [r3, #0]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3304      	adds	r3, #4
 800bd86:	461a      	mov	r2, r3
 800bd88:	88fb      	ldrh	r3, [r7, #6]
 800bd8a:	f7fa fefb 	bl	8006b84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bd96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	3314      	adds	r3, #20
 800bd9e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	e853 3f00 	ldrex	r3, [r3]
 800bda6:	617b      	str	r3, [r7, #20]
   return(result);
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3314      	adds	r3, #20
 800bdb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bdb8:	627a      	str	r2, [r7, #36]	@ 0x24
 800bdba:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdbc:	6a39      	ldr	r1, [r7, #32]
 800bdbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdc0:	e841 2300 	strex	r3, r2, [r1]
 800bdc4:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1e5      	bne.n	800bd98 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	e000      	b.n	800bdd2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800bdd0:	2302      	movs	r3, #2
  }
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3730      	adds	r7, #48	@ 0x30
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	0800c347 	.word	0x0800c347
 800bde0:	0800c3e1 	.word	0x0800c3e1
 800bde4:	0800c3fd 	.word	0x0800c3fd

0800bde8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b0ba      	sub	sp, #232	@ 0xe8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	695b      	ldr	r3, [r3, #20]
 800be0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800be0e:	2300      	movs	r3, #0
 800be10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800be14:	2300      	movs	r3, #0
 800be16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800be1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be1e:	f003 030f 	and.w	r3, r3, #15
 800be22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800be26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10f      	bne.n	800be4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be32:	f003 0320 	and.w	r3, r3, #32
 800be36:	2b00      	cmp	r3, #0
 800be38:	d009      	beq.n	800be4e <HAL_UART_IRQHandler+0x66>
 800be3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be3e:	f003 0320 	and.w	r3, r3, #32
 800be42:	2b00      	cmp	r3, #0
 800be44:	d003      	beq.n	800be4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 fccd 	bl	800c7e6 <UART_Receive_IT>
      return;
 800be4c:	e25b      	b.n	800c306 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800be4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800be52:	2b00      	cmp	r3, #0
 800be54:	f000 80de 	beq.w	800c014 <HAL_UART_IRQHandler+0x22c>
 800be58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be5c:	f003 0301 	and.w	r3, r3, #1
 800be60:	2b00      	cmp	r3, #0
 800be62:	d106      	bne.n	800be72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800be64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f000 80d1 	beq.w	800c014 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800be72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be76:	f003 0301 	and.w	r3, r3, #1
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00b      	beq.n	800be96 <HAL_UART_IRQHandler+0xae>
 800be7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be86:	2b00      	cmp	r3, #0
 800be88:	d005      	beq.n	800be96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be8e:	f043 0201 	orr.w	r2, r3, #1
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be9a:	f003 0304 	and.w	r3, r3, #4
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00b      	beq.n	800beba <HAL_UART_IRQHandler+0xd2>
 800bea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d005      	beq.n	800beba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beb2:	f043 0202 	orr.w	r2, r3, #2
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800beba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bebe:	f003 0302 	and.w	r3, r3, #2
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00b      	beq.n	800bede <HAL_UART_IRQHandler+0xf6>
 800bec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d005      	beq.n	800bede <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bed6:	f043 0204 	orr.w	r2, r3, #4
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bee2:	f003 0308 	and.w	r3, r3, #8
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d011      	beq.n	800bf0e <HAL_UART_IRQHandler+0x126>
 800beea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800beee:	f003 0320 	and.w	r3, r3, #32
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d105      	bne.n	800bf02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800befa:	f003 0301 	and.w	r3, r3, #1
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d005      	beq.n	800bf0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf06:	f043 0208 	orr.w	r2, r3, #8
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	f000 81f2 	beq.w	800c2fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bf18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf1c:	f003 0320 	and.w	r3, r3, #32
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d008      	beq.n	800bf36 <HAL_UART_IRQHandler+0x14e>
 800bf24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf28:	f003 0320 	and.w	r3, r3, #32
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d002      	beq.n	800bf36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 fc58 	bl	800c7e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	695b      	ldr	r3, [r3, #20]
 800bf3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	bf14      	ite	ne
 800bf44:	2301      	movne	r3, #1
 800bf46:	2300      	moveq	r3, #0
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf52:	f003 0308 	and.w	r3, r3, #8
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d103      	bne.n	800bf62 <HAL_UART_IRQHandler+0x17a>
 800bf5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d04f      	beq.n	800c002 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fb62 	bl	800c62c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	695b      	ldr	r3, [r3, #20]
 800bf6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d041      	beq.n	800bffa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	3314      	adds	r3, #20
 800bf7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bf84:	e853 3f00 	ldrex	r3, [r3]
 800bf88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bf8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	3314      	adds	r3, #20
 800bf9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bfa2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bfa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bfae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bfb2:	e841 2300 	strex	r3, r2, [r1]
 800bfb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bfba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1d9      	bne.n	800bf76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d013      	beq.n	800bff2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfce:	4a7e      	ldr	r2, [pc, #504]	@ (800c1c8 <HAL_UART_IRQHandler+0x3e0>)
 800bfd0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fa fe70 	bl	8006cbc <HAL_DMA_Abort_IT>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d016      	beq.n	800c010 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bfec:	4610      	mov	r0, r2
 800bfee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bff0:	e00e      	b.n	800c010 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f993 	bl	800c31e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bff8:	e00a      	b.n	800c010 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 f98f 	bl	800c31e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c000:	e006      	b.n	800c010 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 f98b 	bl	800c31e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c00e:	e175      	b.n	800c2fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c010:	bf00      	nop
    return;
 800c012:	e173      	b.n	800c2fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c018:	2b01      	cmp	r3, #1
 800c01a:	f040 814f 	bne.w	800c2bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c01e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c022:	f003 0310 	and.w	r3, r3, #16
 800c026:	2b00      	cmp	r3, #0
 800c028:	f000 8148 	beq.w	800c2bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c02c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c030:	f003 0310 	and.w	r3, r3, #16
 800c034:	2b00      	cmp	r3, #0
 800c036:	f000 8141 	beq.w	800c2bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c03a:	2300      	movs	r3, #0
 800c03c:	60bb      	str	r3, [r7, #8]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	60bb      	str	r3, [r7, #8]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	60bb      	str	r3, [r7, #8]
 800c04e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	695b      	ldr	r3, [r3, #20]
 800c056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f000 80b6 	beq.w	800c1cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c06c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c070:	2b00      	cmp	r3, #0
 800c072:	f000 8145 	beq.w	800c300 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c07a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c07e:	429a      	cmp	r2, r3
 800c080:	f080 813e 	bcs.w	800c300 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c08a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c090:	699b      	ldr	r3, [r3, #24]
 800c092:	2b20      	cmp	r3, #32
 800c094:	f000 8088 	beq.w	800c1a8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	330c      	adds	r3, #12
 800c09e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c0a6:	e853 3f00 	ldrex	r3, [r3]
 800c0aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c0ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c0b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	330c      	adds	r3, #12
 800c0c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c0c4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c0c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c0d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c0d4:	e841 2300 	strex	r3, r2, [r1]
 800c0d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c0dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d1d9      	bne.n	800c098 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3314      	adds	r3, #20
 800c0ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0ee:	e853 3f00 	ldrex	r3, [r3]
 800c0f2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c0f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0f6:	f023 0301 	bic.w	r3, r3, #1
 800c0fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	3314      	adds	r3, #20
 800c104:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c108:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c10c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c110:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c114:	e841 2300 	strex	r3, r2, [r1]
 800c118:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c11a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d1e1      	bne.n	800c0e4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	3314      	adds	r3, #20
 800c126:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c128:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c12a:	e853 3f00 	ldrex	r3, [r3]
 800c12e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c130:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c132:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c136:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	3314      	adds	r3, #20
 800c140:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c144:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c146:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c148:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c14a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c14c:	e841 2300 	strex	r3, r2, [r1]
 800c150:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1e3      	bne.n	800c120 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2220      	movs	r2, #32
 800c15c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	330c      	adds	r3, #12
 800c16c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c170:	e853 3f00 	ldrex	r3, [r3]
 800c174:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c178:	f023 0310 	bic.w	r3, r3, #16
 800c17c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	330c      	adds	r3, #12
 800c186:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c18a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c18c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c190:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c192:	e841 2300 	strex	r3, r2, [r1]
 800c196:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1e3      	bne.n	800c166 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fa fd4e 	bl	8006c44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2202      	movs	r2, #2
 800c1ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	1ad3      	subs	r3, r2, r3
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f8b6 	bl	800c330 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c1c4:	e09c      	b.n	800c300 <HAL_UART_IRQHandler+0x518>
 800c1c6:	bf00      	nop
 800c1c8:	0800c6f1 	.word	0x0800c6f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f000 808e 	beq.w	800c304 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c1e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	f000 8089 	beq.w	800c304 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	330c      	adds	r3, #12
 800c1f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1fc:	e853 3f00 	ldrex	r3, [r3]
 800c200:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c204:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c208:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	330c      	adds	r3, #12
 800c212:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c216:	647a      	str	r2, [r7, #68]	@ 0x44
 800c218:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c21a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c21c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c21e:	e841 2300 	strex	r3, r2, [r1]
 800c222:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c226:	2b00      	cmp	r3, #0
 800c228:	d1e3      	bne.n	800c1f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	3314      	adds	r3, #20
 800c230:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c234:	e853 3f00 	ldrex	r3, [r3]
 800c238:	623b      	str	r3, [r7, #32]
   return(result);
 800c23a:	6a3b      	ldr	r3, [r7, #32]
 800c23c:	f023 0301 	bic.w	r3, r3, #1
 800c240:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	3314      	adds	r3, #20
 800c24a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c24e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c250:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c252:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c256:	e841 2300 	strex	r3, r2, [r1]
 800c25a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1e3      	bne.n	800c22a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2220      	movs	r2, #32
 800c266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	330c      	adds	r3, #12
 800c276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	e853 3f00 	ldrex	r3, [r3]
 800c27e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f023 0310 	bic.w	r3, r3, #16
 800c286:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	330c      	adds	r3, #12
 800c290:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c294:	61fa      	str	r2, [r7, #28]
 800c296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c298:	69b9      	ldr	r1, [r7, #24]
 800c29a:	69fa      	ldr	r2, [r7, #28]
 800c29c:	e841 2300 	strex	r3, r2, [r1]
 800c2a0:	617b      	str	r3, [r7, #20]
   return(result);
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1e3      	bne.n	800c270 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2202      	movs	r2, #2
 800c2ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c2ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 f83b 	bl	800c330 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c2ba:	e023      	b.n	800c304 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c2bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d009      	beq.n	800c2dc <HAL_UART_IRQHandler+0x4f4>
 800c2c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d003      	beq.n	800c2dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fa1f 	bl	800c718 <UART_Transmit_IT>
    return;
 800c2da:	e014      	b.n	800c306 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d00e      	beq.n	800c306 <HAL_UART_IRQHandler+0x51e>
 800c2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d008      	beq.n	800c306 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fa5e 	bl	800c7b6 <UART_EndTransmit_IT>
    return;
 800c2fa:	e004      	b.n	800c306 <HAL_UART_IRQHandler+0x51e>
    return;
 800c2fc:	bf00      	nop
 800c2fe:	e002      	b.n	800c306 <HAL_UART_IRQHandler+0x51e>
      return;
 800c300:	bf00      	nop
 800c302:	e000      	b.n	800c306 <HAL_UART_IRQHandler+0x51e>
      return;
 800c304:	bf00      	nop
  }
}
 800c306:	37e8      	adds	r7, #232	@ 0xe8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c314:	bf00      	nop
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	bc80      	pop	{r7}
 800c31c:	4770      	bx	lr

0800c31e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c31e:	b480      	push	{r7}
 800c320:	b083      	sub	sp, #12
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c326:	bf00      	nop
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bc80      	pop	{r7}
 800c32e:	4770      	bx	lr

0800c330 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	460b      	mov	r3, r1
 800c33a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c33c:	bf00      	nop
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	bc80      	pop	{r7}
 800c344:	4770      	bx	lr

0800c346 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b090      	sub	sp, #64	@ 0x40
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f003 0320 	and.w	r3, r3, #32
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d137      	bne.n	800c3d2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c364:	2200      	movs	r2, #0
 800c366:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	3314      	adds	r3, #20
 800c36e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c372:	e853 3f00 	ldrex	r3, [r3]
 800c376:	623b      	str	r3, [r7, #32]
   return(result);
 800c378:	6a3b      	ldr	r3, [r7, #32]
 800c37a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c37e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	3314      	adds	r3, #20
 800c386:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c388:	633a      	str	r2, [r7, #48]	@ 0x30
 800c38a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c38e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c390:	e841 2300 	strex	r3, r2, [r1]
 800c394:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1e5      	bne.n	800c368 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c39c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	330c      	adds	r3, #12
 800c3a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	e853 3f00 	ldrex	r3, [r3]
 800c3aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	330c      	adds	r3, #12
 800c3ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c3bc:	61fa      	str	r2, [r7, #28]
 800c3be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c0:	69b9      	ldr	r1, [r7, #24]
 800c3c2:	69fa      	ldr	r2, [r7, #28]
 800c3c4:	e841 2300 	strex	r3, r2, [r1]
 800c3c8:	617b      	str	r3, [r7, #20]
   return(result);
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1e5      	bne.n	800c39c <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c3d0:	e002      	b.n	800c3d8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c3d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c3d4:	f7f7 fca6 	bl	8003d24 <HAL_UART_TxCpltCallback>
}
 800c3d8:	bf00      	nop
 800c3da:	3740      	adds	r7, #64	@ 0x40
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f7ff ff8c 	bl	800c30c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3f4:	bf00      	nop
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c404:	2300      	movs	r3, #0
 800c406:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c40c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	695b      	ldr	r3, [r3, #20]
 800c414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c418:	2b00      	cmp	r3, #0
 800c41a:	bf14      	ite	ne
 800c41c:	2301      	movne	r3, #1
 800c41e:	2300      	moveq	r3, #0
 800c420:	b2db      	uxtb	r3, r3
 800c422:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	2b21      	cmp	r3, #33	@ 0x21
 800c42e:	d108      	bne.n	800c442 <UART_DMAError+0x46>
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d005      	beq.n	800c442 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	2200      	movs	r2, #0
 800c43a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800c43c:	68b8      	ldr	r0, [r7, #8]
 800c43e:	f000 f8ce 	bl	800c5de <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	695b      	ldr	r3, [r3, #20]
 800c448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	bf14      	ite	ne
 800c450:	2301      	movne	r3, #1
 800c452:	2300      	moveq	r3, #0
 800c454:	b2db      	uxtb	r3, r3
 800c456:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	2b22      	cmp	r3, #34	@ 0x22
 800c462:	d108      	bne.n	800c476 <UART_DMAError+0x7a>
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d005      	beq.n	800c476 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	2200      	movs	r2, #0
 800c46e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800c470:	68b8      	ldr	r0, [r7, #8]
 800c472:	f000 f8db 	bl	800c62c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c47a:	f043 0210 	orr.w	r2, r3, #16
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c482:	68b8      	ldr	r0, [r7, #8]
 800c484:	f7ff ff4b 	bl	800c31e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c488:	bf00      	nop
 800c48a:	3710      	adds	r7, #16
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b090      	sub	sp, #64	@ 0x40
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	603b      	str	r3, [r7, #0]
 800c49c:	4613      	mov	r3, r2
 800c49e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4a0:	e050      	b.n	800c544 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a8:	d04c      	beq.n	800c544 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c4aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d007      	beq.n	800c4c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c4b0:	f7fa f9e4 	bl	800687c <HAL_GetTick>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d241      	bcs.n	800c544 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	330c      	adds	r3, #12
 800c4c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ca:	e853 3f00 	ldrex	r3, [r3]
 800c4ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800c4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	330c      	adds	r3, #12
 800c4de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c4e0:	637a      	str	r2, [r7, #52]	@ 0x34
 800c4e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c4e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4e8:	e841 2300 	strex	r3, r2, [r1]
 800c4ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d1e5      	bne.n	800c4c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	3314      	adds	r3, #20
 800c4fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	e853 3f00 	ldrex	r3, [r3]
 800c502:	613b      	str	r3, [r7, #16]
   return(result);
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	f023 0301 	bic.w	r3, r3, #1
 800c50a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	3314      	adds	r3, #20
 800c512:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c514:	623a      	str	r2, [r7, #32]
 800c516:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c518:	69f9      	ldr	r1, [r7, #28]
 800c51a:	6a3a      	ldr	r2, [r7, #32]
 800c51c:	e841 2300 	strex	r3, r2, [r1]
 800c520:	61bb      	str	r3, [r7, #24]
   return(result);
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1e5      	bne.n	800c4f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2220      	movs	r2, #32
 800c52c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2220      	movs	r2, #32
 800c534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800c540:	2303      	movs	r3, #3
 800c542:	e00f      	b.n	800c564 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	4013      	ands	r3, r2
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	429a      	cmp	r2, r3
 800c552:	bf0c      	ite	eq
 800c554:	2301      	moveq	r3, #1
 800c556:	2300      	movne	r3, #0
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	461a      	mov	r2, r3
 800c55c:	79fb      	ldrb	r3, [r7, #7]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d09f      	beq.n	800c4a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3740      	adds	r7, #64	@ 0x40
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b085      	sub	sp, #20
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	4613      	mov	r3, r2
 800c578:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	88fa      	ldrh	r2, [r7, #6]
 800c584:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	88fa      	ldrh	r2, [r7, #6]
 800c58a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2200      	movs	r2, #0
 800c590:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2222      	movs	r2, #34	@ 0x22
 800c596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d007      	beq.n	800c5b2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68da      	ldr	r2, [r3, #12]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c5b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	695a      	ldr	r2, [r3, #20]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f042 0201 	orr.w	r2, r2, #1
 800c5c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68da      	ldr	r2, [r3, #12]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f042 0220 	orr.w	r2, r2, #32
 800c5d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3714      	adds	r7, #20
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bc80      	pop	{r7}
 800c5dc:	4770      	bx	lr

0800c5de <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c5de:	b480      	push	{r7}
 800c5e0:	b089      	sub	sp, #36	@ 0x24
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	330c      	adds	r3, #12
 800c5ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	e853 3f00 	ldrex	r3, [r3]
 800c5f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c5fc:	61fb      	str	r3, [r7, #28]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	330c      	adds	r3, #12
 800c604:	69fa      	ldr	r2, [r7, #28]
 800c606:	61ba      	str	r2, [r7, #24]
 800c608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60a:	6979      	ldr	r1, [r7, #20]
 800c60c:	69ba      	ldr	r2, [r7, #24]
 800c60e:	e841 2300 	strex	r3, r2, [r1]
 800c612:	613b      	str	r3, [r7, #16]
   return(result);
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1e5      	bne.n	800c5e6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2220      	movs	r2, #32
 800c61e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800c622:	bf00      	nop
 800c624:	3724      	adds	r7, #36	@ 0x24
 800c626:	46bd      	mov	sp, r7
 800c628:	bc80      	pop	{r7}
 800c62a:	4770      	bx	lr

0800c62c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b095      	sub	sp, #84	@ 0x54
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	330c      	adds	r3, #12
 800c63a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c63c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c63e:	e853 3f00 	ldrex	r3, [r3]
 800c642:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c646:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c64a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	330c      	adds	r3, #12
 800c652:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c654:	643a      	str	r2, [r7, #64]	@ 0x40
 800c656:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c658:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c65a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c65c:	e841 2300 	strex	r3, r2, [r1]
 800c660:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1e5      	bne.n	800c634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	3314      	adds	r3, #20
 800c66e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c670:	6a3b      	ldr	r3, [r7, #32]
 800c672:	e853 3f00 	ldrex	r3, [r3]
 800c676:	61fb      	str	r3, [r7, #28]
   return(result);
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	f023 0301 	bic.w	r3, r3, #1
 800c67e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	3314      	adds	r3, #20
 800c686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c688:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c68a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c68e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c690:	e841 2300 	strex	r3, r2, [r1]
 800c694:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d1e5      	bne.n	800c668 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d119      	bne.n	800c6d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	330c      	adds	r3, #12
 800c6aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	e853 3f00 	ldrex	r3, [r3]
 800c6b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	f023 0310 	bic.w	r3, r3, #16
 800c6ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	330c      	adds	r3, #12
 800c6c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6c4:	61ba      	str	r2, [r7, #24]
 800c6c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6c8:	6979      	ldr	r1, [r7, #20]
 800c6ca:	69ba      	ldr	r2, [r7, #24]
 800c6cc:	e841 2300 	strex	r3, r2, [r1]
 800c6d0:	613b      	str	r3, [r7, #16]
   return(result);
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d1e5      	bne.n	800c6a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2220      	movs	r2, #32
 800c6dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c6e6:	bf00      	nop
 800c6e8:	3754      	adds	r7, #84	@ 0x54
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bc80      	pop	{r7}
 800c6ee:	4770      	bx	lr

0800c6f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2200      	movs	r2, #0
 800c702:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2200      	movs	r2, #0
 800c708:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f7ff fe07 	bl	800c31e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c710:	bf00      	nop
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c718:	b480      	push	{r7}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c726:	b2db      	uxtb	r3, r3
 800c728:	2b21      	cmp	r3, #33	@ 0x21
 800c72a:	d13e      	bne.n	800c7aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c734:	d114      	bne.n	800c760 <UART_Transmit_IT+0x48>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	691b      	ldr	r3, [r3, #16]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d110      	bne.n	800c760 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6a1b      	ldr	r3, [r3, #32]
 800c742:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	881b      	ldrh	r3, [r3, #0]
 800c748:	461a      	mov	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c752:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6a1b      	ldr	r3, [r3, #32]
 800c758:	1c9a      	adds	r2, r3, #2
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	621a      	str	r2, [r3, #32]
 800c75e:	e008      	b.n	800c772 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6a1b      	ldr	r3, [r3, #32]
 800c764:	1c59      	adds	r1, r3, #1
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	6211      	str	r1, [r2, #32]
 800c76a:	781a      	ldrb	r2, [r3, #0]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c776:	b29b      	uxth	r3, r3
 800c778:	3b01      	subs	r3, #1
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	4619      	mov	r1, r3
 800c780:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c782:	2b00      	cmp	r3, #0
 800c784:	d10f      	bne.n	800c7a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	68da      	ldr	r2, [r3, #12]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c794:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	68da      	ldr	r2, [r3, #12]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c7a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	e000      	b.n	800c7ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c7aa:	2302      	movs	r3, #2
  }
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3714      	adds	r7, #20
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bc80      	pop	{r7}
 800c7b4:	4770      	bx	lr

0800c7b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	68da      	ldr	r2, [r3, #12]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c7cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2220      	movs	r2, #32
 800c7d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f7f7 faa4 	bl	8003d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c7dc:	2300      	movs	r3, #0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b08c      	sub	sp, #48	@ 0x30
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	2b22      	cmp	r3, #34	@ 0x22
 800c7f8:	f040 80ae 	bne.w	800c958 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c804:	d117      	bne.n	800c836 <UART_Receive_IT+0x50>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	691b      	ldr	r3, [r3, #16]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d113      	bne.n	800c836 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c80e:	2300      	movs	r3, #0
 800c810:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c816:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	b29b      	uxth	r3, r3
 800c820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c824:	b29a      	uxth	r2, r3
 800c826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c828:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c82e:	1c9a      	adds	r2, r3, #2
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	629a      	str	r2, [r3, #40]	@ 0x28
 800c834:	e026      	b.n	800c884 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c83a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c83c:	2300      	movs	r3, #0
 800c83e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c848:	d007      	beq.n	800c85a <UART_Receive_IT+0x74>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	689b      	ldr	r3, [r3, #8]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d10a      	bne.n	800c868 <UART_Receive_IT+0x82>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	691b      	ldr	r3, [r3, #16]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d106      	bne.n	800c868 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	b2da      	uxtb	r2, r3
 800c862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c864:	701a      	strb	r2, [r3, #0]
 800c866:	e008      	b.n	800c87a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c874:	b2da      	uxtb	r2, r3
 800c876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c878:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c87e:	1c5a      	adds	r2, r3, #1
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c888:	b29b      	uxth	r3, r3
 800c88a:	3b01      	subs	r3, #1
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	4619      	mov	r1, r3
 800c892:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c894:	2b00      	cmp	r3, #0
 800c896:	d15d      	bne.n	800c954 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68da      	ldr	r2, [r3, #12]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f022 0220 	bic.w	r2, r2, #32
 800c8a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68da      	ldr	r2, [r3, #12]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c8b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	695a      	ldr	r2, [r3, #20]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f022 0201 	bic.w	r2, r2, #1
 800c8c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2220      	movs	r2, #32
 800c8cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d135      	bne.n	800c94a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	330c      	adds	r3, #12
 800c8ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	e853 3f00 	ldrex	r3, [r3]
 800c8f2:	613b      	str	r3, [r7, #16]
   return(result);
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	f023 0310 	bic.w	r3, r3, #16
 800c8fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	330c      	adds	r3, #12
 800c902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c904:	623a      	str	r2, [r7, #32]
 800c906:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c908:	69f9      	ldr	r1, [r7, #28]
 800c90a:	6a3a      	ldr	r2, [r7, #32]
 800c90c:	e841 2300 	strex	r3, r2, [r1]
 800c910:	61bb      	str	r3, [r7, #24]
   return(result);
 800c912:	69bb      	ldr	r3, [r7, #24]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d1e5      	bne.n	800c8e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f003 0310 	and.w	r3, r3, #16
 800c922:	2b10      	cmp	r3, #16
 800c924:	d10a      	bne.n	800c93c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c926:	2300      	movs	r3, #0
 800c928:	60fb      	str	r3, [r7, #12]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	60fb      	str	r3, [r7, #12]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	60fb      	str	r3, [r7, #12]
 800c93a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c940:	4619      	mov	r1, r3
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f7ff fcf4 	bl	800c330 <HAL_UARTEx_RxEventCallback>
 800c948:	e002      	b.n	800c950 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f7f7 f9d0 	bl	8003cf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c950:	2300      	movs	r3, #0
 800c952:	e002      	b.n	800c95a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c954:	2300      	movs	r3, #0
 800c956:	e000      	b.n	800c95a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c958:	2302      	movs	r3, #2
  }
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3730      	adds	r7, #48	@ 0x30
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
	...

0800c964 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	68da      	ldr	r2, [r3, #12]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	430a      	orrs	r2, r1
 800c980:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	689a      	ldr	r2, [r3, #8]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	431a      	orrs	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	695b      	ldr	r3, [r3, #20]
 800c990:	4313      	orrs	r3, r2
 800c992:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800c99e:	f023 030c 	bic.w	r3, r3, #12
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	6812      	ldr	r2, [r2, #0]
 800c9a6:	68b9      	ldr	r1, [r7, #8]
 800c9a8:	430b      	orrs	r3, r1
 800c9aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	695b      	ldr	r3, [r3, #20]
 800c9b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	699a      	ldr	r2, [r3, #24]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	430a      	orrs	r2, r1
 800c9c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a2c      	ldr	r2, [pc, #176]	@ (800ca78 <UART_SetConfig+0x114>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d103      	bne.n	800c9d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c9cc:	f7fd f8e4 	bl	8009b98 <HAL_RCC_GetPCLK2Freq>
 800c9d0:	60f8      	str	r0, [r7, #12]
 800c9d2:	e002      	b.n	800c9da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c9d4:	f7fd f8cc 	bl	8009b70 <HAL_RCC_GetPCLK1Freq>
 800c9d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	4613      	mov	r3, r2
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	4413      	add	r3, r2
 800c9e2:	009a      	lsls	r2, r3, #2
 800c9e4:	441a      	add	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9f0:	4a22      	ldr	r2, [pc, #136]	@ (800ca7c <UART_SetConfig+0x118>)
 800c9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9f6:	095b      	lsrs	r3, r3, #5
 800c9f8:	0119      	lsls	r1, r3, #4
 800c9fa:	68fa      	ldr	r2, [r7, #12]
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	4413      	add	r3, r2
 800ca02:	009a      	lsls	r2, r3, #2
 800ca04:	441a      	add	r2, r3
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ca10:	4b1a      	ldr	r3, [pc, #104]	@ (800ca7c <UART_SetConfig+0x118>)
 800ca12:	fba3 0302 	umull	r0, r3, r3, r2
 800ca16:	095b      	lsrs	r3, r3, #5
 800ca18:	2064      	movs	r0, #100	@ 0x64
 800ca1a:	fb00 f303 	mul.w	r3, r0, r3
 800ca1e:	1ad3      	subs	r3, r2, r3
 800ca20:	011b      	lsls	r3, r3, #4
 800ca22:	3332      	adds	r3, #50	@ 0x32
 800ca24:	4a15      	ldr	r2, [pc, #84]	@ (800ca7c <UART_SetConfig+0x118>)
 800ca26:	fba2 2303 	umull	r2, r3, r2, r3
 800ca2a:	095b      	lsrs	r3, r3, #5
 800ca2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ca30:	4419      	add	r1, r3
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	4613      	mov	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4413      	add	r3, r2
 800ca3a:	009a      	lsls	r2, r3, #2
 800ca3c:	441a      	add	r2, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	fbb2 f2f3 	udiv	r2, r2, r3
 800ca48:	4b0c      	ldr	r3, [pc, #48]	@ (800ca7c <UART_SetConfig+0x118>)
 800ca4a:	fba3 0302 	umull	r0, r3, r3, r2
 800ca4e:	095b      	lsrs	r3, r3, #5
 800ca50:	2064      	movs	r0, #100	@ 0x64
 800ca52:	fb00 f303 	mul.w	r3, r0, r3
 800ca56:	1ad3      	subs	r3, r2, r3
 800ca58:	011b      	lsls	r3, r3, #4
 800ca5a:	3332      	adds	r3, #50	@ 0x32
 800ca5c:	4a07      	ldr	r2, [pc, #28]	@ (800ca7c <UART_SetConfig+0x118>)
 800ca5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca62:	095b      	lsrs	r3, r3, #5
 800ca64:	f003 020f 	and.w	r2, r3, #15
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	440a      	add	r2, r1
 800ca6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800ca70:	bf00      	nop
 800ca72:	3710      	adds	r7, #16
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	40013800 	.word	0x40013800
 800ca7c:	51eb851f 	.word	0x51eb851f

0800ca80 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ca80:	b084      	sub	sp, #16
 800ca82:	b480      	push	{r7}
 800ca84:	b085      	sub	sp, #20
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
 800ca8a:	f107 001c 	add.w	r0, r7, #28
 800ca8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ca96:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ca98:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ca9a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ca9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800ca9e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800caa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800caa2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800caa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800caa6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800caa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800caaa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	4313      	orrs	r3, r2
 800cab0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800caba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cabe:	68fa      	ldr	r2, [r7, #12]
 800cac0:	431a      	orrs	r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cac6:	2300      	movs	r3, #0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3714      	adds	r7, #20
 800cacc:	46bd      	mov	sp, r7
 800cace:	bc80      	pop	{r7}
 800cad0:	b004      	add	sp, #16
 800cad2:	4770      	bx	lr

0800cad4 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	370c      	adds	r7, #12
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bc80      	pop	{r7}
 800caea:	4770      	bx	lr

0800caec <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	370c      	adds	r7, #12
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bc80      	pop	{r7}
 800cb0a:	4770      	bx	lr

0800cb0c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2203      	movs	r2, #3
 800cb18:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cb1a:	2300      	movs	r3, #0
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bc80      	pop	{r7}
 800cb24:	4770      	bx	lr

0800cb26 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cb26:	b480      	push	{r7}
 800cb28:	b083      	sub	sp, #12
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 0303 	and.w	r3, r3, #3
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	370c      	adds	r7, #12
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bc80      	pop	{r7}
 800cb3e:	4770      	bx	lr

0800cb40 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b085      	sub	sp, #20
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb5e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cb64:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cb6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	68db      	ldr	r3, [r3, #12]
 800cb76:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800cb7a:	f023 030f 	bic.w	r3, r3, #15
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	431a      	orrs	r2, r3
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3714      	adds	r7, #20
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bc80      	pop	{r7}
 800cb90:	4770      	bx	lr

0800cb92 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cb92:	b480      	push	{r7}
 800cb94:	b083      	sub	sp, #12
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	b2db      	uxtb	r3, r3
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bc80      	pop	{r7}
 800cba8:	4770      	bx	lr

0800cbaa <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cbaa:	b480      	push	{r7}
 800cbac:	b085      	sub	sp, #20
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	3314      	adds	r3, #20
 800cbb8:	461a      	mov	r2, r3
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
}  
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3714      	adds	r7, #20
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bc80      	pop	{r7}
 800cbcc:	4770      	bx	lr

0800cbce <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cbce:	b480      	push	{r7}
 800cbd0:	b085      	sub	sp, #20
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	685a      	ldr	r2, [r3, #4]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cbf4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cbfa:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cc00:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc02:	68fa      	ldr	r2, [r7, #12]
 800cc04:	4313      	orrs	r3, r2
 800cc06:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc0c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	431a      	orrs	r2, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cc18:	2300      	movs	r3, #0

}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3714      	adds	r7, #20
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bc80      	pop	{r7}
 800cc22:	4770      	bx	lr

0800cc24 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b088      	sub	sp, #32
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cc32:	2310      	movs	r3, #16
 800cc34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc36:	2340      	movs	r3, #64	@ 0x40
 800cc38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc44:	f107 0308 	add.w	r3, r7, #8
 800cc48:	4619      	mov	r1, r3
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f7ff ff78 	bl	800cb40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cc50:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc54:	2110      	movs	r1, #16
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 f9d6 	bl	800d008 <SDMMC_GetCmdResp1>
 800cc5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc5e:	69fb      	ldr	r3, [r7, #28]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3720      	adds	r7, #32
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b088      	sub	sp, #32
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cc76:	2311      	movs	r3, #17
 800cc78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc7a:	2340      	movs	r3, #64	@ 0x40
 800cc7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc88:	f107 0308 	add.w	r3, r7, #8
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff ff56 	bl	800cb40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cc94:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc98:	2111      	movs	r1, #17
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 f9b4 	bl	800d008 <SDMMC_GetCmdResp1>
 800cca0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cca2:	69fb      	ldr	r3, [r7, #28]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3720      	adds	r7, #32
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b088      	sub	sp, #32
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ccba:	2312      	movs	r3, #18
 800ccbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccbe:	2340      	movs	r3, #64	@ 0x40
 800ccc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cccc:	f107 0308 	add.w	r3, r7, #8
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7ff ff34 	bl	800cb40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ccd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccdc:	2112      	movs	r1, #18
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f992 	bl	800d008 <SDMMC_GetCmdResp1>
 800cce4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cce6:	69fb      	ldr	r3, [r7, #28]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3720      	adds	r7, #32
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b088      	sub	sp, #32
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ccfe:	2318      	movs	r3, #24
 800cd00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd02:	2340      	movs	r3, #64	@ 0x40
 800cd04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd06:	2300      	movs	r3, #0
 800cd08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd10:	f107 0308 	add.w	r3, r7, #8
 800cd14:	4619      	mov	r1, r3
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f7ff ff12 	bl	800cb40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cd1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd20:	2118      	movs	r1, #24
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 f970 	bl	800d008 <SDMMC_GetCmdResp1>
 800cd28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd2a:	69fb      	ldr	r3, [r7, #28]
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3720      	adds	r7, #32
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b088      	sub	sp, #32
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cd42:	2319      	movs	r3, #25
 800cd44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd46:	2340      	movs	r3, #64	@ 0x40
 800cd48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd54:	f107 0308 	add.w	r3, r7, #8
 800cd58:	4619      	mov	r1, r3
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7ff fef0 	bl	800cb40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cd60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd64:	2119      	movs	r1, #25
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 f94e 	bl	800d008 <SDMMC_GetCmdResp1>
 800cd6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd6e:	69fb      	ldr	r3, [r7, #28]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3720      	adds	r7, #32
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b088      	sub	sp, #32
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cd80:	2300      	movs	r3, #0
 800cd82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cd84:	230c      	movs	r3, #12
 800cd86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd88:	2340      	movs	r3, #64	@ 0x40
 800cd8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd96:	f107 0308 	add.w	r3, r7, #8
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f7ff fecf 	bl	800cb40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800cda2:	4a05      	ldr	r2, [pc, #20]	@ (800cdb8 <SDMMC_CmdStopTransfer+0x40>)
 800cda4:	210c      	movs	r1, #12
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f92e 	bl	800d008 <SDMMC_GetCmdResp1>
 800cdac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdae:	69fb      	ldr	r3, [r7, #28]
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3720      	adds	r7, #32
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	05f5e100 	.word	0x05f5e100

0800cdbc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b08a      	sub	sp, #40	@ 0x28
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cdcc:	2307      	movs	r3, #7
 800cdce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cdd0:	2340      	movs	r3, #64	@ 0x40
 800cdd2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cdd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cddc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdde:	f107 0310 	add.w	r3, r7, #16
 800cde2:	4619      	mov	r1, r3
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	f7ff feab 	bl	800cb40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800cdea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdee:	2107      	movs	r1, #7
 800cdf0:	68f8      	ldr	r0, [r7, #12]
 800cdf2:	f000 f909 	bl	800d008 <SDMMC_GetCmdResp1>
 800cdf6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800cdf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3728      	adds	r7, #40	@ 0x28
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b088      	sub	sp, #32
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ce12:	2300      	movs	r3, #0
 800ce14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce16:	2300      	movs	r3, #0
 800ce18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce20:	f107 0308 	add.w	r3, r7, #8
 800ce24:	4619      	mov	r1, r3
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7ff fe8a 	bl	800cb40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 fb21 	bl	800d474 <SDMMC_GetCmdError>
 800ce32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce34:	69fb      	ldr	r3, [r7, #28]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3720      	adds	r7, #32
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b088      	sub	sp, #32
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ce46:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ce4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ce4c:	2308      	movs	r3, #8
 800ce4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce50:	2340      	movs	r3, #64	@ 0x40
 800ce52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce54:	2300      	movs	r3, #0
 800ce56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce5e:	f107 0308 	add.w	r3, r7, #8
 800ce62:	4619      	mov	r1, r3
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7ff fe6b 	bl	800cb40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 fab4 	bl	800d3d8 <SDMMC_GetCmdResp7>
 800ce70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce72:	69fb      	ldr	r3, [r7, #28]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3720      	adds	r7, #32
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b088      	sub	sp, #32
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ce8a:	2337      	movs	r3, #55	@ 0x37
 800ce8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce8e:	2340      	movs	r3, #64	@ 0x40
 800ce90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce92:	2300      	movs	r3, #0
 800ce94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce9c:	f107 0308 	add.w	r3, r7, #8
 800cea0:	4619      	mov	r1, r3
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f7ff fe4c 	bl	800cb40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800cea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ceac:	2137      	movs	r1, #55	@ 0x37
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 f8aa 	bl	800d008 <SDMMC_GetCmdResp1>
 800ceb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceb6:	69fb      	ldr	r3, [r7, #28]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3720      	adds	r7, #32
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b088      	sub	sp, #32
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ced0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ced4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ced6:	2329      	movs	r3, #41	@ 0x29
 800ced8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ceda:	2340      	movs	r3, #64	@ 0x40
 800cedc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cede:	2300      	movs	r3, #0
 800cee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cee6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cee8:	f107 0308 	add.w	r3, r7, #8
 800ceec:	4619      	mov	r1, r3
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f7ff fe26 	bl	800cb40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 f9bd 	bl	800d274 <SDMMC_GetCmdResp3>
 800cefa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cefc:	69fb      	ldr	r3, [r7, #28]
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3720      	adds	r7, #32
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b088      	sub	sp, #32
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cf12:	2302      	movs	r3, #2
 800cf14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cf16:	23c0      	movs	r3, #192	@ 0xc0
 800cf18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf24:	f107 0308 	add.w	r3, r7, #8
 800cf28:	4619      	mov	r1, r3
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f7ff fe08 	bl	800cb40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f000 f957 	bl	800d1e4 <SDMMC_GetCmdResp2>
 800cf36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf38:	69fb      	ldr	r3, [r7, #28]
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3720      	adds	r7, #32
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}

0800cf42 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b088      	sub	sp, #32
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
 800cf4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cf50:	2309      	movs	r3, #9
 800cf52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cf54:	23c0      	movs	r3, #192	@ 0xc0
 800cf56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf62:	f107 0308 	add.w	r3, r7, #8
 800cf66:	4619      	mov	r1, r3
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7ff fde9 	bl	800cb40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 f938 	bl	800d1e4 <SDMMC_GetCmdResp2>
 800cf74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf76:	69fb      	ldr	r3, [r7, #28]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3720      	adds	r7, #32
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b088      	sub	sp, #32
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cf8e:	2303      	movs	r3, #3
 800cf90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf92:	2340      	movs	r3, #64	@ 0x40
 800cf94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf96:	2300      	movs	r3, #0
 800cf98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfa0:	f107 0308 	add.w	r3, r7, #8
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f7ff fdca 	bl	800cb40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cfac:	683a      	ldr	r2, [r7, #0]
 800cfae:	2103      	movs	r1, #3
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 f99b 	bl	800d2ec <SDMMC_GetCmdResp6>
 800cfb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfb8:	69fb      	ldr	r3, [r7, #28]
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3720      	adds	r7, #32
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b088      	sub	sp, #32
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
 800cfca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cfd0:	230d      	movs	r3, #13
 800cfd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cfd4:	2340      	movs	r3, #64	@ 0x40
 800cfd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfe0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfe2:	f107 0308 	add.w	r3, r7, #8
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f7ff fda9 	bl	800cb40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800cfee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cff2:	210d      	movs	r1, #13
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 f807 	bl	800d008 <SDMMC_GetCmdResp1>
 800cffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cffc:	69fb      	ldr	r3, [r7, #28]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3720      	adds	r7, #32
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
	...

0800d008 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b088      	sub	sp, #32
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	460b      	mov	r3, r1
 800d012:	607a      	str	r2, [r7, #4]
 800d014:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d016:	4b70      	ldr	r3, [pc, #448]	@ (800d1d8 <SDMMC_GetCmdResp1+0x1d0>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a70      	ldr	r2, [pc, #448]	@ (800d1dc <SDMMC_GetCmdResp1+0x1d4>)
 800d01c:	fba2 2303 	umull	r2, r3, r2, r3
 800d020:	0a5a      	lsrs	r2, r3, #9
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	fb02 f303 	mul.w	r3, r2, r3
 800d028:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	1e5a      	subs	r2, r3, #1
 800d02e:	61fa      	str	r2, [r7, #28]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d102      	bne.n	800d03a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d034:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d038:	e0c9      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d03e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d046:	2b00      	cmp	r3, #0
 800d048:	d0ef      	beq.n	800d02a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d050:	2b00      	cmp	r3, #0
 800d052:	d1ea      	bne.n	800d02a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d058:	f003 0304 	and.w	r3, r3, #4
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d004      	beq.n	800d06a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2204      	movs	r2, #4
 800d064:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d066:	2304      	movs	r3, #4
 800d068:	e0b1      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d06e:	f003 0301 	and.w	r3, r3, #1
 800d072:	2b00      	cmp	r3, #0
 800d074:	d004      	beq.n	800d080 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2201      	movs	r2, #1
 800d07a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d07c:	2301      	movs	r3, #1
 800d07e:	e0a6      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	22c5      	movs	r2, #197	@ 0xc5
 800d084:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f7ff fd83 	bl	800cb92 <SDIO_GetCommandResponse>
 800d08c:	4603      	mov	r3, r0
 800d08e:	461a      	mov	r2, r3
 800d090:	7afb      	ldrb	r3, [r7, #11]
 800d092:	4293      	cmp	r3, r2
 800d094:	d001      	beq.n	800d09a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d096:	2301      	movs	r3, #1
 800d098:	e099      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d09a:	2100      	movs	r1, #0
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	f7ff fd84 	bl	800cbaa <SDIO_GetResponse>
 800d0a2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d0a4:	697a      	ldr	r2, [r7, #20]
 800d0a6:	4b4e      	ldr	r3, [pc, #312]	@ (800d1e0 <SDMMC_GetCmdResp1+0x1d8>)
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d101      	bne.n	800d0b2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	e08d      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	da02      	bge.n	800d0be <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d0b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d0bc:	e087      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d001      	beq.n	800d0cc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d0c8:	2340      	movs	r3, #64	@ 0x40
 800d0ca:	e080      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d001      	beq.n	800d0da <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d0d6:	2380      	movs	r3, #128	@ 0x80
 800d0d8:	e079      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d002      	beq.n	800d0ea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d0e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d0e8:	e071      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d002      	beq.n	800d0fa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d0f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d0f8:	e069      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d108:	e061      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d110:	2b00      	cmp	r3, #0
 800d112:	d002      	beq.n	800d11a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d114:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d118:	e059      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d120:	2b00      	cmp	r3, #0
 800d122:	d002      	beq.n	800d12a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d128:	e051      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d130:	2b00      	cmp	r3, #0
 800d132:	d002      	beq.n	800d13a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d134:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d138:	e049      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d140:	2b00      	cmp	r3, #0
 800d142:	d002      	beq.n	800d14a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d144:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d148:	e041      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d150:	2b00      	cmp	r3, #0
 800d152:	d002      	beq.n	800d15a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d158:	e039      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d160:	2b00      	cmp	r3, #0
 800d162:	d002      	beq.n	800d16a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d164:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d168:	e031      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d170:	2b00      	cmp	r3, #0
 800d172:	d002      	beq.n	800d17a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d174:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d178:	e029      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d180:	2b00      	cmp	r3, #0
 800d182:	d002      	beq.n	800d18a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d184:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d188:	e021      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d190:	2b00      	cmp	r3, #0
 800d192:	d002      	beq.n	800d19a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d194:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d198:	e019      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d002      	beq.n	800d1aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d1a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d1a8:	e011      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d002      	beq.n	800d1ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d1b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d1b8:	e009      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	f003 0308 	and.w	r3, r3, #8
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d002      	beq.n	800d1ca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d1c4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d1c8:	e001      	b.n	800d1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d1ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3720      	adds	r7, #32
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	20000028 	.word	0x20000028
 800d1dc:	10624dd3 	.word	0x10624dd3
 800d1e0:	fdffe008 	.word	0xfdffe008

0800d1e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d1ec:	4b1f      	ldr	r3, [pc, #124]	@ (800d26c <SDMMC_GetCmdResp2+0x88>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4a1f      	ldr	r2, [pc, #124]	@ (800d270 <SDMMC_GetCmdResp2+0x8c>)
 800d1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d1f6:	0a5b      	lsrs	r3, r3, #9
 800d1f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1fc:	fb02 f303 	mul.w	r3, r2, r3
 800d200:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	1e5a      	subs	r2, r3, #1
 800d206:	60fa      	str	r2, [r7, #12]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d102      	bne.n	800d212 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d20c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d210:	e026      	b.n	800d260 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d216:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d0ef      	beq.n	800d202 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1ea      	bne.n	800d202 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d230:	f003 0304 	and.w	r3, r3, #4
 800d234:	2b00      	cmp	r3, #0
 800d236:	d004      	beq.n	800d242 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2204      	movs	r2, #4
 800d23c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d23e:	2304      	movs	r3, #4
 800d240:	e00e      	b.n	800d260 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d246:	f003 0301 	and.w	r3, r3, #1
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d004      	beq.n	800d258 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2201      	movs	r2, #1
 800d252:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d254:	2301      	movs	r3, #1
 800d256:	e003      	b.n	800d260 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	22c5      	movs	r2, #197	@ 0xc5
 800d25c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d25e:	2300      	movs	r3, #0
}
 800d260:	4618      	mov	r0, r3
 800d262:	3714      	adds	r7, #20
 800d264:	46bd      	mov	sp, r7
 800d266:	bc80      	pop	{r7}
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	20000028 	.word	0x20000028
 800d270:	10624dd3 	.word	0x10624dd3

0800d274 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d27c:	4b19      	ldr	r3, [pc, #100]	@ (800d2e4 <SDMMC_GetCmdResp3+0x70>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a19      	ldr	r2, [pc, #100]	@ (800d2e8 <SDMMC_GetCmdResp3+0x74>)
 800d282:	fba2 2303 	umull	r2, r3, r2, r3
 800d286:	0a5b      	lsrs	r3, r3, #9
 800d288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d28c:	fb02 f303 	mul.w	r3, r2, r3
 800d290:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	1e5a      	subs	r2, r3, #1
 800d296:	60fa      	str	r2, [r7, #12]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d102      	bne.n	800d2a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d29c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d2a0:	e01b      	b.n	800d2da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d0ef      	beq.n	800d292 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1ea      	bne.n	800d292 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2c0:	f003 0304 	and.w	r3, r3, #4
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d004      	beq.n	800d2d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2204      	movs	r2, #4
 800d2cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2ce:	2304      	movs	r3, #4
 800d2d0:	e003      	b.n	800d2da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	22c5      	movs	r2, #197	@ 0xc5
 800d2d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3714      	adds	r7, #20
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bc80      	pop	{r7}
 800d2e2:	4770      	bx	lr
 800d2e4:	20000028 	.word	0x20000028
 800d2e8:	10624dd3 	.word	0x10624dd3

0800d2ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b088      	sub	sp, #32
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	607a      	str	r2, [r7, #4]
 800d2f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d2fa:	4b35      	ldr	r3, [pc, #212]	@ (800d3d0 <SDMMC_GetCmdResp6+0xe4>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4a35      	ldr	r2, [pc, #212]	@ (800d3d4 <SDMMC_GetCmdResp6+0xe8>)
 800d300:	fba2 2303 	umull	r2, r3, r2, r3
 800d304:	0a5b      	lsrs	r3, r3, #9
 800d306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d30a:	fb02 f303 	mul.w	r3, r2, r3
 800d30e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	1e5a      	subs	r2, r3, #1
 800d314:	61fa      	str	r2, [r7, #28]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d102      	bne.n	800d320 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d31a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d31e:	e052      	b.n	800d3c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d324:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d0ef      	beq.n	800d310 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d330:	69bb      	ldr	r3, [r7, #24]
 800d332:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1ea      	bne.n	800d310 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d33e:	f003 0304 	and.w	r3, r3, #4
 800d342:	2b00      	cmp	r3, #0
 800d344:	d004      	beq.n	800d350 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2204      	movs	r2, #4
 800d34a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d34c:	2304      	movs	r3, #4
 800d34e:	e03a      	b.n	800d3c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d354:	f003 0301 	and.w	r3, r3, #1
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d004      	beq.n	800d366 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2201      	movs	r2, #1
 800d360:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d362:	2301      	movs	r3, #1
 800d364:	e02f      	b.n	800d3c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d366:	68f8      	ldr	r0, [r7, #12]
 800d368:	f7ff fc13 	bl	800cb92 <SDIO_GetCommandResponse>
 800d36c:	4603      	mov	r3, r0
 800d36e:	461a      	mov	r2, r3
 800d370:	7afb      	ldrb	r3, [r7, #11]
 800d372:	4293      	cmp	r3, r2
 800d374:	d001      	beq.n	800d37a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d376:	2301      	movs	r3, #1
 800d378:	e025      	b.n	800d3c6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	22c5      	movs	r2, #197	@ 0xc5
 800d37e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d380:	2100      	movs	r1, #0
 800d382:	68f8      	ldr	r0, [r7, #12]
 800d384:	f7ff fc11 	bl	800cbaa <SDIO_GetResponse>
 800d388:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d390:	2b00      	cmp	r3, #0
 800d392:	d106      	bne.n	800d3a2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	0c1b      	lsrs	r3, r3, #16
 800d398:	b29a      	uxth	r2, r3
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	e011      	b.n	800d3c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d002      	beq.n	800d3b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d3ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d3b0:	e009      	b.n	800d3c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d002      	beq.n	800d3c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d3bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3c0:	e001      	b.n	800d3c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d3c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3720      	adds	r7, #32
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	20000028 	.word	0x20000028
 800d3d4:	10624dd3 	.word	0x10624dd3

0800d3d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b085      	sub	sp, #20
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d3e0:	4b22      	ldr	r3, [pc, #136]	@ (800d46c <SDMMC_GetCmdResp7+0x94>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a22      	ldr	r2, [pc, #136]	@ (800d470 <SDMMC_GetCmdResp7+0x98>)
 800d3e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ea:	0a5b      	lsrs	r3, r3, #9
 800d3ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3f0:	fb02 f303 	mul.w	r3, r2, r3
 800d3f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	1e5a      	subs	r2, r3, #1
 800d3fa:	60fa      	str	r2, [r7, #12]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d102      	bne.n	800d406 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d400:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d404:	e02c      	b.n	800d460 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d40a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d412:	2b00      	cmp	r3, #0
 800d414:	d0ef      	beq.n	800d3f6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1ea      	bne.n	800d3f6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d424:	f003 0304 	and.w	r3, r3, #4
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d004      	beq.n	800d436 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2204      	movs	r2, #4
 800d430:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d432:	2304      	movs	r3, #4
 800d434:	e014      	b.n	800d460 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d43a:	f003 0301 	and.w	r3, r3, #1
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d004      	beq.n	800d44c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2201      	movs	r2, #1
 800d446:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d448:	2301      	movs	r3, #1
 800d44a:	e009      	b.n	800d460 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d454:	2b00      	cmp	r3, #0
 800d456:	d002      	beq.n	800d45e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2240      	movs	r2, #64	@ 0x40
 800d45c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d45e:	2300      	movs	r3, #0
  
}
 800d460:	4618      	mov	r0, r3
 800d462:	3714      	adds	r7, #20
 800d464:	46bd      	mov	sp, r7
 800d466:	bc80      	pop	{r7}
 800d468:	4770      	bx	lr
 800d46a:	bf00      	nop
 800d46c:	20000028 	.word	0x20000028
 800d470:	10624dd3 	.word	0x10624dd3

0800d474 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d474:	b480      	push	{r7}
 800d476:	b085      	sub	sp, #20
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d47c:	4b10      	ldr	r3, [pc, #64]	@ (800d4c0 <SDMMC_GetCmdError+0x4c>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a10      	ldr	r2, [pc, #64]	@ (800d4c4 <SDMMC_GetCmdError+0x50>)
 800d482:	fba2 2303 	umull	r2, r3, r2, r3
 800d486:	0a5b      	lsrs	r3, r3, #9
 800d488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d48c:	fb02 f303 	mul.w	r3, r2, r3
 800d490:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	1e5a      	subs	r2, r3, #1
 800d496:	60fa      	str	r2, [r7, #12]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d102      	bne.n	800d4a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d49c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d4a0:	e009      	b.n	800d4b6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d0f1      	beq.n	800d492 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	22c5      	movs	r2, #197	@ 0xc5
 800d4b2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800d4b4:	2300      	movs	r3, #0
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3714      	adds	r7, #20
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bc80      	pop	{r7}
 800d4be:	4770      	bx	lr
 800d4c0:	20000028 	.word	0x20000028
 800d4c4:	10624dd3 	.word	0x10624dd3

0800d4c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d4cc:	4904      	ldr	r1, [pc, #16]	@ (800d4e0 <MX_FATFS_Init+0x18>)
 800d4ce:	4805      	ldr	r0, [pc, #20]	@ (800d4e4 <MX_FATFS_Init+0x1c>)
 800d4d0:	f003 fc26 	bl	8010d20 <FATFS_LinkDriver>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	4b03      	ldr	r3, [pc, #12]	@ (800d4e8 <MX_FATFS_Init+0x20>)
 800d4da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d4dc:	bf00      	nop
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	20000e34 	.word	0x20000e34
 800d4e4:	0801443c 	.word	0x0801443c
 800d4e8:	20000e30 	.word	0x20000e30

0800d4ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d4f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bc80      	pop	{r7}
 800d4f8:	4770      	bx	lr
	...

0800d4fc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d502:	2300      	movs	r3, #0
 800d504:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d506:	f000 f86b 	bl	800d5e0 <BSP_SD_IsDetected>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	d001      	beq.n	800d514 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d510:	2301      	movs	r3, #1
 800d512:	e005      	b.n	800d520 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d514:	4804      	ldr	r0, [pc, #16]	@ (800d528 <BSP_SD_Init+0x2c>)
 800d516:	f7fc fba1 	bl	8009c5c <HAL_SD_Init>
 800d51a:	4603      	mov	r3, r0
 800d51c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800d51e:	79fb      	ldrb	r3, [r7, #7]
}
 800d520:	4618      	mov	r0, r3
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	2000088c 	.word	0x2000088c

0800d52c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b088      	sub	sp, #32
 800d530:	af02      	add	r7, sp, #8
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
 800d538:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d53a:	2300      	movs	r3, #0
 800d53c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	9300      	str	r3, [sp, #0]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	68ba      	ldr	r2, [r7, #8]
 800d546:	68f9      	ldr	r1, [r7, #12]
 800d548:	4806      	ldr	r0, [pc, #24]	@ (800d564 <BSP_SD_ReadBlocks+0x38>)
 800d54a:	f7fc fc37 	bl	8009dbc <HAL_SD_ReadBlocks>
 800d54e:	4603      	mov	r3, r0
 800d550:	2b00      	cmp	r3, #0
 800d552:	d001      	beq.n	800d558 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d558:	7dfb      	ldrb	r3, [r7, #23]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3718      	adds	r7, #24
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	2000088c 	.word	0x2000088c

0800d568 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b088      	sub	sp, #32
 800d56c:	af02      	add	r7, sp, #8
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	60b9      	str	r1, [r7, #8]
 800d572:	607a      	str	r2, [r7, #4]
 800d574:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d576:	2300      	movs	r3, #0
 800d578:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	9300      	str	r3, [sp, #0]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	68ba      	ldr	r2, [r7, #8]
 800d582:	68f9      	ldr	r1, [r7, #12]
 800d584:	4806      	ldr	r0, [pc, #24]	@ (800d5a0 <BSP_SD_WriteBlocks+0x38>)
 800d586:	f7fc fdf7 	bl	800a178 <HAL_SD_WriteBlocks>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d001      	beq.n	800d594 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d590:	2301      	movs	r3, #1
 800d592:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d594:	7dfb      	ldrb	r3, [r7, #23]
}
 800d596:	4618      	mov	r0, r3
 800d598:	3718      	adds	r7, #24
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	2000088c 	.word	0x2000088c

0800d5a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d5a8:	4805      	ldr	r0, [pc, #20]	@ (800d5c0 <BSP_SD_GetCardState+0x1c>)
 800d5aa:	f7fd f93a 	bl	800a822 <HAL_SD_GetCardState>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b04      	cmp	r3, #4
 800d5b2:	bf14      	ite	ne
 800d5b4:	2301      	movne	r3, #1
 800d5b6:	2300      	moveq	r3, #0
 800d5b8:	b2db      	uxtb	r3, r3
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	2000088c 	.word	0x2000088c

0800d5c4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d5cc:	6879      	ldr	r1, [r7, #4]
 800d5ce:	4803      	ldr	r0, [pc, #12]	@ (800d5dc <BSP_SD_GetCardInfo+0x18>)
 800d5d0:	f7fd f8fc 	bl	800a7cc <HAL_SD_GetCardInfo>
}
 800d5d4:	bf00      	nop
 800d5d6:	3708      	adds	r7, #8
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	2000088c 	.word	0x2000088c

0800d5e0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800d5ea:	79fb      	ldrb	r3, [r7, #7]
 800d5ec:	b2db      	uxtb	r3, r3
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bc80      	pop	{r7}
 800d5f6:	4770      	bx	lr

0800d5f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	4603      	mov	r3, r0
 800d600:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d602:	79fb      	ldrb	r3, [r7, #7]
 800d604:	4a08      	ldr	r2, [pc, #32]	@ (800d628 <disk_status+0x30>)
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	4413      	add	r3, r2
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	79fa      	ldrb	r2, [r7, #7]
 800d610:	4905      	ldr	r1, [pc, #20]	@ (800d628 <disk_status+0x30>)
 800d612:	440a      	add	r2, r1
 800d614:	7a12      	ldrb	r2, [r2, #8]
 800d616:	4610      	mov	r0, r2
 800d618:	4798      	blx	r3
 800d61a:	4603      	mov	r3, r0
 800d61c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d620:	4618      	mov	r0, r3
 800d622:	3710      	adds	r7, #16
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	200012b8 	.word	0x200012b8

0800d62c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	4603      	mov	r3, r0
 800d634:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800d63a:	79fb      	ldrb	r3, [r7, #7]
 800d63c:	4a0d      	ldr	r2, [pc, #52]	@ (800d674 <disk_initialize+0x48>)
 800d63e:	5cd3      	ldrb	r3, [r2, r3]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d111      	bne.n	800d668 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800d644:	79fb      	ldrb	r3, [r7, #7]
 800d646:	4a0b      	ldr	r2, [pc, #44]	@ (800d674 <disk_initialize+0x48>)
 800d648:	2101      	movs	r1, #1
 800d64a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d64c:	79fb      	ldrb	r3, [r7, #7]
 800d64e:	4a09      	ldr	r2, [pc, #36]	@ (800d674 <disk_initialize+0x48>)
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	4413      	add	r3, r2
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	79fa      	ldrb	r2, [r7, #7]
 800d65a:	4906      	ldr	r1, [pc, #24]	@ (800d674 <disk_initialize+0x48>)
 800d65c:	440a      	add	r2, r1
 800d65e:	7a12      	ldrb	r2, [r2, #8]
 800d660:	4610      	mov	r0, r2
 800d662:	4798      	blx	r3
 800d664:	4603      	mov	r3, r0
 800d666:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d668:	7bfb      	ldrb	r3, [r7, #15]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	200012b8 	.word	0x200012b8

0800d678 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d678:	b590      	push	{r4, r7, lr}
 800d67a:	b087      	sub	sp, #28
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60b9      	str	r1, [r7, #8]
 800d680:	607a      	str	r2, [r7, #4]
 800d682:	603b      	str	r3, [r7, #0]
 800d684:	4603      	mov	r3, r0
 800d686:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d688:	7bfb      	ldrb	r3, [r7, #15]
 800d68a:	4a0a      	ldr	r2, [pc, #40]	@ (800d6b4 <disk_read+0x3c>)
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	4413      	add	r3, r2
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	689c      	ldr	r4, [r3, #8]
 800d694:	7bfb      	ldrb	r3, [r7, #15]
 800d696:	4a07      	ldr	r2, [pc, #28]	@ (800d6b4 <disk_read+0x3c>)
 800d698:	4413      	add	r3, r2
 800d69a:	7a18      	ldrb	r0, [r3, #8]
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	68b9      	ldr	r1, [r7, #8]
 800d6a2:	47a0      	blx	r4
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d6a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	371c      	adds	r7, #28
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd90      	pop	{r4, r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	200012b8 	.word	0x200012b8

0800d6b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d6b8:	b590      	push	{r4, r7, lr}
 800d6ba:	b087      	sub	sp, #28
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60b9      	str	r1, [r7, #8]
 800d6c0:	607a      	str	r2, [r7, #4]
 800d6c2:	603b      	str	r3, [r7, #0]
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d6c8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ca:	4a0a      	ldr	r2, [pc, #40]	@ (800d6f4 <disk_write+0x3c>)
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	4413      	add	r3, r2
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	68dc      	ldr	r4, [r3, #12]
 800d6d4:	7bfb      	ldrb	r3, [r7, #15]
 800d6d6:	4a07      	ldr	r2, [pc, #28]	@ (800d6f4 <disk_write+0x3c>)
 800d6d8:	4413      	add	r3, r2
 800d6da:	7a18      	ldrb	r0, [r3, #8]
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	68b9      	ldr	r1, [r7, #8]
 800d6e2:	47a0      	blx	r4
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d6e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	371c      	adds	r7, #28
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd90      	pop	{r4, r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	200012b8 	.word	0x200012b8

0800d6f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	4603      	mov	r3, r0
 800d700:	603a      	str	r2, [r7, #0]
 800d702:	71fb      	strb	r3, [r7, #7]
 800d704:	460b      	mov	r3, r1
 800d706:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d708:	79fb      	ldrb	r3, [r7, #7]
 800d70a:	4a09      	ldr	r2, [pc, #36]	@ (800d730 <disk_ioctl+0x38>)
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	4413      	add	r3, r2
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	79fa      	ldrb	r2, [r7, #7]
 800d716:	4906      	ldr	r1, [pc, #24]	@ (800d730 <disk_ioctl+0x38>)
 800d718:	440a      	add	r2, r1
 800d71a:	7a10      	ldrb	r0, [r2, #8]
 800d71c:	79b9      	ldrb	r1, [r7, #6]
 800d71e:	683a      	ldr	r2, [r7, #0]
 800d720:	4798      	blx	r3
 800d722:	4603      	mov	r3, r0
 800d724:	73fb      	strb	r3, [r7, #15]
  return res;
 800d726:	7bfb      	ldrb	r3, [r7, #15]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3710      	adds	r7, #16
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	200012b8 	.word	0x200012b8

0800d734 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d734:	b480      	push	{r7}
 800d736:	b087      	sub	sp, #28
 800d738:	af00      	add	r7, sp, #0
 800d73a:	60f8      	str	r0, [r7, #12]
 800d73c:	60b9      	str	r1, [r7, #8]
 800d73e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800d748:	e007      	b.n	800d75a <mem_cpy+0x26>
		*d++ = *s++;
 800d74a:	693a      	ldr	r2, [r7, #16]
 800d74c:	1c53      	adds	r3, r2, #1
 800d74e:	613b      	str	r3, [r7, #16]
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	1c59      	adds	r1, r3, #1
 800d754:	6179      	str	r1, [r7, #20]
 800d756:	7812      	ldrb	r2, [r2, #0]
 800d758:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	1e5a      	subs	r2, r3, #1
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1f2      	bne.n	800d74a <mem_cpy+0x16>
}
 800d764:	bf00      	nop
 800d766:	bf00      	nop
 800d768:	371c      	adds	r7, #28
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bc80      	pop	{r7}
 800d76e:	4770      	bx	lr

0800d770 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d770:	b480      	push	{r7}
 800d772:	b087      	sub	sp, #28
 800d774:	af00      	add	r7, sp, #0
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800d780:	e005      	b.n	800d78e <mem_set+0x1e>
		*d++ = (BYTE)val;
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	1c5a      	adds	r2, r3, #1
 800d786:	617a      	str	r2, [r7, #20]
 800d788:	68ba      	ldr	r2, [r7, #8]
 800d78a:	b2d2      	uxtb	r2, r2
 800d78c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	1e5a      	subs	r2, r3, #1
 800d792:	607a      	str	r2, [r7, #4]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1f4      	bne.n	800d782 <mem_set+0x12>
}
 800d798:	bf00      	nop
 800d79a:	bf00      	nop
 800d79c:	371c      	adds	r7, #28
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bc80      	pop	{r7}
 800d7a2:	4770      	bx	lr

0800d7a4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800d7a4:	b480      	push	{r7}
 800d7a6:	b089      	sub	sp, #36	@ 0x24
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	61fb      	str	r3, [r7, #28]
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800d7bc:	bf00      	nop
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	1e5a      	subs	r2, r3, #1
 800d7c2:	607a      	str	r2, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d00d      	beq.n	800d7e4 <mem_cmp+0x40>
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	1c5a      	adds	r2, r3, #1
 800d7cc:	61fa      	str	r2, [r7, #28]
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	69bb      	ldr	r3, [r7, #24]
 800d7d4:	1c5a      	adds	r2, r3, #1
 800d7d6:	61ba      	str	r2, [r7, #24]
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	1acb      	subs	r3, r1, r3
 800d7dc:	617b      	str	r3, [r7, #20]
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d0ec      	beq.n	800d7be <mem_cmp+0x1a>
	return r;
 800d7e4:	697b      	ldr	r3, [r7, #20]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3724      	adds	r7, #36	@ 0x24
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bc80      	pop	{r7}
 800d7ee:	4770      	bx	lr

0800d7f0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d7fa:	e002      	b.n	800d802 <chk_chr+0x12>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	3301      	adds	r3, #1
 800d800:	607b      	str	r3, [r7, #4]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d005      	beq.n	800d816 <chk_chr+0x26>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	461a      	mov	r2, r3
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	4293      	cmp	r3, r2
 800d814:	d1f2      	bne.n	800d7fc <chk_chr+0xc>
	return *str;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	781b      	ldrb	r3, [r3, #0]
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	370c      	adds	r7, #12
 800d81e:	46bd      	mov	sp, r7
 800d820:	bc80      	pop	{r7}
 800d822:	4770      	bx	lr

0800d824 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800d832:	4618      	mov	r0, r3
 800d834:	f003 fc06 	bl	8011044 <ff_req_grant>
 800d838:	4603      	mov	r3, r0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3708      	adds	r7, #8
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d842:	b580      	push	{r7, lr}
 800d844:	b082      	sub	sp, #8
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
 800d84a:	460b      	mov	r3, r1
 800d84c:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d011      	beq.n	800d878 <unlock_fs+0x36>
 800d854:	78fb      	ldrb	r3, [r7, #3]
 800d856:	2b0c      	cmp	r3, #12
 800d858:	d00e      	beq.n	800d878 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800d85a:	78fb      	ldrb	r3, [r7, #3]
 800d85c:	2b0b      	cmp	r3, #11
 800d85e:	d00b      	beq.n	800d878 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800d860:	78fb      	ldrb	r3, [r7, #3]
 800d862:	2b09      	cmp	r3, #9
 800d864:	d008      	beq.n	800d878 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800d866:	78fb      	ldrb	r3, [r7, #3]
 800d868:	2b0f      	cmp	r3, #15
 800d86a:	d005      	beq.n	800d878 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800d872:	4618      	mov	r0, r3
 800d874:	f003 fbfb 	bl	801106e <ff_rel_grant>
	}
}
 800d878:	bf00      	nop
 800d87a:	3708      	adds	r7, #8
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d880:	b480      	push	{r7}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d88a:	2300      	movs	r3, #0
 800d88c:	60bb      	str	r3, [r7, #8]
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	60fb      	str	r3, [r7, #12]
 800d892:	e038      	b.n	800d906 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800d894:	492f      	ldr	r1, [pc, #188]	@ (800d954 <chk_lock+0xd4>)
 800d896:	68fa      	ldr	r2, [r7, #12]
 800d898:	4613      	mov	r3, r2
 800d89a:	005b      	lsls	r3, r3, #1
 800d89c:	4413      	add	r3, r2
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	440b      	add	r3, r1
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d029      	beq.n	800d8fc <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800d8a8:	492a      	ldr	r1, [pc, #168]	@ (800d954 <chk_lock+0xd4>)
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	4613      	mov	r3, r2
 800d8ae:	005b      	lsls	r3, r3, #1
 800d8b0:	4413      	add	r3, r2
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	440b      	add	r3, r1
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d11e      	bne.n	800d900 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800d8c2:	4924      	ldr	r1, [pc, #144]	@ (800d954 <chk_lock+0xd4>)
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	005b      	lsls	r3, r3, #1
 800d8ca:	4413      	add	r3, r2
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	440b      	add	r3, r1
 800d8d0:	3304      	adds	r3, #4
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d110      	bne.n	800d900 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800d8de:	491d      	ldr	r1, [pc, #116]	@ (800d954 <chk_lock+0xd4>)
 800d8e0:	68fa      	ldr	r2, [r7, #12]
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	005b      	lsls	r3, r3, #1
 800d8e6:	4413      	add	r3, r2
 800d8e8:	009b      	lsls	r3, r3, #2
 800d8ea:	440b      	add	r3, r1
 800d8ec:	3308      	adds	r3, #8
 800d8ee:	881a      	ldrh	r2, [r3, #0]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d102      	bne.n	800d900 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800d8fa:	e007      	b.n	800d90c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	3301      	adds	r3, #1
 800d904:	60fb      	str	r3, [r7, #12]
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d9c3      	bls.n	800d894 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2b02      	cmp	r3, #2
 800d910:	d109      	bne.n	800d926 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d102      	bne.n	800d91e <chk_lock+0x9e>
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	2b02      	cmp	r3, #2
 800d91c:	d101      	bne.n	800d922 <chk_lock+0xa2>
 800d91e:	2300      	movs	r3, #0
 800d920:	e013      	b.n	800d94a <chk_lock+0xca>
 800d922:	2312      	movs	r3, #18
 800d924:	e011      	b.n	800d94a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d10b      	bne.n	800d944 <chk_lock+0xc4>
 800d92c:	4909      	ldr	r1, [pc, #36]	@ (800d954 <chk_lock+0xd4>)
 800d92e:	68fa      	ldr	r2, [r7, #12]
 800d930:	4613      	mov	r3, r2
 800d932:	005b      	lsls	r3, r3, #1
 800d934:	4413      	add	r3, r2
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	440b      	add	r3, r1
 800d93a:	330a      	adds	r3, #10
 800d93c:	881b      	ldrh	r3, [r3, #0]
 800d93e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d942:	d101      	bne.n	800d948 <chk_lock+0xc8>
 800d944:	2310      	movs	r3, #16
 800d946:	e000      	b.n	800d94a <chk_lock+0xca>
 800d948:	2300      	movs	r3, #0
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3714      	adds	r7, #20
 800d94e:	46bd      	mov	sp, r7
 800d950:	bc80      	pop	{r7}
 800d952:	4770      	bx	lr
 800d954:	200012a0 	.word	0x200012a0

0800d958 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d958:	b480      	push	{r7}
 800d95a:	b083      	sub	sp, #12
 800d95c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d95e:	2300      	movs	r3, #0
 800d960:	607b      	str	r3, [r7, #4]
 800d962:	e002      	b.n	800d96a <enq_lock+0x12>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	3301      	adds	r3, #1
 800d968:	607b      	str	r3, [r7, #4]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d809      	bhi.n	800d984 <enq_lock+0x2c>
 800d970:	490a      	ldr	r1, [pc, #40]	@ (800d99c <enq_lock+0x44>)
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	4613      	mov	r3, r2
 800d976:	005b      	lsls	r3, r3, #1
 800d978:	4413      	add	r3, r2
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	440b      	add	r3, r1
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d1ef      	bne.n	800d964 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b02      	cmp	r3, #2
 800d988:	bf14      	ite	ne
 800d98a:	2301      	movne	r3, #1
 800d98c:	2300      	moveq	r3, #0
 800d98e:	b2db      	uxtb	r3, r3
}
 800d990:	4618      	mov	r0, r3
 800d992:	370c      	adds	r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	bc80      	pop	{r7}
 800d998:	4770      	bx	lr
 800d99a:	bf00      	nop
 800d99c:	200012a0 	.word	0x200012a0

0800d9a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	60fb      	str	r3, [r7, #12]
 800d9ae:	e02b      	b.n	800da08 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800d9b0:	4955      	ldr	r1, [pc, #340]	@ (800db08 <inc_lock+0x168>)
 800d9b2:	68fa      	ldr	r2, [r7, #12]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	4413      	add	r3, r2
 800d9ba:	009b      	lsls	r3, r3, #2
 800d9bc:	440b      	add	r3, r1
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d11b      	bne.n	800da02 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800d9ca:	494f      	ldr	r1, [pc, #316]	@ (800db08 <inc_lock+0x168>)
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	005b      	lsls	r3, r3, #1
 800d9d2:	4413      	add	r3, r2
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	440b      	add	r3, r1
 800d9d8:	3304      	adds	r3, #4
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d10d      	bne.n	800da02 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800d9e6:	4948      	ldr	r1, [pc, #288]	@ (800db08 <inc_lock+0x168>)
 800d9e8:	68fa      	ldr	r2, [r7, #12]
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	005b      	lsls	r3, r3, #1
 800d9ee:	4413      	add	r3, r2
 800d9f0:	009b      	lsls	r3, r3, #2
 800d9f2:	440b      	add	r3, r1
 800d9f4:	3308      	adds	r3, #8
 800d9f6:	881a      	ldrh	r2, [r3, #0]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d006      	beq.n	800da10 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	3301      	adds	r3, #1
 800da06:	60fb      	str	r3, [r7, #12]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d9d0      	bls.n	800d9b0 <inc_lock+0x10>
 800da0e:	e000      	b.n	800da12 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800da10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2b02      	cmp	r3, #2
 800da16:	d145      	bne.n	800daa4 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800da18:	2300      	movs	r3, #0
 800da1a:	60fb      	str	r3, [r7, #12]
 800da1c:	e002      	b.n	800da24 <inc_lock+0x84>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	3301      	adds	r3, #1
 800da22:	60fb      	str	r3, [r7, #12]
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2b01      	cmp	r3, #1
 800da28:	d809      	bhi.n	800da3e <inc_lock+0x9e>
 800da2a:	4937      	ldr	r1, [pc, #220]	@ (800db08 <inc_lock+0x168>)
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	4613      	mov	r3, r2
 800da30:	005b      	lsls	r3, r3, #1
 800da32:	4413      	add	r3, r2
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	440b      	add	r3, r1
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1ef      	bne.n	800da1e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2b02      	cmp	r3, #2
 800da42:	d101      	bne.n	800da48 <inc_lock+0xa8>
 800da44:	2300      	movs	r3, #0
 800da46:	e05a      	b.n	800dafe <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 800da4e:	482e      	ldr	r0, [pc, #184]	@ (800db08 <inc_lock+0x168>)
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	4613      	mov	r3, r2
 800da54:	005b      	lsls	r3, r3, #1
 800da56:	4413      	add	r3, r2
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	4403      	add	r3, r0
 800da5c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800da64:	4828      	ldr	r0, [pc, #160]	@ (800db08 <inc_lock+0x168>)
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	4613      	mov	r3, r2
 800da6a:	005b      	lsls	r3, r3, #1
 800da6c:	4413      	add	r3, r2
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	4403      	add	r3, r0
 800da72:	3304      	adds	r3, #4
 800da74:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 800da7c:	4922      	ldr	r1, [pc, #136]	@ (800db08 <inc_lock+0x168>)
 800da7e:	68fa      	ldr	r2, [r7, #12]
 800da80:	4613      	mov	r3, r2
 800da82:	005b      	lsls	r3, r3, #1
 800da84:	4413      	add	r3, r2
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	440b      	add	r3, r1
 800da8a:	3308      	adds	r3, #8
 800da8c:	4602      	mov	r2, r0
 800da8e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800da90:	491d      	ldr	r1, [pc, #116]	@ (800db08 <inc_lock+0x168>)
 800da92:	68fa      	ldr	r2, [r7, #12]
 800da94:	4613      	mov	r3, r2
 800da96:	005b      	lsls	r3, r3, #1
 800da98:	4413      	add	r3, r2
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	440b      	add	r3, r1
 800da9e:	330a      	adds	r3, #10
 800daa0:	2200      	movs	r2, #0
 800daa2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d00c      	beq.n	800dac4 <inc_lock+0x124>
 800daaa:	4917      	ldr	r1, [pc, #92]	@ (800db08 <inc_lock+0x168>)
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	4613      	mov	r3, r2
 800dab0:	005b      	lsls	r3, r3, #1
 800dab2:	4413      	add	r3, r2
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	440b      	add	r3, r1
 800dab8:	330a      	adds	r3, #10
 800daba:	881b      	ldrh	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d001      	beq.n	800dac4 <inc_lock+0x124>
 800dac0:	2300      	movs	r3, #0
 800dac2:	e01c      	b.n	800dafe <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d10b      	bne.n	800dae2 <inc_lock+0x142>
 800daca:	490f      	ldr	r1, [pc, #60]	@ (800db08 <inc_lock+0x168>)
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	4613      	mov	r3, r2
 800dad0:	005b      	lsls	r3, r3, #1
 800dad2:	4413      	add	r3, r2
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	440b      	add	r3, r1
 800dad8:	330a      	adds	r3, #10
 800dada:	881b      	ldrh	r3, [r3, #0]
 800dadc:	3301      	adds	r3, #1
 800dade:	b299      	uxth	r1, r3
 800dae0:	e001      	b.n	800dae6 <inc_lock+0x146>
 800dae2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800dae6:	4808      	ldr	r0, [pc, #32]	@ (800db08 <inc_lock+0x168>)
 800dae8:	68fa      	ldr	r2, [r7, #12]
 800daea:	4613      	mov	r3, r2
 800daec:	005b      	lsls	r3, r3, #1
 800daee:	4413      	add	r3, r2
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	4403      	add	r3, r0
 800daf4:	330a      	adds	r3, #10
 800daf6:	460a      	mov	r2, r1
 800daf8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	3301      	adds	r3, #1
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3714      	adds	r7, #20
 800db02:	46bd      	mov	sp, r7
 800db04:	bc80      	pop	{r7}
 800db06:	4770      	bx	lr
 800db08:	200012a0 	.word	0x200012a0

0800db0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800db14:	2300      	movs	r3, #0
 800db16:	60fb      	str	r3, [r7, #12]
 800db18:	e016      	b.n	800db48 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800db1a:	4910      	ldr	r1, [pc, #64]	@ (800db5c <clear_lock+0x50>)
 800db1c:	68fa      	ldr	r2, [r7, #12]
 800db1e:	4613      	mov	r3, r2
 800db20:	005b      	lsls	r3, r3, #1
 800db22:	4413      	add	r3, r2
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	440b      	add	r3, r1
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d108      	bne.n	800db42 <clear_lock+0x36>
 800db30:	490a      	ldr	r1, [pc, #40]	@ (800db5c <clear_lock+0x50>)
 800db32:	68fa      	ldr	r2, [r7, #12]
 800db34:	4613      	mov	r3, r2
 800db36:	005b      	lsls	r3, r3, #1
 800db38:	4413      	add	r3, r2
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	440b      	add	r3, r1
 800db3e:	2200      	movs	r2, #0
 800db40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	3301      	adds	r3, #1
 800db46:	60fb      	str	r3, [r7, #12]
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d9e5      	bls.n	800db1a <clear_lock+0xe>
	}
}
 800db4e:	bf00      	nop
 800db50:	bf00      	nop
 800db52:	3714      	adds	r7, #20
 800db54:	46bd      	mov	sp, r7
 800db56:	bc80      	pop	{r7}
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	200012a0 	.word	0x200012a0

0800db60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b086      	sub	sp, #24
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800db68:	2300      	movs	r3, #0
 800db6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 800db72:	2b00      	cmp	r3, #0
 800db74:	d038      	beq.n	800dbe8 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800db7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800db84:	6879      	ldr	r1, [r7, #4]
 800db86:	2301      	movs	r3, #1
 800db88:	697a      	ldr	r2, [r7, #20]
 800db8a:	f7ff fd95 	bl	800d6b8 <disk_write>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d002      	beq.n	800db9a <sync_window+0x3a>
			res = FR_DISK_ERR;
 800db94:	2301      	movs	r3, #1
 800db96:	73fb      	strb	r3, [r7, #15]
 800db98:	e026      	b.n	800dbe8 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800dba8:	697a      	ldr	r2, [r7, #20]
 800dbaa:	1ad2      	subs	r2, r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d218      	bcs.n	800dbe8 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800dbbc:	613b      	str	r3, [r7, #16]
 800dbbe:	e010      	b.n	800dbe2 <sync_window+0x82>
					wsect += fs->fsize;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800dbc6:	697a      	ldr	r2, [r7, #20]
 800dbc8:	4413      	add	r3, r2
 800dbca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800dbd2:	6879      	ldr	r1, [r7, #4]
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	697a      	ldr	r2, [r7, #20]
 800dbd8:	f7ff fd6e 	bl	800d6b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	3b01      	subs	r3, #1
 800dbe0:	613b      	str	r3, [r7, #16]
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d8eb      	bhi.n	800dbc0 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800dbe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3718      	adds	r7, #24
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}

0800dbf2 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b084      	sub	sp, #16
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
 800dbfa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800dc06:	683a      	ldr	r2, [r7, #0]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d01b      	beq.n	800dc44 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7ff ffa7 	bl	800db60 <sync_window>
 800dc12:	4603      	mov	r3, r0
 800dc14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800dc16:	7bfb      	ldrb	r3, [r7, #15]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d113      	bne.n	800dc44 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800dc22:	6879      	ldr	r1, [r7, #4]
 800dc24:	2301      	movs	r3, #1
 800dc26:	683a      	ldr	r2, [r7, #0]
 800dc28:	f7ff fd26 	bl	800d678 <disk_read>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d004      	beq.n	800dc3c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dc32:	f04f 33ff 	mov.w	r3, #4294967295
 800dc36:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	683a      	ldr	r2, [r7, #0]
 800dc40:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
		}
	}
	return res;
 800dc44:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3710      	adds	r7, #16
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b084      	sub	sp, #16
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f7ff ff82 	bl	800db60 <sync_window>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dc60:	7bfb      	ldrb	r3, [r7, #15]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	f040 809b 	bne.w	800dd9e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800dc6e:	2b03      	cmp	r3, #3
 800dc70:	f040 8088 	bne.w	800dd84 <sync_fs+0x136>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	f040 8082 	bne.w	800dd84 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc86:	2100      	movs	r1, #0
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7ff fd71 	bl	800d770 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2255      	movs	r2, #85	@ 0x55
 800dc92:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	22aa      	movs	r2, #170	@ 0xaa
 800dc9a:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2252      	movs	r2, #82	@ 0x52
 800dca2:	701a      	strb	r2, [r3, #0]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2252      	movs	r2, #82	@ 0x52
 800dca8:	705a      	strb	r2, [r3, #1]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2261      	movs	r2, #97	@ 0x61
 800dcae:	709a      	strb	r2, [r3, #2]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2241      	movs	r2, #65	@ 0x41
 800dcb4:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2272      	movs	r2, #114	@ 0x72
 800dcba:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2272      	movs	r2, #114	@ 0x72
 800dcc2:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2241      	movs	r2, #65	@ 0x41
 800dcca:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2261      	movs	r2, #97	@ 0x61
 800dcd2:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dcdc:	b2da      	uxtb	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	0a1b      	lsrs	r3, r3, #8
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dcfe:	0c1b      	lsrs	r3, r3, #16
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dd0e:	0e1b      	lsrs	r3, r3, #24
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800dd1e:	b2da      	uxtb	r2, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	0a1b      	lsrs	r3, r3, #8
 800dd30:	b29b      	uxth	r3, r3
 800dd32:	b2da      	uxtb	r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800dd40:	0c1b      	lsrs	r3, r3, #16
 800dd42:	b2da      	uxtb	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800dd50:	0e1b      	lsrs	r3, r3, #24
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800dd60:	1c5a      	adds	r2, r3, #1
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800dd6e:	6879      	ldr	r1, [r7, #4]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800dd76:	2301      	movs	r3, #1
 800dd78:	f7ff fc9e 	bl	800d6b8 <disk_write>
			fs->fsi_flag = 0;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	2100      	movs	r1, #0
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7ff fcb2 	bl	800d6f8 <disk_ioctl>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d001      	beq.n	800dd9e <sync_fs+0x150>
			res = FR_DISK_ERR;
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dd9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3710      	adds	r7, #16
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	3b02      	subs	r3, #2
 800ddb6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ddbe:	3b02      	subs	r3, #2
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d301      	bcc.n	800ddca <clust2sect+0x22>
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	e00a      	b.n	800dde0 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	fb03 f202 	mul.w	r2, r3, r2
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800ddde:	4413      	add	r3, r2
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bc80      	pop	{r7}
 800dde8:	4770      	bx	lr

0800ddea <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b086      	sub	sp, #24
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
 800ddf2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d905      	bls.n	800de06 <get_fat+0x1c>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800de00:	683a      	ldr	r2, [r7, #0]
 800de02:	429a      	cmp	r2, r3
 800de04:	d302      	bcc.n	800de0c <get_fat+0x22>
		val = 1;	/* Internal error */
 800de06:	2301      	movs	r3, #1
 800de08:	617b      	str	r3, [r7, #20]
 800de0a:	e0a2      	b.n	800df52 <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800de0c:	f04f 33ff 	mov.w	r3, #4294967295
 800de10:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800de18:	2b03      	cmp	r3, #3
 800de1a:	d067      	beq.n	800deec <get_fat+0x102>
 800de1c:	2b03      	cmp	r3, #3
 800de1e:	f300 808e 	bgt.w	800df3e <get_fat+0x154>
 800de22:	2b01      	cmp	r3, #1
 800de24:	d002      	beq.n	800de2c <get_fat+0x42>
 800de26:	2b02      	cmp	r3, #2
 800de28:	d03f      	beq.n	800deaa <get_fat+0xc0>
 800de2a:	e088      	b.n	800df3e <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	60fb      	str	r3, [r7, #12]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	085b      	lsrs	r3, r3, #1
 800de34:	68fa      	ldr	r2, [r7, #12]
 800de36:	4413      	add	r3, r2
 800de38:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	0a5b      	lsrs	r3, r3, #9
 800de44:	4413      	add	r3, r2
 800de46:	4619      	mov	r1, r3
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f7ff fed2 	bl	800dbf2 <move_window>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	d177      	bne.n	800df44 <get_fat+0x15a>
			wc = fs->win.d8[bc++ % SS(fs)];
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	1c5a      	adds	r2, r3, #1
 800de58:	60fa      	str	r2, [r7, #12]
 800de5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	5cd3      	ldrb	r3, [r2, r3]
 800de62:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	0a5b      	lsrs	r3, r3, #9
 800de6e:	4413      	add	r3, r2
 800de70:	4619      	mov	r1, r3
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7ff febd 	bl	800dbf2 <move_window>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d164      	bne.n	800df48 <get_fat+0x15e>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	5cd3      	ldrb	r3, [r2, r3]
 800de88:	021b      	lsls	r3, r3, #8
 800de8a:	68ba      	ldr	r2, [r7, #8]
 800de8c:	4313      	orrs	r3, r2
 800de8e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	f003 0301 	and.w	r3, r3, #1
 800de96:	2b00      	cmp	r3, #0
 800de98:	d002      	beq.n	800dea0 <get_fat+0xb6>
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	091b      	lsrs	r3, r3, #4
 800de9e:	e002      	b.n	800dea6 <get_fat+0xbc>
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dea6:	617b      	str	r3, [r7, #20]
			break;
 800dea8:	e053      	b.n	800df52 <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	0a1b      	lsrs	r3, r3, #8
 800deb4:	4413      	add	r3, r2
 800deb6:	4619      	mov	r1, r3
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f7ff fe9a 	bl	800dbf2 <move_window>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d143      	bne.n	800df4c <get_fat+0x162>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	005b      	lsls	r3, r3, #1
 800dec8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	4413      	add	r3, r2
 800ded0:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	3301      	adds	r3, #1
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	021b      	lsls	r3, r3, #8
 800deda:	b21a      	sxth	r2, r3
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	b21b      	sxth	r3, r3
 800dee2:	4313      	orrs	r3, r2
 800dee4:	b21b      	sxth	r3, r3
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	617b      	str	r3, [r7, #20]
			break;
 800deea:	e032      	b.n	800df52 <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	09db      	lsrs	r3, r3, #7
 800def6:	4413      	add	r3, r2
 800def8:	4619      	mov	r1, r3
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f7ff fe79 	bl	800dbf2 <move_window>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d124      	bne.n	800df50 <get_fat+0x166>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	4413      	add	r3, r2
 800df12:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	3303      	adds	r3, #3
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	061a      	lsls	r2, r3, #24
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	3302      	adds	r3, #2
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	041b      	lsls	r3, r3, #16
 800df24:	431a      	orrs	r2, r3
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	3301      	adds	r3, #1
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	021b      	lsls	r3, r3, #8
 800df2e:	4313      	orrs	r3, r2
 800df30:	693a      	ldr	r2, [r7, #16]
 800df32:	7812      	ldrb	r2, [r2, #0]
 800df34:	4313      	orrs	r3, r2
 800df36:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800df3a:	617b      	str	r3, [r7, #20]
			break;
 800df3c:	e009      	b.n	800df52 <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 800df3e:	2301      	movs	r3, #1
 800df40:	617b      	str	r3, [r7, #20]
 800df42:	e006      	b.n	800df52 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800df44:	bf00      	nop
 800df46:	e004      	b.n	800df52 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800df48:	bf00      	nop
 800df4a:	e002      	b.n	800df52 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800df4c:	bf00      	nop
 800df4e:	e000      	b.n	800df52 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800df50:	bf00      	nop
		}
	}

	return val;
 800df52:	697b      	ldr	r3, [r7, #20]
}
 800df54:	4618      	mov	r0, r3
 800df56:	3718      	adds	r7, #24
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b088      	sub	sp, #32
 800df60:	af00      	add	r7, sp, #0
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d905      	bls.n	800df7a <put_fat+0x1e>
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800df74:	68ba      	ldr	r2, [r7, #8]
 800df76:	429a      	cmp	r2, r3
 800df78:	d302      	bcc.n	800df80 <put_fat+0x24>
		res = FR_INT_ERR;
 800df7a:	2302      	movs	r3, #2
 800df7c:	77fb      	strb	r3, [r7, #31]
 800df7e:	e0f6      	b.n	800e16e <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800df86:	2b03      	cmp	r3, #3
 800df88:	f000 809e 	beq.w	800e0c8 <put_fat+0x16c>
 800df8c:	2b03      	cmp	r3, #3
 800df8e:	f300 80e4 	bgt.w	800e15a <put_fat+0x1fe>
 800df92:	2b01      	cmp	r3, #1
 800df94:	d002      	beq.n	800df9c <put_fat+0x40>
 800df96:	2b02      	cmp	r3, #2
 800df98:	d06f      	beq.n	800e07a <put_fat+0x11e>
 800df9a:	e0de      	b.n	800e15a <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	617b      	str	r3, [r7, #20]
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	085b      	lsrs	r3, r3, #1
 800dfa4:	697a      	ldr	r2, [r7, #20]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	0a5b      	lsrs	r3, r3, #9
 800dfb4:	4413      	add	r3, r2
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f7ff fe1a 	bl	800dbf2 <move_window>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dfc2:	7ffb      	ldrb	r3, [r7, #31]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	f040 80cb 	bne.w	800e160 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	1c5a      	adds	r2, r3, #1
 800dfce:	617a      	str	r2, [r7, #20]
 800dfd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfd4:	68fa      	ldr	r2, [r7, #12]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	f003 0301 	and.w	r3, r3, #1
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00d      	beq.n	800e000 <put_fat+0xa4>
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	b25b      	sxtb	r3, r3
 800dfea:	f003 030f 	and.w	r3, r3, #15
 800dfee:	b25a      	sxtb	r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	011b      	lsls	r3, r3, #4
 800dff6:	b25b      	sxtb	r3, r3
 800dff8:	4313      	orrs	r3, r2
 800dffa:	b25b      	sxtb	r3, r3
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	e001      	b.n	800e004 <put_fat+0xa8>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	b2db      	uxtb	r3, r3
 800e004:	69ba      	ldr	r2, [r7, #24]
 800e006:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2201      	movs	r2, #1
 800e00c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	0a5b      	lsrs	r3, r3, #9
 800e01a:	4413      	add	r3, r2
 800e01c:	4619      	mov	r1, r3
 800e01e:	68f8      	ldr	r0, [r7, #12]
 800e020:	f7ff fde7 	bl	800dbf2 <move_window>
 800e024:	4603      	mov	r3, r0
 800e026:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e028:	7ffb      	ldrb	r3, [r7, #31]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f040 809a 	bne.w	800e164 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	4413      	add	r3, r2
 800e03a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	f003 0301 	and.w	r3, r3, #1
 800e042:	2b00      	cmp	r3, #0
 800e044:	d003      	beq.n	800e04e <put_fat+0xf2>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	091b      	lsrs	r3, r3, #4
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	e00e      	b.n	800e06c <put_fat+0x110>
 800e04e:	69bb      	ldr	r3, [r7, #24]
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	b25b      	sxtb	r3, r3
 800e054:	f023 030f 	bic.w	r3, r3, #15
 800e058:	b25a      	sxtb	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	0a1b      	lsrs	r3, r3, #8
 800e05e:	b25b      	sxtb	r3, r3
 800e060:	f003 030f 	and.w	r3, r3, #15
 800e064:	b25b      	sxtb	r3, r3
 800e066:	4313      	orrs	r3, r2
 800e068:	b25b      	sxtb	r3, r3
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	69ba      	ldr	r2, [r7, #24]
 800e06e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2201      	movs	r2, #1
 800e074:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800e078:	e079      	b.n	800e16e <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	0a1b      	lsrs	r3, r3, #8
 800e084:	4413      	add	r3, r2
 800e086:	4619      	mov	r1, r3
 800e088:	68f8      	ldr	r0, [r7, #12]
 800e08a:	f7ff fdb2 	bl	800dbf2 <move_window>
 800e08e:	4603      	mov	r3, r0
 800e090:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e092:	7ffb      	ldrb	r3, [r7, #31]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d167      	bne.n	800e168 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	005b      	lsls	r3, r3, #1
 800e09c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	b2da      	uxtb	r2, r3
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	701a      	strb	r2, [r3, #0]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	0a1b      	lsrs	r3, r3, #8
 800e0b4:	b29a      	uxth	r2, r3
 800e0b6:	69bb      	ldr	r3, [r7, #24]
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	b2d2      	uxtb	r2, r2
 800e0bc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800e0c6:	e052      	b.n	800e16e <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	09db      	lsrs	r3, r3, #7
 800e0d2:	4413      	add	r3, r2
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	68f8      	ldr	r0, [r7, #12]
 800e0d8:	f7ff fd8b 	bl	800dbf2 <move_window>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e0e0:	7ffb      	ldrb	r3, [r7, #31]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d142      	bne.n	800e16c <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e0ee:	68fa      	ldr	r2, [r7, #12]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	3303      	adds	r3, #3
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	061a      	lsls	r2, r3, #24
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	3302      	adds	r3, #2
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	041b      	lsls	r3, r3, #16
 800e104:	431a      	orrs	r2, r3
 800e106:	69bb      	ldr	r3, [r7, #24]
 800e108:	3301      	adds	r3, #1
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	021b      	lsls	r3, r3, #8
 800e10e:	4313      	orrs	r3, r2
 800e110:	69ba      	ldr	r2, [r7, #24]
 800e112:	7812      	ldrb	r2, [r2, #0]
 800e114:	4313      	orrs	r3, r2
 800e116:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	4313      	orrs	r3, r2
 800e11e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	b2da      	uxtb	r2, r3
 800e124:	69bb      	ldr	r3, [r7, #24]
 800e126:	701a      	strb	r2, [r3, #0]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	0a1b      	lsrs	r3, r3, #8
 800e12e:	b29a      	uxth	r2, r3
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	3301      	adds	r3, #1
 800e134:	b2d2      	uxtb	r2, r2
 800e136:	701a      	strb	r2, [r3, #0]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	0c1a      	lsrs	r2, r3, #16
 800e13c:	69bb      	ldr	r3, [r7, #24]
 800e13e:	3302      	adds	r3, #2
 800e140:	b2d2      	uxtb	r2, r2
 800e142:	701a      	strb	r2, [r3, #0]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	0e1a      	lsrs	r2, r3, #24
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	3303      	adds	r3, #3
 800e14c:	b2d2      	uxtb	r2, r2
 800e14e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	2201      	movs	r2, #1
 800e154:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800e158:	e009      	b.n	800e16e <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800e15a:	2302      	movs	r3, #2
 800e15c:	77fb      	strb	r3, [r7, #31]
 800e15e:	e006      	b.n	800e16e <put_fat+0x212>
			if (res != FR_OK) break;
 800e160:	bf00      	nop
 800e162:	e004      	b.n	800e16e <put_fat+0x212>
			if (res != FR_OK) break;
 800e164:	bf00      	nop
 800e166:	e002      	b.n	800e16e <put_fat+0x212>
			if (res != FR_OK) break;
 800e168:	bf00      	nop
 800e16a:	e000      	b.n	800e16e <put_fat+0x212>
			if (res != FR_OK) break;
 800e16c:	bf00      	nop
		}
	}

	return res;
 800e16e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e170:	4618      	mov	r0, r3
 800e172:	3720      	adds	r7, #32
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	2b01      	cmp	r3, #1
 800e186:	d905      	bls.n	800e194 <remove_chain+0x1c>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e18e:	683a      	ldr	r2, [r7, #0]
 800e190:	429a      	cmp	r2, r3
 800e192:	d302      	bcc.n	800e19a <remove_chain+0x22>
		res = FR_INT_ERR;
 800e194:	2302      	movs	r3, #2
 800e196:	73fb      	strb	r3, [r7, #15]
 800e198:	e043      	b.n	800e222 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800e19a:	2300      	movs	r3, #0
 800e19c:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800e19e:	e036      	b.n	800e20e <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800e1a0:	6839      	ldr	r1, [r7, #0]
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f7ff fe21 	bl	800ddea <get_fat>
 800e1a8:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d035      	beq.n	800e21c <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d102      	bne.n	800e1bc <remove_chain+0x44>
 800e1b6:	2302      	movs	r3, #2
 800e1b8:	73fb      	strb	r3, [r7, #15]
 800e1ba:	e032      	b.n	800e222 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1c2:	d102      	bne.n	800e1ca <remove_chain+0x52>
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	73fb      	strb	r3, [r7, #15]
 800e1c8:	e02b      	b.n	800e222 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	6839      	ldr	r1, [r7, #0]
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7ff fec4 	bl	800df5c <put_fat>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800e1d8:	7bfb      	ldrb	r3, [r7, #15]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d120      	bne.n	800e220 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1e8:	d00f      	beq.n	800e20a <remove_chain+0x92>
				fs->free_clust++;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e1f0:	1c5a      	adds	r2, r3, #1
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				fs->fsi_flag |= 1;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800e1fe:	f043 0301 	orr.w	r3, r3, #1
 800e202:	b2da      	uxtb	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e214:	683a      	ldr	r2, [r7, #0]
 800e216:	429a      	cmp	r2, r3
 800e218:	d3c2      	bcc.n	800e1a0 <remove_chain+0x28>
 800e21a:	e002      	b.n	800e222 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800e21c:	bf00      	nop
 800e21e:	e000      	b.n	800e222 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800e220:	bf00      	nop
		}
	}

	return res;
 800e222:	7bfb      	ldrb	r3, [r7, #15]
}
 800e224:	4618      	mov	r0, r3
 800e226:	3710      	adds	r7, #16
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b086      	sub	sp, #24
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d10f      	bne.n	800e25c <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e242:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d005      	beq.n	800e256 <create_chain+0x2a>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e250:	693a      	ldr	r2, [r7, #16]
 800e252:	429a      	cmp	r2, r3
 800e254:	d31c      	bcc.n	800e290 <create_chain+0x64>
 800e256:	2301      	movs	r3, #1
 800e258:	613b      	str	r3, [r7, #16]
 800e25a:	e019      	b.n	800e290 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800e25c:	6839      	ldr	r1, [r7, #0]
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f7ff fdc3 	bl	800ddea <get_fat>
 800e264:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d801      	bhi.n	800e270 <create_chain+0x44>
 800e26c:	2301      	movs	r3, #1
 800e26e:	e076      	b.n	800e35e <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e276:	d101      	bne.n	800e27c <create_chain+0x50>
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	e070      	b.n	800e35e <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e282:	68ba      	ldr	r2, [r7, #8]
 800e284:	429a      	cmp	r2, r3
 800e286:	d201      	bcs.n	800e28c <create_chain+0x60>
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	e068      	b.n	800e35e <create_chain+0x132>
		scl = clst;
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	3301      	adds	r3, #1
 800e298:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e2a0:	697a      	ldr	r2, [r7, #20]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d307      	bcc.n	800e2b6 <create_chain+0x8a>
			ncl = 2;
 800e2a6:	2302      	movs	r3, #2
 800e2a8:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800e2aa:	697a      	ldr	r2, [r7, #20]
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d901      	bls.n	800e2b6 <create_chain+0x8a>
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	e053      	b.n	800e35e <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800e2b6:	6979      	ldr	r1, [r7, #20]
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f7ff fd96 	bl	800ddea <get_fat>
 800e2be:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00e      	beq.n	800e2e4 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2cc:	d002      	beq.n	800e2d4 <create_chain+0xa8>
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d101      	bne.n	800e2d8 <create_chain+0xac>
			return cs;
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	e042      	b.n	800e35e <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800e2d8:	697a      	ldr	r2, [r7, #20]
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d1d9      	bne.n	800e294 <create_chain+0x68>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	e03c      	b.n	800e35e <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800e2e4:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800e2e6:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 800e2ea:	6979      	ldr	r1, [r7, #20]
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f7ff fe35 	bl	800df5c <put_fat>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800e2f6:	7bfb      	ldrb	r3, [r7, #15]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d109      	bne.n	800e310 <create_chain+0xe4>
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d006      	beq.n	800e310 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800e302:	697a      	ldr	r2, [r7, #20]
 800e304:	6839      	ldr	r1, [r7, #0]
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f7ff fe28 	bl	800df5c <put_fat>
 800e30c:	4603      	mov	r3, r0
 800e30e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800e310:	7bfb      	ldrb	r3, [r7, #15]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d11a      	bne.n	800e34c <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	697a      	ldr	r2, [r7, #20]
 800e31a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e328:	d018      	beq.n	800e35c <create_chain+0x130>
			fs->free_clust--;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e330:	1e5a      	subs	r2, r3, #1
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			fs->fsi_flag |= 1;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800e33e:	f043 0301 	orr.w	r3, r3, #1
 800e342:	b2da      	uxtb	r2, r3
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 800e34a:	e007      	b.n	800e35c <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800e34c:	7bfb      	ldrb	r3, [r7, #15]
 800e34e:	2b01      	cmp	r3, #1
 800e350:	d102      	bne.n	800e358 <create_chain+0x12c>
 800e352:	f04f 33ff 	mov.w	r3, #4294967295
 800e356:	e000      	b.n	800e35a <create_chain+0x12e>
 800e358:	2301      	movs	r3, #1
 800e35a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800e35c:	697b      	ldr	r3, [r7, #20]
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3718      	adds	r7, #24
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}

0800e366 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800e366:	b480      	push	{r7}
 800e368:	b087      	sub	sp, #28
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	6078      	str	r0, [r7, #4]
 800e36e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800e376:	3304      	adds	r3, #4
 800e378:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	0a5b      	lsrs	r3, r3, #9
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800e384:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800e388:	fbb3 f3f2 	udiv	r3, r3, r2
 800e38c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	1d1a      	adds	r2, r3, #4
 800e392:	613a      	str	r2, [r7, #16]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d101      	bne.n	800e3a2 <clmt_clust+0x3c>
 800e39e:	2300      	movs	r3, #0
 800e3a0:	e010      	b.n	800e3c4 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800e3a2:	697a      	ldr	r2, [r7, #20]
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d307      	bcc.n	800e3ba <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800e3aa:	697a      	ldr	r2, [r7, #20]
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	1ad3      	subs	r3, r2, r3
 800e3b0:	617b      	str	r3, [r7, #20]
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	3304      	adds	r3, #4
 800e3b6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e3b8:	e7e9      	b.n	800e38e <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800e3ba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	4413      	add	r3, r2
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	371c      	adds	r7, #28
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bc80      	pop	{r7}
 800e3cc:	4770      	bx	lr

0800e3ce <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b086      	sub	sp, #24
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
 800e3d6:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	b29a      	uxth	r2, r3
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800e3e8:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d007      	beq.n	800e400 <dir_sdi+0x32>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e3f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e3fa:	697a      	ldr	r2, [r7, #20]
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d301      	bcc.n	800e404 <dir_sdi+0x36>
		return FR_INT_ERR;
 800e400:	2302      	movs	r3, #2
 800e402:	e074      	b.n	800e4ee <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d10c      	bne.n	800e424 <dir_sdi+0x56>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e410:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e414:	2b03      	cmp	r3, #3
 800e416:	d105      	bne.n	800e424 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e41e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800e422:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d111      	bne.n	800e44e <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e430:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800e434:	461a      	mov	r2, r3
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	4293      	cmp	r3, r2
 800e43a:	d301      	bcc.n	800e440 <dir_sdi+0x72>
			return FR_INT_ERR;
 800e43c:	2302      	movs	r3, #2
 800e43e:	e056      	b.n	800e4ee <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e446:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800e44a:	613b      	str	r3, [r7, #16]
 800e44c:	e032      	b.n	800e4b4 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e454:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800e458:	011b      	lsls	r3, r3, #4
 800e45a:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800e45c:	e01e      	b.n	800e49c <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e464:	6979      	ldr	r1, [r7, #20]
 800e466:	4618      	mov	r0, r3
 800e468:	f7ff fcbf 	bl	800ddea <get_fat>
 800e46c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e474:	d101      	bne.n	800e47a <dir_sdi+0xac>
 800e476:	2301      	movs	r3, #1
 800e478:	e039      	b.n	800e4ee <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d907      	bls.n	800e490 <dir_sdi+0xc2>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e486:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e48a:	697a      	ldr	r2, [r7, #20]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d301      	bcc.n	800e494 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800e490:	2302      	movs	r3, #2
 800e492:	e02c      	b.n	800e4ee <dir_sdi+0x120>
			idx -= ic;
 800e494:	683a      	ldr	r2, [r7, #0]
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	1ad3      	subs	r3, r2, r3
 800e49a:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800e49c:	683a      	ldr	r2, [r7, #0]
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d2dc      	bcs.n	800e45e <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e4aa:	6979      	ldr	r1, [r7, #20]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7ff fc7b 	bl	800dda8 <clust2sect>
 800e4b2:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	697a      	ldr	r2, [r7, #20]
 800e4b8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d101      	bne.n	800e4c6 <dir_sdi+0xf8>
 800e4c2:	2302      	movs	r3, #2
 800e4c4:	e013      	b.n	800e4ee <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	091a      	lsrs	r2, r3, #4
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	441a      	add	r2, r3
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e4da:	461a      	mov	r2, r3
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	f003 030f 	and.w	r3, r3, #15
 800e4e2:	015b      	lsls	r3, r3, #5
 800e4e4:	441a      	add	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800e4ec:	2300      	movs	r3, #0
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3718      	adds	r7, #24
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}

0800e4f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e4f6:	b590      	push	{r4, r7, lr}
 800e4f8:	b087      	sub	sp, #28
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
 800e4fe:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800e506:	3301      	adds	r3, #1
 800e508:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d004      	beq.n	800e51c <dir_next+0x26>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d101      	bne.n	800e520 <dir_next+0x2a>
		return FR_NO_FILE;
 800e51c:	2304      	movs	r3, #4
 800e51e:	e0dd      	b.n	800e6dc <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f003 030f 	and.w	r3, r3, #15
 800e526:	2b00      	cmp	r3, #0
 800e528:	f040 80c6 	bne.w	800e6b8 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e532:	1c5a      	adds	r2, r3, #1
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800e540:	2b00      	cmp	r3, #0
 800e542:	d10b      	bne.n	800e55c <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e54a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800e54e:	461a      	mov	r2, r3
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	4293      	cmp	r3, r2
 800e554:	f0c0 80b0 	bcc.w	800e6b8 <dir_next+0x1c2>
				return FR_NO_FILE;
 800e558:	2304      	movs	r3, #4
 800e55a:	e0bf      	b.n	800e6dc <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	091b      	lsrs	r3, r3, #4
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800e566:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800e56a:	3a01      	subs	r2, #1
 800e56c:	4013      	ands	r3, r2
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f040 80a2 	bne.w	800e6b8 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800e580:	4619      	mov	r1, r3
 800e582:	4610      	mov	r0, r2
 800e584:	f7ff fc31 	bl	800ddea <get_fat>
 800e588:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d801      	bhi.n	800e594 <dir_next+0x9e>
 800e590:	2302      	movs	r3, #2
 800e592:	e0a3      	b.n	800e6dc <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e59a:	d101      	bne.n	800e5a0 <dir_next+0xaa>
 800e59c:	2301      	movs	r3, #1
 800e59e:	e09d      	b.n	800e6dc <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e5a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e5aa:	697a      	ldr	r2, [r7, #20]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d374      	bcc.n	800e69a <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d101      	bne.n	800e5ba <dir_next+0xc4>
 800e5b6:	2304      	movs	r3, #4
 800e5b8:	e090      	b.n	800e6dc <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	4610      	mov	r0, r2
 800e5ca:	f7ff fe2f 	bl	800e22c <create_chain>
 800e5ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d101      	bne.n	800e5da <dir_next+0xe4>
 800e5d6:	2307      	movs	r3, #7
 800e5d8:	e080      	b.n	800e6dc <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	d101      	bne.n	800e5e4 <dir_next+0xee>
 800e5e0:	2302      	movs	r3, #2
 800e5e2:	e07b      	b.n	800e6dc <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ea:	d101      	bne.n	800e5f0 <dir_next+0xfa>
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	e075      	b.n	800e6dc <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7ff fab2 	bl	800db60 <sync_window>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d001      	beq.n	800e606 <dir_next+0x110>
 800e602:	2301      	movs	r3, #1
 800e604:	e06a      	b.n	800e6dc <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e60c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e610:	2100      	movs	r1, #0
 800e612:	4618      	mov	r0, r3
 800e614:	f7ff f8ac 	bl	800d770 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 800e624:	6979      	ldr	r1, [r7, #20]
 800e626:	4610      	mov	r0, r2
 800e628:	f7ff fbbe 	bl	800dda8 <clust2sect>
 800e62c:	4603      	mov	r3, r0
 800e62e:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800e632:	2300      	movs	r3, #0
 800e634:	613b      	str	r3, [r7, #16]
 800e636:	e01b      	b.n	800e670 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e63e:	2201      	movs	r2, #1
 800e640:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7ff fa88 	bl	800db60 <sync_window>
 800e650:	4603      	mov	r3, r0
 800e652:	2b00      	cmp	r3, #0
 800e654:	d001      	beq.n	800e65a <dir_next+0x164>
 800e656:	2301      	movs	r3, #1
 800e658:	e040      	b.n	800e6dc <dir_next+0x1e6>
						dp->fs->winsect++;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e660:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800e664:	3201      	adds	r2, #1
 800e666:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	3301      	adds	r3, #1
 800e66e:	613b      	str	r3, [r7, #16]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e676:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800e67a:	461a      	mov	r2, r3
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	4293      	cmp	r3, r2
 800e680:	d3da      	bcc.n	800e638 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e688:	f8d3 1230 	ldr.w	r1, [r3, #560]	@ 0x230
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e692:	693a      	ldr	r2, [r7, #16]
 800e694:	1a8a      	subs	r2, r1, r2
 800e696:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	697a      	ldr	r2, [r7, #20]
 800e69e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e6a8:	6979      	ldr	r1, [r7, #20]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7ff fb7c 	bl	800dda8 <clust2sect>
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f003 030f 	and.w	r3, r3, #15
 800e6d0:	015b      	lsls	r3, r3, #5
 800e6d2:	441a      	add	r2, r3
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800e6da:	2300      	movs	r3, #0
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	371c      	adds	r7, #28
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd90      	pop	{r4, r7, pc}

0800e6e4 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800e6ee:	2100      	movs	r1, #0
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7ff fe6c 	bl	800e3ce <dir_sdi>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e6fa:	7bfb      	ldrb	r3, [r7, #15]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d131      	bne.n	800e764 <dir_alloc+0x80>
		n = 0;
 800e700:	2300      	movs	r3, #0
 800e702:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e710:	4619      	mov	r1, r3
 800e712:	4610      	mov	r0, r2
 800e714:	f7ff fa6d 	bl	800dbf2 <move_window>
 800e718:	4603      	mov	r3, r0
 800e71a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800e71c:	7bfb      	ldrb	r3, [r7, #15]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d11f      	bne.n	800e762 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	2be5      	cmp	r3, #229	@ 0xe5
 800e72c:	d005      	beq.n	800e73a <dir_alloc+0x56>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d107      	bne.n	800e74a <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	3301      	adds	r3, #1
 800e73e:	60bb      	str	r3, [r7, #8]
 800e740:	68ba      	ldr	r2, [r7, #8]
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	429a      	cmp	r2, r3
 800e746:	d102      	bne.n	800e74e <dir_alloc+0x6a>
 800e748:	e00c      	b.n	800e764 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e74a:	2300      	movs	r3, #0
 800e74c:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800e74e:	2101      	movs	r1, #1
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f7ff fed0 	bl	800e4f6 <dir_next>
 800e756:	4603      	mov	r3, r0
 800e758:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800e75a:	7bfb      	ldrb	r3, [r7, #15]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d0d1      	beq.n	800e704 <dir_alloc+0x20>
 800e760:	e000      	b.n	800e764 <dir_alloc+0x80>
			if (res != FR_OK) break;
 800e762:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e764:	7bfb      	ldrb	r3, [r7, #15]
 800e766:	2b04      	cmp	r3, #4
 800e768:	d101      	bne.n	800e76e <dir_alloc+0x8a>
 800e76a:	2307      	movs	r3, #7
 800e76c:	73fb      	strb	r3, [r7, #15]
	return res;
 800e76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e770:	4618      	mov	r0, r3
 800e772:	3710      	adds	r7, #16
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	331b      	adds	r3, #27
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	021b      	lsls	r3, r3, #8
 800e78a:	b21a      	sxth	r2, r3
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	331a      	adds	r3, #26
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	b21b      	sxth	r3, r3
 800e794:	4313      	orrs	r3, r2
 800e796:	b21b      	sxth	r3, r3
 800e798:	b29b      	uxth	r3, r3
 800e79a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e7a2:	2b03      	cmp	r3, #3
 800e7a4:	d10f      	bne.n	800e7c6 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	3315      	adds	r3, #21
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	021b      	lsls	r3, r3, #8
 800e7ae:	b21a      	sxth	r2, r3
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	3314      	adds	r3, #20
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	b21b      	sxth	r3, r3
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	b21b      	sxth	r3, r3
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	041b      	lsls	r3, r3, #16
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	60fb      	str	r3, [r7, #12]

	return cl;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3714      	adds	r7, #20
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bc80      	pop	{r7}
 800e7d0:	4770      	bx	lr

0800e7d2 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800e7d2:	b480      	push	{r7}
 800e7d4:	b083      	sub	sp, #12
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
 800e7da:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	331a      	adds	r3, #26
 800e7e0:	683a      	ldr	r2, [r7, #0]
 800e7e2:	b2d2      	uxtb	r2, r2
 800e7e4:	701a      	strb	r2, [r3, #0]
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	0a1b      	lsrs	r3, r3, #8
 800e7ec:	b29a      	uxth	r2, r3
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	331b      	adds	r3, #27
 800e7f2:	b2d2      	uxtb	r2, r2
 800e7f4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	0c1a      	lsrs	r2, r3, #16
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	3314      	adds	r3, #20
 800e7fe:	b2d2      	uxtb	r2, r2
 800e800:	701a      	strb	r2, [r3, #0]
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	0c1b      	lsrs	r3, r3, #16
 800e806:	b29b      	uxth	r3, r3
 800e808:	0a1b      	lsrs	r3, r3, #8
 800e80a:	b29a      	uxth	r2, r3
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	3315      	adds	r3, #21
 800e810:	b2d2      	uxtb	r2, r2
 800e812:	701a      	strb	r2, [r3, #0]
}
 800e814:	bf00      	nop
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	bc80      	pop	{r7}
 800e81c:	4770      	bx	lr
	...

0800e820 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e832:	1e5a      	subs	r2, r3, #1
 800e834:	4613      	mov	r3, r2
 800e836:	005b      	lsls	r3, r3, #1
 800e838:	4413      	add	r3, r2
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	4413      	add	r3, r2
 800e83e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800e840:	2300      	movs	r3, #0
 800e842:	613b      	str	r3, [r7, #16]
 800e844:	2301      	movs	r3, #1
 800e846:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800e848:	4a2b      	ldr	r2, [pc, #172]	@ (800e8f8 <cmp_lfn+0xd8>)
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	4413      	add	r3, r2
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	3301      	adds	r3, #1
 800e852:	683a      	ldr	r2, [r7, #0]
 800e854:	4413      	add	r3, r2
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	021b      	lsls	r3, r3, #8
 800e85a:	b21a      	sxth	r2, r3
 800e85c:	4926      	ldr	r1, [pc, #152]	@ (800e8f8 <cmp_lfn+0xd8>)
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	440b      	add	r3, r1
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	4619      	mov	r1, r3
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	440b      	add	r3, r1
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	b21b      	sxth	r3, r3
 800e86e:	4313      	orrs	r3, r2
 800e870:	b21b      	sxth	r3, r3
 800e872:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800e874:	89fb      	ldrh	r3, [r7, #14]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d019      	beq.n	800e8ae <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800e87a:	89bb      	ldrh	r3, [r7, #12]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f002 fb87 	bl	8010f90 <ff_wtoupper>
 800e882:	4603      	mov	r3, r0
 800e884:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	2bfe      	cmp	r3, #254	@ 0xfe
 800e88a:	d80e      	bhi.n	800e8aa <cmp_lfn+0x8a>
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	1c5a      	adds	r2, r3, #1
 800e890:	617a      	str	r2, [r7, #20]
 800e892:	005b      	lsls	r3, r3, #1
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	4413      	add	r3, r2
 800e898:	881b      	ldrh	r3, [r3, #0]
 800e89a:	4618      	mov	r0, r3
 800e89c:	f002 fb78 	bl	8010f90 <ff_wtoupper>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	89fb      	ldrh	r3, [r7, #14]
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d008      	beq.n	800e8bc <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	e01f      	b.n	800e8ee <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800e8ae:	89bb      	ldrh	r3, [r7, #12]
 800e8b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d001      	beq.n	800e8bc <cmp_lfn+0x9c>
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	e018      	b.n	800e8ee <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	613b      	str	r3, [r7, #16]
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	2b0c      	cmp	r3, #12
 800e8c6:	d9bf      	bls.n	800e848 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00b      	beq.n	800e8ec <cmp_lfn+0xcc>
 800e8d4:	89fb      	ldrh	r3, [r7, #14]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d008      	beq.n	800e8ec <cmp_lfn+0xcc>
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	005b      	lsls	r3, r3, #1
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	4413      	add	r3, r2
 800e8e2:	881b      	ldrh	r3, [r3, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d001      	beq.n	800e8ec <cmp_lfn+0xcc>
		return 0;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	e000      	b.n	800e8ee <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800e8ec:	2301      	movs	r3, #1
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3718      	adds	r7, #24
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	0801442c 	.word	0x0801442c

0800e8fc <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b089      	sub	sp, #36	@ 0x24
 800e900:	af00      	add	r7, sp, #0
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	60b9      	str	r1, [r7, #8]
 800e906:	4611      	mov	r1, r2
 800e908:	461a      	mov	r2, r3
 800e90a:	460b      	mov	r3, r1
 800e90c:	71fb      	strb	r3, [r7, #7]
 800e90e:	4613      	mov	r3, r2
 800e910:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	330d      	adds	r3, #13
 800e916:	79ba      	ldrb	r2, [r7, #6]
 800e918:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	330b      	adds	r3, #11
 800e91e:	220f      	movs	r2, #15
 800e920:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	330c      	adds	r3, #12
 800e926:	2200      	movs	r2, #0
 800e928:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	331a      	adds	r3, #26
 800e92e:	2200      	movs	r2, #0
 800e930:	701a      	strb	r2, [r3, #0]
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	331b      	adds	r3, #27
 800e936:	2200      	movs	r2, #0
 800e938:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800e93a:	79fb      	ldrb	r3, [r7, #7]
 800e93c:	1e5a      	subs	r2, r3, #1
 800e93e:	4613      	mov	r3, r2
 800e940:	005b      	lsls	r3, r3, #1
 800e942:	4413      	add	r3, r2
 800e944:	009b      	lsls	r3, r3, #2
 800e946:	4413      	add	r3, r2
 800e948:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e94a:	2300      	movs	r3, #0
 800e94c:	82fb      	strh	r3, [r7, #22]
 800e94e:	2300      	movs	r3, #0
 800e950:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800e952:	8afb      	ldrh	r3, [r7, #22]
 800e954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e958:	4293      	cmp	r3, r2
 800e95a:	d007      	beq.n	800e96c <fit_lfn+0x70>
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	1c5a      	adds	r2, r3, #1
 800e960:	61fa      	str	r2, [r7, #28]
 800e962:	005b      	lsls	r3, r3, #1
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	4413      	add	r3, r2
 800e968:	881b      	ldrh	r3, [r3, #0]
 800e96a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800e96c:	4a1c      	ldr	r2, [pc, #112]	@ (800e9e0 <fit_lfn+0xe4>)
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	4413      	add	r3, r2
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	461a      	mov	r2, r3
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	4413      	add	r3, r2
 800e97a:	8afa      	ldrh	r2, [r7, #22]
 800e97c:	b2d2      	uxtb	r2, r2
 800e97e:	701a      	strb	r2, [r3, #0]
 800e980:	8afb      	ldrh	r3, [r7, #22]
 800e982:	0a1b      	lsrs	r3, r3, #8
 800e984:	b299      	uxth	r1, r3
 800e986:	4a16      	ldr	r2, [pc, #88]	@ (800e9e0 <fit_lfn+0xe4>)
 800e988:	69bb      	ldr	r3, [r7, #24]
 800e98a:	4413      	add	r3, r2
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	3301      	adds	r3, #1
 800e990:	68ba      	ldr	r2, [r7, #8]
 800e992:	4413      	add	r3, r2
 800e994:	b2ca      	uxtb	r2, r1
 800e996:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800e998:	8afb      	ldrh	r3, [r7, #22]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d102      	bne.n	800e9a4 <fit_lfn+0xa8>
 800e99e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e9a2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	61bb      	str	r3, [r7, #24]
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	2b0c      	cmp	r3, #12
 800e9ae:	d9d0      	bls.n	800e952 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800e9b0:	8afb      	ldrh	r3, [r7, #22]
 800e9b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d006      	beq.n	800e9c8 <fit_lfn+0xcc>
 800e9ba:	69fb      	ldr	r3, [r7, #28]
 800e9bc:	005b      	lsls	r3, r3, #1
 800e9be:	68fa      	ldr	r2, [r7, #12]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	881b      	ldrh	r3, [r3, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d103      	bne.n	800e9d0 <fit_lfn+0xd4>
 800e9c8:	79fb      	ldrb	r3, [r7, #7]
 800e9ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9ce:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	79fa      	ldrb	r2, [r7, #7]
 800e9d4:	701a      	strb	r2, [r3, #0]
}
 800e9d6:	bf00      	nop
 800e9d8:	3724      	adds	r7, #36	@ 0x24
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bc80      	pop	{r7}
 800e9de:	4770      	bx	lr
 800e9e0:	0801442c 	.word	0x0801442c

0800e9e4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b08c      	sub	sp, #48	@ 0x30
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	60b9      	str	r1, [r7, #8]
 800e9ee:	607a      	str	r2, [r7, #4]
 800e9f0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e9f2:	220b      	movs	r2, #11
 800e9f4:	68b9      	ldr	r1, [r7, #8]
 800e9f6:	68f8      	ldr	r0, [r7, #12]
 800e9f8:	f7fe fe9c 	bl	800d734 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	2b05      	cmp	r3, #5
 800ea00:	d92b      	bls.n	800ea5a <gen_numname+0x76>
		sr = seq;
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ea06:	e022      	b.n	800ea4e <gen_numname+0x6a>
			wc = *lfn++;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	1c9a      	adds	r2, r3, #2
 800ea0c:	607a      	str	r2, [r7, #4]
 800ea0e:	881b      	ldrh	r3, [r3, #0]
 800ea10:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800ea12:	2300      	movs	r3, #0
 800ea14:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea16:	e017      	b.n	800ea48 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	005a      	lsls	r2, r3, #1
 800ea1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ea1e:	f003 0301 	and.w	r3, r3, #1
 800ea22:	4413      	add	r3, r2
 800ea24:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ea26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ea28:	085b      	lsrs	r3, r3, #1
 800ea2a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d005      	beq.n	800ea42 <gen_numname+0x5e>
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800ea3c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800ea40:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ea42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea44:	3301      	adds	r3, #1
 800ea46:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea4a:	2b0f      	cmp	r3, #15
 800ea4c:	d9e4      	bls.n	800ea18 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	881b      	ldrh	r3, [r3, #0]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d1d8      	bne.n	800ea08 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ea5a:	2307      	movs	r3, #7
 800ea5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	f003 030f 	and.w	r3, r3, #15
 800ea66:	b2db      	uxtb	r3, r3
 800ea68:	3330      	adds	r3, #48	@ 0x30
 800ea6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800ea6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea72:	2b39      	cmp	r3, #57	@ 0x39
 800ea74:	d904      	bls.n	800ea80 <gen_numname+0x9c>
 800ea76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea7a:	3307      	adds	r3, #7
 800ea7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800ea80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea82:	1e5a      	subs	r2, r3, #1
 800ea84:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ea86:	3330      	adds	r3, #48	@ 0x30
 800ea88:	443b      	add	r3, r7
 800ea8a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ea8e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	091b      	lsrs	r3, r3, #4
 800ea96:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d1df      	bne.n	800ea5e <gen_numname+0x7a>
	ns[i] = '~';
 800ea9e:	f107 0214 	add.w	r2, r7, #20
 800eaa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa4:	4413      	add	r3, r2
 800eaa6:	227e      	movs	r2, #126	@ 0x7e
 800eaa8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800eaaa:	2300      	movs	r3, #0
 800eaac:	627b      	str	r3, [r7, #36]	@ 0x24
 800eaae:	e002      	b.n	800eab6 <gen_numname+0xd2>
 800eab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab2:	3301      	adds	r3, #1
 800eab4:	627b      	str	r3, [r7, #36]	@ 0x24
 800eab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d205      	bcs.n	800eaca <gen_numname+0xe6>
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac2:	4413      	add	r3, r2
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	2b20      	cmp	r3, #32
 800eac8:	d1f2      	bne.n	800eab0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eaca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eacc:	2b07      	cmp	r3, #7
 800eace:	d807      	bhi.n	800eae0 <gen_numname+0xfc>
 800ead0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead2:	1c5a      	adds	r2, r3, #1
 800ead4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ead6:	3330      	adds	r3, #48	@ 0x30
 800ead8:	443b      	add	r3, r7
 800eada:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800eade:	e000      	b.n	800eae2 <gen_numname+0xfe>
 800eae0:	2120      	movs	r1, #32
 800eae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae4:	1c5a      	adds	r2, r3, #1
 800eae6:	627a      	str	r2, [r7, #36]	@ 0x24
 800eae8:	68fa      	ldr	r2, [r7, #12]
 800eaea:	4413      	add	r3, r2
 800eaec:	460a      	mov	r2, r1
 800eaee:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800eaf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf2:	2b07      	cmp	r3, #7
 800eaf4:	d9e9      	bls.n	800eaca <gen_numname+0xe6>
}
 800eaf6:	bf00      	nop
 800eaf8:	bf00      	nop
 800eafa:	3730      	adds	r7, #48	@ 0x30
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800eb00:	b480      	push	{r7}
 800eb02:	b085      	sub	sp, #20
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800eb0c:	230b      	movs	r3, #11
 800eb0e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800eb10:	7bfb      	ldrb	r3, [r7, #15]
 800eb12:	b2da      	uxtb	r2, r3
 800eb14:	0852      	lsrs	r2, r2, #1
 800eb16:	01db      	lsls	r3, r3, #7
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	b2da      	uxtb	r2, r3
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	1c59      	adds	r1, r3, #1
 800eb20:	6079      	str	r1, [r7, #4]
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	4413      	add	r3, r2
 800eb26:	73fb      	strb	r3, [r7, #15]
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	60bb      	str	r3, [r7, #8]
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d1ed      	bne.n	800eb10 <sum_sfn+0x10>
	return sum;
 800eb34:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3714      	adds	r7, #20
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bc80      	pop	{r7}
 800eb3e:	4770      	bx	lr

0800eb40 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b086      	sub	sp, #24
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800eb48:	2100      	movs	r1, #0
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f7ff fc3f 	bl	800e3ce <dir_sdi>
 800eb50:	4603      	mov	r3, r0
 800eb52:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800eb54:	7dfb      	ldrb	r3, [r7, #23]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d001      	beq.n	800eb5e <dir_find+0x1e>
 800eb5a:	7dfb      	ldrb	r3, [r7, #23]
 800eb5c:	e0ac      	b.n	800ecb8 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800eb5e:	23ff      	movs	r3, #255	@ 0xff
 800eb60:	753b      	strb	r3, [r7, #20]
 800eb62:	7d3b      	ldrb	r3, [r7, #20]
 800eb64:	757b      	strb	r3, [r7, #21]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eb6c:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	4610      	mov	r0, r2
 800eb80:	f7ff f837 	bl	800dbf2 <move_window>
 800eb84:	4603      	mov	r3, r0
 800eb86:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eb88:	7dfb      	ldrb	r3, [r7, #23]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f040 808e 	bne.w	800ecac <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800eb96:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800eb9e:	7dbb      	ldrb	r3, [r7, #22]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d102      	bne.n	800ebaa <dir_find+0x6a>
 800eba4:	2304      	movs	r3, #4
 800eba6:	75fb      	strb	r3, [r7, #23]
 800eba8:	e085      	b.n	800ecb6 <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	330b      	adds	r3, #11
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ebb4:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ebb6:	7dbb      	ldrb	r3, [r7, #22]
 800ebb8:	2be5      	cmp	r3, #229	@ 0xe5
 800ebba:	d007      	beq.n	800ebcc <dir_find+0x8c>
 800ebbc:	7bfb      	ldrb	r3, [r7, #15]
 800ebbe:	f003 0308 	and.w	r3, r3, #8
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d00a      	beq.n	800ebdc <dir_find+0x9c>
 800ebc6:	7bfb      	ldrb	r3, [r7, #15]
 800ebc8:	2b0f      	cmp	r3, #15
 800ebca:	d007      	beq.n	800ebdc <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ebcc:	23ff      	movs	r3, #255	@ 0xff
 800ebce:	757b      	strb	r3, [r7, #21]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ebd6:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
 800ebda:	e05c      	b.n	800ec96 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ebdc:	7bfb      	ldrb	r3, [r7, #15]
 800ebde:	2b0f      	cmp	r3, #15
 800ebe0:	d133      	bne.n	800ec4a <dir_find+0x10a>
				if (dp->lfn) {
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d054      	beq.n	800ec96 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ebec:	7dbb      	ldrb	r3, [r7, #22]
 800ebee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00e      	beq.n	800ec14 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	7b5b      	ldrb	r3, [r3, #13]
 800ebfa:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800ebfc:	7dbb      	ldrb	r3, [r7, #22]
 800ebfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec02:	75bb      	strb	r3, [r7, #22]
 800ec04:	7dbb      	ldrb	r3, [r7, #22]
 800ec06:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800ec14:	7dba      	ldrb	r2, [r7, #22]
 800ec16:	7d7b      	ldrb	r3, [r7, #21]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d113      	bne.n	800ec44 <dir_find+0x104>
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	330d      	adds	r3, #13
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	7d3a      	ldrb	r2, [r7, #20]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d10d      	bne.n	800ec44 <dir_find+0x104>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800ec2e:	6939      	ldr	r1, [r7, #16]
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7ff fdf5 	bl	800e820 <cmp_lfn>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d003      	beq.n	800ec44 <dir_find+0x104>
 800ec3c:	7d7b      	ldrb	r3, [r7, #21]
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	e000      	b.n	800ec46 <dir_find+0x106>
 800ec44:	23ff      	movs	r3, #255	@ 0xff
 800ec46:	757b      	strb	r3, [r7, #21]
 800ec48:	e025      	b.n	800ec96 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ec4a:	7d7b      	ldrb	r3, [r7, #21]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d107      	bne.n	800ec60 <dir_find+0x120>
 800ec50:	6938      	ldr	r0, [r7, #16]
 800ec52:	f7ff ff55 	bl	800eb00 <sum_sfn>
 800ec56:	4603      	mov	r3, r0
 800ec58:	461a      	mov	r2, r3
 800ec5a:	7d3b      	ldrb	r3, [r7, #20]
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d027      	beq.n	800ecb0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ec66:	330b      	adds	r3, #11
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	f003 0301 	and.w	r3, r3, #1
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d10a      	bne.n	800ec88 <dir_find+0x148>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ec78:	220b      	movs	r2, #11
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	6938      	ldr	r0, [r7, #16]
 800ec7e:	f7fe fd91 	bl	800d7a4 <mem_cmp>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d015      	beq.n	800ecb4 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ec88:	23ff      	movs	r3, #255	@ 0xff
 800ec8a:	757b      	strb	r3, [r7, #21]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ec92:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800ec96:	2100      	movs	r1, #0
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f7ff fc2c 	bl	800e4f6 <dir_next>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800eca2:	7dfb      	ldrb	r3, [r7, #23]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	f43f af63 	beq.w	800eb70 <dir_find+0x30>
 800ecaa:	e004      	b.n	800ecb6 <dir_find+0x176>
		if (res != FR_OK) break;
 800ecac:	bf00      	nop
 800ecae:	e002      	b.n	800ecb6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ecb0:	bf00      	nop
 800ecb2:	e000      	b.n	800ecb6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ecb4:	bf00      	nop

	return res;
 800ecb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3718      	adds	r7, #24
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}

0800ecc0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b08c      	sub	sp, #48	@ 0x30
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ecce:	623b      	str	r3, [r7, #32]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800ecd6:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800ecd8:	f107 030c 	add.w	r3, r7, #12
 800ecdc:	220c      	movs	r2, #12
 800ecde:	6a39      	ldr	r1, [r7, #32]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7fe fd27 	bl	800d734 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ece6:	7dfb      	ldrb	r3, [r7, #23]
 800ece8:	f003 0301 	and.w	r3, r3, #1
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d037      	beq.n	800ed60 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800ecf0:	6a3b      	ldr	r3, [r7, #32]
 800ecf2:	330b      	adds	r3, #11
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	701a      	strb	r2, [r3, #0]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		for (n = 1; n < 100; n++) {
 800ed00:	2301      	movs	r3, #1
 800ed02:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed04:	e013      	b.n	800ed2e <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800ed06:	f107 010c 	add.w	r1, r7, #12
 800ed0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed0c:	69fa      	ldr	r2, [r7, #28]
 800ed0e:	6a38      	ldr	r0, [r7, #32]
 800ed10:	f7ff fe68 	bl	800e9e4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f7ff ff13 	bl	800eb40 <dir_find>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800ed20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d106      	bne.n	800ed36 <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 800ed28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed30:	2b63      	cmp	r3, #99	@ 0x63
 800ed32:	d9e8      	bls.n	800ed06 <dir_register+0x46>
 800ed34:	e000      	b.n	800ed38 <dir_register+0x78>
			if (res != FR_OK) break;
 800ed36:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ed38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed3a:	2b64      	cmp	r3, #100	@ 0x64
 800ed3c:	d101      	bne.n	800ed42 <dir_register+0x82>
 800ed3e:	2307      	movs	r3, #7
 800ed40:	e0c5      	b.n	800eece <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ed42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ed46:	2b04      	cmp	r3, #4
 800ed48:	d002      	beq.n	800ed50 <dir_register+0x90>
 800ed4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ed4e:	e0be      	b.n	800eece <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800ed50:	6a3b      	ldr	r3, [r7, #32]
 800ed52:	330b      	adds	r3, #11
 800ed54:	7dfa      	ldrb	r2, [r7, #23]
 800ed56:	701a      	strb	r2, [r3, #0]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	69fa      	ldr	r2, [r7, #28]
 800ed5c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800ed60:	7dfb      	ldrb	r3, [r7, #23]
 800ed62:	f003 0302 	and.w	r3, r3, #2
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d014      	beq.n	800ed94 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed6e:	e002      	b.n	800ed76 <dir_register+0xb6>
 800ed70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed72:	3301      	adds	r3, #1
 800ed74:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed78:	005b      	lsls	r3, r3, #1
 800ed7a:	69fa      	ldr	r2, [r7, #28]
 800ed7c:	4413      	add	r3, r2
 800ed7e:	881b      	ldrh	r3, [r3, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d1f5      	bne.n	800ed70 <dir_register+0xb0>
		nent = (n + 25) / 13;
 800ed84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed86:	3319      	adds	r3, #25
 800ed88:	4a53      	ldr	r2, [pc, #332]	@ (800eed8 <dir_register+0x218>)
 800ed8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed8e:	089b      	lsrs	r3, r3, #2
 800ed90:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed92:	e001      	b.n	800ed98 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800ed94:	2301      	movs	r3, #1
 800ed96:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ed98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f7ff fca2 	bl	800e6e4 <dir_alloc>
 800eda0:	4603      	mov	r3, r0
 800eda2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800eda6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d153      	bne.n	800ee56 <dir_register+0x196>
 800edae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edb0:	3b01      	subs	r3, #1
 800edb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800edb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d04d      	beq.n	800ee56 <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800edc0:	461a      	mov	r2, r3
 800edc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edc4:	1ad3      	subs	r3, r2, r3
 800edc6:	4619      	mov	r1, r3
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f7ff fb00 	bl	800e3ce <dir_sdi>
 800edce:	4603      	mov	r3, r0
 800edd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800edd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d13c      	bne.n	800ee56 <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7ff fe8c 	bl	800eb00 <sum_sfn>
 800ede8:	4603      	mov	r3, r0
 800edea:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800edf8:	4619      	mov	r1, r3
 800edfa:	4610      	mov	r0, r2
 800edfc:	f7fe fef9 	bl	800dbf2 <move_window>
 800ee00:	4603      	mov	r3, r0
 800ee02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800ee06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d122      	bne.n	800ee54 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8d3 1214 	ldr.w	r1, [r3, #532]	@ 0x214
 800ee1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee1c:	b2da      	uxtb	r2, r3
 800ee1e:	7efb      	ldrb	r3, [r7, #27]
 800ee20:	f7ff fd6c 	bl	800e8fc <fit_lfn>
				dp->fs->wflag = 1;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = dir_next(dp, 0);	/* Next entry */
 800ee30:	2100      	movs	r1, #0
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f7ff fb5f 	bl	800e4f6 <dir_next>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800ee3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d107      	bne.n	800ee56 <dir_register+0x196>
 800ee46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee48:	3b01      	subs	r3, #1
 800ee4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d1cc      	bne.n	800edec <dir_register+0x12c>
 800ee52:	e000      	b.n	800ee56 <dir_register+0x196>
				if (res != FR_OK) break;
 800ee54:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800ee56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d135      	bne.n	800eeca <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ee6a:	4619      	mov	r1, r3
 800ee6c:	4610      	mov	r0, r2
 800ee6e:	f7fe fec0 	bl	800dbf2 <move_window>
 800ee72:	4603      	mov	r3, r0
 800ee74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ee78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d124      	bne.n	800eeca <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ee86:	2220      	movs	r2, #32
 800ee88:	2100      	movs	r1, #0
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fe fc70 	bl	800d770 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ee9c:	220b      	movs	r2, #11
 800ee9e:	4619      	mov	r1, r3
 800eea0:	f7fe fc48 	bl	800d734 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800eeaa:	330b      	adds	r3, #11
 800eeac:	781a      	ldrb	r2, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800eeb4:	330c      	adds	r3, #12
 800eeb6:	f002 0218 	and.w	r2, r2, #24
 800eeba:	b2d2      	uxtb	r2, r2
 800eebc:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800eec4:	2201      	movs	r2, #1
 800eec6:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 800eeca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3730      	adds	r7, #48	@ 0x30
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	4ec4ec4f 	.word	0x4ec4ec4f

0800eedc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b08a      	sub	sp, #40	@ 0x28
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	613b      	str	r3, [r7, #16]
 800eeec:	e002      	b.n	800eef4 <create_name+0x18>
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	3301      	adds	r3, #1
 800eef2:	613b      	str	r3, [r7, #16]
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	2b2f      	cmp	r3, #47	@ 0x2f
 800eefa:	d0f8      	beq.n	800eeee <create_name+0x12>
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	2b5c      	cmp	r3, #92	@ 0x5c
 800ef02:	d0f4      	beq.n	800eeee <create_name+0x12>
	lfn = dp->lfn;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800ef0a:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	617b      	str	r3, [r7, #20]
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	1c5a      	adds	r2, r3, #1
 800ef18:	61ba      	str	r2, [r7, #24]
 800ef1a:	693a      	ldr	r2, [r7, #16]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800ef22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef24:	2b1f      	cmp	r3, #31
 800ef26:	d92f      	bls.n	800ef88 <create_name+0xac>
 800ef28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef2a:	2b2f      	cmp	r3, #47	@ 0x2f
 800ef2c:	d02c      	beq.n	800ef88 <create_name+0xac>
 800ef2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef30:	2b5c      	cmp	r3, #92	@ 0x5c
 800ef32:	d029      	beq.n	800ef88 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	2bfe      	cmp	r3, #254	@ 0xfe
 800ef38:	d901      	bls.n	800ef3e <create_name+0x62>
			return FR_INVALID_NAME;
 800ef3a:	2306      	movs	r3, #6
 800ef3c:	e182      	b.n	800f244 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ef3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ef44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef46:	2101      	movs	r1, #1
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f001 ffe7 	bl	8010f1c <ff_convert>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ef52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d101      	bne.n	800ef5c <create_name+0x80>
 800ef58:	2306      	movs	r3, #6
 800ef5a:	e173      	b.n	800f244 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800ef5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef5e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ef60:	d809      	bhi.n	800ef76 <create_name+0x9a>
 800ef62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef64:	4619      	mov	r1, r3
 800ef66:	488e      	ldr	r0, [pc, #568]	@ (800f1a0 <create_name+0x2c4>)
 800ef68:	f7fe fc42 	bl	800d7f0 <chk_chr>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d001      	beq.n	800ef76 <create_name+0x9a>
			return FR_INVALID_NAME;
 800ef72:	2306      	movs	r3, #6
 800ef74:	e166      	b.n	800f244 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	1c5a      	adds	r2, r3, #1
 800ef7a:	617a      	str	r2, [r7, #20]
 800ef7c:	005b      	lsls	r3, r3, #1
 800ef7e:	68fa      	ldr	r2, [r7, #12]
 800ef80:	4413      	add	r3, r2
 800ef82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ef84:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ef86:	e7c5      	b.n	800ef14 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ef88:	693a      	ldr	r2, [r7, #16]
 800ef8a:	69bb      	ldr	r3, [r7, #24]
 800ef8c:	441a      	add	r2, r3
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800ef92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef94:	2b1f      	cmp	r3, #31
 800ef96:	d801      	bhi.n	800ef9c <create_name+0xc0>
 800ef98:	2304      	movs	r3, #4
 800ef9a:	e000      	b.n	800ef9e <create_name+0xc2>
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800efa2:	e011      	b.n	800efc8 <create_name+0xec>
		w = lfn[di - 1];
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800efaa:	3b01      	subs	r3, #1
 800efac:	005b      	lsls	r3, r3, #1
 800efae:	68fa      	ldr	r2, [r7, #12]
 800efb0:	4413      	add	r3, r2
 800efb2:	881b      	ldrh	r3, [r3, #0]
 800efb4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800efb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800efb8:	2b20      	cmp	r3, #32
 800efba:	d002      	beq.n	800efc2 <create_name+0xe6>
 800efbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800efbe:	2b2e      	cmp	r3, #46	@ 0x2e
 800efc0:	d106      	bne.n	800efd0 <create_name+0xf4>
		di--;
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	3b01      	subs	r3, #1
 800efc6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1ea      	bne.n	800efa4 <create_name+0xc8>
 800efce:	e000      	b.n	800efd2 <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 800efd0:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d101      	bne.n	800efdc <create_name+0x100>
 800efd8:	2306      	movs	r3, #6
 800efda:	e133      	b.n	800f244 <create_name+0x368>

	lfn[di] = 0;						/* LFN is created */
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	005b      	lsls	r3, r3, #1
 800efe0:	68fa      	ldr	r2, [r7, #12]
 800efe2:	4413      	add	r3, r2
 800efe4:	2200      	movs	r2, #0
 800efe6:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800efee:	220b      	movs	r2, #11
 800eff0:	2120      	movs	r1, #32
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7fe fbbc 	bl	800d770 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800eff8:	2300      	movs	r3, #0
 800effa:	61bb      	str	r3, [r7, #24]
 800effc:	e002      	b.n	800f004 <create_name+0x128>
 800effe:	69bb      	ldr	r3, [r7, #24]
 800f000:	3301      	adds	r3, #1
 800f002:	61bb      	str	r3, [r7, #24]
 800f004:	69bb      	ldr	r3, [r7, #24]
 800f006:	005b      	lsls	r3, r3, #1
 800f008:	68fa      	ldr	r2, [r7, #12]
 800f00a:	4413      	add	r3, r2
 800f00c:	881b      	ldrh	r3, [r3, #0]
 800f00e:	2b20      	cmp	r3, #32
 800f010:	d0f5      	beq.n	800effe <create_name+0x122>
 800f012:	69bb      	ldr	r3, [r7, #24]
 800f014:	005b      	lsls	r3, r3, #1
 800f016:	68fa      	ldr	r2, [r7, #12]
 800f018:	4413      	add	r3, r2
 800f01a:	881b      	ldrh	r3, [r3, #0]
 800f01c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f01e:	d0ee      	beq.n	800effe <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f020:	69bb      	ldr	r3, [r7, #24]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d009      	beq.n	800f03a <create_name+0x15e>
 800f026:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f02a:	f043 0303 	orr.w	r3, r3, #3
 800f02e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f032:	e002      	b.n	800f03a <create_name+0x15e>
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	3b01      	subs	r3, #1
 800f038:	617b      	str	r3, [r7, #20]
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d009      	beq.n	800f054 <create_name+0x178>
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f046:	3b01      	subs	r3, #1
 800f048:	005b      	lsls	r3, r3, #1
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	4413      	add	r3, r2
 800f04e:	881b      	ldrh	r3, [r3, #0]
 800f050:	2b2e      	cmp	r3, #46	@ 0x2e
 800f052:	d1ef      	bne.n	800f034 <create_name+0x158>

	b = i = 0; ni = 8;
 800f054:	2300      	movs	r3, #0
 800f056:	623b      	str	r3, [r7, #32]
 800f058:	2300      	movs	r3, #0
 800f05a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f05e:	2308      	movs	r3, #8
 800f060:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	1c5a      	adds	r2, r3, #1
 800f066:	61ba      	str	r2, [r7, #24]
 800f068:	005b      	lsls	r3, r3, #1
 800f06a:	68fa      	ldr	r2, [r7, #12]
 800f06c:	4413      	add	r3, r2
 800f06e:	881b      	ldrh	r3, [r3, #0]
 800f070:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f072:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f074:	2b00      	cmp	r3, #0
 800f076:	f000 8090 	beq.w	800f19a <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f07a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f07c:	2b20      	cmp	r3, #32
 800f07e:	d006      	beq.n	800f08e <create_name+0x1b2>
 800f080:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f082:	2b2e      	cmp	r3, #46	@ 0x2e
 800f084:	d10a      	bne.n	800f09c <create_name+0x1c0>
 800f086:	69ba      	ldr	r2, [r7, #24]
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d006      	beq.n	800f09c <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 800f08e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f092:	f043 0303 	orr.w	r3, r3, #3
 800f096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f09a:	e07d      	b.n	800f198 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f09c:	6a3a      	ldr	r2, [r7, #32]
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d203      	bcs.n	800f0ac <create_name+0x1d0>
 800f0a4:	69ba      	ldr	r2, [r7, #24]
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d123      	bne.n	800f0f4 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 800f0ac:	69fb      	ldr	r3, [r7, #28]
 800f0ae:	2b0b      	cmp	r3, #11
 800f0b0:	d106      	bne.n	800f0c0 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 800f0b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0b6:	f043 0303 	orr.w	r3, r3, #3
 800f0ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f0be:	e076      	b.n	800f1ae <create_name+0x2d2>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f0c0:	69ba      	ldr	r2, [r7, #24]
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d005      	beq.n	800f0d4 <create_name+0x1f8>
 800f0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0cc:	f043 0303 	orr.w	r3, r3, #3
 800f0d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800f0d4:	69ba      	ldr	r2, [r7, #24]
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d867      	bhi.n	800f1ac <create_name+0x2d0>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	61bb      	str	r3, [r7, #24]
 800f0e0:	2308      	movs	r3, #8
 800f0e2:	623b      	str	r3, [r7, #32]
 800f0e4:	230b      	movs	r3, #11
 800f0e6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f0e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f0ec:	009b      	lsls	r3, r3, #2
 800f0ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f0f2:	e051      	b.n	800f198 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f0f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f0f8:	d914      	bls.n	800f124 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f0fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0fc:	2100      	movs	r1, #0
 800f0fe:	4618      	mov	r0, r3
 800f100:	f001 ff0c 	bl	8010f1c <ff_convert>
 800f104:	4603      	mov	r3, r0
 800f106:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f108:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d004      	beq.n	800f118 <create_name+0x23c>
 800f10e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f110:	3b80      	subs	r3, #128	@ 0x80
 800f112:	4a24      	ldr	r2, [pc, #144]	@ (800f1a4 <create_name+0x2c8>)
 800f114:	5cd3      	ldrb	r3, [r2, r3]
 800f116:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f11c:	f043 0302 	orr.w	r3, r3, #2
 800f120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f124:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f126:	2b00      	cmp	r3, #0
 800f128:	d007      	beq.n	800f13a <create_name+0x25e>
 800f12a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f12c:	4619      	mov	r1, r3
 800f12e:	481e      	ldr	r0, [pc, #120]	@ (800f1a8 <create_name+0x2cc>)
 800f130:	f7fe fb5e 	bl	800d7f0 <chk_chr>
 800f134:	4603      	mov	r3, r0
 800f136:	2b00      	cmp	r3, #0
 800f138:	d008      	beq.n	800f14c <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f13a:	235f      	movs	r3, #95	@ 0x5f
 800f13c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800f13e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f142:	f043 0303 	orr.w	r3, r3, #3
 800f146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f14a:	e01b      	b.n	800f184 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f14c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f14e:	2b40      	cmp	r3, #64	@ 0x40
 800f150:	d909      	bls.n	800f166 <create_name+0x28a>
 800f152:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f154:	2b5a      	cmp	r3, #90	@ 0x5a
 800f156:	d806      	bhi.n	800f166 <create_name+0x28a>
					b |= 2;
 800f158:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f15c:	f043 0302 	orr.w	r3, r3, #2
 800f160:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f164:	e00e      	b.n	800f184 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f166:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f168:	2b60      	cmp	r3, #96	@ 0x60
 800f16a:	d90b      	bls.n	800f184 <create_name+0x2a8>
 800f16c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f16e:	2b7a      	cmp	r3, #122	@ 0x7a
 800f170:	d808      	bhi.n	800f184 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 800f172:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f176:	f043 0301 	orr.w	r3, r3, #1
 800f17a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f17e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f180:	3b20      	subs	r3, #32
 800f182:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800f18a:	6a3b      	ldr	r3, [r7, #32]
 800f18c:	1c59      	adds	r1, r3, #1
 800f18e:	6239      	str	r1, [r7, #32]
 800f190:	4413      	add	r3, r2
 800f192:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f194:	b2d2      	uxtb	r2, r2
 800f196:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800f198:	e763      	b.n	800f062 <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 800f19a:	bf00      	nop
 800f19c:	e007      	b.n	800f1ae <create_name+0x2d2>
 800f19e:	bf00      	nop
 800f1a0:	0801426c 	.word	0x0801426c
 800f1a4:	080143ac 	.word	0x080143ac
 800f1a8:	08014278 	.word	0x08014278
			if (si > di) break;			/* No extension */
 800f1ac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	2be5      	cmp	r3, #229	@ 0xe5
 800f1b8:	d104      	bne.n	800f1c4 <create_name+0x2e8>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f1c0:	2205      	movs	r2, #5
 800f1c2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	2b08      	cmp	r3, #8
 800f1c8:	d104      	bne.n	800f1d4 <create_name+0x2f8>
 800f1ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800f1d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f1d8:	f003 030c 	and.w	r3, r3, #12
 800f1dc:	2b0c      	cmp	r3, #12
 800f1de:	d005      	beq.n	800f1ec <create_name+0x310>
 800f1e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f1e4:	f003 0303 	and.w	r3, r3, #3
 800f1e8:	2b03      	cmp	r3, #3
 800f1ea:	d105      	bne.n	800f1f8 <create_name+0x31c>
		cf |= NS_LFN;
 800f1ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1f0:	f043 0302 	orr.w	r3, r3, #2
 800f1f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1fc:	f003 0302 	and.w	r3, r3, #2
 800f200:	2b00      	cmp	r3, #0
 800f202:	d117      	bne.n	800f234 <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f204:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f208:	f003 0303 	and.w	r3, r3, #3
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d105      	bne.n	800f21c <create_name+0x340>
 800f210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f214:	f043 0310 	orr.w	r3, r3, #16
 800f218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f21c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f220:	f003 030c 	and.w	r3, r3, #12
 800f224:	2b04      	cmp	r3, #4
 800f226:	d105      	bne.n	800f234 <create_name+0x358>
 800f228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f22c:	f043 0308 	orr.w	r3, r3, #8
 800f230:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f23a:	330b      	adds	r3, #11
 800f23c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800f240:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f242:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800f244:	4618      	mov	r0, r3
 800f246:	3728      	adds	r7, #40	@ 0x28
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	2b2f      	cmp	r3, #47	@ 0x2f
 800f25c:	d003      	beq.n	800f266 <follow_path+0x1a>
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	2b5c      	cmp	r3, #92	@ 0x5c
 800f264:	d102      	bne.n	800f26c <follow_path+0x20>
		path++;
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	3301      	adds	r3, #1
 800f26a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	2b1f      	cmp	r3, #31
 800f27a:	d80a      	bhi.n	800f292 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800f27c:	2100      	movs	r1, #0
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f7ff f8a5 	bl	800e3ce <dir_sdi>
 800f284:	4603      	mov	r3, r0
 800f286:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2200      	movs	r2, #0
 800f28c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800f290:	e045      	b.n	800f31e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f292:	463b      	mov	r3, r7
 800f294:	4619      	mov	r1, r3
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f7ff fe20 	bl	800eedc <create_name>
 800f29c:	4603      	mov	r3, r0
 800f29e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f2a0:	7bfb      	ldrb	r3, [r7, #15]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d136      	bne.n	800f314 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f7ff fc4a 	bl	800eb40 <dir_find>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f2b6:	7adb      	ldrb	r3, [r3, #11]
 800f2b8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800f2ba:	7bfb      	ldrb	r3, [r7, #15]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d00a      	beq.n	800f2d6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f2c0:	7bfb      	ldrb	r3, [r7, #15]
 800f2c2:	2b04      	cmp	r3, #4
 800f2c4:	d128      	bne.n	800f318 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f2c6:	7bbb      	ldrb	r3, [r7, #14]
 800f2c8:	f003 0304 	and.w	r3, r3, #4
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d123      	bne.n	800f318 <follow_path+0xcc>
 800f2d0:	2305      	movs	r3, #5
 800f2d2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800f2d4:	e020      	b.n	800f318 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f2d6:	7bbb      	ldrb	r3, [r7, #14]
 800f2d8:	f003 0304 	and.w	r3, r3, #4
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d11d      	bne.n	800f31c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f2e6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	330b      	adds	r3, #11
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	f003 0310 	and.w	r3, r3, #16
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d102      	bne.n	800f2fc <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800f2f6:	2305      	movs	r3, #5
 800f2f8:	73fb      	strb	r3, [r7, #15]
 800f2fa:	e010      	b.n	800f31e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f302:	68b9      	ldr	r1, [r7, #8]
 800f304:	4618      	mov	r0, r3
 800f306:	f7ff fa37 	bl	800e778 <ld_clust>
 800f30a:	4602      	mov	r2, r0
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f312:	e7be      	b.n	800f292 <follow_path+0x46>
			if (res != FR_OK) break;
 800f314:	bf00      	nop
 800f316:	e002      	b.n	800f31e <follow_path+0xd2>
				break;
 800f318:	bf00      	nop
 800f31a:	e000      	b.n	800f31e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f31c:	bf00      	nop
		}
	}

	return res;
 800f31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f320:	4618      	mov	r0, r3
 800f322:	3710      	adds	r7, #16
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f328:	b480      	push	{r7}
 800f32a:	b087      	sub	sp, #28
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f330:	f04f 33ff 	mov.w	r3, #4294967295
 800f334:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d031      	beq.n	800f3a2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	617b      	str	r3, [r7, #20]
 800f344:	e002      	b.n	800f34c <get_ldnumber+0x24>
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	3301      	adds	r3, #1
 800f34a:	617b      	str	r3, [r7, #20]
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	2b1f      	cmp	r3, #31
 800f352:	d903      	bls.n	800f35c <get_ldnumber+0x34>
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	2b3a      	cmp	r3, #58	@ 0x3a
 800f35a:	d1f4      	bne.n	800f346 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	2b3a      	cmp	r3, #58	@ 0x3a
 800f362:	d11c      	bne.n	800f39e <get_ldnumber+0x76>
			tp = *path;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	1c5a      	adds	r2, r3, #1
 800f36e:	60fa      	str	r2, [r7, #12]
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	3b30      	subs	r3, #48	@ 0x30
 800f374:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	2b09      	cmp	r3, #9
 800f37a:	d80e      	bhi.n	800f39a <get_ldnumber+0x72>
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	429a      	cmp	r2, r3
 800f382:	d10a      	bne.n	800f39a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d107      	bne.n	800f39a <get_ldnumber+0x72>
					vol = (int)i;
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	3301      	adds	r3, #1
 800f392:	617b      	str	r3, [r7, #20]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	697a      	ldr	r2, [r7, #20]
 800f398:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	e002      	b.n	800f3a4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f39e:	2300      	movs	r3, #0
 800f3a0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f3a2:	693b      	ldr	r3, [r7, #16]
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	371c      	adds	r7, #28
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bc80      	pop	{r7}
 800f3ac:	4770      	bx	lr
	...

0800f3b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3c8:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800f3cc:	6839      	ldr	r1, [r7, #0]
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7fe fc0f 	bl	800dbf2 <move_window>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d001      	beq.n	800f3de <check_fs+0x2e>
		return 3;
 800f3da:	2303      	movs	r3, #3
 800f3dc:	e04a      	b.n	800f474 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	021b      	lsls	r3, r3, #8
 800f3ea:	b21a      	sxth	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800f3f2:	b21b      	sxth	r3, r3
 800f3f4:	4313      	orrs	r3, r2
 800f3f6:	b21b      	sxth	r3, r3
 800f3f8:	4a20      	ldr	r2, [pc, #128]	@ (800f47c <check_fs+0xcc>)
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d001      	beq.n	800f402 <check_fs+0x52>
		return 2;
 800f3fe:	2302      	movs	r3, #2
 800f400:	e038      	b.n	800f474 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	3336      	adds	r3, #54	@ 0x36
 800f406:	3303      	adds	r3, #3
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	061a      	lsls	r2, r3, #24
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	3336      	adds	r3, #54	@ 0x36
 800f410:	3302      	adds	r3, #2
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	041b      	lsls	r3, r3, #16
 800f416:	431a      	orrs	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	3336      	adds	r3, #54	@ 0x36
 800f41c:	3301      	adds	r3, #1
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	021b      	lsls	r3, r3, #8
 800f422:	4313      	orrs	r3, r2
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 800f42a:	4313      	orrs	r3, r2
 800f42c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f430:	4a13      	ldr	r2, [pc, #76]	@ (800f480 <check_fs+0xd0>)
 800f432:	4293      	cmp	r3, r2
 800f434:	d101      	bne.n	800f43a <check_fs+0x8a>
		return 0;
 800f436:	2300      	movs	r3, #0
 800f438:	e01c      	b.n	800f474 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	3352      	adds	r3, #82	@ 0x52
 800f43e:	3303      	adds	r3, #3
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	061a      	lsls	r2, r3, #24
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	3352      	adds	r3, #82	@ 0x52
 800f448:	3302      	adds	r3, #2
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	041b      	lsls	r3, r3, #16
 800f44e:	431a      	orrs	r2, r3
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	3352      	adds	r3, #82	@ 0x52
 800f454:	3301      	adds	r3, #1
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	021b      	lsls	r3, r3, #8
 800f45a:	4313      	orrs	r3, r2
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800f462:	4313      	orrs	r3, r2
 800f464:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f468:	4a05      	ldr	r2, [pc, #20]	@ (800f480 <check_fs+0xd0>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d101      	bne.n	800f472 <check_fs+0xc2>
		return 0;
 800f46e:	2300      	movs	r3, #0
 800f470:	e000      	b.n	800f474 <check_fs+0xc4>

	return 1;
 800f472:	2301      	movs	r3, #1
}
 800f474:	4618      	mov	r0, r3
 800f476:	3708      	adds	r7, #8
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	ffffaa55 	.word	0xffffaa55
 800f480:	00544146 	.word	0x00544146

0800f484 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b096      	sub	sp, #88	@ 0x58
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	4613      	mov	r3, r2
 800f490:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2200      	movs	r2, #0
 800f496:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f498:	68b8      	ldr	r0, [r7, #8]
 800f49a:	f7ff ff45 	bl	800f328 <get_ldnumber>
 800f49e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f4a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	da01      	bge.n	800f4aa <find_volume+0x26>
 800f4a6:	230b      	movs	r3, #11
 800f4a8:	e2b0      	b.n	800fa0c <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f4aa:	4aa1      	ldr	r2, [pc, #644]	@ (800f730 <find_volume+0x2ac>)
 800f4ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d101      	bne.n	800f4be <find_volume+0x3a>
 800f4ba:	230c      	movs	r3, #12
 800f4bc:	e2a6      	b.n	800fa0c <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 800f4be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f4c0:	f7fe f9b0 	bl	800d824 <lock_fs>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d101      	bne.n	800f4ce <find_volume+0x4a>
 800f4ca:	230f      	movs	r3, #15
 800f4cc:	e29e      	b.n	800fa0c <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f4d2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800f4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d01b      	beq.n	800f516 <find_volume+0x92>
		stat = disk_status(fs->drv);
 800f4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e0:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7fe f887 	bl	800d5f8 <disk_status>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f4f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f4f4:	f003 0301 	and.w	r3, r3, #1
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d10c      	bne.n	800f516 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800f4fc:	79fb      	ldrb	r3, [r7, #7]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d007      	beq.n	800f512 <find_volume+0x8e>
 800f502:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f506:	f003 0304 	and.w	r3, r3, #4
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d001      	beq.n	800f512 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 800f50e:	230a      	movs	r3, #10
 800f510:	e27c      	b.n	800fa0c <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 800f512:	2300      	movs	r3, #0
 800f514:	e27a      	b.n	800fa0c <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f518:	2200      	movs	r2, #0
 800f51a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f520:	b2da      	uxtb	r2, r3
 800f522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f524:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f52a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fe f87c 	bl	800d62c <disk_initialize>
 800f534:	4603      	mov	r3, r0
 800f536:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800f53a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f53e:	f003 0301 	and.w	r3, r3, #1
 800f542:	2b00      	cmp	r3, #0
 800f544:	d001      	beq.n	800f54a <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f546:	2303      	movs	r3, #3
 800f548:	e260      	b.n	800fa0c <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800f54a:	79fb      	ldrb	r3, [r7, #7]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d007      	beq.n	800f560 <find_volume+0xdc>
 800f550:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f554:	f003 0304 	and.w	r3, r3, #4
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d001      	beq.n	800f560 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800f55c:	230a      	movs	r3, #10
 800f55e:	e255      	b.n	800fa0c <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800f560:	2300      	movs	r3, #0
 800f562:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800f564:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f566:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f568:	f7ff ff22 	bl	800f3b0 <check_fs>
 800f56c:	4603      	mov	r3, r0
 800f56e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800f572:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f576:	2b01      	cmp	r3, #1
 800f578:	d153      	bne.n	800f622 <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800f57a:	2300      	movs	r3, #0
 800f57c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f57e:	e028      	b.n	800f5d2 <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800f580:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f584:	011b      	lsls	r3, r3, #4
 800f586:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f58a:	4413      	add	r3, r2
 800f58c:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800f58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f590:	3304      	adds	r3, #4
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d012      	beq.n	800f5be <find_volume+0x13a>
 800f598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f59a:	330b      	adds	r3, #11
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	061a      	lsls	r2, r3, #24
 800f5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a2:	330a      	adds	r3, #10
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	041b      	lsls	r3, r3, #16
 800f5a8:	431a      	orrs	r2, r3
 800f5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5ac:	3309      	adds	r3, #9
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	021b      	lsls	r3, r3, #8
 800f5b2:	4313      	orrs	r3, r2
 800f5b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5b6:	3208      	adds	r2, #8
 800f5b8:	7812      	ldrb	r2, [r2, #0]
 800f5ba:	431a      	orrs	r2, r3
 800f5bc:	e000      	b.n	800f5c0 <find_volume+0x13c>
 800f5be:	2200      	movs	r2, #0
 800f5c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	3358      	adds	r3, #88	@ 0x58
 800f5c6:	443b      	add	r3, r7
 800f5c8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800f5cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800f5d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5d4:	2b03      	cmp	r3, #3
 800f5d6:	d9d3      	bls.n	800f580 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800f5d8:	2300      	movs	r3, #0
 800f5da:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f5dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d002      	beq.n	800f5e8 <find_volume+0x164>
 800f5e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5e4:	3b01      	subs	r3, #1
 800f5e6:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800f5e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5ea:	009b      	lsls	r3, r3, #2
 800f5ec:	3358      	adds	r3, #88	@ 0x58
 800f5ee:	443b      	add	r3, r7
 800f5f0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f5f4:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800f5f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d005      	beq.n	800f608 <find_volume+0x184>
 800f5fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f5fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f600:	f7ff fed6 	bl	800f3b0 <check_fs>
 800f604:	4603      	mov	r3, r0
 800f606:	e000      	b.n	800f60a <find_volume+0x186>
 800f608:	2302      	movs	r3, #2
 800f60a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800f60e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f612:	2b00      	cmp	r3, #0
 800f614:	d005      	beq.n	800f622 <find_volume+0x19e>
 800f616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f618:	3301      	adds	r3, #1
 800f61a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f61c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f61e:	2b03      	cmp	r3, #3
 800f620:	d9e2      	bls.n	800f5e8 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f622:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f626:	2b03      	cmp	r3, #3
 800f628:	d101      	bne.n	800f62e <find_volume+0x1aa>
 800f62a:	2301      	movs	r3, #1
 800f62c:	e1ee      	b.n	800fa0c <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800f62e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f632:	2b00      	cmp	r3, #0
 800f634:	d001      	beq.n	800f63a <find_volume+0x1b6>
 800f636:	230d      	movs	r3, #13
 800f638:	e1e8      	b.n	800fa0c <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f63c:	7b1b      	ldrb	r3, [r3, #12]
 800f63e:	021b      	lsls	r3, r3, #8
 800f640:	b21a      	sxth	r2, r3
 800f642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f644:	7adb      	ldrb	r3, [r3, #11]
 800f646:	b21b      	sxth	r3, r3
 800f648:	4313      	orrs	r3, r2
 800f64a:	b21b      	sxth	r3, r3
 800f64c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f650:	d001      	beq.n	800f656 <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 800f652:	230d      	movs	r3, #13
 800f654:	e1da      	b.n	800fa0c <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800f656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f658:	7ddb      	ldrb	r3, [r3, #23]
 800f65a:	021b      	lsls	r3, r3, #8
 800f65c:	b21a      	sxth	r2, r3
 800f65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f660:	7d9b      	ldrb	r3, [r3, #22]
 800f662:	b21b      	sxth	r3, r3
 800f664:	4313      	orrs	r3, r2
 800f666:	b21b      	sxth	r3, r3
 800f668:	b29b      	uxth	r3, r3
 800f66a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800f66c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d112      	bne.n	800f698 <find_volume+0x214>
 800f672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f674:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800f678:	061a      	lsls	r2, r3, #24
 800f67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f67c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800f680:	041b      	lsls	r3, r3, #16
 800f682:	431a      	orrs	r2, r3
 800f684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f686:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800f68a:	021b      	lsls	r3, r3, #8
 800f68c:	4313      	orrs	r3, r2
 800f68e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f690:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800f694:	4313      	orrs	r3, r2
 800f696:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 800f698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f69a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f69c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800f6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6a2:	7c1a      	ldrb	r2, [r3, #16]
 800f6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6a6:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800f6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ac:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800f6b0:	2b01      	cmp	r3, #1
 800f6b2:	d006      	beq.n	800f6c2 <find_volume+0x23e>
 800f6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6b6:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800f6ba:	2b02      	cmp	r3, #2
 800f6bc:	d001      	beq.n	800f6c2 <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 800f6be:	230d      	movs	r3, #13
 800f6c0:	e1a4      	b.n	800fa0c <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800f6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6c4:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f6cc:	fb02 f303 	mul.w	r3, r2, r3
 800f6d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800f6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6d4:	7b5a      	ldrb	r2, [r3, #13]
 800f6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6d8:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800f6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6de:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d00a      	beq.n	800f6fc <find_volume+0x278>
 800f6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6e8:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f0:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f6f4:	3b01      	subs	r3, #1
 800f6f6:	4013      	ands	r3, r2
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d001      	beq.n	800f700 <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 800f6fc:	230d      	movs	r3, #13
 800f6fe:	e185      	b.n	800fa0c <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800f700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f702:	7c9b      	ldrb	r3, [r3, #18]
 800f704:	021b      	lsls	r3, r3, #8
 800f706:	b21a      	sxth	r2, r3
 800f708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f70a:	7c5b      	ldrb	r3, [r3, #17]
 800f70c:	b21b      	sxth	r3, r3
 800f70e:	4313      	orrs	r3, r2
 800f710:	b21b      	sxth	r3, r3
 800f712:	b29a      	uxth	r2, r3
 800f714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f716:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800f71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f71c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800f720:	f003 030f 	and.w	r3, r3, #15
 800f724:	b29b      	uxth	r3, r3
 800f726:	2b00      	cmp	r3, #0
 800f728:	d004      	beq.n	800f734 <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 800f72a:	230d      	movs	r3, #13
 800f72c:	e16e      	b.n	800fa0c <find_volume+0x588>
 800f72e:	bf00      	nop
 800f730:	20001298 	.word	0x20001298

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800f734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f736:	7d1b      	ldrb	r3, [r3, #20]
 800f738:	021b      	lsls	r3, r3, #8
 800f73a:	b21a      	sxth	r2, r3
 800f73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f73e:	7cdb      	ldrb	r3, [r3, #19]
 800f740:	b21b      	sxth	r3, r3
 800f742:	4313      	orrs	r3, r2
 800f744:	b21b      	sxth	r3, r3
 800f746:	b29b      	uxth	r3, r3
 800f748:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800f74a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d112      	bne.n	800f776 <find_volume+0x2f2>
 800f750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f752:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800f756:	061a      	lsls	r2, r3, #24
 800f758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f75a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800f75e:	041b      	lsls	r3, r3, #16
 800f760:	431a      	orrs	r2, r3
 800f762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f764:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800f768:	021b      	lsls	r3, r3, #8
 800f76a:	4313      	orrs	r3, r2
 800f76c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f76e:	f892 2020 	ldrb.w	r2, [r2, #32]
 800f772:	4313      	orrs	r3, r2
 800f774:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800f776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f778:	7bdb      	ldrb	r3, [r3, #15]
 800f77a:	021b      	lsls	r3, r3, #8
 800f77c:	b21a      	sxth	r2, r3
 800f77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f780:	7b9b      	ldrb	r3, [r3, #14]
 800f782:	b21b      	sxth	r3, r3
 800f784:	4313      	orrs	r3, r2
 800f786:	b21b      	sxth	r3, r3
 800f788:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800f78a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d101      	bne.n	800f794 <find_volume+0x310>
 800f790:	230d      	movs	r3, #13
 800f792:	e13b      	b.n	800fa0c <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800f794:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f798:	4413      	add	r3, r2
 800f79a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f79c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 800f7a0:	0912      	lsrs	r2, r2, #4
 800f7a2:	b292      	uxth	r2, r2
 800f7a4:	4413      	add	r3, r2
 800f7a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f7a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d201      	bcs.n	800f7b4 <find_volume+0x330>
 800f7b0:	230d      	movs	r3, #13
 800f7b2:	e12b      	b.n	800fa0c <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800f7b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7b8:	1ad3      	subs	r3, r2, r3
 800f7ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f7bc:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800f7c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7c4:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800f7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d101      	bne.n	800f7d0 <find_volume+0x34c>
 800f7cc:	230d      	movs	r3, #13
 800f7ce:	e11d      	b.n	800fa0c <find_volume+0x588>
	fmt = FS_FAT12;
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800f7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d902      	bls.n	800f7e6 <find_volume+0x362>
 800f7e0:	2302      	movs	r3, #2
 800f7e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800f7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d902      	bls.n	800f7f6 <find_volume+0x372>
 800f7f0:	2303      	movs	r3, #3
 800f7f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800f7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f8:	1c9a      	adds	r2, r3, #2
 800f7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7fc:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
	fs->volbase = bsect;								/* Volume start sector */
 800f800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f802:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f804:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800f808:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f80a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f80c:	441a      	add	r2, r3
 800f80e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f810:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 800f814:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f818:	441a      	add	r2, r3
 800f81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f81c:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (fmt == FS_FAT32) {
 800f820:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f824:	2b03      	cmp	r3, #3
 800f826:	d121      	bne.n	800f86c <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800f828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f82a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d001      	beq.n	800f836 <find_volume+0x3b2>
 800f832:	230d      	movs	r3, #13
 800f834:	e0ea      	b.n	800fa0c <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800f836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f838:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f83c:	061a      	lsls	r2, r3, #24
 800f83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f840:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f844:	041b      	lsls	r3, r3, #16
 800f846:	431a      	orrs	r2, r3
 800f848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f84a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f84e:	021b      	lsls	r3, r3, #8
 800f850:	4313      	orrs	r3, r2
 800f852:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f854:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 800f858:	431a      	orrs	r2, r3
 800f85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f85c:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800f860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f862:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f866:	009b      	lsls	r3, r3, #2
 800f868:	647b      	str	r3, [r7, #68]	@ 0x44
 800f86a:	e025      	b.n	800f8b8 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800f86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f86e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800f872:	2b00      	cmp	r3, #0
 800f874:	d101      	bne.n	800f87a <find_volume+0x3f6>
 800f876:	230d      	movs	r3, #13
 800f878:	e0c8      	b.n	800fa0c <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800f87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f87c:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f882:	441a      	add	r2, r3
 800f884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f886:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f88a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f88e:	2b02      	cmp	r3, #2
 800f890:	d104      	bne.n	800f89c <find_volume+0x418>
 800f892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f894:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f898:	005b      	lsls	r3, r3, #1
 800f89a:	e00c      	b.n	800f8b6 <find_volume+0x432>
 800f89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f89e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800f8a2:	4613      	mov	r3, r2
 800f8a4:	005b      	lsls	r3, r3, #1
 800f8a6:	4413      	add	r3, r2
 800f8a8:	085a      	lsrs	r2, r3, #1
 800f8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ac:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f8b0:	f003 0301 	and.w	r3, r3, #1
 800f8b4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800f8b6:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800f8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800f8be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8c0:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f8c4:	0a5b      	lsrs	r3, r3, #9
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d201      	bcs.n	800f8ce <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 800f8ca:	230d      	movs	r3, #13
 800f8cc:	e09e      	b.n	800fa0c <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800f8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800f8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8da:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800f8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8e0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800f8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8e6:	2280      	movs	r2, #128	@ 0x80
 800f8e8:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800f8ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f8f0:	2b03      	cmp	r3, #3
 800f8f2:	d177      	bne.n	800f9e4 <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800f8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f8fa:	021b      	lsls	r3, r3, #8
 800f8fc:	b21a      	sxth	r2, r3
 800f8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f900:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f904:	b21b      	sxth	r3, r3
 800f906:	4313      	orrs	r3, r2
 800f908:	b21b      	sxth	r3, r3
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d16a      	bne.n	800f9e4 <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 800f90e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f910:	3301      	adds	r3, #1
 800f912:	4619      	mov	r1, r3
 800f914:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f916:	f7fe f96c 	bl	800dbf2 <move_window>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d161      	bne.n	800f9e4 <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 800f920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f922:	2200      	movs	r2, #0
 800f924:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f92a:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 800f92e:	021b      	lsls	r3, r3, #8
 800f930:	b21a      	sxth	r2, r3
 800f932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f934:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800f938:	b21b      	sxth	r3, r3
 800f93a:	4313      	orrs	r3, r2
 800f93c:	b21b      	sxth	r3, r3
 800f93e:	4a35      	ldr	r2, [pc, #212]	@ (800fa14 <find_volume+0x590>)
 800f940:	4293      	cmp	r3, r2
 800f942:	d14f      	bne.n	800f9e4 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800f944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f946:	78db      	ldrb	r3, [r3, #3]
 800f948:	061a      	lsls	r2, r3, #24
 800f94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f94c:	789b      	ldrb	r3, [r3, #2]
 800f94e:	041b      	lsls	r3, r3, #16
 800f950:	431a      	orrs	r2, r3
 800f952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f954:	785b      	ldrb	r3, [r3, #1]
 800f956:	021b      	lsls	r3, r3, #8
 800f958:	4313      	orrs	r3, r2
 800f95a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f95c:	7812      	ldrb	r2, [r2, #0]
 800f95e:	4313      	orrs	r3, r2
 800f960:	4a2d      	ldr	r2, [pc, #180]	@ (800fa18 <find_volume+0x594>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d13e      	bne.n	800f9e4 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800f966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f968:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 800f96c:	061a      	lsls	r2, r3, #24
 800f96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f970:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 800f974:	041b      	lsls	r3, r3, #16
 800f976:	431a      	orrs	r2, r3
 800f978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f97a:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 800f97e:	021b      	lsls	r3, r3, #8
 800f980:	4313      	orrs	r3, r2
 800f982:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f984:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 800f988:	4313      	orrs	r3, r2
 800f98a:	4a24      	ldr	r2, [pc, #144]	@ (800fa1c <find_volume+0x598>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	d129      	bne.n	800f9e4 <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800f990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f992:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800f996:	061a      	lsls	r2, r3, #24
 800f998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f99a:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 800f99e:	041b      	lsls	r3, r3, #16
 800f9a0:	431a      	orrs	r2, r3
 800f9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9a4:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 800f9a8:	021b      	lsls	r3, r3, #8
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9ae:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800f9b2:	431a      	orrs	r2, r3
 800f9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800f9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9bc:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800f9c0:	061a      	lsls	r2, r3, #24
 800f9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9c4:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 800f9c8:	041b      	lsls	r3, r3, #16
 800f9ca:	431a      	orrs	r2, r3
 800f9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ce:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800f9d2:	021b      	lsls	r3, r3, #8
 800f9d4:	4313      	orrs	r3, r2
 800f9d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9d8:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 800f9dc:	431a      	orrs	r2, r3
 800f9de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9e0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800f9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9e6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f9ea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800f9ee:	4b0c      	ldr	r3, [pc, #48]	@ (800fa20 <find_volume+0x59c>)
 800f9f0:	881b      	ldrh	r3, [r3, #0]
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	b29a      	uxth	r2, r3
 800f9f6:	4b0a      	ldr	r3, [pc, #40]	@ (800fa20 <find_volume+0x59c>)
 800f9f8:	801a      	strh	r2, [r3, #0]
 800f9fa:	4b09      	ldr	r3, [pc, #36]	@ (800fa20 <find_volume+0x59c>)
 800f9fc:	881a      	ldrh	r2, [r3, #0]
 800f9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa00:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800fa04:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fa06:	f7fe f881 	bl	800db0c <clear_lock>
#endif

	return FR_OK;
 800fa0a:	2300      	movs	r3, #0
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3758      	adds	r7, #88	@ 0x58
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	ffffaa55 	.word	0xffffaa55
 800fa18:	41615252 	.word	0x41615252
 800fa1c:	61417272 	.word	0x61417272
 800fa20:	2000129c 	.word	0x2000129c

0800fa24 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b084      	sub	sp, #16
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d022      	beq.n	800fa7c <validate+0x58>
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d01d      	beq.n	800fa7c <validate+0x58>
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fa46:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d016      	beq.n	800fa7c <validate+0x58>
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fa54:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d10c      	bne.n	800fa7c <validate+0x58>
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fa68:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7fd fdc3 	bl	800d5f8 <disk_status>
 800fa72:	4603      	mov	r3, r0
 800fa74:	f003 0301 	and.w	r3, r3, #1
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d001      	beq.n	800fa80 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800fa7c:	2309      	movs	r3, #9
 800fa7e:	e00b      	b.n	800fa98 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7fd fecc 	bl	800d824 <lock_fs>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d101      	bne.n	800fa96 <validate+0x72>
 800fa92:	230f      	movs	r3, #15
 800fa94:	e000      	b.n	800fa98 <validate+0x74>

	return FR_OK;
 800fa96:	2300      	movs	r3, #0
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3710      	adds	r7, #16
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b088      	sub	sp, #32
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	60b9      	str	r1, [r7, #8]
 800faaa:	4613      	mov	r3, r2
 800faac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800fab2:	f107 0310 	add.w	r3, r7, #16
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7ff fc36 	bl	800f328 <get_ldnumber>
 800fabc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fabe:	69fb      	ldr	r3, [r7, #28]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	da01      	bge.n	800fac8 <f_mount+0x28>
 800fac4:	230b      	movs	r3, #11
 800fac6:	e04c      	b.n	800fb62 <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fac8:	4a28      	ldr	r2, [pc, #160]	@ (800fb6c <f_mount+0xcc>)
 800faca:	69fb      	ldr	r3, [r7, #28]
 800facc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fad0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fad2:	69bb      	ldr	r3, [r7, #24]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d011      	beq.n	800fafc <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 800fad8:	69b8      	ldr	r0, [r7, #24]
 800fada:	f7fe f817 	bl	800db0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800fade:	69bb      	ldr	r3, [r7, #24]
 800fae0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800fae4:	4618      	mov	r0, r3
 800fae6:	f001 faa1 	bl	801102c <ff_del_syncobj>
 800faea:	4603      	mov	r3, r0
 800faec:	2b00      	cmp	r3, #0
 800faee:	d101      	bne.n	800faf4 <f_mount+0x54>
 800faf0:	2302      	movs	r3, #2
 800faf2:	e036      	b.n	800fb62 <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800faf4:	69bb      	ldr	r3, [r7, #24]
 800faf6:	2200      	movs	r2, #0
 800faf8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d011      	beq.n	800fb26 <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	2200      	movs	r2, #0
 800fb06:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	b2da      	uxtb	r2, r3
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 800fb14:	4619      	mov	r1, r3
 800fb16:	4610      	mov	r0, r2
 800fb18:	f001 fa68 	bl	8010fec <ff_cre_syncobj>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d101      	bne.n	800fb26 <f_mount+0x86>
 800fb22:	2302      	movs	r3, #2
 800fb24:	e01d      	b.n	800fb62 <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fb26:	68fa      	ldr	r2, [r7, #12]
 800fb28:	4910      	ldr	r1, [pc, #64]	@ (800fb6c <f_mount+0xcc>)
 800fb2a:	69fb      	ldr	r3, [r7, #28]
 800fb2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d002      	beq.n	800fb3c <f_mount+0x9c>
 800fb36:	79fb      	ldrb	r3, [r7, #7]
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d001      	beq.n	800fb40 <f_mount+0xa0>
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	e010      	b.n	800fb62 <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800fb40:	f107 0108 	add.w	r1, r7, #8
 800fb44:	f107 030c 	add.w	r3, r7, #12
 800fb48:	2200      	movs	r2, #0
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7ff fc9a 	bl	800f484 <find_volume>
 800fb50:	4603      	mov	r3, r0
 800fb52:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	7dfa      	ldrb	r2, [r7, #23]
 800fb58:	4611      	mov	r1, r2
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7fd fe71 	bl	800d842 <unlock_fs>
 800fb60:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3720      	adds	r7, #32
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
 800fb6a:	bf00      	nop
 800fb6c:	20001298 	.word	0x20001298

0800fb70 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fb7c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800fb80:	6018      	str	r0, [r3, #0]
 800fb82:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fb86:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 800fb8a:	6019      	str	r1, [r3, #0]
 800fb8c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fb90:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fb94:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800fb96:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fb9a:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d101      	bne.n	800fba8 <f_open+0x38>
 800fba4:	2309      	movs	r3, #9
 800fba6:	e267      	b.n	8010078 <f_open+0x508>
	fp->fs = 0;			/* Clear file object */
 800fba8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fbac:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800fbb8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fbbc:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fbc0:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800fbc4:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 800fbc8:	7812      	ldrb	r2, [r2, #0]
 800fbca:	f002 021f 	and.w	r2, r2, #31
 800fbce:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800fbd0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fbd4:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	f023 0301 	bic.w	r3, r3, #1
 800fbde:	b2da      	uxtb	r2, r3
 800fbe0:	f107 0108 	add.w	r1, r7, #8
 800fbe4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800fbe8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800fbec:	4618      	mov	r0, r3
 800fbee:	f7ff fc49 	bl	800f484 <find_volume>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800fbf8:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f040 822d 	bne.w	801005c <f_open+0x4ec>
		INIT_BUF(dj);
 800fc02:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fc06:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fc0a:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 800fc0e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 800fc12:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fc16:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fc1a:	f107 0214 	add.w	r2, r7, #20
 800fc1e:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 800fc22:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fc26:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 800fc2a:	681a      	ldr	r2, [r3, #0]
 800fc2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800fc30:	4611      	mov	r1, r2
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7ff fb0a 	bl	800f24c <follow_path>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
		dir = dj.dir;
 800fc3e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fc42:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fc46:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fc4a:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fc4e:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d11b      	bne.n	800fc8e <f_open+0x11e>
			if (!dir)	/* Default directory itself */
 800fc56:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d103      	bne.n	800fc66 <f_open+0xf6>
				res = FR_INVALID_NAME;
 800fc5e:	2306      	movs	r3, #6
 800fc60:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800fc64:	e013      	b.n	800fc8e <f_open+0x11e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc66:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fc6a:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	bf8c      	ite	hi
 800fc74:	2301      	movhi	r3, #1
 800fc76:	2300      	movls	r3, #0
 800fc78:	b2db      	uxtb	r3, r3
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800fc80:	4611      	mov	r1, r2
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7fd fdfc 	bl	800d880 <chk_lock>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fc8e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fc92:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	f003 031c 	and.w	r3, r3, #28
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	f000 80e6 	beq.w	800fe6e <f_open+0x2fe>
			if (res != FR_OK) {					/* No file, create new */
 800fca2:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d027      	beq.n	800fcfa <f_open+0x18a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800fcaa:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800fcae:	2b04      	cmp	r3, #4
 800fcb0:	d10e      	bne.n	800fcd0 <f_open+0x160>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fcb2:	f7fd fe51 	bl	800d958 <enq_lock>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d006      	beq.n	800fcca <f_open+0x15a>
 800fcbc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7fe fffd 	bl	800ecc0 <dir_register>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	e000      	b.n	800fccc <f_open+0x15c>
 800fcca:	2312      	movs	r3, #18
 800fccc:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fcd0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fcd4:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fcd8:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800fcdc:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 800fce0:	7812      	ldrb	r2, [r2, #0]
 800fce2:	f042 0208 	orr.w	r2, r2, #8
 800fce6:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800fce8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fcec:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fcf0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fcf4:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
 800fcf8:	e017      	b.n	800fd2a <f_open+0x1ba>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fcfa:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fcfe:	330b      	adds	r3, #11
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	f003 0311 	and.w	r3, r3, #17
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d003      	beq.n	800fd12 <f_open+0x1a2>
					res = FR_DENIED;
 800fd0a:	2307      	movs	r3, #7
 800fd0c:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800fd10:	e00b      	b.n	800fd2a <f_open+0x1ba>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800fd12:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fd16:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fd1a:	781b      	ldrb	r3, [r3, #0]
 800fd1c:	f003 0304 	and.w	r3, r3, #4
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d002      	beq.n	800fd2a <f_open+0x1ba>
						res = FR_EXIST;
 800fd24:	2308      	movs	r3, #8
 800fd26:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fd2a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	f040 80c1 	bne.w	800feb6 <f_open+0x346>
 800fd34:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fd38:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	f003 0308 	and.w	r3, r3, #8
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	f000 80b7 	beq.w	800feb6 <f_open+0x346>
				dw = GET_FATTIME();				/* Created time */
 800fd48:	f7fd fbd0 	bl	800d4ec <get_fattime>
 800fd4c:	f8c7 044c 	str.w	r0, [r7, #1100]	@ 0x44c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800fd50:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fd54:	330e      	adds	r3, #14
 800fd56:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 800fd5a:	b2d2      	uxtb	r2, r2
 800fd5c:	701a      	strb	r2, [r3, #0]
 800fd5e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	0a1b      	lsrs	r3, r3, #8
 800fd66:	b29a      	uxth	r2, r3
 800fd68:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fd6c:	330f      	adds	r3, #15
 800fd6e:	b2d2      	uxtb	r2, r2
 800fd70:	701a      	strb	r2, [r3, #0]
 800fd72:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800fd76:	0c1a      	lsrs	r2, r3, #16
 800fd78:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fd7c:	3310      	adds	r3, #16
 800fd7e:	b2d2      	uxtb	r2, r2
 800fd80:	701a      	strb	r2, [r3, #0]
 800fd82:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800fd86:	0e1a      	lsrs	r2, r3, #24
 800fd88:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fd8c:	3311      	adds	r3, #17
 800fd8e:	b2d2      	uxtb	r2, r2
 800fd90:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800fd92:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fd96:	330b      	adds	r3, #11
 800fd98:	2200      	movs	r2, #0
 800fd9a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800fd9c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fda0:	331c      	adds	r3, #28
 800fda2:	2200      	movs	r2, #0
 800fda4:	701a      	strb	r2, [r3, #0]
 800fda6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fdaa:	331d      	adds	r3, #29
 800fdac:	2200      	movs	r2, #0
 800fdae:	701a      	strb	r2, [r3, #0]
 800fdb0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fdb4:	331e      	adds	r3, #30
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	701a      	strb	r2, [r3, #0]
 800fdba:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fdbe:	331f      	adds	r3, #31
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800fdc4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fdc8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fdcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fdd0:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7fe fccf 	bl	800e778 <ld_clust>
 800fdda:	f8c7 0448 	str.w	r0, [r7, #1096]	@ 0x448
				st_clust(dir, 0);				/* cluster = 0 */
 800fdde:	2100      	movs	r1, #0
 800fde0:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 800fde4:	f7fe fcf5 	bl	800e7d2 <st_clust>
				dj.fs->wflag = 1;
 800fde8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fdec:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fdf0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800fdfa:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d059      	beq.n	800feb6 <f_open+0x346>
					dw = dj.fs->winsect;
 800fe02:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fe06:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fe0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fe0e:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800fe12:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
					res = remove_chain(dj.fs, cl);
 800fe16:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fe1a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fe1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fe22:	f8d7 1448 	ldr.w	r1, [r7, #1096]	@ 0x448
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7fe f9a6 	bl	800e178 <remove_chain>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
					if (res == FR_OK) {
 800fe32:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d13d      	bne.n	800feb6 <f_open+0x346>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800fe3a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fe3e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fe42:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fe46:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 800fe4a:	3a01      	subs	r2, #1
 800fe4c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
						res = move_window(dj.fs, dw);
 800fe50:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fe54:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fe58:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fe5c:	f8d7 144c 	ldr.w	r1, [r7, #1100]	@ 0x44c
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7fd fec6 	bl	800dbf2 <move_window>
 800fe66:	4603      	mov	r3, r0
 800fe68:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800fe6c:	e023      	b.n	800feb6 <f_open+0x346>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800fe6e:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d11f      	bne.n	800feb6 <f_open+0x346>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800fe76:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fe7a:	330b      	adds	r3, #11
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	f003 0310 	and.w	r3, r3, #16
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d003      	beq.n	800fe8e <f_open+0x31e>
					res = FR_NO_FILE;
 800fe86:	2304      	movs	r3, #4
 800fe88:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800fe8c:	e013      	b.n	800feb6 <f_open+0x346>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800fe8e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fe92:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	f003 0302 	and.w	r3, r3, #2
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d00a      	beq.n	800feb6 <f_open+0x346>
 800fea0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fea4:	330b      	adds	r3, #11
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	f003 0301 	and.w	r3, r3, #1
 800feac:	2b00      	cmp	r3, #0
 800feae:	d002      	beq.n	800feb6 <f_open+0x346>
						res = FR_DENIED;
 800feb0:	2307      	movs	r3, #7
 800feb2:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
		}
		if (res == FR_OK) {
 800feb6:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800feba:	2b00      	cmp	r3, #0
 800febc:	d151      	bne.n	800ff62 <f_open+0x3f2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800febe:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fec2:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fec6:	781b      	ldrb	r3, [r3, #0]
 800fec8:	f003 0308 	and.w	r3, r3, #8
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00b      	beq.n	800fee8 <f_open+0x378>
				mode |= FA__WRITTEN;
 800fed0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fed4:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fed8:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800fedc:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 800fee0:	7812      	ldrb	r2, [r2, #0]
 800fee2:	f042 0220 	orr.w	r2, r2, #32
 800fee6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800fee8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800feec:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fef0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fef4:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800fef8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fefc:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 800ff06:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ff0a:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 800ff14:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ff18:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ff1c:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	bf8c      	ite	hi
 800ff26:	2301      	movhi	r3, #1
 800ff28:	2300      	movls	r3, #0
 800ff2a:	b2db      	uxtb	r3, r3
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800ff32:	4611      	mov	r1, r2
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fd fd33 	bl	800d9a0 <inc_lock>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ff40:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800ff4a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ff4e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d102      	bne.n	800ff62 <f_open+0x3f2>
 800ff5c:	2302      	movs	r3, #2
 800ff5e:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800ff62:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d178      	bne.n	801005c <f_open+0x4ec>
			fp->flag = mode;					/* File access mode */
 800ff6a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ff6e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800ff78:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 800ff7c:	7812      	ldrb	r2, [r2, #0]
 800ff7e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 800ff82:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ff86:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800ff92:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ff96:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800ff9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ff9e:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fe fbe8 	bl	800e778 <ld_clust>
 800ffa8:	4602      	mov	r2, r0
 800ffaa:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ffae:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800ffb8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800ffbc:	331f      	adds	r3, #31
 800ffbe:	781b      	ldrb	r3, [r3, #0]
 800ffc0:	061a      	lsls	r2, r3, #24
 800ffc2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800ffc6:	331e      	adds	r3, #30
 800ffc8:	781b      	ldrb	r3, [r3, #0]
 800ffca:	041b      	lsls	r3, r3, #16
 800ffcc:	431a      	orrs	r2, r3
 800ffce:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800ffd2:	331d      	adds	r3, #29
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	021b      	lsls	r3, r3, #8
 800ffd8:	4313      	orrs	r3, r2
 800ffda:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 800ffde:	321c      	adds	r2, #28
 800ffe0:	7812      	ldrb	r2, [r2, #0]
 800ffe2:	431a      	orrs	r2, r3
 800ffe4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ffe8:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 800fff2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fff6:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	2200      	movs	r2, #0
 800fffe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 8010002:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010006:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	2200      	movs	r2, #0
 801000e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8010012:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010016:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	2200      	movs	r2, #0
 801001e:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8010022:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010026:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 801002a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 801002e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010032:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 801003c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010040:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801004a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 801004e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010052:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 801005c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010060:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010064:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010068:	f897 2457 	ldrb.w	r2, [r7, #1111]	@ 0x457
 801006c:	4611      	mov	r1, r2
 801006e:	4618      	mov	r0, r3
 8010070:	f7fd fbe7 	bl	800d842 <unlock_fs>
 8010074:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
}
 8010078:	4618      	mov	r0, r3
 801007a:	f507 678b 	add.w	r7, r7, #1112	@ 0x458
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}

08010082 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010082:	b580      	push	{r7, lr}
 8010084:	b08a      	sub	sp, #40	@ 0x28
 8010086:	af00      	add	r7, sp, #0
 8010088:	60f8      	str	r0, [r7, #12]
 801008a:	60b9      	str	r1, [r7, #8]
 801008c:	607a      	str	r2, [r7, #4]
 801008e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	2200      	movs	r2, #0
 8010098:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 801009a:	68f8      	ldr	r0, [r7, #12]
 801009c:	f7ff fcc2 	bl	800fa24 <validate>
 80100a0:	4603      	mov	r3, r0
 80100a2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80100a4:	7dfb      	ldrb	r3, [r7, #23]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d009      	beq.n	80100be <f_write+0x3c>
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80100b0:	7dfa      	ldrb	r2, [r7, #23]
 80100b2:	4611      	mov	r1, r2
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7fd fbc4 	bl	800d842 <unlock_fs>
 80100ba:	7dfb      	ldrb	r3, [r7, #23]
 80100bc:	e1d4      	b.n	8010468 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d00d      	beq.n	80100e4 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80100d4:	4619      	mov	r1, r3
 80100d6:	4610      	mov	r0, r2
 80100d8:	f7fd fbb3 	bl	800d842 <unlock_fs>
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80100e2:	e1c1      	b.n	8010468 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80100ea:	f003 0302 	and.w	r3, r3, #2
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d108      	bne.n	8010104 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80100f8:	2107      	movs	r1, #7
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7fd fba1 	bl	800d842 <unlock_fs>
 8010100:	2307      	movs	r3, #7
 8010102:	e1b1      	b.n	8010468 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	441a      	add	r2, r3
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010114:	429a      	cmp	r2, r3
 8010116:	f080 8182 	bcs.w	801041e <f_write+0x39c>
 801011a:	2300      	movs	r3, #0
 801011c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 801011e:	e17e      	b.n	801041e <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801012a:	2b00      	cmp	r3, #0
 801012c:	f040 813e 	bne.w	80103ac <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010136:	0a5b      	lsrs	r3, r3, #9
 8010138:	b2da      	uxtb	r2, r3
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010140:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8010144:	3b01      	subs	r3, #1
 8010146:	b2db      	uxtb	r3, r3
 8010148:	4013      	ands	r3, r2
 801014a:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 801014c:	7dbb      	ldrb	r3, [r7, #22]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d15f      	bne.n	8010212 <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010158:	2b00      	cmp	r3, #0
 801015a:	d10f      	bne.n	801017c <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010162:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8010164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010166:	2b00      	cmp	r3, #0
 8010168:	d121      	bne.n	80101ae <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010170:	2100      	movs	r1, #0
 8010172:	4618      	mov	r0, r3
 8010174:	f7fe f85a 	bl	800e22c <create_chain>
 8010178:	6278      	str	r0, [r7, #36]	@ 0x24
 801017a:	e018      	b.n	80101ae <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8010182:	2b00      	cmp	r3, #0
 8010184:	d008      	beq.n	8010198 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 801018c:	4619      	mov	r1, r3
 801018e:	68f8      	ldr	r0, [r7, #12]
 8010190:	f7fe f8e9 	bl	800e366 <clmt_clust>
 8010194:	6278      	str	r0, [r7, #36]	@ 0x24
 8010196:	e00a      	b.n	80101ae <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80101a4:	4619      	mov	r1, r3
 80101a6:	4610      	mov	r0, r2
 80101a8:	f7fe f840 	bl	800e22c <create_chain>
 80101ac:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80101ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f000 8139 	beq.w	8010428 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80101b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d10c      	bne.n	80101d6 <f_write+0x154>
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2202      	movs	r2, #2
 80101c0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80101ca:	2102      	movs	r1, #2
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7fd fb38 	bl	800d842 <unlock_fs>
 80101d2:	2302      	movs	r3, #2
 80101d4:	e148      	b.n	8010468 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80101d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101dc:	d10c      	bne.n	80101f8 <f_write+0x176>
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2201      	movs	r2, #1
 80101e2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80101ec:	2101      	movs	r1, #1
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7fd fb27 	bl	800d842 <unlock_fs>
 80101f4:	2301      	movs	r3, #1
 80101f6:	e137      	b.n	8010468 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010206:	2b00      	cmp	r3, #0
 8010208:	d103      	bne.n	8010212 <f_write+0x190>
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801020e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801021c:	2b00      	cmp	r3, #0
 801021e:	d024      	beq.n	801026a <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010226:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 801022a:	68f9      	ldr	r1, [r7, #12]
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8010232:	2301      	movs	r3, #1
 8010234:	f7fd fa40 	bl	800d6b8 <disk_write>
 8010238:	4603      	mov	r3, r0
 801023a:	2b00      	cmp	r3, #0
 801023c:	d00c      	beq.n	8010258 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2201      	movs	r2, #1
 8010242:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801024c:	2101      	movs	r1, #1
 801024e:	4618      	mov	r0, r3
 8010250:	f7fd faf7 	bl	800d842 <unlock_fs>
 8010254:	2301      	movs	r3, #1
 8010256:	e107      	b.n	8010468 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801025e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010262:	b2da      	uxtb	r2, r3
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010276:	4619      	mov	r1, r3
 8010278:	4610      	mov	r0, r2
 801027a:	f7fd fd95 	bl	800dda8 <clust2sect>
 801027e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8010280:	693b      	ldr	r3, [r7, #16]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d10c      	bne.n	80102a0 <f_write+0x21e>
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	2202      	movs	r2, #2
 801028a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010294:	2102      	movs	r1, #2
 8010296:	4618      	mov	r0, r3
 8010298:	f7fd fad3 	bl	800d842 <unlock_fs>
 801029c:	2302      	movs	r3, #2
 801029e:	e0e3      	b.n	8010468 <f_write+0x3e6>
			sect += csect;
 80102a0:	7dbb      	ldrb	r3, [r7, #22]
 80102a2:	693a      	ldr	r2, [r7, #16]
 80102a4:	4413      	add	r3, r2
 80102a6:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	0a5b      	lsrs	r3, r3, #9
 80102ac:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80102ae:	69fb      	ldr	r3, [r7, #28]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d04f      	beq.n	8010354 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80102b4:	7dba      	ldrb	r2, [r7, #22]
 80102b6:	69fb      	ldr	r3, [r7, #28]
 80102b8:	4413      	add	r3, r2
 80102ba:	68fa      	ldr	r2, [r7, #12]
 80102bc:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80102c0:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80102c4:	4293      	cmp	r3, r2
 80102c6:	d908      	bls.n	80102da <f_write+0x258>
					cc = fp->fs->csize - csect;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80102ce:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80102d2:	461a      	mov	r2, r3
 80102d4:	7dbb      	ldrb	r3, [r7, #22]
 80102d6:	1ad3      	subs	r3, r2, r3
 80102d8:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80102e0:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	693a      	ldr	r2, [r7, #16]
 80102e8:	69b9      	ldr	r1, [r7, #24]
 80102ea:	f7fd f9e5 	bl	800d6b8 <disk_write>
 80102ee:	4603      	mov	r3, r0
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d00c      	beq.n	801030e <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2201      	movs	r2, #1
 80102f8:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010302:	2101      	movs	r1, #1
 8010304:	4618      	mov	r0, r3
 8010306:	f7fd fa9c 	bl	800d842 <unlock_fs>
 801030a:	2301      	movs	r3, #1
 801030c:	e0ac      	b.n	8010468 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	1ad3      	subs	r3, r2, r3
 8010318:	69fa      	ldr	r2, [r7, #28]
 801031a:	429a      	cmp	r2, r3
 801031c:	d916      	bls.n	801034c <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 801031e:	68f8      	ldr	r0, [r7, #12]
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	1ad3      	subs	r3, r2, r3
 801032a:	025b      	lsls	r3, r3, #9
 801032c:	69ba      	ldr	r2, [r7, #24]
 801032e:	4413      	add	r3, r2
 8010330:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010334:	4619      	mov	r1, r3
 8010336:	f7fd f9fd 	bl	800d734 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010340:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010344:	b2da      	uxtb	r2, r3
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	025b      	lsls	r3, r3, #9
 8010350:	623b      	str	r3, [r7, #32]
				continue;
 8010352:	e04e      	b.n	80103f2 <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 801035a:	693a      	ldr	r2, [r7, #16]
 801035c:	429a      	cmp	r2, r3
 801035e:	d021      	beq.n	80103a4 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801036c:	429a      	cmp	r2, r3
 801036e:	d219      	bcs.n	80103a4 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010376:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 801037a:	68f9      	ldr	r1, [r7, #12]
 801037c:	2301      	movs	r3, #1
 801037e:	693a      	ldr	r2, [r7, #16]
 8010380:	f7fd f97a 	bl	800d678 <disk_read>
 8010384:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8010386:	2b00      	cmp	r3, #0
 8010388:	d00c      	beq.n	80103a4 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	2201      	movs	r2, #1
 801038e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010398:	2101      	movs	r1, #1
 801039a:	4618      	mov	r0, r3
 801039c:	f7fd fa51 	bl	800d842 <unlock_fs>
 80103a0:	2301      	movs	r3, #1
 80103a2:	e061      	b.n	8010468 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	693a      	ldr	r2, [r7, #16]
 80103a8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80103b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103b6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80103ba:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80103bc:	6a3a      	ldr	r2, [r7, #32]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d901      	bls.n	80103c8 <f_write+0x346>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80103ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103d2:	68fa      	ldr	r2, [r7, #12]
 80103d4:	4413      	add	r3, r2
 80103d6:	6a3a      	ldr	r2, [r7, #32]
 80103d8:	69b9      	ldr	r1, [r7, #24]
 80103da:	4618      	mov	r0, r3
 80103dc:	f7fd f9aa 	bl	800d734 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80103e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103ea:	b2da      	uxtb	r2, r3
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80103f2:	69ba      	ldr	r2, [r7, #24]
 80103f4:	6a3b      	ldr	r3, [r7, #32]
 80103f6:	4413      	add	r3, r2
 80103f8:	61bb      	str	r3, [r7, #24]
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010400:	6a3b      	ldr	r3, [r7, #32]
 8010402:	441a      	add	r2, r3
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	6a3b      	ldr	r3, [r7, #32]
 8010410:	441a      	add	r2, r3
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	601a      	str	r2, [r3, #0]
 8010416:	687a      	ldr	r2, [r7, #4]
 8010418:	6a3b      	ldr	r3, [r7, #32]
 801041a:	1ad3      	subs	r3, r2, r3
 801041c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2b00      	cmp	r3, #0
 8010422:	f47f ae7d 	bne.w	8010120 <f_write+0x9e>
 8010426:	e000      	b.n	801042a <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010428:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010436:	429a      	cmp	r2, r3
 8010438:	d905      	bls.n	8010446 <f_write+0x3c4>
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801044c:	f043 0320 	orr.w	r3, r3, #32
 8010450:	b2da      	uxtb	r2, r3
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801045e:	2100      	movs	r1, #0
 8010460:	4618      	mov	r0, r3
 8010462:	f7fd f9ee 	bl	800d842 <unlock_fs>
 8010466:	2300      	movs	r3, #0
}
 8010468:	4618      	mov	r0, r3
 801046a:	3728      	adds	r7, #40	@ 0x28
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b086      	sub	sp, #24
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f7ff fad3 	bl	800fa24 <validate>
 801047e:	4603      	mov	r3, r0
 8010480:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010482:	7dfb      	ldrb	r3, [r7, #23]
 8010484:	2b00      	cmp	r3, #0
 8010486:	f040 80af 	bne.w	80105e8 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010490:	f003 0320 	and.w	r3, r3, #32
 8010494:	2b00      	cmp	r3, #0
 8010496:	f000 80a7 	beq.w	80105e8 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80104a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d020      	beq.n	80104ea <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80104ae:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80104b2:	6879      	ldr	r1, [r7, #4]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80104ba:	2301      	movs	r3, #1
 80104bc:	f7fd f8fc 	bl	800d6b8 <disk_write>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d008      	beq.n	80104d8 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80104cc:	2101      	movs	r1, #1
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7fd f9b7 	bl	800d842 <unlock_fs>
 80104d4:	2301      	movs	r3, #1
 80104d6:	e090      	b.n	80105fa <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80104de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104e2:	b2da      	uxtb	r2, r3
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80104f6:	4619      	mov	r1, r3
 80104f8:	4610      	mov	r0, r2
 80104fa:	f7fd fb7a 	bl	800dbf2 <move_window>
 80104fe:	4603      	mov	r3, r0
 8010500:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8010502:	7dfb      	ldrb	r3, [r7, #23]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d16f      	bne.n	80105e8 <f_sync+0x178>
				dir = fp->dir_ptr;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 801050e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	330b      	adds	r3, #11
 8010514:	781a      	ldrb	r2, [r3, #0]
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	330b      	adds	r3, #11
 801051a:	f042 0220 	orr.w	r2, r2, #32
 801051e:	b2d2      	uxtb	r2, r2
 8010520:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	331c      	adds	r3, #28
 801052c:	b2d2      	uxtb	r2, r2
 801052e:	701a      	strb	r2, [r3, #0]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010536:	b29b      	uxth	r3, r3
 8010538:	0a1b      	lsrs	r3, r3, #8
 801053a:	b29a      	uxth	r2, r3
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	331d      	adds	r3, #29
 8010540:	b2d2      	uxtb	r2, r2
 8010542:	701a      	strb	r2, [r3, #0]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801054a:	0c1a      	lsrs	r2, r3, #16
 801054c:	693b      	ldr	r3, [r7, #16]
 801054e:	331e      	adds	r3, #30
 8010550:	b2d2      	uxtb	r2, r2
 8010552:	701a      	strb	r2, [r3, #0]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801055a:	0e1a      	lsrs	r2, r3, #24
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	331f      	adds	r3, #31
 8010560:	b2d2      	uxtb	r2, r2
 8010562:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801056a:	4619      	mov	r1, r3
 801056c:	6938      	ldr	r0, [r7, #16]
 801056e:	f7fe f930 	bl	800e7d2 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8010572:	f7fc ffbb 	bl	800d4ec <get_fattime>
 8010576:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	3316      	adds	r3, #22
 801057c:	68fa      	ldr	r2, [r7, #12]
 801057e:	b2d2      	uxtb	r2, r2
 8010580:	701a      	strb	r2, [r3, #0]
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	b29b      	uxth	r3, r3
 8010586:	0a1b      	lsrs	r3, r3, #8
 8010588:	b29a      	uxth	r2, r3
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	3317      	adds	r3, #23
 801058e:	b2d2      	uxtb	r2, r2
 8010590:	701a      	strb	r2, [r3, #0]
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	0c1a      	lsrs	r2, r3, #16
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	3318      	adds	r3, #24
 801059a:	b2d2      	uxtb	r2, r2
 801059c:	701a      	strb	r2, [r3, #0]
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	0e1a      	lsrs	r2, r3, #24
 80105a2:	693b      	ldr	r3, [r7, #16]
 80105a4:	3319      	adds	r3, #25
 80105a6:	b2d2      	uxtb	r2, r2
 80105a8:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	3312      	adds	r3, #18
 80105ae:	2200      	movs	r2, #0
 80105b0:	701a      	strb	r2, [r3, #0]
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	3313      	adds	r3, #19
 80105b6:	2200      	movs	r2, #0
 80105b8:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80105c0:	f023 0320 	bic.w	r3, r3, #32
 80105c4:	b2da      	uxtb	r2, r3
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80105d2:	2201      	movs	r2, #1
 80105d4:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80105de:	4618      	mov	r0, r3
 80105e0:	f7fd fb35 	bl	800dc4e <sync_fs>
 80105e4:	4603      	mov	r3, r0
 80105e6:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80105ee:	7dfa      	ldrb	r2, [r7, #23]
 80105f0:	4611      	mov	r1, r2
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fd f925 	bl	800d842 <unlock_fs>
 80105f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3718      	adds	r7, #24
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}

08010602 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8010602:	b580      	push	{r7, lr}
 8010604:	b090      	sub	sp, #64	@ 0x40
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
 801060a:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f7ff fa09 	bl	800fa24 <validate>
 8010612:	4603      	mov	r3, r0
 8010614:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8010618:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801061c:	2b00      	cmp	r3, #0
 801061e:	d00b      	beq.n	8010638 <f_lseek+0x36>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010626:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801062a:	4611      	mov	r1, r2
 801062c:	4618      	mov	r0, r3
 801062e:	f7fd f908 	bl	800d842 <unlock_fs>
 8010632:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010636:	e2af      	b.n	8010b98 <f_lseek+0x596>
	if (fp->err)						/* Check error */
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 801063e:	2b00      	cmp	r3, #0
 8010640:	d00d      	beq.n	801065e <f_lseek+0x5c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 801064e:	4619      	mov	r1, r3
 8010650:	4610      	mov	r0, r2
 8010652:	f7fd f8f6 	bl	800d842 <unlock_fs>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 801065c:	e29c      	b.n	8010b98 <f_lseek+0x596>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8010664:	2b00      	cmp	r3, #0
 8010666:	f000 8115 	beq.w	8010894 <f_lseek+0x292>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010670:	d172      	bne.n	8010758 <f_lseek+0x156>
			tbl = fp->cltbl;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8010678:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801067a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801067c:	1d1a      	adds	r2, r3, #4
 801067e:	627a      	str	r2, [r7, #36]	@ 0x24
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	617b      	str	r3, [r7, #20]
 8010684:	2302      	movs	r3, #2
 8010686:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801068e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8010690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010692:	2b00      	cmp	r3, #0
 8010694:	d04f      	beq.n	8010736 <f_lseek+0x134>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010698:	613b      	str	r3, [r7, #16]
 801069a:	2300      	movs	r3, #0
 801069c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801069e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106a0:	3302      	adds	r3, #2
 80106a2:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80106a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106a6:	60fb      	str	r3, [r7, #12]
 80106a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106aa:	3301      	adds	r3, #1
 80106ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80106b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fd fb97 	bl	800ddea <get_fat>
 80106bc:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80106be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d80c      	bhi.n	80106de <f_lseek+0xdc>
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2202      	movs	r2, #2
 80106c8:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80106d2:	2102      	movs	r1, #2
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7fd f8b4 	bl	800d842 <unlock_fs>
 80106da:	2302      	movs	r3, #2
 80106dc:	e25c      	b.n	8010b98 <f_lseek+0x596>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80106de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106e4:	d10c      	bne.n	8010700 <f_lseek+0xfe>
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2201      	movs	r2, #1
 80106ea:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80106f4:	2101      	movs	r1, #1
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7fd f8a3 	bl	800d842 <unlock_fs>
 80106fc:	2301      	movs	r3, #1
 80106fe:	e24b      	b.n	8010b98 <f_lseek+0x596>
					} while (cl == pcl + 1);
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	3301      	adds	r3, #1
 8010704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010706:	429a      	cmp	r2, r3
 8010708:	d0cc      	beq.n	80106a4 <f_lseek+0xa2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801070a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	429a      	cmp	r2, r3
 8010710:	d809      	bhi.n	8010726 <f_lseek+0x124>
						*tbl++ = ncl; *tbl++ = tcl;
 8010712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010714:	1d1a      	adds	r2, r3, #4
 8010716:	627a      	str	r2, [r7, #36]	@ 0x24
 8010718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801071a:	601a      	str	r2, [r3, #0]
 801071c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801071e:	1d1a      	adds	r2, r3, #4
 8010720:	627a      	str	r2, [r7, #36]	@ 0x24
 8010722:	693a      	ldr	r2, [r7, #16]
 8010724:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801072c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010732:	429a      	cmp	r2, r3
 8010734:	d3af      	bcc.n	8010696 <f_lseek+0x94>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 801073c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801073e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8010740:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	429a      	cmp	r2, r3
 8010746:	d803      	bhi.n	8010750 <f_lseek+0x14e>
				*tbl = 0;		/* Terminate table */
 8010748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801074a:	2200      	movs	r2, #0
 801074c:	601a      	str	r2, [r3, #0]
 801074e:	e218      	b.n	8010b82 <f_lseek+0x580>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010750:	2311      	movs	r3, #17
 8010752:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8010756:	e214      	b.n	8010b82 <f_lseek+0x580>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801075e:	683a      	ldr	r2, [r7, #0]
 8010760:	429a      	cmp	r2, r3
 8010762:	d903      	bls.n	801076c <f_lseek+0x16a>
				ofs = fp->fsize;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801076a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	683a      	ldr	r2, [r7, #0]
 8010770:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			if (ofs) {
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	2b00      	cmp	r3, #0
 8010778:	f000 8203 	beq.w	8010b82 <f_lseek+0x580>
				fp->clust = clmt_clust(fp, ofs - 1);
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	3b01      	subs	r3, #1
 8010780:	4619      	mov	r1, r3
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f7fd fdef 	bl	800e366 <clmt_clust>
 8010788:	4602      	mov	r2, r0
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801079c:	4619      	mov	r1, r3
 801079e:	4610      	mov	r0, r2
 80107a0:	f7fd fb02 	bl	800dda8 <clust2sect>
 80107a4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80107a6:	69bb      	ldr	r3, [r7, #24]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d10c      	bne.n	80107c6 <f_lseek+0x1c4>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2202      	movs	r2, #2
 80107b0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80107ba:	2102      	movs	r1, #2
 80107bc:	4618      	mov	r0, r3
 80107be:	f7fd f840 	bl	800d842 <unlock_fs>
 80107c2:	2302      	movs	r3, #2
 80107c4:	e1e8      	b.n	8010b98 <f_lseek+0x596>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	3b01      	subs	r3, #1
 80107ca:	0a5b      	lsrs	r3, r3, #9
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80107d2:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80107d6:	3a01      	subs	r2, #1
 80107d8:	4013      	ands	r3, r2
 80107da:	69ba      	ldr	r2, [r7, #24]
 80107dc:	4413      	add	r3, r2
 80107de:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80107e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f000 81c9 	beq.w	8010b82 <f_lseek+0x580>
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80107f6:	69ba      	ldr	r2, [r7, #24]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	f000 81c2 	beq.w	8010b82 <f_lseek+0x580>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010808:	2b00      	cmp	r3, #0
 801080a:	d024      	beq.n	8010856 <f_lseek+0x254>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010812:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8010816:	6879      	ldr	r1, [r7, #4]
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 801081e:	2301      	movs	r3, #1
 8010820:	f7fc ff4a 	bl	800d6b8 <disk_write>
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	d00c      	beq.n	8010844 <f_lseek+0x242>
							ABORT(fp->fs, FR_DISK_ERR);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2201      	movs	r2, #1
 801082e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010838:	2101      	movs	r1, #1
 801083a:	4618      	mov	r0, r3
 801083c:	f7fd f801 	bl	800d842 <unlock_fs>
 8010840:	2301      	movs	r3, #1
 8010842:	e1a9      	b.n	8010b98 <f_lseek+0x596>
						fp->flag &= ~FA__DIRTY;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801084a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801084e:	b2da      	uxtb	r2, r3
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801085c:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8010860:	6879      	ldr	r1, [r7, #4]
 8010862:	2301      	movs	r3, #1
 8010864:	69ba      	ldr	r2, [r7, #24]
 8010866:	f7fc ff07 	bl	800d678 <disk_read>
 801086a:	4603      	mov	r3, r0
 801086c:	2b00      	cmp	r3, #0
 801086e:	d00c      	beq.n	801088a <f_lseek+0x288>
						ABORT(fp->fs, FR_DISK_ERR);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2201      	movs	r2, #1
 8010874:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801087e:	2101      	movs	r1, #1
 8010880:	4618      	mov	r0, r3
 8010882:	f7fc ffde 	bl	800d842 <unlock_fs>
 8010886:	2301      	movs	r3, #1
 8010888:	e186      	b.n	8010b98 <f_lseek+0x596>
#endif
					fp->dsect = dsc;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	69ba      	ldr	r2, [r7, #24]
 801088e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 8010892:	e176      	b.n	8010b82 <f_lseek+0x580>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801089a:	683a      	ldr	r2, [r7, #0]
 801089c:	429a      	cmp	r2, r3
 801089e:	d90a      	bls.n	80108b6 <f_lseek+0x2b4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80108a6:	f003 0302 	and.w	r3, r3, #2
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d103      	bne.n	80108b6 <f_lseek+0x2b4>
#endif
			) ofs = fp->fsize;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80108b4:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80108bc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80108be:	2300      	movs	r3, #0
 80108c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80108c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
		if (ofs) {
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	f000 80ea 	beq.w	8010aa6 <f_lseek+0x4a4>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80108d8:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80108dc:	025b      	lsls	r3, r3, #9
 80108de:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80108e0:	6a3b      	ldr	r3, [r7, #32]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d01e      	beq.n	8010924 <f_lseek+0x322>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	1e5a      	subs	r2, r3, #1
 80108ea:	69fb      	ldr	r3, [r7, #28]
 80108ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80108f0:	6a3b      	ldr	r3, [r7, #32]
 80108f2:	1e59      	subs	r1, r3, #1
 80108f4:	69fb      	ldr	r3, [r7, #28]
 80108f6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80108fa:	429a      	cmp	r2, r3
 80108fc:	d312      	bcc.n	8010924 <f_lseek+0x322>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80108fe:	6a3b      	ldr	r3, [r7, #32]
 8010900:	1e5a      	subs	r2, r3, #1
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	425b      	negs	r3, r3
 8010906:	401a      	ands	r2, r3
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				ofs -= fp->fptr;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010914:	683a      	ldr	r2, [r7, #0]
 8010916:	1ad3      	subs	r3, r2, r3
 8010918:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010920:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010922:	e037      	b.n	8010994 <f_lseek+0x392>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801092a:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801092c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801092e:	2b00      	cmp	r3, #0
 8010930:	d12c      	bne.n	801098c <f_lseek+0x38a>
					clst = create_chain(fp->fs, 0);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010938:	2100      	movs	r1, #0
 801093a:	4618      	mov	r0, r3
 801093c:	f7fd fc76 	bl	800e22c <create_chain>
 8010940:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8010942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010944:	2b01      	cmp	r3, #1
 8010946:	d10c      	bne.n	8010962 <f_lseek+0x360>
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2202      	movs	r2, #2
 801094c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010956:	2102      	movs	r1, #2
 8010958:	4618      	mov	r0, r3
 801095a:	f7fc ff72 	bl	800d842 <unlock_fs>
 801095e:	2302      	movs	r3, #2
 8010960:	e11a      	b.n	8010b98 <f_lseek+0x596>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8010962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010968:	d10c      	bne.n	8010984 <f_lseek+0x382>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2201      	movs	r2, #1
 801096e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010978:	2101      	movs	r1, #1
 801097a:	4618      	mov	r0, r3
 801097c:	f7fc ff61 	bl	800d842 <unlock_fs>
 8010980:	2301      	movs	r3, #1
 8010982:	e109      	b.n	8010b98 <f_lseek+0x596>
					fp->sclust = clst;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010988:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				}
#endif
				fp->clust = clst;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010990:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			}
			if (clst != 0) {
 8010994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010996:	2b00      	cmp	r3, #0
 8010998:	f000 8085 	beq.w	8010aa6 <f_lseek+0x4a4>
				while (ofs > bcs) {						/* Cluster following loop */
 801099c:	e055      	b.n	8010a4a <f_lseek+0x448>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80109a4:	f003 0302 	and.w	r3, r3, #2
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d00d      	beq.n	80109c8 <f_lseek+0x3c6>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80109b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7fd fc39 	bl	800e22c <create_chain>
 80109ba:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 80109bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d10a      	bne.n	80109d8 <f_lseek+0x3d6>
							ofs = bcs; break;
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	603b      	str	r3, [r7, #0]
 80109c6:	e044      	b.n	8010a52 <f_lseek+0x450>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80109ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80109d0:	4618      	mov	r0, r3
 80109d2:	f7fd fa0a 	bl	800ddea <get_fat>
 80109d6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80109d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109de:	d10c      	bne.n	80109fa <f_lseek+0x3f8>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2201      	movs	r2, #1
 80109e4:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80109ee:	2101      	movs	r1, #1
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7fc ff26 	bl	800d842 <unlock_fs>
 80109f6:	2301      	movs	r3, #1
 80109f8:	e0ce      	b.n	8010b98 <f_lseek+0x596>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80109fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109fc:	2b01      	cmp	r3, #1
 80109fe:	d907      	bls.n	8010a10 <f_lseek+0x40e>
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010a06:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010a0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d30c      	bcc.n	8010a2a <f_lseek+0x428>
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2202      	movs	r2, #2
 8010a14:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010a1e:	2102      	movs	r1, #2
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7fc ff0e 	bl	800d842 <unlock_fs>
 8010a26:	2302      	movs	r3, #2
 8010a28:	e0b6      	b.n	8010b98 <f_lseek+0x596>
					fp->clust = clst;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010a2e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
					fp->fptr += bcs;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010a38:	69fb      	ldr	r3, [r7, #28]
 8010a3a:	441a      	add	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
					ofs -= bcs;
 8010a42:	683a      	ldr	r2, [r7, #0]
 8010a44:	69fb      	ldr	r3, [r7, #28]
 8010a46:	1ad3      	subs	r3, r2, r3
 8010a48:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8010a4a:	683a      	ldr	r2, [r7, #0]
 8010a4c:	69fb      	ldr	r3, [r7, #28]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d8a5      	bhi.n	801099e <f_lseek+0x39c>
				}
				fp->fptr += ofs;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	441a      	add	r2, r3
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				if (ofs % SS(fp->fs)) {
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d01c      	beq.n	8010aa6 <f_lseek+0x4a4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010a72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010a74:	4618      	mov	r0, r3
 8010a76:	f7fd f997 	bl	800dda8 <clust2sect>
 8010a7a:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8010a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d10c      	bne.n	8010a9c <f_lseek+0x49a>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2202      	movs	r2, #2
 8010a86:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010a90:	2102      	movs	r1, #2
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7fc fed5 	bl	800d842 <unlock_fs>
 8010a98:	2302      	movs	r3, #2
 8010a9a:	e07d      	b.n	8010b98 <f_lseek+0x596>
					nsect += ofs / SS(fp->fs);
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	0a5b      	lsrs	r3, r3, #9
 8010aa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010aa2:	4413      	add	r3, r2
 8010aa4:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d04f      	beq.n	8010b54 <f_lseek+0x552>
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010aba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d049      	beq.n	8010b54 <f_lseek+0x552>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d024      	beq.n	8010b18 <f_lseek+0x516>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010ad4:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8010ad8:	6879      	ldr	r1, [r7, #4]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	f7fc fde9 	bl	800d6b8 <disk_write>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d00c      	beq.n	8010b06 <f_lseek+0x504>
					ABORT(fp->fs, FR_DISK_ERR);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2201      	movs	r2, #1
 8010af0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010afa:	2101      	movs	r1, #1
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7fc fea0 	bl	800d842 <unlock_fs>
 8010b02:	2301      	movs	r3, #1
 8010b04:	e048      	b.n	8010b98 <f_lseek+0x596>
				fp->flag &= ~FA__DIRTY;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010b0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010b10:	b2da      	uxtb	r2, r3
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010b1e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8010b22:	6879      	ldr	r1, [r7, #4]
 8010b24:	2301      	movs	r3, #1
 8010b26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010b28:	f7fc fda6 	bl	800d678 <disk_read>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d00c      	beq.n	8010b4c <f_lseek+0x54a>
				ABORT(fp->fs, FR_DISK_ERR);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2201      	movs	r2, #1
 8010b36:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010b40:	2101      	movs	r1, #1
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7fc fe7d 	bl	800d842 <unlock_fs>
 8010b48:	2301      	movs	r3, #1
 8010b4a:	e025      	b.n	8010b98 <f_lseek+0x596>
#endif
			fp->dsect = nsect;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010b50:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d90e      	bls.n	8010b82 <f_lseek+0x580>
			fp->fsize = fp->fptr;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->flag |= FA__WRITTEN;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010b76:	f043 0320 	orr.w	r3, r3, #32
 8010b7a:	b2da      	uxtb	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010b88:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8010b8c:	4611      	mov	r1, r2
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7fc fe57 	bl	800d842 <unlock_fs>
 8010b94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3740      	adds	r7, #64	@ 0x40
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}

08010ba0 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	460b      	mov	r3, r1
 8010baa:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8010bac:	78fb      	ldrb	r3, [r7, #3]
 8010bae:	2b0a      	cmp	r3, #10
 8010bb0:	d103      	bne.n	8010bba <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8010bb2:	210d      	movs	r1, #13
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f7ff fff3 	bl	8010ba0 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	685b      	ldr	r3, [r3, #4]
 8010bbe:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	db25      	blt.n	8010c12 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	1c5a      	adds	r2, r3, #1
 8010bca:	60fa      	str	r2, [r7, #12]
 8010bcc:	687a      	ldr	r2, [r7, #4]
 8010bce:	4413      	add	r3, r2
 8010bd0:	78fa      	ldrb	r2, [r7, #3]
 8010bd2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	2b3c      	cmp	r3, #60	@ 0x3c
 8010bd8:	dd12      	ble.n	8010c00 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6818      	ldr	r0, [r3, #0]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f103 010c 	add.w	r1, r3, #12
 8010be4:	68fa      	ldr	r2, [r7, #12]
 8010be6:	f107 0308 	add.w	r3, r7, #8
 8010bea:	f7ff fa4a 	bl	8010082 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8010bee:	68ba      	ldr	r2, [r7, #8]
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d101      	bne.n	8010bfa <putc_bfd+0x5a>
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	e001      	b.n	8010bfe <putc_bfd+0x5e>
 8010bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8010bfe:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	68fa      	ldr	r2, [r7, #12]
 8010c04:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	689b      	ldr	r3, [r3, #8]
 8010c0a:	1c5a      	adds	r2, r3, #1
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	609a      	str	r2, [r3, #8]
 8010c10:	e000      	b.n	8010c14 <putc_bfd+0x74>
	if (i < 0) return;
 8010c12:	bf00      	nop
}
 8010c14:	3710      	adds	r7, #16
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}

08010c1a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8010c1a:	b590      	push	{r4, r7, lr}
 8010c1c:	b097      	sub	sp, #92	@ 0x5c
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	6078      	str	r0, [r7, #4]
 8010c22:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	613b      	str	r3, [r7, #16]
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8010c30:	e009      	b.n	8010c46 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	1c5a      	adds	r2, r3, #1
 8010c36:	607a      	str	r2, [r7, #4]
 8010c38:	781a      	ldrb	r2, [r3, #0]
 8010c3a:	f107 030c 	add.w	r3, r7, #12
 8010c3e:	4611      	mov	r1, r2
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7ff ffad 	bl	8010ba0 <putc_bfd>
	while (*str)			/* Put the string */
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	781b      	ldrb	r3, [r3, #0]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d1f1      	bne.n	8010c32 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	db15      	blt.n	8010c80 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8010c54:	68f8      	ldr	r0, [r7, #12]
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	461c      	mov	r4, r3
 8010c5a:	f107 0208 	add.w	r2, r7, #8
 8010c5e:	f107 030c 	add.w	r3, r7, #12
 8010c62:	f103 010c 	add.w	r1, r3, #12
 8010c66:	4613      	mov	r3, r2
 8010c68:	4622      	mov	r2, r4
 8010c6a:	f7ff fa0a 	bl	8010082 <f_write>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d105      	bne.n	8010c80 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8010c74:	693b      	ldr	r3, [r7, #16]
 8010c76:	68ba      	ldr	r2, [r7, #8]
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	d101      	bne.n	8010c80 <f_puts+0x66>
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	e001      	b.n	8010c84 <f_puts+0x6a>
	return EOF;
 8010c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	375c      	adds	r7, #92	@ 0x5c
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd90      	pop	{r4, r7, pc}

08010c8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	b087      	sub	sp, #28
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	60f8      	str	r0, [r7, #12]
 8010c94:	60b9      	str	r1, [r7, #8]
 8010c96:	4613      	mov	r3, r2
 8010c98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8010ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8010d1c <FATFS_LinkDriverEx+0x90>)
 8010ca4:	7a5b      	ldrb	r3, [r3, #9]
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	d831      	bhi.n	8010d10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010cac:	4b1b      	ldr	r3, [pc, #108]	@ (8010d1c <FATFS_LinkDriverEx+0x90>)
 8010cae:	7a5b      	ldrb	r3, [r3, #9]
 8010cb0:	b2db      	uxtb	r3, r3
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	4b19      	ldr	r3, [pc, #100]	@ (8010d1c <FATFS_LinkDriverEx+0x90>)
 8010cb6:	2100      	movs	r1, #0
 8010cb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8010cba:	4b18      	ldr	r3, [pc, #96]	@ (8010d1c <FATFS_LinkDriverEx+0x90>)
 8010cbc:	7a5b      	ldrb	r3, [r3, #9]
 8010cbe:	b2db      	uxtb	r3, r3
 8010cc0:	4a16      	ldr	r2, [pc, #88]	@ (8010d1c <FATFS_LinkDriverEx+0x90>)
 8010cc2:	009b      	lsls	r3, r3, #2
 8010cc4:	4413      	add	r3, r2
 8010cc6:	68fa      	ldr	r2, [r7, #12]
 8010cc8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8010cca:	4b14      	ldr	r3, [pc, #80]	@ (8010d1c <FATFS_LinkDriverEx+0x90>)
 8010ccc:	7a5b      	ldrb	r3, [r3, #9]
 8010cce:	b2db      	uxtb	r3, r3
 8010cd0:	461a      	mov	r2, r3
 8010cd2:	4b12      	ldr	r3, [pc, #72]	@ (8010d1c <FATFS_LinkDriverEx+0x90>)
 8010cd4:	4413      	add	r3, r2
 8010cd6:	79fa      	ldrb	r2, [r7, #7]
 8010cd8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010cda:	4b10      	ldr	r3, [pc, #64]	@ (8010d1c <FATFS_LinkDriverEx+0x90>)
 8010cdc:	7a5b      	ldrb	r3, [r3, #9]
 8010cde:	b2db      	uxtb	r3, r3
 8010ce0:	1c5a      	adds	r2, r3, #1
 8010ce2:	b2d1      	uxtb	r1, r2
 8010ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8010d1c <FATFS_LinkDriverEx+0x90>)
 8010ce6:	7251      	strb	r1, [r2, #9]
 8010ce8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010cea:	7dbb      	ldrb	r3, [r7, #22]
 8010cec:	3330      	adds	r3, #48	@ 0x30
 8010cee:	b2da      	uxtb	r2, r3
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	223a      	movs	r2, #58	@ 0x3a
 8010cfa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	3302      	adds	r3, #2
 8010d00:	222f      	movs	r2, #47	@ 0x2f
 8010d02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	3303      	adds	r3, #3
 8010d08:	2200      	movs	r2, #0
 8010d0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8010d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	371c      	adds	r7, #28
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bc80      	pop	{r7}
 8010d1a:	4770      	bx	lr
 8010d1c:	200012b8 	.word	0x200012b8

08010d20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	6839      	ldr	r1, [r7, #0]
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f7ff ffac 	bl	8010c8c <FATFS_LinkDriverEx>
 8010d34:	4603      	mov	r3, r0
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3708      	adds	r7, #8
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
	...

08010d40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	4603      	mov	r3, r0
 8010d48:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8010d78 <SD_initialize+0x38>)
 8010d4c:	2201      	movs	r2, #1
 8010d4e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8010d50:	f7fc fbd4 	bl	800d4fc <BSP_SD_Init>
 8010d54:	4603      	mov	r3, r0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d107      	bne.n	8010d6a <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010d5a:	4b07      	ldr	r3, [pc, #28]	@ (8010d78 <SD_initialize+0x38>)
 8010d5c:	781b      	ldrb	r3, [r3, #0]
 8010d5e:	b2db      	uxtb	r3, r3
 8010d60:	f023 0301 	bic.w	r3, r3, #1
 8010d64:	b2da      	uxtb	r2, r3
 8010d66:	4b04      	ldr	r3, [pc, #16]	@ (8010d78 <SD_initialize+0x38>)
 8010d68:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010d6a:	4b03      	ldr	r3, [pc, #12]	@ (8010d78 <SD_initialize+0x38>)
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	b2db      	uxtb	r3, r3
}
 8010d70:	4618      	mov	r0, r3
 8010d72:	3708      	adds	r7, #8
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	2000003d 	.word	0x2000003d

08010d7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	4603      	mov	r3, r0
 8010d84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010d86:	4b0b      	ldr	r3, [pc, #44]	@ (8010db4 <SD_status+0x38>)
 8010d88:	2201      	movs	r2, #1
 8010d8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010d8c:	f7fc fc0a 	bl	800d5a4 <BSP_SD_GetCardState>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d107      	bne.n	8010da6 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010d96:	4b07      	ldr	r3, [pc, #28]	@ (8010db4 <SD_status+0x38>)
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	b2db      	uxtb	r3, r3
 8010d9c:	f023 0301 	bic.w	r3, r3, #1
 8010da0:	b2da      	uxtb	r2, r3
 8010da2:	4b04      	ldr	r3, [pc, #16]	@ (8010db4 <SD_status+0x38>)
 8010da4:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8010da6:	4b03      	ldr	r3, [pc, #12]	@ (8010db4 <SD_status+0x38>)
 8010da8:	781b      	ldrb	r3, [r3, #0]
 8010daa:	b2db      	uxtb	r3, r3
}
 8010dac:	4618      	mov	r0, r3
 8010dae:	3708      	adds	r7, #8
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}
 8010db4:	2000003d 	.word	0x2000003d

08010db8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b086      	sub	sp, #24
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	60b9      	str	r1, [r7, #8]
 8010dc0:	607a      	str	r2, [r7, #4]
 8010dc2:	603b      	str	r3, [r7, #0]
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010dc8:	2301      	movs	r3, #1
 8010dca:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8010dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8010e0c <SD_read+0x54>)
 8010dce:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8010dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8010e10 <SD_read+0x58>)
 8010dd2:	683a      	ldr	r2, [r7, #0]
 8010dd4:	6879      	ldr	r1, [r7, #4]
 8010dd6:	68b8      	ldr	r0, [r7, #8]
 8010dd8:	f7fc fba8 	bl	800d52c <BSP_SD_ReadBlocks>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d10e      	bne.n	8010e00 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010de2:	e006      	b.n	8010df2 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	1e5a      	subs	r2, r3, #1
 8010de8:	613a      	str	r2, [r7, #16]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d101      	bne.n	8010df2 <SD_read+0x3a>
      {
        return RES_ERROR;
 8010dee:	2301      	movs	r3, #1
 8010df0:	e007      	b.n	8010e02 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010df2:	f7fc fbd7 	bl	800d5a4 <BSP_SD_GetCardState>
 8010df6:	4603      	mov	r3, r0
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d1f3      	bne.n	8010de4 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8010e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3718      	adds	r7, #24
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	000186a0 	.word	0x000186a0
 8010e10:	05f5e100 	.word	0x05f5e100

08010e14 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b086      	sub	sp, #24
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60b9      	str	r1, [r7, #8]
 8010e1c:	607a      	str	r2, [r7, #4]
 8010e1e:	603b      	str	r3, [r7, #0]
 8010e20:	4603      	mov	r3, r0
 8010e22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010e24:	2301      	movs	r3, #1
 8010e26:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8010e28:	4b0f      	ldr	r3, [pc, #60]	@ (8010e68 <SD_write+0x54>)
 8010e2a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8010e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8010e6c <SD_write+0x58>)
 8010e2e:	683a      	ldr	r2, [r7, #0]
 8010e30:	6879      	ldr	r1, [r7, #4]
 8010e32:	68b8      	ldr	r0, [r7, #8]
 8010e34:	f7fc fb98 	bl	800d568 <BSP_SD_WriteBlocks>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d10e      	bne.n	8010e5c <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010e3e:	e006      	b.n	8010e4e <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8010e40:	693b      	ldr	r3, [r7, #16]
 8010e42:	1e5a      	subs	r2, r3, #1
 8010e44:	613a      	str	r2, [r7, #16]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d101      	bne.n	8010e4e <SD_write+0x3a>
      {
        return RES_ERROR;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	e007      	b.n	8010e5e <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010e4e:	f7fc fba9 	bl	800d5a4 <BSP_SD_GetCardState>
 8010e52:	4603      	mov	r3, r0
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d1f3      	bne.n	8010e40 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8010e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	3718      	adds	r7, #24
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
 8010e66:	bf00      	nop
 8010e68:	000186a0 	.word	0x000186a0
 8010e6c:	05f5e100 	.word	0x05f5e100

08010e70 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b08c      	sub	sp, #48	@ 0x30
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	4603      	mov	r3, r0
 8010e78:	603a      	str	r2, [r7, #0]
 8010e7a:	71fb      	strb	r3, [r7, #7]
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010e80:	2301      	movs	r3, #1
 8010e82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010e86:	4b24      	ldr	r3, [pc, #144]	@ (8010f18 <SD_ioctl+0xa8>)
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	f003 0301 	and.w	r3, r3, #1
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d001      	beq.n	8010e98 <SD_ioctl+0x28>
 8010e94:	2303      	movs	r3, #3
 8010e96:	e03b      	b.n	8010f10 <SD_ioctl+0xa0>
  
  switch (cmd)
 8010e98:	79bb      	ldrb	r3, [r7, #6]
 8010e9a:	2b03      	cmp	r3, #3
 8010e9c:	d833      	bhi.n	8010f06 <SD_ioctl+0x96>
 8010e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8010ea4 <SD_ioctl+0x34>)
 8010ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea4:	08010eb5 	.word	0x08010eb5
 8010ea8:	08010ebd 	.word	0x08010ebd
 8010eac:	08010ed5 	.word	0x08010ed5
 8010eb0:	08010eef 	.word	0x08010eef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010eba:	e027      	b.n	8010f0c <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ebc:	f107 030c 	add.w	r3, r7, #12
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7fc fb7f 	bl	800d5c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010ed2:	e01b      	b.n	8010f0c <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ed4:	f107 030c 	add.w	r3, r7, #12
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7fc fb73 	bl	800d5c4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ee0:	b29a      	uxth	r2, r3
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010eec:	e00e      	b.n	8010f0c <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010eee:	f107 030c 	add.w	r3, r7, #12
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7fc fb66 	bl	800d5c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8010ef8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010efe:	2300      	movs	r3, #0
 8010f00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010f04:	e002      	b.n	8010f0c <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8010f06:	2304      	movs	r3, #4
 8010f08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 8010f0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3730      	adds	r7, #48	@ 0x30
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}
 8010f18:	2000003d 	.word	0x2000003d

08010f1c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b085      	sub	sp, #20
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	4603      	mov	r3, r0
 8010f24:	6039      	str	r1, [r7, #0]
 8010f26:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010f28:	88fb      	ldrh	r3, [r7, #6]
 8010f2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8010f2c:	d802      	bhi.n	8010f34 <ff_convert+0x18>
		c = chr;
 8010f2e:	88fb      	ldrh	r3, [r7, #6]
 8010f30:	81fb      	strh	r3, [r7, #14]
 8010f32:	e025      	b.n	8010f80 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d00b      	beq.n	8010f52 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010f3a:	88fb      	ldrh	r3, [r7, #6]
 8010f3c:	2bff      	cmp	r3, #255	@ 0xff
 8010f3e:	d805      	bhi.n	8010f4c <ff_convert+0x30>
 8010f40:	88fb      	ldrh	r3, [r7, #6]
 8010f42:	3b80      	subs	r3, #128	@ 0x80
 8010f44:	4a11      	ldr	r2, [pc, #68]	@ (8010f8c <ff_convert+0x70>)
 8010f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f4a:	e000      	b.n	8010f4e <ff_convert+0x32>
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	81fb      	strh	r3, [r7, #14]
 8010f50:	e016      	b.n	8010f80 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8010f52:	2300      	movs	r3, #0
 8010f54:	81fb      	strh	r3, [r7, #14]
 8010f56:	e009      	b.n	8010f6c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010f58:	89fb      	ldrh	r3, [r7, #14]
 8010f5a:	4a0c      	ldr	r2, [pc, #48]	@ (8010f8c <ff_convert+0x70>)
 8010f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f60:	88fa      	ldrh	r2, [r7, #6]
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d006      	beq.n	8010f74 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010f66:	89fb      	ldrh	r3, [r7, #14]
 8010f68:	3301      	adds	r3, #1
 8010f6a:	81fb      	strh	r3, [r7, #14]
 8010f6c:	89fb      	ldrh	r3, [r7, #14]
 8010f6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8010f70:	d9f2      	bls.n	8010f58 <ff_convert+0x3c>
 8010f72:	e000      	b.n	8010f76 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010f74:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010f76:	89fb      	ldrh	r3, [r7, #14]
 8010f78:	3380      	adds	r3, #128	@ 0x80
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	b2db      	uxtb	r3, r3
 8010f7e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010f80:	89fb      	ldrh	r3, [r7, #14]
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3714      	adds	r7, #20
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bc80      	pop	{r7}
 8010f8a:	4770      	bx	lr
 8010f8c:	08014450 	.word	0x08014450

08010f90 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8010f90:	b480      	push	{r7}
 8010f92:	b085      	sub	sp, #20
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	4603      	mov	r3, r0
 8010f98:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	60fb      	str	r3, [r7, #12]
 8010f9e:	e002      	b.n	8010fa6 <ff_wtoupper+0x16>
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	60fb      	str	r3, [r7, #12]
 8010fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8010fe4 <ff_wtoupper+0x54>)
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d006      	beq.n	8010fc0 <ff_wtoupper+0x30>
 8010fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8010fe4 <ff_wtoupper+0x54>)
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fba:	88fa      	ldrh	r2, [r7, #6]
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d1ef      	bne.n	8010fa0 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8010fc0:	4a08      	ldr	r2, [pc, #32]	@ (8010fe4 <ff_wtoupper+0x54>)
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d004      	beq.n	8010fd6 <ff_wtoupper+0x46>
 8010fcc:	4a06      	ldr	r2, [pc, #24]	@ (8010fe8 <ff_wtoupper+0x58>)
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fd4:	e000      	b.n	8010fd8 <ff_wtoupper+0x48>
 8010fd6:	88fb      	ldrh	r3, [r7, #6]
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3714      	adds	r7, #20
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bc80      	pop	{r7}
 8010fe0:	4770      	bx	lr
 8010fe2:	bf00      	nop
 8010fe4:	08014550 	.word	0x08014550
 8010fe8:	08014730 	.word	0x08014730

08010fec <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b086      	sub	sp, #24
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	6039      	str	r1, [r7, #0]
 8010ff6:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	60fb      	str	r3, [r7, #12]
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8011000:	f107 030c 	add.w	r3, r7, #12
 8011004:	2101      	movs	r1, #1
 8011006:	4618      	mov	r0, r3
 8011008:	f000 f8cb 	bl	80111a2 <osSemaphoreCreate>
 801100c:	4602      	mov	r2, r0
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	2b00      	cmp	r3, #0
 8011018:	bf14      	ite	ne
 801101a:	2301      	movne	r3, #1
 801101c:	2300      	moveq	r3, #0
 801101e:	b2db      	uxtb	r3, r3
 8011020:	617b      	str	r3, [r7, #20]
  
  return ret;
 8011022:	697b      	ldr	r3, [r7, #20]
}
 8011024:	4618      	mov	r0, r3
 8011026:	3718      	adds	r7, #24
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 f96b 	bl	8011310 <osSemaphoreDelete>
  return 1;
 801103a:	2301      	movs	r3, #1
}
 801103c:	4618      	mov	r0, r3
 801103e:	3708      	adds	r7, #8
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}

08011044 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b084      	sub	sp, #16
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801104c:	2300      	movs	r3, #0
 801104e:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8011050:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f000 f8d7 	bl	8011208 <osSemaphoreWait>
 801105a:	4603      	mov	r3, r0
 801105c:	2b00      	cmp	r3, #0
 801105e:	d101      	bne.n	8011064 <ff_req_grant+0x20>
  {
    ret = 1;
 8011060:	2301      	movs	r3, #1
 8011062:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8011064:	68fb      	ldr	r3, [r7, #12]
}
 8011066:	4618      	mov	r0, r3
 8011068:	3710      	adds	r7, #16
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}

0801106e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801106e:	b580      	push	{r7, lr}
 8011070:	b082      	sub	sp, #8
 8011072:	af00      	add	r7, sp, #0
 8011074:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f000 f914 	bl	80112a4 <osSemaphoreRelease>
}
 801107c:	bf00      	nop
 801107e:	3708      	adds	r7, #8
 8011080:	46bd      	mov	sp, r7
 8011082:	bd80      	pop	{r7, pc}

08011084 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011084:	b480      	push	{r7}
 8011086:	b085      	sub	sp, #20
 8011088:	af00      	add	r7, sp, #0
 801108a:	4603      	mov	r3, r0
 801108c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801108e:	2300      	movs	r3, #0
 8011090:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011096:	2b84      	cmp	r3, #132	@ 0x84
 8011098:	d005      	beq.n	80110a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801109a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	4413      	add	r3, r2
 80110a2:	3303      	adds	r3, #3
 80110a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80110a6:	68fb      	ldr	r3, [r7, #12]
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3714      	adds	r7, #20
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bc80      	pop	{r7}
 80110b0:	4770      	bx	lr

080110b2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80110b2:	b480      	push	{r7}
 80110b4:	b083      	sub	sp, #12
 80110b6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80110b8:	f3ef 8305 	mrs	r3, IPSR
 80110bc:	607b      	str	r3, [r7, #4]
  return(result);
 80110be:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	bf14      	ite	ne
 80110c4:	2301      	movne	r3, #1
 80110c6:	2300      	moveq	r3, #0
 80110c8:	b2db      	uxtb	r3, r3
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	370c      	adds	r7, #12
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bc80      	pop	{r7}
 80110d2:	4770      	bx	lr

080110d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80110d8:	f001 fb34 	bl	8012744 <vTaskStartScheduler>
  
  return osOK;
 80110dc:	2300      	movs	r3, #0
}
 80110de:	4618      	mov	r0, r3
 80110e0:	bd80      	pop	{r7, pc}

080110e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80110e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110e4:	b089      	sub	sp, #36	@ 0x24
 80110e6:	af04      	add	r7, sp, #16
 80110e8:	6078      	str	r0, [r7, #4]
 80110ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	695b      	ldr	r3, [r3, #20]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d020      	beq.n	8011136 <osThreadCreate+0x54>
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	699b      	ldr	r3, [r3, #24]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d01c      	beq.n	8011136 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	685c      	ldr	r4, [r3, #4]
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	691e      	ldr	r6, [r3, #16]
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801110e:	4618      	mov	r0, r3
 8011110:	f7ff ffb8 	bl	8011084 <makeFreeRtosPriority>
 8011114:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	695b      	ldr	r3, [r3, #20]
 801111a:	687a      	ldr	r2, [r7, #4]
 801111c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801111e:	9202      	str	r2, [sp, #8]
 8011120:	9301      	str	r3, [sp, #4]
 8011122:	9100      	str	r1, [sp, #0]
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	4632      	mov	r2, r6
 8011128:	4629      	mov	r1, r5
 801112a:	4620      	mov	r0, r4
 801112c:	f000 ff90 	bl	8012050 <xTaskCreateStatic>
 8011130:	4603      	mov	r3, r0
 8011132:	60fb      	str	r3, [r7, #12]
 8011134:	e01c      	b.n	8011170 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	685c      	ldr	r4, [r3, #4]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011142:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801114a:	4618      	mov	r0, r3
 801114c:	f7ff ff9a 	bl	8011084 <makeFreeRtosPriority>
 8011150:	4602      	mov	r2, r0
 8011152:	f107 030c 	add.w	r3, r7, #12
 8011156:	9301      	str	r3, [sp, #4]
 8011158:	9200      	str	r2, [sp, #0]
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	4632      	mov	r2, r6
 801115e:	4629      	mov	r1, r5
 8011160:	4620      	mov	r0, r4
 8011162:	f000 ffd4 	bl	801210e <xTaskCreate>
 8011166:	4603      	mov	r3, r0
 8011168:	2b01      	cmp	r3, #1
 801116a:	d001      	beq.n	8011170 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801116c:	2300      	movs	r3, #0
 801116e:	e000      	b.n	8011172 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011170:	68fb      	ldr	r3, [r7, #12]
}
 8011172:	4618      	mov	r0, r3
 8011174:	3714      	adds	r7, #20
 8011176:	46bd      	mov	sp, r7
 8011178:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801117a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801117a:	b580      	push	{r7, lr}
 801117c:	b084      	sub	sp, #16
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d001      	beq.n	8011190 <osDelay+0x16>
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	e000      	b.n	8011192 <osDelay+0x18>
 8011190:	2301      	movs	r3, #1
 8011192:	4618      	mov	r0, r3
 8011194:	f001 f972 	bl	801247c <vTaskDelay>
  
  return osOK;
 8011198:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801119a:	4618      	mov	r0, r3
 801119c:	3710      	adds	r7, #16
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}

080111a2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80111a2:	b580      	push	{r7, lr}
 80111a4:	b086      	sub	sp, #24
 80111a6:	af02      	add	r7, sp, #8
 80111a8:	6078      	str	r0, [r7, #4]
 80111aa:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	685b      	ldr	r3, [r3, #4]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d00f      	beq.n	80111d4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	2b01      	cmp	r3, #1
 80111b8:	d10a      	bne.n	80111d0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	685b      	ldr	r3, [r3, #4]
 80111be:	2203      	movs	r2, #3
 80111c0:	9200      	str	r2, [sp, #0]
 80111c2:	2200      	movs	r2, #0
 80111c4:	2100      	movs	r1, #0
 80111c6:	2001      	movs	r0, #1
 80111c8:	f000 f9ce 	bl	8011568 <xQueueGenericCreateStatic>
 80111cc:	4603      	mov	r3, r0
 80111ce:	e016      	b.n	80111fe <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80111d0:	2300      	movs	r3, #0
 80111d2:	e014      	b.n	80111fe <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	d110      	bne.n	80111fc <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80111da:	2203      	movs	r2, #3
 80111dc:	2100      	movs	r1, #0
 80111de:	2001      	movs	r0, #1
 80111e0:	f000 fa3e 	bl	8011660 <xQueueGenericCreate>
 80111e4:	60f8      	str	r0, [r7, #12]
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d005      	beq.n	80111f8 <osSemaphoreCreate+0x56>
 80111ec:	2300      	movs	r3, #0
 80111ee:	2200      	movs	r2, #0
 80111f0:	2100      	movs	r1, #0
 80111f2:	68f8      	ldr	r0, [r7, #12]
 80111f4:	f000 fa92 	bl	801171c <xQueueGenericSend>
      return sema;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	e000      	b.n	80111fe <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80111fc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3710      	adds	r7, #16
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}
	...

08011208 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011212:	2300      	movs	r3, #0
 8011214:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d101      	bne.n	8011220 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801121c:	2380      	movs	r3, #128	@ 0x80
 801121e:	e03a      	b.n	8011296 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011220:	2300      	movs	r3, #0
 8011222:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	f1b3 3fff 	cmp.w	r3, #4294967295
 801122a:	d103      	bne.n	8011234 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801122c:	f04f 33ff 	mov.w	r3, #4294967295
 8011230:	60fb      	str	r3, [r7, #12]
 8011232:	e009      	b.n	8011248 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d006      	beq.n	8011248 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d101      	bne.n	8011248 <osSemaphoreWait+0x40>
      ticks = 1;
 8011244:	2301      	movs	r3, #1
 8011246:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011248:	f7ff ff33 	bl	80110b2 <inHandlerMode>
 801124c:	4603      	mov	r3, r0
 801124e:	2b00      	cmp	r3, #0
 8011250:	d017      	beq.n	8011282 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011252:	f107 0308 	add.w	r3, r7, #8
 8011256:	461a      	mov	r2, r3
 8011258:	2100      	movs	r1, #0
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	f000 fd00 	bl	8011c60 <xQueueReceiveFromISR>
 8011260:	4603      	mov	r3, r0
 8011262:	2b01      	cmp	r3, #1
 8011264:	d001      	beq.n	801126a <osSemaphoreWait+0x62>
      return osErrorOS;
 8011266:	23ff      	movs	r3, #255	@ 0xff
 8011268:	e015      	b.n	8011296 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d011      	beq.n	8011294 <osSemaphoreWait+0x8c>
 8011270:	4b0b      	ldr	r3, [pc, #44]	@ (80112a0 <osSemaphoreWait+0x98>)
 8011272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011276:	601a      	str	r2, [r3, #0]
 8011278:	f3bf 8f4f 	dsb	sy
 801127c:	f3bf 8f6f 	isb	sy
 8011280:	e008      	b.n	8011294 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011282:	68f9      	ldr	r1, [r7, #12]
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f000 fbdb 	bl	8011a40 <xQueueSemaphoreTake>
 801128a:	4603      	mov	r3, r0
 801128c:	2b01      	cmp	r3, #1
 801128e:	d001      	beq.n	8011294 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011290:	23ff      	movs	r3, #255	@ 0xff
 8011292:	e000      	b.n	8011296 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011294:	2300      	movs	r3, #0
}
 8011296:	4618      	mov	r0, r3
 8011298:	3710      	adds	r7, #16
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}
 801129e:	bf00      	nop
 80112a0:	e000ed04 	.word	0xe000ed04

080112a4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80112ac:	2300      	movs	r3, #0
 80112ae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80112b0:	2300      	movs	r3, #0
 80112b2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80112b4:	f7ff fefd 	bl	80110b2 <inHandlerMode>
 80112b8:	4603      	mov	r3, r0
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d016      	beq.n	80112ec <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80112be:	f107 0308 	add.w	r3, r7, #8
 80112c2:	4619      	mov	r1, r3
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f000 fb2b 	bl	8011920 <xQueueGiveFromISR>
 80112ca:	4603      	mov	r3, r0
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	d001      	beq.n	80112d4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80112d0:	23ff      	movs	r3, #255	@ 0xff
 80112d2:	e017      	b.n	8011304 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d013      	beq.n	8011302 <osSemaphoreRelease+0x5e>
 80112da:	4b0c      	ldr	r3, [pc, #48]	@ (801130c <osSemaphoreRelease+0x68>)
 80112dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80112e0:	601a      	str	r2, [r3, #0]
 80112e2:	f3bf 8f4f 	dsb	sy
 80112e6:	f3bf 8f6f 	isb	sy
 80112ea:	e00a      	b.n	8011302 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80112ec:	2300      	movs	r3, #0
 80112ee:	2200      	movs	r2, #0
 80112f0:	2100      	movs	r1, #0
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	f000 fa12 	bl	801171c <xQueueGenericSend>
 80112f8:	4603      	mov	r3, r0
 80112fa:	2b01      	cmp	r3, #1
 80112fc:	d001      	beq.n	8011302 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80112fe:	23ff      	movs	r3, #255	@ 0xff
 8011300:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011302:	68fb      	ldr	r3, [r7, #12]
}
 8011304:	4618      	mov	r0, r3
 8011306:	3710      	adds	r7, #16
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}
 801130c:	e000ed04 	.word	0xe000ed04

08011310 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b082      	sub	sp, #8
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011318:	f7ff fecb 	bl	80110b2 <inHandlerMode>
 801131c:	4603      	mov	r3, r0
 801131e:	2b00      	cmp	r3, #0
 8011320:	d001      	beq.n	8011326 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8011322:	2382      	movs	r3, #130	@ 0x82
 8011324:	e003      	b.n	801132e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f000 fd1c 	bl	8011d64 <vQueueDelete>

  return osOK; 
 801132c:	2300      	movs	r3, #0
}
 801132e:	4618      	mov	r0, r3
 8011330:	3708      	adds	r7, #8
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}

08011336 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011336:	b480      	push	{r7}
 8011338:	b083      	sub	sp, #12
 801133a:	af00      	add	r7, sp, #0
 801133c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f103 0208 	add.w	r2, r3, #8
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f04f 32ff 	mov.w	r2, #4294967295
 801134e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f103 0208 	add.w	r2, r3, #8
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f103 0208 	add.w	r2, r3, #8
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2200      	movs	r2, #0
 8011368:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801136a:	bf00      	nop
 801136c:	370c      	adds	r7, #12
 801136e:	46bd      	mov	sp, r7
 8011370:	bc80      	pop	{r7}
 8011372:	4770      	bx	lr

08011374 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011374:	b480      	push	{r7}
 8011376:	b083      	sub	sp, #12
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	2200      	movs	r2, #0
 8011380:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011382:	bf00      	nop
 8011384:	370c      	adds	r7, #12
 8011386:	46bd      	mov	sp, r7
 8011388:	bc80      	pop	{r7}
 801138a:	4770      	bx	lr

0801138c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801138c:	b480      	push	{r7}
 801138e:	b085      	sub	sp, #20
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	685b      	ldr	r3, [r3, #4]
 801139a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	68fa      	ldr	r2, [r7, #12]
 80113a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	689a      	ldr	r2, [r3, #8]
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	689b      	ldr	r3, [r3, #8]
 80113ae:	683a      	ldr	r2, [r7, #0]
 80113b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	683a      	ldr	r2, [r7, #0]
 80113b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	687a      	ldr	r2, [r7, #4]
 80113bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	1c5a      	adds	r2, r3, #1
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	601a      	str	r2, [r3, #0]
}
 80113c8:	bf00      	nop
 80113ca:	3714      	adds	r7, #20
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bc80      	pop	{r7}
 80113d0:	4770      	bx	lr

080113d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80113d2:	b480      	push	{r7}
 80113d4:	b085      	sub	sp, #20
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	6078      	str	r0, [r7, #4]
 80113da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113e8:	d103      	bne.n	80113f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	691b      	ldr	r3, [r3, #16]
 80113ee:	60fb      	str	r3, [r7, #12]
 80113f0:	e00c      	b.n	801140c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	3308      	adds	r3, #8
 80113f6:	60fb      	str	r3, [r7, #12]
 80113f8:	e002      	b.n	8011400 <vListInsert+0x2e>
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	685b      	ldr	r3, [r3, #4]
 80113fe:	60fb      	str	r3, [r7, #12]
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	68ba      	ldr	r2, [r7, #8]
 8011408:	429a      	cmp	r2, r3
 801140a:	d2f6      	bcs.n	80113fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	685a      	ldr	r2, [r3, #4]
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	683a      	ldr	r2, [r7, #0]
 801141a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	68fa      	ldr	r2, [r7, #12]
 8011420:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	683a      	ldr	r2, [r7, #0]
 8011426:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	1c5a      	adds	r2, r3, #1
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	601a      	str	r2, [r3, #0]
}
 8011438:	bf00      	nop
 801143a:	3714      	adds	r7, #20
 801143c:	46bd      	mov	sp, r7
 801143e:	bc80      	pop	{r7}
 8011440:	4770      	bx	lr

08011442 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011442:	b480      	push	{r7}
 8011444:	b085      	sub	sp, #20
 8011446:	af00      	add	r7, sp, #0
 8011448:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	691b      	ldr	r3, [r3, #16]
 801144e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	687a      	ldr	r2, [r7, #4]
 8011456:	6892      	ldr	r2, [r2, #8]
 8011458:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	689b      	ldr	r3, [r3, #8]
 801145e:	687a      	ldr	r2, [r7, #4]
 8011460:	6852      	ldr	r2, [r2, #4]
 8011462:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	685b      	ldr	r3, [r3, #4]
 8011468:	687a      	ldr	r2, [r7, #4]
 801146a:	429a      	cmp	r2, r3
 801146c:	d103      	bne.n	8011476 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	689a      	ldr	r2, [r3, #8]
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2200      	movs	r2, #0
 801147a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	1e5a      	subs	r2, r3, #1
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	681b      	ldr	r3, [r3, #0]
}
 801148a:	4618      	mov	r0, r3
 801148c:	3714      	adds	r7, #20
 801148e:	46bd      	mov	sp, r7
 8011490:	bc80      	pop	{r7}
 8011492:	4770      	bx	lr

08011494 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b084      	sub	sp, #16
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d10b      	bne.n	80114c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80114a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114ac:	f383 8811 	msr	BASEPRI, r3
 80114b0:	f3bf 8f6f 	isb	sy
 80114b4:	f3bf 8f4f 	dsb	sy
 80114b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80114ba:	bf00      	nop
 80114bc:	bf00      	nop
 80114be:	e7fd      	b.n	80114bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80114c0:	f002 f8d4 	bl	801366c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	681a      	ldr	r2, [r3, #0]
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80114cc:	68f9      	ldr	r1, [r7, #12]
 80114ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80114d0:	fb01 f303 	mul.w	r3, r1, r3
 80114d4:	441a      	add	r2, r3
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	2200      	movs	r2, #0
 80114de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	681a      	ldr	r2, [r3, #0]
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681a      	ldr	r2, [r3, #0]
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80114f0:	3b01      	subs	r3, #1
 80114f2:	68f9      	ldr	r1, [r7, #12]
 80114f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80114f6:	fb01 f303 	mul.w	r3, r1, r3
 80114fa:	441a      	add	r2, r3
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	22ff      	movs	r2, #255	@ 0xff
 8011504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	22ff      	movs	r2, #255	@ 0xff
 801150c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d114      	bne.n	8011540 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	691b      	ldr	r3, [r3, #16]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d01a      	beq.n	8011554 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	3310      	adds	r3, #16
 8011522:	4618      	mov	r0, r3
 8011524:	f001 fb6a 	bl	8012bfc <xTaskRemoveFromEventList>
 8011528:	4603      	mov	r3, r0
 801152a:	2b00      	cmp	r3, #0
 801152c:	d012      	beq.n	8011554 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801152e:	4b0d      	ldr	r3, [pc, #52]	@ (8011564 <xQueueGenericReset+0xd0>)
 8011530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011534:	601a      	str	r2, [r3, #0]
 8011536:	f3bf 8f4f 	dsb	sy
 801153a:	f3bf 8f6f 	isb	sy
 801153e:	e009      	b.n	8011554 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	3310      	adds	r3, #16
 8011544:	4618      	mov	r0, r3
 8011546:	f7ff fef6 	bl	8011336 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	3324      	adds	r3, #36	@ 0x24
 801154e:	4618      	mov	r0, r3
 8011550:	f7ff fef1 	bl	8011336 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011554:	f002 f8ba 	bl	80136cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011558:	2301      	movs	r3, #1
}
 801155a:	4618      	mov	r0, r3
 801155c:	3710      	adds	r7, #16
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	e000ed04 	.word	0xe000ed04

08011568 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011568:	b580      	push	{r7, lr}
 801156a:	b08e      	sub	sp, #56	@ 0x38
 801156c:	af02      	add	r7, sp, #8
 801156e:	60f8      	str	r0, [r7, #12]
 8011570:	60b9      	str	r1, [r7, #8]
 8011572:	607a      	str	r2, [r7, #4]
 8011574:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d10b      	bne.n	8011594 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 801157c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011580:	f383 8811 	msr	BASEPRI, r3
 8011584:	f3bf 8f6f 	isb	sy
 8011588:	f3bf 8f4f 	dsb	sy
 801158c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801158e:	bf00      	nop
 8011590:	bf00      	nop
 8011592:	e7fd      	b.n	8011590 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d10b      	bne.n	80115b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801159a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801159e:	f383 8811 	msr	BASEPRI, r3
 80115a2:	f3bf 8f6f 	isb	sy
 80115a6:	f3bf 8f4f 	dsb	sy
 80115aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80115ac:	bf00      	nop
 80115ae:	bf00      	nop
 80115b0:	e7fd      	b.n	80115ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d002      	beq.n	80115be <xQueueGenericCreateStatic+0x56>
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d001      	beq.n	80115c2 <xQueueGenericCreateStatic+0x5a>
 80115be:	2301      	movs	r3, #1
 80115c0:	e000      	b.n	80115c4 <xQueueGenericCreateStatic+0x5c>
 80115c2:	2300      	movs	r3, #0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d10b      	bne.n	80115e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80115c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115cc:	f383 8811 	msr	BASEPRI, r3
 80115d0:	f3bf 8f6f 	isb	sy
 80115d4:	f3bf 8f4f 	dsb	sy
 80115d8:	623b      	str	r3, [r7, #32]
}
 80115da:	bf00      	nop
 80115dc:	bf00      	nop
 80115de:	e7fd      	b.n	80115dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d102      	bne.n	80115ec <xQueueGenericCreateStatic+0x84>
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d101      	bne.n	80115f0 <xQueueGenericCreateStatic+0x88>
 80115ec:	2301      	movs	r3, #1
 80115ee:	e000      	b.n	80115f2 <xQueueGenericCreateStatic+0x8a>
 80115f0:	2300      	movs	r3, #0
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d10b      	bne.n	801160e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80115f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115fa:	f383 8811 	msr	BASEPRI, r3
 80115fe:	f3bf 8f6f 	isb	sy
 8011602:	f3bf 8f4f 	dsb	sy
 8011606:	61fb      	str	r3, [r7, #28]
}
 8011608:	bf00      	nop
 801160a:	bf00      	nop
 801160c:	e7fd      	b.n	801160a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801160e:	2348      	movs	r3, #72	@ 0x48
 8011610:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	2b48      	cmp	r3, #72	@ 0x48
 8011616:	d00b      	beq.n	8011630 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8011618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801161c:	f383 8811 	msr	BASEPRI, r3
 8011620:	f3bf 8f6f 	isb	sy
 8011624:	f3bf 8f4f 	dsb	sy
 8011628:	61bb      	str	r3, [r7, #24]
}
 801162a:	bf00      	nop
 801162c:	bf00      	nop
 801162e:	e7fd      	b.n	801162c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8011634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011636:	2b00      	cmp	r3, #0
 8011638:	d00d      	beq.n	8011656 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801163a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801163c:	2201      	movs	r2, #1
 801163e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011642:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8011646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011648:	9300      	str	r3, [sp, #0]
 801164a:	4613      	mov	r3, r2
 801164c:	687a      	ldr	r2, [r7, #4]
 801164e:	68b9      	ldr	r1, [r7, #8]
 8011650:	68f8      	ldr	r0, [r7, #12]
 8011652:	f000 f844 	bl	80116de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8011658:	4618      	mov	r0, r3
 801165a:	3730      	adds	r7, #48	@ 0x30
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}

08011660 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011660:	b580      	push	{r7, lr}
 8011662:	b08a      	sub	sp, #40	@ 0x28
 8011664:	af02      	add	r7, sp, #8
 8011666:	60f8      	str	r0, [r7, #12]
 8011668:	60b9      	str	r1, [r7, #8]
 801166a:	4613      	mov	r3, r2
 801166c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d10b      	bne.n	801168c <xQueueGenericCreate+0x2c>
	__asm volatile
 8011674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011678:	f383 8811 	msr	BASEPRI, r3
 801167c:	f3bf 8f6f 	isb	sy
 8011680:	f3bf 8f4f 	dsb	sy
 8011684:	613b      	str	r3, [r7, #16]
}
 8011686:	bf00      	nop
 8011688:	bf00      	nop
 801168a:	e7fd      	b.n	8011688 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d102      	bne.n	8011698 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011692:	2300      	movs	r3, #0
 8011694:	61fb      	str	r3, [r7, #28]
 8011696:	e004      	b.n	80116a2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	68ba      	ldr	r2, [r7, #8]
 801169c:	fb02 f303 	mul.w	r3, r2, r3
 80116a0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80116a2:	69fb      	ldr	r3, [r7, #28]
 80116a4:	3348      	adds	r3, #72	@ 0x48
 80116a6:	4618      	mov	r0, r3
 80116a8:	f002 f8e2 	bl	8013870 <pvPortMalloc>
 80116ac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80116ae:	69bb      	ldr	r3, [r7, #24]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d00f      	beq.n	80116d4 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80116b4:	69bb      	ldr	r3, [r7, #24]
 80116b6:	3348      	adds	r3, #72	@ 0x48
 80116b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80116ba:	69bb      	ldr	r3, [r7, #24]
 80116bc:	2200      	movs	r2, #0
 80116be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80116c2:	79fa      	ldrb	r2, [r7, #7]
 80116c4:	69bb      	ldr	r3, [r7, #24]
 80116c6:	9300      	str	r3, [sp, #0]
 80116c8:	4613      	mov	r3, r2
 80116ca:	697a      	ldr	r2, [r7, #20]
 80116cc:	68b9      	ldr	r1, [r7, #8]
 80116ce:	68f8      	ldr	r0, [r7, #12]
 80116d0:	f000 f805 	bl	80116de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80116d4:	69bb      	ldr	r3, [r7, #24]
	}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3720      	adds	r7, #32
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}

080116de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80116de:	b580      	push	{r7, lr}
 80116e0:	b084      	sub	sp, #16
 80116e2:	af00      	add	r7, sp, #0
 80116e4:	60f8      	str	r0, [r7, #12]
 80116e6:	60b9      	str	r1, [r7, #8]
 80116e8:	607a      	str	r2, [r7, #4]
 80116ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d103      	bne.n	80116fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	69ba      	ldr	r2, [r7, #24]
 80116f6:	601a      	str	r2, [r3, #0]
 80116f8:	e002      	b.n	8011700 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80116fa:	69bb      	ldr	r3, [r7, #24]
 80116fc:	687a      	ldr	r2, [r7, #4]
 80116fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011700:	69bb      	ldr	r3, [r7, #24]
 8011702:	68fa      	ldr	r2, [r7, #12]
 8011704:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011706:	69bb      	ldr	r3, [r7, #24]
 8011708:	68ba      	ldr	r2, [r7, #8]
 801170a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801170c:	2101      	movs	r1, #1
 801170e:	69b8      	ldr	r0, [r7, #24]
 8011710:	f7ff fec0 	bl	8011494 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011714:	bf00      	nop
 8011716:	3710      	adds	r7, #16
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}

0801171c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b08e      	sub	sp, #56	@ 0x38
 8011720:	af00      	add	r7, sp, #0
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	60b9      	str	r1, [r7, #8]
 8011726:	607a      	str	r2, [r7, #4]
 8011728:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801172a:	2300      	movs	r3, #0
 801172c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011734:	2b00      	cmp	r3, #0
 8011736:	d10b      	bne.n	8011750 <xQueueGenericSend+0x34>
	__asm volatile
 8011738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801173c:	f383 8811 	msr	BASEPRI, r3
 8011740:	f3bf 8f6f 	isb	sy
 8011744:	f3bf 8f4f 	dsb	sy
 8011748:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801174a:	bf00      	nop
 801174c:	bf00      	nop
 801174e:	e7fd      	b.n	801174c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d103      	bne.n	801175e <xQueueGenericSend+0x42>
 8011756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801175a:	2b00      	cmp	r3, #0
 801175c:	d101      	bne.n	8011762 <xQueueGenericSend+0x46>
 801175e:	2301      	movs	r3, #1
 8011760:	e000      	b.n	8011764 <xQueueGenericSend+0x48>
 8011762:	2300      	movs	r3, #0
 8011764:	2b00      	cmp	r3, #0
 8011766:	d10b      	bne.n	8011780 <xQueueGenericSend+0x64>
	__asm volatile
 8011768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801176c:	f383 8811 	msr	BASEPRI, r3
 8011770:	f3bf 8f6f 	isb	sy
 8011774:	f3bf 8f4f 	dsb	sy
 8011778:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801177a:	bf00      	nop
 801177c:	bf00      	nop
 801177e:	e7fd      	b.n	801177c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	2b02      	cmp	r3, #2
 8011784:	d103      	bne.n	801178e <xQueueGenericSend+0x72>
 8011786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801178a:	2b01      	cmp	r3, #1
 801178c:	d101      	bne.n	8011792 <xQueueGenericSend+0x76>
 801178e:	2301      	movs	r3, #1
 8011790:	e000      	b.n	8011794 <xQueueGenericSend+0x78>
 8011792:	2300      	movs	r3, #0
 8011794:	2b00      	cmp	r3, #0
 8011796:	d10b      	bne.n	80117b0 <xQueueGenericSend+0x94>
	__asm volatile
 8011798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801179c:	f383 8811 	msr	BASEPRI, r3
 80117a0:	f3bf 8f6f 	isb	sy
 80117a4:	f3bf 8f4f 	dsb	sy
 80117a8:	623b      	str	r3, [r7, #32]
}
 80117aa:	bf00      	nop
 80117ac:	bf00      	nop
 80117ae:	e7fd      	b.n	80117ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80117b0:	f001 fc20 	bl	8012ff4 <xTaskGetSchedulerState>
 80117b4:	4603      	mov	r3, r0
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d102      	bne.n	80117c0 <xQueueGenericSend+0xa4>
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d101      	bne.n	80117c4 <xQueueGenericSend+0xa8>
 80117c0:	2301      	movs	r3, #1
 80117c2:	e000      	b.n	80117c6 <xQueueGenericSend+0xaa>
 80117c4:	2300      	movs	r3, #0
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d10b      	bne.n	80117e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80117ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117ce:	f383 8811 	msr	BASEPRI, r3
 80117d2:	f3bf 8f6f 	isb	sy
 80117d6:	f3bf 8f4f 	dsb	sy
 80117da:	61fb      	str	r3, [r7, #28]
}
 80117dc:	bf00      	nop
 80117de:	bf00      	nop
 80117e0:	e7fd      	b.n	80117de <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80117e2:	f001 ff43 	bl	801366c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80117e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80117ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d302      	bcc.n	80117f8 <xQueueGenericSend+0xdc>
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	2b02      	cmp	r3, #2
 80117f6:	d129      	bne.n	801184c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80117f8:	683a      	ldr	r2, [r7, #0]
 80117fa:	68b9      	ldr	r1, [r7, #8]
 80117fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80117fe:	f000 faec 	bl	8011dda <prvCopyDataToQueue>
 8011802:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011808:	2b00      	cmp	r3, #0
 801180a:	d010      	beq.n	801182e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801180c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801180e:	3324      	adds	r3, #36	@ 0x24
 8011810:	4618      	mov	r0, r3
 8011812:	f001 f9f3 	bl	8012bfc <xTaskRemoveFromEventList>
 8011816:	4603      	mov	r3, r0
 8011818:	2b00      	cmp	r3, #0
 801181a:	d013      	beq.n	8011844 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801181c:	4b3f      	ldr	r3, [pc, #252]	@ (801191c <xQueueGenericSend+0x200>)
 801181e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011822:	601a      	str	r2, [r3, #0]
 8011824:	f3bf 8f4f 	dsb	sy
 8011828:	f3bf 8f6f 	isb	sy
 801182c:	e00a      	b.n	8011844 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801182e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011830:	2b00      	cmp	r3, #0
 8011832:	d007      	beq.n	8011844 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011834:	4b39      	ldr	r3, [pc, #228]	@ (801191c <xQueueGenericSend+0x200>)
 8011836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801183a:	601a      	str	r2, [r3, #0]
 801183c:	f3bf 8f4f 	dsb	sy
 8011840:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011844:	f001 ff42 	bl	80136cc <vPortExitCritical>
				return pdPASS;
 8011848:	2301      	movs	r3, #1
 801184a:	e063      	b.n	8011914 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d103      	bne.n	801185a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011852:	f001 ff3b 	bl	80136cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011856:	2300      	movs	r3, #0
 8011858:	e05c      	b.n	8011914 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801185a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801185c:	2b00      	cmp	r3, #0
 801185e:	d106      	bne.n	801186e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011860:	f107 0314 	add.w	r3, r7, #20
 8011864:	4618      	mov	r0, r3
 8011866:	f001 fa2d 	bl	8012cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801186a:	2301      	movs	r3, #1
 801186c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801186e:	f001 ff2d 	bl	80136cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011872:	f000 ffc9 	bl	8012808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011876:	f001 fef9 	bl	801366c <vPortEnterCritical>
 801187a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801187c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011880:	b25b      	sxtb	r3, r3
 8011882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011886:	d103      	bne.n	8011890 <xQueueGenericSend+0x174>
 8011888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801188a:	2200      	movs	r2, #0
 801188c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011892:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011896:	b25b      	sxtb	r3, r3
 8011898:	f1b3 3fff 	cmp.w	r3, #4294967295
 801189c:	d103      	bne.n	80118a6 <xQueueGenericSend+0x18a>
 801189e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118a0:	2200      	movs	r2, #0
 80118a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80118a6:	f001 ff11 	bl	80136cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80118aa:	1d3a      	adds	r2, r7, #4
 80118ac:	f107 0314 	add.w	r3, r7, #20
 80118b0:	4611      	mov	r1, r2
 80118b2:	4618      	mov	r0, r3
 80118b4:	f001 fa1c 	bl	8012cf0 <xTaskCheckForTimeOut>
 80118b8:	4603      	mov	r3, r0
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d124      	bne.n	8011908 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80118be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80118c0:	f000 fb83 	bl	8011fca <prvIsQueueFull>
 80118c4:	4603      	mov	r3, r0
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d018      	beq.n	80118fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80118ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118cc:	3310      	adds	r3, #16
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	4611      	mov	r1, r2
 80118d2:	4618      	mov	r0, r3
 80118d4:	f001 f96c 	bl	8012bb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80118d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80118da:	f000 fb0e 	bl	8011efa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80118de:	f000 ffa1 	bl	8012824 <xTaskResumeAll>
 80118e2:	4603      	mov	r3, r0
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	f47f af7c 	bne.w	80117e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80118ea:	4b0c      	ldr	r3, [pc, #48]	@ (801191c <xQueueGenericSend+0x200>)
 80118ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80118f0:	601a      	str	r2, [r3, #0]
 80118f2:	f3bf 8f4f 	dsb	sy
 80118f6:	f3bf 8f6f 	isb	sy
 80118fa:	e772      	b.n	80117e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80118fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80118fe:	f000 fafc 	bl	8011efa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011902:	f000 ff8f 	bl	8012824 <xTaskResumeAll>
 8011906:	e76c      	b.n	80117e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011908:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801190a:	f000 faf6 	bl	8011efa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801190e:	f000 ff89 	bl	8012824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011912:	2300      	movs	r3, #0
		}
	}
}
 8011914:	4618      	mov	r0, r3
 8011916:	3738      	adds	r7, #56	@ 0x38
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}
 801191c:	e000ed04 	.word	0xe000ed04

08011920 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b08e      	sub	sp, #56	@ 0x38
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801192e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011930:	2b00      	cmp	r3, #0
 8011932:	d10b      	bne.n	801194c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8011934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011938:	f383 8811 	msr	BASEPRI, r3
 801193c:	f3bf 8f6f 	isb	sy
 8011940:	f3bf 8f4f 	dsb	sy
 8011944:	623b      	str	r3, [r7, #32]
}
 8011946:	bf00      	nop
 8011948:	bf00      	nop
 801194a:	e7fd      	b.n	8011948 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801194c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011950:	2b00      	cmp	r3, #0
 8011952:	d00b      	beq.n	801196c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8011954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011958:	f383 8811 	msr	BASEPRI, r3
 801195c:	f3bf 8f6f 	isb	sy
 8011960:	f3bf 8f4f 	dsb	sy
 8011964:	61fb      	str	r3, [r7, #28]
}
 8011966:	bf00      	nop
 8011968:	bf00      	nop
 801196a:	e7fd      	b.n	8011968 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 801196c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d103      	bne.n	801197c <xQueueGiveFromISR+0x5c>
 8011974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011976:	685b      	ldr	r3, [r3, #4]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d101      	bne.n	8011980 <xQueueGiveFromISR+0x60>
 801197c:	2301      	movs	r3, #1
 801197e:	e000      	b.n	8011982 <xQueueGiveFromISR+0x62>
 8011980:	2300      	movs	r3, #0
 8011982:	2b00      	cmp	r3, #0
 8011984:	d10b      	bne.n	801199e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8011986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801198a:	f383 8811 	msr	BASEPRI, r3
 801198e:	f3bf 8f6f 	isb	sy
 8011992:	f3bf 8f4f 	dsb	sy
 8011996:	61bb      	str	r3, [r7, #24]
}
 8011998:	bf00      	nop
 801199a:	bf00      	nop
 801199c:	e7fd      	b.n	801199a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801199e:	f001 ff27 	bl	80137f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80119a2:	f3ef 8211 	mrs	r2, BASEPRI
 80119a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119aa:	f383 8811 	msr	BASEPRI, r3
 80119ae:	f3bf 8f6f 	isb	sy
 80119b2:	f3bf 8f4f 	dsb	sy
 80119b6:	617a      	str	r2, [r7, #20]
 80119b8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80119ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80119bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80119be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119c2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80119c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d22b      	bcs.n	8011a26 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80119ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80119d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80119d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119da:	1c5a      	adds	r2, r3, #1
 80119dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80119e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80119e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119e8:	d112      	bne.n	8011a10 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80119ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d016      	beq.n	8011a20 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80119f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119f4:	3324      	adds	r3, #36	@ 0x24
 80119f6:	4618      	mov	r0, r3
 80119f8:	f001 f900 	bl	8012bfc <xTaskRemoveFromEventList>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d00e      	beq.n	8011a20 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d00b      	beq.n	8011a20 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	601a      	str	r2, [r3, #0]
 8011a0e:	e007      	b.n	8011a20 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011a10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a14:	3301      	adds	r3, #1
 8011a16:	b2db      	uxtb	r3, r3
 8011a18:	b25a      	sxtb	r2, r3
 8011a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011a20:	2301      	movs	r3, #1
 8011a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a24:	e001      	b.n	8011a2a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011a26:	2300      	movs	r3, #0
 8011a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a2c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011a34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3738      	adds	r7, #56	@ 0x38
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}

08011a40 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b08e      	sub	sp, #56	@ 0x38
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
 8011a48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011a52:	2300      	movs	r3, #0
 8011a54:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d10b      	bne.n	8011a74 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8011a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a60:	f383 8811 	msr	BASEPRI, r3
 8011a64:	f3bf 8f6f 	isb	sy
 8011a68:	f3bf 8f4f 	dsb	sy
 8011a6c:	623b      	str	r3, [r7, #32]
}
 8011a6e:	bf00      	nop
 8011a70:	bf00      	nop
 8011a72:	e7fd      	b.n	8011a70 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d00b      	beq.n	8011a94 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8011a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a80:	f383 8811 	msr	BASEPRI, r3
 8011a84:	f3bf 8f6f 	isb	sy
 8011a88:	f3bf 8f4f 	dsb	sy
 8011a8c:	61fb      	str	r3, [r7, #28]
}
 8011a8e:	bf00      	nop
 8011a90:	bf00      	nop
 8011a92:	e7fd      	b.n	8011a90 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a94:	f001 faae 	bl	8012ff4 <xTaskGetSchedulerState>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d102      	bne.n	8011aa4 <xQueueSemaphoreTake+0x64>
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d101      	bne.n	8011aa8 <xQueueSemaphoreTake+0x68>
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	e000      	b.n	8011aaa <xQueueSemaphoreTake+0x6a>
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d10b      	bne.n	8011ac6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8011aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ab2:	f383 8811 	msr	BASEPRI, r3
 8011ab6:	f3bf 8f6f 	isb	sy
 8011aba:	f3bf 8f4f 	dsb	sy
 8011abe:	61bb      	str	r3, [r7, #24]
}
 8011ac0:	bf00      	nop
 8011ac2:	bf00      	nop
 8011ac4:	e7fd      	b.n	8011ac2 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8011ac6:	f001 fdd1 	bl	801366c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ace:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d024      	beq.n	8011b20 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ad8:	1e5a      	subs	r2, r3, #1
 8011ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011adc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d104      	bne.n	8011af0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8011ae6:	f001 fc53 	bl	8013390 <pvTaskIncrementMutexHeldCount>
 8011aea:	4602      	mov	r2, r0
 8011aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aee:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011af2:	691b      	ldr	r3, [r3, #16]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d00f      	beq.n	8011b18 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011afa:	3310      	adds	r3, #16
 8011afc:	4618      	mov	r0, r3
 8011afe:	f001 f87d 	bl	8012bfc <xTaskRemoveFromEventList>
 8011b02:	4603      	mov	r3, r0
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d007      	beq.n	8011b18 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011b08:	4b54      	ldr	r3, [pc, #336]	@ (8011c5c <xQueueSemaphoreTake+0x21c>)
 8011b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b0e:	601a      	str	r2, [r3, #0]
 8011b10:	f3bf 8f4f 	dsb	sy
 8011b14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011b18:	f001 fdd8 	bl	80136cc <vPortExitCritical>
				return pdPASS;
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	e098      	b.n	8011c52 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d112      	bne.n	8011b4c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d00b      	beq.n	8011b44 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8011b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b30:	f383 8811 	msr	BASEPRI, r3
 8011b34:	f3bf 8f6f 	isb	sy
 8011b38:	f3bf 8f4f 	dsb	sy
 8011b3c:	617b      	str	r3, [r7, #20]
}
 8011b3e:	bf00      	nop
 8011b40:	bf00      	nop
 8011b42:	e7fd      	b.n	8011b40 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011b44:	f001 fdc2 	bl	80136cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	e082      	b.n	8011c52 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d106      	bne.n	8011b60 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011b52:	f107 030c 	add.w	r3, r7, #12
 8011b56:	4618      	mov	r0, r3
 8011b58:	f001 f8b4 	bl	8012cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011b60:	f001 fdb4 	bl	80136cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011b64:	f000 fe50 	bl	8012808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011b68:	f001 fd80 	bl	801366c <vPortEnterCritical>
 8011b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011b72:	b25b      	sxtb	r3, r3
 8011b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b78:	d103      	bne.n	8011b82 <xQueueSemaphoreTake+0x142>
 8011b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011b88:	b25b      	sxtb	r3, r3
 8011b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b8e:	d103      	bne.n	8011b98 <xQueueSemaphoreTake+0x158>
 8011b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b92:	2200      	movs	r2, #0
 8011b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011b98:	f001 fd98 	bl	80136cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011b9c:	463a      	mov	r2, r7
 8011b9e:	f107 030c 	add.w	r3, r7, #12
 8011ba2:	4611      	mov	r1, r2
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f001 f8a3 	bl	8012cf0 <xTaskCheckForTimeOut>
 8011baa:	4603      	mov	r3, r0
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d132      	bne.n	8011c16 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011bb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011bb2:	f000 f9f4 	bl	8011f9e <prvIsQueueEmpty>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d026      	beq.n	8011c0a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d109      	bne.n	8011bd8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8011bc4:	f001 fd52 	bl	801366c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8011bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bca:	685b      	ldr	r3, [r3, #4]
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f001 fa2f 	bl	8013030 <xTaskPriorityInherit>
 8011bd2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8011bd4:	f001 fd7a 	bl	80136cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bda:	3324      	adds	r3, #36	@ 0x24
 8011bdc:	683a      	ldr	r2, [r7, #0]
 8011bde:	4611      	mov	r1, r2
 8011be0:	4618      	mov	r0, r3
 8011be2:	f000 ffe5 	bl	8012bb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011be6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011be8:	f000 f987 	bl	8011efa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011bec:	f000 fe1a 	bl	8012824 <xTaskResumeAll>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	f47f af67 	bne.w	8011ac6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8011bf8:	4b18      	ldr	r3, [pc, #96]	@ (8011c5c <xQueueSemaphoreTake+0x21c>)
 8011bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011bfe:	601a      	str	r2, [r3, #0]
 8011c00:	f3bf 8f4f 	dsb	sy
 8011c04:	f3bf 8f6f 	isb	sy
 8011c08:	e75d      	b.n	8011ac6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011c0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011c0c:	f000 f975 	bl	8011efa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011c10:	f000 fe08 	bl	8012824 <xTaskResumeAll>
 8011c14:	e757      	b.n	8011ac6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011c16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011c18:	f000 f96f 	bl	8011efa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011c1c:	f000 fe02 	bl	8012824 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011c20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011c22:	f000 f9bc 	bl	8011f9e <prvIsQueueEmpty>
 8011c26:	4603      	mov	r3, r0
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	f43f af4c 	beq.w	8011ac6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d00d      	beq.n	8011c50 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8011c34:	f001 fd1a 	bl	801366c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011c38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011c3a:	f000 f8b7 	bl	8011dac <prvGetDisinheritPriorityAfterTimeout>
 8011c3e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8011c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c42:	685b      	ldr	r3, [r3, #4]
 8011c44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011c46:	4618      	mov	r0, r3
 8011c48:	f001 fb00 	bl	801324c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011c4c:	f001 fd3e 	bl	80136cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011c50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011c52:	4618      	mov	r0, r3
 8011c54:	3738      	adds	r7, #56	@ 0x38
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}
 8011c5a:	bf00      	nop
 8011c5c:	e000ed04 	.word	0xe000ed04

08011c60 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b08e      	sub	sp, #56	@ 0x38
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	60f8      	str	r0, [r7, #12]
 8011c68:	60b9      	str	r1, [r7, #8]
 8011c6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d10b      	bne.n	8011c8e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8011c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c7a:	f383 8811 	msr	BASEPRI, r3
 8011c7e:	f3bf 8f6f 	isb	sy
 8011c82:	f3bf 8f4f 	dsb	sy
 8011c86:	623b      	str	r3, [r7, #32]
}
 8011c88:	bf00      	nop
 8011c8a:	bf00      	nop
 8011c8c:	e7fd      	b.n	8011c8a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d103      	bne.n	8011c9c <xQueueReceiveFromISR+0x3c>
 8011c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d101      	bne.n	8011ca0 <xQueueReceiveFromISR+0x40>
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	e000      	b.n	8011ca2 <xQueueReceiveFromISR+0x42>
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d10b      	bne.n	8011cbe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8011ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011caa:	f383 8811 	msr	BASEPRI, r3
 8011cae:	f3bf 8f6f 	isb	sy
 8011cb2:	f3bf 8f4f 	dsb	sy
 8011cb6:	61fb      	str	r3, [r7, #28]
}
 8011cb8:	bf00      	nop
 8011cba:	bf00      	nop
 8011cbc:	e7fd      	b.n	8011cba <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011cbe:	f001 fd97 	bl	80137f0 <vPortValidateInterruptPriority>
	__asm volatile
 8011cc2:	f3ef 8211 	mrs	r2, BASEPRI
 8011cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cca:	f383 8811 	msr	BASEPRI, r3
 8011cce:	f3bf 8f6f 	isb	sy
 8011cd2:	f3bf 8f4f 	dsb	sy
 8011cd6:	61ba      	str	r2, [r7, #24]
 8011cd8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011cda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ce2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d02f      	beq.n	8011d4a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011cf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011cf4:	68b9      	ldr	r1, [r7, #8]
 8011cf6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011cf8:	f000 f8d9 	bl	8011eae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cfe:	1e5a      	subs	r2, r3, #1
 8011d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d02:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011d04:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d0c:	d112      	bne.n	8011d34 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d10:	691b      	ldr	r3, [r3, #16]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d016      	beq.n	8011d44 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d18:	3310      	adds	r3, #16
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f000 ff6e 	bl	8012bfc <xTaskRemoveFromEventList>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d00e      	beq.n	8011d44 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d00b      	beq.n	8011d44 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2201      	movs	r2, #1
 8011d30:	601a      	str	r2, [r3, #0]
 8011d32:	e007      	b.n	8011d44 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011d34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d38:	3301      	adds	r3, #1
 8011d3a:	b2db      	uxtb	r3, r3
 8011d3c:	b25a      	sxtb	r2, r3
 8011d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8011d44:	2301      	movs	r3, #1
 8011d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d48:	e001      	b.n	8011d4e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	f383 8811 	msr	BASEPRI, r3
}
 8011d58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3738      	adds	r7, #56	@ 0x38
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}

08011d64 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b084      	sub	sp, #16
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d10b      	bne.n	8011d8e <vQueueDelete+0x2a>
	__asm volatile
 8011d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d7a:	f383 8811 	msr	BASEPRI, r3
 8011d7e:	f3bf 8f6f 	isb	sy
 8011d82:	f3bf 8f4f 	dsb	sy
 8011d86:	60bb      	str	r3, [r7, #8]
}
 8011d88:	bf00      	nop
 8011d8a:	bf00      	nop
 8011d8c:	e7fd      	b.n	8011d8a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011d8e:	68f8      	ldr	r0, [r7, #12]
 8011d90:	f000 f934 	bl	8011ffc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d102      	bne.n	8011da4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8011d9e:	68f8      	ldr	r0, [r7, #12]
 8011da0:	f001 fe2e 	bl	8013a00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011da4:	bf00      	nop
 8011da6:	3710      	adds	r7, #16
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}

08011dac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011dac:	b480      	push	{r7}
 8011dae:	b085      	sub	sp, #20
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d006      	beq.n	8011dca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	f1c3 0307 	rsb	r3, r3, #7
 8011dc6:	60fb      	str	r3, [r7, #12]
 8011dc8:	e001      	b.n	8011dce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011dce:	68fb      	ldr	r3, [r7, #12]
	}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	3714      	adds	r7, #20
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bc80      	pop	{r7}
 8011dd8:	4770      	bx	lr

08011dda <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011dda:	b580      	push	{r7, lr}
 8011ddc:	b086      	sub	sp, #24
 8011dde:	af00      	add	r7, sp, #0
 8011de0:	60f8      	str	r0, [r7, #12]
 8011de2:	60b9      	str	r1, [r7, #8]
 8011de4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011de6:	2300      	movs	r3, #0
 8011de8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d10d      	bne.n	8011e14 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d14d      	bne.n	8011e9c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	4618      	mov	r0, r3
 8011e06:	f001 f999 	bl	801313c <xTaskPriorityDisinherit>
 8011e0a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	605a      	str	r2, [r3, #4]
 8011e12:	e043      	b.n	8011e9c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d119      	bne.n	8011e4e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	6898      	ldr	r0, [r3, #8]
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e22:	461a      	mov	r2, r3
 8011e24:	68b9      	ldr	r1, [r7, #8]
 8011e26:	f002 f80f 	bl	8013e48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	689a      	ldr	r2, [r3, #8]
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e32:	441a      	add	r2, r3
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	689a      	ldr	r2, [r3, #8]
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	685b      	ldr	r3, [r3, #4]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d32b      	bcc.n	8011e9c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	681a      	ldr	r2, [r3, #0]
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	609a      	str	r2, [r3, #8]
 8011e4c:	e026      	b.n	8011e9c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	68d8      	ldr	r0, [r3, #12]
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e56:	461a      	mov	r2, r3
 8011e58:	68b9      	ldr	r1, [r7, #8]
 8011e5a:	f001 fff5 	bl	8013e48 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	68da      	ldr	r2, [r3, #12]
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e66:	425b      	negs	r3, r3
 8011e68:	441a      	add	r2, r3
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	68da      	ldr	r2, [r3, #12]
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d207      	bcs.n	8011e8a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	685a      	ldr	r2, [r3, #4]
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e82:	425b      	negs	r3, r3
 8011e84:	441a      	add	r2, r3
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	2b02      	cmp	r3, #2
 8011e8e:	d105      	bne.n	8011e9c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d002      	beq.n	8011e9c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	3b01      	subs	r3, #1
 8011e9a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	1c5a      	adds	r2, r3, #1
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8011ea4:	697b      	ldr	r3, [r7, #20]
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3718      	adds	r7, #24
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}

08011eae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011eae:	b580      	push	{r7, lr}
 8011eb0:	b082      	sub	sp, #8
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
 8011eb6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d018      	beq.n	8011ef2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	68da      	ldr	r2, [r3, #12]
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ec8:	441a      	add	r2, r3
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	68da      	ldr	r2, [r3, #12]
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	685b      	ldr	r3, [r3, #4]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d303      	bcc.n	8011ee2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	68d9      	ldr	r1, [r3, #12]
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011eea:	461a      	mov	r2, r3
 8011eec:	6838      	ldr	r0, [r7, #0]
 8011eee:	f001 ffab 	bl	8013e48 <memcpy>
	}
}
 8011ef2:	bf00      	nop
 8011ef4:	3708      	adds	r7, #8
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}

08011efa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011efa:	b580      	push	{r7, lr}
 8011efc:	b084      	sub	sp, #16
 8011efe:	af00      	add	r7, sp, #0
 8011f00:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011f02:	f001 fbb3 	bl	801366c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011f0c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011f0e:	e011      	b.n	8011f34 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d012      	beq.n	8011f3e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	3324      	adds	r3, #36	@ 0x24
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f000 fe6d 	bl	8012bfc <xTaskRemoveFromEventList>
 8011f22:	4603      	mov	r3, r0
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d001      	beq.n	8011f2c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011f28:	f000 ff46 	bl	8012db8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011f2c:	7bfb      	ldrb	r3, [r7, #15]
 8011f2e:	3b01      	subs	r3, #1
 8011f30:	b2db      	uxtb	r3, r3
 8011f32:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	dce9      	bgt.n	8011f10 <prvUnlockQueue+0x16>
 8011f3c:	e000      	b.n	8011f40 <prvUnlockQueue+0x46>
					break;
 8011f3e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	22ff      	movs	r2, #255	@ 0xff
 8011f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8011f48:	f001 fbc0 	bl	80136cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011f4c:	f001 fb8e 	bl	801366c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011f56:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011f58:	e011      	b.n	8011f7e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	691b      	ldr	r3, [r3, #16]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d012      	beq.n	8011f88 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	3310      	adds	r3, #16
 8011f66:	4618      	mov	r0, r3
 8011f68:	f000 fe48 	bl	8012bfc <xTaskRemoveFromEventList>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d001      	beq.n	8011f76 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011f72:	f000 ff21 	bl	8012db8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011f76:	7bbb      	ldrb	r3, [r7, #14]
 8011f78:	3b01      	subs	r3, #1
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011f7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	dce9      	bgt.n	8011f5a <prvUnlockQueue+0x60>
 8011f86:	e000      	b.n	8011f8a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011f88:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	22ff      	movs	r2, #255	@ 0xff
 8011f8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011f92:	f001 fb9b 	bl	80136cc <vPortExitCritical>
}
 8011f96:	bf00      	nop
 8011f98:	3710      	adds	r7, #16
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}

08011f9e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011f9e:	b580      	push	{r7, lr}
 8011fa0:	b084      	sub	sp, #16
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011fa6:	f001 fb61 	bl	801366c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d102      	bne.n	8011fb8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	60fb      	str	r3, [r7, #12]
 8011fb6:	e001      	b.n	8011fbc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011fb8:	2300      	movs	r3, #0
 8011fba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011fbc:	f001 fb86 	bl	80136cc <vPortExitCritical>

	return xReturn;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3710      	adds	r7, #16
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}

08011fca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011fca:	b580      	push	{r7, lr}
 8011fcc:	b084      	sub	sp, #16
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011fd2:	f001 fb4b 	bl	801366c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d102      	bne.n	8011fe8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	60fb      	str	r3, [r7, #12]
 8011fe6:	e001      	b.n	8011fec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011fec:	f001 fb6e 	bl	80136cc <vPortExitCritical>

	return xReturn;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	3710      	adds	r7, #16
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd80      	pop	{r7, pc}
	...

08011ffc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011ffc:	b480      	push	{r7}
 8011ffe:	b085      	sub	sp, #20
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012004:	2300      	movs	r3, #0
 8012006:	60fb      	str	r3, [r7, #12]
 8012008:	e016      	b.n	8012038 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801200a:	4a10      	ldr	r2, [pc, #64]	@ (801204c <vQueueUnregisterQueue+0x50>)
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	00db      	lsls	r3, r3, #3
 8012010:	4413      	add	r3, r2
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	429a      	cmp	r2, r3
 8012018:	d10b      	bne.n	8012032 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801201a:	4a0c      	ldr	r2, [pc, #48]	@ (801204c <vQueueUnregisterQueue+0x50>)
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	2100      	movs	r1, #0
 8012020:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012024:	4a09      	ldr	r2, [pc, #36]	@ (801204c <vQueueUnregisterQueue+0x50>)
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	00db      	lsls	r3, r3, #3
 801202a:	4413      	add	r3, r2
 801202c:	2200      	movs	r2, #0
 801202e:	605a      	str	r2, [r3, #4]
				break;
 8012030:	e006      	b.n	8012040 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	3301      	adds	r3, #1
 8012036:	60fb      	str	r3, [r7, #12]
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	2b07      	cmp	r3, #7
 801203c:	d9e5      	bls.n	801200a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801203e:	bf00      	nop
 8012040:	bf00      	nop
 8012042:	3714      	adds	r7, #20
 8012044:	46bd      	mov	sp, r7
 8012046:	bc80      	pop	{r7}
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop
 801204c:	200012c4 	.word	0x200012c4

08012050 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012050:	b580      	push	{r7, lr}
 8012052:	b08e      	sub	sp, #56	@ 0x38
 8012054:	af04      	add	r7, sp, #16
 8012056:	60f8      	str	r0, [r7, #12]
 8012058:	60b9      	str	r1, [r7, #8]
 801205a:	607a      	str	r2, [r7, #4]
 801205c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801205e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012060:	2b00      	cmp	r3, #0
 8012062:	d10b      	bne.n	801207c <xTaskCreateStatic+0x2c>
	__asm volatile
 8012064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012068:	f383 8811 	msr	BASEPRI, r3
 801206c:	f3bf 8f6f 	isb	sy
 8012070:	f3bf 8f4f 	dsb	sy
 8012074:	623b      	str	r3, [r7, #32]
}
 8012076:	bf00      	nop
 8012078:	bf00      	nop
 801207a:	e7fd      	b.n	8012078 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801207c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801207e:	2b00      	cmp	r3, #0
 8012080:	d10b      	bne.n	801209a <xTaskCreateStatic+0x4a>
	__asm volatile
 8012082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012086:	f383 8811 	msr	BASEPRI, r3
 801208a:	f3bf 8f6f 	isb	sy
 801208e:	f3bf 8f4f 	dsb	sy
 8012092:	61fb      	str	r3, [r7, #28]
}
 8012094:	bf00      	nop
 8012096:	bf00      	nop
 8012098:	e7fd      	b.n	8012096 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801209a:	2354      	movs	r3, #84	@ 0x54
 801209c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	2b54      	cmp	r3, #84	@ 0x54
 80120a2:	d00b      	beq.n	80120bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80120a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120a8:	f383 8811 	msr	BASEPRI, r3
 80120ac:	f3bf 8f6f 	isb	sy
 80120b0:	f3bf 8f4f 	dsb	sy
 80120b4:	61bb      	str	r3, [r7, #24]
}
 80120b6:	bf00      	nop
 80120b8:	bf00      	nop
 80120ba:	e7fd      	b.n	80120b8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80120bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d01e      	beq.n	8012100 <xTaskCreateStatic+0xb0>
 80120c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d01b      	beq.n	8012100 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80120c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120ca:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80120cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80120d0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80120d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120d4:	2202      	movs	r2, #2
 80120d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80120da:	2300      	movs	r3, #0
 80120dc:	9303      	str	r3, [sp, #12]
 80120de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120e0:	9302      	str	r3, [sp, #8]
 80120e2:	f107 0314 	add.w	r3, r7, #20
 80120e6:	9301      	str	r3, [sp, #4]
 80120e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120ea:	9300      	str	r3, [sp, #0]
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	68b9      	ldr	r1, [r7, #8]
 80120f2:	68f8      	ldr	r0, [r7, #12]
 80120f4:	f000 f850 	bl	8012198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80120f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80120fa:	f000 f8d5 	bl	80122a8 <prvAddNewTaskToReadyList>
 80120fe:	e001      	b.n	8012104 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8012100:	2300      	movs	r3, #0
 8012102:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012104:	697b      	ldr	r3, [r7, #20]
	}
 8012106:	4618      	mov	r0, r3
 8012108:	3728      	adds	r7, #40	@ 0x28
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}

0801210e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801210e:	b580      	push	{r7, lr}
 8012110:	b08c      	sub	sp, #48	@ 0x30
 8012112:	af04      	add	r7, sp, #16
 8012114:	60f8      	str	r0, [r7, #12]
 8012116:	60b9      	str	r1, [r7, #8]
 8012118:	603b      	str	r3, [r7, #0]
 801211a:	4613      	mov	r3, r2
 801211c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801211e:	88fb      	ldrh	r3, [r7, #6]
 8012120:	009b      	lsls	r3, r3, #2
 8012122:	4618      	mov	r0, r3
 8012124:	f001 fba4 	bl	8013870 <pvPortMalloc>
 8012128:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801212a:	697b      	ldr	r3, [r7, #20]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d00e      	beq.n	801214e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8012130:	2054      	movs	r0, #84	@ 0x54
 8012132:	f001 fb9d 	bl	8013870 <pvPortMalloc>
 8012136:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012138:	69fb      	ldr	r3, [r7, #28]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d003      	beq.n	8012146 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801213e:	69fb      	ldr	r3, [r7, #28]
 8012140:	697a      	ldr	r2, [r7, #20]
 8012142:	631a      	str	r2, [r3, #48]	@ 0x30
 8012144:	e005      	b.n	8012152 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012146:	6978      	ldr	r0, [r7, #20]
 8012148:	f001 fc5a 	bl	8013a00 <vPortFree>
 801214c:	e001      	b.n	8012152 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801214e:	2300      	movs	r3, #0
 8012150:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012152:	69fb      	ldr	r3, [r7, #28]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d017      	beq.n	8012188 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012158:	69fb      	ldr	r3, [r7, #28]
 801215a:	2200      	movs	r2, #0
 801215c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012160:	88fa      	ldrh	r2, [r7, #6]
 8012162:	2300      	movs	r3, #0
 8012164:	9303      	str	r3, [sp, #12]
 8012166:	69fb      	ldr	r3, [r7, #28]
 8012168:	9302      	str	r3, [sp, #8]
 801216a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801216c:	9301      	str	r3, [sp, #4]
 801216e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012170:	9300      	str	r3, [sp, #0]
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	68b9      	ldr	r1, [r7, #8]
 8012176:	68f8      	ldr	r0, [r7, #12]
 8012178:	f000 f80e 	bl	8012198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801217c:	69f8      	ldr	r0, [r7, #28]
 801217e:	f000 f893 	bl	80122a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012182:	2301      	movs	r3, #1
 8012184:	61bb      	str	r3, [r7, #24]
 8012186:	e002      	b.n	801218e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012188:	f04f 33ff 	mov.w	r3, #4294967295
 801218c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801218e:	69bb      	ldr	r3, [r7, #24]
	}
 8012190:	4618      	mov	r0, r3
 8012192:	3720      	adds	r7, #32
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}

08012198 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b088      	sub	sp, #32
 801219c:	af00      	add	r7, sp, #0
 801219e:	60f8      	str	r0, [r7, #12]
 80121a0:	60b9      	str	r1, [r7, #8]
 80121a2:	607a      	str	r2, [r7, #4]
 80121a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80121a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	009b      	lsls	r3, r3, #2
 80121ae:	461a      	mov	r2, r3
 80121b0:	21a5      	movs	r1, #165	@ 0xa5
 80121b2:	f001 fe05 	bl	8013dc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80121b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80121c0:	3b01      	subs	r3, #1
 80121c2:	009b      	lsls	r3, r3, #2
 80121c4:	4413      	add	r3, r2
 80121c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80121c8:	69bb      	ldr	r3, [r7, #24]
 80121ca:	f023 0307 	bic.w	r3, r3, #7
 80121ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	f003 0307 	and.w	r3, r3, #7
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d00b      	beq.n	80121f2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80121da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121de:	f383 8811 	msr	BASEPRI, r3
 80121e2:	f3bf 8f6f 	isb	sy
 80121e6:	f3bf 8f4f 	dsb	sy
 80121ea:	617b      	str	r3, [r7, #20]
}
 80121ec:	bf00      	nop
 80121ee:	bf00      	nop
 80121f0:	e7fd      	b.n	80121ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80121f2:	2300      	movs	r3, #0
 80121f4:	61fb      	str	r3, [r7, #28]
 80121f6:	e012      	b.n	801221e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80121f8:	68ba      	ldr	r2, [r7, #8]
 80121fa:	69fb      	ldr	r3, [r7, #28]
 80121fc:	4413      	add	r3, r2
 80121fe:	7819      	ldrb	r1, [r3, #0]
 8012200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012202:	69fb      	ldr	r3, [r7, #28]
 8012204:	4413      	add	r3, r2
 8012206:	3334      	adds	r3, #52	@ 0x34
 8012208:	460a      	mov	r2, r1
 801220a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 801220c:	68ba      	ldr	r2, [r7, #8]
 801220e:	69fb      	ldr	r3, [r7, #28]
 8012210:	4413      	add	r3, r2
 8012212:	781b      	ldrb	r3, [r3, #0]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d006      	beq.n	8012226 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	3301      	adds	r3, #1
 801221c:	61fb      	str	r3, [r7, #28]
 801221e:	69fb      	ldr	r3, [r7, #28]
 8012220:	2b0f      	cmp	r3, #15
 8012222:	d9e9      	bls.n	80121f8 <prvInitialiseNewTask+0x60>
 8012224:	e000      	b.n	8012228 <prvInitialiseNewTask+0x90>
		{
			break;
 8012226:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801222a:	2200      	movs	r2, #0
 801222c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012232:	2b06      	cmp	r3, #6
 8012234:	d901      	bls.n	801223a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012236:	2306      	movs	r3, #6
 8012238:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801223a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801223c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801223e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012244:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012248:	2200      	movs	r2, #0
 801224a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801224c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801224e:	3304      	adds	r3, #4
 8012250:	4618      	mov	r0, r3
 8012252:	f7ff f88f 	bl	8011374 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012258:	3318      	adds	r3, #24
 801225a:	4618      	mov	r0, r3
 801225c:	f7ff f88a 	bl	8011374 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012264:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012268:	f1c3 0207 	rsb	r2, r3, #7
 801226c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801226e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012274:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012278:	2200      	movs	r2, #0
 801227a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801227c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801227e:	2200      	movs	r2, #0
 8012280:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012284:	683a      	ldr	r2, [r7, #0]
 8012286:	68f9      	ldr	r1, [r7, #12]
 8012288:	69b8      	ldr	r0, [r7, #24]
 801228a:	f001 f8fb 	bl	8013484 <pxPortInitialiseStack>
 801228e:	4602      	mov	r2, r0
 8012290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012292:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8012294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012296:	2b00      	cmp	r3, #0
 8012298:	d002      	beq.n	80122a0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801229a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801229c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801229e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80122a0:	bf00      	nop
 80122a2:	3720      	adds	r7, #32
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}

080122a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80122b0:	f001 f9dc 	bl	801366c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80122b4:	4b2a      	ldr	r3, [pc, #168]	@ (8012360 <prvAddNewTaskToReadyList+0xb8>)
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	3301      	adds	r3, #1
 80122ba:	4a29      	ldr	r2, [pc, #164]	@ (8012360 <prvAddNewTaskToReadyList+0xb8>)
 80122bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80122be:	4b29      	ldr	r3, [pc, #164]	@ (8012364 <prvAddNewTaskToReadyList+0xbc>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d109      	bne.n	80122da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80122c6:	4a27      	ldr	r2, [pc, #156]	@ (8012364 <prvAddNewTaskToReadyList+0xbc>)
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80122cc:	4b24      	ldr	r3, [pc, #144]	@ (8012360 <prvAddNewTaskToReadyList+0xb8>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d110      	bne.n	80122f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80122d4:	f000 fd94 	bl	8012e00 <prvInitialiseTaskLists>
 80122d8:	e00d      	b.n	80122f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80122da:	4b23      	ldr	r3, [pc, #140]	@ (8012368 <prvAddNewTaskToReadyList+0xc0>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d109      	bne.n	80122f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80122e2:	4b20      	ldr	r3, [pc, #128]	@ (8012364 <prvAddNewTaskToReadyList+0xbc>)
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122ec:	429a      	cmp	r2, r3
 80122ee:	d802      	bhi.n	80122f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80122f0:	4a1c      	ldr	r2, [pc, #112]	@ (8012364 <prvAddNewTaskToReadyList+0xbc>)
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80122f6:	4b1d      	ldr	r3, [pc, #116]	@ (801236c <prvAddNewTaskToReadyList+0xc4>)
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	3301      	adds	r3, #1
 80122fc:	4a1b      	ldr	r2, [pc, #108]	@ (801236c <prvAddNewTaskToReadyList+0xc4>)
 80122fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012304:	2201      	movs	r2, #1
 8012306:	409a      	lsls	r2, r3
 8012308:	4b19      	ldr	r3, [pc, #100]	@ (8012370 <prvAddNewTaskToReadyList+0xc8>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	4313      	orrs	r3, r2
 801230e:	4a18      	ldr	r2, [pc, #96]	@ (8012370 <prvAddNewTaskToReadyList+0xc8>)
 8012310:	6013      	str	r3, [r2, #0]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012316:	4613      	mov	r3, r2
 8012318:	009b      	lsls	r3, r3, #2
 801231a:	4413      	add	r3, r2
 801231c:	009b      	lsls	r3, r3, #2
 801231e:	4a15      	ldr	r2, [pc, #84]	@ (8012374 <prvAddNewTaskToReadyList+0xcc>)
 8012320:	441a      	add	r2, r3
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	3304      	adds	r3, #4
 8012326:	4619      	mov	r1, r3
 8012328:	4610      	mov	r0, r2
 801232a:	f7ff f82f 	bl	801138c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801232e:	f001 f9cd 	bl	80136cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012332:	4b0d      	ldr	r3, [pc, #52]	@ (8012368 <prvAddNewTaskToReadyList+0xc0>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d00e      	beq.n	8012358 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801233a:	4b0a      	ldr	r3, [pc, #40]	@ (8012364 <prvAddNewTaskToReadyList+0xbc>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012344:	429a      	cmp	r2, r3
 8012346:	d207      	bcs.n	8012358 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012348:	4b0b      	ldr	r3, [pc, #44]	@ (8012378 <prvAddNewTaskToReadyList+0xd0>)
 801234a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801234e:	601a      	str	r2, [r3, #0]
 8012350:	f3bf 8f4f 	dsb	sy
 8012354:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012358:	bf00      	nop
 801235a:	3708      	adds	r7, #8
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}
 8012360:	20001404 	.word	0x20001404
 8012364:	20001304 	.word	0x20001304
 8012368:	20001410 	.word	0x20001410
 801236c:	20001420 	.word	0x20001420
 8012370:	2000140c 	.word	0x2000140c
 8012374:	20001308 	.word	0x20001308
 8012378:	e000ed04 	.word	0xe000ed04

0801237c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801237c:	b580      	push	{r7, lr}
 801237e:	b08a      	sub	sp, #40	@ 0x28
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
 8012384:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8012386:	2300      	movs	r3, #0
 8012388:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d10b      	bne.n	80123a8 <vTaskDelayUntil+0x2c>
	__asm volatile
 8012390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012394:	f383 8811 	msr	BASEPRI, r3
 8012398:	f3bf 8f6f 	isb	sy
 801239c:	f3bf 8f4f 	dsb	sy
 80123a0:	617b      	str	r3, [r7, #20]
}
 80123a2:	bf00      	nop
 80123a4:	bf00      	nop
 80123a6:	e7fd      	b.n	80123a4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d10b      	bne.n	80123c6 <vTaskDelayUntil+0x4a>
	__asm volatile
 80123ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123b2:	f383 8811 	msr	BASEPRI, r3
 80123b6:	f3bf 8f6f 	isb	sy
 80123ba:	f3bf 8f4f 	dsb	sy
 80123be:	613b      	str	r3, [r7, #16]
}
 80123c0:	bf00      	nop
 80123c2:	bf00      	nop
 80123c4:	e7fd      	b.n	80123c2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80123c6:	4b2a      	ldr	r3, [pc, #168]	@ (8012470 <vTaskDelayUntil+0xf4>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d00b      	beq.n	80123e6 <vTaskDelayUntil+0x6a>
	__asm volatile
 80123ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123d2:	f383 8811 	msr	BASEPRI, r3
 80123d6:	f3bf 8f6f 	isb	sy
 80123da:	f3bf 8f4f 	dsb	sy
 80123de:	60fb      	str	r3, [r7, #12]
}
 80123e0:	bf00      	nop
 80123e2:	bf00      	nop
 80123e4:	e7fd      	b.n	80123e2 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80123e6:	f000 fa0f 	bl	8012808 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80123ea:	4b22      	ldr	r3, [pc, #136]	@ (8012474 <vTaskDelayUntil+0xf8>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	683a      	ldr	r2, [r7, #0]
 80123f6:	4413      	add	r3, r2
 80123f8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	6a3a      	ldr	r2, [r7, #32]
 8012400:	429a      	cmp	r2, r3
 8012402:	d20b      	bcs.n	801241c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	69fa      	ldr	r2, [r7, #28]
 801240a:	429a      	cmp	r2, r3
 801240c:	d211      	bcs.n	8012432 <vTaskDelayUntil+0xb6>
 801240e:	69fa      	ldr	r2, [r7, #28]
 8012410:	6a3b      	ldr	r3, [r7, #32]
 8012412:	429a      	cmp	r2, r3
 8012414:	d90d      	bls.n	8012432 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8012416:	2301      	movs	r3, #1
 8012418:	627b      	str	r3, [r7, #36]	@ 0x24
 801241a:	e00a      	b.n	8012432 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	69fa      	ldr	r2, [r7, #28]
 8012422:	429a      	cmp	r2, r3
 8012424:	d303      	bcc.n	801242e <vTaskDelayUntil+0xb2>
 8012426:	69fa      	ldr	r2, [r7, #28]
 8012428:	6a3b      	ldr	r3, [r7, #32]
 801242a:	429a      	cmp	r2, r3
 801242c:	d901      	bls.n	8012432 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801242e:	2301      	movs	r3, #1
 8012430:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	69fa      	ldr	r2, [r7, #28]
 8012436:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8012438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801243a:	2b00      	cmp	r3, #0
 801243c:	d006      	beq.n	801244c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801243e:	69fa      	ldr	r2, [r7, #28]
 8012440:	6a3b      	ldr	r3, [r7, #32]
 8012442:	1ad3      	subs	r3, r2, r3
 8012444:	2100      	movs	r1, #0
 8012446:	4618      	mov	r0, r3
 8012448:	f000 ffb6 	bl	80133b8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801244c:	f000 f9ea 	bl	8012824 <xTaskResumeAll>
 8012450:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012452:	69bb      	ldr	r3, [r7, #24]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d107      	bne.n	8012468 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8012458:	4b07      	ldr	r3, [pc, #28]	@ (8012478 <vTaskDelayUntil+0xfc>)
 801245a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801245e:	601a      	str	r2, [r3, #0]
 8012460:	f3bf 8f4f 	dsb	sy
 8012464:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012468:	bf00      	nop
 801246a:	3728      	adds	r7, #40	@ 0x28
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	2000142c 	.word	0x2000142c
 8012474:	20001408 	.word	0x20001408
 8012478:	e000ed04 	.word	0xe000ed04

0801247c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801247c:	b580      	push	{r7, lr}
 801247e:	b084      	sub	sp, #16
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012484:	2300      	movs	r3, #0
 8012486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d018      	beq.n	80124c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801248e:	4b14      	ldr	r3, [pc, #80]	@ (80124e0 <vTaskDelay+0x64>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d00b      	beq.n	80124ae <vTaskDelay+0x32>
	__asm volatile
 8012496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801249a:	f383 8811 	msr	BASEPRI, r3
 801249e:	f3bf 8f6f 	isb	sy
 80124a2:	f3bf 8f4f 	dsb	sy
 80124a6:	60bb      	str	r3, [r7, #8]
}
 80124a8:	bf00      	nop
 80124aa:	bf00      	nop
 80124ac:	e7fd      	b.n	80124aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80124ae:	f000 f9ab 	bl	8012808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80124b2:	2100      	movs	r1, #0
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f000 ff7f 	bl	80133b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80124ba:	f000 f9b3 	bl	8012824 <xTaskResumeAll>
 80124be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d107      	bne.n	80124d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80124c6:	4b07      	ldr	r3, [pc, #28]	@ (80124e4 <vTaskDelay+0x68>)
 80124c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80124cc:	601a      	str	r2, [r3, #0]
 80124ce:	f3bf 8f4f 	dsb	sy
 80124d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80124d6:	bf00      	nop
 80124d8:	3710      	adds	r7, #16
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	bf00      	nop
 80124e0:	2000142c 	.word	0x2000142c
 80124e4:	e000ed04 	.word	0xe000ed04

080124e8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b084      	sub	sp, #16
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80124f0:	f001 f8bc 	bl	801366c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d102      	bne.n	8012500 <vTaskSuspend+0x18>
 80124fa:	4b3d      	ldr	r3, [pc, #244]	@ (80125f0 <vTaskSuspend+0x108>)
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	e000      	b.n	8012502 <vTaskSuspend+0x1a>
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	3304      	adds	r3, #4
 8012508:	4618      	mov	r0, r3
 801250a:	f7fe ff9a 	bl	8011442 <uxListRemove>
 801250e:	4603      	mov	r3, r0
 8012510:	2b00      	cmp	r3, #0
 8012512:	d115      	bne.n	8012540 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012518:	4936      	ldr	r1, [pc, #216]	@ (80125f4 <vTaskSuspend+0x10c>)
 801251a:	4613      	mov	r3, r2
 801251c:	009b      	lsls	r3, r3, #2
 801251e:	4413      	add	r3, r2
 8012520:	009b      	lsls	r3, r3, #2
 8012522:	440b      	add	r3, r1
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d10a      	bne.n	8012540 <vTaskSuspend+0x58>
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801252e:	2201      	movs	r2, #1
 8012530:	fa02 f303 	lsl.w	r3, r2, r3
 8012534:	43da      	mvns	r2, r3
 8012536:	4b30      	ldr	r3, [pc, #192]	@ (80125f8 <vTaskSuspend+0x110>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	4013      	ands	r3, r2
 801253c:	4a2e      	ldr	r2, [pc, #184]	@ (80125f8 <vTaskSuspend+0x110>)
 801253e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012544:	2b00      	cmp	r3, #0
 8012546:	d004      	beq.n	8012552 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	3318      	adds	r3, #24
 801254c:	4618      	mov	r0, r3
 801254e:	f7fe ff78 	bl	8011442 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	3304      	adds	r3, #4
 8012556:	4619      	mov	r1, r3
 8012558:	4828      	ldr	r0, [pc, #160]	@ (80125fc <vTaskSuspend+0x114>)
 801255a:	f7fe ff17 	bl	801138c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8012564:	b2db      	uxtb	r3, r3
 8012566:	2b01      	cmp	r3, #1
 8012568:	d103      	bne.n	8012572 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	2200      	movs	r2, #0
 801256e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8012572:	f001 f8ab 	bl	80136cc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8012576:	4b22      	ldr	r3, [pc, #136]	@ (8012600 <vTaskSuspend+0x118>)
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d005      	beq.n	801258a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801257e:	f001 f875 	bl	801366c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8012582:	f000 fd13 	bl	8012fac <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8012586:	f001 f8a1 	bl	80136cc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801258a:	4b19      	ldr	r3, [pc, #100]	@ (80125f0 <vTaskSuspend+0x108>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	68fa      	ldr	r2, [r7, #12]
 8012590:	429a      	cmp	r2, r3
 8012592:	d128      	bne.n	80125e6 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8012594:	4b1a      	ldr	r3, [pc, #104]	@ (8012600 <vTaskSuspend+0x118>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d018      	beq.n	80125ce <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801259c:	4b19      	ldr	r3, [pc, #100]	@ (8012604 <vTaskSuspend+0x11c>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d00b      	beq.n	80125bc <vTaskSuspend+0xd4>
	__asm volatile
 80125a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125a8:	f383 8811 	msr	BASEPRI, r3
 80125ac:	f3bf 8f6f 	isb	sy
 80125b0:	f3bf 8f4f 	dsb	sy
 80125b4:	60bb      	str	r3, [r7, #8]
}
 80125b6:	bf00      	nop
 80125b8:	bf00      	nop
 80125ba:	e7fd      	b.n	80125b8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80125bc:	4b12      	ldr	r3, [pc, #72]	@ (8012608 <vTaskSuspend+0x120>)
 80125be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80125c2:	601a      	str	r2, [r3, #0]
 80125c4:	f3bf 8f4f 	dsb	sy
 80125c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80125cc:	e00b      	b.n	80125e6 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80125ce:	4b0b      	ldr	r3, [pc, #44]	@ (80125fc <vTaskSuspend+0x114>)
 80125d0:	681a      	ldr	r2, [r3, #0]
 80125d2:	4b0e      	ldr	r3, [pc, #56]	@ (801260c <vTaskSuspend+0x124>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d103      	bne.n	80125e2 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 80125da:	4b05      	ldr	r3, [pc, #20]	@ (80125f0 <vTaskSuspend+0x108>)
 80125dc:	2200      	movs	r2, #0
 80125de:	601a      	str	r2, [r3, #0]
	}
 80125e0:	e001      	b.n	80125e6 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 80125e2:	f000 fa89 	bl	8012af8 <vTaskSwitchContext>
	}
 80125e6:	bf00      	nop
 80125e8:	3710      	adds	r7, #16
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
 80125ee:	bf00      	nop
 80125f0:	20001304 	.word	0x20001304
 80125f4:	20001308 	.word	0x20001308
 80125f8:	2000140c 	.word	0x2000140c
 80125fc:	200013f0 	.word	0x200013f0
 8012600:	20001410 	.word	0x20001410
 8012604:	2000142c 	.word	0x2000142c
 8012608:	e000ed04 	.word	0xe000ed04
 801260c:	20001404 	.word	0x20001404

08012610 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8012610:	b480      	push	{r7}
 8012612:	b087      	sub	sp, #28
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8012618:	2300      	movs	r3, #0
 801261a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d10b      	bne.n	801263e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8012626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801262a:	f383 8811 	msr	BASEPRI, r3
 801262e:	f3bf 8f6f 	isb	sy
 8012632:	f3bf 8f4f 	dsb	sy
 8012636:	60fb      	str	r3, [r7, #12]
}
 8012638:	bf00      	nop
 801263a:	bf00      	nop
 801263c:	e7fd      	b.n	801263a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801263e:	693b      	ldr	r3, [r7, #16]
 8012640:	695b      	ldr	r3, [r3, #20]
 8012642:	4a0f      	ldr	r2, [pc, #60]	@ (8012680 <prvTaskIsTaskSuspended+0x70>)
 8012644:	4293      	cmp	r3, r2
 8012646:	d101      	bne.n	801264c <prvTaskIsTaskSuspended+0x3c>
 8012648:	2301      	movs	r3, #1
 801264a:	e000      	b.n	801264e <prvTaskIsTaskSuspended+0x3e>
 801264c:	2300      	movs	r3, #0
 801264e:	2b00      	cmp	r3, #0
 8012650:	d00f      	beq.n	8012672 <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8012652:	693b      	ldr	r3, [r7, #16]
 8012654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012656:	4a0b      	ldr	r2, [pc, #44]	@ (8012684 <prvTaskIsTaskSuspended+0x74>)
 8012658:	4293      	cmp	r3, r2
 801265a:	d00a      	beq.n	8012672 <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801265c:	693b      	ldr	r3, [r7, #16]
 801265e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012660:	2b00      	cmp	r3, #0
 8012662:	d101      	bne.n	8012668 <prvTaskIsTaskSuspended+0x58>
 8012664:	2301      	movs	r3, #1
 8012666:	e000      	b.n	801266a <prvTaskIsTaskSuspended+0x5a>
 8012668:	2300      	movs	r3, #0
 801266a:	2b00      	cmp	r3, #0
 801266c:	d001      	beq.n	8012672 <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 801266e:	2301      	movs	r3, #1
 8012670:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012672:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012674:	4618      	mov	r0, r3
 8012676:	371c      	adds	r7, #28
 8012678:	46bd      	mov	sp, r7
 801267a:	bc80      	pop	{r7}
 801267c:	4770      	bx	lr
 801267e:	bf00      	nop
 8012680:	200013f0 	.word	0x200013f0
 8012684:	200013c4 	.word	0x200013c4

08012688 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8012688:	b580      	push	{r7, lr}
 801268a:	b084      	sub	sp, #16
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d10b      	bne.n	80126b2 <vTaskResume+0x2a>
	__asm volatile
 801269a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801269e:	f383 8811 	msr	BASEPRI, r3
 80126a2:	f3bf 8f6f 	isb	sy
 80126a6:	f3bf 8f4f 	dsb	sy
 80126aa:	60bb      	str	r3, [r7, #8]
}
 80126ac:	bf00      	nop
 80126ae:	bf00      	nop
 80126b0:	e7fd      	b.n	80126ae <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d039      	beq.n	801272c <vTaskResume+0xa4>
 80126b8:	4b1e      	ldr	r3, [pc, #120]	@ (8012734 <vTaskResume+0xac>)
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	68fa      	ldr	r2, [r7, #12]
 80126be:	429a      	cmp	r2, r3
 80126c0:	d034      	beq.n	801272c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80126c2:	f000 ffd3 	bl	801366c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80126c6:	68f8      	ldr	r0, [r7, #12]
 80126c8:	f7ff ffa2 	bl	8012610 <prvTaskIsTaskSuspended>
 80126cc:	4603      	mov	r3, r0
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d02a      	beq.n	8012728 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	3304      	adds	r3, #4
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7fe feb3 	bl	8011442 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126e0:	2201      	movs	r2, #1
 80126e2:	409a      	lsls	r2, r3
 80126e4:	4b14      	ldr	r3, [pc, #80]	@ (8012738 <vTaskResume+0xb0>)
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	4313      	orrs	r3, r2
 80126ea:	4a13      	ldr	r2, [pc, #76]	@ (8012738 <vTaskResume+0xb0>)
 80126ec:	6013      	str	r3, [r2, #0]
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80126f2:	4613      	mov	r3, r2
 80126f4:	009b      	lsls	r3, r3, #2
 80126f6:	4413      	add	r3, r2
 80126f8:	009b      	lsls	r3, r3, #2
 80126fa:	4a10      	ldr	r2, [pc, #64]	@ (801273c <vTaskResume+0xb4>)
 80126fc:	441a      	add	r2, r3
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	3304      	adds	r3, #4
 8012702:	4619      	mov	r1, r3
 8012704:	4610      	mov	r0, r2
 8012706:	f7fe fe41 	bl	801138c <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801270e:	4b09      	ldr	r3, [pc, #36]	@ (8012734 <vTaskResume+0xac>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012714:	429a      	cmp	r2, r3
 8012716:	d307      	bcc.n	8012728 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8012718:	4b09      	ldr	r3, [pc, #36]	@ (8012740 <vTaskResume+0xb8>)
 801271a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801271e:	601a      	str	r2, [r3, #0]
 8012720:	f3bf 8f4f 	dsb	sy
 8012724:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8012728:	f000 ffd0 	bl	80136cc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801272c:	bf00      	nop
 801272e:	3710      	adds	r7, #16
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}
 8012734:	20001304 	.word	0x20001304
 8012738:	2000140c 	.word	0x2000140c
 801273c:	20001308 	.word	0x20001308
 8012740:	e000ed04 	.word	0xe000ed04

08012744 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b08a      	sub	sp, #40	@ 0x28
 8012748:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801274a:	2300      	movs	r3, #0
 801274c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801274e:	2300      	movs	r3, #0
 8012750:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012752:	463a      	mov	r2, r7
 8012754:	1d39      	adds	r1, r7, #4
 8012756:	f107 0308 	add.w	r3, r7, #8
 801275a:	4618      	mov	r0, r3
 801275c:	f7f1 faf2 	bl	8003d44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012760:	6839      	ldr	r1, [r7, #0]
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	68ba      	ldr	r2, [r7, #8]
 8012766:	9202      	str	r2, [sp, #8]
 8012768:	9301      	str	r3, [sp, #4]
 801276a:	2300      	movs	r3, #0
 801276c:	9300      	str	r3, [sp, #0]
 801276e:	2300      	movs	r3, #0
 8012770:	460a      	mov	r2, r1
 8012772:	491f      	ldr	r1, [pc, #124]	@ (80127f0 <vTaskStartScheduler+0xac>)
 8012774:	481f      	ldr	r0, [pc, #124]	@ (80127f4 <vTaskStartScheduler+0xb0>)
 8012776:	f7ff fc6b 	bl	8012050 <xTaskCreateStatic>
 801277a:	4603      	mov	r3, r0
 801277c:	4a1e      	ldr	r2, [pc, #120]	@ (80127f8 <vTaskStartScheduler+0xb4>)
 801277e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012780:	4b1d      	ldr	r3, [pc, #116]	@ (80127f8 <vTaskStartScheduler+0xb4>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d002      	beq.n	801278e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012788:	2301      	movs	r3, #1
 801278a:	617b      	str	r3, [r7, #20]
 801278c:	e001      	b.n	8012792 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801278e:	2300      	movs	r3, #0
 8012790:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	2b01      	cmp	r3, #1
 8012796:	d116      	bne.n	80127c6 <vTaskStartScheduler+0x82>
	__asm volatile
 8012798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801279c:	f383 8811 	msr	BASEPRI, r3
 80127a0:	f3bf 8f6f 	isb	sy
 80127a4:	f3bf 8f4f 	dsb	sy
 80127a8:	613b      	str	r3, [r7, #16]
}
 80127aa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80127ac:	4b13      	ldr	r3, [pc, #76]	@ (80127fc <vTaskStartScheduler+0xb8>)
 80127ae:	f04f 32ff 	mov.w	r2, #4294967295
 80127b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80127b4:	4b12      	ldr	r3, [pc, #72]	@ (8012800 <vTaskStartScheduler+0xbc>)
 80127b6:	2201      	movs	r2, #1
 80127b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80127ba:	4b12      	ldr	r3, [pc, #72]	@ (8012804 <vTaskStartScheduler+0xc0>)
 80127bc:	2200      	movs	r2, #0
 80127be:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80127c0:	f000 fee2 	bl	8013588 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80127c4:	e00f      	b.n	80127e6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127cc:	d10b      	bne.n	80127e6 <vTaskStartScheduler+0xa2>
	__asm volatile
 80127ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127d2:	f383 8811 	msr	BASEPRI, r3
 80127d6:	f3bf 8f6f 	isb	sy
 80127da:	f3bf 8f4f 	dsb	sy
 80127de:	60fb      	str	r3, [r7, #12]
}
 80127e0:	bf00      	nop
 80127e2:	bf00      	nop
 80127e4:	e7fd      	b.n	80127e2 <vTaskStartScheduler+0x9e>
}
 80127e6:	bf00      	nop
 80127e8:	3718      	adds	r7, #24
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}
 80127ee:	bf00      	nop
 80127f0:	080142b4 	.word	0x080142b4
 80127f4:	08012dd1 	.word	0x08012dd1
 80127f8:	20001428 	.word	0x20001428
 80127fc:	20001424 	.word	0x20001424
 8012800:	20001410 	.word	0x20001410
 8012804:	20001408 	.word	0x20001408

08012808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012808:	b480      	push	{r7}
 801280a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801280c:	4b04      	ldr	r3, [pc, #16]	@ (8012820 <vTaskSuspendAll+0x18>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	3301      	adds	r3, #1
 8012812:	4a03      	ldr	r2, [pc, #12]	@ (8012820 <vTaskSuspendAll+0x18>)
 8012814:	6013      	str	r3, [r2, #0]
}
 8012816:	bf00      	nop
 8012818:	46bd      	mov	sp, r7
 801281a:	bc80      	pop	{r7}
 801281c:	4770      	bx	lr
 801281e:	bf00      	nop
 8012820:	2000142c 	.word	0x2000142c

08012824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801282a:	2300      	movs	r3, #0
 801282c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801282e:	2300      	movs	r3, #0
 8012830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012832:	4b42      	ldr	r3, [pc, #264]	@ (801293c <xTaskResumeAll+0x118>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d10b      	bne.n	8012852 <xTaskResumeAll+0x2e>
	__asm volatile
 801283a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801283e:	f383 8811 	msr	BASEPRI, r3
 8012842:	f3bf 8f6f 	isb	sy
 8012846:	f3bf 8f4f 	dsb	sy
 801284a:	603b      	str	r3, [r7, #0]
}
 801284c:	bf00      	nop
 801284e:	bf00      	nop
 8012850:	e7fd      	b.n	801284e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012852:	f000 ff0b 	bl	801366c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012856:	4b39      	ldr	r3, [pc, #228]	@ (801293c <xTaskResumeAll+0x118>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	3b01      	subs	r3, #1
 801285c:	4a37      	ldr	r2, [pc, #220]	@ (801293c <xTaskResumeAll+0x118>)
 801285e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012860:	4b36      	ldr	r3, [pc, #216]	@ (801293c <xTaskResumeAll+0x118>)
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d161      	bne.n	801292c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012868:	4b35      	ldr	r3, [pc, #212]	@ (8012940 <xTaskResumeAll+0x11c>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d05d      	beq.n	801292c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012870:	e02e      	b.n	80128d0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8012872:	4b34      	ldr	r3, [pc, #208]	@ (8012944 <xTaskResumeAll+0x120>)
 8012874:	68db      	ldr	r3, [r3, #12]
 8012876:	68db      	ldr	r3, [r3, #12]
 8012878:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	3318      	adds	r3, #24
 801287e:	4618      	mov	r0, r3
 8012880:	f7fe fddf 	bl	8011442 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	3304      	adds	r3, #4
 8012888:	4618      	mov	r0, r3
 801288a:	f7fe fdda 	bl	8011442 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012892:	2201      	movs	r2, #1
 8012894:	409a      	lsls	r2, r3
 8012896:	4b2c      	ldr	r3, [pc, #176]	@ (8012948 <xTaskResumeAll+0x124>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	4313      	orrs	r3, r2
 801289c:	4a2a      	ldr	r2, [pc, #168]	@ (8012948 <xTaskResumeAll+0x124>)
 801289e:	6013      	str	r3, [r2, #0]
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128a4:	4613      	mov	r3, r2
 80128a6:	009b      	lsls	r3, r3, #2
 80128a8:	4413      	add	r3, r2
 80128aa:	009b      	lsls	r3, r3, #2
 80128ac:	4a27      	ldr	r2, [pc, #156]	@ (801294c <xTaskResumeAll+0x128>)
 80128ae:	441a      	add	r2, r3
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	3304      	adds	r3, #4
 80128b4:	4619      	mov	r1, r3
 80128b6:	4610      	mov	r0, r2
 80128b8:	f7fe fd68 	bl	801138c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128c0:	4b23      	ldr	r3, [pc, #140]	@ (8012950 <xTaskResumeAll+0x12c>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d302      	bcc.n	80128d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80128ca:	4b22      	ldr	r3, [pc, #136]	@ (8012954 <xTaskResumeAll+0x130>)
 80128cc:	2201      	movs	r2, #1
 80128ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80128d0:	4b1c      	ldr	r3, [pc, #112]	@ (8012944 <xTaskResumeAll+0x120>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d1cc      	bne.n	8012872 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d001      	beq.n	80128e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80128de:	f000 fb65 	bl	8012fac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80128e2:	4b1d      	ldr	r3, [pc, #116]	@ (8012958 <xTaskResumeAll+0x134>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d010      	beq.n	8012910 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80128ee:	f000 f845 	bl	801297c <xTaskIncrementTick>
 80128f2:	4603      	mov	r3, r0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d002      	beq.n	80128fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80128f8:	4b16      	ldr	r3, [pc, #88]	@ (8012954 <xTaskResumeAll+0x130>)
 80128fa:	2201      	movs	r2, #1
 80128fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	3b01      	subs	r3, #1
 8012902:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d1f1      	bne.n	80128ee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 801290a:	4b13      	ldr	r3, [pc, #76]	@ (8012958 <xTaskResumeAll+0x134>)
 801290c:	2200      	movs	r2, #0
 801290e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012910:	4b10      	ldr	r3, [pc, #64]	@ (8012954 <xTaskResumeAll+0x130>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d009      	beq.n	801292c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012918:	2301      	movs	r3, #1
 801291a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801291c:	4b0f      	ldr	r3, [pc, #60]	@ (801295c <xTaskResumeAll+0x138>)
 801291e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012922:	601a      	str	r2, [r3, #0]
 8012924:	f3bf 8f4f 	dsb	sy
 8012928:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801292c:	f000 fece 	bl	80136cc <vPortExitCritical>

	return xAlreadyYielded;
 8012930:	68bb      	ldr	r3, [r7, #8]
}
 8012932:	4618      	mov	r0, r3
 8012934:	3710      	adds	r7, #16
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}
 801293a:	bf00      	nop
 801293c:	2000142c 	.word	0x2000142c
 8012940:	20001404 	.word	0x20001404
 8012944:	200013c4 	.word	0x200013c4
 8012948:	2000140c 	.word	0x2000140c
 801294c:	20001308 	.word	0x20001308
 8012950:	20001304 	.word	0x20001304
 8012954:	20001418 	.word	0x20001418
 8012958:	20001414 	.word	0x20001414
 801295c:	e000ed04 	.word	0xe000ed04

08012960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012960:	b480      	push	{r7}
 8012962:	b083      	sub	sp, #12
 8012964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012966:	4b04      	ldr	r3, [pc, #16]	@ (8012978 <xTaskGetTickCount+0x18>)
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801296c:	687b      	ldr	r3, [r7, #4]
}
 801296e:	4618      	mov	r0, r3
 8012970:	370c      	adds	r7, #12
 8012972:	46bd      	mov	sp, r7
 8012974:	bc80      	pop	{r7}
 8012976:	4770      	bx	lr
 8012978:	20001408 	.word	0x20001408

0801297c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b086      	sub	sp, #24
 8012980:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012982:	2300      	movs	r3, #0
 8012984:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012986:	4b51      	ldr	r3, [pc, #324]	@ (8012acc <xTaskIncrementTick+0x150>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	2b00      	cmp	r3, #0
 801298c:	f040 808e 	bne.w	8012aac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012990:	4b4f      	ldr	r3, [pc, #316]	@ (8012ad0 <xTaskIncrementTick+0x154>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	3301      	adds	r3, #1
 8012996:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012998:	4a4d      	ldr	r2, [pc, #308]	@ (8012ad0 <xTaskIncrementTick+0x154>)
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d121      	bne.n	80129e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80129a4:	4b4b      	ldr	r3, [pc, #300]	@ (8012ad4 <xTaskIncrementTick+0x158>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d00b      	beq.n	80129c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80129ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129b2:	f383 8811 	msr	BASEPRI, r3
 80129b6:	f3bf 8f6f 	isb	sy
 80129ba:	f3bf 8f4f 	dsb	sy
 80129be:	603b      	str	r3, [r7, #0]
}
 80129c0:	bf00      	nop
 80129c2:	bf00      	nop
 80129c4:	e7fd      	b.n	80129c2 <xTaskIncrementTick+0x46>
 80129c6:	4b43      	ldr	r3, [pc, #268]	@ (8012ad4 <xTaskIncrementTick+0x158>)
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	60fb      	str	r3, [r7, #12]
 80129cc:	4b42      	ldr	r3, [pc, #264]	@ (8012ad8 <xTaskIncrementTick+0x15c>)
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	4a40      	ldr	r2, [pc, #256]	@ (8012ad4 <xTaskIncrementTick+0x158>)
 80129d2:	6013      	str	r3, [r2, #0]
 80129d4:	4a40      	ldr	r2, [pc, #256]	@ (8012ad8 <xTaskIncrementTick+0x15c>)
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	6013      	str	r3, [r2, #0]
 80129da:	4b40      	ldr	r3, [pc, #256]	@ (8012adc <xTaskIncrementTick+0x160>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	3301      	adds	r3, #1
 80129e0:	4a3e      	ldr	r2, [pc, #248]	@ (8012adc <xTaskIncrementTick+0x160>)
 80129e2:	6013      	str	r3, [r2, #0]
 80129e4:	f000 fae2 	bl	8012fac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80129e8:	4b3d      	ldr	r3, [pc, #244]	@ (8012ae0 <xTaskIncrementTick+0x164>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	693a      	ldr	r2, [r7, #16]
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d34d      	bcc.n	8012a8e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80129f2:	4b38      	ldr	r3, [pc, #224]	@ (8012ad4 <xTaskIncrementTick+0x158>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d101      	bne.n	8012a00 <xTaskIncrementTick+0x84>
 80129fc:	2301      	movs	r3, #1
 80129fe:	e000      	b.n	8012a02 <xTaskIncrementTick+0x86>
 8012a00:	2300      	movs	r3, #0
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d004      	beq.n	8012a10 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a06:	4b36      	ldr	r3, [pc, #216]	@ (8012ae0 <xTaskIncrementTick+0x164>)
 8012a08:	f04f 32ff 	mov.w	r2, #4294967295
 8012a0c:	601a      	str	r2, [r3, #0]
					break;
 8012a0e:	e03e      	b.n	8012a8e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012a10:	4b30      	ldr	r3, [pc, #192]	@ (8012ad4 <xTaskIncrementTick+0x158>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	68db      	ldr	r3, [r3, #12]
 8012a16:	68db      	ldr	r3, [r3, #12]
 8012a18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012a20:	693a      	ldr	r2, [r7, #16]
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d203      	bcs.n	8012a30 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012a28:	4a2d      	ldr	r2, [pc, #180]	@ (8012ae0 <xTaskIncrementTick+0x164>)
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	6013      	str	r3, [r2, #0]
						break;
 8012a2e:	e02e      	b.n	8012a8e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	3304      	adds	r3, #4
 8012a34:	4618      	mov	r0, r3
 8012a36:	f7fe fd04 	bl	8011442 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012a3a:	68bb      	ldr	r3, [r7, #8]
 8012a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d004      	beq.n	8012a4c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	3318      	adds	r3, #24
 8012a46:	4618      	mov	r0, r3
 8012a48:	f7fe fcfb 	bl	8011442 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a50:	2201      	movs	r2, #1
 8012a52:	409a      	lsls	r2, r3
 8012a54:	4b23      	ldr	r3, [pc, #140]	@ (8012ae4 <xTaskIncrementTick+0x168>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	4313      	orrs	r3, r2
 8012a5a:	4a22      	ldr	r2, [pc, #136]	@ (8012ae4 <xTaskIncrementTick+0x168>)
 8012a5c:	6013      	str	r3, [r2, #0]
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a62:	4613      	mov	r3, r2
 8012a64:	009b      	lsls	r3, r3, #2
 8012a66:	4413      	add	r3, r2
 8012a68:	009b      	lsls	r3, r3, #2
 8012a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8012ae8 <xTaskIncrementTick+0x16c>)
 8012a6c:	441a      	add	r2, r3
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	3304      	adds	r3, #4
 8012a72:	4619      	mov	r1, r3
 8012a74:	4610      	mov	r0, r2
 8012a76:	f7fe fc89 	bl	801138c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8012aec <xTaskIncrementTick+0x170>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d3b4      	bcc.n	80129f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012a88:	2301      	movs	r3, #1
 8012a8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012a8c:	e7b1      	b.n	80129f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012a8e:	4b17      	ldr	r3, [pc, #92]	@ (8012aec <xTaskIncrementTick+0x170>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a94:	4914      	ldr	r1, [pc, #80]	@ (8012ae8 <xTaskIncrementTick+0x16c>)
 8012a96:	4613      	mov	r3, r2
 8012a98:	009b      	lsls	r3, r3, #2
 8012a9a:	4413      	add	r3, r2
 8012a9c:	009b      	lsls	r3, r3, #2
 8012a9e:	440b      	add	r3, r1
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	2b01      	cmp	r3, #1
 8012aa4:	d907      	bls.n	8012ab6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	617b      	str	r3, [r7, #20]
 8012aaa:	e004      	b.n	8012ab6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012aac:	4b10      	ldr	r3, [pc, #64]	@ (8012af0 <xTaskIncrementTick+0x174>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	3301      	adds	r3, #1
 8012ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8012af0 <xTaskIncrementTick+0x174>)
 8012ab4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8012af4 <xTaskIncrementTick+0x178>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d001      	beq.n	8012ac2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8012abe:	2301      	movs	r3, #1
 8012ac0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012ac2:	697b      	ldr	r3, [r7, #20]
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3718      	adds	r7, #24
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}
 8012acc:	2000142c 	.word	0x2000142c
 8012ad0:	20001408 	.word	0x20001408
 8012ad4:	200013bc 	.word	0x200013bc
 8012ad8:	200013c0 	.word	0x200013c0
 8012adc:	2000141c 	.word	0x2000141c
 8012ae0:	20001424 	.word	0x20001424
 8012ae4:	2000140c 	.word	0x2000140c
 8012ae8:	20001308 	.word	0x20001308
 8012aec:	20001304 	.word	0x20001304
 8012af0:	20001414 	.word	0x20001414
 8012af4:	20001418 	.word	0x20001418

08012af8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012af8:	b480      	push	{r7}
 8012afa:	b087      	sub	sp, #28
 8012afc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012afe:	4b27      	ldr	r3, [pc, #156]	@ (8012b9c <vTaskSwitchContext+0xa4>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d003      	beq.n	8012b0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012b06:	4b26      	ldr	r3, [pc, #152]	@ (8012ba0 <vTaskSwitchContext+0xa8>)
 8012b08:	2201      	movs	r2, #1
 8012b0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012b0c:	e040      	b.n	8012b90 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8012b0e:	4b24      	ldr	r3, [pc, #144]	@ (8012ba0 <vTaskSwitchContext+0xa8>)
 8012b10:	2200      	movs	r2, #0
 8012b12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8012b14:	4b23      	ldr	r3, [pc, #140]	@ (8012ba4 <vTaskSwitchContext+0xac>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	fab3 f383 	clz	r3, r3
 8012b20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012b22:	7afb      	ldrb	r3, [r7, #11]
 8012b24:	f1c3 031f 	rsb	r3, r3, #31
 8012b28:	617b      	str	r3, [r7, #20]
 8012b2a:	491f      	ldr	r1, [pc, #124]	@ (8012ba8 <vTaskSwitchContext+0xb0>)
 8012b2c:	697a      	ldr	r2, [r7, #20]
 8012b2e:	4613      	mov	r3, r2
 8012b30:	009b      	lsls	r3, r3, #2
 8012b32:	4413      	add	r3, r2
 8012b34:	009b      	lsls	r3, r3, #2
 8012b36:	440b      	add	r3, r1
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d10b      	bne.n	8012b56 <vTaskSwitchContext+0x5e>
	__asm volatile
 8012b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b42:	f383 8811 	msr	BASEPRI, r3
 8012b46:	f3bf 8f6f 	isb	sy
 8012b4a:	f3bf 8f4f 	dsb	sy
 8012b4e:	607b      	str	r3, [r7, #4]
}
 8012b50:	bf00      	nop
 8012b52:	bf00      	nop
 8012b54:	e7fd      	b.n	8012b52 <vTaskSwitchContext+0x5a>
 8012b56:	697a      	ldr	r2, [r7, #20]
 8012b58:	4613      	mov	r3, r2
 8012b5a:	009b      	lsls	r3, r3, #2
 8012b5c:	4413      	add	r3, r2
 8012b5e:	009b      	lsls	r3, r3, #2
 8012b60:	4a11      	ldr	r2, [pc, #68]	@ (8012ba8 <vTaskSwitchContext+0xb0>)
 8012b62:	4413      	add	r3, r2
 8012b64:	613b      	str	r3, [r7, #16]
 8012b66:	693b      	ldr	r3, [r7, #16]
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	685a      	ldr	r2, [r3, #4]
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	605a      	str	r2, [r3, #4]
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	685a      	ldr	r2, [r3, #4]
 8012b74:	693b      	ldr	r3, [r7, #16]
 8012b76:	3308      	adds	r3, #8
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d104      	bne.n	8012b86 <vTaskSwitchContext+0x8e>
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	685b      	ldr	r3, [r3, #4]
 8012b80:	685a      	ldr	r2, [r3, #4]
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	605a      	str	r2, [r3, #4]
 8012b86:	693b      	ldr	r3, [r7, #16]
 8012b88:	685b      	ldr	r3, [r3, #4]
 8012b8a:	68db      	ldr	r3, [r3, #12]
 8012b8c:	4a07      	ldr	r2, [pc, #28]	@ (8012bac <vTaskSwitchContext+0xb4>)
 8012b8e:	6013      	str	r3, [r2, #0]
}
 8012b90:	bf00      	nop
 8012b92:	371c      	adds	r7, #28
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bc80      	pop	{r7}
 8012b98:	4770      	bx	lr
 8012b9a:	bf00      	nop
 8012b9c:	2000142c 	.word	0x2000142c
 8012ba0:	20001418 	.word	0x20001418
 8012ba4:	2000140c 	.word	0x2000140c
 8012ba8:	20001308 	.word	0x20001308
 8012bac:	20001304 	.word	0x20001304

08012bb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b084      	sub	sp, #16
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d10b      	bne.n	8012bd8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8012bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bc4:	f383 8811 	msr	BASEPRI, r3
 8012bc8:	f3bf 8f6f 	isb	sy
 8012bcc:	f3bf 8f4f 	dsb	sy
 8012bd0:	60fb      	str	r3, [r7, #12]
}
 8012bd2:	bf00      	nop
 8012bd4:	bf00      	nop
 8012bd6:	e7fd      	b.n	8012bd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012bd8:	4b07      	ldr	r3, [pc, #28]	@ (8012bf8 <vTaskPlaceOnEventList+0x48>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	3318      	adds	r3, #24
 8012bde:	4619      	mov	r1, r3
 8012be0:	6878      	ldr	r0, [r7, #4]
 8012be2:	f7fe fbf6 	bl	80113d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012be6:	2101      	movs	r1, #1
 8012be8:	6838      	ldr	r0, [r7, #0]
 8012bea:	f000 fbe5 	bl	80133b8 <prvAddCurrentTaskToDelayedList>
}
 8012bee:	bf00      	nop
 8012bf0:	3710      	adds	r7, #16
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}
 8012bf6:	bf00      	nop
 8012bf8:	20001304 	.word	0x20001304

08012bfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b086      	sub	sp, #24
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	68db      	ldr	r3, [r3, #12]
 8012c08:	68db      	ldr	r3, [r3, #12]
 8012c0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012c0c:	693b      	ldr	r3, [r7, #16]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d10b      	bne.n	8012c2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8012c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c16:	f383 8811 	msr	BASEPRI, r3
 8012c1a:	f3bf 8f6f 	isb	sy
 8012c1e:	f3bf 8f4f 	dsb	sy
 8012c22:	60fb      	str	r3, [r7, #12]
}
 8012c24:	bf00      	nop
 8012c26:	bf00      	nop
 8012c28:	e7fd      	b.n	8012c26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012c2a:	693b      	ldr	r3, [r7, #16]
 8012c2c:	3318      	adds	r3, #24
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7fe fc07 	bl	8011442 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012c34:	4b1d      	ldr	r3, [pc, #116]	@ (8012cac <xTaskRemoveFromEventList+0xb0>)
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d11c      	bne.n	8012c76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012c3c:	693b      	ldr	r3, [r7, #16]
 8012c3e:	3304      	adds	r3, #4
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7fe fbfe 	bl	8011442 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c4a:	2201      	movs	r2, #1
 8012c4c:	409a      	lsls	r2, r3
 8012c4e:	4b18      	ldr	r3, [pc, #96]	@ (8012cb0 <xTaskRemoveFromEventList+0xb4>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	4313      	orrs	r3, r2
 8012c54:	4a16      	ldr	r2, [pc, #88]	@ (8012cb0 <xTaskRemoveFromEventList+0xb4>)
 8012c56:	6013      	str	r3, [r2, #0]
 8012c58:	693b      	ldr	r3, [r7, #16]
 8012c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c5c:	4613      	mov	r3, r2
 8012c5e:	009b      	lsls	r3, r3, #2
 8012c60:	4413      	add	r3, r2
 8012c62:	009b      	lsls	r3, r3, #2
 8012c64:	4a13      	ldr	r2, [pc, #76]	@ (8012cb4 <xTaskRemoveFromEventList+0xb8>)
 8012c66:	441a      	add	r2, r3
 8012c68:	693b      	ldr	r3, [r7, #16]
 8012c6a:	3304      	adds	r3, #4
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	4610      	mov	r0, r2
 8012c70:	f7fe fb8c 	bl	801138c <vListInsertEnd>
 8012c74:	e005      	b.n	8012c82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012c76:	693b      	ldr	r3, [r7, #16]
 8012c78:	3318      	adds	r3, #24
 8012c7a:	4619      	mov	r1, r3
 8012c7c:	480e      	ldr	r0, [pc, #56]	@ (8012cb8 <xTaskRemoveFromEventList+0xbc>)
 8012c7e:	f7fe fb85 	bl	801138c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c86:	4b0d      	ldr	r3, [pc, #52]	@ (8012cbc <xTaskRemoveFromEventList+0xc0>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	d905      	bls.n	8012c9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012c90:	2301      	movs	r3, #1
 8012c92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012c94:	4b0a      	ldr	r3, [pc, #40]	@ (8012cc0 <xTaskRemoveFromEventList+0xc4>)
 8012c96:	2201      	movs	r2, #1
 8012c98:	601a      	str	r2, [r3, #0]
 8012c9a:	e001      	b.n	8012ca0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8012ca0:	697b      	ldr	r3, [r7, #20]
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3718      	adds	r7, #24
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}
 8012caa:	bf00      	nop
 8012cac:	2000142c 	.word	0x2000142c
 8012cb0:	2000140c 	.word	0x2000140c
 8012cb4:	20001308 	.word	0x20001308
 8012cb8:	200013c4 	.word	0x200013c4
 8012cbc:	20001304 	.word	0x20001304
 8012cc0:	20001418 	.word	0x20001418

08012cc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012cc4:	b480      	push	{r7}
 8012cc6:	b083      	sub	sp, #12
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012ccc:	4b06      	ldr	r3, [pc, #24]	@ (8012ce8 <vTaskInternalSetTimeOutState+0x24>)
 8012cce:	681a      	ldr	r2, [r3, #0]
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012cd4:	4b05      	ldr	r3, [pc, #20]	@ (8012cec <vTaskInternalSetTimeOutState+0x28>)
 8012cd6:	681a      	ldr	r2, [r3, #0]
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	605a      	str	r2, [r3, #4]
}
 8012cdc:	bf00      	nop
 8012cde:	370c      	adds	r7, #12
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bc80      	pop	{r7}
 8012ce4:	4770      	bx	lr
 8012ce6:	bf00      	nop
 8012ce8:	2000141c 	.word	0x2000141c
 8012cec:	20001408 	.word	0x20001408

08012cf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b088      	sub	sp, #32
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d10b      	bne.n	8012d18 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8012d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d04:	f383 8811 	msr	BASEPRI, r3
 8012d08:	f3bf 8f6f 	isb	sy
 8012d0c:	f3bf 8f4f 	dsb	sy
 8012d10:	613b      	str	r3, [r7, #16]
}
 8012d12:	bf00      	nop
 8012d14:	bf00      	nop
 8012d16:	e7fd      	b.n	8012d14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d10b      	bne.n	8012d36 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8012d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d22:	f383 8811 	msr	BASEPRI, r3
 8012d26:	f3bf 8f6f 	isb	sy
 8012d2a:	f3bf 8f4f 	dsb	sy
 8012d2e:	60fb      	str	r3, [r7, #12]
}
 8012d30:	bf00      	nop
 8012d32:	bf00      	nop
 8012d34:	e7fd      	b.n	8012d32 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8012d36:	f000 fc99 	bl	801366c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8012db0 <xTaskCheckForTimeOut+0xc0>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	685b      	ldr	r3, [r3, #4]
 8012d44:	69ba      	ldr	r2, [r7, #24]
 8012d46:	1ad3      	subs	r3, r2, r3
 8012d48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d52:	d102      	bne.n	8012d5a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012d54:	2300      	movs	r3, #0
 8012d56:	61fb      	str	r3, [r7, #28]
 8012d58:	e023      	b.n	8012da2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681a      	ldr	r2, [r3, #0]
 8012d5e:	4b15      	ldr	r3, [pc, #84]	@ (8012db4 <xTaskCheckForTimeOut+0xc4>)
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	429a      	cmp	r2, r3
 8012d64:	d007      	beq.n	8012d76 <xTaskCheckForTimeOut+0x86>
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	685b      	ldr	r3, [r3, #4]
 8012d6a:	69ba      	ldr	r2, [r7, #24]
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	d302      	bcc.n	8012d76 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012d70:	2301      	movs	r3, #1
 8012d72:	61fb      	str	r3, [r7, #28]
 8012d74:	e015      	b.n	8012da2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	697a      	ldr	r2, [r7, #20]
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	d20b      	bcs.n	8012d98 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	681a      	ldr	r2, [r3, #0]
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	1ad2      	subs	r2, r2, r3
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f7ff ff99 	bl	8012cc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012d92:	2300      	movs	r3, #0
 8012d94:	61fb      	str	r3, [r7, #28]
 8012d96:	e004      	b.n	8012da2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012d9e:	2301      	movs	r3, #1
 8012da0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012da2:	f000 fc93 	bl	80136cc <vPortExitCritical>

	return xReturn;
 8012da6:	69fb      	ldr	r3, [r7, #28]
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3720      	adds	r7, #32
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}
 8012db0:	20001408 	.word	0x20001408
 8012db4:	2000141c 	.word	0x2000141c

08012db8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012db8:	b480      	push	{r7}
 8012dba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012dbc:	4b03      	ldr	r3, [pc, #12]	@ (8012dcc <vTaskMissedYield+0x14>)
 8012dbe:	2201      	movs	r2, #1
 8012dc0:	601a      	str	r2, [r3, #0]
}
 8012dc2:	bf00      	nop
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bc80      	pop	{r7}
 8012dc8:	4770      	bx	lr
 8012dca:	bf00      	nop
 8012dcc:	20001418 	.word	0x20001418

08012dd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b082      	sub	sp, #8
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012dd8:	f000 f852 	bl	8012e80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012ddc:	4b06      	ldr	r3, [pc, #24]	@ (8012df8 <prvIdleTask+0x28>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	2b01      	cmp	r3, #1
 8012de2:	d9f9      	bls.n	8012dd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012de4:	4b05      	ldr	r3, [pc, #20]	@ (8012dfc <prvIdleTask+0x2c>)
 8012de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012dea:	601a      	str	r2, [r3, #0]
 8012dec:	f3bf 8f4f 	dsb	sy
 8012df0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012df4:	e7f0      	b.n	8012dd8 <prvIdleTask+0x8>
 8012df6:	bf00      	nop
 8012df8:	20001308 	.word	0x20001308
 8012dfc:	e000ed04 	.word	0xe000ed04

08012e00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b082      	sub	sp, #8
 8012e04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012e06:	2300      	movs	r3, #0
 8012e08:	607b      	str	r3, [r7, #4]
 8012e0a:	e00c      	b.n	8012e26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012e0c:	687a      	ldr	r2, [r7, #4]
 8012e0e:	4613      	mov	r3, r2
 8012e10:	009b      	lsls	r3, r3, #2
 8012e12:	4413      	add	r3, r2
 8012e14:	009b      	lsls	r3, r3, #2
 8012e16:	4a12      	ldr	r2, [pc, #72]	@ (8012e60 <prvInitialiseTaskLists+0x60>)
 8012e18:	4413      	add	r3, r2
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7fe fa8b 	bl	8011336 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	3301      	adds	r3, #1
 8012e24:	607b      	str	r3, [r7, #4]
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	2b06      	cmp	r3, #6
 8012e2a:	d9ef      	bls.n	8012e0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012e2c:	480d      	ldr	r0, [pc, #52]	@ (8012e64 <prvInitialiseTaskLists+0x64>)
 8012e2e:	f7fe fa82 	bl	8011336 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012e32:	480d      	ldr	r0, [pc, #52]	@ (8012e68 <prvInitialiseTaskLists+0x68>)
 8012e34:	f7fe fa7f 	bl	8011336 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012e38:	480c      	ldr	r0, [pc, #48]	@ (8012e6c <prvInitialiseTaskLists+0x6c>)
 8012e3a:	f7fe fa7c 	bl	8011336 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012e3e:	480c      	ldr	r0, [pc, #48]	@ (8012e70 <prvInitialiseTaskLists+0x70>)
 8012e40:	f7fe fa79 	bl	8011336 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012e44:	480b      	ldr	r0, [pc, #44]	@ (8012e74 <prvInitialiseTaskLists+0x74>)
 8012e46:	f7fe fa76 	bl	8011336 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8012e78 <prvInitialiseTaskLists+0x78>)
 8012e4c:	4a05      	ldr	r2, [pc, #20]	@ (8012e64 <prvInitialiseTaskLists+0x64>)
 8012e4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012e50:	4b0a      	ldr	r3, [pc, #40]	@ (8012e7c <prvInitialiseTaskLists+0x7c>)
 8012e52:	4a05      	ldr	r2, [pc, #20]	@ (8012e68 <prvInitialiseTaskLists+0x68>)
 8012e54:	601a      	str	r2, [r3, #0]
}
 8012e56:	bf00      	nop
 8012e58:	3708      	adds	r7, #8
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	bf00      	nop
 8012e60:	20001308 	.word	0x20001308
 8012e64:	20001394 	.word	0x20001394
 8012e68:	200013a8 	.word	0x200013a8
 8012e6c:	200013c4 	.word	0x200013c4
 8012e70:	200013d8 	.word	0x200013d8
 8012e74:	200013f0 	.word	0x200013f0
 8012e78:	200013bc 	.word	0x200013bc
 8012e7c:	200013c0 	.word	0x200013c0

08012e80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b082      	sub	sp, #8
 8012e84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012e86:	e019      	b.n	8012ebc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012e88:	f000 fbf0 	bl	801366c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8012e8c:	4b10      	ldr	r3, [pc, #64]	@ (8012ed0 <prvCheckTasksWaitingTermination+0x50>)
 8012e8e:	68db      	ldr	r3, [r3, #12]
 8012e90:	68db      	ldr	r3, [r3, #12]
 8012e92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	3304      	adds	r3, #4
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f7fe fad2 	bl	8011442 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8012ed4 <prvCheckTasksWaitingTermination+0x54>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	3b01      	subs	r3, #1
 8012ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8012ed4 <prvCheckTasksWaitingTermination+0x54>)
 8012ea6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8012ed8 <prvCheckTasksWaitingTermination+0x58>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	3b01      	subs	r3, #1
 8012eae:	4a0a      	ldr	r2, [pc, #40]	@ (8012ed8 <prvCheckTasksWaitingTermination+0x58>)
 8012eb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012eb2:	f000 fc0b 	bl	80136cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f000 f848 	bl	8012f4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012ebc:	4b06      	ldr	r3, [pc, #24]	@ (8012ed8 <prvCheckTasksWaitingTermination+0x58>)
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d1e1      	bne.n	8012e88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012ec4:	bf00      	nop
 8012ec6:	bf00      	nop
 8012ec8:	3708      	adds	r7, #8
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop
 8012ed0:	200013d8 	.word	0x200013d8
 8012ed4:	20001404 	.word	0x20001404
 8012ed8:	200013ec 	.word	0x200013ec

08012edc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8012edc:	b480      	push	{r7}
 8012ede:	b085      	sub	sp, #20
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012ee8:	e005      	b.n	8012ef6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	3301      	adds	r3, #1
 8012eee:	607b      	str	r3, [r7, #4]
			ulCount++;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	3301      	adds	r3, #1
 8012ef4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	781b      	ldrb	r3, [r3, #0]
 8012efa:	2ba5      	cmp	r3, #165	@ 0xa5
 8012efc:	d0f5      	beq.n	8012eea <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	089b      	lsrs	r3, r3, #2
 8012f02:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	b29b      	uxth	r3, r3
	}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	3714      	adds	r7, #20
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bc80      	pop	{r7}
 8012f10:	4770      	bx	lr
	...

08012f14 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b086      	sub	sp, #24
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d102      	bne.n	8012f28 <uxTaskGetStackHighWaterMark+0x14>
 8012f22:	4b09      	ldr	r3, [pc, #36]	@ (8012f48 <uxTaskGetStackHighWaterMark+0x34>)
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	e000      	b.n	8012f2a <uxTaskGetStackHighWaterMark+0x16>
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8012f2c:	697b      	ldr	r3, [r7, #20]
 8012f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f30:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8012f32:	6938      	ldr	r0, [r7, #16]
 8012f34:	f7ff ffd2 	bl	8012edc <prvTaskCheckFreeStackSpace>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
	}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3718      	adds	r7, #24
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	20001304 	.word	0x20001304

08012f4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b084      	sub	sp, #16
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d108      	bne.n	8012f70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f62:	4618      	mov	r0, r3
 8012f64:	f000 fd4c 	bl	8013a00 <vPortFree>
				vPortFree( pxTCB );
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f000 fd49 	bl	8013a00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012f6e:	e019      	b.n	8012fa4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012f76:	2b01      	cmp	r3, #1
 8012f78:	d103      	bne.n	8012f82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	f000 fd40 	bl	8013a00 <vPortFree>
	}
 8012f80:	e010      	b.n	8012fa4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012f88:	2b02      	cmp	r3, #2
 8012f8a:	d00b      	beq.n	8012fa4 <prvDeleteTCB+0x58>
	__asm volatile
 8012f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f90:	f383 8811 	msr	BASEPRI, r3
 8012f94:	f3bf 8f6f 	isb	sy
 8012f98:	f3bf 8f4f 	dsb	sy
 8012f9c:	60fb      	str	r3, [r7, #12]
}
 8012f9e:	bf00      	nop
 8012fa0:	bf00      	nop
 8012fa2:	e7fd      	b.n	8012fa0 <prvDeleteTCB+0x54>
	}
 8012fa4:	bf00      	nop
 8012fa6:	3710      	adds	r7, #16
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}

08012fac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012fac:	b480      	push	{r7}
 8012fae:	b083      	sub	sp, #12
 8012fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8012fec <prvResetNextTaskUnblockTime+0x40>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d101      	bne.n	8012fc0 <prvResetNextTaskUnblockTime+0x14>
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	e000      	b.n	8012fc2 <prvResetNextTaskUnblockTime+0x16>
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d004      	beq.n	8012fd0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8012ff0 <prvResetNextTaskUnblockTime+0x44>)
 8012fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8012fcc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012fce:	e008      	b.n	8012fe2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012fd0:	4b06      	ldr	r3, [pc, #24]	@ (8012fec <prvResetNextTaskUnblockTime+0x40>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	68db      	ldr	r3, [r3, #12]
 8012fd6:	68db      	ldr	r3, [r3, #12]
 8012fd8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	685b      	ldr	r3, [r3, #4]
 8012fde:	4a04      	ldr	r2, [pc, #16]	@ (8012ff0 <prvResetNextTaskUnblockTime+0x44>)
 8012fe0:	6013      	str	r3, [r2, #0]
}
 8012fe2:	bf00      	nop
 8012fe4:	370c      	adds	r7, #12
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bc80      	pop	{r7}
 8012fea:	4770      	bx	lr
 8012fec:	200013bc 	.word	0x200013bc
 8012ff0:	20001424 	.word	0x20001424

08012ff4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b083      	sub	sp, #12
 8012ff8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8013028 <xTaskGetSchedulerState+0x34>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d102      	bne.n	8013008 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013002:	2301      	movs	r3, #1
 8013004:	607b      	str	r3, [r7, #4]
 8013006:	e008      	b.n	801301a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013008:	4b08      	ldr	r3, [pc, #32]	@ (801302c <xTaskGetSchedulerState+0x38>)
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d102      	bne.n	8013016 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013010:	2302      	movs	r3, #2
 8013012:	607b      	str	r3, [r7, #4]
 8013014:	e001      	b.n	801301a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013016:	2300      	movs	r3, #0
 8013018:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801301a:	687b      	ldr	r3, [r7, #4]
	}
 801301c:	4618      	mov	r0, r3
 801301e:	370c      	adds	r7, #12
 8013020:	46bd      	mov	sp, r7
 8013022:	bc80      	pop	{r7}
 8013024:	4770      	bx	lr
 8013026:	bf00      	nop
 8013028:	20001410 	.word	0x20001410
 801302c:	2000142c 	.word	0x2000142c

08013030 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013030:	b580      	push	{r7, lr}
 8013032:	b084      	sub	sp, #16
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801303c:	2300      	movs	r3, #0
 801303e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d06e      	beq.n	8013124 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801304a:	4b39      	ldr	r3, [pc, #228]	@ (8013130 <xTaskPriorityInherit+0x100>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013050:	429a      	cmp	r2, r3
 8013052:	d25e      	bcs.n	8013112 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	699b      	ldr	r3, [r3, #24]
 8013058:	2b00      	cmp	r3, #0
 801305a:	db06      	blt.n	801306a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801305c:	4b34      	ldr	r3, [pc, #208]	@ (8013130 <xTaskPriorityInherit+0x100>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013062:	f1c3 0207 	rsb	r2, r3, #7
 8013066:	68bb      	ldr	r3, [r7, #8]
 8013068:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801306a:	68bb      	ldr	r3, [r7, #8]
 801306c:	6959      	ldr	r1, [r3, #20]
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013072:	4613      	mov	r3, r2
 8013074:	009b      	lsls	r3, r3, #2
 8013076:	4413      	add	r3, r2
 8013078:	009b      	lsls	r3, r3, #2
 801307a:	4a2e      	ldr	r2, [pc, #184]	@ (8013134 <xTaskPriorityInherit+0x104>)
 801307c:	4413      	add	r3, r2
 801307e:	4299      	cmp	r1, r3
 8013080:	d101      	bne.n	8013086 <xTaskPriorityInherit+0x56>
 8013082:	2301      	movs	r3, #1
 8013084:	e000      	b.n	8013088 <xTaskPriorityInherit+0x58>
 8013086:	2300      	movs	r3, #0
 8013088:	2b00      	cmp	r3, #0
 801308a:	d03a      	beq.n	8013102 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	3304      	adds	r3, #4
 8013090:	4618      	mov	r0, r3
 8013092:	f7fe f9d6 	bl	8011442 <uxListRemove>
 8013096:	4603      	mov	r3, r0
 8013098:	2b00      	cmp	r3, #0
 801309a:	d115      	bne.n	80130c8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80130a0:	4924      	ldr	r1, [pc, #144]	@ (8013134 <xTaskPriorityInherit+0x104>)
 80130a2:	4613      	mov	r3, r2
 80130a4:	009b      	lsls	r3, r3, #2
 80130a6:	4413      	add	r3, r2
 80130a8:	009b      	lsls	r3, r3, #2
 80130aa:	440b      	add	r3, r1
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d10a      	bne.n	80130c8 <xTaskPriorityInherit+0x98>
 80130b2:	68bb      	ldr	r3, [r7, #8]
 80130b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130b6:	2201      	movs	r2, #1
 80130b8:	fa02 f303 	lsl.w	r3, r2, r3
 80130bc:	43da      	mvns	r2, r3
 80130be:	4b1e      	ldr	r3, [pc, #120]	@ (8013138 <xTaskPriorityInherit+0x108>)
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	4013      	ands	r3, r2
 80130c4:	4a1c      	ldr	r2, [pc, #112]	@ (8013138 <xTaskPriorityInherit+0x108>)
 80130c6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80130c8:	4b19      	ldr	r3, [pc, #100]	@ (8013130 <xTaskPriorityInherit+0x100>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130d6:	2201      	movs	r2, #1
 80130d8:	409a      	lsls	r2, r3
 80130da:	4b17      	ldr	r3, [pc, #92]	@ (8013138 <xTaskPriorityInherit+0x108>)
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	4313      	orrs	r3, r2
 80130e0:	4a15      	ldr	r2, [pc, #84]	@ (8013138 <xTaskPriorityInherit+0x108>)
 80130e2:	6013      	str	r3, [r2, #0]
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80130e8:	4613      	mov	r3, r2
 80130ea:	009b      	lsls	r3, r3, #2
 80130ec:	4413      	add	r3, r2
 80130ee:	009b      	lsls	r3, r3, #2
 80130f0:	4a10      	ldr	r2, [pc, #64]	@ (8013134 <xTaskPriorityInherit+0x104>)
 80130f2:	441a      	add	r2, r3
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	3304      	adds	r3, #4
 80130f8:	4619      	mov	r1, r3
 80130fa:	4610      	mov	r0, r2
 80130fc:	f7fe f946 	bl	801138c <vListInsertEnd>
 8013100:	e004      	b.n	801310c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013102:	4b0b      	ldr	r3, [pc, #44]	@ (8013130 <xTaskPriorityInherit+0x100>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801310c:	2301      	movs	r3, #1
 801310e:	60fb      	str	r3, [r7, #12]
 8013110:	e008      	b.n	8013124 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013116:	4b06      	ldr	r3, [pc, #24]	@ (8013130 <xTaskPriorityInherit+0x100>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801311c:	429a      	cmp	r2, r3
 801311e:	d201      	bcs.n	8013124 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013120:	2301      	movs	r3, #1
 8013122:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013124:	68fb      	ldr	r3, [r7, #12]
	}
 8013126:	4618      	mov	r0, r3
 8013128:	3710      	adds	r7, #16
 801312a:	46bd      	mov	sp, r7
 801312c:	bd80      	pop	{r7, pc}
 801312e:	bf00      	nop
 8013130:	20001304 	.word	0x20001304
 8013134:	20001308 	.word	0x20001308
 8013138:	2000140c 	.word	0x2000140c

0801313c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801313c:	b580      	push	{r7, lr}
 801313e:	b086      	sub	sp, #24
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013148:	2300      	movs	r3, #0
 801314a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d070      	beq.n	8013234 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013152:	4b3b      	ldr	r3, [pc, #236]	@ (8013240 <xTaskPriorityDisinherit+0x104>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	693a      	ldr	r2, [r7, #16]
 8013158:	429a      	cmp	r2, r3
 801315a:	d00b      	beq.n	8013174 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801315c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013160:	f383 8811 	msr	BASEPRI, r3
 8013164:	f3bf 8f6f 	isb	sy
 8013168:	f3bf 8f4f 	dsb	sy
 801316c:	60fb      	str	r3, [r7, #12]
}
 801316e:	bf00      	nop
 8013170:	bf00      	nop
 8013172:	e7fd      	b.n	8013170 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013178:	2b00      	cmp	r3, #0
 801317a:	d10b      	bne.n	8013194 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801317c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013180:	f383 8811 	msr	BASEPRI, r3
 8013184:	f3bf 8f6f 	isb	sy
 8013188:	f3bf 8f4f 	dsb	sy
 801318c:	60bb      	str	r3, [r7, #8]
}
 801318e:	bf00      	nop
 8013190:	bf00      	nop
 8013192:	e7fd      	b.n	8013190 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8013194:	693b      	ldr	r3, [r7, #16]
 8013196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013198:	1e5a      	subs	r2, r3, #1
 801319a:	693b      	ldr	r3, [r7, #16]
 801319c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801319e:	693b      	ldr	r3, [r7, #16]
 80131a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131a2:	693b      	ldr	r3, [r7, #16]
 80131a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d044      	beq.n	8013234 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80131aa:	693b      	ldr	r3, [r7, #16]
 80131ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d140      	bne.n	8013234 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80131b2:	693b      	ldr	r3, [r7, #16]
 80131b4:	3304      	adds	r3, #4
 80131b6:	4618      	mov	r0, r3
 80131b8:	f7fe f943 	bl	8011442 <uxListRemove>
 80131bc:	4603      	mov	r3, r0
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d115      	bne.n	80131ee <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80131c2:	693b      	ldr	r3, [r7, #16]
 80131c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131c6:	491f      	ldr	r1, [pc, #124]	@ (8013244 <xTaskPriorityDisinherit+0x108>)
 80131c8:	4613      	mov	r3, r2
 80131ca:	009b      	lsls	r3, r3, #2
 80131cc:	4413      	add	r3, r2
 80131ce:	009b      	lsls	r3, r3, #2
 80131d0:	440b      	add	r3, r1
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d10a      	bne.n	80131ee <xTaskPriorityDisinherit+0xb2>
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131dc:	2201      	movs	r2, #1
 80131de:	fa02 f303 	lsl.w	r3, r2, r3
 80131e2:	43da      	mvns	r2, r3
 80131e4:	4b18      	ldr	r3, [pc, #96]	@ (8013248 <xTaskPriorityDisinherit+0x10c>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	4013      	ands	r3, r2
 80131ea:	4a17      	ldr	r2, [pc, #92]	@ (8013248 <xTaskPriorityDisinherit+0x10c>)
 80131ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80131f2:	693b      	ldr	r3, [r7, #16]
 80131f4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131f6:	693b      	ldr	r3, [r7, #16]
 80131f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131fa:	f1c3 0207 	rsb	r2, r3, #7
 80131fe:	693b      	ldr	r3, [r7, #16]
 8013200:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013206:	2201      	movs	r2, #1
 8013208:	409a      	lsls	r2, r3
 801320a:	4b0f      	ldr	r3, [pc, #60]	@ (8013248 <xTaskPriorityDisinherit+0x10c>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	4313      	orrs	r3, r2
 8013210:	4a0d      	ldr	r2, [pc, #52]	@ (8013248 <xTaskPriorityDisinherit+0x10c>)
 8013212:	6013      	str	r3, [r2, #0]
 8013214:	693b      	ldr	r3, [r7, #16]
 8013216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013218:	4613      	mov	r3, r2
 801321a:	009b      	lsls	r3, r3, #2
 801321c:	4413      	add	r3, r2
 801321e:	009b      	lsls	r3, r3, #2
 8013220:	4a08      	ldr	r2, [pc, #32]	@ (8013244 <xTaskPriorityDisinherit+0x108>)
 8013222:	441a      	add	r2, r3
 8013224:	693b      	ldr	r3, [r7, #16]
 8013226:	3304      	adds	r3, #4
 8013228:	4619      	mov	r1, r3
 801322a:	4610      	mov	r0, r2
 801322c:	f7fe f8ae 	bl	801138c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013230:	2301      	movs	r3, #1
 8013232:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013234:	697b      	ldr	r3, [r7, #20]
	}
 8013236:	4618      	mov	r0, r3
 8013238:	3718      	adds	r7, #24
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
 801323e:	bf00      	nop
 8013240:	20001304 	.word	0x20001304
 8013244:	20001308 	.word	0x20001308
 8013248:	2000140c 	.word	0x2000140c

0801324c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801324c:	b580      	push	{r7, lr}
 801324e:	b088      	sub	sp, #32
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
 8013254:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801325a:	2301      	movs	r3, #1
 801325c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2b00      	cmp	r3, #0
 8013262:	f000 808a 	beq.w	801337a <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013266:	69bb      	ldr	r3, [r7, #24]
 8013268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801326a:	2b00      	cmp	r3, #0
 801326c:	d10b      	bne.n	8013286 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 801326e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013272:	f383 8811 	msr	BASEPRI, r3
 8013276:	f3bf 8f6f 	isb	sy
 801327a:	f3bf 8f4f 	dsb	sy
 801327e:	60fb      	str	r3, [r7, #12]
}
 8013280:	bf00      	nop
 8013282:	bf00      	nop
 8013284:	e7fd      	b.n	8013282 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013286:	69bb      	ldr	r3, [r7, #24]
 8013288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801328a:	683a      	ldr	r2, [r7, #0]
 801328c:	429a      	cmp	r2, r3
 801328e:	d902      	bls.n	8013296 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	61fb      	str	r3, [r7, #28]
 8013294:	e002      	b.n	801329c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013296:	69bb      	ldr	r3, [r7, #24]
 8013298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801329a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801329c:	69bb      	ldr	r3, [r7, #24]
 801329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132a0:	69fa      	ldr	r2, [r7, #28]
 80132a2:	429a      	cmp	r2, r3
 80132a4:	d069      	beq.n	801337a <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80132a6:	69bb      	ldr	r3, [r7, #24]
 80132a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80132aa:	697a      	ldr	r2, [r7, #20]
 80132ac:	429a      	cmp	r2, r3
 80132ae:	d164      	bne.n	801337a <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80132b0:	4b34      	ldr	r3, [pc, #208]	@ (8013384 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	69ba      	ldr	r2, [r7, #24]
 80132b6:	429a      	cmp	r2, r3
 80132b8:	d10b      	bne.n	80132d2 <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 80132ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132be:	f383 8811 	msr	BASEPRI, r3
 80132c2:	f3bf 8f6f 	isb	sy
 80132c6:	f3bf 8f4f 	dsb	sy
 80132ca:	60bb      	str	r3, [r7, #8]
}
 80132cc:	bf00      	nop
 80132ce:	bf00      	nop
 80132d0:	e7fd      	b.n	80132ce <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80132d2:	69bb      	ldr	r3, [r7, #24]
 80132d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132d6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80132d8:	69bb      	ldr	r3, [r7, #24]
 80132da:	69fa      	ldr	r2, [r7, #28]
 80132dc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80132de:	69bb      	ldr	r3, [r7, #24]
 80132e0:	699b      	ldr	r3, [r3, #24]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	db04      	blt.n	80132f0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132e6:	69fb      	ldr	r3, [r7, #28]
 80132e8:	f1c3 0207 	rsb	r2, r3, #7
 80132ec:	69bb      	ldr	r3, [r7, #24]
 80132ee:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80132f0:	69bb      	ldr	r3, [r7, #24]
 80132f2:	6959      	ldr	r1, [r3, #20]
 80132f4:	693a      	ldr	r2, [r7, #16]
 80132f6:	4613      	mov	r3, r2
 80132f8:	009b      	lsls	r3, r3, #2
 80132fa:	4413      	add	r3, r2
 80132fc:	009b      	lsls	r3, r3, #2
 80132fe:	4a22      	ldr	r2, [pc, #136]	@ (8013388 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8013300:	4413      	add	r3, r2
 8013302:	4299      	cmp	r1, r3
 8013304:	d101      	bne.n	801330a <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8013306:	2301      	movs	r3, #1
 8013308:	e000      	b.n	801330c <vTaskPriorityDisinheritAfterTimeout+0xc0>
 801330a:	2300      	movs	r3, #0
 801330c:	2b00      	cmp	r3, #0
 801330e:	d034      	beq.n	801337a <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013310:	69bb      	ldr	r3, [r7, #24]
 8013312:	3304      	adds	r3, #4
 8013314:	4618      	mov	r0, r3
 8013316:	f7fe f894 	bl	8011442 <uxListRemove>
 801331a:	4603      	mov	r3, r0
 801331c:	2b00      	cmp	r3, #0
 801331e:	d115      	bne.n	801334c <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013320:	69bb      	ldr	r3, [r7, #24]
 8013322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013324:	4918      	ldr	r1, [pc, #96]	@ (8013388 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8013326:	4613      	mov	r3, r2
 8013328:	009b      	lsls	r3, r3, #2
 801332a:	4413      	add	r3, r2
 801332c:	009b      	lsls	r3, r3, #2
 801332e:	440b      	add	r3, r1
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d10a      	bne.n	801334c <vTaskPriorityDisinheritAfterTimeout+0x100>
 8013336:	69bb      	ldr	r3, [r7, #24]
 8013338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801333a:	2201      	movs	r2, #1
 801333c:	fa02 f303 	lsl.w	r3, r2, r3
 8013340:	43da      	mvns	r2, r3
 8013342:	4b12      	ldr	r3, [pc, #72]	@ (801338c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	4013      	ands	r3, r2
 8013348:	4a10      	ldr	r2, [pc, #64]	@ (801338c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801334a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801334c:	69bb      	ldr	r3, [r7, #24]
 801334e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013350:	2201      	movs	r2, #1
 8013352:	409a      	lsls	r2, r3
 8013354:	4b0d      	ldr	r3, [pc, #52]	@ (801338c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	4313      	orrs	r3, r2
 801335a:	4a0c      	ldr	r2, [pc, #48]	@ (801338c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801335c:	6013      	str	r3, [r2, #0]
 801335e:	69bb      	ldr	r3, [r7, #24]
 8013360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013362:	4613      	mov	r3, r2
 8013364:	009b      	lsls	r3, r3, #2
 8013366:	4413      	add	r3, r2
 8013368:	009b      	lsls	r3, r3, #2
 801336a:	4a07      	ldr	r2, [pc, #28]	@ (8013388 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801336c:	441a      	add	r2, r3
 801336e:	69bb      	ldr	r3, [r7, #24]
 8013370:	3304      	adds	r3, #4
 8013372:	4619      	mov	r1, r3
 8013374:	4610      	mov	r0, r2
 8013376:	f7fe f809 	bl	801138c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801337a:	bf00      	nop
 801337c:	3720      	adds	r7, #32
 801337e:	46bd      	mov	sp, r7
 8013380:	bd80      	pop	{r7, pc}
 8013382:	bf00      	nop
 8013384:	20001304 	.word	0x20001304
 8013388:	20001308 	.word	0x20001308
 801338c:	2000140c 	.word	0x2000140c

08013390 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8013390:	b480      	push	{r7}
 8013392:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013394:	4b07      	ldr	r3, [pc, #28]	@ (80133b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d004      	beq.n	80133a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801339c:	4b05      	ldr	r3, [pc, #20]	@ (80133b4 <pvTaskIncrementMutexHeldCount+0x24>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80133a2:	3201      	adds	r2, #1
 80133a4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80133a6:	4b03      	ldr	r3, [pc, #12]	@ (80133b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80133a8:	681b      	ldr	r3, [r3, #0]
	}
 80133aa:	4618      	mov	r0, r3
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bc80      	pop	{r7}
 80133b0:	4770      	bx	lr
 80133b2:	bf00      	nop
 80133b4:	20001304 	.word	0x20001304

080133b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b084      	sub	sp, #16
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80133c2:	4b29      	ldr	r3, [pc, #164]	@ (8013468 <prvAddCurrentTaskToDelayedList+0xb0>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80133c8:	4b28      	ldr	r3, [pc, #160]	@ (801346c <prvAddCurrentTaskToDelayedList+0xb4>)
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	3304      	adds	r3, #4
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7fe f837 	bl	8011442 <uxListRemove>
 80133d4:	4603      	mov	r3, r0
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d10b      	bne.n	80133f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80133da:	4b24      	ldr	r3, [pc, #144]	@ (801346c <prvAddCurrentTaskToDelayedList+0xb4>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133e0:	2201      	movs	r2, #1
 80133e2:	fa02 f303 	lsl.w	r3, r2, r3
 80133e6:	43da      	mvns	r2, r3
 80133e8:	4b21      	ldr	r3, [pc, #132]	@ (8013470 <prvAddCurrentTaskToDelayedList+0xb8>)
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	4013      	ands	r3, r2
 80133ee:	4a20      	ldr	r2, [pc, #128]	@ (8013470 <prvAddCurrentTaskToDelayedList+0xb8>)
 80133f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133f8:	d10a      	bne.n	8013410 <prvAddCurrentTaskToDelayedList+0x58>
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d007      	beq.n	8013410 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013400:	4b1a      	ldr	r3, [pc, #104]	@ (801346c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	3304      	adds	r3, #4
 8013406:	4619      	mov	r1, r3
 8013408:	481a      	ldr	r0, [pc, #104]	@ (8013474 <prvAddCurrentTaskToDelayedList+0xbc>)
 801340a:	f7fd ffbf 	bl	801138c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801340e:	e026      	b.n	801345e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013410:	68fa      	ldr	r2, [r7, #12]
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	4413      	add	r3, r2
 8013416:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013418:	4b14      	ldr	r3, [pc, #80]	@ (801346c <prvAddCurrentTaskToDelayedList+0xb4>)
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	68ba      	ldr	r2, [r7, #8]
 801341e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013420:	68ba      	ldr	r2, [r7, #8]
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	429a      	cmp	r2, r3
 8013426:	d209      	bcs.n	801343c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013428:	4b13      	ldr	r3, [pc, #76]	@ (8013478 <prvAddCurrentTaskToDelayedList+0xc0>)
 801342a:	681a      	ldr	r2, [r3, #0]
 801342c:	4b0f      	ldr	r3, [pc, #60]	@ (801346c <prvAddCurrentTaskToDelayedList+0xb4>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	3304      	adds	r3, #4
 8013432:	4619      	mov	r1, r3
 8013434:	4610      	mov	r0, r2
 8013436:	f7fd ffcc 	bl	80113d2 <vListInsert>
}
 801343a:	e010      	b.n	801345e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801343c:	4b0f      	ldr	r3, [pc, #60]	@ (801347c <prvAddCurrentTaskToDelayedList+0xc4>)
 801343e:	681a      	ldr	r2, [r3, #0]
 8013440:	4b0a      	ldr	r3, [pc, #40]	@ (801346c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	3304      	adds	r3, #4
 8013446:	4619      	mov	r1, r3
 8013448:	4610      	mov	r0, r2
 801344a:	f7fd ffc2 	bl	80113d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801344e:	4b0c      	ldr	r3, [pc, #48]	@ (8013480 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	68ba      	ldr	r2, [r7, #8]
 8013454:	429a      	cmp	r2, r3
 8013456:	d202      	bcs.n	801345e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013458:	4a09      	ldr	r2, [pc, #36]	@ (8013480 <prvAddCurrentTaskToDelayedList+0xc8>)
 801345a:	68bb      	ldr	r3, [r7, #8]
 801345c:	6013      	str	r3, [r2, #0]
}
 801345e:	bf00      	nop
 8013460:	3710      	adds	r7, #16
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}
 8013466:	bf00      	nop
 8013468:	20001408 	.word	0x20001408
 801346c:	20001304 	.word	0x20001304
 8013470:	2000140c 	.word	0x2000140c
 8013474:	200013f0 	.word	0x200013f0
 8013478:	200013c0 	.word	0x200013c0
 801347c:	200013bc 	.word	0x200013bc
 8013480:	20001424 	.word	0x20001424

08013484 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013484:	b480      	push	{r7}
 8013486:	b085      	sub	sp, #20
 8013488:	af00      	add	r7, sp, #0
 801348a:	60f8      	str	r0, [r7, #12]
 801348c:	60b9      	str	r1, [r7, #8]
 801348e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	3b04      	subs	r3, #4
 8013494:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801349c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	3b04      	subs	r3, #4
 80134a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	f023 0201 	bic.w	r2, r3, #1
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	3b04      	subs	r3, #4
 80134b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80134b4:	4a08      	ldr	r2, [pc, #32]	@ (80134d8 <pxPortInitialiseStack+0x54>)
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	3b14      	subs	r3, #20
 80134be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80134c0:	687a      	ldr	r2, [r7, #4]
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	3b20      	subs	r3, #32
 80134ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80134cc:	68fb      	ldr	r3, [r7, #12]
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	3714      	adds	r7, #20
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bc80      	pop	{r7}
 80134d6:	4770      	bx	lr
 80134d8:	080134dd 	.word	0x080134dd

080134dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80134dc:	b480      	push	{r7}
 80134de:	b085      	sub	sp, #20
 80134e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80134e2:	2300      	movs	r3, #0
 80134e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80134e6:	4b12      	ldr	r3, [pc, #72]	@ (8013530 <prvTaskExitError+0x54>)
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134ee:	d00b      	beq.n	8013508 <prvTaskExitError+0x2c>
	__asm volatile
 80134f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134f4:	f383 8811 	msr	BASEPRI, r3
 80134f8:	f3bf 8f6f 	isb	sy
 80134fc:	f3bf 8f4f 	dsb	sy
 8013500:	60fb      	str	r3, [r7, #12]
}
 8013502:	bf00      	nop
 8013504:	bf00      	nop
 8013506:	e7fd      	b.n	8013504 <prvTaskExitError+0x28>
	__asm volatile
 8013508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801350c:	f383 8811 	msr	BASEPRI, r3
 8013510:	f3bf 8f6f 	isb	sy
 8013514:	f3bf 8f4f 	dsb	sy
 8013518:	60bb      	str	r3, [r7, #8]
}
 801351a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801351c:	bf00      	nop
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d0fc      	beq.n	801351e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013524:	bf00      	nop
 8013526:	bf00      	nop
 8013528:	3714      	adds	r7, #20
 801352a:	46bd      	mov	sp, r7
 801352c:	bc80      	pop	{r7}
 801352e:	4770      	bx	lr
 8013530:	20000040 	.word	0x20000040
	...

08013540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013540:	4b07      	ldr	r3, [pc, #28]	@ (8013560 <pxCurrentTCBConst2>)
 8013542:	6819      	ldr	r1, [r3, #0]
 8013544:	6808      	ldr	r0, [r1, #0]
 8013546:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801354a:	f380 8809 	msr	PSP, r0
 801354e:	f3bf 8f6f 	isb	sy
 8013552:	f04f 0000 	mov.w	r0, #0
 8013556:	f380 8811 	msr	BASEPRI, r0
 801355a:	f04e 0e0d 	orr.w	lr, lr, #13
 801355e:	4770      	bx	lr

08013560 <pxCurrentTCBConst2>:
 8013560:	20001304 	.word	0x20001304
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013564:	bf00      	nop
 8013566:	bf00      	nop

08013568 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8013568:	4806      	ldr	r0, [pc, #24]	@ (8013584 <prvPortStartFirstTask+0x1c>)
 801356a:	6800      	ldr	r0, [r0, #0]
 801356c:	6800      	ldr	r0, [r0, #0]
 801356e:	f380 8808 	msr	MSP, r0
 8013572:	b662      	cpsie	i
 8013574:	b661      	cpsie	f
 8013576:	f3bf 8f4f 	dsb	sy
 801357a:	f3bf 8f6f 	isb	sy
 801357e:	df00      	svc	0
 8013580:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013582:	bf00      	nop
 8013584:	e000ed08 	.word	0xe000ed08

08013588 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b084      	sub	sp, #16
 801358c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801358e:	4b32      	ldr	r3, [pc, #200]	@ (8013658 <xPortStartScheduler+0xd0>)
 8013590:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	781b      	ldrb	r3, [r3, #0]
 8013596:	b2db      	uxtb	r3, r3
 8013598:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	22ff      	movs	r2, #255	@ 0xff
 801359e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	781b      	ldrb	r3, [r3, #0]
 80135a4:	b2db      	uxtb	r3, r3
 80135a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80135a8:	78fb      	ldrb	r3, [r7, #3]
 80135aa:	b2db      	uxtb	r3, r3
 80135ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80135b0:	b2da      	uxtb	r2, r3
 80135b2:	4b2a      	ldr	r3, [pc, #168]	@ (801365c <xPortStartScheduler+0xd4>)
 80135b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80135b6:	4b2a      	ldr	r3, [pc, #168]	@ (8013660 <xPortStartScheduler+0xd8>)
 80135b8:	2207      	movs	r2, #7
 80135ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80135bc:	e009      	b.n	80135d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80135be:	4b28      	ldr	r3, [pc, #160]	@ (8013660 <xPortStartScheduler+0xd8>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	3b01      	subs	r3, #1
 80135c4:	4a26      	ldr	r2, [pc, #152]	@ (8013660 <xPortStartScheduler+0xd8>)
 80135c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80135c8:	78fb      	ldrb	r3, [r7, #3]
 80135ca:	b2db      	uxtb	r3, r3
 80135cc:	005b      	lsls	r3, r3, #1
 80135ce:	b2db      	uxtb	r3, r3
 80135d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80135d2:	78fb      	ldrb	r3, [r7, #3]
 80135d4:	b2db      	uxtb	r3, r3
 80135d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80135da:	2b80      	cmp	r3, #128	@ 0x80
 80135dc:	d0ef      	beq.n	80135be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80135de:	4b20      	ldr	r3, [pc, #128]	@ (8013660 <xPortStartScheduler+0xd8>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	f1c3 0307 	rsb	r3, r3, #7
 80135e6:	2b04      	cmp	r3, #4
 80135e8:	d00b      	beq.n	8013602 <xPortStartScheduler+0x7a>
	__asm volatile
 80135ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135ee:	f383 8811 	msr	BASEPRI, r3
 80135f2:	f3bf 8f6f 	isb	sy
 80135f6:	f3bf 8f4f 	dsb	sy
 80135fa:	60bb      	str	r3, [r7, #8]
}
 80135fc:	bf00      	nop
 80135fe:	bf00      	nop
 8013600:	e7fd      	b.n	80135fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013602:	4b17      	ldr	r3, [pc, #92]	@ (8013660 <xPortStartScheduler+0xd8>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	021b      	lsls	r3, r3, #8
 8013608:	4a15      	ldr	r2, [pc, #84]	@ (8013660 <xPortStartScheduler+0xd8>)
 801360a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801360c:	4b14      	ldr	r3, [pc, #80]	@ (8013660 <xPortStartScheduler+0xd8>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013614:	4a12      	ldr	r2, [pc, #72]	@ (8013660 <xPortStartScheduler+0xd8>)
 8013616:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	b2da      	uxtb	r2, r3
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013620:	4b10      	ldr	r3, [pc, #64]	@ (8013664 <xPortStartScheduler+0xdc>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	4a0f      	ldr	r2, [pc, #60]	@ (8013664 <xPortStartScheduler+0xdc>)
 8013626:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801362a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801362c:	4b0d      	ldr	r3, [pc, #52]	@ (8013664 <xPortStartScheduler+0xdc>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	4a0c      	ldr	r2, [pc, #48]	@ (8013664 <xPortStartScheduler+0xdc>)
 8013632:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013636:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013638:	f000 f8b8 	bl	80137ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801363c:	4b0a      	ldr	r3, [pc, #40]	@ (8013668 <xPortStartScheduler+0xe0>)
 801363e:	2200      	movs	r2, #0
 8013640:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013642:	f7ff ff91 	bl	8013568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013646:	f7ff fa57 	bl	8012af8 <vTaskSwitchContext>
	prvTaskExitError();
 801364a:	f7ff ff47 	bl	80134dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801364e:	2300      	movs	r3, #0
}
 8013650:	4618      	mov	r0, r3
 8013652:	3710      	adds	r7, #16
 8013654:	46bd      	mov	sp, r7
 8013656:	bd80      	pop	{r7, pc}
 8013658:	e000e400 	.word	0xe000e400
 801365c:	20001430 	.word	0x20001430
 8013660:	20001434 	.word	0x20001434
 8013664:	e000ed20 	.word	0xe000ed20
 8013668:	20000040 	.word	0x20000040

0801366c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801366c:	b480      	push	{r7}
 801366e:	b083      	sub	sp, #12
 8013670:	af00      	add	r7, sp, #0
	__asm volatile
 8013672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013676:	f383 8811 	msr	BASEPRI, r3
 801367a:	f3bf 8f6f 	isb	sy
 801367e:	f3bf 8f4f 	dsb	sy
 8013682:	607b      	str	r3, [r7, #4]
}
 8013684:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013686:	4b0f      	ldr	r3, [pc, #60]	@ (80136c4 <vPortEnterCritical+0x58>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	3301      	adds	r3, #1
 801368c:	4a0d      	ldr	r2, [pc, #52]	@ (80136c4 <vPortEnterCritical+0x58>)
 801368e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013690:	4b0c      	ldr	r3, [pc, #48]	@ (80136c4 <vPortEnterCritical+0x58>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	2b01      	cmp	r3, #1
 8013696:	d110      	bne.n	80136ba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013698:	4b0b      	ldr	r3, [pc, #44]	@ (80136c8 <vPortEnterCritical+0x5c>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	b2db      	uxtb	r3, r3
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d00b      	beq.n	80136ba <vPortEnterCritical+0x4e>
	__asm volatile
 80136a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136a6:	f383 8811 	msr	BASEPRI, r3
 80136aa:	f3bf 8f6f 	isb	sy
 80136ae:	f3bf 8f4f 	dsb	sy
 80136b2:	603b      	str	r3, [r7, #0]
}
 80136b4:	bf00      	nop
 80136b6:	bf00      	nop
 80136b8:	e7fd      	b.n	80136b6 <vPortEnterCritical+0x4a>
	}
}
 80136ba:	bf00      	nop
 80136bc:	370c      	adds	r7, #12
 80136be:	46bd      	mov	sp, r7
 80136c0:	bc80      	pop	{r7}
 80136c2:	4770      	bx	lr
 80136c4:	20000040 	.word	0x20000040
 80136c8:	e000ed04 	.word	0xe000ed04

080136cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80136cc:	b480      	push	{r7}
 80136ce:	b083      	sub	sp, #12
 80136d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80136d2:	4b12      	ldr	r3, [pc, #72]	@ (801371c <vPortExitCritical+0x50>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d10b      	bne.n	80136f2 <vPortExitCritical+0x26>
	__asm volatile
 80136da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136de:	f383 8811 	msr	BASEPRI, r3
 80136e2:	f3bf 8f6f 	isb	sy
 80136e6:	f3bf 8f4f 	dsb	sy
 80136ea:	607b      	str	r3, [r7, #4]
}
 80136ec:	bf00      	nop
 80136ee:	bf00      	nop
 80136f0:	e7fd      	b.n	80136ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80136f2:	4b0a      	ldr	r3, [pc, #40]	@ (801371c <vPortExitCritical+0x50>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	3b01      	subs	r3, #1
 80136f8:	4a08      	ldr	r2, [pc, #32]	@ (801371c <vPortExitCritical+0x50>)
 80136fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80136fc:	4b07      	ldr	r3, [pc, #28]	@ (801371c <vPortExitCritical+0x50>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d105      	bne.n	8013710 <vPortExitCritical+0x44>
 8013704:	2300      	movs	r3, #0
 8013706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	f383 8811 	msr	BASEPRI, r3
}
 801370e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013710:	bf00      	nop
 8013712:	370c      	adds	r7, #12
 8013714:	46bd      	mov	sp, r7
 8013716:	bc80      	pop	{r7}
 8013718:	4770      	bx	lr
 801371a:	bf00      	nop
 801371c:	20000040 	.word	0x20000040

08013720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013720:	f3ef 8009 	mrs	r0, PSP
 8013724:	f3bf 8f6f 	isb	sy
 8013728:	4b0d      	ldr	r3, [pc, #52]	@ (8013760 <pxCurrentTCBConst>)
 801372a:	681a      	ldr	r2, [r3, #0]
 801372c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013730:	6010      	str	r0, [r2, #0]
 8013732:	e92d 4008 	stmdb	sp!, {r3, lr}
 8013736:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801373a:	f380 8811 	msr	BASEPRI, r0
 801373e:	f7ff f9db 	bl	8012af8 <vTaskSwitchContext>
 8013742:	f04f 0000 	mov.w	r0, #0
 8013746:	f380 8811 	msr	BASEPRI, r0
 801374a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801374e:	6819      	ldr	r1, [r3, #0]
 8013750:	6808      	ldr	r0, [r1, #0]
 8013752:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013756:	f380 8809 	msr	PSP, r0
 801375a:	f3bf 8f6f 	isb	sy
 801375e:	4770      	bx	lr

08013760 <pxCurrentTCBConst>:
 8013760:	20001304 	.word	0x20001304
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013764:	bf00      	nop
 8013766:	bf00      	nop

08013768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b082      	sub	sp, #8
 801376c:	af00      	add	r7, sp, #0
	__asm volatile
 801376e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013772:	f383 8811 	msr	BASEPRI, r3
 8013776:	f3bf 8f6f 	isb	sy
 801377a:	f3bf 8f4f 	dsb	sy
 801377e:	607b      	str	r3, [r7, #4]
}
 8013780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013782:	f7ff f8fb 	bl	801297c <xTaskIncrementTick>
 8013786:	4603      	mov	r3, r0
 8013788:	2b00      	cmp	r3, #0
 801378a:	d003      	beq.n	8013794 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801378c:	4b06      	ldr	r3, [pc, #24]	@ (80137a8 <SysTick_Handler+0x40>)
 801378e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013792:	601a      	str	r2, [r3, #0]
 8013794:	2300      	movs	r3, #0
 8013796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	f383 8811 	msr	BASEPRI, r3
}
 801379e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80137a0:	bf00      	nop
 80137a2:	3708      	adds	r7, #8
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	e000ed04 	.word	0xe000ed04

080137ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80137ac:	b480      	push	{r7}
 80137ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80137b0:	4b0a      	ldr	r3, [pc, #40]	@ (80137dc <vPortSetupTimerInterrupt+0x30>)
 80137b2:	2200      	movs	r2, #0
 80137b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80137b6:	4b0a      	ldr	r3, [pc, #40]	@ (80137e0 <vPortSetupTimerInterrupt+0x34>)
 80137b8:	2200      	movs	r2, #0
 80137ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80137bc:	4b09      	ldr	r3, [pc, #36]	@ (80137e4 <vPortSetupTimerInterrupt+0x38>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	4a09      	ldr	r2, [pc, #36]	@ (80137e8 <vPortSetupTimerInterrupt+0x3c>)
 80137c2:	fba2 2303 	umull	r2, r3, r2, r3
 80137c6:	099b      	lsrs	r3, r3, #6
 80137c8:	4a08      	ldr	r2, [pc, #32]	@ (80137ec <vPortSetupTimerInterrupt+0x40>)
 80137ca:	3b01      	subs	r3, #1
 80137cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80137ce:	4b03      	ldr	r3, [pc, #12]	@ (80137dc <vPortSetupTimerInterrupt+0x30>)
 80137d0:	2207      	movs	r2, #7
 80137d2:	601a      	str	r2, [r3, #0]
}
 80137d4:	bf00      	nop
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bc80      	pop	{r7}
 80137da:	4770      	bx	lr
 80137dc:	e000e010 	.word	0xe000e010
 80137e0:	e000e018 	.word	0xe000e018
 80137e4:	20000028 	.word	0x20000028
 80137e8:	10624dd3 	.word	0x10624dd3
 80137ec:	e000e014 	.word	0xe000e014

080137f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80137f0:	b480      	push	{r7}
 80137f2:	b085      	sub	sp, #20
 80137f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80137f6:	f3ef 8305 	mrs	r3, IPSR
 80137fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	2b0f      	cmp	r3, #15
 8013800:	d915      	bls.n	801382e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013802:	4a17      	ldr	r2, [pc, #92]	@ (8013860 <vPortValidateInterruptPriority+0x70>)
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	4413      	add	r3, r2
 8013808:	781b      	ldrb	r3, [r3, #0]
 801380a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801380c:	4b15      	ldr	r3, [pc, #84]	@ (8013864 <vPortValidateInterruptPriority+0x74>)
 801380e:	781b      	ldrb	r3, [r3, #0]
 8013810:	7afa      	ldrb	r2, [r7, #11]
 8013812:	429a      	cmp	r2, r3
 8013814:	d20b      	bcs.n	801382e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8013816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801381a:	f383 8811 	msr	BASEPRI, r3
 801381e:	f3bf 8f6f 	isb	sy
 8013822:	f3bf 8f4f 	dsb	sy
 8013826:	607b      	str	r3, [r7, #4]
}
 8013828:	bf00      	nop
 801382a:	bf00      	nop
 801382c:	e7fd      	b.n	801382a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801382e:	4b0e      	ldr	r3, [pc, #56]	@ (8013868 <vPortValidateInterruptPriority+0x78>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013836:	4b0d      	ldr	r3, [pc, #52]	@ (801386c <vPortValidateInterruptPriority+0x7c>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	429a      	cmp	r2, r3
 801383c:	d90b      	bls.n	8013856 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 801383e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013842:	f383 8811 	msr	BASEPRI, r3
 8013846:	f3bf 8f6f 	isb	sy
 801384a:	f3bf 8f4f 	dsb	sy
 801384e:	603b      	str	r3, [r7, #0]
}
 8013850:	bf00      	nop
 8013852:	bf00      	nop
 8013854:	e7fd      	b.n	8013852 <vPortValidateInterruptPriority+0x62>
	}
 8013856:	bf00      	nop
 8013858:	3714      	adds	r7, #20
 801385a:	46bd      	mov	sp, r7
 801385c:	bc80      	pop	{r7}
 801385e:	4770      	bx	lr
 8013860:	e000e3f0 	.word	0xe000e3f0
 8013864:	20001430 	.word	0x20001430
 8013868:	e000ed0c 	.word	0xe000ed0c
 801386c:	20001434 	.word	0x20001434

08013870 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b08a      	sub	sp, #40	@ 0x28
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013878:	2300      	movs	r3, #0
 801387a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801387c:	f7fe ffc4 	bl	8012808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013880:	4b5a      	ldr	r3, [pc, #360]	@ (80139ec <pvPortMalloc+0x17c>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d101      	bne.n	801388c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013888:	f000 f916 	bl	8013ab8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801388c:	4b58      	ldr	r3, [pc, #352]	@ (80139f0 <pvPortMalloc+0x180>)
 801388e:	681a      	ldr	r2, [r3, #0]
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	4013      	ands	r3, r2
 8013894:	2b00      	cmp	r3, #0
 8013896:	f040 8090 	bne.w	80139ba <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d01e      	beq.n	80138de <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80138a0:	2208      	movs	r2, #8
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	4413      	add	r3, r2
 80138a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f003 0307 	and.w	r3, r3, #7
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d015      	beq.n	80138de <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	f023 0307 	bic.w	r3, r3, #7
 80138b8:	3308      	adds	r3, #8
 80138ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	f003 0307 	and.w	r3, r3, #7
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d00b      	beq.n	80138de <pvPortMalloc+0x6e>
	__asm volatile
 80138c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138ca:	f383 8811 	msr	BASEPRI, r3
 80138ce:	f3bf 8f6f 	isb	sy
 80138d2:	f3bf 8f4f 	dsb	sy
 80138d6:	617b      	str	r3, [r7, #20]
}
 80138d8:	bf00      	nop
 80138da:	bf00      	nop
 80138dc:	e7fd      	b.n	80138da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d06a      	beq.n	80139ba <pvPortMalloc+0x14a>
 80138e4:	4b43      	ldr	r3, [pc, #268]	@ (80139f4 <pvPortMalloc+0x184>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	687a      	ldr	r2, [r7, #4]
 80138ea:	429a      	cmp	r2, r3
 80138ec:	d865      	bhi.n	80139ba <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80138ee:	4b42      	ldr	r3, [pc, #264]	@ (80139f8 <pvPortMalloc+0x188>)
 80138f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80138f2:	4b41      	ldr	r3, [pc, #260]	@ (80139f8 <pvPortMalloc+0x188>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80138f8:	e004      	b.n	8013904 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80138fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80138fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013906:	685b      	ldr	r3, [r3, #4]
 8013908:	687a      	ldr	r2, [r7, #4]
 801390a:	429a      	cmp	r2, r3
 801390c:	d903      	bls.n	8013916 <pvPortMalloc+0xa6>
 801390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d1f1      	bne.n	80138fa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013916:	4b35      	ldr	r3, [pc, #212]	@ (80139ec <pvPortMalloc+0x17c>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801391c:	429a      	cmp	r2, r3
 801391e:	d04c      	beq.n	80139ba <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013920:	6a3b      	ldr	r3, [r7, #32]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	2208      	movs	r2, #8
 8013926:	4413      	add	r3, r2
 8013928:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801392c:	681a      	ldr	r2, [r3, #0]
 801392e:	6a3b      	ldr	r3, [r7, #32]
 8013930:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013934:	685a      	ldr	r2, [r3, #4]
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	1ad2      	subs	r2, r2, r3
 801393a:	2308      	movs	r3, #8
 801393c:	005b      	lsls	r3, r3, #1
 801393e:	429a      	cmp	r2, r3
 8013940:	d920      	bls.n	8013984 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	4413      	add	r3, r2
 8013948:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801394a:	69bb      	ldr	r3, [r7, #24]
 801394c:	f003 0307 	and.w	r3, r3, #7
 8013950:	2b00      	cmp	r3, #0
 8013952:	d00b      	beq.n	801396c <pvPortMalloc+0xfc>
	__asm volatile
 8013954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013958:	f383 8811 	msr	BASEPRI, r3
 801395c:	f3bf 8f6f 	isb	sy
 8013960:	f3bf 8f4f 	dsb	sy
 8013964:	613b      	str	r3, [r7, #16]
}
 8013966:	bf00      	nop
 8013968:	bf00      	nop
 801396a:	e7fd      	b.n	8013968 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801396e:	685a      	ldr	r2, [r3, #4]
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	1ad2      	subs	r2, r2, r3
 8013974:	69bb      	ldr	r3, [r7, #24]
 8013976:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801397a:	687a      	ldr	r2, [r7, #4]
 801397c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801397e:	69b8      	ldr	r0, [r7, #24]
 8013980:	f000 f8fc 	bl	8013b7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013984:	4b1b      	ldr	r3, [pc, #108]	@ (80139f4 <pvPortMalloc+0x184>)
 8013986:	681a      	ldr	r2, [r3, #0]
 8013988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801398a:	685b      	ldr	r3, [r3, #4]
 801398c:	1ad3      	subs	r3, r2, r3
 801398e:	4a19      	ldr	r2, [pc, #100]	@ (80139f4 <pvPortMalloc+0x184>)
 8013990:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013992:	4b18      	ldr	r3, [pc, #96]	@ (80139f4 <pvPortMalloc+0x184>)
 8013994:	681a      	ldr	r2, [r3, #0]
 8013996:	4b19      	ldr	r3, [pc, #100]	@ (80139fc <pvPortMalloc+0x18c>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	429a      	cmp	r2, r3
 801399c:	d203      	bcs.n	80139a6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801399e:	4b15      	ldr	r3, [pc, #84]	@ (80139f4 <pvPortMalloc+0x184>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	4a16      	ldr	r2, [pc, #88]	@ (80139fc <pvPortMalloc+0x18c>)
 80139a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80139a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139a8:	685a      	ldr	r2, [r3, #4]
 80139aa:	4b11      	ldr	r3, [pc, #68]	@ (80139f0 <pvPortMalloc+0x180>)
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	431a      	orrs	r2, r3
 80139b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80139b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139b6:	2200      	movs	r2, #0
 80139b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80139ba:	f7fe ff33 	bl	8012824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80139be:	69fb      	ldr	r3, [r7, #28]
 80139c0:	f003 0307 	and.w	r3, r3, #7
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d00b      	beq.n	80139e0 <pvPortMalloc+0x170>
	__asm volatile
 80139c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139cc:	f383 8811 	msr	BASEPRI, r3
 80139d0:	f3bf 8f6f 	isb	sy
 80139d4:	f3bf 8f4f 	dsb	sy
 80139d8:	60fb      	str	r3, [r7, #12]
}
 80139da:	bf00      	nop
 80139dc:	bf00      	nop
 80139de:	e7fd      	b.n	80139dc <pvPortMalloc+0x16c>
	return pvReturn;
 80139e0:	69fb      	ldr	r3, [r7, #28]
}
 80139e2:	4618      	mov	r0, r3
 80139e4:	3728      	adds	r7, #40	@ 0x28
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}
 80139ea:	bf00      	nop
 80139ec:	20002c40 	.word	0x20002c40
 80139f0:	20002c4c 	.word	0x20002c4c
 80139f4:	20002c44 	.word	0x20002c44
 80139f8:	20002c38 	.word	0x20002c38
 80139fc:	20002c48 	.word	0x20002c48

08013a00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b086      	sub	sp, #24
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d04a      	beq.n	8013aa8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013a12:	2308      	movs	r3, #8
 8013a14:	425b      	negs	r3, r3
 8013a16:	697a      	ldr	r2, [r7, #20]
 8013a18:	4413      	add	r3, r2
 8013a1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	685a      	ldr	r2, [r3, #4]
 8013a24:	4b22      	ldr	r3, [pc, #136]	@ (8013ab0 <vPortFree+0xb0>)
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	4013      	ands	r3, r2
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d10b      	bne.n	8013a46 <vPortFree+0x46>
	__asm volatile
 8013a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a32:	f383 8811 	msr	BASEPRI, r3
 8013a36:	f3bf 8f6f 	isb	sy
 8013a3a:	f3bf 8f4f 	dsb	sy
 8013a3e:	60fb      	str	r3, [r7, #12]
}
 8013a40:	bf00      	nop
 8013a42:	bf00      	nop
 8013a44:	e7fd      	b.n	8013a42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013a46:	693b      	ldr	r3, [r7, #16]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d00b      	beq.n	8013a66 <vPortFree+0x66>
	__asm volatile
 8013a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a52:	f383 8811 	msr	BASEPRI, r3
 8013a56:	f3bf 8f6f 	isb	sy
 8013a5a:	f3bf 8f4f 	dsb	sy
 8013a5e:	60bb      	str	r3, [r7, #8]
}
 8013a60:	bf00      	nop
 8013a62:	bf00      	nop
 8013a64:	e7fd      	b.n	8013a62 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013a66:	693b      	ldr	r3, [r7, #16]
 8013a68:	685a      	ldr	r2, [r3, #4]
 8013a6a:	4b11      	ldr	r3, [pc, #68]	@ (8013ab0 <vPortFree+0xb0>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	4013      	ands	r3, r2
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d019      	beq.n	8013aa8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013a74:	693b      	ldr	r3, [r7, #16]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d115      	bne.n	8013aa8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	685a      	ldr	r2, [r3, #4]
 8013a80:	4b0b      	ldr	r3, [pc, #44]	@ (8013ab0 <vPortFree+0xb0>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	43db      	mvns	r3, r3
 8013a86:	401a      	ands	r2, r3
 8013a88:	693b      	ldr	r3, [r7, #16]
 8013a8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013a8c:	f7fe febc 	bl	8012808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	685a      	ldr	r2, [r3, #4]
 8013a94:	4b07      	ldr	r3, [pc, #28]	@ (8013ab4 <vPortFree+0xb4>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	4413      	add	r3, r2
 8013a9a:	4a06      	ldr	r2, [pc, #24]	@ (8013ab4 <vPortFree+0xb4>)
 8013a9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013a9e:	6938      	ldr	r0, [r7, #16]
 8013aa0:	f000 f86c 	bl	8013b7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013aa4:	f7fe febe 	bl	8012824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013aa8:	bf00      	nop
 8013aaa:	3718      	adds	r7, #24
 8013aac:	46bd      	mov	sp, r7
 8013aae:	bd80      	pop	{r7, pc}
 8013ab0:	20002c4c 	.word	0x20002c4c
 8013ab4:	20002c44 	.word	0x20002c44

08013ab8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013ab8:	b480      	push	{r7}
 8013aba:	b085      	sub	sp, #20
 8013abc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013abe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8013ac2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013ac4:	4b27      	ldr	r3, [pc, #156]	@ (8013b64 <prvHeapInit+0xac>)
 8013ac6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	f003 0307 	and.w	r3, r3, #7
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d00c      	beq.n	8013aec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	3307      	adds	r3, #7
 8013ad6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	f023 0307 	bic.w	r3, r3, #7
 8013ade:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013ae0:	68ba      	ldr	r2, [r7, #8]
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	1ad3      	subs	r3, r2, r3
 8013ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8013b64 <prvHeapInit+0xac>)
 8013ae8:	4413      	add	r3, r2
 8013aea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013af0:	4a1d      	ldr	r2, [pc, #116]	@ (8013b68 <prvHeapInit+0xb0>)
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013af6:	4b1c      	ldr	r3, [pc, #112]	@ (8013b68 <prvHeapInit+0xb0>)
 8013af8:	2200      	movs	r2, #0
 8013afa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	68ba      	ldr	r2, [r7, #8]
 8013b00:	4413      	add	r3, r2
 8013b02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013b04:	2208      	movs	r2, #8
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	1a9b      	subs	r3, r3, r2
 8013b0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	f023 0307 	bic.w	r3, r3, #7
 8013b12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	4a15      	ldr	r2, [pc, #84]	@ (8013b6c <prvHeapInit+0xb4>)
 8013b18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013b1a:	4b14      	ldr	r3, [pc, #80]	@ (8013b6c <prvHeapInit+0xb4>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2200      	movs	r2, #0
 8013b20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013b22:	4b12      	ldr	r3, [pc, #72]	@ (8013b6c <prvHeapInit+0xb4>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	2200      	movs	r2, #0
 8013b28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013b2e:	683b      	ldr	r3, [r7, #0]
 8013b30:	68fa      	ldr	r2, [r7, #12]
 8013b32:	1ad2      	subs	r2, r2, r3
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013b38:	4b0c      	ldr	r3, [pc, #48]	@ (8013b6c <prvHeapInit+0xb4>)
 8013b3a:	681a      	ldr	r2, [r3, #0]
 8013b3c:	683b      	ldr	r3, [r7, #0]
 8013b3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	685b      	ldr	r3, [r3, #4]
 8013b44:	4a0a      	ldr	r2, [pc, #40]	@ (8013b70 <prvHeapInit+0xb8>)
 8013b46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	685b      	ldr	r3, [r3, #4]
 8013b4c:	4a09      	ldr	r2, [pc, #36]	@ (8013b74 <prvHeapInit+0xbc>)
 8013b4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013b50:	4b09      	ldr	r3, [pc, #36]	@ (8013b78 <prvHeapInit+0xc0>)
 8013b52:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013b56:	601a      	str	r2, [r3, #0]
}
 8013b58:	bf00      	nop
 8013b5a:	3714      	adds	r7, #20
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	bc80      	pop	{r7}
 8013b60:	4770      	bx	lr
 8013b62:	bf00      	nop
 8013b64:	20001438 	.word	0x20001438
 8013b68:	20002c38 	.word	0x20002c38
 8013b6c:	20002c40 	.word	0x20002c40
 8013b70:	20002c48 	.word	0x20002c48
 8013b74:	20002c44 	.word	0x20002c44
 8013b78:	20002c4c 	.word	0x20002c4c

08013b7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013b7c:	b480      	push	{r7}
 8013b7e:	b085      	sub	sp, #20
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013b84:	4b27      	ldr	r3, [pc, #156]	@ (8013c24 <prvInsertBlockIntoFreeList+0xa8>)
 8013b86:	60fb      	str	r3, [r7, #12]
 8013b88:	e002      	b.n	8013b90 <prvInsertBlockIntoFreeList+0x14>
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	60fb      	str	r3, [r7, #12]
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	687a      	ldr	r2, [r7, #4]
 8013b96:	429a      	cmp	r2, r3
 8013b98:	d8f7      	bhi.n	8013b8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	685b      	ldr	r3, [r3, #4]
 8013ba2:	68ba      	ldr	r2, [r7, #8]
 8013ba4:	4413      	add	r3, r2
 8013ba6:	687a      	ldr	r2, [r7, #4]
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	d108      	bne.n	8013bbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	685a      	ldr	r2, [r3, #4]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	685b      	ldr	r3, [r3, #4]
 8013bb4:	441a      	add	r2, r3
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	685b      	ldr	r3, [r3, #4]
 8013bc6:	68ba      	ldr	r2, [r7, #8]
 8013bc8:	441a      	add	r2, r3
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	429a      	cmp	r2, r3
 8013bd0:	d118      	bne.n	8013c04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	681a      	ldr	r2, [r3, #0]
 8013bd6:	4b14      	ldr	r3, [pc, #80]	@ (8013c28 <prvInsertBlockIntoFreeList+0xac>)
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	d00d      	beq.n	8013bfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	685a      	ldr	r2, [r3, #4]
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	685b      	ldr	r3, [r3, #4]
 8013be8:	441a      	add	r2, r3
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	681a      	ldr	r2, [r3, #0]
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	601a      	str	r2, [r3, #0]
 8013bf8:	e008      	b.n	8013c0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8013c28 <prvInsertBlockIntoFreeList+0xac>)
 8013bfc:	681a      	ldr	r2, [r3, #0]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	601a      	str	r2, [r3, #0]
 8013c02:	e003      	b.n	8013c0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	681a      	ldr	r2, [r3, #0]
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013c0c:	68fa      	ldr	r2, [r7, #12]
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	429a      	cmp	r2, r3
 8013c12:	d002      	beq.n	8013c1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	687a      	ldr	r2, [r7, #4]
 8013c18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013c1a:	bf00      	nop
 8013c1c:	3714      	adds	r7, #20
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bc80      	pop	{r7}
 8013c22:	4770      	bx	lr
 8013c24:	20002c38 	.word	0x20002c38
 8013c28:	20002c40 	.word	0x20002c40

08013c2c <calloc>:
 8013c2c:	4b02      	ldr	r3, [pc, #8]	@ (8013c38 <calloc+0xc>)
 8013c2e:	460a      	mov	r2, r1
 8013c30:	4601      	mov	r1, r0
 8013c32:	6818      	ldr	r0, [r3, #0]
 8013c34:	f000 b802 	b.w	8013c3c <_calloc_r>
 8013c38:	20000044 	.word	0x20000044

08013c3c <_calloc_r>:
 8013c3c:	b570      	push	{r4, r5, r6, lr}
 8013c3e:	fba1 5402 	umull	r5, r4, r1, r2
 8013c42:	b93c      	cbnz	r4, 8013c54 <_calloc_r+0x18>
 8013c44:	4629      	mov	r1, r5
 8013c46:	f000 f82f 	bl	8013ca8 <_malloc_r>
 8013c4a:	4606      	mov	r6, r0
 8013c4c:	b928      	cbnz	r0, 8013c5a <_calloc_r+0x1e>
 8013c4e:	2600      	movs	r6, #0
 8013c50:	4630      	mov	r0, r6
 8013c52:	bd70      	pop	{r4, r5, r6, pc}
 8013c54:	220c      	movs	r2, #12
 8013c56:	6002      	str	r2, [r0, #0]
 8013c58:	e7f9      	b.n	8013c4e <_calloc_r+0x12>
 8013c5a:	462a      	mov	r2, r5
 8013c5c:	4621      	mov	r1, r4
 8013c5e:	f000 f8af 	bl	8013dc0 <memset>
 8013c62:	e7f5      	b.n	8013c50 <_calloc_r+0x14>

08013c64 <sbrk_aligned>:
 8013c64:	b570      	push	{r4, r5, r6, lr}
 8013c66:	4e0f      	ldr	r6, [pc, #60]	@ (8013ca4 <sbrk_aligned+0x40>)
 8013c68:	460c      	mov	r4, r1
 8013c6a:	6831      	ldr	r1, [r6, #0]
 8013c6c:	4605      	mov	r5, r0
 8013c6e:	b911      	cbnz	r1, 8013c76 <sbrk_aligned+0x12>
 8013c70:	f000 f8ae 	bl	8013dd0 <_sbrk_r>
 8013c74:	6030      	str	r0, [r6, #0]
 8013c76:	4621      	mov	r1, r4
 8013c78:	4628      	mov	r0, r5
 8013c7a:	f000 f8a9 	bl	8013dd0 <_sbrk_r>
 8013c7e:	1c43      	adds	r3, r0, #1
 8013c80:	d103      	bne.n	8013c8a <sbrk_aligned+0x26>
 8013c82:	f04f 34ff 	mov.w	r4, #4294967295
 8013c86:	4620      	mov	r0, r4
 8013c88:	bd70      	pop	{r4, r5, r6, pc}
 8013c8a:	1cc4      	adds	r4, r0, #3
 8013c8c:	f024 0403 	bic.w	r4, r4, #3
 8013c90:	42a0      	cmp	r0, r4
 8013c92:	d0f8      	beq.n	8013c86 <sbrk_aligned+0x22>
 8013c94:	1a21      	subs	r1, r4, r0
 8013c96:	4628      	mov	r0, r5
 8013c98:	f000 f89a 	bl	8013dd0 <_sbrk_r>
 8013c9c:	3001      	adds	r0, #1
 8013c9e:	d1f2      	bne.n	8013c86 <sbrk_aligned+0x22>
 8013ca0:	e7ef      	b.n	8013c82 <sbrk_aligned+0x1e>
 8013ca2:	bf00      	nop
 8013ca4:	20002c50 	.word	0x20002c50

08013ca8 <_malloc_r>:
 8013ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cac:	1ccd      	adds	r5, r1, #3
 8013cae:	f025 0503 	bic.w	r5, r5, #3
 8013cb2:	3508      	adds	r5, #8
 8013cb4:	2d0c      	cmp	r5, #12
 8013cb6:	bf38      	it	cc
 8013cb8:	250c      	movcc	r5, #12
 8013cba:	2d00      	cmp	r5, #0
 8013cbc:	4606      	mov	r6, r0
 8013cbe:	db01      	blt.n	8013cc4 <_malloc_r+0x1c>
 8013cc0:	42a9      	cmp	r1, r5
 8013cc2:	d904      	bls.n	8013cce <_malloc_r+0x26>
 8013cc4:	230c      	movs	r3, #12
 8013cc6:	6033      	str	r3, [r6, #0]
 8013cc8:	2000      	movs	r0, #0
 8013cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013da4 <_malloc_r+0xfc>
 8013cd2:	f000 f869 	bl	8013da8 <__malloc_lock>
 8013cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8013cda:	461c      	mov	r4, r3
 8013cdc:	bb44      	cbnz	r4, 8013d30 <_malloc_r+0x88>
 8013cde:	4629      	mov	r1, r5
 8013ce0:	4630      	mov	r0, r6
 8013ce2:	f7ff ffbf 	bl	8013c64 <sbrk_aligned>
 8013ce6:	1c43      	adds	r3, r0, #1
 8013ce8:	4604      	mov	r4, r0
 8013cea:	d158      	bne.n	8013d9e <_malloc_r+0xf6>
 8013cec:	f8d8 4000 	ldr.w	r4, [r8]
 8013cf0:	4627      	mov	r7, r4
 8013cf2:	2f00      	cmp	r7, #0
 8013cf4:	d143      	bne.n	8013d7e <_malloc_r+0xd6>
 8013cf6:	2c00      	cmp	r4, #0
 8013cf8:	d04b      	beq.n	8013d92 <_malloc_r+0xea>
 8013cfa:	6823      	ldr	r3, [r4, #0]
 8013cfc:	4639      	mov	r1, r7
 8013cfe:	4630      	mov	r0, r6
 8013d00:	eb04 0903 	add.w	r9, r4, r3
 8013d04:	f000 f864 	bl	8013dd0 <_sbrk_r>
 8013d08:	4581      	cmp	r9, r0
 8013d0a:	d142      	bne.n	8013d92 <_malloc_r+0xea>
 8013d0c:	6821      	ldr	r1, [r4, #0]
 8013d0e:	4630      	mov	r0, r6
 8013d10:	1a6d      	subs	r5, r5, r1
 8013d12:	4629      	mov	r1, r5
 8013d14:	f7ff ffa6 	bl	8013c64 <sbrk_aligned>
 8013d18:	3001      	adds	r0, #1
 8013d1a:	d03a      	beq.n	8013d92 <_malloc_r+0xea>
 8013d1c:	6823      	ldr	r3, [r4, #0]
 8013d1e:	442b      	add	r3, r5
 8013d20:	6023      	str	r3, [r4, #0]
 8013d22:	f8d8 3000 	ldr.w	r3, [r8]
 8013d26:	685a      	ldr	r2, [r3, #4]
 8013d28:	bb62      	cbnz	r2, 8013d84 <_malloc_r+0xdc>
 8013d2a:	f8c8 7000 	str.w	r7, [r8]
 8013d2e:	e00f      	b.n	8013d50 <_malloc_r+0xa8>
 8013d30:	6822      	ldr	r2, [r4, #0]
 8013d32:	1b52      	subs	r2, r2, r5
 8013d34:	d420      	bmi.n	8013d78 <_malloc_r+0xd0>
 8013d36:	2a0b      	cmp	r2, #11
 8013d38:	d917      	bls.n	8013d6a <_malloc_r+0xc2>
 8013d3a:	1961      	adds	r1, r4, r5
 8013d3c:	42a3      	cmp	r3, r4
 8013d3e:	6025      	str	r5, [r4, #0]
 8013d40:	bf18      	it	ne
 8013d42:	6059      	strne	r1, [r3, #4]
 8013d44:	6863      	ldr	r3, [r4, #4]
 8013d46:	bf08      	it	eq
 8013d48:	f8c8 1000 	streq.w	r1, [r8]
 8013d4c:	5162      	str	r2, [r4, r5]
 8013d4e:	604b      	str	r3, [r1, #4]
 8013d50:	4630      	mov	r0, r6
 8013d52:	f000 f82f 	bl	8013db4 <__malloc_unlock>
 8013d56:	f104 000b 	add.w	r0, r4, #11
 8013d5a:	1d23      	adds	r3, r4, #4
 8013d5c:	f020 0007 	bic.w	r0, r0, #7
 8013d60:	1ac2      	subs	r2, r0, r3
 8013d62:	bf1c      	itt	ne
 8013d64:	1a1b      	subne	r3, r3, r0
 8013d66:	50a3      	strne	r3, [r4, r2]
 8013d68:	e7af      	b.n	8013cca <_malloc_r+0x22>
 8013d6a:	6862      	ldr	r2, [r4, #4]
 8013d6c:	42a3      	cmp	r3, r4
 8013d6e:	bf0c      	ite	eq
 8013d70:	f8c8 2000 	streq.w	r2, [r8]
 8013d74:	605a      	strne	r2, [r3, #4]
 8013d76:	e7eb      	b.n	8013d50 <_malloc_r+0xa8>
 8013d78:	4623      	mov	r3, r4
 8013d7a:	6864      	ldr	r4, [r4, #4]
 8013d7c:	e7ae      	b.n	8013cdc <_malloc_r+0x34>
 8013d7e:	463c      	mov	r4, r7
 8013d80:	687f      	ldr	r7, [r7, #4]
 8013d82:	e7b6      	b.n	8013cf2 <_malloc_r+0x4a>
 8013d84:	461a      	mov	r2, r3
 8013d86:	685b      	ldr	r3, [r3, #4]
 8013d88:	42a3      	cmp	r3, r4
 8013d8a:	d1fb      	bne.n	8013d84 <_malloc_r+0xdc>
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	6053      	str	r3, [r2, #4]
 8013d90:	e7de      	b.n	8013d50 <_malloc_r+0xa8>
 8013d92:	230c      	movs	r3, #12
 8013d94:	4630      	mov	r0, r6
 8013d96:	6033      	str	r3, [r6, #0]
 8013d98:	f000 f80c 	bl	8013db4 <__malloc_unlock>
 8013d9c:	e794      	b.n	8013cc8 <_malloc_r+0x20>
 8013d9e:	6005      	str	r5, [r0, #0]
 8013da0:	e7d6      	b.n	8013d50 <_malloc_r+0xa8>
 8013da2:	bf00      	nop
 8013da4:	20002c54 	.word	0x20002c54

08013da8 <__malloc_lock>:
 8013da8:	4801      	ldr	r0, [pc, #4]	@ (8013db0 <__malloc_lock+0x8>)
 8013daa:	f000 b84b 	b.w	8013e44 <__retarget_lock_acquire_recursive>
 8013dae:	bf00      	nop
 8013db0:	20002d94 	.word	0x20002d94

08013db4 <__malloc_unlock>:
 8013db4:	4801      	ldr	r0, [pc, #4]	@ (8013dbc <__malloc_unlock+0x8>)
 8013db6:	f000 b846 	b.w	8013e46 <__retarget_lock_release_recursive>
 8013dba:	bf00      	nop
 8013dbc:	20002d94 	.word	0x20002d94

08013dc0 <memset>:
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	4402      	add	r2, r0
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	d100      	bne.n	8013dca <memset+0xa>
 8013dc8:	4770      	bx	lr
 8013dca:	f803 1b01 	strb.w	r1, [r3], #1
 8013dce:	e7f9      	b.n	8013dc4 <memset+0x4>

08013dd0 <_sbrk_r>:
 8013dd0:	b538      	push	{r3, r4, r5, lr}
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	4d05      	ldr	r5, [pc, #20]	@ (8013dec <_sbrk_r+0x1c>)
 8013dd6:	4604      	mov	r4, r0
 8013dd8:	4608      	mov	r0, r1
 8013dda:	602b      	str	r3, [r5, #0]
 8013ddc:	f7f0 ff16 	bl	8004c0c <_sbrk>
 8013de0:	1c43      	adds	r3, r0, #1
 8013de2:	d102      	bne.n	8013dea <_sbrk_r+0x1a>
 8013de4:	682b      	ldr	r3, [r5, #0]
 8013de6:	b103      	cbz	r3, 8013dea <_sbrk_r+0x1a>
 8013de8:	6023      	str	r3, [r4, #0]
 8013dea:	bd38      	pop	{r3, r4, r5, pc}
 8013dec:	20002d90 	.word	0x20002d90

08013df0 <__errno>:
 8013df0:	4b01      	ldr	r3, [pc, #4]	@ (8013df8 <__errno+0x8>)
 8013df2:	6818      	ldr	r0, [r3, #0]
 8013df4:	4770      	bx	lr
 8013df6:	bf00      	nop
 8013df8:	20000044 	.word	0x20000044

08013dfc <__libc_init_array>:
 8013dfc:	b570      	push	{r4, r5, r6, lr}
 8013dfe:	2600      	movs	r6, #0
 8013e00:	4d0c      	ldr	r5, [pc, #48]	@ (8013e34 <__libc_init_array+0x38>)
 8013e02:	4c0d      	ldr	r4, [pc, #52]	@ (8013e38 <__libc_init_array+0x3c>)
 8013e04:	1b64      	subs	r4, r4, r5
 8013e06:	10a4      	asrs	r4, r4, #2
 8013e08:	42a6      	cmp	r6, r4
 8013e0a:	d109      	bne.n	8013e20 <__libc_init_array+0x24>
 8013e0c:	f000 f9ae 	bl	801416c <_init>
 8013e10:	2600      	movs	r6, #0
 8013e12:	4d0a      	ldr	r5, [pc, #40]	@ (8013e3c <__libc_init_array+0x40>)
 8013e14:	4c0a      	ldr	r4, [pc, #40]	@ (8013e40 <__libc_init_array+0x44>)
 8013e16:	1b64      	subs	r4, r4, r5
 8013e18:	10a4      	asrs	r4, r4, #2
 8013e1a:	42a6      	cmp	r6, r4
 8013e1c:	d105      	bne.n	8013e2a <__libc_init_array+0x2e>
 8013e1e:	bd70      	pop	{r4, r5, r6, pc}
 8013e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e24:	4798      	blx	r3
 8013e26:	3601      	adds	r6, #1
 8013e28:	e7ee      	b.n	8013e08 <__libc_init_array+0xc>
 8013e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e2e:	4798      	blx	r3
 8013e30:	3601      	adds	r6, #1
 8013e32:	e7f2      	b.n	8013e1a <__libc_init_array+0x1e>
 8013e34:	08014910 	.word	0x08014910
 8013e38:	08014910 	.word	0x08014910
 8013e3c:	08014910 	.word	0x08014910
 8013e40:	08014914 	.word	0x08014914

08013e44 <__retarget_lock_acquire_recursive>:
 8013e44:	4770      	bx	lr

08013e46 <__retarget_lock_release_recursive>:
 8013e46:	4770      	bx	lr

08013e48 <memcpy>:
 8013e48:	440a      	add	r2, r1
 8013e4a:	4291      	cmp	r1, r2
 8013e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013e50:	d100      	bne.n	8013e54 <memcpy+0xc>
 8013e52:	4770      	bx	lr
 8013e54:	b510      	push	{r4, lr}
 8013e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e5a:	4291      	cmp	r1, r2
 8013e5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e60:	d1f9      	bne.n	8013e56 <memcpy+0xe>
 8013e62:	bd10      	pop	{r4, pc}

08013e64 <sqrt>:
 8013e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e66:	4606      	mov	r6, r0
 8013e68:	460f      	mov	r7, r1
 8013e6a:	f000 f839 	bl	8013ee0 <__ieee754_sqrt>
 8013e6e:	4632      	mov	r2, r6
 8013e70:	4604      	mov	r4, r0
 8013e72:	460d      	mov	r5, r1
 8013e74:	463b      	mov	r3, r7
 8013e76:	4630      	mov	r0, r6
 8013e78:	4639      	mov	r1, r7
 8013e7a:	f7ec fe2f 	bl	8000adc <__aeabi_dcmpun>
 8013e7e:	b990      	cbnz	r0, 8013ea6 <sqrt+0x42>
 8013e80:	2200      	movs	r2, #0
 8013e82:	2300      	movs	r3, #0
 8013e84:	4630      	mov	r0, r6
 8013e86:	4639      	mov	r1, r7
 8013e88:	f7ec fe00 	bl	8000a8c <__aeabi_dcmplt>
 8013e8c:	b158      	cbz	r0, 8013ea6 <sqrt+0x42>
 8013e8e:	f7ff ffaf 	bl	8013df0 <__errno>
 8013e92:	2321      	movs	r3, #33	@ 0x21
 8013e94:	2200      	movs	r2, #0
 8013e96:	6003      	str	r3, [r0, #0]
 8013e98:	2300      	movs	r3, #0
 8013e9a:	4610      	mov	r0, r2
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	f7ec fcad 	bl	80007fc <__aeabi_ddiv>
 8013ea2:	4604      	mov	r4, r0
 8013ea4:	460d      	mov	r5, r1
 8013ea6:	4620      	mov	r0, r4
 8013ea8:	4629      	mov	r1, r5
 8013eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013eac <sqrtf>:
 8013eac:	b538      	push	{r3, r4, r5, lr}
 8013eae:	4605      	mov	r5, r0
 8013eb0:	f000 f8ec 	bl	801408c <__ieee754_sqrtf>
 8013eb4:	4629      	mov	r1, r5
 8013eb6:	4604      	mov	r4, r0
 8013eb8:	4628      	mov	r0, r5
 8013eba:	f7ed f991 	bl	80011e0 <__aeabi_fcmpun>
 8013ebe:	b968      	cbnz	r0, 8013edc <sqrtf+0x30>
 8013ec0:	2100      	movs	r1, #0
 8013ec2:	4628      	mov	r0, r5
 8013ec4:	f7ed f964 	bl	8001190 <__aeabi_fcmplt>
 8013ec8:	b140      	cbz	r0, 8013edc <sqrtf+0x30>
 8013eca:	f7ff ff91 	bl	8013df0 <__errno>
 8013ece:	2321      	movs	r3, #33	@ 0x21
 8013ed0:	2100      	movs	r1, #0
 8013ed2:	6003      	str	r3, [r0, #0]
 8013ed4:	4608      	mov	r0, r1
 8013ed6:	f7ed f871 	bl	8000fbc <__aeabi_fdiv>
 8013eda:	4604      	mov	r4, r0
 8013edc:	4620      	mov	r0, r4
 8013ede:	bd38      	pop	{r3, r4, r5, pc}

08013ee0 <__ieee754_sqrt>:
 8013ee0:	4a67      	ldr	r2, [pc, #412]	@ (8014080 <__ieee754_sqrt+0x1a0>)
 8013ee2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ee6:	438a      	bics	r2, r1
 8013ee8:	4606      	mov	r6, r0
 8013eea:	460f      	mov	r7, r1
 8013eec:	460b      	mov	r3, r1
 8013eee:	4604      	mov	r4, r0
 8013ef0:	d10e      	bne.n	8013f10 <__ieee754_sqrt+0x30>
 8013ef2:	4602      	mov	r2, r0
 8013ef4:	f7ec fb58 	bl	80005a8 <__aeabi_dmul>
 8013ef8:	4602      	mov	r2, r0
 8013efa:	460b      	mov	r3, r1
 8013efc:	4630      	mov	r0, r6
 8013efe:	4639      	mov	r1, r7
 8013f00:	f7ec f99c 	bl	800023c <__adddf3>
 8013f04:	4606      	mov	r6, r0
 8013f06:	460f      	mov	r7, r1
 8013f08:	4630      	mov	r0, r6
 8013f0a:	4639      	mov	r1, r7
 8013f0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f10:	2900      	cmp	r1, #0
 8013f12:	dc0c      	bgt.n	8013f2e <__ieee754_sqrt+0x4e>
 8013f14:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8013f18:	4302      	orrs	r2, r0
 8013f1a:	d0f5      	beq.n	8013f08 <__ieee754_sqrt+0x28>
 8013f1c:	b189      	cbz	r1, 8013f42 <__ieee754_sqrt+0x62>
 8013f1e:	4602      	mov	r2, r0
 8013f20:	f7ec f98a 	bl	8000238 <__aeabi_dsub>
 8013f24:	4602      	mov	r2, r0
 8013f26:	460b      	mov	r3, r1
 8013f28:	f7ec fc68 	bl	80007fc <__aeabi_ddiv>
 8013f2c:	e7ea      	b.n	8013f04 <__ieee754_sqrt+0x24>
 8013f2e:	150a      	asrs	r2, r1, #20
 8013f30:	d115      	bne.n	8013f5e <__ieee754_sqrt+0x7e>
 8013f32:	2100      	movs	r1, #0
 8013f34:	e009      	b.n	8013f4a <__ieee754_sqrt+0x6a>
 8013f36:	0ae3      	lsrs	r3, r4, #11
 8013f38:	3a15      	subs	r2, #21
 8013f3a:	0564      	lsls	r4, r4, #21
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d0fa      	beq.n	8013f36 <__ieee754_sqrt+0x56>
 8013f40:	e7f7      	b.n	8013f32 <__ieee754_sqrt+0x52>
 8013f42:	460a      	mov	r2, r1
 8013f44:	e7fa      	b.n	8013f3c <__ieee754_sqrt+0x5c>
 8013f46:	005b      	lsls	r3, r3, #1
 8013f48:	3101      	adds	r1, #1
 8013f4a:	02d8      	lsls	r0, r3, #11
 8013f4c:	d5fb      	bpl.n	8013f46 <__ieee754_sqrt+0x66>
 8013f4e:	1e48      	subs	r0, r1, #1
 8013f50:	1a12      	subs	r2, r2, r0
 8013f52:	f1c1 0020 	rsb	r0, r1, #32
 8013f56:	fa24 f000 	lsr.w	r0, r4, r0
 8013f5a:	4303      	orrs	r3, r0
 8013f5c:	408c      	lsls	r4, r1
 8013f5e:	2600      	movs	r6, #0
 8013f60:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8013f64:	2116      	movs	r1, #22
 8013f66:	07d2      	lsls	r2, r2, #31
 8013f68:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8013f6c:	4632      	mov	r2, r6
 8013f6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013f76:	bf5c      	itt	pl
 8013f78:	005b      	lslpl	r3, r3, #1
 8013f7a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8013f7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013f82:	bf58      	it	pl
 8013f84:	0064      	lslpl	r4, r4, #1
 8013f86:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8013f8a:	107f      	asrs	r7, r7, #1
 8013f8c:	0064      	lsls	r4, r4, #1
 8013f8e:	1815      	adds	r5, r2, r0
 8013f90:	429d      	cmp	r5, r3
 8013f92:	bfde      	ittt	le
 8013f94:	182a      	addle	r2, r5, r0
 8013f96:	1b5b      	suble	r3, r3, r5
 8013f98:	1836      	addle	r6, r6, r0
 8013f9a:	0fe5      	lsrs	r5, r4, #31
 8013f9c:	3901      	subs	r1, #1
 8013f9e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8013fa2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8013fa6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8013faa:	d1f0      	bne.n	8013f8e <__ieee754_sqrt+0xae>
 8013fac:	460d      	mov	r5, r1
 8013fae:	f04f 0a20 	mov.w	sl, #32
 8013fb2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	eb01 0c00 	add.w	ip, r1, r0
 8013fbc:	db02      	blt.n	8013fc4 <__ieee754_sqrt+0xe4>
 8013fbe:	d113      	bne.n	8013fe8 <__ieee754_sqrt+0x108>
 8013fc0:	45a4      	cmp	ip, r4
 8013fc2:	d811      	bhi.n	8013fe8 <__ieee754_sqrt+0x108>
 8013fc4:	f1bc 0f00 	cmp.w	ip, #0
 8013fc8:	eb0c 0100 	add.w	r1, ip, r0
 8013fcc:	da42      	bge.n	8014054 <__ieee754_sqrt+0x174>
 8013fce:	2900      	cmp	r1, #0
 8013fd0:	db40      	blt.n	8014054 <__ieee754_sqrt+0x174>
 8013fd2:	f102 0e01 	add.w	lr, r2, #1
 8013fd6:	1a9b      	subs	r3, r3, r2
 8013fd8:	4672      	mov	r2, lr
 8013fda:	45a4      	cmp	ip, r4
 8013fdc:	bf88      	it	hi
 8013fde:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013fe2:	eba4 040c 	sub.w	r4, r4, ip
 8013fe6:	4405      	add	r5, r0
 8013fe8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8013fec:	f1ba 0a01 	subs.w	sl, sl, #1
 8013ff0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8013ff4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8013ff8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8013ffc:	d1db      	bne.n	8013fb6 <__ieee754_sqrt+0xd6>
 8013ffe:	431c      	orrs	r4, r3
 8014000:	d01a      	beq.n	8014038 <__ieee754_sqrt+0x158>
 8014002:	4c20      	ldr	r4, [pc, #128]	@ (8014084 <__ieee754_sqrt+0x1a4>)
 8014004:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8014088 <__ieee754_sqrt+0x1a8>
 8014008:	e9d4 0100 	ldrd	r0, r1, [r4]
 801400c:	e9db 2300 	ldrd	r2, r3, [fp]
 8014010:	f7ec f912 	bl	8000238 <__aeabi_dsub>
 8014014:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014018:	4602      	mov	r2, r0
 801401a:	460b      	mov	r3, r1
 801401c:	4640      	mov	r0, r8
 801401e:	4649      	mov	r1, r9
 8014020:	f7ec fd3e 	bl	8000aa0 <__aeabi_dcmple>
 8014024:	b140      	cbz	r0, 8014038 <__ieee754_sqrt+0x158>
 8014026:	e9d4 0100 	ldrd	r0, r1, [r4]
 801402a:	e9db 2300 	ldrd	r2, r3, [fp]
 801402e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8014032:	d111      	bne.n	8014058 <__ieee754_sqrt+0x178>
 8014034:	4655      	mov	r5, sl
 8014036:	3601      	adds	r6, #1
 8014038:	1072      	asrs	r2, r6, #1
 801403a:	086b      	lsrs	r3, r5, #1
 801403c:	07f1      	lsls	r1, r6, #31
 801403e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8014042:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8014046:	bf48      	it	mi
 8014048:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801404c:	4618      	mov	r0, r3
 801404e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8014052:	e757      	b.n	8013f04 <__ieee754_sqrt+0x24>
 8014054:	4696      	mov	lr, r2
 8014056:	e7be      	b.n	8013fd6 <__ieee754_sqrt+0xf6>
 8014058:	f7ec f8f0 	bl	800023c <__adddf3>
 801405c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014060:	4602      	mov	r2, r0
 8014062:	460b      	mov	r3, r1
 8014064:	4640      	mov	r0, r8
 8014066:	4649      	mov	r1, r9
 8014068:	f7ec fd10 	bl	8000a8c <__aeabi_dcmplt>
 801406c:	b120      	cbz	r0, 8014078 <__ieee754_sqrt+0x198>
 801406e:	1ca8      	adds	r0, r5, #2
 8014070:	bf08      	it	eq
 8014072:	3601      	addeq	r6, #1
 8014074:	3502      	adds	r5, #2
 8014076:	e7df      	b.n	8014038 <__ieee754_sqrt+0x158>
 8014078:	1c6b      	adds	r3, r5, #1
 801407a:	f023 0501 	bic.w	r5, r3, #1
 801407e:	e7db      	b.n	8014038 <__ieee754_sqrt+0x158>
 8014080:	7ff00000 	.word	0x7ff00000
 8014084:	200000a0 	.word	0x200000a0
 8014088:	20000098 	.word	0x20000098

0801408c <__ieee754_sqrtf>:
 801408c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8014090:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8014094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014098:	4603      	mov	r3, r0
 801409a:	4604      	mov	r4, r0
 801409c:	d30a      	bcc.n	80140b4 <__ieee754_sqrtf+0x28>
 801409e:	4601      	mov	r1, r0
 80140a0:	f7ec fed8 	bl	8000e54 <__aeabi_fmul>
 80140a4:	4601      	mov	r1, r0
 80140a6:	4620      	mov	r0, r4
 80140a8:	f7ec fdcc 	bl	8000c44 <__addsf3>
 80140ac:	4604      	mov	r4, r0
 80140ae:	4620      	mov	r0, r4
 80140b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140b4:	2a00      	cmp	r2, #0
 80140b6:	d0fa      	beq.n	80140ae <__ieee754_sqrtf+0x22>
 80140b8:	2800      	cmp	r0, #0
 80140ba:	da06      	bge.n	80140ca <__ieee754_sqrtf+0x3e>
 80140bc:	4601      	mov	r1, r0
 80140be:	f7ec fdbf 	bl	8000c40 <__aeabi_fsub>
 80140c2:	4601      	mov	r1, r0
 80140c4:	f7ec ff7a 	bl	8000fbc <__aeabi_fdiv>
 80140c8:	e7f0      	b.n	80140ac <__ieee754_sqrtf+0x20>
 80140ca:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 80140ce:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80140d2:	d03e      	beq.n	8014152 <__ieee754_sqrtf+0xc6>
 80140d4:	2400      	movs	r4, #0
 80140d6:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 80140da:	07ca      	lsls	r2, r1, #31
 80140dc:	f04f 0019 	mov.w	r0, #25
 80140e0:	4626      	mov	r6, r4
 80140e2:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80140e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80140ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80140ee:	bf58      	it	pl
 80140f0:	005b      	lslpl	r3, r3, #1
 80140f2:	106d      	asrs	r5, r5, #1
 80140f4:	005b      	lsls	r3, r3, #1
 80140f6:	1872      	adds	r2, r6, r1
 80140f8:	429a      	cmp	r2, r3
 80140fa:	bfcf      	iteee	gt
 80140fc:	461a      	movgt	r2, r3
 80140fe:	1856      	addle	r6, r2, r1
 8014100:	1864      	addle	r4, r4, r1
 8014102:	1a9a      	suble	r2, r3, r2
 8014104:	3801      	subs	r0, #1
 8014106:	ea4f 0342 	mov.w	r3, r2, lsl #1
 801410a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801410e:	d1f2      	bne.n	80140f6 <__ieee754_sqrtf+0x6a>
 8014110:	b1ba      	cbz	r2, 8014142 <__ieee754_sqrtf+0xb6>
 8014112:	4e14      	ldr	r6, [pc, #80]	@ (8014164 <__ieee754_sqrtf+0xd8>)
 8014114:	4f14      	ldr	r7, [pc, #80]	@ (8014168 <__ieee754_sqrtf+0xdc>)
 8014116:	6830      	ldr	r0, [r6, #0]
 8014118:	6839      	ldr	r1, [r7, #0]
 801411a:	f7ec fd91 	bl	8000c40 <__aeabi_fsub>
 801411e:	f8d6 8000 	ldr.w	r8, [r6]
 8014122:	4601      	mov	r1, r0
 8014124:	4640      	mov	r0, r8
 8014126:	f7ed f83d 	bl	80011a4 <__aeabi_fcmple>
 801412a:	b150      	cbz	r0, 8014142 <__ieee754_sqrtf+0xb6>
 801412c:	6830      	ldr	r0, [r6, #0]
 801412e:	6839      	ldr	r1, [r7, #0]
 8014130:	f7ec fd88 	bl	8000c44 <__addsf3>
 8014134:	6836      	ldr	r6, [r6, #0]
 8014136:	4601      	mov	r1, r0
 8014138:	4630      	mov	r0, r6
 801413a:	f7ed f829 	bl	8001190 <__aeabi_fcmplt>
 801413e:	b168      	cbz	r0, 801415c <__ieee754_sqrtf+0xd0>
 8014140:	3402      	adds	r4, #2
 8014142:	1064      	asrs	r4, r4, #1
 8014144:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8014148:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 801414c:	e7af      	b.n	80140ae <__ieee754_sqrtf+0x22>
 801414e:	005b      	lsls	r3, r3, #1
 8014150:	3201      	adds	r2, #1
 8014152:	0218      	lsls	r0, r3, #8
 8014154:	d5fb      	bpl.n	801414e <__ieee754_sqrtf+0xc2>
 8014156:	3a01      	subs	r2, #1
 8014158:	1a89      	subs	r1, r1, r2
 801415a:	e7bb      	b.n	80140d4 <__ieee754_sqrtf+0x48>
 801415c:	3401      	adds	r4, #1
 801415e:	f024 0401 	bic.w	r4, r4, #1
 8014162:	e7ee      	b.n	8014142 <__ieee754_sqrtf+0xb6>
 8014164:	200000ac 	.word	0x200000ac
 8014168:	200000a8 	.word	0x200000a8

0801416c <_init>:
 801416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801416e:	bf00      	nop
 8014170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014172:	bc08      	pop	{r3}
 8014174:	469e      	mov	lr, r3
 8014176:	4770      	bx	lr

08014178 <_fini>:
 8014178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801417a:	bf00      	nop
 801417c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801417e:	bc08      	pop	{r3}
 8014180:	469e      	mov	lr, r3
 8014182:	4770      	bx	lr
