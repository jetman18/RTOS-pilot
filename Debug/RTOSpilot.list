
RTOSpilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000155ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  0801573c  0801573c  0002573c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015e10  08015e10  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  08015e10  08015e10  00025e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015e18  08015e18  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015e18  08015e18  00025e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015e1c  08015e1c  00025e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08015e20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e4  2**0
                  CONTENTS
 10 .bss          00004fcc  200000e4  200000e4  000300e4  2**2
                  ALLOC
 11 ._user_heap_stack 00003000  200050b0  200050b0  000300e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00045f17  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000089d4  00000000  00000000  0007602b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002488  00000000  00000000  0007ea00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002170  00000000  00000000  00080e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f937  00000000  00000000  00082ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00036fcc  00000000  00000000  000b292f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010610a  00000000  00000000  000e98fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001efa05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009c18  00000000  00000000  001efa58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e4 	.word	0x200000e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015724 	.word	0x08015724

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	08015724 	.word	0x08015724

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_ldivmod>:
 8000af8:	b97b      	cbnz	r3, 8000b1a <__aeabi_ldivmod+0x22>
 8000afa:	b972      	cbnz	r2, 8000b1a <__aeabi_ldivmod+0x22>
 8000afc:	2900      	cmp	r1, #0
 8000afe:	bfbe      	ittt	lt
 8000b00:	2000      	movlt	r0, #0
 8000b02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b06:	e006      	blt.n	8000b16 <__aeabi_ldivmod+0x1e>
 8000b08:	bf08      	it	eq
 8000b0a:	2800      	cmpeq	r0, #0
 8000b0c:	bf1c      	itt	ne
 8000b0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b12:	f04f 30ff 	movne.w	r0, #4294967295
 8000b16:	f000 b9b9 	b.w	8000e8c <__aeabi_idiv0>
 8000b1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b22:	2900      	cmp	r1, #0
 8000b24:	db09      	blt.n	8000b3a <__aeabi_ldivmod+0x42>
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db1a      	blt.n	8000b60 <__aeabi_ldivmod+0x68>
 8000b2a:	f000 f84d 	bl	8000bc8 <__udivmoddi4>
 8000b2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b36:	b004      	add	sp, #16
 8000b38:	4770      	bx	lr
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db1b      	blt.n	8000b7c <__aeabi_ldivmod+0x84>
 8000b44:	f000 f840 	bl	8000bc8 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4240      	negs	r0, r0
 8000b54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b58:	4252      	negs	r2, r2
 8000b5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b5e:	4770      	bx	lr
 8000b60:	4252      	negs	r2, r2
 8000b62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b66:	f000 f82f 	bl	8000bc8 <__udivmoddi4>
 8000b6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b72:	b004      	add	sp, #16
 8000b74:	4240      	negs	r0, r0
 8000b76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7a:	4770      	bx	lr
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	f000 f821 	bl	8000bc8 <__udivmoddi4>
 8000b86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8e:	b004      	add	sp, #16
 8000b90:	4252      	negs	r2, r2
 8000b92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96e 	b.w	8000e8c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8083 	bne.w	8000cde <__udivmoddi4+0x116>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d947      	bls.n	8000c6e <__udivmoddi4+0xa6>
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	b142      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	f1c2 0020 	rsb	r0, r2, #32
 8000be8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bec:	4091      	lsls	r1, r2
 8000bee:	4097      	lsls	r7, r2
 8000bf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000c00:	fa1f fe87 	uxth.w	lr, r7
 8000c04:	fb08 c116 	mls	r1, r8, r6, ip
 8000c08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1a:	f080 8119 	bcs.w	8000e50 <__udivmoddi4+0x288>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8116 	bls.w	8000e50 <__udivmoddi4+0x288>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c30:	fb08 3310 	mls	r3, r8, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8105 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f240 8102 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c50:	3802      	subs	r0, #2
 8000c52:	443c      	add	r4, r7
 8000c54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c58:	eba4 040e 	sub.w	r4, r4, lr
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	b11d      	cbz	r5, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c5 4300 	strd	r4, r3, [r5]
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xaa>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d150      	bne.n	8000d1c <__udivmoddi4+0x154>
 8000c7a:	1bcb      	subs	r3, r1, r7
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	2601      	movs	r6, #1
 8000c86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8a:	0c21      	lsrs	r1, r4, #16
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb08 f30c 	mul.w	r3, r8, ip
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000c9c:	1879      	adds	r1, r7, r1
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0xe2>
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	f200 80e9 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1ac9      	subs	r1, r1, r3
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x10c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x10a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80d9 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e7bf      	b.n	8000c5e <__udivmoddi4+0x96>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x12e>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <__udivmoddi4+0x282>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x1cc>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0x140>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80b8 	bhi.w	8000e78 <__udivmoddi4+0x2b0>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	468c      	mov	ip, r1
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0a8      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000d16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f603 	lsr.w	r6, r0, r3
 8000d24:	4097      	lsls	r7, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2e:	40d9      	lsrs	r1, r3
 8000d30:	4330      	orrs	r0, r6
 8000d32:	0c03      	lsrs	r3, r0, #16
 8000d34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d38:	fa1f f887 	uxth.w	r8, r7
 8000d3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb06 f108 	mul.w	r1, r6, r8
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x19c>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d56:	f080 808d 	bcs.w	8000e74 <__udivmoddi4+0x2ac>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 808a 	bls.w	8000e74 <__udivmoddi4+0x2ac>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b281      	uxth	r1, r0
 8000d68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb00 f308 	mul.w	r3, r0, r8
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x1c4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d82:	d273      	bcs.n	8000e6c <__udivmoddi4+0x2a4>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d971      	bls.n	8000e6c <__udivmoddi4+0x2a4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4439      	add	r1, r7
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d92:	e778      	b.n	8000c86 <__udivmoddi4+0xbe>
 8000d94:	f1c6 0c20 	rsb	ip, r6, #32
 8000d98:	fa03 f406 	lsl.w	r4, r3, r6
 8000d9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da0:	431c      	orrs	r4, r3
 8000da2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000db2:	431f      	orrs	r7, r3
 8000db4:	0c3b      	lsrs	r3, r7, #16
 8000db6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dba:	fa1f f884 	uxth.w	r8, r4
 8000dbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dca:	458a      	cmp	sl, r1
 8000dcc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x220>
 8000dd6:	1861      	adds	r1, r4, r1
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	d248      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000dde:	458a      	cmp	sl, r1
 8000de0:	d946      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4421      	add	r1, r4
 8000de8:	eba1 010a 	sub.w	r1, r1, sl
 8000dec:	b2bf      	uxth	r7, r7
 8000dee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x24a>
 8000e02:	19e7      	adds	r7, r4, r7
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e08:	d22e      	bcs.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0a:	45b8      	cmp	r8, r7
 8000e0c:	d92c      	bls.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4427      	add	r7, r4
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba7 0708 	sub.w	r7, r7, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454f      	cmp	r7, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	4649      	mov	r1, r9
 8000e24:	d31a      	bcc.n	8000e5c <__udivmoddi4+0x294>
 8000e26:	d017      	beq.n	8000e58 <__udivmoddi4+0x290>
 8000e28:	b15d      	cbz	r5, 8000e42 <__udivmoddi4+0x27a>
 8000e2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e36:	40f2      	lsrs	r2, r6
 8000e38:	ea4c 0202 	orr.w	r2, ip, r2
 8000e3c:	40f7      	lsrs	r7, r6
 8000e3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e42:	2600      	movs	r6, #0
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	462e      	mov	r6, r5
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	e70b      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e50:	4606      	mov	r6, r0
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6fd      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e58:	4543      	cmp	r3, r8
 8000e5a:	d2e5      	bcs.n	8000e28 <__udivmoddi4+0x260>
 8000e5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e60:	eb69 0104 	sbc.w	r1, r9, r4
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7df      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e7d2      	b.n	8000e12 <__udivmoddi4+0x24a>
 8000e6c:	4660      	mov	r0, ip
 8000e6e:	e78d      	b.n	8000d8c <__udivmoddi4+0x1c4>
 8000e70:	4681      	mov	r9, r0
 8000e72:	e7b9      	b.n	8000de8 <__udivmoddi4+0x220>
 8000e74:	4666      	mov	r6, ip
 8000e76:	e775      	b.n	8000d64 <__udivmoddi4+0x19c>
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e74a      	b.n	8000d12 <__udivmoddi4+0x14a>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	4439      	add	r1, r7
 8000e82:	e713      	b.n	8000cac <__udivmoddi4+0xe4>
 8000e84:	3802      	subs	r0, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	e724      	b.n	8000cd4 <__udivmoddi4+0x10c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6


BMP280_HandleTypedef devv;

void bmp280_init_default_params() {
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
	devv.params.mode = BMP280_MODE_NORMAL;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <bmp280_init_default_params+0x38>)
 8000e96:	2203      	movs	r2, #3
 8000e98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	devv.params.filter = BMP280_FILTER_16;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <bmp280_init_default_params+0x38>)
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	devv.params.oversampling_pressure = BMP280_ULTRA_HIGH_RES;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <bmp280_init_default_params+0x38>)
 8000ea6:	2205      	movs	r2, #5
 8000ea8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	devv.params.oversampling_temperature = BMP280_ULTRA_HIGH_RES;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <bmp280_init_default_params+0x38>)
 8000eae:	2205      	movs	r2, #5
 8000eb0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	devv.params.standby = BMP280_STANDBY_05;
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <bmp280_init_default_params+0x38>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200041f8 	.word	0x200041f8

08000ecc <read_register16>:

static bool read_register16(uint8_t addr, uint16_t *value) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af04      	add	r7, sp, #16
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (devv.addr << 1);
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <read_register16+0x5c>)
 8000eda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Read(devv.i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <read_register16+0x5c>)
 8000ee2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	89f9      	ldrh	r1, [r7, #14]
 8000eea:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2301      	movs	r3, #1
 8000efc:	f007 fb82 	bl	8008604 <HAL_I2C_Mem_Read>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10b      	bne.n	8000f1e <read_register16+0x52>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000f06:	7b7b      	ldrb	r3, [r7, #13]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	b21a      	sxth	r2, r3
 8000f0c:	7b3b      	ldrb	r3, [r7, #12]
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	801a      	strh	r2, [r3, #0]
		return true;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <read_register16+0x54>
	} else
		return false;
 8000f1e:	2300      	movs	r3, #0

}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200041f8 	.word	0x200041f8

08000f2c <read_data>:

static inline int read_data(uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af04      	add	r7, sp, #16
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	71bb      	strb	r3, [r7, #6]
	uint16_t tx_buff;
	tx_buff = (devv.addr << 1);
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <read_data+0x4c>)
 8000f3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	81fb      	strh	r3, [r7, #14]
	if (HAL_I2C_Mem_Read(devv.i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <read_data+0x4c>)
 8000f46:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	89f9      	ldrh	r1, [r7, #14]
 8000f52:	f241 3488 	movw	r4, #5000	; 0x1388
 8000f56:	9402      	str	r4, [sp, #8]
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f007 fb50 	bl	8008604 <HAL_I2C_Mem_Read>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <read_data+0x42>
		return 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <read_data+0x44>
	else
		return 1;
 8000f6e:	2301      	movs	r3, #1

}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	200041f8 	.word	0x200041f8

08000f7c <read_calibration_data>:

static bool read_calibration_data() {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

	if (read_register16(0x88, &devv.dig_T1)
 8000f80:	492c      	ldr	r1, [pc, #176]	; (8001034 <read_calibration_data+0xb8>)
 8000f82:	2088      	movs	r0, #136	; 0x88
 8000f84:	f7ff ffa2 	bl	8000ecc <read_register16>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d04e      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x8a, (uint16_t *) &devv.dig_T2)
 8000f8e:	492a      	ldr	r1, [pc, #168]	; (8001038 <read_calibration_data+0xbc>)
 8000f90:	208a      	movs	r0, #138	; 0x8a
 8000f92:	f7ff ff9b 	bl	8000ecc <read_register16>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d047      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x8c, (uint16_t *) &devv.dig_T3)
 8000f9c:	4927      	ldr	r1, [pc, #156]	; (800103c <read_calibration_data+0xc0>)
 8000f9e:	208c      	movs	r0, #140	; 0x8c
 8000fa0:	f7ff ff94 	bl	8000ecc <read_register16>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d040      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x8e, &devv.dig_P1)
 8000faa:	4925      	ldr	r1, [pc, #148]	; (8001040 <read_calibration_data+0xc4>)
 8000fac:	208e      	movs	r0, #142	; 0x8e
 8000fae:	f7ff ff8d 	bl	8000ecc <read_register16>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d039      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x90, (uint16_t *) &devv.dig_P2)
 8000fb8:	4922      	ldr	r1, [pc, #136]	; (8001044 <read_calibration_data+0xc8>)
 8000fba:	2090      	movs	r0, #144	; 0x90
 8000fbc:	f7ff ff86 	bl	8000ecc <read_register16>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d032      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x92, (uint16_t *) &devv.dig_P3)
 8000fc6:	4920      	ldr	r1, [pc, #128]	; (8001048 <read_calibration_data+0xcc>)
 8000fc8:	2092      	movs	r0, #146	; 0x92
 8000fca:	f7ff ff7f 	bl	8000ecc <read_register16>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d02b      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x94, (uint16_t *) &devv.dig_P4)
 8000fd4:	491d      	ldr	r1, [pc, #116]	; (800104c <read_calibration_data+0xd0>)
 8000fd6:	2094      	movs	r0, #148	; 0x94
 8000fd8:	f7ff ff78 	bl	8000ecc <read_register16>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d024      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x96, (uint16_t *) &devv.dig_P5)
 8000fe2:	491b      	ldr	r1, [pc, #108]	; (8001050 <read_calibration_data+0xd4>)
 8000fe4:	2096      	movs	r0, #150	; 0x96
 8000fe6:	f7ff ff71 	bl	8000ecc <read_register16>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d01d      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x98, (uint16_t *) &devv.dig_P6)
 8000ff0:	4918      	ldr	r1, [pc, #96]	; (8001054 <read_calibration_data+0xd8>)
 8000ff2:	2098      	movs	r0, #152	; 0x98
 8000ff4:	f7ff ff6a 	bl	8000ecc <read_register16>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d016      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x9a, (uint16_t *) &devv.dig_P7)
 8000ffe:	4916      	ldr	r1, [pc, #88]	; (8001058 <read_calibration_data+0xdc>)
 8001000:	209a      	movs	r0, #154	; 0x9a
 8001002:	f7ff ff63 	bl	8000ecc <read_register16>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00f      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x9c, (uint16_t *) &devv.dig_P8)
 800100c:	4913      	ldr	r1, [pc, #76]	; (800105c <read_calibration_data+0xe0>)
 800100e:	209c      	movs	r0, #156	; 0x9c
 8001010:	f7ff ff5c 	bl	8000ecc <read_register16>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d008      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x9e,(uint16_t *) &devv.dig_P9))
 800101a:	4911      	ldr	r1, [pc, #68]	; (8001060 <read_calibration_data+0xe4>)
 800101c:	209e      	movs	r0, #158	; 0x9e
 800101e:	f7ff ff55 	bl	8000ecc <read_register16>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <read_calibration_data+0xb0>
			{

		return true;
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <read_calibration_data+0xb2>
	}

	return false;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200041f8 	.word	0x200041f8
 8001038:	200041fa 	.word	0x200041fa
 800103c:	200041fc 	.word	0x200041fc
 8001040:	200041fe 	.word	0x200041fe
 8001044:	20004200 	.word	0x20004200
 8001048:	20004202 	.word	0x20004202
 800104c:	20004204 	.word	0x20004204
 8001050:	20004206 	.word	0x20004206
 8001054:	20004208 	.word	0x20004208
 8001058:	2000420a 	.word	0x2000420a
 800105c:	2000420c 	.word	0x2000420c
 8001060:	2000420e 	.word	0x2000420e

08001064 <write_register8>:


static int write_register8(uint8_t addr, uint8_t value) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af04      	add	r7, sp, #16
 800106a:	4603      	mov	r3, r0
 800106c:	460a      	mov	r2, r1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	4613      	mov	r3, r2
 8001072:	71bb      	strb	r3, [r7, #6]
	uint16_t tx_buff;

	tx_buff = (devv.addr << 1);
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <write_register8+0x4c>)
 8001076:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(devv.i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <write_register8+0x4c>)
 800107e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	b29a      	uxth	r2, r3
 8001084:	89f9      	ldrh	r1, [r7, #14]
 8001086:	f242 7310 	movw	r3, #10000	; 0x2710
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2301      	movs	r3, #1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	1dbb      	adds	r3, r7, #6
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	f007 f9bb 	bl	8008410 <HAL_I2C_Mem_Write>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <write_register8+0x40>
		return false;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e000      	b.n	80010a6 <write_register8+0x42>
	else
		return true;
 80010a4:	2301      	movs	r3, #1
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200041f8 	.word	0x200041f8

080010b4 <bmp280_init>:

bool bmp280_init(I2C_HandleTypeDef* i2c) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

    devv.addr = BMP280_I2C_ADDRESS_0;
 80010bc:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <bmp280_init+0x130>)
 80010be:	2276      	movs	r2, #118	; 0x76
 80010c0:	849a      	strh	r2, [r3, #36]	; 0x24
	devv.i2c  = i2c;
 80010c2:	4a48      	ldr	r2, [pc, #288]	; (80011e4 <bmp280_init+0x130>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6293      	str	r3, [r2, #40]	; 0x28
	bmp280_init_default_params();
 80010c8:	f7ff fee2 	bl	8000e90 <bmp280_init_default_params>

	if (devv.addr != BMP280_I2C_ADDRESS_0
 80010cc:	4b45      	ldr	r3, [pc, #276]	; (80011e4 <bmp280_init+0x130>)
 80010ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010d0:	2b76      	cmp	r3, #118	; 0x76
 80010d2:	d005      	beq.n	80010e0 <bmp280_init+0x2c>
			&& devv.addr != BMP280_I2C_ADDRESS_1) {
 80010d4:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <bmp280_init+0x130>)
 80010d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010d8:	2b77      	cmp	r3, #119	; 0x77
 80010da:	d001      	beq.n	80010e0 <bmp280_init+0x2c>

		return false;
 80010dc:	2300      	movs	r3, #0
 80010de:	e07d      	b.n	80011dc <bmp280_init+0x128>
	}

	if (read_data(BMP280_REG_ID,&devv.id, 1)) {
 80010e0:	2201      	movs	r2, #1
 80010e2:	4941      	ldr	r1, [pc, #260]	; (80011e8 <bmp280_init+0x134>)
 80010e4:	20d0      	movs	r0, #208	; 0xd0
 80010e6:	f7ff ff21 	bl	8000f2c <read_data>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <bmp280_init+0x40>
		return false;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e073      	b.n	80011dc <bmp280_init+0x128>
	}

	if (devv.id != BMP280_CHIP_ID && devv.id != BME280_CHIP_ID) {
 80010f4:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <bmp280_init+0x130>)
 80010f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80010fa:	2b58      	cmp	r3, #88	; 0x58
 80010fc:	d006      	beq.n	800110c <bmp280_init+0x58>
 80010fe:	4b39      	ldr	r3, [pc, #228]	; (80011e4 <bmp280_init+0x130>)
 8001100:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001104:	2b60      	cmp	r3, #96	; 0x60
 8001106:	d001      	beq.n	800110c <bmp280_init+0x58>

		return false;
 8001108:	2300      	movs	r3, #0
 800110a:	e067      	b.n	80011dc <bmp280_init+0x128>
	}

	// Soft reset.
	if (write_register8( BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800110c:	21b6      	movs	r1, #182	; 0xb6
 800110e:	20e0      	movs	r0, #224	; 0xe0
 8001110:	f7ff ffa8 	bl	8001064 <write_register8>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <bmp280_init+0x6a>
		return false;
 800111a:	2300      	movs	r3, #0
 800111c:	e05e      	b.n	80011dc <bmp280_init+0x128>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(BMP280_REG_STATUS, &status, 1)&& (status & 1) == 0)
 800111e:	f107 030d 	add.w	r3, r7, #13
 8001122:	2201      	movs	r2, #1
 8001124:	4619      	mov	r1, r3
 8001126:	20f3      	movs	r0, #243	; 0xf3
 8001128:	f7ff ff00 	bl	8000f2c <read_data>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f5      	bne.n	800111e <bmp280_init+0x6a>
 8001132:	7b7b      	ldrb	r3, [r7, #13]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f0      	bne.n	800111e <bmp280_init+0x6a>
			break;
	}

	if (!read_calibration_data()) {
 800113c:	f7ff ff1e 	bl	8000f7c <read_calibration_data>
 8001140:	4603      	mov	r3, r0
 8001142:	f083 0301 	eor.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d100      	bne.n	800114e <bmp280_init+0x9a>
 800114c:	e001      	b.n	8001152 <bmp280_init+0x9e>
		return false;
 800114e:	2300      	movs	r3, #0
 8001150:	e044      	b.n	80011dc <bmp280_init+0x128>
	}

	if (devv.id == BME280_CHIP_ID ) {
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <bmp280_init+0x130>)
 8001154:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001158:	2b60      	cmp	r3, #96	; 0x60
 800115a:	d101      	bne.n	8001160 <bmp280_init+0xac>
		return false;
 800115c:	2300      	movs	r3, #0
 800115e:	e03d      	b.n	80011dc <bmp280_init+0x128>
	}

	uint8_t config = (devv.params.standby << 5) | (devv.params.filter << 2);
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <bmp280_init+0x130>)
 8001162:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001166:	015b      	lsls	r3, r3, #5
 8001168:	b25a      	sxtb	r2, r3
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <bmp280_init+0x130>)
 800116c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	b25b      	sxtb	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b25b      	sxtb	r3, r3
 8001178:	73fb      	strb	r3, [r7, #15]
	if (write_register8(BMP280_REG_CONFIG, config)) {
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	4619      	mov	r1, r3
 800117e:	20f5      	movs	r0, #245	; 0xf5
 8001180:	f7ff ff70 	bl	8001064 <write_register8>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <bmp280_init+0xda>
		return false;
 800118a:	2300      	movs	r3, #0
 800118c:	e026      	b.n	80011dc <bmp280_init+0x128>
	}

	if (devv.params.mode == BMP280_MODE_FORCED) {
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <bmp280_init+0x130>)
 8001190:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001194:	2b01      	cmp	r3, #1
 8001196:	d103      	bne.n	80011a0 <bmp280_init+0xec>
		devv.params.mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <bmp280_init+0x130>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	uint8_t ctrl = (devv.params.oversampling_temperature << 5)
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <bmp280_init+0x130>)
 80011a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80011a6:	015b      	lsls	r3, r3, #5
			| (devv.params.oversampling_pressure << 2) | (devv.params.mode);
 80011a8:	b25a      	sxtb	r2, r3
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <bmp280_init+0x130>)
 80011ac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b25a      	sxtb	r2, r3
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <bmp280_init+0x130>)
 80011ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (devv.params.oversampling_temperature << 5)
 80011c4:	73bb      	strb	r3, [r7, #14]

	if (write_register8(BMP280_REG_CTRL, ctrl)) {
 80011c6:	7bbb      	ldrb	r3, [r7, #14]
 80011c8:	4619      	mov	r1, r3
 80011ca:	20f4      	movs	r0, #244	; 0xf4
 80011cc:	f7ff ff4a 	bl	8001064 <write_register8>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <bmp280_init+0x126>
		return false;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <bmp280_init+0x128>
	}

	return true;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200041f8 	.word	0x200041f8
 80011e8:	20004229 	.word	0x20004229

080011ec <compensate_temperature>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(int32_t adc_temp, int32_t *fine_temp) {
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) devv.dig_T1 << 1)))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	10da      	asrs	r2, r3, #3
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <compensate_temperature+0x70>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	1ad3      	subs	r3, r2, r3
			* (int32_t) devv.dig_T2) >> 11;
 8001202:	4a16      	ldr	r2, [pc, #88]	; (800125c <compensate_temperature+0x70>)
 8001204:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001208:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) devv.dig_T1 << 1)))
 800120c:	12db      	asrs	r3, r3, #11
 800120e:	60fb      	str	r3, [r7, #12]
	var2 = (((((adc_temp >> 4) - (int32_t) devv.dig_T1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	111b      	asrs	r3, r3, #4
 8001214:	4a11      	ldr	r2, [pc, #68]	; (800125c <compensate_temperature+0x70>)
 8001216:	8812      	ldrh	r2, [r2, #0]
 8001218:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) devv.dig_T1)) >> 12)
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	1112      	asrs	r2, r2, #4
 800121e:	490f      	ldr	r1, [pc, #60]	; (800125c <compensate_temperature+0x70>)
 8001220:	8809      	ldrh	r1, [r1, #0]
 8001222:	1a52      	subs	r2, r2, r1
 8001224:	fb02 f303 	mul.w	r3, r2, r3
 8001228:	131b      	asrs	r3, r3, #12
			* (int32_t) devv.dig_T3) >> 14;
 800122a:	4a0c      	ldr	r2, [pc, #48]	; (800125c <compensate_temperature+0x70>)
 800122c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001230:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) devv.dig_T1)
 8001234:	139b      	asrs	r3, r3, #14
 8001236:	60bb      	str	r3, [r7, #8]

	*fine_temp = var1 + var2;
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	441a      	add	r2, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	3380      	adds	r3, #128	; 0x80
 800124e:	121b      	asrs	r3, r3, #8
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	200041f8 	.word	0x200041f8

08001260 <compensate_pressure>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static  uint32_t compensate_pressure(int32_t adc_press,int32_t fine_temp) {
 8001260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001264:	b09a      	sub	sp, #104	; 0x68
 8001266:	af00      	add	r7, sp, #0
 8001268:	64f8      	str	r0, [r7, #76]	; 0x4c
 800126a:	64b9      	str	r1, [r7, #72]	; 0x48
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800126c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800126e:	461a      	mov	r2, r3
 8001270:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001274:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001278:	f143 35ff 	adc.w	r5, r3, #4294967295
 800127c:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	var2 = var1 * var1 * (int64_t) devv.dig_P6;
 8001280:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001284:	fb03 f102 	mul.w	r1, r3, r2
 8001288:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800128a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800128c:	fb03 f302 	mul.w	r3, r3, r2
 8001290:	18ca      	adds	r2, r1, r3
 8001292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001294:	fba3 4503 	umull	r4, r5, r3, r3
 8001298:	1953      	adds	r3, r2, r5
 800129a:	461d      	mov	r5, r3
 800129c:	4bdb      	ldr	r3, [pc, #876]	; (800160c <compensate_pressure+0x3ac>)
 800129e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012a8:	fb02 f005 	mul.w	r0, r2, r5
 80012ac:	fb04 f103 	mul.w	r1, r4, r3
 80012b0:	4401      	add	r1, r0
 80012b2:	fba4 2302 	umull	r2, r3, r4, r2
 80012b6:	4419      	add	r1, r3
 80012b8:	460b      	mov	r3, r1
 80012ba:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80012be:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var2 = var2 + ((var1 * (int64_t) devv.dig_P5) << 17);
 80012c2:	4bd2      	ldr	r3, [pc, #840]	; (800160c <compensate_pressure+0x3ac>)
 80012c4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012d0:	fb03 f001 	mul.w	r0, r3, r1
 80012d4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80012d6:	fb02 f101 	mul.w	r1, r2, r1
 80012da:	4408      	add	r0, r1
 80012dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012de:	fba1 2302 	umull	r2, r3, r1, r2
 80012e2:	18c1      	adds	r1, r0, r3
 80012e4:	460b      	mov	r3, r1
 80012e6:	f04f 0000 	mov.w	r0, #0
 80012ea:	f04f 0100 	mov.w	r1, #0
 80012ee:	0459      	lsls	r1, r3, #17
 80012f0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80012f4:	0450      	lsls	r0, r2, #17
 80012f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80012fa:	eb12 0800 	adds.w	r8, r2, r0
 80012fe:	eb43 0901 	adc.w	r9, r3, r1
 8001302:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	var2 = var2 + (((int64_t) devv.dig_P4) << 35);
 8001306:	4bc1      	ldr	r3, [pc, #772]	; (800160c <compensate_pressure+0x3ac>)
 8001308:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800130c:	b21a      	sxth	r2, r3
 800130e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001312:	f04f 0000 	mov.w	r0, #0
 8001316:	f04f 0100 	mov.w	r1, #0
 800131a:	00d1      	lsls	r1, r2, #3
 800131c:	2000      	movs	r0, #0
 800131e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001322:	1814      	adds	r4, r2, r0
 8001324:	61bc      	str	r4, [r7, #24]
 8001326:	414b      	adcs	r3, r1
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800132e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	var1 = ((var1 * var1 * (int64_t) devv.dig_P3) >> 8)
 8001332:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001336:	fb03 f102 	mul.w	r1, r3, r2
 800133a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800133c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800133e:	fb03 f302 	mul.w	r3, r3, r2
 8001342:	18ca      	adds	r2, r1, r3
 8001344:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001346:	fba3 4503 	umull	r4, r5, r3, r3
 800134a:	1953      	adds	r3, r2, r5
 800134c:	461d      	mov	r5, r3
 800134e:	4baf      	ldr	r3, [pc, #700]	; (800160c <compensate_pressure+0x3ac>)
 8001350:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001354:	b21a      	sxth	r2, r3
 8001356:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800135a:	fb02 f005 	mul.w	r0, r2, r5
 800135e:	fb04 f103 	mul.w	r1, r4, r3
 8001362:	4401      	add	r1, r0
 8001364:	fba4 2302 	umull	r2, r3, r4, r2
 8001368:	4419      	add	r1, r3
 800136a:	460b      	mov	r3, r1
 800136c:	f04f 0800 	mov.w	r8, #0
 8001370:	f04f 0900 	mov.w	r9, #0
 8001374:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001378:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 800137c:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) devv.dig_P2) << 12);
 8001380:	4ba2      	ldr	r3, [pc, #648]	; (800160c <compensate_pressure+0x3ac>)
 8001382:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001386:	b21a      	sxth	r2, r3
 8001388:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800138c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800138e:	fb03 f001 	mul.w	r0, r3, r1
 8001392:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001394:	fb02 f101 	mul.w	r1, r2, r1
 8001398:	1844      	adds	r4, r0, r1
 800139a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800139c:	fba1 0102 	umull	r0, r1, r1, r2
 80013a0:	1863      	adds	r3, r4, r1
 80013a2:	4619      	mov	r1, r3
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	030b      	lsls	r3, r1, #12
 80013ae:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80013b2:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) devv.dig_P3) >> 8)
 80013b4:	eb18 0102 	adds.w	r1, r8, r2
 80013b8:	6139      	str	r1, [r7, #16]
 80013ba:	eb49 0303 	adc.w	r3, r9, r3
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80013c4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) devv.dig_P1) >> 33;
 80013c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80013cc:	1c11      	adds	r1, r2, #0
 80013ce:	6439      	str	r1, [r7, #64]	; 0x40
 80013d0:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 80013d4:	647b      	str	r3, [r7, #68]	; 0x44
 80013d6:	4b8d      	ldr	r3, [pc, #564]	; (800160c <compensate_pressure+0x3ac>)
 80013d8:	88db      	ldrh	r3, [r3, #6]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80013e4:	4629      	mov	r1, r5
 80013e6:	fb02 f001 	mul.w	r0, r2, r1
 80013ea:	4621      	mov	r1, r4
 80013ec:	fb01 f103 	mul.w	r1, r1, r3
 80013f0:	4401      	add	r1, r0
 80013f2:	4620      	mov	r0, r4
 80013f4:	fba0 2302 	umull	r2, r3, r0, r2
 80013f8:	4419      	add	r1, r3
 80013fa:	460b      	mov	r3, r1
 80013fc:	f04f 0000 	mov.w	r0, #0
 8001400:	f04f 0100 	mov.w	r1, #0
 8001404:	1058      	asrs	r0, r3, #1
 8001406:	17d9      	asrs	r1, r3, #31
 8001408:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	if (var1 == 0) {
 800140c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001410:	4313      	orrs	r3, r2
 8001412:	d101      	bne.n	8001418 <compensate_pressure+0x1b8>
		return 0;  // avoid exception caused by division by zero
 8001414:	2300      	movs	r3, #0
 8001416:	e0f4      	b.n	8001602 <compensate_pressure+0x3a2>
	}

	p = 1048576 - adc_press;
 8001418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800141a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800141e:	461a      	mov	r2, r3
 8001420:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001424:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	p = (((p << 31) - var2) * 3125) / var1;
 8001428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800142a:	105b      	asrs	r3, r3, #1
 800142c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800142e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001430:	07db      	lsls	r3, r3, #31
 8001432:	63bb      	str	r3, [r7, #56]	; 0x38
 8001434:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001438:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800143c:	4621      	mov	r1, r4
 800143e:	ebb1 0a02 	subs.w	sl, r1, r2
 8001442:	4629      	mov	r1, r5
 8001444:	eb61 0b03 	sbc.w	fp, r1, r3
 8001448:	4652      	mov	r2, sl
 800144a:	465b      	mov	r3, fp
 800144c:	1891      	adds	r1, r2, r2
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	415b      	adcs	r3, r3
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001458:	eb12 020a 	adds.w	r2, r2, sl
 800145c:	eb43 030b 	adc.w	r3, r3, fp
 8001460:	f04f 0000 	mov.w	r0, #0
 8001464:	f04f 0100 	mov.w	r1, #0
 8001468:	0199      	lsls	r1, r3, #6
 800146a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800146e:	0190      	lsls	r0, r2, #6
 8001470:	1812      	adds	r2, r2, r0
 8001472:	eb41 0303 	adc.w	r3, r1, r3
 8001476:	f04f 0000 	mov.w	r0, #0
 800147a:	f04f 0100 	mov.w	r1, #0
 800147e:	0099      	lsls	r1, r3, #2
 8001480:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001484:	0090      	lsls	r0, r2, #2
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	eb12 020a 	adds.w	r2, r2, sl
 800148e:	eb43 030b 	adc.w	r3, r3, fp
 8001492:	f04f 0000 	mov.w	r0, #0
 8001496:	f04f 0100 	mov.w	r1, #0
 800149a:	0099      	lsls	r1, r3, #2
 800149c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014a0:	0090      	lsls	r0, r2, #2
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	eb12 010a 	adds.w	r1, r2, sl
 80014aa:	6339      	str	r1, [r7, #48]	; 0x30
 80014ac:	eb43 030b 	adc.w	r3, r3, fp
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
 80014b2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80014ba:	f7ff fb1d 	bl	8000af8 <__aeabi_ldivmod>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	var1 = ((int64_t) devv.dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80014c6:	4b51      	ldr	r3, [pc, #324]	; (800160c <compensate_pressure+0x3ac>)
 80014c8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80014cc:	b218      	sxth	r0, r3
 80014ce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80014d2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	0b62      	lsrs	r2, r4, #13
 80014e0:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80014e4:	136b      	asrs	r3, r5, #13
 80014e6:	fb02 f501 	mul.w	r5, r2, r1
 80014ea:	fb00 f403 	mul.w	r4, r0, r3
 80014ee:	442c      	add	r4, r5
 80014f0:	fba0 0102 	umull	r0, r1, r0, r2
 80014f4:	1863      	adds	r3, r4, r1
 80014f6:	4619      	mov	r1, r3
 80014f8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	0b62      	lsrs	r2, r4, #13
 8001506:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 800150a:	136b      	asrs	r3, r5, #13
 800150c:	fb02 f501 	mul.w	r5, r2, r1
 8001510:	fb00 f403 	mul.w	r4, r0, r3
 8001514:	442c      	add	r4, r5
 8001516:	fba0 0102 	umull	r0, r1, r0, r2
 800151a:	1863      	adds	r3, r4, r1
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	0e42      	lsrs	r2, r0, #25
 8001528:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800152c:	164b      	asrs	r3, r1, #25
 800152e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = ((int64_t) devv.dig_P8 * p) >> 19;
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <compensate_pressure+0x3ac>)
 8001534:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001538:	b21a      	sxth	r2, r3
 800153a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800153e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001540:	fb03 f001 	mul.w	r0, r3, r1
 8001544:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001546:	fb02 f101 	mul.w	r1, r2, r1
 800154a:	1844      	adds	r4, r0, r1
 800154c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800154e:	fba1 0102 	umull	r0, r1, r1, r2
 8001552:	1863      	adds	r3, r4, r1
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	0cc2      	lsrs	r2, r0, #19
 8001560:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001564:	14cb      	asrs	r3, r1, #19
 8001566:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	p = ((p + var1 + var2) >> 8) + ((int64_t) devv.dig_P7 << 4);
 800156a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800156e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001572:	1884      	adds	r4, r0, r2
 8001574:	62bc      	str	r4, [r7, #40]	; 0x28
 8001576:	eb41 0303 	adc.w	r3, r1, r3
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800157c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001580:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001584:	4621      	mov	r1, r4
 8001586:	1889      	adds	r1, r1, r2
 8001588:	6239      	str	r1, [r7, #32]
 800158a:	4629      	mov	r1, r5
 800158c:	eb43 0101 	adc.w	r1, r3, r1
 8001590:	6279      	str	r1, [r7, #36]	; 0x24
 8001592:	f04f 0000 	mov.w	r0, #0
 8001596:	f04f 0100 	mov.w	r1, #0
 800159a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800159e:	4623      	mov	r3, r4
 80015a0:	0a18      	lsrs	r0, r3, #8
 80015a2:	462b      	mov	r3, r5
 80015a4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015a8:	462b      	mov	r3, r5
 80015aa:	1219      	asrs	r1, r3, #8
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <compensate_pressure+0x3ac>)
 80015ae:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80015b2:	b21c      	sxth	r4, r3
 80015b4:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	012b      	lsls	r3, r5, #4
 80015c2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80015c6:	0122      	lsls	r2, r4, #4
 80015c8:	1884      	adds	r4, r0, r2
 80015ca:	603c      	str	r4, [r7, #0]
 80015cc:	eb41 0303 	adc.w	r3, r1, r3
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80015d6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	return p/256;
 80015da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015de:	2a00      	cmp	r2, #0
 80015e0:	f173 0100 	sbcs.w	r1, r3, #0
 80015e4:	da02      	bge.n	80015ec <compensate_pressure+0x38c>
 80015e6:	32ff      	adds	r2, #255	; 0xff
 80015e8:	f143 0300 	adc.w	r3, r3, #0
 80015ec:	f04f 0000 	mov.w	r0, #0
 80015f0:	f04f 0100 	mov.w	r1, #0
 80015f4:	0a10      	lsrs	r0, r2, #8
 80015f6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015fa:	1219      	asrs	r1, r3, #8
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4613      	mov	r3, r2
}
 8001602:	4618      	mov	r0, r3
 8001604:	3768      	adds	r7, #104	; 0x68
 8001606:	46bd      	mov	sp, r7
 8001608:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800160c:	200041f8 	.word	0x200041f8

08001610 <bmp280_read_fixed>:


int32_t bmp280_read_fixed(){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	static int32_t temperature;
	static int32_t pressure;

	uint8_t data[3];

	if (read_data(0xf7, data,3)) {
 8001616:	463b      	mov	r3, r7
 8001618:	2203      	movs	r2, #3
 800161a:	4619      	mov	r1, r3
 800161c:	20f7      	movs	r0, #247	; 0xf7
 800161e:	f7ff fc85 	bl	8000f2c <read_data>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <bmp280_read_fixed+0x1c>
		return false;
 8001628:	2300      	movs	r3, #0
 800162a:	e075      	b.n	8001718 <bmp280_read_fixed+0x108>
	}
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800162c:	783b      	ldrb	r3, [r7, #0]
 800162e:	031a      	lsls	r2, r3, #12
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	4313      	orrs	r3, r2
 8001636:	78ba      	ldrb	r2, [r7, #2]
 8001638:	0912      	lsrs	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	4313      	orrs	r3, r2
 800163e:	4a3c      	ldr	r2, [pc, #240]	; (8001730 <bmp280_read_fixed+0x120>)
 8001640:	6013      	str	r3, [r2, #0]

	if (read_data(0xfA, data,3)) {
 8001642:	463b      	mov	r3, r7
 8001644:	2203      	movs	r2, #3
 8001646:	4619      	mov	r1, r3
 8001648:	20fa      	movs	r0, #250	; 0xfa
 800164a:	f7ff fc6f 	bl	8000f2c <read_data>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <bmp280_read_fixed+0x48>
		return false;
 8001654:	2300      	movs	r3, #0
 8001656:	e05f      	b.n	8001718 <bmp280_read_fixed+0x108>
	}
	adc_temp = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001658:	783b      	ldrb	r3, [r7, #0]
 800165a:	031a      	lsls	r2, r3, #12
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	4313      	orrs	r3, r2
 8001662:	78ba      	ldrb	r2, [r7, #2]
 8001664:	0912      	lsrs	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	4313      	orrs	r3, r2
 800166a:	4a32      	ldr	r2, [pc, #200]	; (8001734 <bmp280_read_fixed+0x124>)
 800166c:	6013      	str	r3, [r2, #0]
    temperature = compensate_temperature(adc_temp, &fine_temp);
 800166e:	4b31      	ldr	r3, [pc, #196]	; (8001734 <bmp280_read_fixed+0x124>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4931      	ldr	r1, [pc, #196]	; (8001738 <bmp280_read_fixed+0x128>)
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fdb9 	bl	80011ec <compensate_temperature>
 800167a:	4603      	mov	r3, r0
 800167c:	4a2f      	ldr	r2, [pc, #188]	; (800173c <bmp280_read_fixed+0x12c>)
 800167e:	6013      	str	r3, [r2, #0]
	pressure = compensate_pressure(adc_pressure, fine_temp);
 8001680:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <bmp280_read_fixed+0x120>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a2c      	ldr	r2, [pc, #176]	; (8001738 <bmp280_read_fixed+0x128>)
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fde8 	bl	8001260 <compensate_pressure>
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <bmp280_read_fixed+0x130>)
 8001696:	601a      	str	r2, [r3, #0]
	int32_t bmp280_altitude =((44330 * (1.0 - powf((float)pressure/102416,0.1903))))*100 - 100000;// cm
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <bmp280_read_fixed+0x130>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001744 <bmp280_read_fixed+0x134>
 80016a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016ac:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001748 <bmp280_read_fixed+0x138>
 80016b0:	eeb0 0a47 	vmov.f32	s0, s14
 80016b4:	f013 fb18 	bl	8014ce8 <powf>
 80016b8:	ee10 3a10 	vmov	r3, s0
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe feeb 	bl	8000498 <__aeabi_f2d>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	f04f 0000 	mov.w	r0, #0
 80016ca:	4920      	ldr	r1, [pc, #128]	; (800174c <bmp280_read_fixed+0x13c>)
 80016cc:	f7fe fd84 	bl	80001d8 <__aeabi_dsub>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	a311      	add	r3, pc, #68	; (adr r3, 8001720 <bmp280_read_fixed+0x110>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7fe ff33 	bl	8000548 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <bmp280_read_fixed+0x140>)
 80016f0:	f7fe ff2a 	bl	8000548 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	a30a      	add	r3, pc, #40	; (adr r3, 8001728 <bmp280_read_fixed+0x118>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7fe fd69 	bl	80001d8 <__aeabi_dsub>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff f9cb 	bl	8000aa8 <__aeabi_d2iz>
 8001712:	4603      	mov	r3, r0
 8001714:	607b      	str	r3, [r7, #4]
	return bmp280_altitude;
 8001716:	687b      	ldr	r3, [r7, #4]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	00000000 	.word	0x00000000
 8001724:	40e5a540 	.word	0x40e5a540
 8001728:	00000000 	.word	0x00000000
 800172c:	40f86a00 	.word	0x40f86a00
 8001730:	20000100 	.word	0x20000100
 8001734:	20000104 	.word	0x20000104
 8001738:	20000108 	.word	0x20000108
 800173c:	2000010c 	.word	0x2000010c
 8001740:	20000110 	.word	0x20000110
 8001744:	47c80800 	.word	0x47c80800
 8001748:	3e42de01 	.word	0x3e42de01
 800174c:	3ff00000 	.word	0x3ff00000
 8001750:	40590000 	.word	0x40590000

08001754 <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
    ibusChannelData[0] = 1500;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <ibus_init+0x54>)
 800175e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001762:	601a      	str	r2, [r3, #0]
    ibusChannelData[1] = 1500;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <ibus_init+0x54>)
 8001766:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800176a:	605a      	str	r2, [r3, #4]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 800176c:	2302      	movs	r3, #2
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e008      	b.n	8001784 <ibus_init+0x30>
      ibusChannelData[i] = 1000;
 8001772:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <ibus_init+0x54>)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800177a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3301      	adds	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b0d      	cmp	r3, #13
 8001788:	ddf3      	ble.n	8001772 <ibus_init+0x1e>
    }
	uart = uartt;
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <ibus_init+0x58>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <ibus_init+0x58>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2201      	movs	r2, #1
 8001796:	4906      	ldr	r1, [pc, #24]	; (80017b0 <ibus_init+0x5c>)
 8001798:	4618      	mov	r0, r3
 800179a:	f00a fdf4 	bl	800c386 <HAL_UART_Receive_IT>
#endif
}
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20004230 	.word	0x20004230
 80017ac:	2000013c 	.word	0x2000013c
 80017b0:	20000138 	.word	0x20000138

080017b4 <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <ibus_calback+0x20>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f80d 	bl	80017dc <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <ibus_calback+0x24>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4902      	ldr	r1, [pc, #8]	; (80017d4 <ibus_calback+0x20>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f00a fddb 	bl	800c386 <HAL_UART_Receive_IT>
#endif

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000138 	.word	0x20000138
 80017d8:	2000013c 	.word	0x2000013c

080017dc <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <ibusDataReceive+0x78>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <ibusDataReceive+0x7c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <ibusDataReceive+0x80>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001800:	4293      	cmp	r3, r2
 8001802:	d902      	bls.n	800180a <ibusDataReceive+0x2e>
        ibusFramePosition = 0;
 8001804:	4b16      	ldr	r3, [pc, #88]	; (8001860 <ibusDataReceive+0x84>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 800180a:	4a14      	ldr	r2, [pc, #80]	; (800185c <ibusDataReceive+0x80>)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <ibusDataReceive+0x84>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <ibusDataReceive+0x42>
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	2b20      	cmp	r3, #32
 800181c:	d114      	bne.n	8001848 <ibusDataReceive+0x6c>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <ibusDataReceive+0x84>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4619      	mov	r1, r3
 8001824:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <ibusDataReceive+0x88>)
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <ibusDataReceive+0x84>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b1f      	cmp	r3, #31
 8001830:	d103      	bne.n	800183a <ibusDataReceive+0x5e>
        ibusFrameDone = TRUE;
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <ibusDataReceive+0x8c>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e007      	b.n	800184a <ibusDataReceive+0x6e>
    } else {
        ibusFramePosition++;
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <ibusDataReceive+0x84>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <ibusDataReceive+0x84>)
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	e000      	b.n	800184a <ibusDataReceive+0x6e>
        return;
 8001848:	bf00      	nop
    }
}
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	200048c8 	.word	0x200048c8
 8001858:	20004658 	.word	0x20004658
 800185c:	20000140 	.word	0x20000140
 8001860:	20000144 	.word	0x20000144
 8001864:	20000118 	.word	0x20000118
 8001868:	20000114 	.word	0x20000114

0800186c <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 8001872:	4b64      	ldr	r3, [pc, #400]	; (8001a04 <ibusFrameComplete+0x198>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 80bc 	beq.w	80019f4 <ibusFrameComplete+0x188>
        ibusFrameDone = FALSE;
 800187c:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <ibusFrameComplete+0x198>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 8001882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001886:	81bb      	strh	r3, [r7, #12]

        for (i = 0; i < 30; i++)
 8001888:	2300      	movs	r3, #0
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e009      	b.n	80018a2 <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	4a5d      	ldr	r2, [pc, #372]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	b29b      	uxth	r3, r3
 8001896:	89ba      	ldrh	r2, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 30; i++)
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	3301      	adds	r3, #1
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b1d      	cmp	r3, #29
 80018a6:	d9f2      	bls.n	800188e <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 80018a8:	4b57      	ldr	r3, [pc, #348]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018aa:	7f9b      	ldrb	r3, [r3, #30]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	4b56      	ldr	r3, [pc, #344]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018b0:	7fdb      	ldrb	r3, [r3, #31]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	80fb      	strh	r3, [r7, #6]

        if (chksum == rxsum) {
 80018bc:	89ba      	ldrh	r2, [r7, #12]
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8097 	bne.w	80019f4 <ibusFrameComplete+0x188>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 80018c6:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018c8:	78db      	ldrb	r3, [r3, #3]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	4a4e      	ldr	r2, [pc, #312]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018ce:	7892      	ldrb	r2, [r2, #2]
 80018d0:	4413      	add	r3, r2
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <ibusFrameComplete+0x1a0>)
 80018d6:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 80018d8:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018da:	795b      	ldrb	r3, [r3, #5]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	4a4a      	ldr	r2, [pc, #296]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018e0:	7912      	ldrb	r2, [r2, #4]
 80018e2:	4413      	add	r3, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <ibusFrameComplete+0x1a0>)
 80018e8:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018ec:	79db      	ldrb	r3, [r3, #7]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	4a45      	ldr	r2, [pc, #276]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018f2:	7992      	ldrb	r2, [r2, #6]
 80018f4:	4413      	add	r3, r2
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b44      	ldr	r3, [pc, #272]	; (8001a0c <ibusFrameComplete+0x1a0>)
 80018fa:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 80018fc:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018fe:	7a5b      	ldrb	r3, [r3, #9]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	4a41      	ldr	r2, [pc, #260]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001904:	7a12      	ldrb	r2, [r2, #8]
 8001906:	4413      	add	r3, r2
 8001908:	461a      	mov	r2, r3
 800190a:	4b40      	ldr	r3, [pc, #256]	; (8001a0c <ibusFrameComplete+0x1a0>)
 800190c:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 800190e:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001910:	7adb      	ldrb	r3, [r3, #11]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	4a3c      	ldr	r2, [pc, #240]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001916:	7a92      	ldrb	r2, [r2, #10]
 8001918:	4413      	add	r3, r2
 800191a:	461a      	mov	r2, r3
 800191c:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <ibusFrameComplete+0x1a0>)
 800191e:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 8001920:	4b39      	ldr	r3, [pc, #228]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001922:	7b5b      	ldrb	r3, [r3, #13]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	4a38      	ldr	r2, [pc, #224]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001928:	7b12      	ldrb	r2, [r2, #12]
 800192a:	4413      	add	r3, r2
 800192c:	461a      	mov	r2, r3
 800192e:	4b37      	ldr	r3, [pc, #220]	; (8001a0c <ibusFrameComplete+0x1a0>)
 8001930:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 8001932:	4b35      	ldr	r3, [pc, #212]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001934:	7bdb      	ldrb	r3, [r3, #15]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	4a33      	ldr	r2, [pc, #204]	; (8001a08 <ibusFrameComplete+0x19c>)
 800193a:	7b92      	ldrb	r2, [r2, #14]
 800193c:	4413      	add	r3, r2
 800193e:	461a      	mov	r2, r3
 8001940:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <ibusFrameComplete+0x1a0>)
 8001942:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 8001944:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001946:	7c5b      	ldrb	r3, [r3, #17]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	4a2f      	ldr	r2, [pc, #188]	; (8001a08 <ibusFrameComplete+0x19c>)
 800194c:	7c12      	ldrb	r2, [r2, #16]
 800194e:	4413      	add	r3, r2
 8001950:	461a      	mov	r2, r3
 8001952:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <ibusFrameComplete+0x1a0>)
 8001954:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 8001956:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001958:	7cdb      	ldrb	r3, [r3, #19]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	4a2a      	ldr	r2, [pc, #168]	; (8001a08 <ibusFrameComplete+0x19c>)
 800195e:	7c92      	ldrb	r2, [r2, #18]
 8001960:	4413      	add	r3, r2
 8001962:	461a      	mov	r2, r3
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <ibusFrameComplete+0x1a0>)
 8001966:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <ibusFrameComplete+0x19c>)
 800196a:	7d5b      	ldrb	r3, [r3, #21]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001970:	7d12      	ldrb	r2, [r2, #20]
 8001972:	4413      	add	r3, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <ibusFrameComplete+0x1a0>)
 8001978:	625a      	str	r2, [r3, #36]	; 0x24
            ibusChannelData[10] = (ibus[23] << 8) + ibus[22];
 800197a:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <ibusFrameComplete+0x19c>)
 800197c:	7ddb      	ldrb	r3, [r3, #23]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	4a21      	ldr	r2, [pc, #132]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001982:	7d92      	ldrb	r2, [r2, #22]
 8001984:	4413      	add	r3, r2
 8001986:	461a      	mov	r2, r3
 8001988:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <ibusFrameComplete+0x1a0>)
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
			ibusChannelData[11] = (ibus[25] << 8) + ibus[24];
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <ibusFrameComplete+0x19c>)
 800198e:	7e5b      	ldrb	r3, [r3, #25]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001994:	7e12      	ldrb	r2, [r2, #24]
 8001996:	4413      	add	r3, r2
 8001998:	461a      	mov	r2, r3
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <ibusFrameComplete+0x1a0>)
 800199c:	62da      	str	r2, [r3, #44]	; 0x2c
			ibusChannelData[12] = (ibus[27] << 8) + ibus[26];
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <ibusFrameComplete+0x19c>)
 80019a0:	7edb      	ldrb	r3, [r3, #27]
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <ibusFrameComplete+0x19c>)
 80019a6:	7e92      	ldrb	r2, [r2, #26]
 80019a8:	4413      	add	r3, r2
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <ibusFrameComplete+0x1a0>)
 80019ae:	631a      	str	r2, [r3, #48]	; 0x30
			ibusChannelData[13] = (ibus[29] << 8) + ibus[28];
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <ibusFrameComplete+0x19c>)
 80019b2:	7f5b      	ldrb	r3, [r3, #29]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <ibusFrameComplete+0x19c>)
 80019b8:	7f12      	ldrb	r2, [r2, #28]
 80019ba:	4413      	add	r3, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <ibusFrameComplete+0x1a0>)
 80019c0:	635a      	str	r2, [r3, #52]	; 0x34
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	e010      	b.n	80019ea <ibusFrameComplete+0x17e>
			    if(ibusChannelData[i] > 2100){
 80019c8:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <ibusFrameComplete+0x1a0>)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d0:	f640 0234 	movw	r2, #2100	; 0x834
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d905      	bls.n	80019e4 <ibusFrameComplete+0x178>
				    ibusChannelData[i] = 1000;
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <ibusFrameComplete+0x1a0>)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	3301      	adds	r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2b0d      	cmp	r3, #13
 80019ee:	ddeb      	ble.n	80019c8 <ibusFrameComplete+0x15c>
				}
			}
            return TRUE;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <ibusFrameComplete+0x18a>
        }
    }
    return FALSE;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000114 	.word	0x20000114
 8001a08:	20000118 	.word	0x20000118
 8001a0c:	20004230 	.word	0x20004230

08001a10 <mpu6050Connection>:

/* Check mpu6050 connection
 * return 1 -> not connected
 * return 0 -> connected
 */ 
int8_t mpu6050Connection(){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
    isConnected = HAL_I2C_IsDeviceReady(i2c,IMU_DEV_ADDRES, 3, 5);
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <mpu6050Connection+0x24>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	2305      	movs	r3, #5
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	21d0      	movs	r1, #208	; 0xd0
 8001a1e:	f007 f817 	bl	8008a50 <HAL_I2C_IsDeviceReady>
 8001a22:	4603      	mov	r3, r0
 8001a24:	b25a      	sxtb	r2, r3
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <mpu6050Connection+0x28>)
 8001a28:	701a      	strb	r2, [r3, #0]
    return isConnected;
 8001a2a:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <mpu6050Connection+0x28>)
 8001a2c:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000148 	.word	0x20000148
 8001a38:	2000014c 	.word	0x2000014c

08001a3c <mpu6050_init>:
}

/* configuration mpu6050*/


int8_t mpu6050_init(I2C_HandleTypeDef *hi2c){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	6078      	str	r0, [r7, #4]
	data[1] = (uint8_t)(ACC_2G<<3);
    SPI_write(&data,2);
	return 0;
#endif
#ifdef I2C
  i2c = hi2c;	
 8001a44:	4a25      	ldr	r2, [pc, #148]	; (8001adc <mpu6050_init+0xa0>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6013      	str	r3, [r2, #0]
	int8_t k = mpu6050Connection();
 8001a4a:	f7ff ffe1 	bl	8001a10 <mpu6050Connection>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	73fb      	strb	r3, [r7, #15]
	if(!k){
 8001a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d13a      	bne.n	8001ad0 <mpu6050_init+0x94>
		uint8_t buffer[6];	
		buffer[0] = MPU_RA_PWR_MGMT_1; 
 8001a5a:	236b      	movs	r3, #107	; 0x6b
 8001a5c:	723b      	strb	r3, [r7, #8]
		buffer[1] = RESET_REG;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <mpu6050_init+0xa0>)
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	f107 0208 	add.w	r2, r7, #8
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2302      	movs	r3, #2
 8001a70:	21d0      	movs	r1, #208	; 0xd0
 8001a72:	f006 f9a9 	bl	8007dc8 <HAL_I2C_Master_Transmit>
		
		//buffer[0] = CONFIGURATION;
		//buffer[1] = (HZ_5<<0);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);

		buffer[0] = GYRO_REG_CONFIG;
 8001a76:	231b      	movs	r3, #27
 8001a78:	723b      	strb	r3, [r7, #8]
		buffer[1] = (GYRO_1000dps<<3);
 8001a7a:	2310      	movs	r3, #16
 8001a7c:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <mpu6050_init+0xa0>)
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	f107 0208 	add.w	r2, r7, #8
 8001a86:	2301      	movs	r3, #1
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	21d0      	movs	r1, #208	; 0xd0
 8001a8e:	f006 f99b 	bl	8007dc8 <HAL_I2C_Master_Transmit>

		buffer[0] = ACC_REG_CONFIG;
 8001a92:	231c      	movs	r3, #28
 8001a94:	723b      	strb	r3, [r7, #8]
		buffer[1] = (ACC_16G<<3);
 8001a96:	2318      	movs	r3, #24
 8001a98:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <mpu6050_init+0xa0>)
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	f107 0208 	add.w	r2, r7, #8
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	21d0      	movs	r1, #208	; 0xd0
 8001aaa:	f006 f98d 	bl	8007dc8 <HAL_I2C_Master_Transmit>
		//buffer[1] &= ~(1<<5);
		//buffer[1] |= (1<<5);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
		
		// set aux i2c pass through mode 
		buffer[0] = INT_PIN_CFG;
 8001aae:	2337      	movs	r3, #55	; 0x37
 8001ab0:	723b      	strb	r3, [r7, #8]
		buffer[1] |= (1<<1);
 8001ab2:	7a7b      	ldrb	r3, [r7, #9]
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <mpu6050_init+0xa0>)
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	f107 0208 	add.w	r2, r7, #8
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2302      	movs	r3, #2
 8001aca:	21d0      	movs	r1, #208	; 0xd0
 8001acc:	f006 f97c 	bl	8007dc8 <HAL_I2C_Master_Transmit>

	}
	return k;
 8001ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
#endif

}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000148 	.word	0x20000148

08001ae0 <mpu6050_gyro_get_raw>:
/* Gyro get raw data (Lbs/s)
 * x - rate
 * y - rate
 * z - rate   
 */
void mpu6050_gyro_get_raw(axis3_t *raw){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	6078      	str	r0, [r7, #4]
	  uint8_t buffe[6];
	  buffe[0] = (uint8_t)GYRO_DATA_REG;
 8001ae8:	2343      	movs	r3, #67	; 0x43
 8001aea:	723b      	strb	r3, [r7, #8]

#ifdef I2C
	  HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <mpu6050_gyro_get_raw+0x74>)
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	f107 0208 	add.w	r2, r7, #8
 8001af4:	2301      	movs	r3, #1
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2301      	movs	r3, #1
 8001afa:	21d0      	movs	r1, #208	; 0xd0
 8001afc:	f006 f964 	bl	8007dc8 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <mpu6050_gyro_get_raw+0x74>)
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	f107 0208 	add.w	r2, r7, #8
 8001b08:	2301      	movs	r3, #1
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2306      	movs	r3, #6
 8001b0e:	21d0      	movs	r1, #208	; 0xd0
 8001b10:	f006 fa58 	bl	8007fc4 <HAL_I2C_Master_Receive>
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&SPI_PORT,&buffe[0],1,1);
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
#endif
	  raw->x = (int16_t)buffe[0]<<8|buffe[1];
 8001b14:	7a3b      	ldrb	r3, [r7, #8]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	b21a      	sxth	r2, r3
 8001b1a:	7a7b      	ldrb	r3, [r7, #9]
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	801a      	strh	r2, [r3, #0]
	  raw->y = (int16_t)buffe[2]<<8|buffe[3];
 8001b26:	7abb      	ldrb	r3, [r7, #10]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	7afb      	ldrb	r3, [r7, #11]
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	805a      	strh	r2, [r3, #2]
	  raw->z = (int16_t)buffe[4]<<8|buffe[5];
 8001b38:	7b3b      	ldrb	r3, [r7, #12]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	7b7b      	ldrb	r3, [r7, #13]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	809a      	strh	r2, [r3, #4]
	}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000148 	.word	0x20000148

08001b58 <mpu6050_acc_get_raw>:
/* Acc get raw data
	*  x - axis
	*  y - axis
	*  z - axis   
	*/
void mpu6050_acc_get_raw(axis3_t *k){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	6078      	str	r0, [r7, #4]
	axis3_t p_val =*k;
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	6810      	ldr	r0, [r2, #0]
 8001b68:	6018      	str	r0, [r3, #0]
 8001b6a:	8892      	ldrh	r2, [r2, #4]
 8001b6c:	809a      	strh	r2, [r3, #4]
	uint8_t buffe[6];
	buffe[0] = (uint8_t)ACC_DATA_REG;
 8001b6e:	233b      	movs	r3, #59	; 0x3b
 8001b70:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <mpu6050_acc_get_raw+0x80>)
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	f107 0208 	add.w	r2, r7, #8
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	21d0      	movs	r1, #208	; 0xd0
 8001b82:	f006 f921 	bl	8007dc8 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <mpu6050_acc_get_raw+0x80>)
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	f107 0208 	add.w	r2, r7, #8
 8001b8e:	2301      	movs	r3, #1
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2306      	movs	r3, #6
 8001b94:	21d0      	movs	r1, #208	; 0xd0
 8001b96:	f006 fa15 	bl	8007fc4 <HAL_I2C_Master_Receive>
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
*/
      SPI_read(buffe[0],buffe,14);
#endif
	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 8001b9a:	7a3b      	ldrb	r3, [r7, #8]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	7a7b      	ldrb	r3, [r7, #9]
 8001ba2:	b21b      	sxth	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b21a      	sxth	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 8001bac:	7abb      	ldrb	r3, [r7, #10]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	b21a      	sxth	r2, r3
 8001bb2:	7afb      	ldrb	r3, [r7, #11]
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	b21a      	sxth	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 8001bbe:	7b3b      	ldrb	r3, [r7, #12]
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	7b7b      	ldrb	r3, [r7, #13]
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	809a      	strh	r2, [r3, #4]
}
 8001bd0:	bf00      	nop
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000148 	.word	0x20000148

08001bdc <qmc5883_init>:
#include "../Lib/axis.h"

const uint8_t qmc_addres = (0x0d<<1);
static I2C_HandleTypeDef *qmc_i2cport;

void qmc5883_init(I2C_HandleTypeDef *i2cport){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	6078      	str	r0, [r7, #4]
	qmc_i2cport = i2cport;
 8001be4:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <qmc5883_init+0x54>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]
    uint8_t buf[2];
    buf[0]=0x0b;
 8001bea:	230b      	movs	r3, #11
 8001bec:	733b      	strb	r3, [r7, #12]
    buf[1]=0X01;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <qmc5883_init+0x54>)
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	231a      	movs	r3, #26
 8001bf8:	b299      	uxth	r1, r3
 8001bfa:	f107 020c 	add.w	r2, r7, #12
 8001bfe:	2301      	movs	r3, #1
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2302      	movs	r3, #2
 8001c04:	f006 f8e0 	bl	8007dc8 <HAL_I2C_Master_Transmit>
    buf[0]=0x09;
 8001c08:	2309      	movs	r3, #9
 8001c0a:	733b      	strb	r3, [r7, #12]
    buf[1]=0X1D;
 8001c0c:	231d      	movs	r3, #29
 8001c0e:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <qmc5883_init+0x54>)
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	231a      	movs	r3, #26
 8001c16:	b299      	uxth	r1, r3
 8001c18:	f107 020c 	add.w	r2, r7, #12
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2302      	movs	r3, #2
 8001c22:	f006 f8d1 	bl	8007dc8 <HAL_I2C_Master_Transmit>
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000154 	.word	0x20000154

08001c34 <qmc_get_raw>:

void qmc_get_raw(axis3_t *axis){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af04      	add	r7, sp, #16
 8001c3a:	6078      	str	r0, [r7, #4]
	  uint8_t buf[6]={0};
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	2300      	movs	r3, #0
 8001c42:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(qmc_i2cport,qmc_addres,0x00,1,buf,6,1);
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <qmc_get_raw+0x6c>)
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	231a      	movs	r3, #26
 8001c4a:	b299      	uxth	r1, r3
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	2306      	movs	r3, #6
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f006 fcd1 	bl	8008604 <HAL_I2C_Mem_Read>
	  axis->x=((int16_t)buf[1]<<8|buf[0]) ;
 8001c62:	7a7b      	ldrb	r3, [r7, #9]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	b21a      	sxth	r2, r3
 8001c68:	7a3b      	ldrb	r3, [r7, #8]
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	801a      	strh	r2, [r3, #0]
	  axis->y=((int16_t)buf[3]<<8|buf[2]);
 8001c74:	7afb      	ldrb	r3, [r7, #11]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	7abb      	ldrb	r3, [r7, #10]
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	805a      	strh	r2, [r3, #2]
	  axis->z=((int16_t)buf[5]<<8|buf[4]);
 8001c86:	7b7b      	ldrb	r3, [r7, #13]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	7b3b      	ldrb	r3, [r7, #12]
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	4313      	orrs	r3, r2
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	809a      	strh	r2, [r3, #4]
}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000154 	.word	0x20000154

08001ca4 <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	ed87 0a01 	vstr	s0, [r7, #4]
 8001cae:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 8001cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001cf0 <pt1FilterGain+0x4c>
 8001cba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc6:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT/ (RC + dT);
 8001cca:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cce:	edd7 7a00 	vldr	s15, [r7]
 8001cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd6:	ed97 7a00 	vldr	s14, [r7]
 8001cda:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cde:	eef0 7a66 	vmov.f32	s15, s13
}
 8001ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	40c90fdb 	.word	0x40c90fdb

08001cf4 <baro_init>:

int8_t baro_calib;
int32_t alt_offset;
int32_t altitude_filted;
int32_t climb_rate;
void baro_init(){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
    baro_calib = FALSE;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <baro_init+0x40>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
    alt_offset = 0;
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <baro_init+0x44>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
#ifdef BMP280
    bmp280_init(&hi2c2);
 8001d06:	480d      	ldr	r0, [pc, #52]	; (8001d3c <baro_init+0x48>)
 8001d08:	f7ff f9d4 	bl	80010b4 <bmp280_init>
    for(int i=0; i< 100; i++){
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	e007      	b.n	8001d22 <baro_init+0x2e>
    	bmp280_read_fixed();
 8001d12:	f7ff fc7d 	bl	8001610 <bmp280_read_fixed>
    	HAL_Delay(5);
 8001d16:	2005      	movs	r0, #5
 8001d18:	f005 f816 	bl	8006d48 <HAL_Delay>
    for(int i=0; i< 100; i++){
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b63      	cmp	r3, #99	; 0x63
 8001d26:	ddf4      	ble.n	8001d12 <baro_init+0x1e>
    }
#elif MS5611
    ms5611_init(&hi2c2);
#endif
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20004270 	.word	0x20004270
 8001d38:	20004268 	.word	0x20004268
 8001d3c:	200046e8 	.word	0x200046e8

08001d40 <baro_zero_calibrate>:


void baro_zero_calibrate(){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
    int32_t altitude = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
    climb_rate = 0;
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <baro_zero_calibrate+0x68>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
    static int16_t count = 0;
#ifdef BMP280
    altitude = bmp280_read_fixed();
 8001d50:	f7ff fc5e 	bl	8001610 <bmp280_read_fixed>
 8001d54:	6078      	str	r0, [r7, #4]
#elif MS5611
    altitude = ms5611_read_fixed();
#endif
    alt_offset += altitude;
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <baro_zero_calibrate+0x6c>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a13      	ldr	r2, [pc, #76]	; (8001dac <baro_zero_calibrate+0x6c>)
 8001d60:	6013      	str	r3, [r2, #0]
    count ++;
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <baro_zero_calibrate+0x70>)
 8001d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <baro_zero_calibrate+0x70>)
 8001d72:	801a      	strh	r2, [r3, #0]
    if(count > 100){
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <baro_zero_calibrate+0x70>)
 8001d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	dd0f      	ble.n	8001d9e <baro_zero_calibrate+0x5e>
        alt_offset /= 100;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <baro_zero_calibrate+0x6c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <baro_zero_calibrate+0x74>)
 8001d84:	fb82 1203 	smull	r1, r2, r2, r3
 8001d88:	1152      	asrs	r2, r2, #5
 8001d8a:	17db      	asrs	r3, r3, #31
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	4a07      	ldr	r2, [pc, #28]	; (8001dac <baro_zero_calibrate+0x6c>)
 8001d90:	6013      	str	r3, [r2, #0]
        baro_calib = TRUE;
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <baro_zero_calibrate+0x78>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
        count = 101;
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <baro_zero_calibrate+0x70>)
 8001d9a:	2265      	movs	r2, #101	; 0x65
 8001d9c:	801a      	strh	r2, [r3, #0]
    }
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2000426c 	.word	0x2000426c
 8001dac:	20004268 	.word	0x20004268
 8001db0:	20000158 	.word	0x20000158
 8001db4:	51eb851f 	.word	0x51eb851f
 8001db8:	20004270 	.word	0x20004270

08001dbc <is_baro_calibration>:

int8_t is_baro_calibration(){
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
      return baro_calib;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <is_baro_calibration+0x14>)
 8001dc2:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	20004270 	.word	0x20004270

08001dd4 <baro_calculate>:

void baro_calculate(float dt){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	ed87 0a01 	vstr	s0, [r7, #4]
    if(baro_calib != 1){
 8001dde:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <baro_calculate+0x114>)
 8001de0:	f993 3000 	ldrsb.w	r3, [r3]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d17b      	bne.n	8001ee0 <baro_calculate+0x10c>
        return;
    }
    static uint16_t count = 0;
    static int32_t pre_alt = 0;
    int32_t alt = bmp280_read_fixed() - alt_offset;  // cm
 8001de8:	f7ff fc12 	bl	8001610 <bmp280_read_fixed>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <baro_calculate+0x118>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	60fb      	str	r3, [r7, #12]
    altitude_filted += pt1FilterGain(2,dt)*(alt - altitude_filted);
 8001df6:	edd7 0a01 	vldr	s1, [r7, #4]
 8001dfa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001dfe:	f7ff ff51 	bl	8001ca4 <pt1FilterGain>
 8001e02:	eeb0 7a40 	vmov.f32	s14, s0
 8001e06:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <baro_calculate+0x11c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e1a:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <baro_calculate+0x11c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2e:	ee17 2a90 	vmov	r2, s15
 8001e32:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <baro_calculate+0x11c>)
 8001e34:	601a      	str	r2, [r3, #0]
    if(count %10 == 0){
 8001e36:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <baro_calculate+0x120>)
 8001e38:	881a      	ldrh	r2, [r3, #0]
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ef8 <baro_calculate+0x124>)
 8001e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e40:	08d9      	lsrs	r1, r3, #3
 8001e42:	460b      	mov	r3, r1
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d13f      	bne.n	8001ed2 <baro_calculate+0xfe>
        int climb = (altitude_filted - pre_alt)/(dt*10);
 8001e52:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <baro_calculate+0x11c>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <baro_calculate+0x128>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e78:	ee17 3a90 	vmov	r3, s15
 8001e7c:	60bb      	str	r3, [r7, #8]
        pre_alt = altitude_filted;
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <baro_calculate+0x11c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <baro_calculate+0x128>)
 8001e84:	6013      	str	r3, [r2, #0]
        climb_rate += pt1FilterGain(1,dt*10)*(climb - climb_rate);
 8001e86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e92:	eef0 0a67 	vmov.f32	s1, s15
 8001e96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001e9a:	f7ff ff03 	bl	8001ca4 <pt1FilterGain>
 8001e9e:	eeb0 7a40 	vmov.f32	s14, s0
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <baro_calculate+0x12c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <baro_calculate+0x12c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eca:	ee17 2a90 	vmov	r2, s15
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <baro_calculate+0x12c>)
 8001ed0:	601a      	str	r2, [r3, #0]
    }
    count ++;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <baro_calculate+0x120>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <baro_calculate+0x120>)
 8001edc:	801a      	strh	r2, [r3, #0]
 8001ede:	e000      	b.n	8001ee2 <baro_calculate+0x10e>
        return;
 8001ee0:	bf00      	nop
}
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20004270 	.word	0x20004270
 8001eec:	20004268 	.word	0x20004268
 8001ef0:	20000150 	.word	0x20000150
 8001ef4:	2000015a 	.word	0x2000015a
 8001ef8:	cccccccd 	.word	0xcccccccd
 8001efc:	2000015c 	.word	0x2000015c
 8001f00:	2000426c 	.word	0x2000426c

08001f04 <baro_get_climbCm>:

int32_t baro_get_climbCm(){
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
    return climb_rate;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <baro_get_climbCm+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	2000426c 	.word	0x2000426c

08001f1c <baro_get_altCm>:


int32_t baro_get_altCm(){
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
    return altitude_filted;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <baro_get_altCm+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000150 	.word	0x20000150

08001f34 <black_box_init>:
int32_t puts_state;

/*
 * init black box
 */
void black_box_init(){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	fs.file = &SDFile;
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <black_box_init+0x40>)
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <black_box_init+0x44>)
 8001f3c:	605a      	str	r2, [r3, #4]
    //SDFile.fs->id = 1;
    //SDFile.id = 1;
    mount_state = f_mount(&SDFatFS,"",1);
 8001f3e:	2201      	movs	r2, #1
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <black_box_init+0x48>)
 8001f42:	480f      	ldr	r0, [pc, #60]	; (8001f80 <black_box_init+0x4c>)
 8001f44:	f00e fca8 	bl	8010898 <f_mount>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <black_box_init+0x50>)
 8001f4e:	701a      	strb	r2, [r3, #0]
    open_state = f_open(&SDFile,"flight.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001f50:	2213      	movs	r2, #19
 8001f52:	490d      	ldr	r1, [pc, #52]	; (8001f88 <black_box_init+0x54>)
 8001f54:	4808      	ldr	r0, [pc, #32]	; (8001f78 <black_box_init+0x44>)
 8001f56:	f00e fd03 	bl	8010960 <f_open>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <black_box_init+0x58>)
 8001f60:	701a      	strb	r2, [r3, #0]
    f_lseek (&SDFile,SDFile.obj.objsize);
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <black_box_init+0x44>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	4619      	mov	r1, r3
 8001f68:	4803      	ldr	r0, [pc, #12]	; (8001f78 <black_box_init+0x44>)
 8001f6a:	f00f f978 	bl	801125e <f_lseek>
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20004274 	.word	0x20004274
 8001f78:	20004bf8 	.word	0x20004bf8
 8001f7c:	0801573c 	.word	0x0801573c
 8001f80:	20004e28 	.word	0x20004e28
 8001f84:	20004481 	.word	0x20004481
 8001f88:	08015740 	.word	0x08015740
 8001f8c:	20004480 	.word	0x20004480

08001f90 <black_box_pack_int>:
    fs.buffer_index += index;
}



void black_box_pack_int(int val){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08c      	sub	sp, #48	; 0x30
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

	fs.indexx=0;
 8001f98:	4b49      	ldr	r3, [pc, #292]	; (80020c0 <black_box_pack_int+0x130>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
	int len_str;
	int val_ = val;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	617b      	str	r3, [r7, #20]
	char str_[11];
	memset(str_,0,11);
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	220b      	movs	r2, #11
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f012 fd20 	bl	80149f0 <memset>
	if(val != 0){
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d02b      	beq.n	800200e <black_box_pack_int+0x7e>
		val = abs(val);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bfb8      	it	lt
 8001fbc:	425b      	neglt	r3, r3
 8001fbe:	607b      	str	r3, [r7, #4]
		len_str = intToStr(val,str_,0);
 8001fc0:	f107 0308 	add.w	r3, r7, #8
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f921 	bl	8002210 <intToStr>
 8001fce:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(val_ < 0){
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	da2b      	bge.n	800202e <black_box_pack_int+0x9e>
			for(int i = len_str; i > 0; i--){
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fda:	e00f      	b.n	8001ffc <black_box_pack_int+0x6c>
				str_[i] = str_[i - 1];
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 8001fea:	f107 0208 	add.w	r2, r7, #8
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff0:	4413      	add	r3, r2
 8001ff2:	460a      	mov	r2, r1
 8001ff4:	701a      	strb	r2, [r3, #0]
			for(int i = len_str; i > 0; i--){
 8001ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	dcec      	bgt.n	8001fdc <black_box_pack_int+0x4c>
			}
			len_str ++;
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	3301      	adds	r3, #1
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
			str_[0] = '-';
 8002008:	232d      	movs	r3, #45	; 0x2d
 800200a:	723b      	strb	r3, [r7, #8]
 800200c:	e00f      	b.n	800202e <black_box_pack_int+0x9e>
		}
	}
	else{
	   fs.buffer[fs.buffer_index] ='0';
 800200e:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <black_box_pack_int+0x130>)
 8002010:	891b      	ldrh	r3, [r3, #8]
 8002012:	461a      	mov	r2, r3
 8002014:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <black_box_pack_int+0x130>)
 8002016:	4413      	add	r3, r2
 8002018:	2230      	movs	r2, #48	; 0x30
 800201a:	729a      	strb	r2, [r3, #10]
	   len_str = 1;
 800201c:	2301      	movs	r3, #1
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
	   fs.buffer_index ++;
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <black_box_pack_int+0x130>)
 8002022:	891b      	ldrh	r3, [r3, #8]
 8002024:	3301      	adds	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <black_box_pack_int+0x130>)
 800202a:	811a      	strh	r2, [r3, #8]
 800202c:	e045      	b.n	80020ba <black_box_pack_int+0x12a>
		return;
	}
	// copy str to buffer
	int str_idx = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
	int index_flag;
	int max_index = fs.buffer_index + len_str;
 8002032:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <black_box_pack_int+0x130>)
 8002034:	891b      	ldrh	r3, [r3, #8]
 8002036:	461a      	mov	r2, r3
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	4413      	add	r3, r2
 800203c:	61fb      	str	r3, [r7, #28]
	if(max_index <=  MAX_BUFFER_SIZE){
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002044:	dc08      	bgt.n	8002058 <black_box_pack_int+0xc8>
		max_index = fs.buffer_index + len_str;
 8002046:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <black_box_pack_int+0x130>)
 8002048:	891b      	ldrh	r3, [r3, #8]
 800204a:	461a      	mov	r2, r3
 800204c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204e:	4413      	add	r3, r2
 8002050:	61fb      	str	r3, [r7, #28]
		index_flag = 1;
 8002052:	2301      	movs	r3, #1
 8002054:	623b      	str	r3, [r7, #32]
 8002056:	e004      	b.n	8002062 <black_box_pack_int+0xd2>
	}
	else{
		max_index = MAX_BUFFER_SIZE;
 8002058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800205c:	61fb      	str	r3, [r7, #28]
		index_flag = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
	}
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 8002062:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <black_box_pack_int+0x130>)
 8002064:	891b      	ldrh	r3, [r3, #8]
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	e010      	b.n	800208c <black_box_pack_int+0xfc>
			fs.buffer[j] = str_[str_idx ++];
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	627a      	str	r2, [r7, #36]	; 0x24
 8002070:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002074:	4413      	add	r3, r2
 8002076:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 800207a:	4a11      	ldr	r2, [pc, #68]	; (80020c0 <black_box_pack_int+0x130>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	4413      	add	r3, r2
 8002080:	330a      	adds	r3, #10
 8002082:	460a      	mov	r2, r1
 8002084:	701a      	strb	r2, [r3, #0]
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	3301      	adds	r3, #1
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	429a      	cmp	r2, r3
 8002092:	dbea      	blt.n	800206a <black_box_pack_int+0xda>
	}
	
	if(index_flag){
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d008      	beq.n	80020ac <black_box_pack_int+0x11c>
		fs.buffer_index += len_str;
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <black_box_pack_int+0x130>)
 800209c:	891a      	ldrh	r2, [r3, #8]
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <black_box_pack_int+0x130>)
 80020a8:	811a      	strh	r2, [r3, #8]
 80020aa:	e006      	b.n	80020ba <black_box_pack_int+0x12a>
	}
	else{
		fs.buffer_index += MAX_BUFFER_SIZE;
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <black_box_pack_int+0x130>)
 80020ae:	891b      	ldrh	r3, [r3, #8]
 80020b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	4b02      	ldr	r3, [pc, #8]	; (80020c0 <black_box_pack_int+0x130>)
 80020b8:	811a      	strh	r2, [r3, #8]
	}
}
 80020ba:	3730      	adds	r7, #48	; 0x30
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20004274 	.word	0x20004274

080020c4 <black_box_pack_str>:


void black_box_pack_str(char *c){
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

    int i = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 80020d0:	e01c      	b.n	800210c <black_box_pack_str+0x48>
        if((fs.buffer_index + i) > MAX_BUFFER_SIZE){
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <black_box_pack_str+0x70>)
 80020d4:	891b      	ldrh	r3, [r3, #8]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e0:	dd04      	ble.n	80020ec <black_box_pack_str+0x28>
                fs.buffer_index = MAX_BUFFER_SIZE;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <black_box_pack_str+0x70>)
 80020e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e8:	811a      	strh	r2, [r3, #8]
                return;
 80020ea:	e01d      	b.n	8002128 <black_box_pack_str+0x64>
        }
        fs.buffer[fs.buffer_index + i] = c[i];
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	441a      	add	r2, r3
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <black_box_pack_str+0x70>)
 80020f4:	891b      	ldrh	r3, [r3, #8]
 80020f6:	4619      	mov	r1, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	440b      	add	r3, r1
 80020fc:	7811      	ldrb	r1, [r2, #0]
 80020fe:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <black_box_pack_str+0x70>)
 8002100:	4413      	add	r3, r2
 8002102:	460a      	mov	r2, r1
 8002104:	729a      	strb	r2, [r3, #10]
        i ++;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	3301      	adds	r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1dc      	bne.n	80020d2 <black_box_pack_str+0xe>
    }
    fs.buffer_index += i;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <black_box_pack_str+0x70>)
 800211a:	891a      	ldrh	r2, [r3, #8]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	b29b      	uxth	r3, r3
 8002120:	4413      	add	r3, r2
 8002122:	b29a      	uxth	r2, r3
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <black_box_pack_str+0x70>)
 8002126:	811a      	strh	r2, [r3, #8]
}
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20004274 	.word	0x20004274

08002138 <black_box_pack_char>:

void black_box_pack_char(char c){
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
    fs.buffer[fs.buffer_index ] = c;
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <black_box_pack_char+0x30>)
 8002144:	891b      	ldrh	r3, [r3, #8]
 8002146:	461a      	mov	r2, r3
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <black_box_pack_char+0x30>)
 800214a:	4413      	add	r3, r2
 800214c:	79fa      	ldrb	r2, [r7, #7]
 800214e:	729a      	strb	r2, [r3, #10]
    fs.buffer_index ++;
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <black_box_pack_char+0x30>)
 8002152:	891b      	ldrh	r3, [r3, #8]
 8002154:	3301      	adds	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <black_box_pack_char+0x30>)
 800215a:	811a      	strh	r2, [r3, #8]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	20004274 	.word	0x20004274

0800216c <black_box_load>:



void black_box_load()
 {
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
	  puts_state = f_puts(fs.buffer,fs.file);
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <black_box_load+0x38>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4619      	mov	r1, r3
 8002176:	480c      	ldr	r0, [pc, #48]	; (80021a8 <black_box_load+0x3c>)
 8002178:	f00f fb3b 	bl	80117f2 <f_puts>
 800217c:	4603      	mov	r3, r0
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <black_box_load+0x40>)
 8002180:	6013      	str	r3, [r2, #0]
      f_sync(fs.file);
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <black_box_load+0x38>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4618      	mov	r0, r3
 8002188:	f00e ffe0 	bl	801114c <f_sync>
      memset(fs.buffer,0,MAX_BUFFER_SIZE);
 800218c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002190:	2100      	movs	r1, #0
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <black_box_load+0x3c>)
 8002194:	f012 fc2c 	bl	80149f0 <memset>
      fs.buffer_index = 0;
 8002198:	4b02      	ldr	r3, [pc, #8]	; (80021a4 <black_box_load+0x38>)
 800219a:	2200      	movs	r2, #0
 800219c:	811a      	strh	r2, [r3, #8]
 }
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20004274 	.word	0x20004274
 80021a8:	2000427e 	.word	0x2000427e
 80021ac:	20004484 	.word	0x20004484

080021b0 <reverse>:




static void reverse( char *str, int len)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80021c4:	e018      	b.n	80021f8 <reverse+0x48>
        temp = str[i];
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	441a      	add	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	440b      	add	r3, r1
 80021dc:	7812      	ldrb	r2, [r2, #0]
 80021de:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	701a      	strb	r2, [r3, #0]
        i++;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3301      	adds	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
        j--;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	dbe2      	blt.n	80021c6 <reverse+0x16>
    }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <intToStr>:

 static int intToStr(int x,  char *str, int d)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
    while (x) {
 800221c:	e01f      	b.n	800225e <intToStr+0x4e>
        str[fs.indexx++] = (x % 10) + '0';
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <intToStr+0x8c>)
 8002222:	fb83 1302 	smull	r1, r3, r3, r2
 8002226:	1099      	asrs	r1, r3, #2
 8002228:	17d3      	asrs	r3, r2, #31
 800222a:	1ac9      	subs	r1, r1, r3
 800222c:	460b      	mov	r3, r1
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	1ad1      	subs	r1, r2, r3
 8002236:	b2ca      	uxtb	r2, r1
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <intToStr+0x90>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	1c59      	adds	r1, r3, #1
 800223e:	4818      	ldr	r0, [pc, #96]	; (80022a0 <intToStr+0x90>)
 8002240:	6001      	str	r1, [r0, #0]
 8002242:	4619      	mov	r1, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	440b      	add	r3, r1
 8002248:	3230      	adds	r2, #48	; 0x30
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4a12      	ldr	r2, [pc, #72]	; (800229c <intToStr+0x8c>)
 8002252:	fb82 1203 	smull	r1, r2, r2, r3
 8002256:	1092      	asrs	r2, r2, #2
 8002258:	17db      	asrs	r3, r3, #31
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	60fb      	str	r3, [r7, #12]
    while (x) {
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1dc      	bne.n	800221e <intToStr+0xe>
    }

    while (fs.indexx < d)
 8002264:	e009      	b.n	800227a <intToStr+0x6a>
        str[fs.indexx++] = '0';
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <intToStr+0x90>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	490c      	ldr	r1, [pc, #48]	; (80022a0 <intToStr+0x90>)
 800226e:	600a      	str	r2, [r1, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	4413      	add	r3, r2
 8002276:	2230      	movs	r2, #48	; 0x30
 8002278:	701a      	strb	r2, [r3, #0]
    while (fs.indexx < d)
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <intToStr+0x90>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	dcf0      	bgt.n	8002266 <intToStr+0x56>
    reverse(str,fs.indexx);
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <intToStr+0x90>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	68b8      	ldr	r0, [r7, #8]
 800228c:	f7ff ff90 	bl	80021b0 <reverse>
    return fs.indexx;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <intToStr+0x90>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	66666667 	.word	0x66666667
 80022a0:	20004274 	.word	0x20004274

080022a4 <compassInit>:
int8_t file_open = 0;

 AT24Cxx_devices_t device_array;
/*  Init compass
 */
void compassInit(){
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0

  calibrate_value.scale_factor_axis[X] = 1.0f;
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <compassInit+0x64>)
 80022aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022ae:	60da      	str	r2, [r3, #12]
  calibrate_value.scale_factor_axis[Y] = 1.0f;
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <compassInit+0x64>)
 80022b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022b6:	611a      	str	r2, [r3, #16]
  calibrate_value.scale_factor_axis[Z] = 1.0f;
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <compassInit+0x64>)
 80022ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022be:	615a      	str	r2, [r3, #20]

  calibrate_value.hard_iron_calibrate_value[X] = 0;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <compassInit+0x64>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
  calibrate_value.hard_iron_calibrate_value[Y] = 0;
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <compassInit+0x64>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	605a      	str	r2, [r3, #4]
  calibrate_value.hard_iron_calibrate_value[Z] = 0;
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <compassInit+0x64>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]

  AT24Cxx_init(&device_array, 0x00, &hi2c2);
 80022d2:	4a0e      	ldr	r2, [pc, #56]	; (800230c <compassInit+0x68>)
 80022d4:	2100      	movs	r1, #0
 80022d6:	480e      	ldr	r0, [pc, #56]	; (8002310 <compassInit+0x6c>)
 80022d8:	f003 fc20 	bl	8005b1c <AT24Cxx_init>
  AT24Cxx_add_dev(&device_array, 0x01, &hi2c2);
 80022dc:	4a0b      	ldr	r2, [pc, #44]	; (800230c <compassInit+0x68>)
 80022de:	2101      	movs	r1, #1
 80022e0:	480b      	ldr	r0, [pc, #44]	; (8002310 <compassInit+0x6c>)
 80022e2:	f003 fc5b 	bl	8005b9c <AT24Cxx_add_dev>

#ifdef QMC5883
  qmc5883_init(&hi2c1);
 80022e6:	480b      	ldr	r0, [pc, #44]	; (8002314 <compassInit+0x70>)
 80022e8:	f7ff fc78 	bl	8001bdc <qmc5883_init>
#else
  hmc5883_init(&hi2c2);
#endif

  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 80022ec:	2120      	movs	r1, #32
 80022ee:	480a      	ldr	r0, [pc, #40]	; (8002318 <compassInit+0x74>)
 80022f0:	f005 fbda 	bl	8007aa8 <HAL_GPIO_ReadPin>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <compassInit+0x5c>
      compass_calibrate();
 80022fa:	f000 f8e9 	bl	80024d0 <compass_calibrate>

    calibrate_value.hard_iron_calibrate_value[X] = 500;
    calibrate_value.hard_iron_calibrate_value[Y] = 20;
    calibrate_value.hard_iron_calibrate_value[Z] = 20;
*/
}
 80022fe:	e001      	b.n	8002304 <compassInit+0x60>
      read_calibrate_file();
 8002300:	f000 f876 	bl	80023f0 <read_calibrate_file>
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	200044b0 	.word	0x200044b0
 800230c:	200046e8 	.word	0x200046e8
 8002310:	20004488 	.word	0x20004488
 8002314:	20004694 	.word	0x20004694
 8002318:	40020400 	.word	0x40020400

0800231c <compass_get>:

void compass_get(axis3_t *out){
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	axis3_t as;
#ifdef QMC5883
         qmc_get_raw(&as);
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fc83 	bl	8001c34 <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
    // calibrate ouput
	out->x = (as.x - calibrate_value.hard_iron_calibrate_value[X]);
 800232e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002332:	b29a      	uxth	r2, r3
 8002334:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <compass_get+0xd0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	b29b      	uxth	r3, r3
 800233e:	b21a      	sxth	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	801a      	strh	r2, [r3, #0]
	out->y = (as.y - calibrate_value.hard_iron_calibrate_value[Y]);
 8002344:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002348:	b29a      	uxth	r2, r3
 800234a:	4b28      	ldr	r3, [pc, #160]	; (80023ec <compass_get+0xd0>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	b29b      	uxth	r3, r3
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	b29b      	uxth	r3, r3
 8002354:	b21a      	sxth	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	805a      	strh	r2, [r3, #2]
	out->z = (as.z - calibrate_value.hard_iron_calibrate_value[Z]);
 800235a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800235e:	b29a      	uxth	r2, r3
 8002360:	4b22      	ldr	r3, [pc, #136]	; (80023ec <compass_get+0xd0>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	b29b      	uxth	r3, r3
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	b29b      	uxth	r3, r3
 800236a:	b21a      	sxth	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	809a      	strh	r2, [r3, #4]

    out->x *= calibrate_value.scale_factor_axis[X];
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002376:	ee07 3a90 	vmov	s15, r3
 800237a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800237e:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <compass_get+0xd0>)
 8002380:	edd3 7a03 	vldr	s15, [r3, #12]
 8002384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800238c:	ee17 3a90 	vmov	r3, s15
 8002390:	b21a      	sxth	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	801a      	strh	r2, [r3, #0]
    out->y *= calibrate_value.scale_factor_axis[Y];
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <compass_get+0xd0>)
 80023a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80023aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023b2:	ee17 3a90 	vmov	r3, s15
 80023b6:	b21a      	sxth	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	805a      	strh	r2, [r3, #2]
    out->z *= calibrate_value.scale_factor_axis[Z];
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <compass_get+0xd0>)
 80023cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80023d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d8:	ee17 3a90 	vmov	r3, s15
 80023dc:	b21a      	sxth	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	809a      	strh	r2, [r3, #4]
}
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200044b0 	.word	0x200044b0

080023f0 <read_calibrate_file>:

/* read calibrate data from eprrom
 * 
 */

void read_calibrate_file(){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
	int32_t sum_all = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
    AT24Cxx_read_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_value,0x0010,sizeof(cali_mag_t));
 80023fa:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <read_calibrate_file+0xd0>)
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	231c      	movs	r3, #28
 8002400:	2210      	movs	r2, #16
 8002402:	4930      	ldr	r1, [pc, #192]	; (80024c4 <read_calibrate_file+0xd4>)
 8002404:	f003 fd23 	bl	8005e4e <AT24Cxx_read_byte_buffer>
   	sum_all += calibrate_value.scale_factor_axis[X];
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002412:	4b2c      	ldr	r3, [pc, #176]	; (80024c4 <read_calibrate_file+0xd4>)
 8002414:	edd3 7a03 	vldr	s15, [r3, #12]
 8002418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800241c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002420:	ee17 3a90 	vmov	r3, s15
 8002424:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Y];
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002430:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <read_calibrate_file+0xd4>)
 8002432:	edd3 7a04 	vldr	s15, [r3, #16]
 8002436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800243e:	ee17 3a90 	vmov	r3, s15
 8002442:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Z];
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <read_calibrate_file+0xd4>)
 8002450:	edd3 7a05 	vldr	s15, [r3, #20]
 8002454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800245c:	ee17 3a90 	vmov	r3, s15
 8002460:	607b      	str	r3, [r7, #4]

    sum_all += (int)calibrate_value.hard_iron_calibrate_value[X];
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <read_calibrate_file+0xd4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Y];
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <read_calibrate_file+0xd4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Z];
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <read_calibrate_file+0xd4>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	607b      	str	r3, [r7, #4]
    if(ABS(sum_all - (int)calibrate_value.sum_all_value) > 40){
 8002480:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <read_calibrate_file+0xd4>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	bfb8      	it	lt
 8002490:	425b      	neglt	r3, r3
 8002492:	2b28      	cmp	r3, #40	; 0x28
 8002494:	dd10      	ble.n	80024b8 <read_calibrate_file+0xc8>
      while(1){
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800249a:	480b      	ldr	r0, [pc, #44]	; (80024c8 <read_calibrate_file+0xd8>)
 800249c:	f005 fb35 	bl	8007b0a <HAL_GPIO_TogglePin>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80024a0:	2120      	movs	r1, #32
 80024a2:	480a      	ldr	r0, [pc, #40]	; (80024cc <read_calibrate_file+0xdc>)
 80024a4:	f005 fb31 	bl	8007b0a <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80024a8:	2110      	movs	r1, #16
 80024aa:	4808      	ldr	r0, [pc, #32]	; (80024cc <read_calibrate_file+0xdc>)
 80024ac:	f005 fb2d 	bl	8007b0a <HAL_GPIO_TogglePin>
       HAL_Delay(50); // 10 Hz loop
 80024b0:	2032      	movs	r0, #50	; 0x32
 80024b2:	f004 fc49 	bl	8006d48 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80024b6:	e7ee      	b.n	8002496 <read_calibrate_file+0xa6>
      }
    }
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20004488 	.word	0x20004488
 80024c4:	200044b0 	.word	0x200044b0
 80024c8:	40020800 	.word	0x40020800
 80024cc:	40020000 	.word	0x40020000

080024d0 <compass_calibrate>:

/* Calibrate function
 * write calibrate value to sd card
 */
static void compass_calibrate(){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08c      	sub	sp, #48	; 0x30
 80024d4:	af00      	add	r7, sp, #0
    int16_t max_val[] = {-32767,-32767,-32767};
 80024d6:	4a9d      	ldr	r2, [pc, #628]	; (800274c <compass_calibrate+0x27c>)
 80024d8:	f107 0318 	add.w	r3, r7, #24
 80024dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024e0:	6018      	str	r0, [r3, #0]
 80024e2:	3304      	adds	r3, #4
 80024e4:	8019      	strh	r1, [r3, #0]
    int16_t min_val[] = {32767, 32767, 32767};
 80024e6:	4a9a      	ldr	r2, [pc, #616]	; (8002750 <compass_calibrate+0x280>)
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024f0:	6018      	str	r0, [r3, #0]
 80024f2:	3304      	adds	r3, #4
 80024f4:	8019      	strh	r1, [r3, #0]
    uint8_t fist_data = TRUE;
 80024f6:	2301      	movs	r3, #1
 80024f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    static cali_mag_t calibrate_temp;
    ignore_data = 0;
 80024fc:	4b95      	ldr	r3, [pc, #596]	; (8002754 <compass_calibrate+0x284>)
 80024fe:	2200      	movs	r2, #0
 8002500:	801a      	strh	r2, [r3, #0]
    int16_t last_axis[3];
    axis3_t as;

	while(!file_open){
 8002502:	e0b1      	b.n	8002668 <compass_calibrate+0x198>
 // read data from sensor
#ifdef QMC5883
         qmc_get_raw(&as);
 8002504:	463b      	mov	r3, r7
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fb94 	bl	8001c34 <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
        if(fist_data){
 800250c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00c      	beq.n	800252e <compass_calibrate+0x5e>
          last_axis[X] = as.x;
 8002514:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002518:	813b      	strh	r3, [r7, #8]
          last_axis[Y] = as.y;
 800251a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800251e:	817b      	strh	r3, [r7, #10]
          last_axis[Z] = as.z;
 8002520:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002524:	81bb      	strh	r3, [r7, #12]
          fist_data = FALSE;
 8002526:	2300      	movs	r3, #0
 8002528:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          continue;
 800252c:	e09c      	b.n	8002668 <compass_calibrate+0x198>
        }
        int16_t delta_x_ = as.x -  last_axis[X];
 800252e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002532:	b29a      	uxth	r2, r3
 8002534:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002538:	b29b      	uxth	r3, r3
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	b29b      	uxth	r3, r3
 800253e:	857b      	strh	r3, [r7, #42]	; 0x2a
        int16_t delta_y_ = as.y -  last_axis[Y];
 8002540:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002544:	b29a      	uxth	r2, r3
 8002546:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800254a:	b29b      	uxth	r3, r3
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	b29b      	uxth	r3, r3
 8002550:	853b      	strh	r3, [r7, #40]	; 0x28
        int16_t delta_z_ = as.z -  last_axis[Z];
 8002552:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002556:	b29a      	uxth	r2, r3
 8002558:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800255c:	b29b      	uxth	r3, r3
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	b29b      	uxth	r3, r3
 8002562:	84fb      	strh	r3, [r7, #38]	; 0x26
        // ignore wrong value and set to zero
        int16_t ckec = sqrt(sq(delta_x_) + sq(delta_y_) + sq(delta_z_));
 8002564:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002568:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800256c:	fb02 f203 	mul.w	r2, r2, r3
 8002570:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002574:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	441a      	add	r2, r3
 800257e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002582:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f7fd ff71 	bl	8000474 <__aeabi_i2d>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	ec43 2b10 	vmov	d0, r2, r3
 800259a:	f012 fb71 	bl	8014c80 <sqrt>
 800259e:	ec53 2b10 	vmov	r2, r3, d0
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	f7fe fa7f 	bl	8000aa8 <__aeabi_d2iz>
 80025aa:	4603      	mov	r3, r0
 80025ac:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(ckec > max_change){
 80025ae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80025b2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80025b6:	4293      	cmp	r3, r2
 80025b8:	dd09      	ble.n	80025ce <compass_calibrate+0xfe>
            fist_data = TRUE; 
 80025ba:	2301      	movs	r3, #1
 80025bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ignore_data ++;
 80025c0:	4b64      	ldr	r3, [pc, #400]	; (8002754 <compass_calibrate+0x284>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	3301      	adds	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	4b62      	ldr	r3, [pc, #392]	; (8002754 <compass_calibrate+0x284>)
 80025ca:	801a      	strh	r2, [r3, #0]
            continue;
 80025cc:	e04c      	b.n	8002668 <compass_calibrate+0x198>
        }
        last_axis[X] = as.x;
 80025ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 80025d2:	813b      	strh	r3, [r7, #8]
        last_axis[Y] = as.y;
 80025d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025d8:	817b      	strh	r3, [r7, #10]
        last_axis[Z] = as.z;
 80025da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025de:	81bb      	strh	r3, [r7, #12]
        // get max value each axis
        if(as.x > max_val[X]) max_val[X] = as.x;
 80025e0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80025e4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	dd02      	ble.n	80025f2 <compass_calibrate+0x122>
 80025ec:	f9b7 3000 	ldrsh.w	r3, [r7]
 80025f0:	833b      	strh	r3, [r7, #24]
        if(as.y > max_val[Y]) max_val[Y] = as.y;
 80025f2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80025f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	dd02      	ble.n	8002604 <compass_calibrate+0x134>
 80025fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002602:	837b      	strh	r3, [r7, #26]
        if(as.z > max_val[Z]) max_val[Z] = as.z;
 8002604:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002608:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800260c:	429a      	cmp	r2, r3
 800260e:	dd02      	ble.n	8002616 <compass_calibrate+0x146>
 8002610:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002614:	83bb      	strh	r3, [r7, #28]

        // min value
        if(as.x < min_val[X]) min_val[X] = as.x;
 8002616:	f9b7 2000 	ldrsh.w	r2, [r7]
 800261a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800261e:	429a      	cmp	r2, r3
 8002620:	da02      	bge.n	8002628 <compass_calibrate+0x158>
 8002622:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002626:	823b      	strh	r3, [r7, #16]
        if(as.y < min_val[Y]) min_val[Y] = as.y;
 8002628:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800262c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002630:	429a      	cmp	r2, r3
 8002632:	da02      	bge.n	800263a <compass_calibrate+0x16a>
 8002634:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002638:	827b      	strh	r3, [r7, #18]
        if(as.z < min_val[Z]) min_val[Z] = as.z;
 800263a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800263e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002642:	429a      	cmp	r2, r3
 8002644:	da02      	bge.n	800264c <compass_calibrate+0x17c>
 8002646:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800264a:	82bb      	strh	r3, [r7, #20]
		
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800264c:	2120      	movs	r1, #32
 800264e:	4842      	ldr	r0, [pc, #264]	; (8002758 <compass_calibrate+0x288>)
 8002650:	f005 fa5b 	bl	8007b0a <HAL_GPIO_TogglePin>
        HAL_Delay(50); // 10 Hz loop
 8002654:	2032      	movs	r0, #50	; 0x32
 8002656:	f004 fb77 	bl	8006d48 <HAL_Delay>

       if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 800265a:	2120      	movs	r1, #32
 800265c:	483f      	ldr	r0, [pc, #252]	; (800275c <compass_calibrate+0x28c>)
 800265e:	f005 fa23 	bl	8007aa8 <HAL_GPIO_ReadPin>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d006      	beq.n	8002676 <compass_calibrate+0x1a6>
	while(!file_open){
 8002668:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <compass_calibrate+0x290>)
 800266a:	f993 3000 	ldrsb.w	r3, [r3]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f43f af48 	beq.w	8002504 <compass_calibrate+0x34>
 8002674:	e000      	b.n	8002678 <compass_calibrate+0x1a8>
              break;
 8002676:	bf00      	nop
          }
	  }

    // check all min value is negative sign
    if(min_val[X] > 0 || min_val[Y] > 0 || min_val[Z] > 0){
 8002678:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	dc02      	bgt.n	8002686 <compass_calibrate+0x1b6>
 8002680:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002684:	2b00      	cmp	r3, #0
          // error
    }
    // check all max value is positive sign
    if(max_val[X] < 0 || max_val[Y] < 0 || max_val[Z] < 0){
 8002686:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	db02      	blt.n	8002694 <compass_calibrate+0x1c4>
 800268e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002692:	2b00      	cmp	r3, #0
          // error
    }
    // calibrate value for each axis
    calibrate_temp.hard_iron_calibrate_value[X] = (int)(max_val[X] + min_val[X])/2;
 8002694:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002698:	461a      	mov	r2, r3
 800269a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	0fda      	lsrs	r2, r3, #31
 80026a2:	4413      	add	r3, r2
 80026a4:	105b      	asrs	r3, r3, #1
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b2e      	ldr	r3, [pc, #184]	; (8002764 <compass_calibrate+0x294>)
 80026aa:	601a      	str	r2, [r3, #0]
    calibrate_temp.hard_iron_calibrate_value[Y] = (int)(max_val[Y] + min_val[Y])/2;
 80026ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80026b0:	461a      	mov	r2, r3
 80026b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026b6:	4413      	add	r3, r2
 80026b8:	0fda      	lsrs	r2, r3, #31
 80026ba:	4413      	add	r3, r2
 80026bc:	105b      	asrs	r3, r3, #1
 80026be:	461a      	mov	r2, r3
 80026c0:	4b28      	ldr	r3, [pc, #160]	; (8002764 <compass_calibrate+0x294>)
 80026c2:	605a      	str	r2, [r3, #4]
    calibrate_temp.hard_iron_calibrate_value[Z] = (int)(max_val[Z] + min_val[Z])/2;
 80026c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80026c8:	461a      	mov	r2, r3
 80026ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80026ce:	4413      	add	r3, r2
 80026d0:	0fda      	lsrs	r2, r3, #31
 80026d2:	4413      	add	r3, r2
 80026d4:	105b      	asrs	r3, r3, #1
 80026d6:	461a      	mov	r2, r3
 80026d8:	4b22      	ldr	r3, [pc, #136]	; (8002764 <compass_calibrate+0x294>)
 80026da:	609a      	str	r2, [r3, #8]

    // calculate scale factor for each axis
    int16_t x_ = abs(max_val[X]) + abs(min_val[X]);
 80026dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bfb8      	it	lt
 80026e4:	425b      	neglt	r3, r3
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bfb8      	it	lt
 80026f0:	425b      	neglt	r3, r3
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	847b      	strh	r3, [r7, #34]	; 0x22
    int16_t y_ = abs(max_val[Y]) + abs(min_val[Y]);
 80026fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	bfb8      	it	lt
 8002702:	425b      	neglt	r3, r3
 8002704:	b29a      	uxth	r2, r3
 8002706:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800270a:	2b00      	cmp	r3, #0
 800270c:	bfb8      	it	lt
 800270e:	425b      	neglt	r3, r3
 8002710:	b29b      	uxth	r3, r3
 8002712:	4413      	add	r3, r2
 8002714:	b29b      	uxth	r3, r3
 8002716:	843b      	strh	r3, [r7, #32]
    int16_t z_ = abs(max_val[Z]) + abs(min_val[Z]);
 8002718:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800271c:	2b00      	cmp	r3, #0
 800271e:	bfb8      	it	lt
 8002720:	425b      	neglt	r3, r3
 8002722:	b29a      	uxth	r2, r3
 8002724:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	bfb8      	it	lt
 800272c:	425b      	neglt	r3, r3
 800272e:	b29b      	uxth	r3, r3
 8002730:	4413      	add	r3, r2
 8002732:	b29b      	uxth	r3, r3
 8002734:	83fb      	strh	r3, [r7, #30]

    // get largest value
    int16_t max_value = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(x_ > y_)
 800273a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800273e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002742:	429a      	cmp	r2, r3
 8002744:	dd10      	ble.n	8002768 <compass_calibrate+0x298>
        max_value = x_;
 8002746:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002748:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800274a:	e00f      	b.n	800276c <compass_calibrate+0x29c>
 800274c:	0801574c 	.word	0x0801574c
 8002750:	08015754 	.word	0x08015754
 8002754:	200044ac 	.word	0x200044ac
 8002758:	40020000 	.word	0x40020000
 800275c:	40020400 	.word	0x40020400
 8002760:	20000160 	.word	0x20000160
 8002764:	20000164 	.word	0x20000164
    else
        max_value = y_;
 8002768:	8c3b      	ldrh	r3, [r7, #32]
 800276a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(max_value < z_)
 800276c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8002770:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002774:	429a      	cmp	r2, r3
 8002776:	da01      	bge.n	800277c <compass_calibrate+0x2ac>
        max_value = z_;
 8002778:	8bfb      	ldrh	r3, [r7, #30]
 800277a:	85bb      	strh	r3, [r7, #44]	; 0x2c

    // caculate scale
    calibrate_temp.scale_factor_axis[X] = (float)x_/max_value;
 800277c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002780:	ee07 3a90 	vmov	s15, r3
 8002784:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002788:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800278c:	ee07 3a90 	vmov	s15, r3
 8002790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002798:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <compass_calibrate+0x3c8>)
 800279a:	edc3 7a03 	vstr	s15, [r3, #12]
    calibrate_temp.scale_factor_axis[Y] = (float)y_/max_value;
 800279e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027aa:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ba:	4b37      	ldr	r3, [pc, #220]	; (8002898 <compass_calibrate+0x3c8>)
 80027bc:	edc3 7a04 	vstr	s15, [r3, #16]
    calibrate_temp.scale_factor_axis[Z] = (float)z_/max_value;
 80027c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80027c4:	ee07 3a90 	vmov	s15, r3
 80027c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027cc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80027d0:	ee07 3a90 	vmov	s15, r3
 80027d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027dc:	4b2e      	ldr	r3, [pc, #184]	; (8002898 <compass_calibrate+0x3c8>)
 80027de:	edc3 7a05 	vstr	s15, [r3, #20]

    calibrate_temp.sum_all_value = 0;
 80027e2:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <compass_calibrate+0x3c8>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]

	calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[X];
 80027e8:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <compass_calibrate+0x3c8>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	ee07 3a90 	vmov	s15, r3
 80027f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027f4:	4b28      	ldr	r3, [pc, #160]	; (8002898 <compass_calibrate+0x3c8>)
 80027f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80027fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002802:	ee17 2a90 	vmov	r2, s15
 8002806:	4b24      	ldr	r3, [pc, #144]	; (8002898 <compass_calibrate+0x3c8>)
 8002808:	619a      	str	r2, [r3, #24]
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Y];
 800280a:	4b23      	ldr	r3, [pc, #140]	; (8002898 <compass_calibrate+0x3c8>)
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <compass_calibrate+0x3c8>)
 8002818:	edd3 7a04 	vldr	s15, [r3, #16]
 800281c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002824:	ee17 2a90 	vmov	r2, s15
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <compass_calibrate+0x3c8>)
 800282a:	619a      	str	r2, [r3, #24]
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Z];
 800282c:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <compass_calibrate+0x3c8>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <compass_calibrate+0x3c8>)
 800283a:	edd3 7a05 	vldr	s15, [r3, #20]
 800283e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002846:	ee17 2a90 	vmov	r2, s15
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <compass_calibrate+0x3c8>)
 800284c:	619a      	str	r2, [r3, #24]

    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[X];
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <compass_calibrate+0x3c8>)
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <compass_calibrate+0x3c8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4413      	add	r3, r2
 8002858:	4a0f      	ldr	r2, [pc, #60]	; (8002898 <compass_calibrate+0x3c8>)
 800285a:	6193      	str	r3, [r2, #24]
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Y];
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <compass_calibrate+0x3c8>)
 800285e:	699a      	ldr	r2, [r3, #24]
 8002860:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <compass_calibrate+0x3c8>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4413      	add	r3, r2
 8002866:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <compass_calibrate+0x3c8>)
 8002868:	6193      	str	r3, [r2, #24]
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Z];
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <compass_calibrate+0x3c8>)
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <compass_calibrate+0x3c8>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	4413      	add	r3, r2
 8002874:	4a08      	ldr	r2, [pc, #32]	; (8002898 <compass_calibrate+0x3c8>)
 8002876:	6193      	str	r3, [r2, #24]
    // write data to eprrom
    AT24Cxx_write_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_temp, 0x0010, sizeof(cali_mag_t));
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <compass_calibrate+0x3cc>)
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	231c      	movs	r3, #28
 800287e:	2210      	movs	r2, #16
 8002880:	4905      	ldr	r1, [pc, #20]	; (8002898 <compass_calibrate+0x3c8>)
 8002882:	f003 f9e2 	bl	8005c4a <AT24Cxx_write_byte_buffer>
	while(1){
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002886:	2110      	movs	r1, #16
 8002888:	4805      	ldr	r0, [pc, #20]	; (80028a0 <compass_calibrate+0x3d0>)
 800288a:	f005 f93e 	bl	8007b0a <HAL_GPIO_TogglePin>
       HAL_Delay(1000); // 10 Hz loop
 800288e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002892:	f004 fa59 	bl	8006d48 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002896:	e7f6      	b.n	8002886 <compass_calibrate+0x3b6>
 8002898:	20000164 	.word	0x20000164
 800289c:	20004488 	.word	0x20004488
 80028a0:	40020000 	.word	0x40020000

080028a4 <gps_init>:
uint8_t gps_buffer[200];
/*  
 * Init function 
 */
void gps_init(UART_HandleTypeDef *uart,uint32_t baudrate)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
    offset_alt = 0;
 80028ae:	4b21      	ldr	r3, [pc, #132]	; (8002934 <gps_init+0x90>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
    gps_alt_zero_calibrate = FALSE;
 80028b4:	4b20      	ldr	r3, [pc, #128]	; (8002938 <gps_init+0x94>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
	_gpsUartPort = uart;
 80028ba:	4a20      	ldr	r2, [pc, #128]	; (800293c <gps_init+0x98>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6013      	str	r3, [r2, #0]
    _gps.timer_ = millis();
 80028c0:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <gps_init+0x9c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c6:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <gps_init+0xa0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <gps_init+0xa4>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	099b      	lsrs	r3, r3, #6
 80028d4:	4a1d      	ldr	r2, [pc, #116]	; (800294c <gps_init+0xa8>)
 80028d6:	62d3      	str	r3, [r2, #44]	; 0x2c

    _msg_id = 0;
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <gps_init+0xac>)
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]

    HAL_Delay(300);
 80028de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80028e2:	f004 fa31 	bl	8006d48 <HAL_Delay>
    /* disable NMEA */
    HAL_UART_Transmit(&huart3,disable_NMEA_MSG,sizeof(disable_NMEA_MSG),1000);
 80028e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ea:	224d      	movs	r2, #77	; 0x4d
 80028ec:	4919      	ldr	r1, [pc, #100]	; (8002954 <gps_init+0xb0>)
 80028ee:	481a      	ldr	r0, [pc, #104]	; (8002958 <gps_init+0xb4>)
 80028f0:	f009 fcb7 	bl	800c262 <HAL_UART_Transmit>
    HAL_Delay(100);
 80028f4:	2064      	movs	r0, #100	; 0x64
 80028f6:	f004 fa27 	bl	8006d48 <HAL_Delay>
    /* enable UBX */
    HAL_UART_Transmit(&huart3,enable_UBX_MSG,sizeof(enable_UBX_MSG),1000);
 80028fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028fe:	222c      	movs	r2, #44	; 0x2c
 8002900:	4916      	ldr	r1, [pc, #88]	; (800295c <gps_init+0xb8>)
 8002902:	4815      	ldr	r0, [pc, #84]	; (8002958 <gps_init+0xb4>)
 8002904:	f009 fcad 	bl	800c262 <HAL_UART_Transmit>
    HAL_Delay(100);
 8002908:	2064      	movs	r0, #100	; 0x64
 800290a:	f004 fa1d 	bl	8006d48 <HAL_Delay>
    /* set max rate */
    HAL_UART_Transmit(&huart3,set_rate_50hz,sizeof(set_rate_50hz),1000);
 800290e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002912:	220e      	movs	r2, #14
 8002914:	4912      	ldr	r1, [pc, #72]	; (8002960 <gps_init+0xbc>)
 8002916:	4810      	ldr	r0, [pc, #64]	; (8002958 <gps_init+0xb4>)
 8002918:	f009 fca3 	bl	800c262 <HAL_UART_Transmit>
    HAL_Delay(100);
 800291c:	2064      	movs	r0, #100	; 0x64
 800291e:	f004 fa13 	bl	8006d48 <HAL_Delay>

    /* set gps baudrate */
    //HAL_UART_Transmit(&huart3,uart38400,sizeof(uart38400),1000);
    //HAL_Delay(100);
    HAL_UART_Receive_DMA(&huart3,gps_buffer,200);
 8002922:	22c8      	movs	r2, #200	; 0xc8
 8002924:	490f      	ldr	r1, [pc, #60]	; (8002964 <gps_init+0xc0>)
 8002926:	480c      	ldr	r0, [pc, #48]	; (8002958 <gps_init+0xb4>)
 8002928:	f009 fddc 	bl	800c4e4 <HAL_UART_Receive_DMA>
    // set baudrate
    //huart3.Init.BaudRate = 38400 ;
	//HAL_UART_Init(&huart3);
    // read gps using interrupt
	//HAL_UART_Receive_IT(&huart3, &_char,1);
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200045e4 	.word	0x200045e4
 8002938:	200044d5 	.word	0x200044d5
 800293c:	20000180 	.word	0x20000180
 8002940:	200048c8 	.word	0x200048c8
 8002944:	20004658 	.word	0x20004658
 8002948:	10624dd3 	.word	0x10624dd3
 800294c:	200044d8 	.word	0x200044d8
 8002950:	20000184 	.word	0x20000184
 8002954:	0801588c 	.word	0x0801588c
 8002958:	200049b8 	.word	0x200049b8
 800295c:	080158dc 	.word	0x080158dc
 8002960:	08015908 	.word	0x08015908
 8002964:	20004514 	.word	0x20004514

08002968 <gps_readout>:
UART_HandleTypeDef *gps_uart_port(){
    return _gpsUartPort;
}


void gps_readout(){
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
    uint8_t buffer_index = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	71fb      	strb	r3, [r7, #7]
    if(receive_cplt){
 8002972:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <gps_readout+0x48>)
 8002974:	f993 3000 	ldrsb.w	r3, [r3]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d015      	beq.n	80029a8 <gps_readout+0x40>

        while(1){
            newdata(gps_buffer[buffer_index++]);
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	71fa      	strb	r2, [r7, #7]
 8002982:	461a      	mov	r2, r3
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <gps_readout+0x4c>)
 8002986:	5c9b      	ldrb	r3, [r3, r2]
 8002988:	4618      	mov	r0, r3
 800298a:	f000 f941 	bl	8002c10 <newdata>

            if(buffer_index >= 200){
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	2bc7      	cmp	r3, #199	; 0xc7
 8002992:	d800      	bhi.n	8002996 <gps_readout+0x2e>
            newdata(gps_buffer[buffer_index++]);
 8002994:	e7f2      	b.n	800297c <gps_readout+0x14>
            	 break;
 8002996:	bf00      	nop
            }
        }

        HAL_UART_Receive_DMA(&huart3,gps_buffer,200);
 8002998:	22c8      	movs	r2, #200	; 0xc8
 800299a:	4906      	ldr	r1, [pc, #24]	; (80029b4 <gps_readout+0x4c>)
 800299c:	4806      	ldr	r0, [pc, #24]	; (80029b8 <gps_readout+0x50>)
 800299e:	f009 fda1 	bl	800c4e4 <HAL_UART_Receive_DMA>
        receive_cplt = 0;
 80029a2:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <gps_readout+0x48>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
    }
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000185 	.word	0x20000185
 80029b4:	20004514 	.word	0x20004514
 80029b8:	200049b8 	.word	0x200049b8

080029bc <gps_DMA_callback>:

uint32_t ms_gps_thread;
void gps_DMA_callback()
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
    static uint32_t last_call;
    ms_gps_thread = millis() - last_call;
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <gps_DMA_callback+0x4c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <gps_DMA_callback+0x50>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4413      	add	r3, r2
 80029cc:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <gps_DMA_callback+0x54>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	099a      	lsrs	r2, r3, #6
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <gps_DMA_callback+0x58>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	4a0f      	ldr	r2, [pc, #60]	; (8002a18 <gps_DMA_callback+0x5c>)
 80029dc:	6013      	str	r3, [r2, #0]
    last_call = millis();
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <gps_DMA_callback+0x4c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <gps_DMA_callback+0x50>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <gps_DMA_callback+0x54>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	099b      	lsrs	r3, r3, #6
 80029f2:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <gps_DMA_callback+0x58>)
 80029f4:	6013      	str	r3, [r2, #0]
    receive_cplt = 1;
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <gps_DMA_callback+0x60>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	200048c8 	.word	0x200048c8
 8002a0c:	20004658 	.word	0x20004658
 8002a10:	10624dd3 	.word	0x10624dd3
 8002a14:	200001f0 	.word	0x200001f0
 8002a18:	200045e8 	.word	0x200045e8
 8002a1c:	20000185 	.word	0x20000185

08002a20 <parse_msg>:
}
*/

uint32_t cnt_vel,cnt_status,cnt_poss;

static uint8_t parse_msg(){
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
    static uint8_t _new_speed;
    static uint32_t lastPosUpdateTime;
    static uint8_t _new_position;
    static uint8_t gps_cali_count = 0;
    switch (_msg_id) {
 8002a24:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <parse_msg+0x1b0>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b30      	cmp	r3, #48	; 0x30
 8002a2a:	f000 80b8 	beq.w	8002b9e <parse_msg+0x17e>
 8002a2e:	2b30      	cmp	r3, #48	; 0x30
 8002a30:	f300 80b3 	bgt.w	8002b9a <parse_msg+0x17a>
 8002a34:	2b12      	cmp	r3, #18
 8002a36:	f000 8087 	beq.w	8002b48 <parse_msg+0x128>
 8002a3a:	2b12      	cmp	r3, #18
 8002a3c:	f300 80ad 	bgt.w	8002b9a <parse_msg+0x17a>
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d002      	beq.n	8002a4a <parse_msg+0x2a>
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d074      	beq.n	8002b32 <parse_msg+0x112>
 8002a48:	e0a7      	b.n	8002b9a <parse_msg+0x17a>
        case MSG_POSLLH:
        	cnt_poss ++;
 8002a4a:	4b62      	ldr	r3, [pc, #392]	; (8002bd4 <parse_msg+0x1b4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	4a60      	ldr	r2, [pc, #384]	; (8002bd4 <parse_msg+0x1b4>)
 8002a52:	6013      	str	r3, [r2, #0]
            _gps.position[LON] = _buffer.posllh.longitude;
 8002a54:	4b60      	ldr	r3, [pc, #384]	; (8002bd8 <parse_msg+0x1b8>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a60      	ldr	r2, [pc, #384]	; (8002bdc <parse_msg+0x1bc>)
 8002a5a:	6013      	str	r3, [r2, #0]
            _gps.position[LAT] = _buffer.posllh.latitude;
 8002a5c:	4b5e      	ldr	r3, [pc, #376]	; (8002bd8 <parse_msg+0x1b8>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4a5e      	ldr	r2, [pc, #376]	; (8002bdc <parse_msg+0x1bc>)
 8002a62:	6053      	str	r3, [r2, #4]
            if(gps_alt_zero_calibrate == FALSE){
 8002a64:	4b5e      	ldr	r3, [pc, #376]	; (8002be0 <parse_msg+0x1c0>)
 8002a66:	f993 3000 	ldrsb.w	r3, [r3]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d115      	bne.n	8002a9a <parse_msg+0x7a>
                if(gps_cali_count < 20){
 8002a6e:	4b5d      	ldr	r3, [pc, #372]	; (8002be4 <parse_msg+0x1c4>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b13      	cmp	r3, #19
 8002a74:	d80d      	bhi.n	8002a92 <parse_msg+0x72>
                    offset_alt += _buffer.posllh.altitude_msl;
 8002a76:	4b58      	ldr	r3, [pc, #352]	; (8002bd8 <parse_msg+0x1b8>)
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	4b5b      	ldr	r3, [pc, #364]	; (8002be8 <parse_msg+0x1c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4413      	add	r3, r2
 8002a80:	4a59      	ldr	r2, [pc, #356]	; (8002be8 <parse_msg+0x1c8>)
 8002a82:	6013      	str	r3, [r2, #0]
                    gps_cali_count ++;
 8002a84:	4b57      	ldr	r3, [pc, #348]	; (8002be4 <parse_msg+0x1c4>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	4b55      	ldr	r3, [pc, #340]	; (8002be4 <parse_msg+0x1c4>)
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e010      	b.n	8002ab4 <parse_msg+0x94>
                }
                else{
                    gps_alt_zero_calibrate = TRUE;
 8002a92:	4b53      	ldr	r3, [pc, #332]	; (8002be0 <parse_msg+0x1c0>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	e00c      	b.n	8002ab4 <parse_msg+0x94>
                }
            }
            else{
               _gps.altitude_mgl = _buffer.posllh.altitude_msl - offset_alt/20; 
 8002a9a:	4b4f      	ldr	r3, [pc, #316]	; (8002bd8 <parse_msg+0x1b8>)
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	4b52      	ldr	r3, [pc, #328]	; (8002be8 <parse_msg+0x1c8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4952      	ldr	r1, [pc, #328]	; (8002bec <parse_msg+0x1cc>)
 8002aa4:	fb81 0103 	smull	r0, r1, r1, r3
 8002aa8:	10c9      	asrs	r1, r1, #3
 8002aaa:	17db      	asrs	r3, r3, #31
 8002aac:	1a5b      	subs	r3, r3, r1
 8002aae:	4413      	add	r3, r2
 8002ab0:	4a4a      	ldr	r2, [pc, #296]	; (8002bdc <parse_msg+0x1bc>)
 8002ab2:	6353      	str	r3, [r2, #52]	; 0x34
            }
            _gps.altitude_msl = _buffer.posllh.altitude_msl - offset_alt; 
 8002ab4:	4b48      	ldr	r3, [pc, #288]	; (8002bd8 <parse_msg+0x1b8>)
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	4b4b      	ldr	r3, [pc, #300]	; (8002be8 <parse_msg+0x1c8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	4a47      	ldr	r2, [pc, #284]	; (8002bdc <parse_msg+0x1bc>)
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
            _gps.horizontalAccuracy = _buffer.posllh.horizontal_accuracy;
 8002ac2:	4b45      	ldr	r3, [pc, #276]	; (8002bd8 <parse_msg+0x1b8>)
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	4a45      	ldr	r2, [pc, #276]	; (8002bdc <parse_msg+0x1bc>)
 8002ac8:	6213      	str	r3, [r2, #32]
            _gps.VerticalAccuracy = _buffer.posllh.vertical_accuracy;
 8002aca:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <parse_msg+0x1b8>)
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	4a43      	ldr	r2, [pc, #268]	; (8002bdc <parse_msg+0x1bc>)
 8002ad0:	6253      	str	r3, [r2, #36]	; 0x24
            /* time update position */
            if(lastPosUpdateTime == 0){
 8002ad2:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <parse_msg+0x1d0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10c      	bne.n	8002af4 <parse_msg+0xd4>
                lastPosUpdateTime = millis();
 8002ada:	4b46      	ldr	r3, [pc, #280]	; (8002bf4 <parse_msg+0x1d4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ae0:	4b45      	ldr	r3, [pc, #276]	; (8002bf8 <parse_msg+0x1d8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4a45      	ldr	r2, [pc, #276]	; (8002bfc <parse_msg+0x1dc>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	4a40      	ldr	r2, [pc, #256]	; (8002bf0 <parse_msg+0x1d0>)
 8002af0:	6013      	str	r3, [r2, #0]
                break;
 8002af2:	e055      	b.n	8002ba0 <parse_msg+0x180>
            }
            _gps.posUpdateTime = millis() - lastPosUpdateTime;
 8002af4:	4b3f      	ldr	r3, [pc, #252]	; (8002bf4 <parse_msg+0x1d4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002afa:	4b3f      	ldr	r3, [pc, #252]	; (8002bf8 <parse_msg+0x1d8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4413      	add	r3, r2
 8002b00:	4a3e      	ldr	r2, [pc, #248]	; (8002bfc <parse_msg+0x1dc>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	099a      	lsrs	r2, r3, #6
 8002b08:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <parse_msg+0x1d0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	4a33      	ldr	r2, [pc, #204]	; (8002bdc <parse_msg+0x1bc>)
 8002b10:	6293      	str	r3, [r2, #40]	; 0x28
            lastPosUpdateTime = millis();
 8002b12:	4b38      	ldr	r3, [pc, #224]	; (8002bf4 <parse_msg+0x1d4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b18:	4b37      	ldr	r3, [pc, #220]	; (8002bf8 <parse_msg+0x1d8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	4a37      	ldr	r2, [pc, #220]	; (8002bfc <parse_msg+0x1dc>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	4a32      	ldr	r2, [pc, #200]	; (8002bf0 <parse_msg+0x1d0>)
 8002b28:	6013      	str	r3, [r2, #0]
            /* flag set */
            _new_position = TRUE;
 8002b2a:	4b35      	ldr	r3, [pc, #212]	; (8002c00 <parse_msg+0x1e0>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
            break;
 8002b30:	e036      	b.n	8002ba0 <parse_msg+0x180>
        case MSG_STATUS:

        	cnt_status ++;
 8002b32:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <parse_msg+0x1e4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3301      	adds	r3, #1
 8002b38:	4a32      	ldr	r2, [pc, #200]	; (8002c04 <parse_msg+0x1e4>)
 8002b3a:	6013      	str	r3, [r2, #0]

            //next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type == FIX_3D);
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.status.fix_type;
 8002b3c:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <parse_msg+0x1b8>)
 8002b3e:	791a      	ldrb	r2, [r3, #4]
 8002b40:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <parse_msg+0x1bc>)
 8002b42:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
            break;
 8002b46:	e02b      	b.n	8002ba0 <parse_msg+0x180>
            _gps.fix = _buffer.solution.fix_type; --------------------------------------------------------------------------------------
            _gps.numSat = _buffer.solution.satellites; -------------------------------------------------------------------------------------
            break;
        */
        case MSG_VELNED:
        	cnt_vel ++;
 8002b48:	4b2f      	ldr	r3, [pc, #188]	; (8002c08 <parse_msg+0x1e8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	4a2e      	ldr	r2, [pc, #184]	; (8002c08 <parse_msg+0x1e8>)
 8002b50:	6013      	str	r3, [r2, #0]
            _gps.velocity[LAT] = _buffer.velned.ned_north;
 8002b52:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <parse_msg+0x1b8>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <parse_msg+0x1bc>)
 8002b58:	60d3      	str	r3, [r2, #12]
            _gps.velocity[LON] = _buffer.velned.ned_east;
 8002b5a:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <parse_msg+0x1b8>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	4a1f      	ldr	r2, [pc, #124]	; (8002bdc <parse_msg+0x1bc>)
 8002b60:	6093      	str	r3, [r2, #8]
            _gps.velocity[DOWN] = _buffer.velned.ned_down;
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <parse_msg+0x1b8>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	4a1d      	ldr	r2, [pc, #116]	; (8002bdc <parse_msg+0x1bc>)
 8002b68:	6113      	str	r3, [r2, #16]
            _gps.Gspeed = _buffer.velned.speed_2d;
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <parse_msg+0x1b8>)
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <parse_msg+0x1bc>)
 8002b72:	615a      	str	r2, [r3, #20]
            _gps.ground_course = _buffer.velned.heading_2d;
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <parse_msg+0x1b8>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <parse_msg+0x1bc>)
 8002b7c:	871a      	strh	r2, [r3, #56]	; 0x38
            _gps.speedAccuracy = _buffer.velned.speed_accuracy;
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <parse_msg+0x1b8>)
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <parse_msg+0x1bc>)
 8002b86:	619a      	str	r2, [r3, #24]
            _gps.headingAccuracy = _buffer.velned.heading_accuracy;
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <parse_msg+0x1b8>)
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <parse_msg+0x1bc>)
 8002b90:	61da      	str	r2, [r3, #28]
            _new_speed = TRUE;
 8002b92:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <parse_msg+0x1ec>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
            break;
 8002b98:	e002      	b.n	8002ba0 <parse_msg+0x180>
            svinfo_rate[0] = svinfo_rate[1];
            svinfo_rate[1] = millis();
            */
            break;
        default:
            return FALSE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e012      	b.n	8002bc4 <parse_msg+0x1a4>
            break;
 8002b9e:	bf00      	nop
    }
    if (_new_position && _new_speed) {
 8002ba0:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <parse_msg+0x1e0>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00c      	beq.n	8002bc2 <parse_msg+0x1a2>
 8002ba8:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <parse_msg+0x1ec>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <parse_msg+0x1a2>
        _new_speed = _new_position = FALSE;
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <parse_msg+0x1e0>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <parse_msg+0x1e0>)
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <parse_msg+0x1ec>)
 8002bbc:	701a      	strb	r2, [r3, #0]
        return TRUE;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <parse_msg+0x1a4>
    }
    return FALSE;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000184 	.word	0x20000184
 8002bd4:	200045e0 	.word	0x200045e0
 8002bd8:	20000188 	.word	0x20000188
 8002bdc:	200044d8 	.word	0x200044d8
 8002be0:	200044d5 	.word	0x200044d5
 8002be4:	200001f4 	.word	0x200001f4
 8002be8:	200045e4 	.word	0x200045e4
 8002bec:	66666667 	.word	0x66666667
 8002bf0:	200001f8 	.word	0x200001f8
 8002bf4:	200048c8 	.word	0x200048c8
 8002bf8:	20004658 	.word	0x20004658
 8002bfc:	10624dd3 	.word	0x10624dd3
 8002c00:	200001fc 	.word	0x200001fc
 8002c04:	200045f0 	.word	0x200045f0
 8002c08:	200045dc 	.word	0x200045dc
 8002c0c:	200001fd 	.word	0x200001fd

08002c10 <newdata>:

static uint16_t _payload_length = 0;
static uint16_t _payload_counter = 0;
static uint8_t newdata(uint8_t data){
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	71fb      	strb	r3, [r7, #7]
    uint8_t parsed = FALSE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	73fb      	strb	r3, [r7, #15]
    static uint8_t _ck_a;
    static uint8_t _ck_b;
    static uint8_t _step = 0;
    switch (_step) {
 8002c1e:	4b7a      	ldr	r3, [pc, #488]	; (8002e08 <newdata+0x1f8>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	f200 80eb 	bhi.w	8002dfe <newdata+0x1ee>
 8002c28:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <newdata+0x20>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002c55 	.word	0x08002c55
 8002c34:	08002c6b 	.word	0x08002c6b
 8002c38:	08002c7f 	.word	0x08002c7f
 8002c3c:	08002c9b 	.word	0x08002c9b
 8002c40:	08002ccd 	.word	0x08002ccd
 8002c44:	08002d01 	.word	0x08002d01
 8002c48:	08002d5b 	.word	0x08002d5b
 8002c4c:	08002db3 	.word	0x08002db3
 8002c50:	08002dd1 	.word	0x08002dd1
        case 0: // Sync char 1 (0xB5)
            if (PREAMBLE1 == data)
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	2bb5      	cmp	r3, #181	; 0xb5
 8002c58:	f040 80ca 	bne.w	8002df0 <newdata+0x1e0>
                _step++;
 8002c5c:	4b6a      	ldr	r3, [pc, #424]	; (8002e08 <newdata+0x1f8>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	4b68      	ldr	r3, [pc, #416]	; (8002e08 <newdata+0x1f8>)
 8002c66:	701a      	strb	r2, [r3, #0]
            break;
 8002c68:	e0c2      	b.n	8002df0 <newdata+0x1e0>
        case 1: // Sync char 2 (0x62)
            if (PREAMBLE2 == data) {
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	2b62      	cmp	r3, #98	; 0x62
 8002c6e:	d106      	bne.n	8002c7e <newdata+0x6e>
                _step++;
 8002c70:	4b65      	ldr	r3, [pc, #404]	; (8002e08 <newdata+0x1f8>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	3301      	adds	r3, #1
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	4b63      	ldr	r3, [pc, #396]	; (8002e08 <newdata+0x1f8>)
 8002c7a:	701a      	strb	r2, [r3, #0]
                break;
 8002c7c:	e0bf      	b.n	8002dfe <newdata+0x1ee>
            }
        case 2: // Class
            _step++;
 8002c7e:	4b62      	ldr	r3, [pc, #392]	; (8002e08 <newdata+0x1f8>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4b60      	ldr	r3, [pc, #384]	; (8002e08 <newdata+0x1f8>)
 8002c88:	701a      	strb	r2, [r3, #0]
            _ck_b = _ck_a = data;  
 8002c8a:	4a60      	ldr	r2, [pc, #384]	; (8002e0c <newdata+0x1fc>)
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	7013      	strb	r3, [r2, #0]
 8002c90:	4b5e      	ldr	r3, [pc, #376]	; (8002e0c <newdata+0x1fc>)
 8002c92:	781a      	ldrb	r2, [r3, #0]
 8002c94:	4b5e      	ldr	r3, [pc, #376]	; (8002e10 <newdata+0x200>)
 8002c96:	701a      	strb	r2, [r3, #0]
            break;
 8002c98:	e0b1      	b.n	8002dfe <newdata+0x1ee>
        case 3: // ID
            _step++;
 8002c9a:	4b5b      	ldr	r3, [pc, #364]	; (8002e08 <newdata+0x1f8>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4b59      	ldr	r3, [pc, #356]	; (8002e08 <newdata+0x1f8>)
 8002ca4:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8002ca6:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <newdata+0x1fc>)
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	4413      	add	r3, r2
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	4b56      	ldr	r3, [pc, #344]	; (8002e0c <newdata+0x1fc>)
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	4b55      	ldr	r3, [pc, #340]	; (8002e0c <newdata+0x1fc>)
 8002cb6:	781a      	ldrb	r2, [r3, #0]
 8002cb8:	4b55      	ldr	r3, [pc, #340]	; (8002e10 <newdata+0x200>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <newdata+0x200>)
 8002cc2:	701a      	strb	r2, [r3, #0]
            _msg_id = data;
 8002cc4:	4a53      	ldr	r2, [pc, #332]	; (8002e14 <newdata+0x204>)
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	7013      	strb	r3, [r2, #0]
            break;
 8002cca:	e098      	b.n	8002dfe <newdata+0x1ee>
        case 4: 
            _step++;
 8002ccc:	4b4e      	ldr	r3, [pc, #312]	; (8002e08 <newdata+0x1f8>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	4b4c      	ldr	r3, [pc, #304]	; (8002e08 <newdata+0x1f8>)
 8002cd6:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8002cd8:	4b4c      	ldr	r3, [pc, #304]	; (8002e0c <newdata+0x1fc>)
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	4413      	add	r3, r2
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4b4a      	ldr	r3, [pc, #296]	; (8002e0c <newdata+0x1fc>)
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	4b49      	ldr	r3, [pc, #292]	; (8002e0c <newdata+0x1fc>)
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	4b49      	ldr	r3, [pc, #292]	; (8002e10 <newdata+0x200>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	4413      	add	r3, r2
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <newdata+0x200>)
 8002cf4:	701a      	strb	r2, [r3, #0]
            _payload_length = data; 
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <newdata+0x208>)
 8002cfc:	801a      	strh	r2, [r3, #0]
            break;
 8002cfe:	e07e      	b.n	8002dfe <newdata+0x1ee>
        case 5: 
            _step++;
 8002d00:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <newdata+0x1f8>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	4b3f      	ldr	r3, [pc, #252]	; (8002e08 <newdata+0x1f8>)
 8002d0a:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);      
 8002d0c:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <newdata+0x1fc>)
 8002d0e:	781a      	ldrb	r2, [r3, #0]
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	4413      	add	r3, r2
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <newdata+0x1fc>)
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <newdata+0x1fc>)
 8002d1c:	781a      	ldrb	r2, [r3, #0]
 8002d1e:	4b3c      	ldr	r3, [pc, #240]	; (8002e10 <newdata+0x200>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	4413      	add	r3, r2
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <newdata+0x200>)
 8002d28:	701a      	strb	r2, [r3, #0]
            _payload_length += (uint16_t)(data << 8);
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <newdata+0x208>)
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <newdata+0x208>)
 8002d3c:	801a      	strh	r2, [r3, #0]
            if (_payload_length > UBLOX_BUFFER_SIZE) {
 8002d3e:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <newdata+0x208>)
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	2b64      	cmp	r3, #100	; 0x64
 8002d44:	d905      	bls.n	8002d52 <newdata+0x142>
                _payload_length = 0;
 8002d46:	4b34      	ldr	r3, [pc, #208]	; (8002e18 <newdata+0x208>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	801a      	strh	r2, [r3, #0]
                _step = 0;
 8002d4c:	4b2e      	ldr	r3, [pc, #184]	; (8002e08 <newdata+0x1f8>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
            }
            _payload_counter = 0;   
 8002d52:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <newdata+0x20c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	801a      	strh	r2, [r3, #0]
            break;
 8002d58:	e051      	b.n	8002dfe <newdata+0x1ee>
        case 6:
            _ck_b += (_ck_a += data);     
 8002d5a:	4b2c      	ldr	r3, [pc, #176]	; (8002e0c <newdata+0x1fc>)
 8002d5c:	781a      	ldrb	r2, [r3, #0]
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	4413      	add	r3, r2
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	4b29      	ldr	r3, [pc, #164]	; (8002e0c <newdata+0x1fc>)
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <newdata+0x1fc>)
 8002d6a:	781a      	ldrb	r2, [r3, #0]
 8002d6c:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <newdata+0x200>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <newdata+0x200>)
 8002d76:	701a      	strb	r2, [r3, #0]
            if (_payload_counter < UBLOX_BUFFER_SIZE) {
 8002d78:	4b28      	ldr	r3, [pc, #160]	; (8002e1c <newdata+0x20c>)
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	2b63      	cmp	r3, #99	; 0x63
 8002d7e:	d805      	bhi.n	8002d8c <newdata+0x17c>
                _buffer.bytes[_payload_counter] = data;
 8002d80:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <newdata+0x20c>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	4619      	mov	r1, r3
 8002d86:	4a26      	ldr	r2, [pc, #152]	; (8002e20 <newdata+0x210>)
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	5453      	strb	r3, [r2, r1]
            }
            if (++_payload_counter == _payload_length)
 8002d8c:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <newdata+0x20c>)
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	3301      	adds	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <newdata+0x20c>)
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <newdata+0x20c>)
 8002d9a:	881a      	ldrh	r2, [r3, #0]
 8002d9c:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <newdata+0x208>)
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d127      	bne.n	8002df4 <newdata+0x1e4>
                _step++;
 8002da4:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <newdata+0x1f8>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <newdata+0x1f8>)
 8002dae:	701a      	strb	r2, [r3, #0]
            break;
 8002db0:	e020      	b.n	8002df4 <newdata+0x1e4>
        case 7:
            _step++;
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <newdata+0x1f8>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	3301      	adds	r3, #1
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <newdata+0x1f8>)
 8002dbc:	701a      	strb	r2, [r3, #0]
            if (_ck_a != data)
 8002dbe:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <newdata+0x1fc>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	79fa      	ldrb	r2, [r7, #7]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d017      	beq.n	8002df8 <newdata+0x1e8>
                _step = 0;         
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <newdata+0x1f8>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
            break;
 8002dce:	e013      	b.n	8002df8 <newdata+0x1e8>
        case 8:
            _step = 0;
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <newdata+0x1f8>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
            if (_ck_b != data)
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <newdata+0x200>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	79fa      	ldrb	r2, [r7, #7]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d10d      	bne.n	8002dfc <newdata+0x1ec>
                break;   
            if(parse_msg())
 8002de0:	f7ff fe1e 	bl	8002a20 <parse_msg>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <newdata+0x1ee>
            {
                parsed = TRUE;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
 8002dee:	e006      	b.n	8002dfe <newdata+0x1ee>
            break;
 8002df0:	bf00      	nop
 8002df2:	e004      	b.n	8002dfe <newdata+0x1ee>
            break;
 8002df4:	bf00      	nop
 8002df6:	e002      	b.n	8002dfe <newdata+0x1ee>
            break;
 8002df8:	bf00      	nop
 8002dfa:	e000      	b.n	8002dfe <newdata+0x1ee>
                break;   
 8002dfc:	bf00      	nop
            }
    } 
    return parsed;
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	200001fe 	.word	0x200001fe
 8002e0c:	200001ff 	.word	0x200001ff
 8002e10:	20000200 	.word	0x20000200
 8002e14:	20000184 	.word	0x20000184
 8002e18:	200001ec 	.word	0x200001ec
 8002e1c:	200001ee 	.word	0x200001ee
 8002e20:	20000188 	.word	0x20000188

08002e24 <imu_calibrate>:
  .gyr_lsb = 32.8f
};


static int32_t store_gyro[3];
void imu_calibrate(int16_t *offsx,int16_t *offsy,int16_t *offsz){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
	axis3_t gyro_;
	integralFBx = 0;
 8002e30:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <imu_calibrate+0xd4>)
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
	integralFBy = 0;
 8002e38:	4b30      	ldr	r3, [pc, #192]	; (8002efc <imu_calibrate+0xd8>)
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
	integralFBz = 0;
 8002e40:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <imu_calibrate+0xdc>)
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < OFFSET_CYCLE; i++){
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	e01f      	b.n	8002e8e <imu_calibrate+0x6a>
		mpu6050_gyro_get_raw(&gyro_);
 8002e4e:	f107 0314 	add.w	r3, r7, #20
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fe44 	bl	8001ae0 <mpu6050_gyro_get_raw>
		store_gyro[X] += gyro_.x;
 8002e58:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <imu_calibrate+0xe0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002e60:	4413      	add	r3, r2
 8002e62:	4a28      	ldr	r2, [pc, #160]	; (8002f04 <imu_calibrate+0xe0>)
 8002e64:	6013      	str	r3, [r2, #0]
    	store_gyro[Y] += gyro_.y;
 8002e66:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <imu_calibrate+0xe0>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e6e:	4413      	add	r3, r2
 8002e70:	4a24      	ldr	r2, [pc, #144]	; (8002f04 <imu_calibrate+0xe0>)
 8002e72:	6053      	str	r3, [r2, #4]
    	store_gyro[Z] += gyro_.z;
 8002e74:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <imu_calibrate+0xe0>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4a21      	ldr	r2, [pc, #132]	; (8002f04 <imu_calibrate+0xe0>)
 8002e80:	6093      	str	r3, [r2, #8]
		HAL_Delay(1); // delay 1 ms
 8002e82:	2001      	movs	r0, #1
 8002e84:	f003 ff60 	bl	8006d48 <HAL_Delay>
	for(int i = 0;i < OFFSET_CYCLE; i++){
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e94:	dbdb      	blt.n	8002e4e <imu_calibrate+0x2a>
	}
	*offsx = store_gyro[X] / OFFSET_CYCLE;
 8002e96:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <imu_calibrate+0xe0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1b      	ldr	r2, [pc, #108]	; (8002f08 <imu_calibrate+0xe4>)
 8002e9c:	fb82 1203 	smull	r1, r2, r2, r3
 8002ea0:	1192      	asrs	r2, r2, #6
 8002ea2:	17db      	asrs	r3, r3, #31
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	b21a      	sxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	801a      	strh	r2, [r3, #0]
	*offsy = store_gyro[Y] / OFFSET_CYCLE;
 8002eac:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <imu_calibrate+0xe0>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4a15      	ldr	r2, [pc, #84]	; (8002f08 <imu_calibrate+0xe4>)
 8002eb2:	fb82 1203 	smull	r1, r2, r2, r3
 8002eb6:	1192      	asrs	r2, r2, #6
 8002eb8:	17db      	asrs	r3, r3, #31
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	b21a      	sxth	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	801a      	strh	r2, [r3, #0]
	*offsz = store_gyro[Z] / OFFSET_CYCLE;
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <imu_calibrate+0xe0>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	4a10      	ldr	r2, [pc, #64]	; (8002f08 <imu_calibrate+0xe4>)
 8002ec8:	fb82 1203 	smull	r1, r2, r2, r3
 8002ecc:	1192      	asrs	r2, r2, #6
 8002ece:	17db      	asrs	r3, r3, #31
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	b21a      	sxth	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	801a      	strh	r2, [r3, #0]
	init_us = millis();
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <imu_calibrate+0xe8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ede:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <imu_calibrate+0xec>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	4a08      	ldr	r2, [pc, #32]	; (8002f08 <imu_calibrate+0xe4>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	099b      	lsrs	r3, r3, #6
 8002eec:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <imu_calibrate+0xf0>)
 8002eee:	6013      	str	r3, [r2, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	3720      	adds	r7, #32
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20004634 	.word	0x20004634
 8002efc:	20004610 	.word	0x20004610
 8002f00:	20004630 	.word	0x20004630
 8002f04:	20000234 	.word	0x20000234
 8002f08:	10624dd3 	.word	0x10624dd3
 8002f0c:	200048c8 	.word	0x200048c8
 8002f10:	20004658 	.word	0x20004658
 8002f14:	2000462c 	.word	0x2000462c

08002f18 <update_ahrs>:
	m->roll   = atan2_approx(-acc.x, (1/invSqrt_(acc.y * acc.y + acc.z * acc.z)))*180/M_PIf;
}

static int8_t reset_state = 1;
// mahony filter
void update_ahrs(int16_t gx_, int16_t gy_, int16_t gz_, int16_t accx_, int16_t accy_, int16_t accz_,int16_t magx,int16_t magy,int16_t magz,const float dt){
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	ed2d 8b02 	vpush	{d8}
 8002f1e:	b0ab      	sub	sp, #172	; 0xac
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4604      	mov	r4, r0
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f2e:	4623      	mov	r3, r4
 8002f30:	81fb      	strh	r3, [r7, #14]
 8002f32:	4603      	mov	r3, r0
 8002f34:	81bb      	strh	r3, [r7, #12]
 8002f36:	460b      	mov	r3, r1
 8002f38:	817b      	strh	r3, [r7, #10]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	813b      	strh	r3, [r7, #8]
    float vx, vy, vz;
    float emz,wx,wy;
    float mx,my,mz,hx,hy,bx,bz;


	gx = (gx_/config.gyr_lsb) * RAD;
 8002f3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f4a:	4bea      	ldr	r3, [pc, #936]	; (80032f4 <update_ahrs+0x3dc>)
 8002f4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f54:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 80032f8 <update_ahrs+0x3e0>
 8002f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f5c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	gy = (gy_/config.gyr_lsb) * RAD;
 8002f60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f64:	ee07 3a90 	vmov	s15, r3
 8002f68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f6c:	4be1      	ldr	r3, [pc, #900]	; (80032f4 <update_ahrs+0x3dc>)
 8002f6e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f76:	ed9f 7ae0 	vldr	s14, [pc, #896]	; 80032f8 <update_ahrs+0x3e0>
 8002f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f7e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	gz = (gz_/config.gyr_lsb) * RAD;
 8002f82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f8e:	4bd9      	ldr	r3, [pc, #868]	; (80032f4 <update_ahrs+0x3dc>)
 8002f90:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f98:	ed9f 7ad7 	vldr	s14, [pc, #860]	; 80032f8 <update_ahrs+0x3e0>
 8002f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fa0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

	if(!((accx_ == 0) && (accy_ == 0) && ( accz_ == 0))) {
 8002fa4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d108      	bne.n	8002fbe <update_ahrs+0xa6>
 8002fac:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d104      	bne.n	8002fbe <update_ahrs+0xa6>
 8002fb4:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8214 	beq.w	80033e6 <update_ahrs+0x4ce>
		uint32_t acc_abs =  accx_ * accx_ + accy_ * accy_ + accz_ * accz_;
 8002fbe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fc2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002fc6:	fb02 f203 	mul.w	r2, r2, r3
 8002fca:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8002fce:	f9b7 10c0 	ldrsh.w	r1, [r7, #192]	; 0xc0
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	441a      	add	r2, r3
 8002fd8:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8002fdc:	f9b7 10c4 	ldrsh.w	r1, [r7, #196]	; 0xc4
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		norm = invSqrt_((float)acc_abs);
 8002fea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8002ffa:	f000 fe79 	bl	8003cf0 <invSqrt_>
 8002ffe:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
		acc_x = (float)accx_ * norm;
 8003002:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003006:	ee07 3a90 	vmov	s15, r3
 800300a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800300e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003016:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		acc_y = (float)accy_ * norm;
 800301a:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003026:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800302a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		acc_z = (float)accz_ * norm;
 8003032:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800303e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003046:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

		if(reset_state){
 800304a:	4bac      	ldr	r3, [pc, #688]	; (80032fc <update_ahrs+0x3e4>)
 800304c:	f993 3000 	ldrsb.w	r3, [r3]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00e      	beq.n	8003072 <update_ahrs+0x15a>
			dcm[0][2] = acc_x;
 8003054:	4aaa      	ldr	r2, [pc, #680]	; (8003300 <update_ahrs+0x3e8>)
 8003056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800305a:	6093      	str	r3, [r2, #8]
			dcm[1][2] = acc_y;
 800305c:	4aa8      	ldr	r2, [pc, #672]	; (8003300 <update_ahrs+0x3e8>)
 800305e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003062:	6153      	str	r3, [r2, #20]
			dcm[2][2] = acc_z;
 8003064:	4aa6      	ldr	r2, [pc, #664]	; (8003300 <update_ahrs+0x3e8>)
 8003066:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800306a:	6213      	str	r3, [r2, #32]
			reset_state = 0;
 800306c:	4ba3      	ldr	r3, [pc, #652]	; (80032fc <update_ahrs+0x3e4>)
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
		}

        if(USE_MAG){
			norm = invSqrt_(magx * magx + magy * magy + magz * magz);
 8003072:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 8003076:	f9b7 20c8 	ldrsh.w	r2, [r7, #200]	; 0xc8
 800307a:	fb02 f203 	mul.w	r2, r2, r3
 800307e:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 8003082:	f9b7 10cc 	ldrsh.w	r1, [r7, #204]	; 0xcc
 8003086:	fb01 f303 	mul.w	r3, r1, r3
 800308a:	441a      	add	r2, r3
 800308c:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8003090:	f9b7 10d0 	ldrsh.w	r1, [r7, #208]	; 0xd0
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a2:	eeb0 0a67 	vmov.f32	s0, s15
 80030a6:	f000 fe23 	bl	8003cf0 <invSqrt_>
 80030aa:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
			mx = magx * norm;
 80030ae:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ba:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80030be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
			my = magy * norm;
 80030c6:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d2:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80030d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030da:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
			mz = magz * norm;
 80030de:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ea:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80030ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

			hx = mx * dcm[0][0] + my * dcm[1][0] + mz * dcm[2][0];
 80030f6:	4b82      	ldr	r3, [pc, #520]	; (8003300 <update_ahrs+0x3e8>)
 80030f8:	ed93 7a00 	vldr	s14, [r3]
 80030fc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003104:	4b7e      	ldr	r3, [pc, #504]	; (8003300 <update_ahrs+0x3e8>)
 8003106:	edd3 6a03 	vldr	s13, [r3, #12]
 800310a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800310e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003116:	4b7a      	ldr	r3, [pc, #488]	; (8003300 <update_ahrs+0x3e8>)
 8003118:	edd3 6a06 	vldr	s13, [r3, #24]
 800311c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003128:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
			hy = mx * dcm[0][1] + my * dcm[1][1] + mz * dcm[2][1];
 800312c:	4b74      	ldr	r3, [pc, #464]	; (8003300 <update_ahrs+0x3e8>)
 800312e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003132:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800313a:	4b71      	ldr	r3, [pc, #452]	; (8003300 <update_ahrs+0x3e8>)
 800313c:	edd3 6a04 	vldr	s13, [r3, #16]
 8003140:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003148:	ee37 7a27 	vadd.f32	s14, s14, s15
 800314c:	4b6c      	ldr	r3, [pc, #432]	; (8003300 <update_ahrs+0x3e8>)
 800314e:	edd3 6a07 	vldr	s13, [r3, #28]
 8003152:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800315a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
			bz = mx * dcm[0][2] + my * dcm[1][2] + mz * dcm[2][2];
 8003162:	4b67      	ldr	r3, [pc, #412]	; (8003300 <update_ahrs+0x3e8>)
 8003164:	ed93 7a02 	vldr	s14, [r3, #8]
 8003168:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800316c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003170:	4b63      	ldr	r3, [pc, #396]	; (8003300 <update_ahrs+0x3e8>)
 8003172:	edd3 6a05 	vldr	s13, [r3, #20]
 8003176:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800317a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800317e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003182:	4b5f      	ldr	r3, [pc, #380]	; (8003300 <update_ahrs+0x3e8>)
 8003184:	edd3 6a08 	vldr	s13, [r3, #32]
 8003188:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800318c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003194:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

			bx = sqrtf(hx * hx + hy * hy);
 8003198:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800319c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80031a0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80031a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80031a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ac:	eeb0 0a67 	vmov.f32	s0, s15
 80031b0:	f011 fe32 	bl	8014e18 <sqrtf>
 80031b4:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68

			wx = bx * dcm[0][0] + bz * dcm[0][2];
 80031b8:	4b51      	ldr	r3, [pc, #324]	; (8003300 <update_ahrs+0x3e8>)
 80031ba:	ed93 7a00 	vldr	s14, [r3]
 80031be:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80031c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031c6:	4b4e      	ldr	r3, [pc, #312]	; (8003300 <update_ahrs+0x3e8>)
 80031c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80031cc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80031d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
			wy = bx * dcm[1][0] + bz * dcm[1][2];
 80031dc:	4b48      	ldr	r3, [pc, #288]	; (8003300 <update_ahrs+0x3e8>)
 80031de:	ed93 7a03 	vldr	s14, [r3, #12]
 80031e2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80031e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ea:	4b45      	ldr	r3, [pc, #276]	; (8003300 <update_ahrs+0x3e8>)
 80031ec:	edd3 6a05 	vldr	s13, [r3, #20]
 80031f0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80031f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			emz = mx * wy - my * wx;
 8003200:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003204:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003208:	ee27 7a27 	vmul.f32	s14, s14, s15
 800320c:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8003210:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800321c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		}
		else{
			emz = 0.0f;
		}

		vx = dcm[0][2];
 8003220:	4b37      	ldr	r3, [pc, #220]	; (8003300 <update_ahrs+0x3e8>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	65bb      	str	r3, [r7, #88]	; 0x58
		vy = dcm[1][2];
 8003226:	4b36      	ldr	r3, [pc, #216]	; (8003300 <update_ahrs+0x3e8>)
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	657b      	str	r3, [r7, #84]	; 0x54
		vz = dcm[2][2];
 800322c:	4b34      	ldr	r3, [pc, #208]	; (8003300 <update_ahrs+0x3e8>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	653b      	str	r3, [r7, #80]	; 0x50

		ex = acc_y * vz - acc_z * vy;
 8003232:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8003236:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800323a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800323e:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8003242:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800324a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800324e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		ey = acc_z * vx - acc_x * vz;
 8003252:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003256:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800325a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800325e:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8003262:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800326a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		ez = acc_x * vy - acc_y * vx;
 8003272:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8003276:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800327a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800327e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8003282:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800328a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800328e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		if( Ki_imu  > 0.0f) {
 8003292:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003304 <update_ahrs+0x3ec>
 8003296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800329a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329e:	dd67      	ble.n	8003370 <update_ahrs+0x458>
			integralFBx +=  Ki_imu  * ex * dt;
 80032a0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003304 <update_ahrs+0x3ec>
 80032a4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80032a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80032b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032b4:	4b14      	ldr	r3, [pc, #80]	; (8003308 <update_ahrs+0x3f0>)
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <update_ahrs+0x3f0>)
 80032c0:	edc3 7a00 	vstr	s15, [r3]
			integralFBy +=  Ki_imu  * ey * dt;
 80032c4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003304 <update_ahrs+0x3ec>
 80032c8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80032cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80032d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <update_ahrs+0x3f4>)
 80032da:	edd3 7a00 	vldr	s15, [r3]
 80032de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <update_ahrs+0x3f4>)
 80032e4:	edc3 7a00 	vstr	s15, [r3]
			integralFBz +=  Ki_imu  * ez * dt;
 80032e8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003304 <update_ahrs+0x3ec>
 80032ec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80032f0:	e00e      	b.n	8003310 <update_ahrs+0x3f8>
 80032f2:	bf00      	nop
 80032f4:	20000008 	.word	0x20000008
 80032f8:	3c8efa35 	.word	0x3c8efa35
 80032fc:	20000014 	.word	0x20000014
 8003300:	20000210 	.word	0x20000210
 8003304:	00000000 	.word	0x00000000
 8003308:	20004634 	.word	0x20004634
 800330c:	20004610 	.word	0x20004610
 8003310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003314:	edd7 7a01 	vldr	s15, [r7, #4]
 8003318:	ee27 7a27 	vmul.f32	s14, s14, s15
 800331c:	4b11      	ldr	r3, [pc, #68]	; (8003364 <update_ahrs+0x44c>)
 800331e:	edd3 7a00 	vldr	s15, [r3]
 8003322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <update_ahrs+0x44c>)
 8003328:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;
 800332c:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <update_ahrs+0x450>)
 800332e:	edd3 7a00 	vldr	s15, [r3]
 8003332:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800333a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			gy += integralFBy;
 800333e:	4b0b      	ldr	r3, [pc, #44]	; (800336c <update_ahrs+0x454>)
 8003340:	edd3 7a00 	vldr	s15, [r3]
 8003344:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8003348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
			gz += integralFBz;
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <update_ahrs+0x44c>)
 8003352:	edd3 7a00 	vldr	s15, [r3]
 8003356:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800335a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800335e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
 8003362:	e011      	b.n	8003388 <update_ahrs+0x470>
 8003364:	20004630 	.word	0x20004630
 8003368:	20004634 	.word	0x20004634
 800336c:	20004610 	.word	0x20004610
		} else {
			integralFBx = 0.0f;
 8003370:	4bdd      	ldr	r3, [pc, #884]	; (80036e8 <update_ahrs+0x7d0>)
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8003378:	4bdc      	ldr	r3, [pc, #880]	; (80036ec <update_ahrs+0x7d4>)
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8003380:	4bdb      	ldr	r3, [pc, #876]	; (80036f0 <update_ahrs+0x7d8>)
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
		}

		gx += Kp_imu * ex;
 8003388:	4bda      	ldr	r3, [pc, #872]	; (80036f4 <update_ahrs+0x7dc>)
 800338a:	ed93 7a00 	vldr	s14, [r3]
 800338e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003396:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800339a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
		gy += Kp_imu * ey;
 80033a2:	4bd4      	ldr	r3, [pc, #848]	; (80036f4 <update_ahrs+0x7dc>)
 80033a4:	ed93 7a00 	vldr	s14, [r3]
 80033a8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80033ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b0:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80033b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b8:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		gz += Kp_imu * ez + emz * Kp_mag;
 80033bc:	4bcd      	ldr	r3, [pc, #820]	; (80036f4 <update_ahrs+0x7dc>)
 80033be:	ed93 7a00 	vldr	s14, [r3]
 80033c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80033c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033ca:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80033ce:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80033d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033da:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80033de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	}

	gx *= (0.5f * dt);
 80033e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80033ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033f2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80033f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fa:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	gy *= (0.5f * dt);
 80033fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003402:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800340a:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800340e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003412:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	gz *= (0.5f * dt);
 8003416:	edd7 7a01 	vldr	s15, [r7, #4]
 800341a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800341e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003422:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8003426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

	q0 += (-q1 * gx - q2 * gy - q3 * gz);
 800342e:	4bb2      	ldr	r3, [pc, #712]	; (80036f8 <update_ahrs+0x7e0>)
 8003430:	edd3 7a00 	vldr	s15, [r3]
 8003434:	eeb1 7a67 	vneg.f32	s14, s15
 8003438:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800343c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003440:	4bae      	ldr	r3, [pc, #696]	; (80036fc <update_ahrs+0x7e4>)
 8003442:	edd3 6a00 	vldr	s13, [r3]
 8003446:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800344a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800344e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003452:	4bab      	ldr	r3, [pc, #684]	; (8003700 <update_ahrs+0x7e8>)
 8003454:	edd3 6a00 	vldr	s13, [r3]
 8003458:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800345c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003460:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003464:	4ba7      	ldr	r3, [pc, #668]	; (8003704 <update_ahrs+0x7ec>)
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346e:	4ba5      	ldr	r3, [pc, #660]	; (8003704 <update_ahrs+0x7ec>)
 8003470:	edc3 7a00 	vstr	s15, [r3]
	q1 += ( q0 * gx + q2 * gz - q3 * gy);
 8003474:	4ba3      	ldr	r3, [pc, #652]	; (8003704 <update_ahrs+0x7ec>)
 8003476:	ed93 7a00 	vldr	s14, [r3]
 800347a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800347e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003482:	4b9e      	ldr	r3, [pc, #632]	; (80036fc <update_ahrs+0x7e4>)
 8003484:	edd3 6a00 	vldr	s13, [r3]
 8003488:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800348c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003494:	4b9a      	ldr	r3, [pc, #616]	; (8003700 <update_ahrs+0x7e8>)
 8003496:	edd3 6a00 	vldr	s13, [r3]
 800349a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800349e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034a6:	4b94      	ldr	r3, [pc, #592]	; (80036f8 <update_ahrs+0x7e0>)
 80034a8:	edd3 7a00 	vldr	s15, [r3]
 80034ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b0:	4b91      	ldr	r3, [pc, #580]	; (80036f8 <update_ahrs+0x7e0>)
 80034b2:	edc3 7a00 	vstr	s15, [r3]
	q2 += ( q0 * gy - q1 * gz + q3 * gx);
 80034b6:	4b93      	ldr	r3, [pc, #588]	; (8003704 <update_ahrs+0x7ec>)
 80034b8:	ed93 7a00 	vldr	s14, [r3]
 80034bc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80034c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034c4:	4b8c      	ldr	r3, [pc, #560]	; (80036f8 <update_ahrs+0x7e0>)
 80034c6:	edd3 6a00 	vldr	s13, [r3]
 80034ca:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80034ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034d6:	4b8a      	ldr	r3, [pc, #552]	; (8003700 <update_ahrs+0x7e8>)
 80034d8:	edd3 6a00 	vldr	s13, [r3]
 80034dc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80034e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034e8:	4b84      	ldr	r3, [pc, #528]	; (80036fc <update_ahrs+0x7e4>)
 80034ea:	edd3 7a00 	vldr	s15, [r3]
 80034ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f2:	4b82      	ldr	r3, [pc, #520]	; (80036fc <update_ahrs+0x7e4>)
 80034f4:	edc3 7a00 	vstr	s15, [r3]
	q3 += ( q0 * gz + q1 * gy - q2 * gx);
 80034f8:	4b82      	ldr	r3, [pc, #520]	; (8003704 <update_ahrs+0x7ec>)
 80034fa:	ed93 7a00 	vldr	s14, [r3]
 80034fe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003502:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003506:	4b7c      	ldr	r3, [pc, #496]	; (80036f8 <update_ahrs+0x7e0>)
 8003508:	edd3 6a00 	vldr	s13, [r3]
 800350c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003510:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003514:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003518:	4b78      	ldr	r3, [pc, #480]	; (80036fc <update_ahrs+0x7e4>)
 800351a:	edd3 6a00 	vldr	s13, [r3]
 800351e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003526:	ee37 7a67 	vsub.f32	s14, s14, s15
 800352a:	4b75      	ldr	r3, [pc, #468]	; (8003700 <update_ahrs+0x7e8>)
 800352c:	edd3 7a00 	vldr	s15, [r3]
 8003530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003534:	4b72      	ldr	r3, [pc, #456]	; (8003700 <update_ahrs+0x7e8>)
 8003536:	edc3 7a00 	vstr	s15, [r3]

	norm = invSqrt_(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800353a:	4b72      	ldr	r3, [pc, #456]	; (8003704 <update_ahrs+0x7ec>)
 800353c:	ed93 7a00 	vldr	s14, [r3]
 8003540:	4b70      	ldr	r3, [pc, #448]	; (8003704 <update_ahrs+0x7ec>)
 8003542:	edd3 7a00 	vldr	s15, [r3]
 8003546:	ee27 7a27 	vmul.f32	s14, s14, s15
 800354a:	4b6b      	ldr	r3, [pc, #428]	; (80036f8 <update_ahrs+0x7e0>)
 800354c:	edd3 6a00 	vldr	s13, [r3]
 8003550:	4b69      	ldr	r3, [pc, #420]	; (80036f8 <update_ahrs+0x7e0>)
 8003552:	edd3 7a00 	vldr	s15, [r3]
 8003556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800355a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800355e:	4b67      	ldr	r3, [pc, #412]	; (80036fc <update_ahrs+0x7e4>)
 8003560:	edd3 6a00 	vldr	s13, [r3]
 8003564:	4b65      	ldr	r3, [pc, #404]	; (80036fc <update_ahrs+0x7e4>)
 8003566:	edd3 7a00 	vldr	s15, [r3]
 800356a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800356e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003572:	4b63      	ldr	r3, [pc, #396]	; (8003700 <update_ahrs+0x7e8>)
 8003574:	edd3 6a00 	vldr	s13, [r3]
 8003578:	4b61      	ldr	r3, [pc, #388]	; (8003700 <update_ahrs+0x7e8>)
 800357a:	edd3 7a00 	vldr	s15, [r3]
 800357e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003586:	eeb0 0a67 	vmov.f32	s0, s15
 800358a:	f000 fbb1 	bl	8003cf0 <invSqrt_>
 800358e:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
	q0 *= norm;
 8003592:	4b5c      	ldr	r3, [pc, #368]	; (8003704 <update_ahrs+0x7ec>)
 8003594:	ed93 7a00 	vldr	s14, [r3]
 8003598:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800359c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a0:	4b58      	ldr	r3, [pc, #352]	; (8003704 <update_ahrs+0x7ec>)
 80035a2:	edc3 7a00 	vstr	s15, [r3]
	q1 *= norm;
 80035a6:	4b54      	ldr	r3, [pc, #336]	; (80036f8 <update_ahrs+0x7e0>)
 80035a8:	ed93 7a00 	vldr	s14, [r3]
 80035ac:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80035b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b4:	4b50      	ldr	r3, [pc, #320]	; (80036f8 <update_ahrs+0x7e0>)
 80035b6:	edc3 7a00 	vstr	s15, [r3]
	q2 *= norm;
 80035ba:	4b50      	ldr	r3, [pc, #320]	; (80036fc <update_ahrs+0x7e4>)
 80035bc:	ed93 7a00 	vldr	s14, [r3]
 80035c0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80035c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c8:	4b4c      	ldr	r3, [pc, #304]	; (80036fc <update_ahrs+0x7e4>)
 80035ca:	edc3 7a00 	vstr	s15, [r3]
	q3 *= norm;
 80035ce:	4b4c      	ldr	r3, [pc, #304]	; (8003700 <update_ahrs+0x7e8>)
 80035d0:	ed93 7a00 	vldr	s14, [r3]
 80035d4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80035d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035dc:	4b48      	ldr	r3, [pc, #288]	; (8003700 <update_ahrs+0x7e8>)
 80035de:	edc3 7a00 	vstr	s15, [r3]
	
	float q0q1 = q0*q1;
 80035e2:	4b48      	ldr	r3, [pc, #288]	; (8003704 <update_ahrs+0x7ec>)
 80035e4:	ed93 7a00 	vldr	s14, [r3]
 80035e8:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <update_ahrs+0x7e0>)
 80035ea:	edd3 7a00 	vldr	s15, [r3]
 80035ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float q0q2 = q0*q2;
 80035f6:	4b43      	ldr	r3, [pc, #268]	; (8003704 <update_ahrs+0x7ec>)
 80035f8:	ed93 7a00 	vldr	s14, [r3]
 80035fc:	4b3f      	ldr	r3, [pc, #252]	; (80036fc <update_ahrs+0x7e4>)
 80035fe:	edd3 7a00 	vldr	s15, [r3]
 8003602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003606:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float q0q3 = q0*q3;
 800360a:	4b3e      	ldr	r3, [pc, #248]	; (8003704 <update_ahrs+0x7ec>)
 800360c:	ed93 7a00 	vldr	s14, [r3]
 8003610:	4b3b      	ldr	r3, [pc, #236]	; (8003700 <update_ahrs+0x7e8>)
 8003612:	edd3 7a00 	vldr	s15, [r3]
 8003616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800361a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float q1q1 = q1*q1;
 800361e:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <update_ahrs+0x7e0>)
 8003620:	ed93 7a00 	vldr	s14, [r3]
 8003624:	4b34      	ldr	r3, [pc, #208]	; (80036f8 <update_ahrs+0x7e0>)
 8003626:	edd3 7a00 	vldr	s15, [r3]
 800362a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float q1q2 = q1*q2;
 8003632:	4b31      	ldr	r3, [pc, #196]	; (80036f8 <update_ahrs+0x7e0>)
 8003634:	ed93 7a00 	vldr	s14, [r3]
 8003638:	4b30      	ldr	r3, [pc, #192]	; (80036fc <update_ahrs+0x7e4>)
 800363a:	edd3 7a00 	vldr	s15, [r3]
 800363e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003642:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float q1q3 = q1*q3;
 8003646:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <update_ahrs+0x7e0>)
 8003648:	ed93 7a00 	vldr	s14, [r3]
 800364c:	4b2c      	ldr	r3, [pc, #176]	; (8003700 <update_ahrs+0x7e8>)
 800364e:	edd3 7a00 	vldr	s15, [r3]
 8003652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003656:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float q2q2 = q2*q2;
 800365a:	4b28      	ldr	r3, [pc, #160]	; (80036fc <update_ahrs+0x7e4>)
 800365c:	ed93 7a00 	vldr	s14, [r3]
 8003660:	4b26      	ldr	r3, [pc, #152]	; (80036fc <update_ahrs+0x7e4>)
 8003662:	edd3 7a00 	vldr	s15, [r3]
 8003666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800366a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float q2q3 = q2*q3;
 800366e:	4b23      	ldr	r3, [pc, #140]	; (80036fc <update_ahrs+0x7e4>)
 8003670:	ed93 7a00 	vldr	s14, [r3]
 8003674:	4b22      	ldr	r3, [pc, #136]	; (8003700 <update_ahrs+0x7e8>)
 8003676:	edd3 7a00 	vldr	s15, [r3]
 800367a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float q3q3 = q3*q3;
 8003682:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <update_ahrs+0x7e8>)
 8003684:	ed93 7a00 	vldr	s14, [r3]
 8003688:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <update_ahrs+0x7e8>)
 800368a:	edd3 7a00 	vldr	s15, [r3]
 800368e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003692:	edc7 7a08 	vstr	s15, [r7, #32]

	// Quaternion to Rotation matrix
	dcm[0][0] = 2.0f*(0.5f - q2q2  - q3q3);
 8003696:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800369a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800369e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80036a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80036ae:	4b16      	ldr	r3, [pc, #88]	; (8003708 <update_ahrs+0x7f0>)
 80036b0:	edc3 7a00 	vstr	s15, [r3]
	dcm[1][0] = 2.0f*(q1q2 - q0q3);
 80036b4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80036b8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80036bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80036c4:	4b10      	ldr	r3, [pc, #64]	; (8003708 <update_ahrs+0x7f0>)
 80036c6:	edc3 7a03 	vstr	s15, [r3, #12]
	dcm[2][0] = 2.0f*(q1q3 + q0q2);
 80036ca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80036ce:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80036d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <update_ahrs+0x7f0>)
 80036dc:	edc3 7a06 	vstr	s15, [r3, #24]
	dcm[0][1] = 2.0f*(q1q2 + q0q3);
 80036e0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80036e4:	e012      	b.n	800370c <update_ahrs+0x7f4>
 80036e6:	bf00      	nop
 80036e8:	20004634 	.word	0x20004634
 80036ec:	20004610 	.word	0x20004610
 80036f0:	20004630 	.word	0x20004630
 80036f4:	20000000 	.word	0x20000000
 80036f8:	20000204 	.word	0x20000204
 80036fc:	20000208 	.word	0x20000208
 8003700:	2000020c 	.word	0x2000020c
 8003704:	20000004 	.word	0x20000004
 8003708:	20000210 	.word	0x20000210
 800370c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003714:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003718:	4bde      	ldr	r3, [pc, #888]	; (8003a94 <update_ahrs+0xb7c>)
 800371a:	edc3 7a01 	vstr	s15, [r3, #4]
	dcm[1][1] = 2.0f*(0.5f - q1q1 - q3q3);
 800371e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003722:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003726:	ee37 7a67 	vsub.f32	s14, s14, s15
 800372a:	edd7 7a08 	vldr	s15, [r7, #32]
 800372e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003732:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003736:	4bd7      	ldr	r3, [pc, #860]	; (8003a94 <update_ahrs+0xb7c>)
 8003738:	edc3 7a04 	vstr	s15, [r3, #16]
	dcm[2][1] = 2.0f*(q2q3 - q0q1);
 800373c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003740:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003748:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800374c:	4bd1      	ldr	r3, [pc, #836]	; (8003a94 <update_ahrs+0xb7c>)
 800374e:	edc3 7a07 	vstr	s15, [r3, #28]
	dcm[0][2] = 2.0f*(q1q3 - q0q2);
 8003752:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003756:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800375a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800375e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003762:	4bcc      	ldr	r3, [pc, #816]	; (8003a94 <update_ahrs+0xb7c>)
 8003764:	edc3 7a02 	vstr	s15, [r3, #8]
	dcm[1][2] = 2.0f*(q2q3 + q0q1);
 8003768:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800376c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003774:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003778:	4bc6      	ldr	r3, [pc, #792]	; (8003a94 <update_ahrs+0xb7c>)
 800377a:	edc3 7a05 	vstr	s15, [r3, #20]
	dcm[2][2] = 2.0f*(0.5f - q1q1 - q2q2);
 800377e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003782:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003786:	ee37 7a67 	vsub.f32	s14, s14, s15
 800378a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800378e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003792:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003796:	4bbf      	ldr	r3, [pc, #764]	; (8003a94 <update_ahrs+0xb7c>)
 8003798:	edc3 7a08 	vstr	s15, [r3, #32]
	
    // Rotate acceleration from Body frame to earth frame
	int16_t acc_Eframex = dcm[0][0]*accx_ + dcm[1][0]*accy_ + dcm[2][0]*accz_;
 800379c:	4bbd      	ldr	r3, [pc, #756]	; (8003a94 <update_ahrs+0xb7c>)
 800379e:	ed93 7a00 	vldr	s14, [r3]
 80037a2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80037a6:	ee07 3a90 	vmov	s15, r3
 80037aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037b2:	4bb8      	ldr	r3, [pc, #736]	; (8003a94 <update_ahrs+0xb7c>)
 80037b4:	edd3 6a03 	vldr	s13, [r3, #12]
 80037b8:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 80037bc:	ee07 3a90 	vmov	s15, r3
 80037c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037cc:	4bb1      	ldr	r3, [pc, #708]	; (8003a94 <update_ahrs+0xb7c>)
 80037ce:	edd3 6a06 	vldr	s13, [r3, #24]
 80037d2:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037ea:	ee17 3a90 	vmov	r3, s15
 80037ee:	83fb      	strh	r3, [r7, #30]
	int16_t acc_Eframey = dcm[0][1]*accx_ + dcm[1][1]*accy_ + dcm[2][1]*accz_;
 80037f0:	4ba8      	ldr	r3, [pc, #672]	; (8003a94 <update_ahrs+0xb7c>)
 80037f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80037f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003802:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003806:	4ba3      	ldr	r3, [pc, #652]	; (8003a94 <update_ahrs+0xb7c>)
 8003808:	edd3 6a04 	vldr	s13, [r3, #16]
 800380c:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8003810:	ee07 3a90 	vmov	s15, r3
 8003814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800381c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003820:	4b9c      	ldr	r3, [pc, #624]	; (8003a94 <update_ahrs+0xb7c>)
 8003822:	edd3 6a07 	vldr	s13, [r3, #28]
 8003826:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800383a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800383e:	ee17 3a90 	vmov	r3, s15
 8003842:	83bb      	strh	r3, [r7, #28]
	int16_t acc_Eframez = dcm[0][2]*accx_ + dcm[1][2]*accy_ + dcm[2][2]*accz_;
 8003844:	4b93      	ldr	r3, [pc, #588]	; (8003a94 <update_ahrs+0xb7c>)
 8003846:	ed93 7a02 	vldr	s14, [r3, #8]
 800384a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003856:	ee27 7a27 	vmul.f32	s14, s14, s15
 800385a:	4b8e      	ldr	r3, [pc, #568]	; (8003a94 <update_ahrs+0xb7c>)
 800385c:	edd3 6a05 	vldr	s13, [r3, #20]
 8003860:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8003864:	ee07 3a90 	vmov	s15, r3
 8003868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800386c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003870:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003874:	4b87      	ldr	r3, [pc, #540]	; (8003a94 <update_ahrs+0xb7c>)
 8003876:	edd3 6a08 	vldr	s13, [r3, #32]
 800387a:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800388a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800388e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003892:	ee17 3a90 	vmov	r3, s15
 8003896:	837b      	strh	r3, [r7, #26]
	acc_Eframez -= 2000;
 8003898:	8b7b      	ldrh	r3, [r7, #26]
 800389a:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800389e:	b29b      	uxth	r3, r3
 80038a0:	837b      	strh	r3, [r7, #26]


	const float accTrueScale = 9.81f/2000.0f; // 2048
 80038a2:	4b7d      	ldr	r3, [pc, #500]	; (8003a98 <update_ahrs+0xb80>)
 80038a4:	617b      	str	r3, [r7, #20]
	acc_Eframe[X] = acc_Eframex*accTrueScale;
 80038a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80038b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ba:	4b78      	ldr	r3, [pc, #480]	; (8003a9c <update_ahrs+0xb84>)
 80038bc:	edc3 7a00 	vstr	s15, [r3]
	acc_Eframe[Y] = acc_Eframey*accTrueScale;
 80038c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80038d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d4:	4b71      	ldr	r3, [pc, #452]	; (8003a9c <update_ahrs+0xb84>)
 80038d6:	edc3 7a01 	vstr	s15, [r3, #4]
	acc_Eframe[Z] = acc_Eframez*accTrueScale;
 80038da:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80038ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ee:	4b6b      	ldr	r3, [pc, #428]	; (8003a9c <update_ahrs+0xb84>)
 80038f0:	edc3 7a02 	vstr	s15, [r3, #8]

	acc_Eframe[X] = fapplyDeadband(acc_Eframe[X],0.02);
 80038f4:	4b69      	ldr	r3, [pc, #420]	; (8003a9c <update_ahrs+0xb84>)
 80038f6:	edd3 7a00 	vldr	s15, [r3]
 80038fa:	eddf 0a69 	vldr	s1, [pc, #420]	; 8003aa0 <update_ahrs+0xb88>
 80038fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003902:	f000 f9c3 	bl	8003c8c <fapplyDeadband>
 8003906:	eef0 7a40 	vmov.f32	s15, s0
 800390a:	4b64      	ldr	r3, [pc, #400]	; (8003a9c <update_ahrs+0xb84>)
 800390c:	edc3 7a00 	vstr	s15, [r3]
	acc_Eframe[Y] = fapplyDeadband(acc_Eframe[Y],0.02);
 8003910:	4b62      	ldr	r3, [pc, #392]	; (8003a9c <update_ahrs+0xb84>)
 8003912:	edd3 7a01 	vldr	s15, [r3, #4]
 8003916:	eddf 0a62 	vldr	s1, [pc, #392]	; 8003aa0 <update_ahrs+0xb88>
 800391a:	eeb0 0a67 	vmov.f32	s0, s15
 800391e:	f000 f9b5 	bl	8003c8c <fapplyDeadband>
 8003922:	eef0 7a40 	vmov.f32	s15, s0
 8003926:	4b5d      	ldr	r3, [pc, #372]	; (8003a9c <update_ahrs+0xb84>)
 8003928:	edc3 7a01 	vstr	s15, [r3, #4]
	acc_Eframe[Z] = fapplyDeadband(acc_Eframe[Z],0.02);
 800392c:	4b5b      	ldr	r3, [pc, #364]	; (8003a9c <update_ahrs+0xb84>)
 800392e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003932:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8003aa0 <update_ahrs+0xb88>
 8003936:	eeb0 0a67 	vmov.f32	s0, s15
 800393a:	f000 f9a7 	bl	8003c8c <fapplyDeadband>
 800393e:	eef0 7a40 	vmov.f32	s15, s0
 8003942:	4b56      	ldr	r3, [pc, #344]	; (8003a9c <update_ahrs+0xb84>)
 8003944:	edc3 7a02 	vstr	s15, [r3, #8]

    if(millis() - init_us < 5000){
 8003948:	4b56      	ldr	r3, [pc, #344]	; (8003aa4 <update_ahrs+0xb8c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800394e:	4b56      	ldr	r3, [pc, #344]	; (8003aa8 <update_ahrs+0xb90>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4413      	add	r3, r2
 8003954:	4a55      	ldr	r2, [pc, #340]	; (8003aac <update_ahrs+0xb94>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	099a      	lsrs	r2, r3, #6
 800395c:	4b54      	ldr	r3, [pc, #336]	; (8003ab0 <update_ahrs+0xb98>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3287 	movw	r2, #4999	; 0x1387
 8003966:	4293      	cmp	r3, r2
 8003968:	d80b      	bhi.n	8003982 <update_ahrs+0xa6a>
    	acc_Eframe[X] = 0;
 800396a:	4b4c      	ldr	r3, [pc, #304]	; (8003a9c <update_ahrs+0xb84>)
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
    	acc_Eframe[Y] = 0;
 8003972:	4b4a      	ldr	r3, [pc, #296]	; (8003a9c <update_ahrs+0xb84>)
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	605a      	str	r2, [r3, #4]
    	acc_Eframe[Z] = 0;
 800397a:	4b48      	ldr	r3, [pc, #288]	; (8003a9c <update_ahrs+0xb84>)
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
    }

	AHRS.pitch = -atan2_approx(-dcm[0][2],sqrtf(1 - dcm[0][2]*dcm[0][2]))*DEG;// - pitch_trim_imu;
 8003982:	4b44      	ldr	r3, [pc, #272]	; (8003a94 <update_ahrs+0xb7c>)
 8003984:	edd3 7a02 	vldr	s15, [r3, #8]
 8003988:	eeb1 8a67 	vneg.f32	s16, s15
 800398c:	4b41      	ldr	r3, [pc, #260]	; (8003a94 <update_ahrs+0xb7c>)
 800398e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003992:	4b40      	ldr	r3, [pc, #256]	; (8003a94 <update_ahrs+0xb7c>)
 8003994:	edd3 7a02 	vldr	s15, [r3, #8]
 8003998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a4:	eeb0 0a67 	vmov.f32	s0, s15
 80039a8:	f011 fa36 	bl	8014e18 <sqrtf>
 80039ac:	eef0 7a40 	vmov.f32	s15, s0
 80039b0:	eef0 0a67 	vmov.f32	s1, s15
 80039b4:	eeb0 0a48 	vmov.f32	s0, s16
 80039b8:	f000 f89e 	bl	8003af8 <atan2_approx>
 80039bc:	eef0 7a40 	vmov.f32	s15, s0
 80039c0:	eef1 7a67 	vneg.f32	s15, s15
 80039c4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003ab4 <update_ahrs+0xb9c>
 80039c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039cc:	4b3a      	ldr	r3, [pc, #232]	; (8003ab8 <update_ahrs+0xba0>)
 80039ce:	edc3 7a01 	vstr	s15, [r3, #4]
	AHRS.roll = -atan2_approx(-dcm[1][2],dcm[2][2])*DEG;//  - roll_trim_imu;
 80039d2:	4b30      	ldr	r3, [pc, #192]	; (8003a94 <update_ahrs+0xb7c>)
 80039d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80039d8:	eef1 7a67 	vneg.f32	s15, s15
 80039dc:	4b2d      	ldr	r3, [pc, #180]	; (8003a94 <update_ahrs+0xb7c>)
 80039de:	ed93 7a08 	vldr	s14, [r3, #32]
 80039e2:	eef0 0a47 	vmov.f32	s1, s14
 80039e6:	eeb0 0a67 	vmov.f32	s0, s15
 80039ea:	f000 f885 	bl	8003af8 <atan2_approx>
 80039ee:	eef0 7a40 	vmov.f32	s15, s0
 80039f2:	eef1 7a67 	vneg.f32	s15, s15
 80039f6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003ab4 <update_ahrs+0xb9c>
 80039fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039fe:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <update_ahrs+0xba0>)
 8003a00:	edc3 7a00 	vstr	s15, [r3]
	float yaw_ = -atan2_approx(dcm[0][1],dcm[0][0])*DEG;
 8003a04:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <update_ahrs+0xb7c>)
 8003a06:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a0a:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <update_ahrs+0xb7c>)
 8003a0c:	ed93 7a00 	vldr	s14, [r3]
 8003a10:	eef0 0a47 	vmov.f32	s1, s14
 8003a14:	eeb0 0a67 	vmov.f32	s0, s15
 8003a18:	f000 f86e 	bl	8003af8 <atan2_approx>
 8003a1c:	eef0 7a40 	vmov.f32	s15, s0
 8003a20:	eef1 7a67 	vneg.f32	s15, s15
 8003a24:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003ab4 <update_ahrs+0xb9c>
 8003a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a2c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	if(yaw_ < 0){
 8003a30:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003a34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3c:	d507      	bpl.n	8003a4e <update_ahrs+0xb36>
		 yaw_ = 360 + yaw_;
 8003a3e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003a42:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003abc <update_ahrs+0xba4>
 8003a46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a4a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	AHRS.yaw =  yaw_;
 8003a4e:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <update_ahrs+0xba0>)
 8003a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a54:	6093      	str	r3, [r2, #8]
	AHRS.roll_rate  = gx_/config.gyr_lsb;
 8003a56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a62:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <update_ahrs+0xba8>)
 8003a64:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a6c:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <update_ahrs+0xba0>)
 8003a6e:	edc3 7a03 	vstr	s15, [r3, #12]
	AHRS.pitch_rate = -gy_/config.gyr_lsb;
 8003a72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a76:	425b      	negs	r3, r3
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a80:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <update_ahrs+0xba8>)
 8003a82:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <update_ahrs+0xba0>)
 8003a8c:	edc3 7a04 	vstr	s15, [r3, #16]
 8003a90:	e018      	b.n	8003ac4 <update_ahrs+0xbac>
 8003a92:	bf00      	nop
 8003a94:	20000210 	.word	0x20000210
 8003a98:	3ba0ba20 	.word	0x3ba0ba20
 8003a9c:	20004640 	.word	0x20004640
 8003aa0:	3ca3d70a 	.word	0x3ca3d70a
 8003aa4:	200048c8 	.word	0x200048c8
 8003aa8:	20004658 	.word	0x20004658
 8003aac:	10624dd3 	.word	0x10624dd3
 8003ab0:	2000462c 	.word	0x2000462c
 8003ab4:	42652ee0 	.word	0x42652ee0
 8003ab8:	20004614 	.word	0x20004614
 8003abc:	43b40000 	.word	0x43b40000
 8003ac0:	20000008 	.word	0x20000008
	AHRS.yaw_rate   = -gz_/config.gyr_lsb;
 8003ac4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ac8:	425b      	negs	r3, r3
 8003aca:	ee07 3a90 	vmov	s15, r3
 8003ace:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ad2:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <update_ahrs+0xbd8>)
 8003ad4:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <update_ahrs+0xbdc>)
 8003ade:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8003ae2:	bf00      	nop
 8003ae4:	37ac      	adds	r7, #172	; 0xac
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	ecbd 8b02 	vpop	{d8}
 8003aec:	bd90      	pop	{r4, r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000008 	.word	0x20000008
 8003af4:	20004614 	.word	0x20004614

08003af8 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b08b      	sub	sp, #44	; 0x2c
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	ed87 0a01 	vstr	s0, [r7, #4]
 8003b02:	edc7 0a00 	vstr	s1, [r7]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 8003b06:	edd7 7a00 	vldr	s15, [r7]
 8003b0a:	eef0 7ae7 	vabs.f32	s15, s15
 8003b0e:	edc7 7a08 	vstr	s15, [r7, #32]
    absY = fabsf(y);
 8003b12:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b16:	eef0 7ae7 	vabs.f32	s15, s15
 8003b1a:	edc7 7a07 	vstr	s15, [r7, #28]
    res  = MAX(absX, absY);
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b36:	dd01      	ble.n	8003b3c <atan2_approx+0x44>
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	e000      	b.n	8003b3e <atan2_approx+0x46>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
    if (res) res = MIN(absX, absY) / res;
 8003b40:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4c:	d018      	beq.n	8003b80 <atan2_approx+0x88>
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b66:	d502      	bpl.n	8003b6e <atan2_approx+0x76>
 8003b68:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b6c:	e001      	b.n	8003b72 <atan2_approx+0x7a>
 8003b6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b72:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003b76:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b7a:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8003b7e:	e002      	b.n	8003b86 <atan2_approx+0x8e>
    else res = 0.0f;
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 8003b86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b8a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003c68 <atan2_approx+0x170>
 8003b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b92:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003c6c <atan2_approx+0x174>
 8003b96:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003b9a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003c70 <atan2_approx+0x178>
 8003ba6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003baa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003c74 <atan2_approx+0x17c>
 8003bb6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003bba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003c78 <atan2_approx+0x180>
 8003bc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bca:	eef1 6a67 	vneg.f32	s13, s15
 8003bce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003bd2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003c7c <atan2_approx+0x184>
 8003bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bda:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003c80 <atan2_approx+0x188>
 8003bde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003be2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bf6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8003bfa:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0a:	dd07      	ble.n	8003c1c <atan2_approx+0x124>
 8003c0c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003c84 <atan2_approx+0x18c>
 8003c10:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c18:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (x < 0) res = M_PIf - res;
 8003c1c:	edd7 7a00 	vldr	s15, [r7]
 8003c20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c28:	d507      	bpl.n	8003c3a <atan2_approx+0x142>
 8003c2a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003c88 <atan2_approx+0x190>
 8003c2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c36:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (y < 0) res = -res;
 8003c3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c46:	d505      	bpl.n	8003c54 <atan2_approx+0x15c>
 8003c48:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c4c:	eef1 7a67 	vneg.f32	s15, s15
 8003c50:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return res;
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	ee07 3a90 	vmov	s15, r3
}
 8003c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c5e:	372c      	adds	r7, #44	; 0x2c
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	3d4e0939 	.word	0x3d4e0939
 8003c6c:	3e9eb5e3 	.word	0x3e9eb5e3
 8003c70:	3e16fa88 	.word	0x3e16fa88
 8003c74:	3f7ffe45 	.word	0x3f7ffe45
 8003c78:	34a8dfa7 	.word	0x34a8dfa7
 8003c7c:	3f24fb99 	.word	0x3f24fb99
 8003c80:	3e16a269 	.word	0x3e16a269
 8003c84:	3fc90fdb 	.word	0x3fc90fdb
 8003c88:	40490fdb 	.word	0x40490fdb

08003c8c <fapplyDeadband>:

    return value >= 0 ? value - deadband : value + deadband;
}

float fapplyDeadband(const float value, const float deadband)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	ed87 0a01 	vstr	s0, [r7, #4]
 8003c96:	edc7 0a00 	vstr	s1, [r7]
    if (fabsf(value) < deadband) {
 8003c9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c9e:	eef0 7ae7 	vabs.f32	s15, s15
 8003ca2:	ed97 7a00 	vldr	s14, [r7]
 8003ca6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cae:	dd02      	ble.n	8003cb6 <fapplyDeadband+0x2a>
        return 0;
 8003cb0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003cec <fapplyDeadband+0x60>
 8003cb4:	e013      	b.n	8003cde <fapplyDeadband+0x52>
    }

    return value >= 0 ? value - deadband : value + deadband;
 8003cb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc2:	db06      	blt.n	8003cd2 <fapplyDeadband+0x46>
 8003cc4:	ed97 7a01 	vldr	s14, [r7, #4]
 8003cc8:	edd7 7a00 	vldr	s15, [r7]
 8003ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cd0:	e005      	b.n	8003cde <fapplyDeadband+0x52>
 8003cd2:	ed97 7a01 	vldr	s14, [r7, #4]
 8003cd6:	edd7 7a00 	vldr	s15, [r7]
 8003cda:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003cde:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	00000000 	.word	0x00000000

08003cf0 <invSqrt_>:
    return (num << 12) / den;
}


float invSqrt_(float x)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8003cfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cfe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d06:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8003d0e:	f107 0310 	add.w	r3, r7, #16
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	105a      	asrs	r2, r3, #1
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <invSqrt_+0x74>)
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8003d20:	f107 030c 	add.w	r3, r7, #12
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003d28:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d34:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003d40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d44:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4c:	edc7 7a04 	vstr	s15, [r7, #16]
	//y = y * (1.5f - (halfx * y * y));
	return y;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	ee07 3a90 	vmov	s15, r3
}
 8003d56:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	5f3759df 	.word	0x5f3759df

08003d68 <constrainf>:
    else
        return amt;
}

static inline float constrainf(float amt, float low, float high)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003d72:	edc7 0a02 	vstr	s1, [r7, #8]
 8003d76:	ed87 1a01 	vstr	s2, [r7, #4]
    if (amt < low)
 8003d7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8a:	d501      	bpl.n	8003d90 <constrainf+0x28>
        return low;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	e00b      	b.n	8003da8 <constrainf+0x40>
    else if (amt > high)
 8003d90:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d94:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da0:	dd01      	ble.n	8003da6 <constrainf+0x3e>
        return high;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	e000      	b.n	8003da8 <constrainf+0x40>
    else
        return amt;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	ee07 3a90 	vmov	s15, r3
}
 8003dac:	eeb0 0a67 	vmov.f32	s0, s15
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
	...

08003dbc <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003dc6:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 8003dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dce:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003e08 <pt1FilterGain+0x4c>
 8003dd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dde:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT/ (RC + dT);
 8003de2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003de6:	edd7 7a00 	vldr	s15, [r7]
 8003dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dee:	ed97 7a00 	vldr	s14, [r7]
 8003df2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003df6:	eef0 7a66 	vmov.f32	s15, s13
}
 8003dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	40c90fdb 	.word	0x40c90fdb

08003e0c <pid_init>:
#include "filter.h"
#include "maths.h"
#include "timer.h"
#include "string.h"

void pid_init(pid_  *pid_in,float kp, float ki, float kd,float f_cut_err, float f_cut_D, float maxI){
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	61f8      	str	r0, [r7, #28]
 8003e14:	ed87 0a06 	vstr	s0, [r7, #24]
 8003e18:	edc7 0a05 	vstr	s1, [r7, #20]
 8003e1c:	ed87 1a04 	vstr	s2, [r7, #16]
 8003e20:	edc7 1a03 	vstr	s3, [r7, #12]
 8003e24:	ed87 2a02 	vstr	s4, [r7, #8]
 8003e28:	edc7 2a01 	vstr	s5, [r7, #4]
  memset(pid_in,0,sizeof(pid_));
 8003e2c:	222c      	movs	r2, #44	; 0x2c
 8003e2e:	2100      	movs	r1, #0
 8003e30:	69f8      	ldr	r0, [r7, #28]
 8003e32:	f010 fddd 	bl	80149f0 <memset>
  pid_in->err = 0.0f;
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
  pid_in->err_fcut = f_cut_err;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	605a      	str	r2, [r3, #4]
  pid_in->kp = kp;
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	609a      	str	r2, [r3, #8]
  pid_in->ki = ki;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	60da      	str	r2, [r3, #12]
  pid_in->kd = kd;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	611a      	str	r2, [r3, #16]
  pid_in->f_cut_D = f_cut_D;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	625a      	str	r2, [r3, #36]	; 0x24
  pid_in->I_range = maxI;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	621a      	str	r2, [r3, #32]
  pid_in->last_input = 0;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	619a      	str	r2, [r3, #24]
  pid_in->D_filted = 0;
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	61da      	str	r2, [r3, #28]
  pid_in->init = 1;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8003e7a:	bf00      	nop
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <pid_calculate>:

float pid_calculate(pid_ *pid_in,float measurement, float setpoint,float scaler,float dt){
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b08a      	sub	sp, #40	; 0x28
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6178      	str	r0, [r7, #20]
 8003e8a:	ed87 0a04 	vstr	s0, [r7, #16]
 8003e8e:	edc7 0a03 	vstr	s1, [r7, #12]
 8003e92:	ed87 1a02 	vstr	s2, [r7, #8]
 8003e96:	edc7 1a01 	vstr	s3, [r7, #4]
   if(pid_in->init){
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <pid_calculate+0x36>
       pid_in->last_input = measurement;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	619a      	str	r2, [r3, #24]
       pid_in->init = 0;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
       return 0.0f;
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	e0b5      	b.n	8004024 <pid_calculate+0x1a2>
   }
   // Caculate P term
   float error = setpoint - measurement;
 8003eb8:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ebc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ec4:	edc7 7a08 	vstr	s15, [r7, #32]
   pid_in->err += pt1FilterGain(pid_in->err_fcut,dt)*(error - pid_in->err);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ece:	edd7 0a01 	vldr	s1, [r7, #4]
 8003ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed6:	f7ff ff71 	bl	8003dbc <pt1FilterGain>
 8003eda:	eef0 6a40 	vmov.f32	s13, s0
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	edd3 7a00 	vldr	s15, [r3]
 8003ee4:	ed97 7a08 	vldr	s14, [r7, #32]
 8003ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eec:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	edd3 7a00 	vldr	s15, [r3]
 8003ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	edc3 7a00 	vstr	s15, [r3]
   float output = pid_in->err*pid_in->kp*scaler;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	ed93 7a00 	vldr	s14, [r3]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f10:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f18:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // Caculate I term
   if(pid_in->ki > 0){
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2a:	dd34      	ble.n	8003f96 <pid_calculate+0x114>
      pid_in->i_term += pid_in->err *pid_in->ki *dt;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	edd3 6a00 	vldr	s13, [r3]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f42:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	edc3 7a05 	vstr	s15, [r3, #20]
      pid_in->i_term = constrainf(pid_in->i_term,-pid_in->I_range,pid_in->I_range);
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	ed93 7a05 	vldr	s14, [r3, #20]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003f60:	eef1 7a67 	vneg.f32	s15, s15
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	edd3 6a08 	vldr	s13, [r3, #32]
 8003f6a:	eeb0 1a66 	vmov.f32	s2, s13
 8003f6e:	eef0 0a67 	vmov.f32	s1, s15
 8003f72:	eeb0 0a47 	vmov.f32	s0, s14
 8003f76:	f7ff fef7 	bl	8003d68 <constrainf>
 8003f7a:	eef0 7a40 	vmov.f32	s15, s0
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	edc3 7a05 	vstr	s15, [r3, #20]
      output += pid_in->i_term;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	edd3 7a05 	vldr	s15, [r3, #20]
 8003f8a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f92:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
   }
   // Caculate D term
   if(pid_in->kd > 0){
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	edd3 7a04 	vldr	s15, [r3, #16]
 8003f9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa4:	dd3d      	ble.n	8004022 <pid_calculate+0x1a0>
        float delta =  (measurement - pid_in->last_input)*pid_in->kd/dt;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	edd3 7a06 	vldr	s15, [r3, #24]
 8003fac:	ed97 7a04 	vldr	s14, [r7, #16]
 8003fb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	edd3 7a04 	vldr	s15, [r3, #16]
 8003fba:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003fbe:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        pid_in->last_input = measurement;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	619a      	str	r2, [r3, #24]
        // low pass filter
        pid_in->D_filted += pt1FilterGain(pid_in->f_cut_D,dt)*(delta - pid_in->D_filted);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003fd6:	edd7 0a01 	vldr	s1, [r7, #4]
 8003fda:	eeb0 0a67 	vmov.f32	s0, s15
 8003fde:	f7ff feed 	bl	8003dbc <pt1FilterGain>
 8003fe2:	eef0 6a40 	vmov.f32	s13, s0
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	edd3 7a07 	vldr	s15, [r3, #28]
 8003fec:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ff4:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	edd3 7a07 	vldr	s15, [r3, #28]
 8003ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	edc3 7a07 	vstr	s15, [r3, #28]
        output -= pid_in->D_filted*scaler;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	ed93 7a07 	vldr	s14, [r3, #28]
 800400e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004016:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800401a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800401e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
   }
   return output;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	ee07 3a90 	vmov	s15, r3
}
 8004028:	eeb0 0a67 	vmov.f32	s0, s15
 800402c:	3728      	adds	r7, #40	; 0x28
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <initPWM>:
uint8_t pwm_lock_status;

/*
 * init pwm 
 */
void initPWM(TIM_HandleTypeDef *htim){
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	htimm = htim;
 800403c:	4a1c      	ldr	r2, [pc, #112]	; (80040b0 <initPWM+0x7c>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6013      	str	r3, [r2, #0]
	pr_status = 1;
 8004042:	4b1c      	ldr	r3, [pc, #112]	; (80040b4 <initPWM+0x80>)
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
	pwm_lock_status = 0;
 8004048:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <initPWM+0x84>)
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
	pwm_last_update_ms= 0;
 800404e:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <initPWM+0x88>)
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch1);
 8004054:	2100      	movs	r1, #0
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f007 f994 	bl	800b384 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch2);
 800405c:	2104      	movs	r1, #4
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f007 f990 	bl	800b384 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch3);
 8004064:	2108      	movs	r1, #8
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f007 f98c 	bl	800b384 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim,ch4);
	__HAL_TIM_SetAutoreload(htimm,PWM_RELOAD_AFFTER);
 800406c:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <initPWM+0x7c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f242 7210 	movw	r2, #10000	; 0x2710
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c
 8004078:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <initPWM+0x7c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f242 7210 	movw	r2, #10000	; 0x2710
 8004080:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SetCompare (htimm,ch1,1000);
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <initPWM+0x7c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800408c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare (htimm,ch2,1500);
 800408e:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <initPWM+0x7c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004098:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare (htimm,ch3,1500);
 800409a:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <initPWM+0x7c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80040a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20004650 	.word	0x20004650
 80040b4:	20000244 	.word	0x20000244
 80040b8:	2000464c 	.word	0x2000464c
 80040bc:	20000240 	.word	0x20000240

080040c0 <timer_start>:
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}

void timer_start(){
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
	//htimmz = htimz;
	HAL_TIM_Base_Start_IT(&htim4);
 80040c4:	4802      	ldr	r0, [pc, #8]	; (80040d0 <timer_start+0x10>)
 80040c6:	f007 f893 	bl	800b1f0 <HAL_TIM_Base_Start_IT>
}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	200048c8 	.word	0x200048c8

080040d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	607b      	str	r3, [r7, #4]
 80040de:	4b1f      	ldr	r3, [pc, #124]	; (800415c <MX_DMA_Init+0x88>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	4a1e      	ldr	r2, [pc, #120]	; (800415c <MX_DMA_Init+0x88>)
 80040e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040e8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ea:	4b1c      	ldr	r3, [pc, #112]	; (800415c <MX_DMA_Init+0x88>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	603b      	str	r3, [r7, #0]
 80040fa:	4b18      	ldr	r3, [pc, #96]	; (800415c <MX_DMA_Init+0x88>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	4a17      	ldr	r2, [pc, #92]	; (800415c <MX_DMA_Init+0x88>)
 8004100:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004104:	6313      	str	r3, [r2, #48]	; 0x30
 8004106:	4b15      	ldr	r3, [pc, #84]	; (800415c <MX_DMA_Init+0x88>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8004112:	2200      	movs	r2, #0
 8004114:	2105      	movs	r1, #5
 8004116:	200c      	movs	r0, #12
 8004118:	f002 fef2 	bl	8006f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800411c:	200c      	movs	r0, #12
 800411e:	f002 ff0b 	bl	8006f38 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 11, 0);
 8004122:	2200      	movs	r2, #0
 8004124:	210b      	movs	r1, #11
 8004126:	203b      	movs	r0, #59	; 0x3b
 8004128:	f002 feea 	bl	8006f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800412c:	203b      	movs	r0, #59	; 0x3b
 800412e:	f002 ff03 	bl	8006f38 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 11, 0);
 8004132:	2200      	movs	r2, #0
 8004134:	210b      	movs	r1, #11
 8004136:	2045      	movs	r0, #69	; 0x45
 8004138:	f002 fee2 	bl	8006f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800413c:	2045      	movs	r0, #69	; 0x45
 800413e:	f002 fefb 	bl	8006f38 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8004142:	2200      	movs	r2, #0
 8004144:	2105      	movs	r1, #5
 8004146:	2046      	movs	r0, #70	; 0x46
 8004148:	f002 feda 	bl	8006f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800414c:	2046      	movs	r0, #70	; 0x46
 800414e:	f002 fef3 	bl	8006f38 <HAL_NVIC_EnableIRQ>

}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800

08004160 <HAL_UART_RxCpltCallback>:
#include "../flight/plane.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
    if(huart == &huart2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a08      	ldr	r2, [pc, #32]	; (800418c <HAL_UART_RxCpltCallback+0x2c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d102      	bne.n	8004176 <HAL_UART_RxCpltCallback+0x16>
	{
		ibus_calback();
 8004170:	f7fd fb20 	bl	80017b4 <ibus_calback>
    }
   else if(huart == &huart3){
      gps_DMA_callback();
   // 	gps_callback();
   }
}
 8004174:	e005      	b.n	8004182 <HAL_UART_RxCpltCallback+0x22>
   else if(huart == &huart3){
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a05      	ldr	r2, [pc, #20]	; (8004190 <HAL_UART_RxCpltCallback+0x30>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d101      	bne.n	8004182 <HAL_UART_RxCpltCallback+0x22>
      gps_DMA_callback();
 800417e:	f7fe fc1d 	bl	80029bc <gps_DMA_callback>
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20004aa0 	.word	0x20004aa0
 8004190:	200049b8 	.word	0x200049b8

08004194 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
    if(huart == &huart1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <HAL_UART_TxCpltCallback+0x1c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d101      	bne.n	80041a8 <HAL_UART_TxCpltCallback+0x14>
	{
		mavlink_tx_cpl_callback();
 80041a4:	f002 fd82 	bl	8006cac <mavlink_tx_cpl_callback>
    }
}
 80041a8:	bf00      	nop
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20004a5c 	.word	0x20004a5c

080041b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80041b4:	b5b0      	push	{r4, r5, r7, lr}
 80041b6:	b094      	sub	sp, #80	; 0x50
 80041b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	timer_start(&htim4);
 80041ba:	4824      	ldr	r0, [pc, #144]	; (800424c <MX_FREERTOS_Init+0x98>)
 80041bc:	f7ff ff80 	bl	80040c0 <timer_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, blackbox_task, osPriorityLow, 0, 1024);
 80041c0:	4b23      	ldr	r3, [pc, #140]	; (8004250 <MX_FREERTOS_Init+0x9c>)
 80041c2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80041c6:	461d      	mov	r5, r3
 80041c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	6023      	str	r3, [r4, #0]
  task1Handle = osThreadCreate(osThread(task1), NULL);
 80041d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f00d fce9 	bl	8011bae <osThreadCreate>
 80041dc:	4603      	mov	r3, r0
 80041de:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <MX_FREERTOS_Init+0xa0>)
 80041e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, ahrs_task, osPriorityHigh, 0, 1024);
 80041e2:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <MX_FREERTOS_Init+0xa4>)
 80041e4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80041e8:	461d      	mov	r5, r3
 80041ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041ee:	682b      	ldr	r3, [r5, #0]
 80041f0:	6023      	str	r3, [r4, #0]
  task2Handle = osThreadCreate(osThread(task2), NULL);
 80041f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041f6:	2100      	movs	r1, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	f00d fcd8 	bl	8011bae <osThreadCreate>
 80041fe:	4603      	mov	r3, r0
 8004200:	4a16      	ldr	r2, [pc, #88]	; (800425c <MX_FREERTOS_Init+0xa8>)
 8004202:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, sensor_task, osPriorityRealtime, 0, 512);
 8004204:	4b16      	ldr	r3, [pc, #88]	; (8004260 <MX_FREERTOS_Init+0xac>)
 8004206:	f107 0414 	add.w	r4, r7, #20
 800420a:	461d      	mov	r5, r3
 800420c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800420e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	6023      	str	r3, [r4, #0]
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8004214:	f107 0314 	add.w	r3, r7, #20
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f00d fcc7 	bl	8011bae <osThreadCreate>
 8004220:	4603      	mov	r3, r0
 8004222:	4a10      	ldr	r2, [pc, #64]	; (8004264 <MX_FREERTOS_Init+0xb0>)
 8004224:	6013      	str	r3, [r2, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, osd_task, osPriorityLow, 0, 512);
 8004226:	4b10      	ldr	r3, [pc, #64]	; (8004268 <MX_FREERTOS_Init+0xb4>)
 8004228:	463c      	mov	r4, r7
 800422a:	461d      	mov	r5, r3
 800422c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800422e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	6023      	str	r3, [r4, #0]
  task4Handle = osThreadCreate(osThread(task4), NULL);
 8004234:	463b      	mov	r3, r7
 8004236:	2100      	movs	r1, #0
 8004238:	4618      	mov	r0, r3
 800423a:	f00d fcb8 	bl	8011bae <osThreadCreate>
 800423e:	4603      	mov	r3, r0
 8004240:	4a0a      	ldr	r2, [pc, #40]	; (800426c <MX_FREERTOS_Init+0xb8>)
 8004242:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8004244:	bf00      	nop
 8004246:	3750      	adds	r7, #80	; 0x50
 8004248:	46bd      	mov	sp, r7
 800424a:	bdb0      	pop	{r4, r5, r7, pc}
 800424c:	200048c8 	.word	0x200048c8
 8004250:	0801577c 	.word	0x0801577c
 8004254:	20004668 	.word	0x20004668
 8004258:	08015790 	.word	0x08015790
 800425c:	20004690 	.word	0x20004690
 8004260:	080157a4 	.word	0x080157a4
 8004264:	20004688 	.word	0x20004688
 8004268:	080157b8 	.word	0x080157b8
 800426c:	20004680 	.word	0x20004680

08004270 <blackbox_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_blackbox_task */
void blackbox_task(void const * argument)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blackbox_task */
  /* Infinite loop */
	//vTaskSuspend(NULL);
		black_box_init();
 8004278:	f7fd fe5c 	bl	8001f34 <black_box_init>
		black_box_reset = TRUE;
 800427c:	4bba      	ldr	r3, [pc, #744]	; (8004568 <blackbox_task+0x2f8>)
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
		TickType_t xLastWakeTime;
		const TickType_t xFrequency = 100;  // 
 8004282:	2364      	movs	r3, #100	; 0x64
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
		xLastWakeTime = xTaskGetTickCount();
 8004286:	f00f f9dd 	bl	8013644 <xTaskGetTickCount>
 800428a:	4603      	mov	r3, r0
 800428c:	60bb      	str	r3, [r7, #8]
	  /* Infinite loop */
	  for(;;)
	  {
			static uint32_t start_time_ms;
			if(black_box_reset){
 800428e:	4bb6      	ldr	r3, [pc, #728]	; (8004568 <blackbox_task+0x2f8>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d011      	beq.n	80042ba <blackbox_task+0x4a>
				black_box_pack_str("----------------------------new data----------------------------------------------------------------\n");
 8004296:	48b5      	ldr	r0, [pc, #724]	; (800456c <blackbox_task+0x2fc>)
 8004298:	f7fd ff14 	bl	80020c4 <black_box_pack_str>
				black_box_reset = FALSE;
 800429c:	4bb2      	ldr	r3, [pc, #712]	; (8004568 <blackbox_task+0x2f8>)
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
				start_time_ms = millis();
 80042a2:	4bb3      	ldr	r3, [pc, #716]	; (8004570 <blackbox_task+0x300>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042a8:	4bb2      	ldr	r3, [pc, #712]	; (8004574 <blackbox_task+0x304>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4413      	add	r3, r2
 80042ae:	4ab2      	ldr	r2, [pc, #712]	; (8004578 <blackbox_task+0x308>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	099b      	lsrs	r3, r3, #6
 80042b6:	4ab1      	ldr	r2, [pc, #708]	; (800457c <blackbox_task+0x30c>)
 80042b8:	6013      	str	r3, [r2, #0]
			}
			uint32_t time_ms =  millis() - start_time_ms;
 80042ba:	4bad      	ldr	r3, [pc, #692]	; (8004570 <blackbox_task+0x300>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c0:	4bac      	ldr	r3, [pc, #688]	; (8004574 <blackbox_task+0x304>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4413      	add	r3, r2
 80042c6:	4aac      	ldr	r2, [pc, #688]	; (8004578 <blackbox_task+0x308>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	099a      	lsrs	r2, r3, #6
 80042ce:	4bab      	ldr	r3, [pc, #684]	; (800457c <blackbox_task+0x30c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	623b      	str	r3, [r7, #32]
			// control thortle 0 -> 100%
			int throtle = ((int)ibusChannelData[CH3] - 1000)*0.1;
 80042d6:	4baa      	ldr	r3, [pc, #680]	; (8004580 <blackbox_task+0x310>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fc f8c8 	bl	8000474 <__aeabi_i2d>
 80042e4:	a39e      	add	r3, pc, #632	; (adr r3, 8004560 <blackbox_task+0x2f0>)
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	f7fc f92d 	bl	8000548 <__aeabi_dmul>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4610      	mov	r0, r2
 80042f4:	4619      	mov	r1, r3
 80042f6:	f7fc fbd7 	bl	8000aa8 <__aeabi_d2iz>
 80042fa:	4603      	mov	r3, r0
 80042fc:	61fb      	str	r3, [r7, #28]

			// tx signal 0 -> 100 %
			int srri = ((int)ibusChannelData[CH11] - 1000)*0.1;
 80042fe:	4ba0      	ldr	r3, [pc, #640]	; (8004580 <blackbox_task+0x310>)
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8004306:	4618      	mov	r0, r3
 8004308:	f7fc f8b4 	bl	8000474 <__aeabi_i2d>
 800430c:	a394      	add	r3, pc, #592	; (adr r3, 8004560 <blackbox_task+0x2f0>)
 800430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004312:	f7fc f919 	bl	8000548 <__aeabi_dmul>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4610      	mov	r0, r2
 800431c:	4619      	mov	r1, r3
 800431e:	f7fc fbc3 	bl	8000aa8 <__aeabi_d2iz>
 8004322:	4603      	mov	r3, r0
 8004324:	61bb      	str	r3, [r7, #24]

			/*** write time  ***/
			black_box_pack_int(time_ms);
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	4618      	mov	r0, r3
 800432a:	f7fd fe31 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 800432e:	2020      	movs	r0, #32
 8004330:	f7fd ff02 	bl	8002138 <black_box_pack_char>

			/*---- control parameters ---*/
			black_box_pack_int((int)servoL);
 8004334:	4b93      	ldr	r3, [pc, #588]	; (8004584 <blackbox_task+0x314>)
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f7fd fe29 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 800433e:	2020      	movs	r0, #32
 8004340:	f7fd fefa 	bl	8002138 <black_box_pack_char>
			black_box_pack_int((int)servoR);
 8004344:	4b90      	ldr	r3, [pc, #576]	; (8004588 <blackbox_task+0x318>)
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7fd fe21 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 800434e:	2020      	movs	r0, #32
 8004350:	f7fd fef2 	bl	8002138 <black_box_pack_char>
			black_box_pack_int(throtle);
 8004354:	69f8      	ldr	r0, [r7, #28]
 8004356:	f7fd fe1b 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 800435a:	2020      	movs	r0, #32
 800435c:	f7fd feec 	bl	8002138 <black_box_pack_char>
			black_box_pack_int(srri);
 8004360:	69b8      	ldr	r0, [r7, #24]
 8004362:	f7fd fe15 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 8004366:	2020      	movs	r0, #32
 8004368:	f7fd fee6 	bl	8002138 <black_box_pack_char>

			/*----- atitude ---------------------*/
			black_box_pack_int((int)(AHRS.roll*100));
 800436c:	4b87      	ldr	r3, [pc, #540]	; (800458c <blackbox_task+0x31c>)
 800436e:	edd3 7a00 	vldr	s15, [r3]
 8004372:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8004590 <blackbox_task+0x320>
 8004376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800437a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800437e:	ee17 0a90 	vmov	r0, s15
 8004382:	f7fd fe05 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 8004386:	2020      	movs	r0, #32
 8004388:	f7fd fed6 	bl	8002138 <black_box_pack_char>
			black_box_pack_int((int)(roll_desired*100));
 800438c:	4b81      	ldr	r3, [pc, #516]	; (8004594 <blackbox_task+0x324>)
 800438e:	edd3 7a00 	vldr	s15, [r3]
 8004392:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8004590 <blackbox_task+0x320>
 8004396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800439a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800439e:	ee17 0a90 	vmov	r0, s15
 80043a2:	f7fd fdf5 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 80043a6:	2020      	movs	r0, #32
 80043a8:	f7fd fec6 	bl	8002138 <black_box_pack_char>
			black_box_pack_int((int)(AHRS.pitch*100));// cm
 80043ac:	4b77      	ldr	r3, [pc, #476]	; (800458c <blackbox_task+0x31c>)
 80043ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80043b2:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8004590 <blackbox_task+0x320>
 80043b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043be:	ee17 0a90 	vmov	r0, s15
 80043c2:	f7fd fde5 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 80043c6:	2020      	movs	r0, #32
 80043c8:	f7fd feb6 	bl	8002138 <black_box_pack_char>
			black_box_pack_int((int)(pitch_desired*100));
 80043cc:	4b72      	ldr	r3, [pc, #456]	; (8004598 <blackbox_task+0x328>)
 80043ce:	edd3 7a00 	vldr	s15, [r3]
 80043d2:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8004590 <blackbox_task+0x320>
 80043d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043de:	ee17 0a90 	vmov	r0, s15
 80043e2:	f7fd fdd5 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 80043e6:	2020      	movs	r0, #32
 80043e8:	f7fd fea6 	bl	8002138 <black_box_pack_char>
			black_box_pack_int((int)(AHRS.yaw*100));
 80043ec:	4b67      	ldr	r3, [pc, #412]	; (800458c <blackbox_task+0x31c>)
 80043ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80043f2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004590 <blackbox_task+0x320>
 80043f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043fe:	ee17 0a90 	vmov	r0, s15
 8004402:	f7fd fdc5 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 8004406:	2020      	movs	r0, #32
 8004408:	f7fd fe96 	bl	8002138 <black_box_pack_char>
			black_box_pack_int((int)(AHRS.yaw_rate*100));
 800440c:	4b5f      	ldr	r3, [pc, #380]	; (800458c <blackbox_task+0x31c>)
 800440e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004412:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004590 <blackbox_task+0x320>
 8004416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800441a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800441e:	ee17 0a90 	vmov	r0, s15
 8004422:	f7fd fdb5 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 8004426:	2020      	movs	r0, #32
 8004428:	f7fd fe86 	bl	8002138 <black_box_pack_char>

			/*------- GPS ----------------------*/
			int16_t vx = _gps.velocity[0];  // cm/s
 800442c:	4b5b      	ldr	r3, [pc, #364]	; (800459c <blackbox_task+0x32c>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	82fb      	strh	r3, [r7, #22]
			int16_t vy = _gps.velocity[1];  // cm/s
 8004432:	4b5a      	ldr	r3, [pc, #360]	; (800459c <blackbox_task+0x32c>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	82bb      	strh	r3, [r7, #20]
			int16_t vz = _gps.velocity[2];  // cm/s
 8004438:	4b58      	ldr	r3, [pc, #352]	; (800459c <blackbox_task+0x32c>)
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	827b      	strh	r3, [r7, #18]
			int32_t ground_speed = sqrt(sq(vx) + sq(vy)) ;
 800443e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004442:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004446:	fb02 f203 	mul.w	r2, r2, r3
 800444a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800444e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8004452:	fb01 f303 	mul.w	r3, r1, r3
 8004456:	4413      	add	r3, r2
 8004458:	4618      	mov	r0, r3
 800445a:	f7fc f80b 	bl	8000474 <__aeabi_i2d>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	ec43 2b10 	vmov	d0, r2, r3
 8004466:	f010 fc0b 	bl	8014c80 <sqrt>
 800446a:	ec53 2b10 	vmov	r2, r3, d0
 800446e:	4610      	mov	r0, r2
 8004470:	4619      	mov	r1, r3
 8004472:	f7fc fb19 	bl	8000aa8 <__aeabi_d2iz>
 8004476:	4603      	mov	r3, r0
 8004478:	60fb      	str	r3, [r7, #12]

			black_box_pack_int(_gps.position[0]);
 800447a:	4b48      	ldr	r3, [pc, #288]	; (800459c <blackbox_task+0x32c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fd fd86 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 8004484:	2020      	movs	r0, #32
 8004486:	f7fd fe57 	bl	8002138 <black_box_pack_char>
			black_box_pack_int(_gps.position[1]);
 800448a:	4b44      	ldr	r3, [pc, #272]	; (800459c <blackbox_task+0x32c>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fd fd7e 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 8004494:	2020      	movs	r0, #32
 8004496:	f7fd fe4f 	bl	8002138 <black_box_pack_char>
			black_box_pack_int(_gps.altitude_msl);
 800449a:	4b40      	ldr	r3, [pc, #256]	; (800459c <blackbox_task+0x32c>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fd fd76 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 80044a4:	2020      	movs	r0, #32
 80044a6:	f7fd fe47 	bl	8002138 <black_box_pack_char>
			black_box_pack_int(_gps.altitude_mgl);
 80044aa:	4b3c      	ldr	r3, [pc, #240]	; (800459c <blackbox_task+0x32c>)
 80044ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fd fd6e 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 80044b4:	2020      	movs	r0, #32
 80044b6:	f7fd fe3f 	bl	8002138 <black_box_pack_char>
			//black_box_pack_int(_gps.numSat);
			//lack_box_pack_char(' ');
			black_box_pack_int(_gps.fix);
 80044ba:	4b38      	ldr	r3, [pc, #224]	; (800459c <blackbox_task+0x32c>)
 80044bc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fd fd65 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 80044c6:	2020      	movs	r0, #32
 80044c8:	f7fd fe36 	bl	8002138 <black_box_pack_char>
			black_box_pack_int(ground_speed);
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f7fd fd5f 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 80044d2:	2020      	movs	r0, #32
 80044d4:	f7fd fe30 	bl	8002138 <black_box_pack_char>
			black_box_pack_int((int)(pid_velo_scale*1000));   // cm
 80044d8:	4b31      	ldr	r3, [pc, #196]	; (80045a0 <blackbox_task+0x330>)
 80044da:	edd3 7a00 	vldr	s15, [r3]
 80044de:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80045a4 <blackbox_task+0x334>
 80044e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044ea:	ee17 0a90 	vmov	r0, s15
 80044ee:	f7fd fd4f 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 80044f2:	2020      	movs	r0, #32
 80044f4:	f7fd fe20 	bl	8002138 <black_box_pack_char>
			black_box_pack_int(vz);
 80044f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fd fd47 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 8004502:	2020      	movs	r0, #32
 8004504:	f7fd fe18 	bl	8002138 <black_box_pack_char>
			black_box_pack_int(baro_climb);   // cm
 8004508:	4b27      	ldr	r3, [pc, #156]	; (80045a8 <blackbox_task+0x338>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7fd fd3f 	bl	8001f90 <black_box_pack_int>
			black_box_pack_char(' ');
 8004512:	2020      	movs	r0, #32
 8004514:	f7fd fe10 	bl	8002138 <black_box_pack_char>
			black_box_pack_int(baro_alt);   // cm
 8004518:	4b24      	ldr	r3, [pc, #144]	; (80045ac <blackbox_task+0x33c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f7fd fd37 	bl	8001f90 <black_box_pack_int>

			/*----- end line && load data to sd card- -----*/
			//sdcard_fsize = black_box_get_file_size();
			black_box_pack_char('\n');
 8004522:	200a      	movs	r0, #10
 8004524:	f7fd fe08 	bl	8002138 <black_box_pack_char>
			black_box_load();
 8004528:	f7fd fe20 	bl	800216c <black_box_load>

			if(puts_state != -1){
 800452c:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <blackbox_task+0x340>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004534:	d003      	beq.n	800453e <blackbox_task+0x2ce>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8004536:	2110      	movs	r1, #16
 8004538:	481e      	ldr	r0, [pc, #120]	; (80045b4 <blackbox_task+0x344>)
 800453a:	f003 fae6 	bl	8007b0a <HAL_GPIO_TogglePin>
			}
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 800453e:	f107 0308 	add.w	r3, r7, #8
 8004542:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004544:	4618      	mov	r0, r3
 8004546:	f00e fdaf 	bl	80130a8 <vTaskDelayUntil>
	#ifdef STACK_DEBUG
	    stack_task_blackbox = uxTaskGetStackHighWaterMark( NULL );
 800454a:	2000      	movs	r0, #0
 800454c:	f00f fb62 	bl	8013c14 <uxTaskGetStackHighWaterMark>
 8004550:	4603      	mov	r3, r0
 8004552:	b29a      	uxth	r2, r3
 8004554:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <blackbox_task+0x348>)
 8004556:	801a      	strh	r2, [r3, #0]
	  {
 8004558:	e699      	b.n	800428e <blackbox_task+0x1e>
 800455a:	bf00      	nop
 800455c:	f3af 8000 	nop.w
 8004560:	9999999a 	.word	0x9999999a
 8004564:	3fb99999 	.word	0x3fb99999
 8004568:	20004672 	.word	0x20004672
 800456c:	080157cc 	.word	0x080157cc
 8004570:	200048c8 	.word	0x200048c8
 8004574:	20004658 	.word	0x20004658
 8004578:	10624dd3 	.word	0x10624dd3
 800457c:	20000248 	.word	0x20000248
 8004580:	20004230 	.word	0x20004230
 8004584:	20004b10 	.word	0x20004b10
 8004588:	20004ae8 	.word	0x20004ae8
 800458c:	20004614 	.word	0x20004614
 8004590:	42c80000 	.word	0x42c80000
 8004594:	20004b00 	.word	0x20004b00
 8004598:	20004af8 	.word	0x20004af8
 800459c:	200044d8 	.word	0x200044d8
 80045a0:	20004af4 	.word	0x20004af4
 80045a4:	447a0000 	.word	0x447a0000
 80045a8:	20004ae4 	.word	0x20004ae4
 80045ac:	20004b08 	.word	0x20004b08
 80045b0:	20004484 	.word	0x20004484
 80045b4:	40020000 	.word	0x40020000
 80045b8:	20004684 	.word	0x20004684

080045bc <ahrs_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ahrs_task */
void ahrs_task(void const * argument)
{
 80045bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045be:	b08b      	sub	sp, #44	; 0x2c
 80045c0:	af06      	add	r7, sp, #24
 80045c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ahrs_task */
  /* Infinite loop */
	//vTaskSuspend(NULL);
	attitude_ctrl_init();
 80045c4:	f001 fce4 	bl	8005f90 <attitude_ctrl_init>
	initPWM(&htim3);
 80045c8:	4865      	ldr	r0, [pc, #404]	; (8004760 <ahrs_task+0x1a4>)
 80045ca:	f7ff fd33 	bl	8004034 <initPWM>
	compassInit();
 80045ce:	f7fd fe69 	bl	80022a4 <compassInit>
	gps_init(&huart3,38400);
 80045d2:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 80045d6:	4863      	ldr	r0, [pc, #396]	; (8004764 <ahrs_task+0x1a8>)
 80045d8:	f7fe f964 	bl	80028a4 <gps_init>
	baro_init();
 80045dc:	f7fd fb8a 	bl	8001cf4 <baro_init>
	mavlinkInit(1,1,&huart1,115200);
 80045e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80045e4:	4a60      	ldr	r2, [pc, #384]	; (8004768 <ahrs_task+0x1ac>)
 80045e6:	2101      	movs	r1, #1
 80045e8:	2001      	movs	r0, #1
 80045ea:	f002 fad7 	bl	8006b9c <mavlinkInit>
	ibus_init(&huart2);
 80045ee:	485f      	ldr	r0, [pc, #380]	; (800476c <ahrs_task+0x1b0>)
 80045f0:	f7fd f8b0 	bl	8001754 <ibus_init>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10; // 100 hz loop
 80045f4:	230a      	movs	r3, #10
 80045f6:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 80045f8:	f00f f824 	bl	8013644 <xTaskGetTickCount>
 80045fc:	4603      	mov	r3, r0
 80045fe:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug
	//timer_calculate_boottime();
	if(is_baro_calibration() == FALSE){
 8004600:	f7fd fbdc 	bl	8001dbc <is_baro_calibration>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <ahrs_task+0x52>
		baro_zero_calibrate();
 800460a:	f7fd fb99 	bl	8001d40 <baro_zero_calibrate>
	}
	// get rc channel 
	ibusFrameComplete();
 800460e:	f7fd f92d 	bl	800186c <ibusFrameComplete>
	// gps
	gps_readout();
 8004612:	f7fe f9a9 	bl	8002968 <gps_readout>
	update_ahrs(gyro_imu[0],gyro_imu[1],gyro_imu[2],acc_imu[0],acc_imu[1],acc_imu[2],mag_raw[0],mag_raw[1],mag_raw[2],0.01);
 8004616:	4b56      	ldr	r3, [pc, #344]	; (8004770 <ahrs_task+0x1b4>)
 8004618:	f9b3 5000 	ldrsh.w	r5, [r3]
 800461c:	4b54      	ldr	r3, [pc, #336]	; (8004770 <ahrs_task+0x1b4>)
 800461e:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8004622:	4b53      	ldr	r3, [pc, #332]	; (8004770 <ahrs_task+0x1b4>)
 8004624:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 8004628:	4b52      	ldr	r3, [pc, #328]	; (8004774 <ahrs_task+0x1b8>)
 800462a:	f9b3 e000 	ldrsh.w	lr, [r3]
 800462e:	4b51      	ldr	r3, [pc, #324]	; (8004774 <ahrs_task+0x1b8>)
 8004630:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004634:	4a4f      	ldr	r2, [pc, #316]	; (8004774 <ahrs_task+0x1b8>)
 8004636:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800463a:	494f      	ldr	r1, [pc, #316]	; (8004778 <ahrs_task+0x1bc>)
 800463c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8004640:	484d      	ldr	r0, [pc, #308]	; (8004778 <ahrs_task+0x1bc>)
 8004642:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8004646:	4c4c      	ldr	r4, [pc, #304]	; (8004778 <ahrs_task+0x1bc>)
 8004648:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 800464c:	9404      	str	r4, [sp, #16]
 800464e:	9003      	str	r0, [sp, #12]
 8004650:	9102      	str	r1, [sp, #8]
 8004652:	9201      	str	r2, [sp, #4]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800477c <ahrs_task+0x1c0>
 800465a:	4673      	mov	r3, lr
 800465c:	4662      	mov	r2, ip
 800465e:	4631      	mov	r1, r6
 8004660:	4628      	mov	r0, r5
 8004662:	f7fe fc59 	bl	8002f18 <update_ahrs>
	attitude_ctrl_start(0.01);
 8004666:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800477c <ahrs_task+0x1c0>
 800466a:	f001 fd69 	bl	8006140 <attitude_ctrl_start>

	if(ibusChannelData[CH10] > CHANNEL_HIGH && ibusChannelData[CH5] < CHANNEL_HIGH){
 800466e:	4b44      	ldr	r3, [pc, #272]	; (8004780 <ahrs_task+0x1c4>)
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8004676:	4293      	cmp	r3, r2
 8004678:	d925      	bls.n	80046c6 <ahrs_task+0x10a>
 800467a:	4b41      	ldr	r3, [pc, #260]	; (8004780 <ahrs_task+0x1c4>)
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8004682:	4293      	cmp	r3, r2
 8004684:	d81f      	bhi.n	80046c6 <ahrs_task+0x10a>
		static uint32_t tim_;
		if(millis() - tim_ > 200){
 8004686:	4b3f      	ldr	r3, [pc, #252]	; (8004784 <ahrs_task+0x1c8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800468c:	4b3e      	ldr	r3, [pc, #248]	; (8004788 <ahrs_task+0x1cc>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4413      	add	r3, r2
 8004692:	4a3e      	ldr	r2, [pc, #248]	; (800478c <ahrs_task+0x1d0>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	099a      	lsrs	r2, r3, #6
 800469a:	4b3d      	ldr	r3, [pc, #244]	; (8004790 <ahrs_task+0x1d4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2bc8      	cmp	r3, #200	; 0xc8
 80046a2:	d916      	bls.n	80046d2 <ahrs_task+0x116>
            //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80046a4:	2102      	movs	r1, #2
 80046a6:	483b      	ldr	r0, [pc, #236]	; (8004794 <ahrs_task+0x1d8>)
 80046a8:	f003 fa2f 	bl	8007b0a <HAL_GPIO_TogglePin>

			tim_ = millis();
 80046ac:	4b35      	ldr	r3, [pc, #212]	; (8004784 <ahrs_task+0x1c8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046b2:	4b35      	ldr	r3, [pc, #212]	; (8004788 <ahrs_task+0x1cc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4413      	add	r3, r2
 80046b8:	4a34      	ldr	r2, [pc, #208]	; (800478c <ahrs_task+0x1d0>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	099b      	lsrs	r3, r3, #6
 80046c0:	4a33      	ldr	r2, [pc, #204]	; (8004790 <ahrs_task+0x1d4>)
 80046c2:	6013      	str	r3, [r2, #0]
	if(ibusChannelData[CH10] > CHANNEL_HIGH && ibusChannelData[CH5] < CHANNEL_HIGH){
 80046c4:	e005      	b.n	80046d2 <ahrs_task+0x116>
		}
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,0);
 80046c6:	2200      	movs	r2, #0
 80046c8:	2102      	movs	r1, #2
 80046ca:	4832      	ldr	r0, [pc, #200]	; (8004794 <ahrs_task+0x1d8>)
 80046cc:	f003 fa04 	bl	8007ad8 <HAL_GPIO_WritePin>
 80046d0:	e000      	b.n	80046d4 <ahrs_task+0x118>
	if(ibusChannelData[CH10] > CHANNEL_HIGH && ibusChannelData[CH5] < CHANNEL_HIGH){
 80046d2:	bf00      	nop
	}


	static uint32_t gps_tim_ms;
	if(millis() - gps_tim_ms > 200){
 80046d4:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <ahrs_task+0x1c8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046da:	4b2b      	ldr	r3, [pc, #172]	; (8004788 <ahrs_task+0x1cc>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4413      	add	r3, r2
 80046e0:	4a2a      	ldr	r2, [pc, #168]	; (800478c <ahrs_task+0x1d0>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	099a      	lsrs	r2, r3, #6
 80046e8:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <ahrs_task+0x1dc>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2bc8      	cmp	r3, #200	; 0xc8
 80046f0:	d914      	bls.n	800471c <ahrs_task+0x160>
	   if(_gps.fix > 1){
 80046f2:	4b2a      	ldr	r3, [pc, #168]	; (800479c <ahrs_task+0x1e0>)
 80046f4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d903      	bls.n	8004704 <ahrs_task+0x148>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80046fc:	2120      	movs	r1, #32
 80046fe:	4825      	ldr	r0, [pc, #148]	; (8004794 <ahrs_task+0x1d8>)
 8004700:	f003 fa03 	bl	8007b0a <HAL_GPIO_TogglePin>
	   }
	   gps_tim_ms = millis();
 8004704:	4b1f      	ldr	r3, [pc, #124]	; (8004784 <ahrs_task+0x1c8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800470a:	4b1f      	ldr	r3, [pc, #124]	; (8004788 <ahrs_task+0x1cc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4413      	add	r3, r2
 8004710:	4a1e      	ldr	r2, [pc, #120]	; (800478c <ahrs_task+0x1d0>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	099b      	lsrs	r3, r3, #6
 8004718:	4a1f      	ldr	r2, [pc, #124]	; (8004798 <ahrs_task+0x1dc>)
 800471a:	6013      	str	r3, [r2, #0]
	}

	if(ibusChannelData[CH6] < CHANNEL_HIGH ){
 800471c:	4b18      	ldr	r3, [pc, #96]	; (8004780 <ahrs_task+0x1c4>)
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8004724:	4293      	cmp	r3, r2
 8004726:	d808      	bhi.n	800473a <ahrs_task+0x17e>
		vTaskSuspend(task1Handle);
 8004728:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <ahrs_task+0x1e4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f00e fd6d 	bl	801320c <vTaskSuspend>
		black_box_reset = TRUE;
 8004732:	4b1c      	ldr	r3, [pc, #112]	; (80047a4 <ahrs_task+0x1e8>)
 8004734:	2201      	movs	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	e004      	b.n	8004744 <ahrs_task+0x188>
	}
	else{
		vTaskResume(task1Handle);
 800473a:	4b19      	ldr	r3, [pc, #100]	; (80047a0 <ahrs_task+0x1e4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f00e fe28 	bl	8013394 <vTaskResume>
	}

	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004744:	f107 0308 	add.w	r3, r7, #8
 8004748:	68f9      	ldr	r1, [r7, #12]
 800474a:	4618      	mov	r0, r3
 800474c:	f00e fcac 	bl	80130a8 <vTaskDelayUntil>
#ifdef STACK_DEBUG
	stack_task_ahrs = uxTaskGetStackHighWaterMark( NULL );
 8004750:	2000      	movs	r0, #0
 8004752:	f00f fa5f 	bl	8013c14 <uxTaskGetStackHighWaterMark>
 8004756:	4603      	mov	r3, r0
 8004758:	b29a      	uxth	r2, r3
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <ahrs_task+0x1ec>)
 800475c:	801a      	strh	r2, [r3, #0]
  {
 800475e:	e74f      	b.n	8004600 <ahrs_task+0x44>
 8004760:	20004910 	.word	0x20004910
 8004764:	200049b8 	.word	0x200049b8
 8004768:	20004a5c 	.word	0x20004a5c
 800476c:	20004aa0 	.word	0x20004aa0
 8004770:	2000466c 	.word	0x2000466c
 8004774:	20004660 	.word	0x20004660
 8004778:	20004674 	.word	0x20004674
 800477c:	3c23d70a 	.word	0x3c23d70a
 8004780:	20004230 	.word	0x20004230
 8004784:	200048c8 	.word	0x200048c8
 8004788:	20004658 	.word	0x20004658
 800478c:	10624dd3 	.word	0x10624dd3
 8004790:	2000024c 	.word	0x2000024c
 8004794:	40020000 	.word	0x40020000
 8004798:	20000250 	.word	0x20000250
 800479c:	200044d8 	.word	0x200044d8
 80047a0:	20004668 	.word	0x20004668
 80047a4:	20004672 	.word	0x20004672
 80047a8:	2000468e 	.word	0x2000468e
 80047ac:	00000000 	.word	0x00000000

080047b0 <sensor_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensor_task */
void sensor_task(void const * argument)
{
 80047b0:	b5b0      	push	{r4, r5, r7, lr}
 80047b2:	b08e      	sub	sp, #56	; 0x38
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensor_task */
  /* Infinite loop */
	//vTaskSuspend(NULL);
	int16_t gyso_offset[3] = {0,0,0};
 80047b8:	2300      	movs	r3, #0
 80047ba:	853b      	strh	r3, [r7, #40]	; 0x28
 80047bc:	2300      	movs	r3, #0
 80047be:	857b      	strh	r3, [r7, #42]	; 0x2a
 80047c0:	2300      	movs	r3, #0
 80047c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	axis3_t raw;
	uint8_t sample_count = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t gyro_add[3] = {0,0,0};
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	2300      	movs	r3, #0
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	2300      	movs	r3, #0
 80047d4:	61fb      	str	r3, [r7, #28]
	uint8_t first_loop = 1;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	compassInit();
 80047dc:	f7fd fd62 	bl	80022a4 <compassInit>
	mpu6050_init(&hi2c2);
 80047e0:	4891      	ldr	r0, [pc, #580]	; (8004a28 <sensor_task+0x278>)
 80047e2:	f7fd f92b 	bl	8001a3c <mpu6050_init>
	//i2cDectect(&hi2c2);
	HAL_Delay(2000);
 80047e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80047ea:	f002 faad 	bl	8006d48 <HAL_Delay>
	imu_calibrate(&gyso_offset[0],&gyso_offset[1],&gyso_offset[2]);
 80047ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047f2:	1d1a      	adds	r2, r3, #4
 80047f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047f8:	1c99      	adds	r1, r3, #2
 80047fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fe fb10 	bl	8002e24 <imu_calibrate>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2;
 8004804:	2302      	movs	r3, #2
 8004806:	633b      	str	r3, [r7, #48]	; 0x30
	xLastWakeTime = xTaskGetTickCount();
 8004808:	f00e ff1c 	bl	8013644 <xTaskGetTickCount>
 800480c:	4603      	mov	r3, r0
 800480e:	613b      	str	r3, [r7, #16]

	for(;;)
	{
		mpu6050_gyro_get_raw(&raw);
 8004810:	f107 0320 	add.w	r3, r7, #32
 8004814:	4618      	mov	r0, r3
 8004816:	f7fd f963 	bl	8001ae0 <mpu6050_gyro_get_raw>
		gyro_add[0] += (raw.x - gyso_offset[0]);
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004820:	4619      	mov	r1, r3
 8004822:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8004826:	1acb      	subs	r3, r1, r3
 8004828:	4413      	add	r3, r2
 800482a:	617b      	str	r3, [r7, #20]
		gyro_add[1] += (raw.y - gyso_offset[1]);
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004832:	4619      	mov	r1, r3
 8004834:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004838:	1acb      	subs	r3, r1, r3
 800483a:	4413      	add	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
		gyro_add[2] += (raw.z - gyso_offset[2]);
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004844:	4619      	mov	r1, r3
 8004846:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800484a:	1acb      	subs	r3, r1, r3
 800484c:	4413      	add	r3, r2
 800484e:	61fb      	str	r3, [r7, #28]
		sample_count ++;
 8004850:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004854:	3301      	adds	r3, #1
 8004856:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		if(sample_count >= 5){
 800485a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800485e:	2b04      	cmp	r3, #4
 8004860:	d937      	bls.n	80048d2 <sensor_task+0x122>
		   axis3_t mag;
		   compass_get(&mag);
 8004862:	f107 0308 	add.w	r3, r7, #8
 8004866:	4618      	mov	r0, r3
 8004868:	f7fd fd58 	bl	800231c <compass_get>
		   mag_raw[0] = mag.x;
 800486c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004870:	4b6e      	ldr	r3, [pc, #440]	; (8004a2c <sensor_task+0x27c>)
 8004872:	801a      	strh	r2, [r3, #0]
		   mag_raw[1] = mag.y;
 8004874:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004878:	4b6c      	ldr	r3, [pc, #432]	; (8004a2c <sensor_task+0x27c>)
 800487a:	805a      	strh	r2, [r3, #2]
		   mag_raw[2] = mag.z;
 800487c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004880:	4b6a      	ldr	r3, [pc, #424]	; (8004a2c <sensor_task+0x27c>)
 8004882:	809a      	strh	r2, [r3, #4]

		   gyro_imu[0] = (int16_t)(gyro_add[0]/5);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	4a6a      	ldr	r2, [pc, #424]	; (8004a30 <sensor_task+0x280>)
 8004888:	fb82 1203 	smull	r1, r2, r2, r3
 800488c:	1052      	asrs	r2, r2, #1
 800488e:	17db      	asrs	r3, r3, #31
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	b21a      	sxth	r2, r3
 8004894:	4b67      	ldr	r3, [pc, #412]	; (8004a34 <sensor_task+0x284>)
 8004896:	801a      	strh	r2, [r3, #0]
		   gyro_imu[1] = (int16_t)(gyro_add[1]/5);
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	4a65      	ldr	r2, [pc, #404]	; (8004a30 <sensor_task+0x280>)
 800489c:	fb82 1203 	smull	r1, r2, r2, r3
 80048a0:	1052      	asrs	r2, r2, #1
 80048a2:	17db      	asrs	r3, r3, #31
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	b21a      	sxth	r2, r3
 80048a8:	4b62      	ldr	r3, [pc, #392]	; (8004a34 <sensor_task+0x284>)
 80048aa:	805a      	strh	r2, [r3, #2]
		   gyro_imu[2] = (int16_t)(gyro_add[2]/5);
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	4a60      	ldr	r2, [pc, #384]	; (8004a30 <sensor_task+0x280>)
 80048b0:	fb82 1203 	smull	r1, r2, r2, r3
 80048b4:	1052      	asrs	r2, r2, #1
 80048b6:	17db      	asrs	r3, r3, #31
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	b21a      	sxth	r2, r3
 80048bc:	4b5d      	ldr	r3, [pc, #372]	; (8004a34 <sensor_task+0x284>)
 80048be:	809a      	strh	r2, [r3, #4]
		   gyro_add[0] = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
		   gyro_add[1] = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	61bb      	str	r3, [r7, #24]
		   gyro_add[2] = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61fb      	str	r3, [r7, #28]
		   sample_count = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		raw.x = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	843b      	strh	r3, [r7, #32]
		raw.y = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	847b      	strh	r3, [r7, #34]	; 0x22
		raw.z = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	84bb      	strh	r3, [r7, #36]	; 0x24

		mpu6050_acc_get_raw(&raw);
 80048de:	f107 0320 	add.w	r3, r7, #32
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fd f938 	bl	8001b58 <mpu6050_acc_get_raw>
		if(first_loop){
 80048e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00e      	beq.n	800490e <sensor_task+0x15e>
			acc_imu[0] = raw.x;
 80048f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80048f4:	4b50      	ldr	r3, [pc, #320]	; (8004a38 <sensor_task+0x288>)
 80048f6:	801a      	strh	r2, [r3, #0]
			acc_imu[1] = raw.y;
 80048f8:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80048fc:	4b4e      	ldr	r3, [pc, #312]	; (8004a38 <sensor_task+0x288>)
 80048fe:	805a      	strh	r2, [r3, #2]
			acc_imu[2] = raw.z;
 8004900:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8004904:	4b4c      	ldr	r3, [pc, #304]	; (8004a38 <sensor_task+0x288>)
 8004906:	809a      	strh	r2, [r3, #4]
			first_loop = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		}
		// low pass filter
		acc_imu[0] += 0.1*(raw.x - acc_imu[0]);
 800490e:	4b4a      	ldr	r3, [pc, #296]	; (8004a38 <sensor_task+0x288>)
 8004910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004914:	4618      	mov	r0, r3
 8004916:	f7fb fdad 	bl	8000474 <__aeabi_i2d>
 800491a:	4604      	mov	r4, r0
 800491c:	460d      	mov	r5, r1
 800491e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004922:	461a      	mov	r2, r3
 8004924:	4b44      	ldr	r3, [pc, #272]	; (8004a38 <sensor_task+0x288>)
 8004926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	4618      	mov	r0, r3
 800492e:	f7fb fda1 	bl	8000474 <__aeabi_i2d>
 8004932:	a33b      	add	r3, pc, #236	; (adr r3, 8004a20 <sensor_task+0x270>)
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f7fb fe06 	bl	8000548 <__aeabi_dmul>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4620      	mov	r0, r4
 8004942:	4629      	mov	r1, r5
 8004944:	f7fb fc4a 	bl	80001dc <__adddf3>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4610      	mov	r0, r2
 800494e:	4619      	mov	r1, r3
 8004950:	f7fc f8aa 	bl	8000aa8 <__aeabi_d2iz>
 8004954:	4603      	mov	r3, r0
 8004956:	b21a      	sxth	r2, r3
 8004958:	4b37      	ldr	r3, [pc, #220]	; (8004a38 <sensor_task+0x288>)
 800495a:	801a      	strh	r2, [r3, #0]
		acc_imu[1] += 0.1*(raw.y - acc_imu[1]);
 800495c:	4b36      	ldr	r3, [pc, #216]	; (8004a38 <sensor_task+0x288>)
 800495e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004962:	4618      	mov	r0, r3
 8004964:	f7fb fd86 	bl	8000474 <__aeabi_i2d>
 8004968:	4604      	mov	r4, r0
 800496a:	460d      	mov	r5, r1
 800496c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004970:	461a      	mov	r2, r3
 8004972:	4b31      	ldr	r3, [pc, #196]	; (8004a38 <sensor_task+0x288>)
 8004974:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	4618      	mov	r0, r3
 800497c:	f7fb fd7a 	bl	8000474 <__aeabi_i2d>
 8004980:	a327      	add	r3, pc, #156	; (adr r3, 8004a20 <sensor_task+0x270>)
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f7fb fddf 	bl	8000548 <__aeabi_dmul>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4620      	mov	r0, r4
 8004990:	4629      	mov	r1, r5
 8004992:	f7fb fc23 	bl	80001dc <__adddf3>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4610      	mov	r0, r2
 800499c:	4619      	mov	r1, r3
 800499e:	f7fc f883 	bl	8000aa8 <__aeabi_d2iz>
 80049a2:	4603      	mov	r3, r0
 80049a4:	b21a      	sxth	r2, r3
 80049a6:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <sensor_task+0x288>)
 80049a8:	805a      	strh	r2, [r3, #2]
		acc_imu[2] += 0.1*(raw.z - acc_imu[2]);
 80049aa:	4b23      	ldr	r3, [pc, #140]	; (8004a38 <sensor_task+0x288>)
 80049ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fb fd5f 	bl	8000474 <__aeabi_i2d>
 80049b6:	4604      	mov	r4, r0
 80049b8:	460d      	mov	r5, r1
 80049ba:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80049be:	461a      	mov	r2, r3
 80049c0:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <sensor_task+0x288>)
 80049c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fb fd53 	bl	8000474 <__aeabi_i2d>
 80049ce:	a314      	add	r3, pc, #80	; (adr r3, 8004a20 <sensor_task+0x270>)
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f7fb fdb8 	bl	8000548 <__aeabi_dmul>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4620      	mov	r0, r4
 80049de:	4629      	mov	r1, r5
 80049e0:	f7fb fbfc 	bl	80001dc <__adddf3>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4610      	mov	r0, r2
 80049ea:	4619      	mov	r1, r3
 80049ec:	f7fc f85c 	bl	8000aa8 <__aeabi_d2iz>
 80049f0:	4603      	mov	r3, r0
 80049f2:	b21a      	sxth	r2, r3
 80049f4:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <sensor_task+0x288>)
 80049f6:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80049f8:	2108      	movs	r1, #8
 80049fa:	4810      	ldr	r0, [pc, #64]	; (8004a3c <sensor_task+0x28c>)
 80049fc:	f003 f885 	bl	8007b0a <HAL_GPIO_TogglePin>
#ifdef STACK_DEBUG
		stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 8004a00:	2000      	movs	r0, #0
 8004a02:	f00f f907 	bl	8013c14 <uxTaskGetStackHighWaterMark>
 8004a06:	4603      	mov	r3, r0
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <sensor_task+0x290>)
 8004a0c:	801a      	strh	r2, [r3, #0]
#endif
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004a0e:	f107 0310 	add.w	r3, r7, #16
 8004a12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a14:	4618      	mov	r0, r3
 8004a16:	f00e fb47 	bl	80130a8 <vTaskDelayUntil>
		mpu6050_gyro_get_raw(&raw);
 8004a1a:	e6f9      	b.n	8004810 <sensor_task+0x60>
 8004a1c:	f3af 8000 	nop.w
 8004a20:	9999999a 	.word	0x9999999a
 8004a24:	3fb99999 	.word	0x3fb99999
 8004a28:	200046e8 	.word	0x200046e8
 8004a2c:	20004674 	.word	0x20004674
 8004a30:	66666667 	.word	0x66666667
 8004a34:	2000466c 	.word	0x2000466c
 8004a38:	20004660 	.word	0x20004660
 8004a3c:	40020400 	.word	0x40020400
 8004a40:	2000465c 	.word	0x2000465c

08004a44 <osd_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_osd_task */
void osd_task(void const * argument)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN osd_task */
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004a4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a50:	4807      	ldr	r0, [pc, #28]	; (8004a70 <osd_task+0x2c>)
 8004a52:	f003 f85a 	bl	8007b0a <HAL_GPIO_TogglePin>
	osDelay(1000);
 8004a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a5a:	f00d f8cf 	bl	8011bfc <osDelay>
#ifdef STACK_DEBUG
	stack_task_mavOSD = uxTaskGetStackHighWaterMark( NULL );
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f00f f8d8 	bl	8013c14 <uxTaskGetStackHighWaterMark>
 8004a64:	4603      	mov	r3, r0
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	4b02      	ldr	r3, [pc, #8]	; (8004a74 <osd_task+0x30>)
 8004a6a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004a6c:	e7ee      	b.n	8004a4c <osd_task+0x8>
 8004a6e:	bf00      	nop
 8004a70:	40020800 	.word	0x40020800
 8004a74:	2000468c 	.word	0x2000468c

08004a78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08a      	sub	sp, #40	; 0x28
 8004a7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a7e:	f107 0314 	add.w	r3, r7, #20
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	605a      	str	r2, [r3, #4]
 8004a88:	609a      	str	r2, [r3, #8]
 8004a8a:	60da      	str	r2, [r3, #12]
 8004a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a8e:	2300      	movs	r3, #0
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	4b58      	ldr	r3, [pc, #352]	; (8004bf4 <MX_GPIO_Init+0x17c>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	4a57      	ldr	r2, [pc, #348]	; (8004bf4 <MX_GPIO_Init+0x17c>)
 8004a98:	f043 0304 	orr.w	r3, r3, #4
 8004a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a9e:	4b55      	ldr	r3, [pc, #340]	; (8004bf4 <MX_GPIO_Init+0x17c>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	4b51      	ldr	r3, [pc, #324]	; (8004bf4 <MX_GPIO_Init+0x17c>)
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	4a50      	ldr	r2, [pc, #320]	; (8004bf4 <MX_GPIO_Init+0x17c>)
 8004ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aba:	4b4e      	ldr	r3, [pc, #312]	; (8004bf4 <MX_GPIO_Init+0x17c>)
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <MX_GPIO_Init+0x17c>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	4a49      	ldr	r2, [pc, #292]	; (8004bf4 <MX_GPIO_Init+0x17c>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad6:	4b47      	ldr	r3, [pc, #284]	; (8004bf4 <MX_GPIO_Init+0x17c>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	4b43      	ldr	r3, [pc, #268]	; (8004bf4 <MX_GPIO_Init+0x17c>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	4a42      	ldr	r2, [pc, #264]	; (8004bf4 <MX_GPIO_Init+0x17c>)
 8004aec:	f043 0302 	orr.w	r3, r3, #2
 8004af0:	6313      	str	r3, [r2, #48]	; 0x30
 8004af2:	4b40      	ldr	r3, [pc, #256]	; (8004bf4 <MX_GPIO_Init+0x17c>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	4b3c      	ldr	r3, [pc, #240]	; (8004bf4 <MX_GPIO_Init+0x17c>)
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b06:	4a3b      	ldr	r2, [pc, #236]	; (8004bf4 <MX_GPIO_Init+0x17c>)
 8004b08:	f043 0308 	orr.w	r3, r3, #8
 8004b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b0e:	4b39      	ldr	r3, [pc, #228]	; (8004bf4 <MX_GPIO_Init+0x17c>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b20:	4835      	ldr	r0, [pc, #212]	; (8004bf8 <MX_GPIO_Init+0x180>)
 8004b22:	f002 ffd9 	bl	8007ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8004b26:	2200      	movs	r2, #0
 8004b28:	2132      	movs	r1, #50	; 0x32
 8004b2a:	4834      	ldr	r0, [pc, #208]	; (8004bfc <MX_GPIO_Init+0x184>)
 8004b2c:	f002 ffd4 	bl	8007ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8004b30:	2200      	movs	r2, #0
 8004b32:	2180      	movs	r1, #128	; 0x80
 8004b34:	4832      	ldr	r0, [pc, #200]	; (8004c00 <MX_GPIO_Init+0x188>)
 8004b36:	f002 ffcf 	bl	8007ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2118      	movs	r1, #24
 8004b3e:	4831      	ldr	r0, [pc, #196]	; (8004c04 <MX_GPIO_Init+0x18c>)
 8004b40:	f002 ffca 	bl	8007ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b52:	2300      	movs	r3, #0
 8004b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b56:	f107 0314 	add.w	r3, r7, #20
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4826      	ldr	r0, [pc, #152]	; (8004bf8 <MX_GPIO_Init+0x180>)
 8004b5e:	f002 fe07 	bl	8007770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004b62:	2302      	movs	r3, #2
 8004b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b66:	2301      	movs	r3, #1
 8004b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b72:	f107 0314 	add.w	r3, r7, #20
 8004b76:	4619      	mov	r1, r3
 8004b78:	4820      	ldr	r0, [pc, #128]	; (8004bfc <MX_GPIO_Init+0x184>)
 8004b7a:	f002 fdf9 	bl	8007770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004b7e:	2330      	movs	r3, #48	; 0x30
 8004b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b82:	2301      	movs	r3, #1
 8004b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b8e:	f107 0314 	add.w	r3, r7, #20
 8004b92:	4619      	mov	r1, r3
 8004b94:	4819      	ldr	r0, [pc, #100]	; (8004bfc <MX_GPIO_Init+0x184>)
 8004b96:	f002 fdeb 	bl	8007770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004b9a:	2380      	movs	r3, #128	; 0x80
 8004b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004baa:	f107 0314 	add.w	r3, r7, #20
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4813      	ldr	r0, [pc, #76]	; (8004c00 <MX_GPIO_Init+0x188>)
 8004bb2:	f002 fddd 	bl	8007770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004bb6:	2318      	movs	r3, #24
 8004bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bc6:	f107 0314 	add.w	r3, r7, #20
 8004bca:	4619      	mov	r1, r3
 8004bcc:	480d      	ldr	r0, [pc, #52]	; (8004c04 <MX_GPIO_Init+0x18c>)
 8004bce:	f002 fdcf 	bl	8007770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004bd2:	2320      	movs	r3, #32
 8004bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bde:	f107 0314 	add.w	r3, r7, #20
 8004be2:	4619      	mov	r1, r3
 8004be4:	4807      	ldr	r0, [pc, #28]	; (8004c04 <MX_GPIO_Init+0x18c>)
 8004be6:	f002 fdc3 	bl	8007770 <HAL_GPIO_Init>

}
 8004bea:	bf00      	nop
 8004bec:	3728      	adds	r7, #40	; 0x28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	40020800 	.word	0x40020800
 8004bfc:	40020000 	.word	0x40020000
 8004c00:	40020c00 	.word	0x40020c00
 8004c04:	40020400 	.word	0x40020400

08004c08 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004c0c:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <MX_I2C1_Init+0x50>)
 8004c0e:	4a13      	ldr	r2, [pc, #76]	; (8004c5c <MX_I2C1_Init+0x54>)
 8004c10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004c12:	4b11      	ldr	r3, [pc, #68]	; (8004c58 <MX_I2C1_Init+0x50>)
 8004c14:	4a12      	ldr	r2, [pc, #72]	; (8004c60 <MX_I2C1_Init+0x58>)
 8004c16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c18:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <MX_I2C1_Init+0x50>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004c1e:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <MX_I2C1_Init+0x50>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <MX_I2C1_Init+0x50>)
 8004c26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <MX_I2C1_Init+0x50>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004c32:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <MX_I2C1_Init+0x50>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <MX_I2C1_Init+0x50>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c3e:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <MX_I2C1_Init+0x50>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c44:	4804      	ldr	r0, [pc, #16]	; (8004c58 <MX_I2C1_Init+0x50>)
 8004c46:	f002 ff7b 	bl	8007b40 <HAL_I2C_Init>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004c50:	f000 f95c 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004c54:	bf00      	nop
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20004694 	.word	0x20004694
 8004c5c:	40005400 	.word	0x40005400
 8004c60:	00061a80 	.word	0x00061a80

08004c64 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004c68:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <MX_I2C2_Init+0x50>)
 8004c6a:	4a13      	ldr	r2, [pc, #76]	; (8004cb8 <MX_I2C2_Init+0x54>)
 8004c6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8004c6e:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <MX_I2C2_Init+0x50>)
 8004c70:	4a12      	ldr	r2, [pc, #72]	; (8004cbc <MX_I2C2_Init+0x58>)
 8004c72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c74:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <MX_I2C2_Init+0x50>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <MX_I2C2_Init+0x50>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c80:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <MX_I2C2_Init+0x50>)
 8004c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <MX_I2C2_Init+0x50>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <MX_I2C2_Init+0x50>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c94:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <MX_I2C2_Init+0x50>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c9a:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <MX_I2C2_Init+0x50>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004ca0:	4804      	ldr	r0, [pc, #16]	; (8004cb4 <MX_I2C2_Init+0x50>)
 8004ca2:	f002 ff4d 	bl	8007b40 <HAL_I2C_Init>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004cac:	f000 f92e 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004cb0:	bf00      	nop
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	200046e8 	.word	0x200046e8
 8004cb8:	40005800 	.word	0x40005800
 8004cbc:	00061a80 	.word	0x00061a80

08004cc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08c      	sub	sp, #48	; 0x30
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc8:	f107 031c 	add.w	r3, r7, #28
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	609a      	str	r2, [r3, #8]
 8004cd4:	60da      	str	r2, [r3, #12]
 8004cd6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a32      	ldr	r2, [pc, #200]	; (8004da8 <HAL_I2C_MspInit+0xe8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d12c      	bne.n	8004d3c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	4b31      	ldr	r3, [pc, #196]	; (8004dac <HAL_I2C_MspInit+0xec>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	4a30      	ldr	r2, [pc, #192]	; (8004dac <HAL_I2C_MspInit+0xec>)
 8004cec:	f043 0302 	orr.w	r3, r3, #2
 8004cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cf2:	4b2e      	ldr	r3, [pc, #184]	; (8004dac <HAL_I2C_MspInit+0xec>)
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cfe:	23c0      	movs	r3, #192	; 0xc0
 8004d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d02:	2312      	movs	r3, #18
 8004d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d0e:	2304      	movs	r3, #4
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d12:	f107 031c 	add.w	r3, r7, #28
 8004d16:	4619      	mov	r1, r3
 8004d18:	4825      	ldr	r0, [pc, #148]	; (8004db0 <HAL_I2C_MspInit+0xf0>)
 8004d1a:	f002 fd29 	bl	8007770 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	4b22      	ldr	r3, [pc, #136]	; (8004dac <HAL_I2C_MspInit+0xec>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	4a21      	ldr	r2, [pc, #132]	; (8004dac <HAL_I2C_MspInit+0xec>)
 8004d28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d2e:	4b1f      	ldr	r3, [pc, #124]	; (8004dac <HAL_I2C_MspInit+0xec>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004d3a:	e031      	b.n	8004da0 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a1c      	ldr	r2, [pc, #112]	; (8004db4 <HAL_I2C_MspInit+0xf4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d12c      	bne.n	8004da0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d46:	2300      	movs	r3, #0
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	4b18      	ldr	r3, [pc, #96]	; (8004dac <HAL_I2C_MspInit+0xec>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	4a17      	ldr	r2, [pc, #92]	; (8004dac <HAL_I2C_MspInit+0xec>)
 8004d50:	f043 0302 	orr.w	r3, r3, #2
 8004d54:	6313      	str	r3, [r2, #48]	; 0x30
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <HAL_I2C_MspInit+0xec>)
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004d62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d68:	2312      	movs	r3, #18
 8004d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d70:	2303      	movs	r3, #3
 8004d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004d74:	2304      	movs	r3, #4
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d78:	f107 031c 	add.w	r3, r7, #28
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	480c      	ldr	r0, [pc, #48]	; (8004db0 <HAL_I2C_MspInit+0xf0>)
 8004d80:	f002 fcf6 	bl	8007770 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	4b08      	ldr	r3, [pc, #32]	; (8004dac <HAL_I2C_MspInit+0xec>)
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	4a07      	ldr	r2, [pc, #28]	; (8004dac <HAL_I2C_MspInit+0xec>)
 8004d8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d92:	6413      	str	r3, [r2, #64]	; 0x40
 8004d94:	4b05      	ldr	r3, [pc, #20]	; (8004dac <HAL_I2C_MspInit+0xec>)
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
}
 8004da0:	bf00      	nop
 8004da2:	3730      	adds	r7, #48	; 0x30
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40005400 	.word	0x40005400
 8004dac:	40023800 	.word	0x40023800
 8004db0:	40020400 	.word	0x40020400
 8004db4:	40005800 	.word	0x40005800

08004db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004dbc:	f001 ff82 	bl	8006cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004dc0:	f000 f81c 	bl	8004dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004dc4:	f7ff fe58 	bl	8004a78 <MX_GPIO_Init>
  MX_DMA_Init();
 8004dc8:	f7ff f984 	bl	80040d4 <MX_DMA_Init>
  MX_I2C1_Init();
 8004dcc:	f7ff ff1c 	bl	8004c08 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004dd0:	f7ff ff48 	bl	8004c64 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8004dd4:	f000 f8a0 	bl	8004f18 <MX_SDIO_SD_Init>
  MX_TIM3_Init();
 8004dd8:	f000 fafa 	bl	80053d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004ddc:	f000 fb84 	bl	80054e8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8004de0:	f000 fc68 	bl	80056b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004de4:	f000 fc90 	bl	8005708 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004de8:	f000 fcb8 	bl	800575c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8004dec:	f009 f9b4 	bl	800e158 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004df0:	f7ff f9e0 	bl	80041b4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8004df4:	f00c feb8 	bl	8011b68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004df8:	e7fe      	b.n	8004df8 <main+0x40>
	...

08004dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b094      	sub	sp, #80	; 0x50
 8004e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e02:	f107 0320 	add.w	r3, r7, #32
 8004e06:	2230      	movs	r2, #48	; 0x30
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f00f fdf0 	bl	80149f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e10:	f107 030c 	add.w	r3, r7, #12
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	609a      	str	r2, [r3, #8]
 8004e1c:	60da      	str	r2, [r3, #12]
 8004e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e20:	2300      	movs	r3, #0
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	4b28      	ldr	r3, [pc, #160]	; (8004ec8 <SystemClock_Config+0xcc>)
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	4a27      	ldr	r2, [pc, #156]	; (8004ec8 <SystemClock_Config+0xcc>)
 8004e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8004e30:	4b25      	ldr	r3, [pc, #148]	; (8004ec8 <SystemClock_Config+0xcc>)
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	607b      	str	r3, [r7, #4]
 8004e40:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <SystemClock_Config+0xd0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a21      	ldr	r2, [pc, #132]	; (8004ecc <SystemClock_Config+0xd0>)
 8004e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	4b1f      	ldr	r3, [pc, #124]	; (8004ecc <SystemClock_Config+0xd0>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e54:	607b      	str	r3, [r7, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004e58:	2302      	movs	r3, #2
 8004e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004e60:	2310      	movs	r3, #16
 8004e62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e64:	2302      	movs	r3, #2
 8004e66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004e6c:	2308      	movs	r3, #8
 8004e6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004e70:	23a8      	movs	r3, #168	; 0xa8
 8004e72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e74:	2302      	movs	r3, #2
 8004e76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004e78:	2307      	movs	r3, #7
 8004e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e7c:	f107 0320 	add.w	r3, r7, #32
 8004e80:	4618      	mov	r0, r3
 8004e82:	f004 fbbf 	bl	8009604 <HAL_RCC_OscConfig>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004e8c:	f000 f83e 	bl	8004f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e90:	230f      	movs	r3, #15
 8004e92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e94:	2302      	movs	r3, #2
 8004e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004e9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004ea0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ea6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004ea8:	f107 030c 	add.w	r3, r7, #12
 8004eac:	2105      	movs	r1, #5
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f004 fe20 	bl	8009af4 <HAL_RCC_ClockConfig>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004eba:	f000 f827 	bl	8004f0c <Error_Handler>
  }
}
 8004ebe:	bf00      	nop
 8004ec0:	3750      	adds	r7, #80	; 0x50
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	40007000 	.word	0x40007000

08004ed0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee0:	d101      	bne.n	8004ee6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004ee2:	f001 ff11 	bl	8006d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if(htim == &htim4)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a06      	ldr	r2, [pc, #24]	; (8004f04 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d106      	bne.n	8004efc <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		TIMER_CALLBACK();
 8004eee:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004ef6:	33ff      	adds	r3, #255	; 0xff
 8004ef8:	4a03      	ldr	r2, [pc, #12]	; (8004f08 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004efa:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	200048c8 	.word	0x200048c8
 8004f08:	20004658 	.word	0x20004658

08004f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f10:	b672      	cpsid	i
}
 8004f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f14:	e7fe      	b.n	8004f14 <Error_Handler+0x8>
	...

08004f18 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <MX_SDIO_SD_Init+0x40>)
 8004f1e:	4a0f      	ldr	r2, [pc, #60]	; (8004f5c <MX_SDIO_SD_Init+0x44>)
 8004f20:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004f22:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <MX_SDIO_SD_Init+0x40>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <MX_SDIO_SD_Init+0x40>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <MX_SDIO_SD_Init+0x40>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004f34:	4b08      	ldr	r3, [pc, #32]	; (8004f58 <MX_SDIO_SD_Init+0x40>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004f3a:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <MX_SDIO_SD_Init+0x40>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 8004f40:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <MX_SDIO_SD_Init+0x40>)
 8004f42:	220a      	movs	r2, #10
 8004f44:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.ClockDiv = 4;
 8004f46:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <MX_SDIO_SD_Init+0x40>)
 8004f48:	2204      	movs	r2, #4
 8004f4a:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 2 */

}
 8004f4c:	bf00      	nop
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	200047fc 	.word	0x200047fc
 8004f5c:	40012c00 	.word	0x40012c00

08004f60 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08a      	sub	sp, #40	; 0x28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f68:	f107 0314 	add.w	r3, r7, #20
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	605a      	str	r2, [r3, #4]
 8004f72:	609a      	str	r2, [r3, #8]
 8004f74:	60da      	str	r2, [r3, #12]
 8004f76:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a68      	ldr	r2, [pc, #416]	; (8005120 <HAL_SD_MspInit+0x1c0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	f040 80c9 	bne.w	8005116 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	4b66      	ldr	r3, [pc, #408]	; (8005124 <HAL_SD_MspInit+0x1c4>)
 8004f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8c:	4a65      	ldr	r2, [pc, #404]	; (8005124 <HAL_SD_MspInit+0x1c4>)
 8004f8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f92:	6453      	str	r3, [r2, #68]	; 0x44
 8004f94:	4b63      	ldr	r3, [pc, #396]	; (8005124 <HAL_SD_MspInit+0x1c4>)
 8004f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	4b5f      	ldr	r3, [pc, #380]	; (8005124 <HAL_SD_MspInit+0x1c4>)
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	4a5e      	ldr	r2, [pc, #376]	; (8005124 <HAL_SD_MspInit+0x1c4>)
 8004faa:	f043 0304 	orr.w	r3, r3, #4
 8004fae:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb0:	4b5c      	ldr	r3, [pc, #368]	; (8005124 <HAL_SD_MspInit+0x1c4>)
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60bb      	str	r3, [r7, #8]
 8004fc0:	4b58      	ldr	r3, [pc, #352]	; (8005124 <HAL_SD_MspInit+0x1c4>)
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	4a57      	ldr	r2, [pc, #348]	; (8005124 <HAL_SD_MspInit+0x1c4>)
 8004fc6:	f043 0308 	orr.w	r3, r3, #8
 8004fca:	6313      	str	r3, [r2, #48]	; 0x30
 8004fcc:	4b55      	ldr	r3, [pc, #340]	; (8005124 <HAL_SD_MspInit+0x1c4>)
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8004fd8:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8004fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004fea:	230c      	movs	r3, #12
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fee:	f107 0314 	add.w	r3, r7, #20
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	484c      	ldr	r0, [pc, #304]	; (8005128 <HAL_SD_MspInit+0x1c8>)
 8004ff6:	f002 fbbb 	bl	8007770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ffa:	2304      	movs	r3, #4
 8004ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ffe:	2302      	movs	r3, #2
 8005000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005006:	2303      	movs	r3, #3
 8005008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800500a:	230c      	movs	r3, #12
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800500e:	f107 0314 	add.w	r3, r7, #20
 8005012:	4619      	mov	r1, r3
 8005014:	4845      	ldr	r0, [pc, #276]	; (800512c <HAL_SD_MspInit+0x1cc>)
 8005016:	f002 fbab 	bl	8007770 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800501a:	4b45      	ldr	r3, [pc, #276]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 800501c:	4a45      	ldr	r2, [pc, #276]	; (8005134 <HAL_SD_MspInit+0x1d4>)
 800501e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8005020:	4b43      	ldr	r3, [pc, #268]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 8005022:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005026:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005028:	4b41      	ldr	r3, [pc, #260]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 800502a:	2200      	movs	r2, #0
 800502c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800502e:	4b40      	ldr	r3, [pc, #256]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 8005030:	2200      	movs	r2, #0
 8005032:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005034:	4b3e      	ldr	r3, [pc, #248]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 8005036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800503a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800503c:	4b3c      	ldr	r3, [pc, #240]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 800503e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005042:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005044:	4b3a      	ldr	r3, [pc, #232]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 8005046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800504a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800504c:	4b38      	ldr	r3, [pc, #224]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 800504e:	2220      	movs	r2, #32
 8005050:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005052:	4b37      	ldr	r3, [pc, #220]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 8005054:	2200      	movs	r2, #0
 8005056:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005058:	4b35      	ldr	r3, [pc, #212]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 800505a:	2204      	movs	r2, #4
 800505c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800505e:	4b34      	ldr	r3, [pc, #208]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 8005060:	2203      	movs	r2, #3
 8005062:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005064:	4b32      	ldr	r3, [pc, #200]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 8005066:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800506a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800506c:	4b30      	ldr	r3, [pc, #192]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 800506e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8005074:	482e      	ldr	r0, [pc, #184]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 8005076:	f001 ff6d 	bl	8006f54 <HAL_DMA_Init>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8005080:	f7ff ff44 	bl	8004f0c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a2a      	ldr	r2, [pc, #168]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 8005088:	641a      	str	r2, [r3, #64]	; 0x40
 800508a:	4a29      	ldr	r2, [pc, #164]	; (8005130 <HAL_SD_MspInit+0x1d0>)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005090:	4b29      	ldr	r3, [pc, #164]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 8005092:	4a2a      	ldr	r2, [pc, #168]	; (800513c <HAL_SD_MspInit+0x1dc>)
 8005094:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005096:	4b28      	ldr	r3, [pc, #160]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 8005098:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800509c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800509e:	4b26      	ldr	r3, [pc, #152]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 80050a0:	2240      	movs	r2, #64	; 0x40
 80050a2:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050a4:	4b24      	ldr	r3, [pc, #144]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050aa:	4b23      	ldr	r3, [pc, #140]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 80050ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050b0:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80050b2:	4b21      	ldr	r3, [pc, #132]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 80050b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050b8:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80050ba:	4b1f      	ldr	r3, [pc, #124]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 80050bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050c0:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80050c2:	4b1d      	ldr	r3, [pc, #116]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 80050c4:	2220      	movs	r2, #32
 80050c6:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80050c8:	4b1b      	ldr	r3, [pc, #108]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80050ce:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 80050d0:	2204      	movs	r2, #4
 80050d2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80050d4:	4b18      	ldr	r3, [pc, #96]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 80050d6:	2203      	movs	r2, #3
 80050d8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80050da:	4b17      	ldr	r3, [pc, #92]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 80050dc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80050e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80050e2:	4b15      	ldr	r3, [pc, #84]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 80050e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80050ea:	4813      	ldr	r0, [pc, #76]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 80050ec:	f001 ff32 	bl	8006f54 <HAL_DMA_Init>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80050f6:	f7ff ff09 	bl	8004f0c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a0e      	ldr	r2, [pc, #56]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 80050fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8005100:	4a0d      	ldr	r2, [pc, #52]	; (8005138 <HAL_SD_MspInit+0x1d8>)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 11, 0);
 8005106:	2200      	movs	r2, #0
 8005108:	210b      	movs	r1, #11
 800510a:	2031      	movs	r0, #49	; 0x31
 800510c:	f001 fef8 	bl	8006f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005110:	2031      	movs	r0, #49	; 0x31
 8005112:	f001 ff11 	bl	8006f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8005116:	bf00      	nop
 8005118:	3728      	adds	r7, #40	; 0x28
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40012c00 	.word	0x40012c00
 8005124:	40023800 	.word	0x40023800
 8005128:	40020800 	.word	0x40020800
 800512c:	40020c00 	.word	0x40020c00
 8005130:	2000473c 	.word	0x2000473c
 8005134:	40026458 	.word	0x40026458
 8005138:	2000479c 	.word	0x2000479c
 800513c:	400264a0 	.word	0x400264a0

08005140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005146:	2300      	movs	r3, #0
 8005148:	607b      	str	r3, [r7, #4]
 800514a:	4b12      	ldr	r3, [pc, #72]	; (8005194 <HAL_MspInit+0x54>)
 800514c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514e:	4a11      	ldr	r2, [pc, #68]	; (8005194 <HAL_MspInit+0x54>)
 8005150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005154:	6453      	str	r3, [r2, #68]	; 0x44
 8005156:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <HAL_MspInit+0x54>)
 8005158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515e:	607b      	str	r3, [r7, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005162:	2300      	movs	r3, #0
 8005164:	603b      	str	r3, [r7, #0]
 8005166:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <HAL_MspInit+0x54>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	4a0a      	ldr	r2, [pc, #40]	; (8005194 <HAL_MspInit+0x54>)
 800516c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005170:	6413      	str	r3, [r2, #64]	; 0x40
 8005172:	4b08      	ldr	r3, [pc, #32]	; (8005194 <HAL_MspInit+0x54>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800517e:	2200      	movs	r2, #0
 8005180:	210f      	movs	r1, #15
 8005182:	f06f 0001 	mvn.w	r0, #1
 8005186:	f001 febb 	bl	8006f00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40023800 	.word	0x40023800

08005198 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08c      	sub	sp, #48	; 0x30
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80051a8:	2200      	movs	r2, #0
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	201c      	movs	r0, #28
 80051ae:	f001 fea7 	bl	8006f00 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80051b2:	201c      	movs	r0, #28
 80051b4:	f001 fec0 	bl	8006f38 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	4b20      	ldr	r3, [pc, #128]	; (8005240 <HAL_InitTick+0xa8>)
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <HAL_InitTick+0xa8>)
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	6413      	str	r3, [r2, #64]	; 0x40
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <HAL_InitTick+0xa8>)
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80051d4:	f107 0210 	add.w	r2, r7, #16
 80051d8:	f107 0314 	add.w	r3, r7, #20
 80051dc:	4611      	mov	r1, r2
 80051de:	4618      	mov	r0, r3
 80051e0:	f004 fe58 	bl	8009e94 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80051e4:	f004 fe2e 	bl	8009e44 <HAL_RCC_GetPCLK1Freq>
 80051e8:	4603      	mov	r3, r0
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80051ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f0:	4a14      	ldr	r2, [pc, #80]	; (8005244 <HAL_InitTick+0xac>)
 80051f2:	fba2 2303 	umull	r2, r3, r2, r3
 80051f6:	0c9b      	lsrs	r3, r3, #18
 80051f8:	3b01      	subs	r3, #1
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80051fc:	4b12      	ldr	r3, [pc, #72]	; (8005248 <HAL_InitTick+0xb0>)
 80051fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005202:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8005204:	4b10      	ldr	r3, [pc, #64]	; (8005248 <HAL_InitTick+0xb0>)
 8005206:	f240 32e7 	movw	r2, #999	; 0x3e7
 800520a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800520c:	4a0e      	ldr	r2, [pc, #56]	; (8005248 <HAL_InitTick+0xb0>)
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8005212:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <HAL_InitTick+0xb0>)
 8005214:	2200      	movs	r2, #0
 8005216:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <HAL_InitTick+0xb0>)
 800521a:	2200      	movs	r2, #0
 800521c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800521e:	480a      	ldr	r0, [pc, #40]	; (8005248 <HAL_InitTick+0xb0>)
 8005220:	f005 ff96 	bl	800b150 <HAL_TIM_Base_Init>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d104      	bne.n	8005234 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800522a:	4807      	ldr	r0, [pc, #28]	; (8005248 <HAL_InitTick+0xb0>)
 800522c:	f005 ffe0 	bl	800b1f0 <HAL_TIM_Base_Start_IT>
 8005230:	4603      	mov	r3, r0
 8005232:	e000      	b.n	8005236 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
}
 8005236:	4618      	mov	r0, r3
 8005238:	3730      	adds	r7, #48	; 0x30
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40023800 	.word	0x40023800
 8005244:	431bde83 	.word	0x431bde83
 8005248:	20004880 	.word	0x20004880

0800524c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005250:	e7fe      	b.n	8005250 <NMI_Handler+0x4>

08005252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005252:	b480      	push	{r7}
 8005254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005256:	e7fe      	b.n	8005256 <HardFault_Handler+0x4>

08005258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800525c:	e7fe      	b.n	800525c <MemManage_Handler+0x4>

0800525e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800525e:	b480      	push	{r7}
 8005260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005262:	e7fe      	b.n	8005262 <BusFault_Handler+0x4>

08005264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005268:	e7fe      	b.n	8005268 <UsageFault_Handler+0x4>

0800526a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800526a:	b480      	push	{r7}
 800526c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800526e:	bf00      	nop
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800527c:	4802      	ldr	r0, [pc, #8]	; (8005288 <DMA1_Stream1_IRQHandler+0x10>)
 800527e:	f002 f801 	bl	8007284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005282:	bf00      	nop
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20004958 	.word	0x20004958

0800528c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005290:	4802      	ldr	r0, [pc, #8]	; (800529c <TIM2_IRQHandler+0x10>)
 8005292:	f006 f93f 	bl	800b514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005296:	bf00      	nop
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20004880 	.word	0x20004880

080052a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80052a4:	4802      	ldr	r0, [pc, #8]	; (80052b0 <TIM4_IRQHandler+0x10>)
 80052a6:	f006 f935 	bl	800b514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	200048c8 	.word	0x200048c8

080052b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80052b8:	4802      	ldr	r0, [pc, #8]	; (80052c4 <USART1_IRQHandler+0x10>)
 80052ba:	f007 f943 	bl	800c544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80052be:	bf00      	nop
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20004a5c 	.word	0x20004a5c

080052c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80052cc:	4802      	ldr	r0, [pc, #8]	; (80052d8 <USART2_IRQHandler+0x10>)
 80052ce:	f007 f939 	bl	800c544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80052d2:	bf00      	nop
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20004aa0 	.word	0x20004aa0

080052dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80052e0:	4802      	ldr	r0, [pc, #8]	; (80052ec <USART3_IRQHandler+0x10>)
 80052e2:	f007 f92f 	bl	800c544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	200049b8 	.word	0x200049b8

080052f0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80052f4:	4802      	ldr	r0, [pc, #8]	; (8005300 <SDIO_IRQHandler+0x10>)
 80052f6:	f005 f875 	bl	800a3e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80052fa:	bf00      	nop
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	200047fc 	.word	0x200047fc

08005304 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8005308:	4802      	ldr	r0, [pc, #8]	; (8005314 <DMA2_Stream3_IRQHandler+0x10>)
 800530a:	f001 ffbb 	bl	8007284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800530e:	bf00      	nop
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	2000473c 	.word	0x2000473c

08005318 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800531c:	4802      	ldr	r0, [pc, #8]	; (8005328 <DMA2_Stream6_IRQHandler+0x10>)
 800531e:	f001 ffb1 	bl	8007284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005322:	bf00      	nop
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	2000479c 	.word	0x2000479c

0800532c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005330:	4802      	ldr	r0, [pc, #8]	; (800533c <DMA2_Stream7_IRQHandler+0x10>)
 8005332:	f001 ffa7 	bl	8007284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005336:	bf00      	nop
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	200049fc 	.word	0x200049fc

08005340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005348:	4a14      	ldr	r2, [pc, #80]	; (800539c <_sbrk+0x5c>)
 800534a:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <_sbrk+0x60>)
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005354:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <_sbrk+0x64>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d102      	bne.n	8005362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800535c:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <_sbrk+0x64>)
 800535e:	4a12      	ldr	r2, [pc, #72]	; (80053a8 <_sbrk+0x68>)
 8005360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005362:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <_sbrk+0x64>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4413      	add	r3, r2
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	429a      	cmp	r2, r3
 800536e:	d207      	bcs.n	8005380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005370:	f00f fb04 	bl	801497c <__errno>
 8005374:	4603      	mov	r3, r0
 8005376:	220c      	movs	r2, #12
 8005378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800537a:	f04f 33ff 	mov.w	r3, #4294967295
 800537e:	e009      	b.n	8005394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005380:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <_sbrk+0x64>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005386:	4b07      	ldr	r3, [pc, #28]	; (80053a4 <_sbrk+0x64>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4413      	add	r3, r2
 800538e:	4a05      	ldr	r2, [pc, #20]	; (80053a4 <_sbrk+0x64>)
 8005390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005392:	68fb      	ldr	r3, [r7, #12]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20020000 	.word	0x20020000
 80053a0:	00002000 	.word	0x00002000
 80053a4:	20000254 	.word	0x20000254
 80053a8:	200050b0 	.word	0x200050b0

080053ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053b0:	4b06      	ldr	r3, [pc, #24]	; (80053cc <SystemInit+0x20>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b6:	4a05      	ldr	r2, [pc, #20]	; (80053cc <SystemInit+0x20>)
 80053b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053c0:	bf00      	nop
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	e000ed00 	.word	0xe000ed00

080053d0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08e      	sub	sp, #56	; 0x38
 80053d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	605a      	str	r2, [r3, #4]
 80053e0:	609a      	str	r2, [r3, #8]
 80053e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053e4:	f107 0320 	add.w	r3, r7, #32
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053ee:	1d3b      	adds	r3, r7, #4
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	609a      	str	r2, [r3, #8]
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	611a      	str	r2, [r3, #16]
 80053fc:	615a      	str	r2, [r3, #20]
 80053fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005400:	4b37      	ldr	r3, [pc, #220]	; (80054e0 <MX_TIM3_Init+0x110>)
 8005402:	4a38      	ldr	r2, [pc, #224]	; (80054e4 <MX_TIM3_Init+0x114>)
 8005404:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8005406:	4b36      	ldr	r3, [pc, #216]	; (80054e0 <MX_TIM3_Init+0x110>)
 8005408:	2247      	movs	r2, #71	; 0x47
 800540a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800540c:	4b34      	ldr	r3, [pc, #208]	; (80054e0 <MX_TIM3_Init+0x110>)
 800540e:	2200      	movs	r2, #0
 8005410:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005412:	4b33      	ldr	r3, [pc, #204]	; (80054e0 <MX_TIM3_Init+0x110>)
 8005414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005418:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800541a:	4b31      	ldr	r3, [pc, #196]	; (80054e0 <MX_TIM3_Init+0x110>)
 800541c:	2200      	movs	r2, #0
 800541e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005420:	4b2f      	ldr	r3, [pc, #188]	; (80054e0 <MX_TIM3_Init+0x110>)
 8005422:	2200      	movs	r2, #0
 8005424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005426:	482e      	ldr	r0, [pc, #184]	; (80054e0 <MX_TIM3_Init+0x110>)
 8005428:	f005 fe92 	bl	800b150 <HAL_TIM_Base_Init>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005432:	f7ff fd6b 	bl	8004f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800543c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005440:	4619      	mov	r1, r3
 8005442:	4827      	ldr	r0, [pc, #156]	; (80054e0 <MX_TIM3_Init+0x110>)
 8005444:	f006 fa30 	bl	800b8a8 <HAL_TIM_ConfigClockSource>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800544e:	f7ff fd5d 	bl	8004f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005452:	4823      	ldr	r0, [pc, #140]	; (80054e0 <MX_TIM3_Init+0x110>)
 8005454:	f005 ff3c 	bl	800b2d0 <HAL_TIM_PWM_Init>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800545e:	f7ff fd55 	bl	8004f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005462:	2300      	movs	r3, #0
 8005464:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005466:	2300      	movs	r3, #0
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800546a:	f107 0320 	add.w	r3, r7, #32
 800546e:	4619      	mov	r1, r3
 8005470:	481b      	ldr	r0, [pc, #108]	; (80054e0 <MX_TIM3_Init+0x110>)
 8005472:	f006 fe19 	bl	800c0a8 <HAL_TIMEx_MasterConfigSynchronization>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800547c:	f7ff fd46 	bl	8004f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005480:	2360      	movs	r3, #96	; 0x60
 8005482:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800548c:	2300      	movs	r3, #0
 800548e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005490:	1d3b      	adds	r3, r7, #4
 8005492:	2200      	movs	r2, #0
 8005494:	4619      	mov	r1, r3
 8005496:	4812      	ldr	r0, [pc, #72]	; (80054e0 <MX_TIM3_Init+0x110>)
 8005498:	f006 f944 	bl	800b724 <HAL_TIM_PWM_ConfigChannel>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80054a2:	f7ff fd33 	bl	8004f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80054a6:	1d3b      	adds	r3, r7, #4
 80054a8:	2204      	movs	r2, #4
 80054aa:	4619      	mov	r1, r3
 80054ac:	480c      	ldr	r0, [pc, #48]	; (80054e0 <MX_TIM3_Init+0x110>)
 80054ae:	f006 f939 	bl	800b724 <HAL_TIM_PWM_ConfigChannel>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80054b8:	f7ff fd28 	bl	8004f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80054bc:	1d3b      	adds	r3, r7, #4
 80054be:	2208      	movs	r2, #8
 80054c0:	4619      	mov	r1, r3
 80054c2:	4807      	ldr	r0, [pc, #28]	; (80054e0 <MX_TIM3_Init+0x110>)
 80054c4:	f006 f92e 	bl	800b724 <HAL_TIM_PWM_ConfigChannel>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80054ce:	f7ff fd1d 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80054d2:	4803      	ldr	r0, [pc, #12]	; (80054e0 <MX_TIM3_Init+0x110>)
 80054d4:	f000 f894 	bl	8005600 <HAL_TIM_MspPostInit>

}
 80054d8:	bf00      	nop
 80054da:	3738      	adds	r7, #56	; 0x38
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20004910 	.word	0x20004910
 80054e4:	40000400 	.word	0x40000400

080054e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054ee:	f107 0308 	add.w	r3, r7, #8
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	605a      	str	r2, [r3, #4]
 80054f8:	609a      	str	r2, [r3, #8]
 80054fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054fc:	463b      	mov	r3, r7
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005504:	4b1d      	ldr	r3, [pc, #116]	; (800557c <MX_TIM4_Init+0x94>)
 8005506:	4a1e      	ldr	r2, [pc, #120]	; (8005580 <MX_TIM4_Init+0x98>)
 8005508:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800550a:	4b1c      	ldr	r3, [pc, #112]	; (800557c <MX_TIM4_Init+0x94>)
 800550c:	2247      	movs	r2, #71	; 0x47
 800550e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005510:	4b1a      	ldr	r3, [pc, #104]	; (800557c <MX_TIM4_Init+0x94>)
 8005512:	2200      	movs	r2, #0
 8005514:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005516:	4b19      	ldr	r3, [pc, #100]	; (800557c <MX_TIM4_Init+0x94>)
 8005518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800551c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800551e:	4b17      	ldr	r3, [pc, #92]	; (800557c <MX_TIM4_Init+0x94>)
 8005520:	2200      	movs	r2, #0
 8005522:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005524:	4b15      	ldr	r3, [pc, #84]	; (800557c <MX_TIM4_Init+0x94>)
 8005526:	2280      	movs	r2, #128	; 0x80
 8005528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800552a:	4814      	ldr	r0, [pc, #80]	; (800557c <MX_TIM4_Init+0x94>)
 800552c:	f005 fe10 	bl	800b150 <HAL_TIM_Base_Init>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8005536:	f7ff fce9 	bl	8004f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800553a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800553e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005540:	f107 0308 	add.w	r3, r7, #8
 8005544:	4619      	mov	r1, r3
 8005546:	480d      	ldr	r0, [pc, #52]	; (800557c <MX_TIM4_Init+0x94>)
 8005548:	f006 f9ae 	bl	800b8a8 <HAL_TIM_ConfigClockSource>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8005552:	f7ff fcdb 	bl	8004f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005556:	2300      	movs	r3, #0
 8005558:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800555a:	2300      	movs	r3, #0
 800555c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800555e:	463b      	mov	r3, r7
 8005560:	4619      	mov	r1, r3
 8005562:	4806      	ldr	r0, [pc, #24]	; (800557c <MX_TIM4_Init+0x94>)
 8005564:	f006 fda0 	bl	800c0a8 <HAL_TIMEx_MasterConfigSynchronization>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800556e:	f7ff fccd 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005572:	bf00      	nop
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	200048c8 	.word	0x200048c8
 8005580:	40000800 	.word	0x40000800

08005584 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <HAL_TIM_Base_MspInit+0x70>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d10e      	bne.n	80055b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <HAL_TIM_Base_MspInit+0x74>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <HAL_TIM_Base_MspInit+0x74>)
 80055a0:	f043 0302 	orr.w	r3, r3, #2
 80055a4:	6413      	str	r3, [r2, #64]	; 0x40
 80055a6:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <HAL_TIM_Base_MspInit+0x74>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80055b2:	e01a      	b.n	80055ea <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a10      	ldr	r2, [pc, #64]	; (80055fc <HAL_TIM_Base_MspInit+0x78>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d115      	bne.n	80055ea <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80055be:	2300      	movs	r3, #0
 80055c0:	60bb      	str	r3, [r7, #8]
 80055c2:	4b0d      	ldr	r3, [pc, #52]	; (80055f8 <HAL_TIM_Base_MspInit+0x74>)
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	4a0c      	ldr	r2, [pc, #48]	; (80055f8 <HAL_TIM_Base_MspInit+0x74>)
 80055c8:	f043 0304 	orr.w	r3, r3, #4
 80055cc:	6413      	str	r3, [r2, #64]	; 0x40
 80055ce:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <HAL_TIM_Base_MspInit+0x74>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	60bb      	str	r3, [r7, #8]
 80055d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80055da:	2200      	movs	r2, #0
 80055dc:	2105      	movs	r1, #5
 80055de:	201e      	movs	r0, #30
 80055e0:	f001 fc8e 	bl	8006f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80055e4:	201e      	movs	r0, #30
 80055e6:	f001 fca7 	bl	8006f38 <HAL_NVIC_EnableIRQ>
}
 80055ea:	bf00      	nop
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40000400 	.word	0x40000400
 80055f8:	40023800 	.word	0x40023800
 80055fc:	40000800 	.word	0x40000800

08005600 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08a      	sub	sp, #40	; 0x28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005608:	f107 0314 	add.w	r3, r7, #20
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	605a      	str	r2, [r3, #4]
 8005612:	609a      	str	r2, [r3, #8]
 8005614:	60da      	str	r2, [r3, #12]
 8005616:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a21      	ldr	r2, [pc, #132]	; (80056a4 <HAL_TIM_MspPostInit+0xa4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d13b      	bne.n	800569a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005622:	2300      	movs	r3, #0
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	4b20      	ldr	r3, [pc, #128]	; (80056a8 <HAL_TIM_MspPostInit+0xa8>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	4a1f      	ldr	r2, [pc, #124]	; (80056a8 <HAL_TIM_MspPostInit+0xa8>)
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	6313      	str	r3, [r2, #48]	; 0x30
 8005632:	4b1d      	ldr	r3, [pc, #116]	; (80056a8 <HAL_TIM_MspPostInit+0xa8>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	4b19      	ldr	r3, [pc, #100]	; (80056a8 <HAL_TIM_MspPostInit+0xa8>)
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <HAL_TIM_MspPostInit+0xa8>)
 8005648:	f043 0302 	orr.w	r3, r3, #2
 800564c:	6313      	str	r3, [r2, #48]	; 0x30
 800564e:	4b16      	ldr	r3, [pc, #88]	; (80056a8 <HAL_TIM_MspPostInit+0xa8>)
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800565a:	23c0      	movs	r3, #192	; 0xc0
 800565c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800565e:	2302      	movs	r3, #2
 8005660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005662:	2300      	movs	r3, #0
 8005664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005666:	2300      	movs	r3, #0
 8005668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800566a:	2302      	movs	r3, #2
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800566e:	f107 0314 	add.w	r3, r7, #20
 8005672:	4619      	mov	r1, r3
 8005674:	480d      	ldr	r0, [pc, #52]	; (80056ac <HAL_TIM_MspPostInit+0xac>)
 8005676:	f002 f87b 	bl	8007770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800567a:	2301      	movs	r3, #1
 800567c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800567e:	2302      	movs	r3, #2
 8005680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005682:	2300      	movs	r3, #0
 8005684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005686:	2300      	movs	r3, #0
 8005688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800568a:	2302      	movs	r3, #2
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800568e:	f107 0314 	add.w	r3, r7, #20
 8005692:	4619      	mov	r1, r3
 8005694:	4806      	ldr	r0, [pc, #24]	; (80056b0 <HAL_TIM_MspPostInit+0xb0>)
 8005696:	f002 f86b 	bl	8007770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800569a:	bf00      	nop
 800569c:	3728      	adds	r7, #40	; 0x28
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40000400 	.word	0x40000400
 80056a8:	40023800 	.word	0x40023800
 80056ac:	40020000 	.word	0x40020000
 80056b0:	40020400 	.word	0x40020400

080056b4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80056b8:	4b11      	ldr	r3, [pc, #68]	; (8005700 <MX_USART1_UART_Init+0x4c>)
 80056ba:	4a12      	ldr	r2, [pc, #72]	; (8005704 <MX_USART1_UART_Init+0x50>)
 80056bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80056be:	4b10      	ldr	r3, [pc, #64]	; (8005700 <MX_USART1_UART_Init+0x4c>)
 80056c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80056c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80056c6:	4b0e      	ldr	r3, [pc, #56]	; (8005700 <MX_USART1_UART_Init+0x4c>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80056cc:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <MX_USART1_UART_Init+0x4c>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80056d2:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <MX_USART1_UART_Init+0x4c>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80056d8:	4b09      	ldr	r3, [pc, #36]	; (8005700 <MX_USART1_UART_Init+0x4c>)
 80056da:	220c      	movs	r2, #12
 80056dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056de:	4b08      	ldr	r3, [pc, #32]	; (8005700 <MX_USART1_UART_Init+0x4c>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80056e4:	4b06      	ldr	r3, [pc, #24]	; (8005700 <MX_USART1_UART_Init+0x4c>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80056ea:	4805      	ldr	r0, [pc, #20]	; (8005700 <MX_USART1_UART_Init+0x4c>)
 80056ec:	f006 fd6c 	bl	800c1c8 <HAL_UART_Init>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80056f6:	f7ff fc09 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80056fa:	bf00      	nop
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20004a5c 	.word	0x20004a5c
 8005704:	40011000 	.word	0x40011000

08005708 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800570c:	4b11      	ldr	r3, [pc, #68]	; (8005754 <MX_USART2_UART_Init+0x4c>)
 800570e:	4a12      	ldr	r2, [pc, #72]	; (8005758 <MX_USART2_UART_Init+0x50>)
 8005710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005712:	4b10      	ldr	r3, [pc, #64]	; (8005754 <MX_USART2_UART_Init+0x4c>)
 8005714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800571a:	4b0e      	ldr	r3, [pc, #56]	; (8005754 <MX_USART2_UART_Init+0x4c>)
 800571c:	2200      	movs	r2, #0
 800571e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005720:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <MX_USART2_UART_Init+0x4c>)
 8005722:	2200      	movs	r2, #0
 8005724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005726:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <MX_USART2_UART_Init+0x4c>)
 8005728:	2200      	movs	r2, #0
 800572a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800572c:	4b09      	ldr	r3, [pc, #36]	; (8005754 <MX_USART2_UART_Init+0x4c>)
 800572e:	220c      	movs	r2, #12
 8005730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005732:	4b08      	ldr	r3, [pc, #32]	; (8005754 <MX_USART2_UART_Init+0x4c>)
 8005734:	2200      	movs	r2, #0
 8005736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005738:	4b06      	ldr	r3, [pc, #24]	; (8005754 <MX_USART2_UART_Init+0x4c>)
 800573a:	2200      	movs	r2, #0
 800573c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800573e:	4805      	ldr	r0, [pc, #20]	; (8005754 <MX_USART2_UART_Init+0x4c>)
 8005740:	f006 fd42 	bl	800c1c8 <HAL_UART_Init>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800574a:	f7ff fbdf 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800574e:	bf00      	nop
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20004aa0 	.word	0x20004aa0
 8005758:	40004400 	.word	0x40004400

0800575c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005760:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <MX_USART3_UART_Init+0x4c>)
 8005762:	4a12      	ldr	r2, [pc, #72]	; (80057ac <MX_USART3_UART_Init+0x50>)
 8005764:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005766:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <MX_USART3_UART_Init+0x4c>)
 8005768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800576c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800576e:	4b0e      	ldr	r3, [pc, #56]	; (80057a8 <MX_USART3_UART_Init+0x4c>)
 8005770:	2200      	movs	r2, #0
 8005772:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005774:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <MX_USART3_UART_Init+0x4c>)
 8005776:	2200      	movs	r2, #0
 8005778:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800577a:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <MX_USART3_UART_Init+0x4c>)
 800577c:	2200      	movs	r2, #0
 800577e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005780:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <MX_USART3_UART_Init+0x4c>)
 8005782:	220c      	movs	r2, #12
 8005784:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005786:	4b08      	ldr	r3, [pc, #32]	; (80057a8 <MX_USART3_UART_Init+0x4c>)
 8005788:	2200      	movs	r2, #0
 800578a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800578c:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <MX_USART3_UART_Init+0x4c>)
 800578e:	2200      	movs	r2, #0
 8005790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005792:	4805      	ldr	r0, [pc, #20]	; (80057a8 <MX_USART3_UART_Init+0x4c>)
 8005794:	f006 fd18 	bl	800c1c8 <HAL_UART_Init>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800579e:	f7ff fbb5 	bl	8004f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80057a2:	bf00      	nop
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	200049b8 	.word	0x200049b8
 80057ac:	40004800 	.word	0x40004800

080057b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08e      	sub	sp, #56	; 0x38
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	605a      	str	r2, [r3, #4]
 80057c2:	609a      	str	r2, [r3, #8]
 80057c4:	60da      	str	r2, [r3, #12]
 80057c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a86      	ldr	r2, [pc, #536]	; (80059e8 <HAL_UART_MspInit+0x238>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d163      	bne.n	800589a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80057d2:	2300      	movs	r3, #0
 80057d4:	623b      	str	r3, [r7, #32]
 80057d6:	4b85      	ldr	r3, [pc, #532]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80057d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057da:	4a84      	ldr	r2, [pc, #528]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80057dc:	f043 0310 	orr.w	r3, r3, #16
 80057e0:	6453      	str	r3, [r2, #68]	; 0x44
 80057e2:	4b82      	ldr	r3, [pc, #520]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80057e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e6:	f003 0310 	and.w	r3, r3, #16
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ee:	2300      	movs	r3, #0
 80057f0:	61fb      	str	r3, [r7, #28]
 80057f2:	4b7e      	ldr	r3, [pc, #504]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	4a7d      	ldr	r2, [pc, #500]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	6313      	str	r3, [r2, #48]	; 0x30
 80057fe:	4b7b      	ldr	r3, [pc, #492]	; (80059ec <HAL_UART_MspInit+0x23c>)
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800580a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005810:	2302      	movs	r3, #2
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005814:	2300      	movs	r3, #0
 8005816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005818:	2303      	movs	r3, #3
 800581a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800581c:	2307      	movs	r3, #7
 800581e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005824:	4619      	mov	r1, r3
 8005826:	4872      	ldr	r0, [pc, #456]	; (80059f0 <HAL_UART_MspInit+0x240>)
 8005828:	f001 ffa2 	bl	8007770 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800582c:	4b71      	ldr	r3, [pc, #452]	; (80059f4 <HAL_UART_MspInit+0x244>)
 800582e:	4a72      	ldr	r2, [pc, #456]	; (80059f8 <HAL_UART_MspInit+0x248>)
 8005830:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005832:	4b70      	ldr	r3, [pc, #448]	; (80059f4 <HAL_UART_MspInit+0x244>)
 8005834:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005838:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800583a:	4b6e      	ldr	r3, [pc, #440]	; (80059f4 <HAL_UART_MspInit+0x244>)
 800583c:	2240      	movs	r2, #64	; 0x40
 800583e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005840:	4b6c      	ldr	r3, [pc, #432]	; (80059f4 <HAL_UART_MspInit+0x244>)
 8005842:	2200      	movs	r2, #0
 8005844:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005846:	4b6b      	ldr	r3, [pc, #428]	; (80059f4 <HAL_UART_MspInit+0x244>)
 8005848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800584c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800584e:	4b69      	ldr	r3, [pc, #420]	; (80059f4 <HAL_UART_MspInit+0x244>)
 8005850:	2200      	movs	r2, #0
 8005852:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005854:	4b67      	ldr	r3, [pc, #412]	; (80059f4 <HAL_UART_MspInit+0x244>)
 8005856:	2200      	movs	r2, #0
 8005858:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800585a:	4b66      	ldr	r3, [pc, #408]	; (80059f4 <HAL_UART_MspInit+0x244>)
 800585c:	2200      	movs	r2, #0
 800585e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005860:	4b64      	ldr	r3, [pc, #400]	; (80059f4 <HAL_UART_MspInit+0x244>)
 8005862:	2200      	movs	r2, #0
 8005864:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005866:	4b63      	ldr	r3, [pc, #396]	; (80059f4 <HAL_UART_MspInit+0x244>)
 8005868:	2200      	movs	r2, #0
 800586a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800586c:	4861      	ldr	r0, [pc, #388]	; (80059f4 <HAL_UART_MspInit+0x244>)
 800586e:	f001 fb71 	bl	8006f54 <HAL_DMA_Init>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005878:	f7ff fb48 	bl	8004f0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a5d      	ldr	r2, [pc, #372]	; (80059f4 <HAL_UART_MspInit+0x244>)
 8005880:	635a      	str	r2, [r3, #52]	; 0x34
 8005882:	4a5c      	ldr	r2, [pc, #368]	; (80059f4 <HAL_UART_MspInit+0x244>)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005888:	2200      	movs	r2, #0
 800588a:	2105      	movs	r1, #5
 800588c:	2025      	movs	r0, #37	; 0x25
 800588e:	f001 fb37 	bl	8006f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005892:	2025      	movs	r0, #37	; 0x25
 8005894:	f001 fb50 	bl	8006f38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005898:	e0a1      	b.n	80059de <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART2)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a57      	ldr	r2, [pc, #348]	; (80059fc <HAL_UART_MspInit+0x24c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d134      	bne.n	800590e <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80058a4:	2300      	movs	r3, #0
 80058a6:	61bb      	str	r3, [r7, #24]
 80058a8:	4b50      	ldr	r3, [pc, #320]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	4a4f      	ldr	r2, [pc, #316]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b2:	6413      	str	r3, [r2, #64]	; 0x40
 80058b4:	4b4d      	ldr	r3, [pc, #308]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	4b49      	ldr	r3, [pc, #292]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	4a48      	ldr	r2, [pc, #288]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	6313      	str	r3, [r2, #48]	; 0x30
 80058d0:	4b46      	ldr	r3, [pc, #280]	; (80059ec <HAL_UART_MspInit+0x23c>)
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80058dc:	230c      	movs	r3, #12
 80058de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058e0:	2302      	movs	r3, #2
 80058e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058e4:	2300      	movs	r3, #0
 80058e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058e8:	2303      	movs	r3, #3
 80058ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80058ec:	2307      	movs	r3, #7
 80058ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058f4:	4619      	mov	r1, r3
 80058f6:	483e      	ldr	r0, [pc, #248]	; (80059f0 <HAL_UART_MspInit+0x240>)
 80058f8:	f001 ff3a 	bl	8007770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 80058fc:	2200      	movs	r2, #0
 80058fe:	210a      	movs	r1, #10
 8005900:	2026      	movs	r0, #38	; 0x26
 8005902:	f001 fafd 	bl	8006f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005906:	2026      	movs	r0, #38	; 0x26
 8005908:	f001 fb16 	bl	8006f38 <HAL_NVIC_EnableIRQ>
}
 800590c:	e067      	b.n	80059de <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART3)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a3b      	ldr	r2, [pc, #236]	; (8005a00 <HAL_UART_MspInit+0x250>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d162      	bne.n	80059de <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005918:	2300      	movs	r3, #0
 800591a:	613b      	str	r3, [r7, #16]
 800591c:	4b33      	ldr	r3, [pc, #204]	; (80059ec <HAL_UART_MspInit+0x23c>)
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	4a32      	ldr	r2, [pc, #200]	; (80059ec <HAL_UART_MspInit+0x23c>)
 8005922:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005926:	6413      	str	r3, [r2, #64]	; 0x40
 8005928:	4b30      	ldr	r3, [pc, #192]	; (80059ec <HAL_UART_MspInit+0x23c>)
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	4b2c      	ldr	r3, [pc, #176]	; (80059ec <HAL_UART_MspInit+0x23c>)
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	4a2b      	ldr	r2, [pc, #172]	; (80059ec <HAL_UART_MspInit+0x23c>)
 800593e:	f043 0308 	orr.w	r3, r3, #8
 8005942:	6313      	str	r3, [r2, #48]	; 0x30
 8005944:	4b29      	ldr	r3, [pc, #164]	; (80059ec <HAL_UART_MspInit+0x23c>)
 8005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005950:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005956:	2302      	movs	r3, #2
 8005958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595a:	2300      	movs	r3, #0
 800595c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800595e:	2303      	movs	r3, #3
 8005960:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005962:	2307      	movs	r3, #7
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800596a:	4619      	mov	r1, r3
 800596c:	4825      	ldr	r0, [pc, #148]	; (8005a04 <HAL_UART_MspInit+0x254>)
 800596e:	f001 feff 	bl	8007770 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005972:	4b25      	ldr	r3, [pc, #148]	; (8005a08 <HAL_UART_MspInit+0x258>)
 8005974:	4a25      	ldr	r2, [pc, #148]	; (8005a0c <HAL_UART_MspInit+0x25c>)
 8005976:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005978:	4b23      	ldr	r3, [pc, #140]	; (8005a08 <HAL_UART_MspInit+0x258>)
 800597a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800597e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005980:	4b21      	ldr	r3, [pc, #132]	; (8005a08 <HAL_UART_MspInit+0x258>)
 8005982:	2200      	movs	r2, #0
 8005984:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005986:	4b20      	ldr	r3, [pc, #128]	; (8005a08 <HAL_UART_MspInit+0x258>)
 8005988:	2200      	movs	r2, #0
 800598a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800598c:	4b1e      	ldr	r3, [pc, #120]	; (8005a08 <HAL_UART_MspInit+0x258>)
 800598e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005992:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005994:	4b1c      	ldr	r3, [pc, #112]	; (8005a08 <HAL_UART_MspInit+0x258>)
 8005996:	2200      	movs	r2, #0
 8005998:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800599a:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <HAL_UART_MspInit+0x258>)
 800599c:	2200      	movs	r2, #0
 800599e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80059a0:	4b19      	ldr	r3, [pc, #100]	; (8005a08 <HAL_UART_MspInit+0x258>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80059a6:	4b18      	ldr	r3, [pc, #96]	; (8005a08 <HAL_UART_MspInit+0x258>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059ac:	4b16      	ldr	r3, [pc, #88]	; (8005a08 <HAL_UART_MspInit+0x258>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80059b2:	4815      	ldr	r0, [pc, #84]	; (8005a08 <HAL_UART_MspInit+0x258>)
 80059b4:	f001 face 	bl	8006f54 <HAL_DMA_Init>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <HAL_UART_MspInit+0x212>
      Error_Handler();
 80059be:	f7ff faa5 	bl	8004f0c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a10      	ldr	r2, [pc, #64]	; (8005a08 <HAL_UART_MspInit+0x258>)
 80059c6:	639a      	str	r2, [r3, #56]	; 0x38
 80059c8:	4a0f      	ldr	r2, [pc, #60]	; (8005a08 <HAL_UART_MspInit+0x258>)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 10, 0);
 80059ce:	2200      	movs	r2, #0
 80059d0:	210a      	movs	r1, #10
 80059d2:	2027      	movs	r0, #39	; 0x27
 80059d4:	f001 fa94 	bl	8006f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80059d8:	2027      	movs	r0, #39	; 0x27
 80059da:	f001 faad 	bl	8006f38 <HAL_NVIC_EnableIRQ>
}
 80059de:	bf00      	nop
 80059e0:	3738      	adds	r7, #56	; 0x38
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	40011000 	.word	0x40011000
 80059ec:	40023800 	.word	0x40023800
 80059f0:	40020000 	.word	0x40020000
 80059f4:	200049fc 	.word	0x200049fc
 80059f8:	400264b8 	.word	0x400264b8
 80059fc:	40004400 	.word	0x40004400
 8005a00:	40004800 	.word	0x40004800
 8005a04:	40020c00 	.word	0x40020c00
 8005a08:	20004958 	.word	0x20004958
 8005a0c:	40026028 	.word	0x40026028

08005a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005a14:	480d      	ldr	r0, [pc, #52]	; (8005a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005a16:	490e      	ldr	r1, [pc, #56]	; (8005a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005a18:	4a0e      	ldr	r2, [pc, #56]	; (8005a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a1c:	e002      	b.n	8005a24 <LoopCopyDataInit>

08005a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a22:	3304      	adds	r3, #4

08005a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a28:	d3f9      	bcc.n	8005a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a2a:	4a0b      	ldr	r2, [pc, #44]	; (8005a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005a2c:	4c0b      	ldr	r4, [pc, #44]	; (8005a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8005a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a30:	e001      	b.n	8005a36 <LoopFillZerobss>

08005a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a34:	3204      	adds	r2, #4

08005a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a38:	d3fb      	bcc.n	8005a32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005a3a:	f7ff fcb7 	bl	80053ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a3e:	f00e ffa3 	bl	8014988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a42:	f7ff f9b9 	bl	8004db8 <main>
  bx  lr    
 8005a46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a50:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8005a54:	08015e20 	.word	0x08015e20
  ldr r2, =_sbss
 8005a58:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8005a5c:	200050b0 	.word	0x200050b0

08005a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a60:	e7fe      	b.n	8005a60 <ADC_IRQHandler>
	...

08005a64 <AT24Cxx_get_max_addr>:
#include <stdio.h>

#include "AT24Cxx_stm32_hal.h"

uint16_t AT24Cxx_get_max_addr ( AT24Cxx_device_t* dev )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	791b      	ldrb	r3, [r3, #4]
 8005a70:	2b05      	cmp	r3, #5
 8005a72:	d820      	bhi.n	8005ab6 <AT24Cxx_get_max_addr+0x52>
 8005a74:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <AT24Cxx_get_max_addr+0x18>)
 8005a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7a:	bf00      	nop
 8005a7c:	08005a95 	.word	0x08005a95
 8005a80:	08005a99 	.word	0x08005a99
 8005a84:	08005a9f 	.word	0x08005a9f
 8005a88:	08005aa5 	.word	0x08005aa5
 8005a8c:	08005aab 	.word	0x08005aab
 8005a90:	08005ab1 	.word	0x08005ab1
	case AT24C01:
		return AT24C01_MAX_ADDR;
 8005a94:	237f      	movs	r3, #127	; 0x7f
 8005a96:	e00f      	b.n	8005ab8 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C32:
		return AT24C32_MAX_ADDR;
 8005a98:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005a9c:	e00c      	b.n	8005ab8 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C64:
		return AT24C64_MAX_ADDR;
 8005a9e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005aa2:	e009      	b.n	8005ab8 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C128:
		return AT24C128_MAX_ADDR;
 8005aa4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8005aa8:	e006      	b.n	8005ab8 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C256:
		return AT24C256_MAX_ADDR;
 8005aaa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005aae:	e003      	b.n	8005ab8 <AT24Cxx_get_max_addr+0x54>
		break;
		//not supported yet, will overflow
	case AT24C512:
		return AT24C512_MAX_ADDR;
 8005ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ab4:	e000      	b.n	8005ab8 <AT24Cxx_get_max_addr+0x54>
		break;
	default:
		return 0;
 8005ab6:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <AT24Cxx_get_pg_size>:

uint16_t AT24Cxx_get_pg_size ( AT24Cxx_device_t* dev )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	791b      	ldrb	r3, [r3, #4]
 8005ad0:	2b05      	cmp	r3, #5
 8005ad2:	d81b      	bhi.n	8005b0c <AT24Cxx_get_pg_size+0x48>
 8005ad4:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <AT24Cxx_get_pg_size+0x18>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005af5 	.word	0x08005af5
 8005ae0:	08005af9 	.word	0x08005af9
 8005ae4:	08005afd 	.word	0x08005afd
 8005ae8:	08005b01 	.word	0x08005b01
 8005aec:	08005b05 	.word	0x08005b05
 8005af0:	08005b09 	.word	0x08005b09
	case AT24C01:
		return AT24C01_PG_SIZE;
 8005af4:	2308      	movs	r3, #8
 8005af6:	e00a      	b.n	8005b0e <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C32:
		return AT24C32_PG_SIZE;
 8005af8:	2320      	movs	r3, #32
 8005afa:	e008      	b.n	8005b0e <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C64:
		return AT24C64_PG_SIZE;
 8005afc:	2320      	movs	r3, #32
 8005afe:	e006      	b.n	8005b0e <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C128:
		return AT24C128_PG_SIZE;
 8005b00:	2340      	movs	r3, #64	; 0x40
 8005b02:	e004      	b.n	8005b0e <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C256:
		return AT24C256_PG_SIZE;
 8005b04:	2340      	movs	r3, #64	; 0x40
 8005b06:	e002      	b.n	8005b0e <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C512:
		//not supported yet, will overflow
		return AT24C512_PG_SIZE;
 8005b08:	2380      	movs	r3, #128	; 0x80
 8005b0a:	e000      	b.n	8005b0e <AT24Cxx_get_pg_size+0x4a>
		break;
	default:
		return 0;
 8005b0c:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop

08005b1c <AT24Cxx_init>:

AT24Cxx_ERR_TypeDef AT24Cxx_init( AT24Cxx_devices_t* devices, 
	uint8_t init_dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	460b      	mov	r3, r1
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	72fb      	strb	r3, [r7, #11]
	//adds first device to AT32Cxx_devices array
	//further devices should be added by calling AT24Cxx_add_dev()
	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 8005b2a:	2114      	movs	r1, #20
 8005b2c:	2001      	movs	r0, #1
 8005b2e:	f00e ff1d 	bl	801496c <calloc>
 8005b32:	4603      	mov	r3, r0
 8005b34:	613b      	str	r3, [r7, #16]
	if ( at == NULL )
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <AT24Cxx_init+0x26>
		return at_init_err;
 8005b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b40:	e028      	b.n	8005b94 <AT24Cxx_init+0x78>

	for(uint8_t i = 0; i < 8; i++)
 8005b42:	2300      	movs	r3, #0
 8005b44:	75fb      	strb	r3, [r7, #23]
 8005b46:	e007      	b.n	8005b58 <AT24Cxx_init+0x3c>
			devices->devices[i] = 0x00;
 8005b48:	7dfa      	ldrb	r2, [r7, #23]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < 8; i++)
 8005b52:	7dfb      	ldrb	r3, [r7, #23]
 8005b54:	3301      	adds	r3, #1
 8005b56:	75fb      	strb	r3, [r7, #23]
 8005b58:	7dfb      	ldrb	r3, [r7, #23]
 8005b5a:	2b07      	cmp	r3, #7
 8005b5c:	d9f4      	bls.n	8005b48 <AT24Cxx_init+0x2c>

	at->dev_addr = init_dev_addr;
 8005b5e:	7afb      	ldrb	r3, [r7, #11]
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	60da      	str	r2, [r3, #12]
	at->prev_dev = NULL;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2204      	movs	r2, #4
 8005b76:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	2201      	movs	r2, #1
 8005b82:	721a      	strb	r2, [r3, #8]
	devices->dev_count = 1;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[0] = at;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	601a      	str	r2, [r3, #0]

	return at_ok;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <AT24Cxx_add_dev>:

AT24Cxx_ERR_TypeDef AT24Cxx_add_dev( AT24Cxx_devices_t* devices, 
	uint8_t dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	72fb      	strb	r3, [r7, #11]
	if(devices->dev_count == 0 || devices->dev_count > 8)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d004      	beq.n	8005bbe <AT24Cxx_add_dev+0x22>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d902      	bls.n	8005bc4 <AT24Cxx_add_dev+0x28>
		return at_add_dev_err;
 8005bbe:	f06f 0301 	mvn.w	r3, #1
 8005bc2:	e03e      	b.n	8005c42 <AT24Cxx_add_dev+0xa6>

	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 8005bc4:	2114      	movs	r1, #20
 8005bc6:	2001      	movs	r0, #1
 8005bc8:	f00e fed0 	bl	801496c <calloc>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	617b      	str	r3, [r7, #20]
	if ( at == NULL )
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d102      	bne.n	8005bdc <AT24Cxx_add_dev+0x40>
		return at_add_dev_err;
 8005bd6:	f06f 0301 	mvn.w	r3, #1
 8005bda:	e032      	b.n	8005c42 <AT24Cxx_add_dev+0xa6>

	at->dev_addr = dev_addr;
 8005bdc:	7afb      	ldrb	r3, [r7, #11]
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2200      	movs	r2, #0
 8005be8:	60da      	str	r2, [r3, #12]
	at->prev_dev = devices->devices[devices->dev_count-1];
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bf0:	1e5a      	subs	r2, r3, #1
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	2204      	movs	r2, #4
 8005c00:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	721a      	strb	r2, [r3, #8]
	devices->dev_count++;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c14:	3301      	adds	r3, #1
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[devices->dev_count-1] = at;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c24:	1e5a      	subs	r2, r3, #1
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6979      	ldr	r1, [r7, #20]
 8005c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//update previous device's next device
	devices->devices[devices->dev_count-2]->next_dev = at;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c34:	1e9a      	subs	r2, r3, #2
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	60da      	str	r2, [r3, #12]
	return at_ok;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <AT24Cxx_write_byte_buffer>:
	return at_w_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_write_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8005c4a:	b5b0      	push	{r4, r5, r7, lr}
 8005c4c:	b08a      	sub	sp, #40	; 0x28
 8005c4e:	af04      	add	r7, sp, #16
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	4611      	mov	r1, r2
 8005c56:	461a      	mov	r2, r3
 8005c58:	460b      	mov	r3, r1
 8005c5a:	80fb      	strh	r3, [r7, #6]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	80bb      	strh	r3, [r7, #4]
	//TODO checks

	uint8_t page_size = AT24Cxx_get_pg_size(dev);
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f7ff ff2f 	bl	8005ac4 <AT24Cxx_get_pg_size>
 8005c66:	4603      	mov	r3, r0
 8005c68:	75bb      	strb	r3, [r7, #22]

	uint8_t page_remaining = page_size - mem_addr % page_size;
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	7dba      	ldrb	r2, [r7, #22]
 8005c6e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005c72:	fb02 f201 	mul.w	r2, r2, r1
 8005c76:	1a9b      	subs	r3, r3, r2
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	7dba      	ldrb	r2, [r7, #22]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	757b      	strb	r3, [r7, #21]

	uint8_t page_writes = (buf_length - page_remaining) / page_size;
 8005c80:	88ba      	ldrh	r2, [r7, #4]
 8005c82:	7d7b      	ldrb	r3, [r7, #21]
 8005c84:	1ad2      	subs	r2, r2, r3
 8005c86:	7dbb      	ldrb	r3, [r7, #22]
 8005c88:	fb92 f3f3 	sdiv	r3, r2, r3
 8005c8c:	753b      	strb	r3, [r7, #20]
	uint8_t remainder_writes = (buf_length - page_remaining) % page_size;
 8005c8e:	88ba      	ldrh	r2, [r7, #4]
 8005c90:	7d7b      	ldrb	r3, [r7, #21]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	7dba      	ldrb	r2, [r7, #22]
 8005c96:	fb93 f1f2 	sdiv	r1, r3, r2
 8005c9a:	fb02 f201 	mul.w	r2, r2, r1
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	74fb      	strb	r3, [r7, #19]

	//finish first page
	if((mem_addr + page_remaining) > 0x00 &&
 8005ca2:	88fa      	ldrh	r2, [r7, #6]
 8005ca4:	7d7b      	ldrb	r3, [r7, #21]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	dd23      	ble.n	8005cf4 <AT24Cxx_write_byte_buffer+0xaa>
		(mem_addr + page_remaining) < AT24Cxx_get_max_addr(dev)){
 8005cac:	88fa      	ldrh	r2, [r7, #6]
 8005cae:	7d7b      	ldrb	r3, [r7, #21]
 8005cb0:	18d4      	adds	r4, r2, r3
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7ff fed6 	bl	8005a64 <AT24Cxx_get_max_addr>
 8005cb8:	4603      	mov	r3, r0
	if((mem_addr + page_remaining) > 0x00 &&
 8005cba:	429c      	cmp	r4, r3
 8005cbc:	da1a      	bge.n	8005cf4 <AT24Cxx_write_byte_buffer+0xaa>

		while(HAL_I2C_Mem_Write(dev->dev_port,
 8005cbe:	bf00      	nop
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	88db      	ldrh	r3, [r3, #6]
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	b21b      	sxth	r3, r3
 8005ccc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005cd0:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Write(dev->dev_port,
 8005cd2:	b299      	uxth	r1, r3
 8005cd4:	7d7b      	ldrb	r3, [r7, #21]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	88fa      	ldrh	r2, [r7, #6]
 8005cda:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005cde:	9402      	str	r4, [sp, #8]
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	2310      	movs	r3, #16
 8005ce8:	f002 fb92 	bl	8008410 <HAL_I2C_Mem_Write>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e6      	bne.n	8005cc0 <AT24Cxx_write_byte_buffer+0x76>
	if((mem_addr + page_remaining) > 0x00 &&
 8005cf2:	e002      	b.n	8005cfa <AT24Cxx_write_byte_buffer+0xb0>
				(uint16_t) mem_addr,
				I2C_MEMADD_SIZE_16BIT,
				data_buf,
				page_remaining,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
	}else return at_w_bytes_err;
 8005cf4:	f06f 0304 	mvn.w	r3, #4
 8005cf8:	e0a5      	b.n	8005e46 <AT24Cxx_write_byte_buffer+0x1fc>

	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	75fb      	strb	r3, [r7, #23]
 8005cfe:	e04e      	b.n	8005d9e <AT24Cxx_write_byte_buffer+0x154>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8005d00:	88fa      	ldrh	r2, [r7, #6]
 8005d02:	7d7b      	ldrb	r3, [r7, #21]
 8005d04:	441a      	add	r2, r3
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
 8005d08:	7db9      	ldrb	r1, [r7, #22]
 8005d0a:	fb01 f303 	mul.w	r3, r1, r3
 8005d0e:	4413      	add	r3, r2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	dd3e      	ble.n	8005d92 <AT24Cxx_write_byte_buffer+0x148>
			(mem_addr + page_remaining + (current_page * page_size)) < AT24Cxx_get_max_addr(dev)){
 8005d14:	88fa      	ldrh	r2, [r7, #6]
 8005d16:	7d7b      	ldrb	r3, [r7, #21]
 8005d18:	441a      	add	r2, r3
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
 8005d1c:	7db9      	ldrb	r1, [r7, #22]
 8005d1e:	fb01 f303 	mul.w	r3, r1, r3
 8005d22:	18d4      	adds	r4, r2, r3
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff fe9d 	bl	8005a64 <AT24Cxx_get_max_addr>
 8005d2a:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8005d2c:	429c      	cmp	r4, r3
 8005d2e:	da30      	bge.n	8005d92 <AT24Cxx_write_byte_buffer+0x148>

				while(HAL_I2C_Mem_Write(dev->dev_port,
 8005d30:	bf00      	nop
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6818      	ldr	r0, [r3, #0]
					AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	88db      	ldrh	r3, [r3, #6]
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	b21b      	sxth	r3, r3
 8005d3e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005d42:	b21b      	sxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8005d44:	b29c      	uxth	r4, r3
					(uint16_t) mem_addr + page_remaining + (current_page * page_size),
 8005d46:	7d7b      	ldrb	r3, [r7, #21]
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	7dfb      	ldrb	r3, [r7, #23]
 8005d52:	b299      	uxth	r1, r3
 8005d54:	7dbb      	ldrb	r3, [r7, #22]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	fb11 f303 	smulbb	r3, r1, r3
 8005d5c:	b29b      	uxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8005d5e:	4413      	add	r3, r2
 8005d60:	b29d      	uxth	r5, r3
					I2C_MEMADD_SIZE_16BIT,
					data_buf + page_remaining + (current_page * page_size),
 8005d62:	7d7b      	ldrb	r3, [r7, #21]
 8005d64:	7dfa      	ldrb	r2, [r7, #23]
 8005d66:	7db9      	ldrb	r1, [r7, #22]
 8005d68:	fb01 f202 	mul.w	r2, r1, r2
 8005d6c:	4413      	add	r3, r2
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4413      	add	r3, r2
 8005d72:	7dba      	ldrb	r2, [r7, #22]
 8005d74:	b292      	uxth	r2, r2
 8005d76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d7a:	9102      	str	r1, [sp, #8]
 8005d7c:	9201      	str	r2, [sp, #4]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	2310      	movs	r3, #16
 8005d82:	462a      	mov	r2, r5
 8005d84:	4621      	mov	r1, r4
 8005d86:	f002 fb43 	bl	8008410 <HAL_I2C_Mem_Write>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1d0      	bne.n	8005d32 <AT24Cxx_write_byte_buffer+0xe8>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8005d90:	e002      	b.n	8005d98 <AT24Cxx_write_byte_buffer+0x14e>
					page_size,
					AT24Cxx_I2C_TIMOUT) != HAL_OK);
		}else return at_w_bytes_err;
 8005d92:	f06f 0304 	mvn.w	r3, #4
 8005d96:	e056      	b.n	8005e46 <AT24Cxx_write_byte_buffer+0x1fc>
	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	75fb      	strb	r3, [r7, #23]
 8005d9e:	7dfa      	ldrb	r2, [r7, #23]
 8005da0:	7d3b      	ldrb	r3, [r7, #20]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d3ac      	bcc.n	8005d00 <AT24Cxx_write_byte_buffer+0xb6>
	}

	if(remainder_writes){
 8005da6:	7cfb      	ldrb	r3, [r7, #19]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d04b      	beq.n	8005e44 <AT24Cxx_write_byte_buffer+0x1fa>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8005dac:	88fa      	ldrh	r2, [r7, #6]
 8005dae:	7d7b      	ldrb	r3, [r7, #21]
 8005db0:	441a      	add	r2, r3
 8005db2:	7d3b      	ldrb	r3, [r7, #20]
 8005db4:	7db9      	ldrb	r1, [r7, #22]
 8005db6:	fb01 f303 	mul.w	r3, r1, r3
 8005dba:	4413      	add	r3, r2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dd3e      	ble.n	8005e3e <AT24Cxx_write_byte_buffer+0x1f4>
			(mem_addr + page_remaining + (page_writes * page_size)) < AT24Cxx_get_max_addr(dev)){
 8005dc0:	88fa      	ldrh	r2, [r7, #6]
 8005dc2:	7d7b      	ldrb	r3, [r7, #21]
 8005dc4:	441a      	add	r2, r3
 8005dc6:	7d3b      	ldrb	r3, [r7, #20]
 8005dc8:	7db9      	ldrb	r1, [r7, #22]
 8005dca:	fb01 f303 	mul.w	r3, r1, r3
 8005dce:	18d4      	adds	r4, r2, r3
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7ff fe47 	bl	8005a64 <AT24Cxx_get_max_addr>
 8005dd6:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8005dd8:	429c      	cmp	r4, r3
 8005dda:	da30      	bge.n	8005e3e <AT24Cxx_write_byte_buffer+0x1f4>

			while(HAL_I2C_Mem_Write(dev->dev_port,
 8005ddc:	bf00      	nop
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	88db      	ldrh	r3, [r3, #6]
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	b21b      	sxth	r3, r3
 8005dea:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005dee:	b21b      	sxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8005df0:	b29c      	uxth	r4, r3
				(uint16_t) mem_addr + page_remaining + (page_writes * page_size),
 8005df2:	7d7b      	ldrb	r3, [r7, #21]
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	88fb      	ldrh	r3, [r7, #6]
 8005df8:	4413      	add	r3, r2
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	7d3b      	ldrb	r3, [r7, #20]
 8005dfe:	b299      	uxth	r1, r3
 8005e00:	7dbb      	ldrb	r3, [r7, #22]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	fb11 f303 	smulbb	r3, r1, r3
 8005e08:	b29b      	uxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8005e0a:	4413      	add	r3, r2
 8005e0c:	b29d      	uxth	r5, r3
				I2C_MEMADD_SIZE_16BIT,
				data_buf + page_remaining + (page_writes * page_size),
 8005e0e:	7d7b      	ldrb	r3, [r7, #21]
 8005e10:	7d3a      	ldrb	r2, [r7, #20]
 8005e12:	7db9      	ldrb	r1, [r7, #22]
 8005e14:	fb01 f202 	mul.w	r2, r1, r2
 8005e18:	4413      	add	r3, r2
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	7cfa      	ldrb	r2, [r7, #19]
 8005e20:	b292      	uxth	r2, r2
 8005e22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e26:	9102      	str	r1, [sp, #8]
 8005e28:	9201      	str	r2, [sp, #4]
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	462a      	mov	r2, r5
 8005e30:	4621      	mov	r1, r4
 8005e32:	f002 faed 	bl	8008410 <HAL_I2C_Mem_Write>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1d0      	bne.n	8005dde <AT24Cxx_write_byte_buffer+0x194>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8005e3c:	e002      	b.n	8005e44 <AT24Cxx_write_byte_buffer+0x1fa>
				remainder_writes,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
		}else return at_w_bytes_err;
 8005e3e:	f06f 0304 	mvn.w	r3, #4
 8005e42:	e000      	b.n	8005e46 <AT24Cxx_write_byte_buffer+0x1fc>
	}

	return at_ok;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bdb0      	pop	{r4, r5, r7, pc}

08005e4e <AT24Cxx_read_byte_buffer>:
	return at_r_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_read_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b088      	sub	sp, #32
 8005e52:	af04      	add	r7, sp, #16
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	4611      	mov	r1, r2
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	80fb      	strh	r3, [r7, #6]
 8005e60:	4613      	mov	r3, r2
 8005e62:	80bb      	strh	r3, [r7, #4]
	if(mem_addr > 0x00 && mem_addr < AT24Cxx_get_max_addr(dev)){
 8005e64:	88fb      	ldrh	r3, [r7, #6]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d022      	beq.n	8005eb0 <AT24Cxx_read_byte_buffer+0x62>
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f7ff fdfa 	bl	8005a64 <AT24Cxx_get_max_addr>
 8005e70:	4603      	mov	r3, r0
 8005e72:	461a      	mov	r2, r3
 8005e74:	88fb      	ldrh	r3, [r7, #6]
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d21a      	bcs.n	8005eb0 <AT24Cxx_read_byte_buffer+0x62>
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8005e7a:	bf00      	nop
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_R | (dev->dev_addr << 1) ,
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	88db      	ldrh	r3, [r3, #6]
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	b21b      	sxth	r3, r3
 8005e88:	f043 03a1 	orr.w	r3, r3, #161	; 0xa1
 8005e8c:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8005e8e:	b299      	uxth	r1, r3
 8005e90:	88fa      	ldrh	r2, [r7, #6]
 8005e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e96:	9302      	str	r3, [sp, #8]
 8005e98:	88bb      	ldrh	r3, [r7, #4]
 8005e9a:	9301      	str	r3, [sp, #4]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	f002 fbaf 	bl	8008604 <HAL_I2C_Mem_Read>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e7      	bne.n	8005e7c <AT24Cxx_read_byte_buffer+0x2e>
				(uint16_t) mem_addr, I2C_MEMADD_SIZE_16BIT, data_buf, buf_length,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
		return at_ok;
 8005eac:	2300      	movs	r3, #0
 8005eae:	e001      	b.n	8005eb4 <AT24Cxx_read_byte_buffer+0x66>
	}
	return at_r_bytes_err;
 8005eb0:	f06f 0306 	mvn.w	r3, #6
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static int constrain(int amt, int low, int high)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	da01      	bge.n	8005ed4 <constrain+0x18>
        return low;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	e006      	b.n	8005ee2 <constrain+0x26>
    else if (amt > high)
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	dd01      	ble.n	8005ee0 <constrain+0x24>
        return high;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	e000      	b.n	8005ee2 <constrain+0x26>
    else
        return amt;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b085      	sub	sp, #20
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	ed87 0a03 	vstr	s0, [r7, #12]
 8005ef8:	edc7 0a02 	vstr	s1, [r7, #8]
 8005efc:	ed87 1a01 	vstr	s2, [r7, #4]
    if (amt < low)
 8005f00:	ed97 7a03 	vldr	s14, [r7, #12]
 8005f04:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f10:	d501      	bpl.n	8005f16 <constrainf+0x28>
        return low;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	e00b      	b.n	8005f2e <constrainf+0x40>
    else if (amt > high)
 8005f16:	ed97 7a03 	vldr	s14, [r7, #12]
 8005f1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f26:	dd01      	ble.n	8005f2c <constrainf+0x3e>
        return high;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	e000      	b.n	8005f2e <constrainf+0x40>
    else
        return amt;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	ee07 3a90 	vmov	s15, r3
}
 8005f32:	eeb0 0a67 	vmov.f32	s0, s15
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	ed87 0a01 	vstr	s0, [r7, #4]
 8005f4a:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 8005f4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f52:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005f8c <pt1FilterGain+0x4c>
 8005f56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f62:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT/ (RC + dT);
 8005f66:	ed97 7a03 	vldr	s14, [r7, #12]
 8005f6a:	edd7 7a00 	vldr	s15, [r7]
 8005f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f72:	ed97 7a00 	vldr	s14, [r7]
 8005f76:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005f7a:	eef0 7a66 	vmov.f32	s15, s13
}
 8005f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	40c90fdb 	.word	0x40c90fdb

08005f90 <attitude_ctrl_init>:
int16_t manual_trim_roll,manual_trim_pitch;

/*
 *  init pid controller
 */
void attitude_ctrl_init(){
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
   speed_filter_reset = TRUE;
 8005f94:	4b42      	ldr	r3, [pc, #264]	; (80060a0 <attitude_ctrl_init+0x110>)
 8005f96:	2201      	movs	r2, #1
 8005f98:	701a      	strb	r2, [r3, #0]
   ab_speed_filted = 0.0f;
 8005f9a:	4b42      	ldr	r3, [pc, #264]	; (80060a4 <attitude_ctrl_init+0x114>)
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
   // init roll pid 
   pid_init(&roll_angle_pid, pid_profile_1.roll_angle_Kp,0,0,10,0,0);
 8005fa2:	4b41      	ldr	r3, [pc, #260]	; (80060a8 <attitude_ctrl_init+0x118>)
 8005fa4:	edd3 7a04 	vldr	s15, [r3, #16]
 8005fa8:	eddf 2a40 	vldr	s5, [pc, #256]	; 80060ac <attitude_ctrl_init+0x11c>
 8005fac:	ed9f 2a3f 	vldr	s4, [pc, #252]	; 80060ac <attitude_ctrl_init+0x11c>
 8005fb0:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8005fb4:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 80060ac <attitude_ctrl_init+0x11c>
 8005fb8:	eddf 0a3c 	vldr	s1, [pc, #240]	; 80060ac <attitude_ctrl_init+0x11c>
 8005fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8005fc0:	483b      	ldr	r0, [pc, #236]	; (80060b0 <attitude_ctrl_init+0x120>)
 8005fc2:	f7fd ff23 	bl	8003e0c <pid_init>
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, pid_profile_1.roll_rate_Ki, pid_profile_1.roll_rate_Kd,
 8005fc6:	4b38      	ldr	r3, [pc, #224]	; (80060a8 <attitude_ctrl_init+0x118>)
 8005fc8:	edd3 7a05 	vldr	s15, [r3, #20]
 8005fcc:	4b36      	ldr	r3, [pc, #216]	; (80060a8 <attitude_ctrl_init+0x118>)
 8005fce:	ed93 7a06 	vldr	s14, [r3, #24]
 8005fd2:	4b35      	ldr	r3, [pc, #212]	; (80060a8 <attitude_ctrl_init+0x118>)
 8005fd4:	edd3 6a07 	vldr	s13, [r3, #28]
            pid_profile_1.roll_fcut_err  , pid_profile_1.roll_f_cut_rate_D, pid_profile_1.roll_max_I);
 8005fd8:	4b33      	ldr	r3, [pc, #204]	; (80060a8 <attitude_ctrl_init+0x118>)
 8005fda:	7b1b      	ldrb	r3, [r3, #12]
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, pid_profile_1.roll_rate_Ki, pid_profile_1.roll_rate_Kd,
 8005fdc:	ee06 3a10 	vmov	s12, r3
 8005fe0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
            pid_profile_1.roll_fcut_err  , pid_profile_1.roll_f_cut_rate_D, pid_profile_1.roll_max_I);
 8005fe4:	4b30      	ldr	r3, [pc, #192]	; (80060a8 <attitude_ctrl_init+0x118>)
 8005fe6:	f993 3020 	ldrsb.w	r3, [r3, #32]
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, pid_profile_1.roll_rate_Ki, pid_profile_1.roll_rate_Kd,
 8005fea:	ee05 3a90 	vmov	s11, r3
 8005fee:	eef8 5ae5 	vcvt.f32.s32	s11, s11
            pid_profile_1.roll_fcut_err  , pid_profile_1.roll_f_cut_rate_D, pid_profile_1.roll_max_I);
 8005ff2:	4b2d      	ldr	r3, [pc, #180]	; (80060a8 <attitude_ctrl_init+0x118>)
 8005ff4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, pid_profile_1.roll_rate_Ki, pid_profile_1.roll_rate_Kd,
 8005ff8:	ee05 3a10 	vmov	s10, r3
 8005ffc:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8006000:	eef0 2a45 	vmov.f32	s5, s10
 8006004:	eeb0 2a65 	vmov.f32	s4, s11
 8006008:	eef0 1a46 	vmov.f32	s3, s12
 800600c:	eeb0 1a66 	vmov.f32	s2, s13
 8006010:	eef0 0a47 	vmov.f32	s1, s14
 8006014:	eeb0 0a67 	vmov.f32	s0, s15
 8006018:	4826      	ldr	r0, [pc, #152]	; (80060b4 <attitude_ctrl_init+0x124>)
 800601a:	f7fd fef7 	bl	8003e0c <pid_init>
   // init roll pid 
   pid_init(&pitch_angle_pid, pid_profile_1.pitch_angle_Kp,0,0,10,0,0);
 800601e:	4b22      	ldr	r3, [pc, #136]	; (80060a8 <attitude_ctrl_init+0x118>)
 8006020:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006024:	eddf 2a21 	vldr	s5, [pc, #132]	; 80060ac <attitude_ctrl_init+0x11c>
 8006028:	ed9f 2a20 	vldr	s4, [pc, #128]	; 80060ac <attitude_ctrl_init+0x11c>
 800602c:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8006030:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80060ac <attitude_ctrl_init+0x11c>
 8006034:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80060ac <attitude_ctrl_init+0x11c>
 8006038:	eeb0 0a67 	vmov.f32	s0, s15
 800603c:	481e      	ldr	r0, [pc, #120]	; (80060b8 <attitude_ctrl_init+0x128>)
 800603e:	f7fd fee5 	bl	8003e0c <pid_init>
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,pid_profile_1.pitch_rate_Ki,pid_profile_1.pitch_rate_Kd,
 8006042:	4b19      	ldr	r3, [pc, #100]	; (80060a8 <attitude_ctrl_init+0x118>)
 8006044:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006048:	4b17      	ldr	r3, [pc, #92]	; (80060a8 <attitude_ctrl_init+0x118>)
 800604a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800604e:	4b16      	ldr	r3, [pc, #88]	; (80060a8 <attitude_ctrl_init+0x118>)
 8006050:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
            pid_profile_1.roll_fcut_err,  pid_profile_1.pitch_f_cut_rate_D,pid_profile_1.pitch_max_I);
 8006054:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <attitude_ctrl_init+0x118>)
 8006056:	7b1b      	ldrb	r3, [r3, #12]
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,pid_profile_1.pitch_rate_Ki,pid_profile_1.pitch_rate_Kd,
 8006058:	ee06 3a10 	vmov	s12, r3
 800605c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
            pid_profile_1.roll_fcut_err,  pid_profile_1.pitch_f_cut_rate_D,pid_profile_1.pitch_max_I);
 8006060:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <attitude_ctrl_init+0x118>)
 8006062:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,pid_profile_1.pitch_rate_Ki,pid_profile_1.pitch_rate_Kd,
 8006066:	ee05 3a90 	vmov	s11, r3
 800606a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
            pid_profile_1.roll_fcut_err,  pid_profile_1.pitch_f_cut_rate_D,pid_profile_1.pitch_max_I);
 800606e:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <attitude_ctrl_init+0x118>)
 8006070:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,pid_profile_1.pitch_rate_Ki,pid_profile_1.pitch_rate_Kd,
 8006074:	ee05 3a10 	vmov	s10, r3
 8006078:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800607c:	eef0 2a45 	vmov.f32	s5, s10
 8006080:	eeb0 2a65 	vmov.f32	s4, s11
 8006084:	eef0 1a46 	vmov.f32	s3, s12
 8006088:	eeb0 1a66 	vmov.f32	s2, s13
 800608c:	eef0 0a47 	vmov.f32	s1, s14
 8006090:	eeb0 0a67 	vmov.f32	s0, s15
 8006094:	4809      	ldr	r0, [pc, #36]	; (80060bc <attitude_ctrl_init+0x12c>)
 8006096:	f7fd feb9 	bl	8003e0c <pid_init>
}
 800609a:	bf00      	nop
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20004b04 	.word	0x20004b04
 80060a4:	20004b14 	.word	0x20004b14
 80060a8:	2000001c 	.word	0x2000001c
 80060ac:	00000000 	.word	0x00000000
 80060b0:	200002b0 	.word	0x200002b0
 80060b4:	20000258 	.word	0x20000258
 80060b8:	200002dc 	.word	0x200002dc
 80060bc:	20000284 	.word	0x20000284

080060c0 <altitude_Pid>:
float Kp_alt = 0.04f;
/*
 *  Altitude controller
 *  Return pitch desired
 */
int32_t altitude_Pid(int32_t alt_target){
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	if(is_baro_calibration() == FALSE){
 80060c8:	f7fb fe78 	bl	8001dbc <is_baro_calibration>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <altitude_Pid+0x18>
		baro_zero_calibrate();
 80060d2:	f7fb fe35 	bl	8001d40 <baro_zero_calibrate>
 80060d6:	e00d      	b.n	80060f4 <altitude_Pid+0x34>
	}else{
		baro_calculate(0.01);
 80060d8:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8006130 <altitude_Pid+0x70>
 80060dc:	f7fb fe7a 	bl	8001dd4 <baro_calculate>
		baro_alt = baro_get_altCm();    //cm
 80060e0:	f7fb ff1c 	bl	8001f1c <baro_get_altCm>
 80060e4:	4603      	mov	r3, r0
 80060e6:	4a13      	ldr	r2, [pc, #76]	; (8006134 <altitude_Pid+0x74>)
 80060e8:	6013      	str	r3, [r2, #0]
		baro_climb = baro_get_climbCm();//cm 
 80060ea:	f7fb ff0b 	bl	8001f04 <baro_get_climbCm>
 80060ee:	4603      	mov	r3, r0
 80060f0:	4a11      	ldr	r2, [pc, #68]	; (8006138 <altitude_Pid+0x78>)
 80060f2:	6013      	str	r3, [r2, #0]
	}
    int error_alt = alt_target - baro_alt;
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <altitude_Pid+0x74>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	60fb      	str	r3, [r7, #12]
    error_alt = constrain(error_alt,-10,20);
 80060fe:	2214      	movs	r2, #20
 8006100:	f06f 0109 	mvn.w	r1, #9
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7ff fed9 	bl	8005ebc <constrain>
 800610a:	60f8      	str	r0, [r7, #12]
    return error_alt*Kp_alt;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006116:	4b09      	ldr	r3, [pc, #36]	; (800613c <altitude_Pid+0x7c>)
 8006118:	edd3 7a00 	vldr	s15, [r3]
 800611c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006124:	ee17 3a90 	vmov	r3, s15
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	3c23d70a 	.word	0x3c23d70a
 8006134:	20004b08 	.word	0x20004b08
 8006138:	20004ae4 	.word	0x20004ae4
 800613c:	2000006c 	.word	0x2000006c

08006140 <attitude_ctrl_start>:


/*
 *   Atittude control function
 */
void attitude_ctrl_start(const float dt){
 8006140:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006144:	b096      	sub	sp, #88	; 0x58
 8006146:	af00      	add	r7, sp, #0
 8006148:	ed87 0a01 	vstr	s0, [r7, #4]
    static float roll_pid_smooth = 0.0f;
    static float pitch_pid_smooth = 0.0f;

    if(dt < 0 || dt > MAX_WAIT_TIME){
 800614c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006150:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006158:	d408      	bmi.n	800616c <attitude_ctrl_start+0x2c>
 800615a:	edd7 7a01 	vldr	s15, [r7, #4]
 800615e:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8006424 <attitude_ctrl_start+0x2e4>
 8006162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616a:	dd08      	ble.n	800617e <attitude_ctrl_start+0x3e>
        servoL = 1500;
 800616c:	4bae      	ldr	r3, [pc, #696]	; (8006428 <attitude_ctrl_start+0x2e8>)
 800616e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006172:	601a      	str	r2, [r3, #0]
        servoR = 1500;
 8006174:	4bad      	ldr	r3, [pc, #692]	; (800642c <attitude_ctrl_start+0x2ec>)
 8006176:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800617a:	601a      	str	r2, [r3, #0]
        //write_pwm_ctrl(1000,servoL,servoR);
        return;
 800617c:	e36d      	b.n	800685a <attitude_ctrl_start+0x71a>
    }

   // calculate trim value
   int16_t roll_trim  = (int)ibusChannelData[CH8] - 1500;
 800617e:	4bac      	ldr	r3, [pc, #688]	; (8006430 <attitude_ctrl_start+0x2f0>)
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8006188:	b29b      	uxth	r3, r3
 800618a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
   int16_t pitch_trim = (int)ibusChannelData[CH7] - 1500;
 800618e:	4ba8      	ldr	r3, [pc, #672]	; (8006430 <attitude_ctrl_start+0x2f0>)
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	b29b      	uxth	r3, r3
 8006194:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8006198:	b29b      	uxth	r3, r3
 800619a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

   if(manual_trim_state){
 800619e:	4ba5      	ldr	r3, [pc, #660]	; (8006434 <attitude_ctrl_start+0x2f4>)
 80061a0:	f993 3000 	ldrsb.w	r3, [r3]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d007      	beq.n	80061b8 <attitude_ctrl_start+0x78>
        manual_trim_roll = roll_trim;
 80061a8:	4aa3      	ldr	r2, [pc, #652]	; (8006438 <attitude_ctrl_start+0x2f8>)
 80061aa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80061ae:	8013      	strh	r3, [r2, #0]
        manual_trim_pitch = pitch_trim;
 80061b0:	4aa2      	ldr	r2, [pc, #648]	; (800643c <attitude_ctrl_start+0x2fc>)
 80061b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80061b6:	8013      	strh	r3, [r2, #0]
   }
        // stabilize mode
   if(ibusChannelData[CH5] > CHANNEL_HIGH ){
 80061b8:	4b9d      	ldr	r3, [pc, #628]	; (8006430 <attitude_ctrl_start+0x2f0>)
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80061c0:	4293      	cmp	r3, r2
 80061c2:	f240 82a5 	bls.w	8006710 <attitude_ctrl_start+0x5d0>
        manual_trim_state = 0;
 80061c6:	4b9b      	ldr	r3, [pc, #620]	; (8006434 <attitude_ctrl_start+0x2f4>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	701a      	strb	r2, [r3, #0]
        /* calculate roll && pitch desired */
        roll_desired  = ((int)ibusChannelData[0] - 1500)* 0.12f  + roll_trim*0.05f;   /*  -60 <-  -> +60  */
 80061cc:	4b98      	ldr	r3, [pc, #608]	; (8006430 <attitude_ctrl_start+0x2f0>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80061d4:	ee07 3a90 	vmov	s15, r3
 80061d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061dc:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8006440 <attitude_ctrl_start+0x300>
 80061e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80061e4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80061e8:	ee07 3a90 	vmov	s15, r3
 80061ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061f0:	eddf 6a94 	vldr	s13, [pc, #592]	; 8006444 <attitude_ctrl_start+0x304>
 80061f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80061f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061fc:	4b92      	ldr	r3, [pc, #584]	; (8006448 <attitude_ctrl_start+0x308>)
 80061fe:	edc3 7a00 	vstr	s15, [r3]
        pitch_desired = ((int)ibusChannelData[1] - 1500)*-0.12f  + 10;  /*    -60 <-  -> +60  */
 8006202:	4b8b      	ldr	r3, [pc, #556]	; (8006430 <attitude_ctrl_start+0x2f0>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006212:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800644c <attitude_ctrl_start+0x30c>
 8006216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800621a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800621e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006222:	4b8b      	ldr	r3, [pc, #556]	; (8006450 <attitude_ctrl_start+0x310>)
 8006224:	edc3 7a00 	vstr	s15, [r3]

        /*---- pid scaler with velocity  -----*/
        if(_gps.fix > 1){
 8006228:	4b8a      	ldr	r3, [pc, #552]	; (8006454 <attitude_ctrl_start+0x314>)
 800622a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800622e:	2b01      	cmp	r3, #1
 8006230:	f240 8081 	bls.w	8006336 <attitude_ctrl_start+0x1f6>
            float vn = (float)_gps.velocity[0]/100;  // m
 8006234:	4b87      	ldr	r3, [pc, #540]	; (8006454 <attitude_ctrl_start+0x314>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	ee07 3a90 	vmov	s15, r3
 800623c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006240:	eddf 6a85 	vldr	s13, [pc, #532]	; 8006458 <attitude_ctrl_start+0x318>
 8006244:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006248:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            float ve = (float)_gps.velocity[1]/100;  // m
 800624c:	4b81      	ldr	r3, [pc, #516]	; (8006454 <attitude_ctrl_start+0x314>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	ee07 3a90 	vmov	s15, r3
 8006254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006258:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8006458 <attitude_ctrl_start+0x318>
 800625c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006260:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            //float vd = (float)_gps.velocity[2]/100;  // m

            float absolute_velocity = sqrtf(sq(vn) + sq(ve));// + sq(vd));
 8006264:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006268:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800626c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006270:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006278:	eeb0 0a67 	vmov.f32	s0, s15
 800627c:	f00e fdcc 	bl	8014e18 <sqrtf>
 8006280:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
            absolute_velocity = constrainf(absolute_velocity,0,MAX_SPEED); 
 8006284:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 8006288:	eddf 0a74 	vldr	s1, [pc, #464]	; 800645c <attitude_ctrl_start+0x31c>
 800628c:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8006290:	f7ff fe2d 	bl	8005eee <constrainf>
 8006294:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
            if(speed_filter_reset){
 8006298:	4b71      	ldr	r3, [pc, #452]	; (8006460 <attitude_ctrl_start+0x320>)
 800629a:	f993 3000 	ldrsb.w	r3, [r3]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <attitude_ctrl_start+0x16e>
                ab_speed_filted = absolute_velocity;
 80062a2:	4a70      	ldr	r2, [pc, #448]	; (8006464 <attitude_ctrl_start+0x324>)
 80062a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a6:	6013      	str	r3, [r2, #0]
                speed_filter_reset = FALSE;
 80062a8:	4b6d      	ldr	r3, [pc, #436]	; (8006460 <attitude_ctrl_start+0x320>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	701a      	strb	r2, [r3, #0]
            }
            ab_speed_filted += pt1FilterGain(10,dt)*(absolute_velocity - ab_speed_filted);
 80062ae:	edd7 0a01 	vldr	s1, [r7, #4]
 80062b2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80062b6:	f7ff fe43 	bl	8005f40 <pt1FilterGain>
 80062ba:	eef0 6a40 	vmov.f32	s13, s0
 80062be:	4b69      	ldr	r3, [pc, #420]	; (8006464 <attitude_ctrl_start+0x324>)
 80062c0:	edd3 7a00 	vldr	s15, [r3]
 80062c4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80062c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062cc:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80062d0:	4b64      	ldr	r3, [pc, #400]	; (8006464 <attitude_ctrl_start+0x324>)
 80062d2:	edd3 7a00 	vldr	s15, [r3]
 80062d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062da:	4b62      	ldr	r3, [pc, #392]	; (8006464 <attitude_ctrl_start+0x324>)
 80062dc:	edc3 7a00 	vstr	s15, [r3]
            float speed_temp = constrainf(ab_speed_filted,MINIMUN_SPEED,MAXIMUN_SPEED);
 80062e0:	4b60      	ldr	r3, [pc, #384]	; (8006464 <attitude_ctrl_start+0x324>)
 80062e2:	edd3 7a00 	vldr	s15, [r3]
 80062e6:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8006468 <attitude_ctrl_start+0x328>
 80062ea:	eef2 0a08 	vmov.f32	s1, #40	; 0x41400000  12.0
 80062ee:	eeb0 0a67 	vmov.f32	s0, s15
 80062f2:	f7ff fdfc 	bl	8005eee <constrainf>
 80062f6:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            pid_velo_scale = (float)MINIMUN_SPEED/((float)MINIMUN_SPEED + sq(speed_temp - MINIMUN_SPEED)*0.09f);
 80062fa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80062fe:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8006302:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006306:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800630a:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800630e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006316:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800646c <attitude_ctrl_start+0x32c>
 800631a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800631e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8006322:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006326:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800632a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800632e:	4b50      	ldr	r3, [pc, #320]	; (8006470 <attitude_ctrl_start+0x330>)
 8006330:	edc3 7a00 	vstr	s15, [r3]
 8006334:	e006      	b.n	8006344 <attitude_ctrl_start+0x204>
        }
        else{
            speed_filter_reset = TRUE;
 8006336:	4b4a      	ldr	r3, [pc, #296]	; (8006460 <attitude_ctrl_start+0x320>)
 8006338:	2201      	movs	r2, #1
 800633a:	701a      	strb	r2, [r3, #0]
            //pid_velo_scale = (MIN_PID_SPEED_SCALE + MAX_PID_SPEED_SCALE)/2.0f;
            pid_velo_scale = 1;
 800633c:	4b4c      	ldr	r3, [pc, #304]	; (8006470 <attitude_ctrl_start+0x330>)
 800633e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006342:	601a      	str	r2, [r3, #0]
        }


        float roll_measurement = AHRS.roll;
 8006344:	4b4b      	ldr	r3, [pc, #300]	; (8006474 <attitude_ctrl_start+0x334>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	637b      	str	r3, [r7, #52]	; 0x34
        float pitch_measurement = AHRS.pitch;
 800634a:	4b4a      	ldr	r3, [pc, #296]	; (8006474 <attitude_ctrl_start+0x334>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	657b      	str	r3, [r7, #84]	; 0x54
        //if(abs(roll_measurement) > SAFETY_ANGLE_ROLL && abs(pitch_measurement) < SAFETY_ANGLE_PITCH){
        //    // priority to roll
        //}
        
        const float pid_roll_vel_scale  = constrainf(pid_velo_scale,MIN_ROLL_PID_SPEED_SCALE,MAX_PID_SPEED_SCALE);
 8006350:	4b47      	ldr	r3, [pc, #284]	; (8006470 <attitude_ctrl_start+0x330>)
 8006352:	edd3 7a00 	vldr	s15, [r3]
 8006356:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800635a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800635e:	eeb0 0a67 	vmov.f32	s0, s15
 8006362:	f7ff fdc4 	bl	8005eee <constrainf>
 8006366:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
        const float pid_pitch_vel_scale = constrainf(pid_velo_scale,MIN_PITCH_PID_SPEED_SCALE,MAX_PID_SPEED_SCALE);
 800636a:	4b41      	ldr	r3, [pc, #260]	; (8006470 <attitude_ctrl_start+0x330>)
 800636c:	edd3 7a00 	vldr	s15, [r3]
 8006370:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006374:	eddf 0a40 	vldr	s1, [pc, #256]	; 8006478 <attitude_ctrl_start+0x338>
 8006378:	eeb0 0a67 	vmov.f32	s0, s15
 800637c:	f7ff fdb7 	bl	8005eee <constrainf>
 8006380:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

        /*----- roll axis pid   -----*/
        const float roll_rate_measurement = AHRS.roll_rate;
 8006384:	4b3b      	ldr	r3, [pc, #236]	; (8006474 <attitude_ctrl_start+0x334>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
        float roll_rate_desired =  pid_calculate(&roll_angle_pid,roll_measurement,roll_desired,1.0f,dt);
 800638a:	4b2f      	ldr	r3, [pc, #188]	; (8006448 <attitude_ctrl_start+0x308>)
 800638c:	edd3 7a00 	vldr	s15, [r3]
 8006390:	edd7 1a01 	vldr	s3, [r7, #4]
 8006394:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006398:	eef0 0a67 	vmov.f32	s1, s15
 800639c:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80063a0:	4836      	ldr	r0, [pc, #216]	; (800647c <attitude_ctrl_start+0x33c>)
 80063a2:	f7fd fd6e 	bl	8003e82 <pid_calculate>
 80063a6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
        // limit rate
        roll_rate_desired = constrainf(roll_rate_desired, -pid_profile_1.roll_rate_limit, pid_profile_1.roll_rate_limit);
 80063aa:	4b35      	ldr	r3, [pc, #212]	; (8006480 <attitude_ctrl_start+0x340>)
 80063ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80063b0:	425b      	negs	r3, r3
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063ba:	4b31      	ldr	r3, [pc, #196]	; (8006480 <attitude_ctrl_start+0x340>)
 80063bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80063c0:	ee07 3a10 	vmov	s14, r3
 80063c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80063c8:	eeb0 1a47 	vmov.f32	s2, s14
 80063cc:	eef0 0a67 	vmov.f32	s1, s15
 80063d0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80063d4:	f7ff fd8b 	bl	8005eee <constrainf>
 80063d8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
        float r_rate_pid  =  pid_calculate(&roll_rate_pid, roll_rate_measurement,roll_rate_desired,pid_roll_vel_scale,dt);
 80063dc:	edd7 1a01 	vldr	s3, [r7, #4]
 80063e0:	ed97 1a0c 	vldr	s2, [r7, #48]	; 0x30
 80063e4:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80063e8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80063ec:	4825      	ldr	r0, [pc, #148]	; (8006484 <attitude_ctrl_start+0x344>)
 80063ee:	f7fd fd48 	bl	8003e82 <pid_calculate>
 80063f2:	ed87 0a08 	vstr	s0, [r7, #32]
        // reset I term
        if(abs(roll_angle_pid.err) < ERROR_RESET_I_TERM){
 80063f6:	4b21      	ldr	r3, [pc, #132]	; (800647c <attitude_ctrl_start+0x33c>)
 80063f8:	edd3 7a00 	vldr	s15, [r3]
 80063fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006404:	dd40      	ble.n	8006488 <attitude_ctrl_start+0x348>
 8006406:	4b1d      	ldr	r3, [pc, #116]	; (800647c <attitude_ctrl_start+0x33c>)
 8006408:	edd3 7a00 	vldr	s15, [r3]
 800640c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8006410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006418:	bf4c      	ite	mi
 800641a:	2301      	movmi	r3, #1
 800641c:	2300      	movpl	r3, #0
 800641e:	b2db      	uxtb	r3, r3
 8006420:	e03f      	b.n	80064a2 <attitude_ctrl_start+0x362>
 8006422:	bf00      	nop
 8006424:	3dcccccd 	.word	0x3dcccccd
 8006428:	20004b10 	.word	0x20004b10
 800642c:	20004ae8 	.word	0x20004ae8
 8006430:	20004230 	.word	0x20004230
 8006434:	20000068 	.word	0x20000068
 8006438:	20004aec 	.word	0x20004aec
 800643c:	20004afc 	.word	0x20004afc
 8006440:	3df5c28f 	.word	0x3df5c28f
 8006444:	3d4ccccd 	.word	0x3d4ccccd
 8006448:	20004b00 	.word	0x20004b00
 800644c:	bdf5c28f 	.word	0xbdf5c28f
 8006450:	20004af8 	.word	0x20004af8
 8006454:	200044d8 	.word	0x200044d8
 8006458:	42c80000 	.word	0x42c80000
 800645c:	00000000 	.word	0x00000000
 8006460:	20004b04 	.word	0x20004b04
 8006464:	20004b14 	.word	0x20004b14
 8006468:	42040000 	.word	0x42040000
 800646c:	3db851ec 	.word	0x3db851ec
 8006470:	20004af4 	.word	0x20004af4
 8006474:	20004614 	.word	0x20004614
 8006478:	3e99999a 	.word	0x3e99999a
 800647c:	200002b0 	.word	0x200002b0
 8006480:	2000001c 	.word	0x2000001c
 8006484:	20000258 	.word	0x20000258
 8006488:	4b94      	ldr	r3, [pc, #592]	; (80066dc <attitude_ctrl_start+0x59c>)
 800648a:	edd3 7a00 	vldr	s15, [r3]
 800648e:	eeb8 7a04 	vmov.f32	s14, #132	; 0xc0200000 -2.5
 8006492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800649a:	bfcc      	ite	gt
 800649c:	2301      	movgt	r3, #1
 800649e:	2300      	movle	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <attitude_ctrl_start+0x36e>
            roll_rate_pid.i_term = 0.0f;
 80064a6:	4b8e      	ldr	r3, [pc, #568]	; (80066e0 <attitude_ctrl_start+0x5a0>)
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	615a      	str	r2, [r3, #20]
        }
        // feed forward
        float FF_roll = roll_rate_desired*pid_profile_1.roll_FF_gain;
 80064ae:	4b8d      	ldr	r3, [pc, #564]	; (80066e4 <attitude_ctrl_start+0x5a4>)
 80064b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80064b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80064b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064bc:	edc7 7a07 	vstr	s15, [r7, #28]
        r_rate_pid = r_rate_pid + FF_roll;
 80064c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80064c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80064c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064cc:	edc7 7a08 	vstr	s15, [r7, #32]
        r_rate_pid = constrainf(r_rate_pid, -pid_profile_1.roll_max_pid, pid_profile_1.roll_max_pid);
 80064d0:	4b84      	ldr	r3, [pc, #528]	; (80066e4 <attitude_ctrl_start+0x5a4>)
 80064d2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80064d6:	425b      	negs	r3, r3
 80064d8:	ee07 3a90 	vmov	s15, r3
 80064dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064e0:	4b80      	ldr	r3, [pc, #512]	; (80066e4 <attitude_ctrl_start+0x5a4>)
 80064e2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80064e6:	ee07 3a10 	vmov	s14, r3
 80064ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80064ee:	eeb0 1a47 	vmov.f32	s2, s14
 80064f2:	eef0 0a67 	vmov.f32	s1, s15
 80064f6:	ed97 0a08 	vldr	s0, [r7, #32]
 80064fa:	f7ff fcf8 	bl	8005eee <constrainf>
 80064fe:	ed87 0a08 	vstr	s0, [r7, #32]
        // filter pid  LPF
        roll_pid_smooth += pt1FilterGain(pid_profile_1.roll_pid_fcut,dt)*(r_rate_pid - roll_pid_smooth);
 8006502:	4b78      	ldr	r3, [pc, #480]	; (80066e4 <attitude_ctrl_start+0x5a4>)
 8006504:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8006508:	ee07 3a90 	vmov	s15, r3
 800650c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006510:	edd7 0a01 	vldr	s1, [r7, #4]
 8006514:	eeb0 0a67 	vmov.f32	s0, s15
 8006518:	f7ff fd12 	bl	8005f40 <pt1FilterGain>
 800651c:	eef0 6a40 	vmov.f32	s13, s0
 8006520:	4b71      	ldr	r3, [pc, #452]	; (80066e8 <attitude_ctrl_start+0x5a8>)
 8006522:	edd3 7a00 	vldr	s15, [r3]
 8006526:	ed97 7a08 	vldr	s14, [r7, #32]
 800652a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800652e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8006532:	4b6d      	ldr	r3, [pc, #436]	; (80066e8 <attitude_ctrl_start+0x5a8>)
 8006534:	edd3 7a00 	vldr	s15, [r3]
 8006538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800653c:	4b6a      	ldr	r3, [pc, #424]	; (80066e8 <attitude_ctrl_start+0x5a8>)
 800653e:	edc3 7a00 	vstr	s15, [r3]

        #define DEFAULT_ALT 500 // 50 mm
        /*-----  pitch axis pid  ---------*/
        if(ibusChannelData[CH10] > CHANNEL_HIGH && ibusChannelData[CH5] > CHANNEL_HIGH){
 8006542:	4b6a      	ldr	r3, [pc, #424]	; (80066ec <attitude_ctrl_start+0x5ac>)
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800654a:	4293      	cmp	r3, r2
 800654c:	d90f      	bls.n	800656e <attitude_ctrl_start+0x42e>
 800654e:	4b67      	ldr	r3, [pc, #412]	; (80066ec <attitude_ctrl_start+0x5ac>)
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8006556:	4293      	cmp	r3, r2
 8006558:	d909      	bls.n	800656e <attitude_ctrl_start+0x42e>
            pitch_measurement = altitude_Pid(500);
 800655a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800655e:	f7ff fdaf 	bl	80060c0 <altitude_Pid>
 8006562:	ee07 0a90 	vmov	s15, r0
 8006566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800656a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        }
        const float pitch_rate_measurement = AHRS.pitch_rate;
 800656e:	4b60      	ldr	r3, [pc, #384]	; (80066f0 <attitude_ctrl_start+0x5b0>)
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	61bb      	str	r3, [r7, #24]
        float pitch_rate_desired =  pid_calculate(&pitch_angle_pid,pitch_measurement,pitch_desired,1.0f,dt);
 8006574:	4b5f      	ldr	r3, [pc, #380]	; (80066f4 <attitude_ctrl_start+0x5b4>)
 8006576:	edd3 7a00 	vldr	s15, [r3]
 800657a:	edd7 1a01 	vldr	s3, [r7, #4]
 800657e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006582:	eef0 0a67 	vmov.f32	s1, s15
 8006586:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 800658a:	485b      	ldr	r0, [pc, #364]	; (80066f8 <attitude_ctrl_start+0x5b8>)
 800658c:	f7fd fc79 	bl	8003e82 <pid_calculate>
 8006590:	ed87 0a05 	vstr	s0, [r7, #20]
        // limit rate
        pitch_rate_desired = constrainf(pitch_rate_desired, -pid_profile_1.pitch_rate_limit, pid_profile_1.pitch_rate_limit);
 8006594:	4b53      	ldr	r3, [pc, #332]	; (80066e4 <attitude_ctrl_start+0x5a4>)
 8006596:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800659a:	425b      	negs	r3, r3
 800659c:	ee07 3a90 	vmov	s15, r3
 80065a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065a4:	4b4f      	ldr	r3, [pc, #316]	; (80066e4 <attitude_ctrl_start+0x5a4>)
 80065a6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80065aa:	ee07 3a10 	vmov	s14, r3
 80065ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80065b2:	eeb0 1a47 	vmov.f32	s2, s14
 80065b6:	eef0 0a67 	vmov.f32	s1, s15
 80065ba:	ed97 0a05 	vldr	s0, [r7, #20]
 80065be:	f7ff fc96 	bl	8005eee <constrainf>
 80065c2:	ed87 0a05 	vstr	s0, [r7, #20]
        float p_rate_pid  =  pid_calculate(&pitch_rate_pid, pitch_rate_measurement,pitch_rate_desired,pid_pitch_vel_scale ,dt);
 80065c6:	edd7 1a01 	vldr	s3, [r7, #4]
 80065ca:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 80065ce:	edd7 0a05 	vldr	s1, [r7, #20]
 80065d2:	ed97 0a06 	vldr	s0, [r7, #24]
 80065d6:	4849      	ldr	r0, [pc, #292]	; (80066fc <attitude_ctrl_start+0x5bc>)
 80065d8:	f7fd fc53 	bl	8003e82 <pid_calculate>
 80065dc:	ed87 0a04 	vstr	s0, [r7, #16]
        // reset I term
        //if(abs(pitch_angle_pid.err) < ERROR_RESET_I_TERM){
        //    pitch_rate_pid.i_term = 0.0f;
        //}
        // feed forward
        float FF_pitch = pitch_rate_desired*pid_profile_1.pitch_FF_gain;;
 80065e0:	4b40      	ldr	r3, [pc, #256]	; (80066e4 <attitude_ctrl_start+0x5a4>)
 80065e2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80065e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80065ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ee:	edc7 7a03 	vstr	s15, [r7, #12]
        p_rate_pid = p_rate_pid + FF_pitch;
 80065f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80065f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80065fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065fe:	edc7 7a04 	vstr	s15, [r7, #16]
        p_rate_pid = constrainf(p_rate_pid,- pid_profile_1.pitch_max_pid, pid_profile_1.pitch_max_pid);
 8006602:	4b38      	ldr	r3, [pc, #224]	; (80066e4 <attitude_ctrl_start+0x5a4>)
 8006604:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8006608:	425b      	negs	r3, r3
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006612:	4b34      	ldr	r3, [pc, #208]	; (80066e4 <attitude_ctrl_start+0x5a4>)
 8006614:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8006618:	ee07 3a10 	vmov	s14, r3
 800661c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006620:	eeb0 1a47 	vmov.f32	s2, s14
 8006624:	eef0 0a67 	vmov.f32	s1, s15
 8006628:	ed97 0a04 	vldr	s0, [r7, #16]
 800662c:	f7ff fc5f 	bl	8005eee <constrainf>
 8006630:	ed87 0a04 	vstr	s0, [r7, #16]
        // filter pid  LPF
        pitch_pid_smooth += pt1FilterGain(pid_profile_1.pitch_pid_fcut,dt)*(p_rate_pid - pitch_pid_smooth);
 8006634:	4b2b      	ldr	r3, [pc, #172]	; (80066e4 <attitude_ctrl_start+0x5a4>)
 8006636:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006642:	edd7 0a01 	vldr	s1, [r7, #4]
 8006646:	eeb0 0a67 	vmov.f32	s0, s15
 800664a:	f7ff fc79 	bl	8005f40 <pt1FilterGain>
 800664e:	eef0 6a40 	vmov.f32	s13, s0
 8006652:	4b2b      	ldr	r3, [pc, #172]	; (8006700 <attitude_ctrl_start+0x5c0>)
 8006654:	edd3 7a00 	vldr	s15, [r3]
 8006658:	ed97 7a04 	vldr	s14, [r7, #16]
 800665c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006660:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8006664:	4b26      	ldr	r3, [pc, #152]	; (8006700 <attitude_ctrl_start+0x5c0>)
 8006666:	edd3 7a00 	vldr	s15, [r3]
 800666a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800666e:	4b24      	ldr	r3, [pc, #144]	; (8006700 <attitude_ctrl_start+0x5c0>)
 8006670:	edc3 7a00 	vstr	s15, [r3]
        
        // enable && disable I term, for test only
		if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 8006674:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <attitude_ctrl_start+0x5ac>)
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800667c:	4293      	cmp	r3, r2
 800667e:	d907      	bls.n	8006690 <attitude_ctrl_start+0x550>
			pitch_rate_pid.i_term = 0;
 8006680:	4b1e      	ldr	r3, [pc, #120]	; (80066fc <attitude_ctrl_start+0x5bc>)
 8006682:	f04f 0200 	mov.w	r2, #0
 8006686:	615a      	str	r2, [r3, #20]
			roll_rate_pid.i_term = 0;
 8006688:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <attitude_ctrl_start+0x5a0>)
 800668a:	f04f 0200 	mov.w	r2, #0
 800668e:	615a      	str	r2, [r3, #20]
				int roll_rc = 1500 - ibusChannelData[CH1];
				servoL = 1500 +  roll_rc*0.5 - pitch_pid_smooth    + roll_trim  + pitch_trim;
				servoR = 1500 -  roll_rc*0.5 - pitch_pid_smooth    - roll_trim  + pitch_trim;
		}
		*/
        servoL = 1500 - roll_pid_smooth - pitch_pid_smooth;
 8006690:	4b15      	ldr	r3, [pc, #84]	; (80066e8 <attitude_ctrl_start+0x5a8>)
 8006692:	edd3 7a00 	vldr	s15, [r3]
 8006696:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8006704 <attitude_ctrl_start+0x5c4>
 800669a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800669e:	4b18      	ldr	r3, [pc, #96]	; (8006700 <attitude_ctrl_start+0x5c0>)
 80066a0:	edd3 7a00 	vldr	s15, [r3]
 80066a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066ac:	ee17 2a90 	vmov	r2, s15
 80066b0:	4b15      	ldr	r3, [pc, #84]	; (8006708 <attitude_ctrl_start+0x5c8>)
 80066b2:	601a      	str	r2, [r3, #0]
		servoR = 1500 + roll_pid_smooth - pitch_pid_smooth;
 80066b4:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <attitude_ctrl_start+0x5a8>)
 80066b6:	edd3 7a00 	vldr	s15, [r3]
 80066ba:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8006704 <attitude_ctrl_start+0x5c4>
 80066be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066c2:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <attitude_ctrl_start+0x5c0>)
 80066c4:	edd3 7a00 	vldr	s15, [r3]
 80066c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066d0:	ee17 2a90 	vmov	r2, s15
 80066d4:	4b0d      	ldr	r3, [pc, #52]	; (800670c <attitude_ctrl_start+0x5cc>)
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	e0b4      	b.n	8006844 <attitude_ctrl_start+0x704>
 80066da:	bf00      	nop
 80066dc:	200002b0 	.word	0x200002b0
 80066e0:	20000258 	.word	0x20000258
 80066e4:	2000001c 	.word	0x2000001c
 80066e8:	2000030c 	.word	0x2000030c
 80066ec:	20004230 	.word	0x20004230
 80066f0:	20004614 	.word	0x20004614
 80066f4:	20004af8 	.word	0x20004af8
 80066f8:	200002dc 	.word	0x200002dc
 80066fc:	20000284 	.word	0x20000284
 8006700:	20000310 	.word	0x20000310
 8006704:	44bb8000 	.word	0x44bb8000
 8006708:	20004b10 	.word	0x20004b10
 800670c:	20004ae8 	.word	0x20004ae8
        
    }
    // manual mode
    else{
    	pitch_rate_pid.i_term = 0;
 8006710:	4b57      	ldr	r3, [pc, #348]	; (8006870 <attitude_ctrl_start+0x730>)
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	615a      	str	r2, [r3, #20]
    	roll_rate_pid.i_term = 0;
 8006718:	4b56      	ldr	r3, [pc, #344]	; (8006874 <attitude_ctrl_start+0x734>)
 800671a:	f04f 0200 	mov.w	r2, #0
 800671e:	615a      	str	r2, [r3, #20]

        int s1 = 1500 - ibusChannelData[CH1];
 8006720:	4b55      	ldr	r3, [pc, #340]	; (8006878 <attitude_ctrl_start+0x738>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8006728:	3304      	adds	r3, #4
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
        int s2 = 1500 - ibusChannelData[CH2];
 800672c:	4b52      	ldr	r3, [pc, #328]	; (8006878 <attitude_ctrl_start+0x738>)
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8006734:	3304      	adds	r3, #4
 8006736:	64bb      	str	r3, [r7, #72]	; 0x48

        smooth_ch1 += 0.7*(s1*0.5 - smooth_ch1);
 8006738:	4b50      	ldr	r3, [pc, #320]	; (800687c <attitude_ctrl_start+0x73c>)
 800673a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800673e:	4618      	mov	r0, r3
 8006740:	f7f9 fe98 	bl	8000474 <__aeabi_i2d>
 8006744:	4604      	mov	r4, r0
 8006746:	460d      	mov	r5, r1
 8006748:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800674a:	f7f9 fe93 	bl	8000474 <__aeabi_i2d>
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	4b4b      	ldr	r3, [pc, #300]	; (8006880 <attitude_ctrl_start+0x740>)
 8006754:	f7f9 fef8 	bl	8000548 <__aeabi_dmul>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4690      	mov	r8, r2
 800675e:	4699      	mov	r9, r3
 8006760:	4b46      	ldr	r3, [pc, #280]	; (800687c <attitude_ctrl_start+0x73c>)
 8006762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006766:	4618      	mov	r0, r3
 8006768:	f7f9 fe84 	bl	8000474 <__aeabi_i2d>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4640      	mov	r0, r8
 8006772:	4649      	mov	r1, r9
 8006774:	f7f9 fd30 	bl	80001d8 <__aeabi_dsub>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4610      	mov	r0, r2
 800677e:	4619      	mov	r1, r3
 8006780:	a339      	add	r3, pc, #228	; (adr r3, 8006868 <attitude_ctrl_start+0x728>)
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	f7f9 fedf 	bl	8000548 <__aeabi_dmul>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4620      	mov	r0, r4
 8006790:	4629      	mov	r1, r5
 8006792:	f7f9 fd23 	bl	80001dc <__adddf3>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	4610      	mov	r0, r2
 800679c:	4619      	mov	r1, r3
 800679e:	f7fa f983 	bl	8000aa8 <__aeabi_d2iz>
 80067a2:	4603      	mov	r3, r0
 80067a4:	b21a      	sxth	r2, r3
 80067a6:	4b35      	ldr	r3, [pc, #212]	; (800687c <attitude_ctrl_start+0x73c>)
 80067a8:	801a      	strh	r2, [r3, #0]
        smooth_ch2 += 0.7*(s2 - smooth_ch2);
 80067aa:	4b36      	ldr	r3, [pc, #216]	; (8006884 <attitude_ctrl_start+0x744>)
 80067ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7f9 fe5f 	bl	8000474 <__aeabi_i2d>
 80067b6:	4604      	mov	r4, r0
 80067b8:	460d      	mov	r5, r1
 80067ba:	4b32      	ldr	r3, [pc, #200]	; (8006884 <attitude_ctrl_start+0x744>)
 80067bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067c0:	461a      	mov	r2, r3
 80067c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7f9 fe54 	bl	8000474 <__aeabi_i2d>
 80067cc:	a326      	add	r3, pc, #152	; (adr r3, 8006868 <attitude_ctrl_start+0x728>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7f9 feb9 	bl	8000548 <__aeabi_dmul>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4620      	mov	r0, r4
 80067dc:	4629      	mov	r1, r5
 80067de:	f7f9 fcfd 	bl	80001dc <__adddf3>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4610      	mov	r0, r2
 80067e8:	4619      	mov	r1, r3
 80067ea:	f7fa f95d 	bl	8000aa8 <__aeabi_d2iz>
 80067ee:	4603      	mov	r3, r0
 80067f0:	b21a      	sxth	r2, r3
 80067f2:	4b24      	ldr	r3, [pc, #144]	; (8006884 <attitude_ctrl_start+0x744>)
 80067f4:	801a      	strh	r2, [r3, #0]

        servoL = 1500 + smooth_ch1 - smooth_ch2  + manual_trim_roll  + manual_trim_pitch;
 80067f6:	4b21      	ldr	r3, [pc, #132]	; (800687c <attitude_ctrl_start+0x73c>)
 80067f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067fc:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8006800:	4a20      	ldr	r2, [pc, #128]	; (8006884 <attitude_ctrl_start+0x744>)
 8006802:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006806:	1a9b      	subs	r3, r3, r2
 8006808:	4a1f      	ldr	r2, [pc, #124]	; (8006888 <attitude_ctrl_start+0x748>)
 800680a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800680e:	4413      	add	r3, r2
 8006810:	4a1e      	ldr	r2, [pc, #120]	; (800688c <attitude_ctrl_start+0x74c>)
 8006812:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006816:	4413      	add	r3, r2
 8006818:	4a1d      	ldr	r2, [pc, #116]	; (8006890 <attitude_ctrl_start+0x750>)
 800681a:	6013      	str	r3, [r2, #0]
        servoR = 1500 - smooth_ch1 - smooth_ch2  - manual_trim_roll  + manual_trim_pitch;
 800681c:	4b17      	ldr	r3, [pc, #92]	; (800687c <attitude_ctrl_start+0x73c>)
 800681e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006822:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8006826:	3304      	adds	r3, #4
 8006828:	4a16      	ldr	r2, [pc, #88]	; (8006884 <attitude_ctrl_start+0x744>)
 800682a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800682e:	1a9b      	subs	r3, r3, r2
 8006830:	4a15      	ldr	r2, [pc, #84]	; (8006888 <attitude_ctrl_start+0x748>)
 8006832:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006836:	1a9b      	subs	r3, r3, r2
 8006838:	4a14      	ldr	r2, [pc, #80]	; (800688c <attitude_ctrl_start+0x74c>)
 800683a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800683e:	4413      	add	r3, r2
 8006840:	4a14      	ldr	r2, [pc, #80]	; (8006894 <attitude_ctrl_start+0x754>)
 8006842:	6013      	str	r3, [r2, #0]
    }
   //write_pwm_ctrl(1000,servoL,servoR);
    mavlink_rc_raw(1000,servoL,servoR);
 8006844:	4b12      	ldr	r3, [pc, #72]	; (8006890 <attitude_ctrl_start+0x750>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	4a12      	ldr	r2, [pc, #72]	; (8006894 <attitude_ctrl_start+0x754>)
 800684c:	6812      	ldr	r2, [r2, #0]
 800684e:	b292      	uxth	r2, r2
 8006850:	4619      	mov	r1, r3
 8006852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006856:	f000 f9d7 	bl	8006c08 <mavlink_rc_raw>
}
 800685a:	3758      	adds	r7, #88	; 0x58
 800685c:	46bd      	mov	sp, r7
 800685e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006862:	bf00      	nop
 8006864:	f3af 8000 	nop.w
 8006868:	66666666 	.word	0x66666666
 800686c:	3fe66666 	.word	0x3fe66666
 8006870:	20000284 	.word	0x20000284
 8006874:	20000258 	.word	0x20000258
 8006878:	20004230 	.word	0x20004230
 800687c:	20000308 	.word	0x20000308
 8006880:	3fe00000 	.word	0x3fe00000
 8006884:	2000030a 	.word	0x2000030a
 8006888:	20004aec 	.word	0x20004aec
 800688c:	20004afc 	.word	0x20004afc
 8006890:	20004b10 	.word	0x20004b10
 8006894:	20004ae8 	.word	0x20004ae8

08006898 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	4603      	mov	r3, r0
 80068a0:	6039      	str	r1, [r7, #0]
 80068a2:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	4053      	eors	r3, r2
 80068ae:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	b25a      	sxtb	r2, r3
 80068b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ba:	4053      	eors	r3, r2
 80068bc:	b25b      	sxtb	r3, r3
 80068be:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	0a1b      	lsrs	r3, r3, #8
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	b21a      	sxth	r2, r3
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	b21b      	sxth	r3, r3
 80068d0:	4053      	eors	r3, r2
 80068d2:	b21a      	sxth	r2, r3
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	b21b      	sxth	r3, r3
 80068da:	4053      	eors	r3, r2
 80068dc:	b21a      	sxth	r2, r3
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	091b      	lsrs	r3, r3, #4
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	b21b      	sxth	r3, r3
 80068e6:	4053      	eors	r3, r2
 80068e8:	b21b      	sxth	r3, r3
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	801a      	strh	r2, [r3, #0]
}
 80068f0:	bf00      	nop
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800690a:	801a      	strh	r2, [r3, #0]
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8006924:	f107 030e 	add.w	r3, r7, #14
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff ffe7 	bl	80068fc <crc_init>
	while (length--) {
 800692e:	e009      	b.n	8006944 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	f107 020e 	add.w	r2, r7, #14
 800693c:	4611      	mov	r1, r2
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff ffaa 	bl	8006898 <crc_accumulate>
	while (length--) {
 8006944:	887b      	ldrh	r3, [r7, #2]
 8006946:	1e5a      	subs	r2, r3, #1
 8006948:	807a      	strh	r2, [r7, #2]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1f0      	bne.n	8006930 <crc_calculate+0x18>
        }
        return crcTmp;
 800694e:	89fb      	ldrh	r3, [r7, #14]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	617b      	str	r3, [r7, #20]
	while (length--) {
 800696a:	e007      	b.n	800697c <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	617a      	str	r2, [r7, #20]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	68f9      	ldr	r1, [r7, #12]
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff ff8e 	bl	8006898 <crc_accumulate>
	while (length--) {
 800697c:	88fb      	ldrh	r3, [r7, #6]
 800697e:	1e5a      	subs	r2, r3, #1
 8006980:	80fa      	strh	r2, [r7, #6]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1f2      	bne.n	800696c <crc_accumulate_buffer+0x14>
        }
}
 8006986:	bf00      	nop
 8006988:	bf00      	nop
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 800699a:	79fa      	ldrb	r2, [r7, #7]
 800699c:	4613      	mov	r3, r2
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	4413      	add	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4a03      	ldr	r2, [pc, #12]	; (80069b4 <mavlink_get_channel_status+0x24>)
 80069a6:	4413      	add	r3, r2
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	20000434 	.word	0x20000434

080069b8 <mavlink_finalize_message_chan>:
						      uint8_t chan, uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
 80069b8:	b590      	push	{r4, r7, lr}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	4608      	mov	r0, r1
 80069c2:	4611      	mov	r1, r2
 80069c4:	461a      	mov	r2, r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	70fb      	strb	r3, [r7, #3]
 80069ca:	460b      	mov	r3, r1
 80069cc:	70bb      	strb	r3, [r7, #2]
 80069ce:	4613      	mov	r3, r2
 80069d0:	707b      	strb	r3, [r7, #1]
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	22fe      	movs	r2, #254	; 0xfe
 80069d6:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	7e3a      	ldrb	r2, [r7, #24]
 80069dc:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	78fa      	ldrb	r2, [r7, #3]
 80069e2:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	78ba      	ldrb	r2, [r7, #2]
 80069e8:	719a      	strb	r2, [r3, #6]
	// One sequence number per component
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 80069ea:	787b      	ldrb	r3, [r7, #1]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff ffcf 	bl	8006990 <mavlink_get_channel_status>
 80069f2:	4603      	mov	r3, r0
 80069f4:	799a      	ldrb	r2, [r3, #6]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 80069fa:	787b      	ldrb	r3, [r7, #1]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7ff ffc7 	bl	8006990 <mavlink_get_channel_status>
 8006a02:	4603      	mov	r3, r0
 8006a04:	799c      	ldrb	r4, [r3, #6]
 8006a06:	787b      	ldrb	r3, [r7, #1]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff ffc1 	bl	8006990 <mavlink_get_channel_status>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	1c62      	adds	r2, r4, #1
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	719a      	strb	r2, [r3, #6]
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3303      	adds	r3, #3
 8006a1a:	2105      	movs	r1, #5
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff ff7b 	bl	8006918 <crc_calculate>
 8006a22:	4603      	mov	r3, r0
 8006a24:	461a      	mov	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f103 0108 	add.w	r1, r3, #8
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	78db      	ldrb	r3, [r3, #3]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f7ff ff8d 	bl	8006958 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &msg->checksum);
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	7f3b      	ldrb	r3, [r7, #28]
 8006a42:	4611      	mov	r1, r2
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff ff27 	bl	8006898 <crc_accumulate>
#endif
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b299      	uxth	r1, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3308      	adds	r3, #8
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	78d2      	ldrb	r2, [r2, #3]
 8006a58:	4413      	add	r3, r2
 8006a5a:	b2ca      	uxtb	r2, r1
 8006a5c:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	0a1b      	lsrs	r3, r3, #8
 8006a66:	b299      	uxth	r1, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f103 0208 	add.w	r2, r3, #8
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	78db      	ldrb	r3, [r3, #3]
 8006a72:	3301      	adds	r3, #1
 8006a74:	4413      	add	r3, r2
 8006a76:	b2ca      	uxtb	r2, r1
 8006a78:	701a      	strb	r2, [r3, #0]

	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 8006a7a:	7e3b      	ldrb	r3, [r7, #24]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	3308      	adds	r3, #8
 8006a80:	b29b      	uxth	r3, r3
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd90      	pop	{r4, r7, pc}

08006a8a <mavlink_finalize_message>:
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
#if MAVLINK_CRC_EXTRA
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t length, uint8_t crc_extra)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af02      	add	r7, sp, #8
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	4608      	mov	r0, r1
 8006a94:	4611      	mov	r1, r2
 8006a96:	461a      	mov	r2, r3
 8006a98:	4603      	mov	r3, r0
 8006a9a:	70fb      	strb	r3, [r7, #3]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70bb      	strb	r3, [r7, #2]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	707b      	strb	r3, [r7, #1]
	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
 8006aa4:	78ba      	ldrb	r2, [r7, #2]
 8006aa6:	78f9      	ldrb	r1, [r7, #3]
 8006aa8:	7c3b      	ldrb	r3, [r7, #16]
 8006aaa:	9301      	str	r3, [sp, #4]
 8006aac:	787b      	ldrb	r3, [r7, #1]
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7ff ff80 	bl	80069b8 <mavlink_finalize_message_chan>
 8006ab8:	4603      	mov	r3, r0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	1c99      	adds	r1, r3, #2
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	78db      	ldrb	r3, [r3, #3]
 8006ad4:	3306      	adds	r3, #6
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f00d ff7b 	bl	80149d4 <memcpy>

	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	78db      	ldrb	r3, [r3, #3]
 8006ae2:	3306      	adds	r3, #6
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4413      	add	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]

	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	0a1b      	lsrs	r3, r3, #8
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3301      	adds	r3, #1
 8006b06:	b2d2      	uxtb	r2, r2
 8006b08:	701a      	strb	r2, [r3, #0]

	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	78db      	ldrb	r3, [r3, #3]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	3308      	adds	r3, #8
 8006b12:	b29b      	uxth	r3, r3
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <mavlink_msg_rc_channels_raw_pack>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rc_channels_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08c      	sub	sp, #48	; 0x30
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	60ba      	str	r2, [r7, #8]
 8006b24:	607b      	str	r3, [r7, #4]
 8006b26:	4603      	mov	r3, r0
 8006b28:	73fb      	strb	r3, [r7, #15]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint8_t(buf, 21, rssi);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#else
	mavlink_rc_channels_raw_t packet;
	packet.time_boot_ms = time_boot_ms;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	613b      	str	r3, [r7, #16]
	packet.chan1_raw = chan1_raw;
 8006b32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b34:	82bb      	strh	r3, [r7, #20]
	packet.chan2_raw = chan2_raw;
 8006b36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b38:	82fb      	strh	r3, [r7, #22]
	packet.chan3_raw = chan3_raw;
 8006b3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006b3c:	833b      	strh	r3, [r7, #24]
	packet.chan4_raw = chan4_raw;
 8006b3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b42:	837b      	strh	r3, [r7, #26]
	packet.chan5_raw = chan5_raw;
 8006b44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b48:	83bb      	strh	r3, [r7, #28]
	packet.chan6_raw = chan6_raw;
 8006b4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b4e:	83fb      	strh	r3, [r7, #30]
	packet.chan7_raw = chan7_raw;
 8006b50:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006b54:	843b      	strh	r3, [r7, #32]
	packet.chan8_raw = chan8_raw;
 8006b56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006b5a:	847b      	strh	r3, [r7, #34]	; 0x22
	packet.port = port;
 8006b5c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006b60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet.rssi = rssi;
 8006b64:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006b68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	3308      	adds	r3, #8
 8006b70:	f107 0110 	add.w	r1, r7, #16
 8006b74:	2216      	movs	r2, #22
 8006b76:	4618      	mov	r0, r3
 8006b78:	f00d ff2c 	bl	80149d4 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_RC_CHANNELS_RAW;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2223      	movs	r2, #35	; 0x23
 8006b80:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
 8006b82:	7bba      	ldrb	r2, [r7, #14]
 8006b84:	7bf9      	ldrb	r1, [r7, #15]
 8006b86:	23f4      	movs	r3, #244	; 0xf4
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	2316      	movs	r3, #22
 8006b8c:	68b8      	ldr	r0, [r7, #8]
 8006b8e:	f7ff ff7c 	bl	8006a8a <mavlink_finalize_message>
 8006b92:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3728      	adds	r7, #40	; 0x28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <mavlinkInit>:
static int isTxcpl;
uint32_t send_time_us;

extern float v_estimate;

void mavlinkInit(uint8_t syss_id, uint8_t comm_id,UART_HandleTypeDef *uartt,uint32_t baudrate){
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60ba      	str	r2, [r7, #8]
 8006ba4:	607b      	str	r3, [r7, #4]
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	73fb      	strb	r3, [r7, #15]
 8006baa:	460b      	mov	r3, r1
 8006bac:	73bb      	strb	r3, [r7, #14]
    isTxcpl = 1;
 8006bae:	4b10      	ldr	r3, [pc, #64]	; (8006bf0 <mavlinkInit+0x54>)
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]
    index_ =0;
 8006bb4:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <mavlinkInit+0x58>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	701a      	strb	r2, [r3, #0]
	sys_id  = syss_id;
 8006bba:	4a0f      	ldr	r2, [pc, #60]	; (8006bf8 <mavlinkInit+0x5c>)
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	7013      	strb	r3, [r2, #0]
    com_id  = comm_id;
 8006bc0:	4a0e      	ldr	r2, [pc, #56]	; (8006bfc <mavlinkInit+0x60>)
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
 8006bc4:	7013      	strb	r3, [r2, #0]
	uart = uartt;
 8006bc6:	4a0e      	ldr	r2, [pc, #56]	; (8006c00 <mavlinkInit+0x64>)
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	6013      	str	r3, [r2, #0]
    uartt->Init.BaudRate = baudrate;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(uartt);
 8006bd2:	68b8      	ldr	r0, [r7, #8]
 8006bd4:	f005 faf8 	bl	800c1c8 <HAL_UART_Init>
	HAL_UART_Receive_IT(uart, &data,1);
 8006bd8:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <mavlinkInit+0x64>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	4909      	ldr	r1, [pc, #36]	; (8006c04 <mavlinkInit+0x68>)
 8006be0:	4618      	mov	r0, r3
 8006be2:	f005 fbd0 	bl	800c386 <HAL_UART_Receive_IT>
}
 8006be6:	bf00      	nop
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	2000042c 	.word	0x2000042c
 8006bf4:	20000425 	.word	0x20000425
 8006bf8:	20004be8 	.word	0x20004be8
 8006bfc:	20004be0 	.word	0x20004be0
 8006c00:	20000428 	.word	0x20000428
 8006c04:	20000424 	.word	0x20000424

08006c08 <mavlink_rc_raw>:
    }
    HAL_UART_Receive_IT(uart, &data,1);
}
*/

void mavlink_rc_raw(uint16_t thortle,uint16_t servo_L, uint16_t servo_R){
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08e      	sub	sp, #56	; 0x38
 8006c0c:	af0a      	add	r7, sp, #40	; 0x28
 8006c0e:	4603      	mov	r3, r0
 8006c10:	80fb      	strh	r3, [r7, #6]
 8006c12:	460b      	mov	r3, r1
 8006c14:	80bb      	strh	r3, [r7, #4]
 8006c16:	4613      	mov	r3, r2
 8006c18:	807b      	strh	r3, [r7, #2]
	static uint32_t count = 0;
	if(isTxcpl)
 8006c1a:	4b1d      	ldr	r3, [pc, #116]	; (8006c90 <mavlink_rc_raw+0x88>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d032      	beq.n	8006c88 <mavlink_rc_raw+0x80>
	{
        count++;
 8006c22:	4b1c      	ldr	r3, [pc, #112]	; (8006c94 <mavlink_rc_raw+0x8c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3301      	adds	r3, #1
 8006c28:	4a1a      	ldr	r2, [pc, #104]	; (8006c94 <mavlink_rc_raw+0x8c>)
 8006c2a:	6013      	str	r3, [r2, #0]
		mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8006c2c:	4b1a      	ldr	r3, [pc, #104]	; (8006c98 <mavlink_rc_raw+0x90>)
 8006c2e:	7818      	ldrb	r0, [r3, #0]
 8006c30:	4b1a      	ldr	r3, [pc, #104]	; (8006c9c <mavlink_rc_raw+0x94>)
 8006c32:	7819      	ldrb	r1, [r3, #0]
 8006c34:	4b17      	ldr	r3, [pc, #92]	; (8006c94 <mavlink_rc_raw+0x8c>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	9308      	str	r3, [sp, #32]
 8006c40:	2300      	movs	r3, #0
 8006c42:	9307      	str	r3, [sp, #28]
 8006c44:	2300      	movs	r3, #0
 8006c46:	9306      	str	r3, [sp, #24]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9305      	str	r3, [sp, #20]
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	9304      	str	r3, [sp, #16]
 8006c50:	88fb      	ldrh	r3, [r7, #6]
 8006c52:	9303      	str	r3, [sp, #12]
 8006c54:	887b      	ldrh	r3, [r7, #2]
 8006c56:	9302      	str	r3, [sp, #8]
 8006c58:	88bb      	ldrh	r3, [r7, #4]
 8006c5a:	9301      	str	r3, [sp, #4]
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	4613      	mov	r3, r2
 8006c62:	4a0f      	ldr	r2, [pc, #60]	; (8006ca0 <mavlink_rc_raw+0x98>)
 8006c64:	f7ff ff5a 	bl	8006b1c <mavlink_msg_rc_channels_raw_pack>
					count,1,servo_L, servo_R, thortle,0,0,0,0,0,0);
		uint16_t len = mavlink_msg_to_send_buffer(buffer__,&msg);
 8006c68:	490d      	ldr	r1, [pc, #52]	; (8006ca0 <mavlink_rc_raw+0x98>)
 8006c6a:	480e      	ldr	r0, [pc, #56]	; (8006ca4 <mavlink_rc_raw+0x9c>)
 8006c6c:	f7ff ff29 	bl	8006ac2 <mavlink_msg_to_send_buffer>
 8006c70:	4603      	mov	r3, r0
 8006c72:	81fb      	strh	r3, [r7, #14]
		HAL_UART_Transmit_DMA(uart,buffer__,len);
 8006c74:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <mavlink_rc_raw+0xa0>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	89fa      	ldrh	r2, [r7, #14]
 8006c7a:	490a      	ldr	r1, [pc, #40]	; (8006ca4 <mavlink_rc_raw+0x9c>)
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f005 fbb3 	bl	800c3e8 <HAL_UART_Transmit_DMA>
		isTxcpl = 0;
 8006c82:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <mavlink_rc_raw+0x88>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]
	}
}
 8006c88:	bf00      	nop
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	2000042c 	.word	0x2000042c
 8006c94:	20000430 	.word	0x20000430
 8006c98:	20004be8 	.word	0x20004be8
 8006c9c:	20004be0 	.word	0x20004be0
 8006ca0:	20000314 	.word	0x20000314
 8006ca4:	20004b18 	.word	0x20004b18
 8006ca8:	20000428 	.word	0x20000428

08006cac <mavlink_tx_cpl_callback>:
  isTxcpl = 0;
 }
}

void mavlink_tx_cpl_callback()
{   
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
	isTxcpl = 1;
 8006cb0:	4b03      	ldr	r3, [pc, #12]	; (8006cc0 <mavlink_tx_cpl_callback+0x14>)
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]
}
 8006cb6:	bf00      	nop
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	2000042c 	.word	0x2000042c

08006cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006cc8:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <HAL_Init+0x40>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a0d      	ldr	r2, [pc, #52]	; (8006d04 <HAL_Init+0x40>)
 8006cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006cd4:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <HAL_Init+0x40>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a0a      	ldr	r2, [pc, #40]	; (8006d04 <HAL_Init+0x40>)
 8006cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ce0:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <HAL_Init+0x40>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a07      	ldr	r2, [pc, #28]	; (8006d04 <HAL_Init+0x40>)
 8006ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006cec:	2003      	movs	r0, #3
 8006cee:	f000 f8fc 	bl	8006eea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006cf2:	200f      	movs	r0, #15
 8006cf4:	f7fe fa50 	bl	8005198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006cf8:	f7fe fa22 	bl	8005140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40023c00 	.word	0x40023c00

08006d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006d0c:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <HAL_IncTick+0x20>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	4b06      	ldr	r3, [pc, #24]	; (8006d2c <HAL_IncTick+0x24>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4413      	add	r3, r2
 8006d18:	4a04      	ldr	r2, [pc, #16]	; (8006d2c <HAL_IncTick+0x24>)
 8006d1a:	6013      	str	r3, [r2, #0]
}
 8006d1c:	bf00      	nop
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	20000074 	.word	0x20000074
 8006d2c:	20004bec 	.word	0x20004bec

08006d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d30:	b480      	push	{r7}
 8006d32:	af00      	add	r7, sp, #0
  return uwTick;
 8006d34:	4b03      	ldr	r3, [pc, #12]	; (8006d44 <HAL_GetTick+0x14>)
 8006d36:	681b      	ldr	r3, [r3, #0]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20004bec 	.word	0x20004bec

08006d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d50:	f7ff ffee 	bl	8006d30 <HAL_GetTick>
 8006d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d005      	beq.n	8006d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d62:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <HAL_Delay+0x44>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006d6e:	bf00      	nop
 8006d70:	f7ff ffde 	bl	8006d30 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d8f7      	bhi.n	8006d70 <HAL_Delay+0x28>
  {
  }
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20000074 	.word	0x20000074

08006d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006da0:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006dac:	4013      	ands	r3, r2
 8006dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dc2:	4a04      	ldr	r2, [pc, #16]	; (8006dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	60d3      	str	r3, [r2, #12]
}
 8006dc8:	bf00      	nop
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	e000ed00 	.word	0xe000ed00

08006dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ddc:	4b04      	ldr	r3, [pc, #16]	; (8006df0 <__NVIC_GetPriorityGrouping+0x18>)
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	0a1b      	lsrs	r3, r3, #8
 8006de2:	f003 0307 	and.w	r3, r3, #7
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	e000ed00 	.word	0xe000ed00

08006df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	db0b      	blt.n	8006e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	f003 021f 	and.w	r2, r3, #31
 8006e0c:	4907      	ldr	r1, [pc, #28]	; (8006e2c <__NVIC_EnableIRQ+0x38>)
 8006e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e12:	095b      	lsrs	r3, r3, #5
 8006e14:	2001      	movs	r0, #1
 8006e16:	fa00 f202 	lsl.w	r2, r0, r2
 8006e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	e000e100 	.word	0xe000e100

08006e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	6039      	str	r1, [r7, #0]
 8006e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	db0a      	blt.n	8006e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	490c      	ldr	r1, [pc, #48]	; (8006e7c <__NVIC_SetPriority+0x4c>)
 8006e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e4e:	0112      	lsls	r2, r2, #4
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	440b      	add	r3, r1
 8006e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e58:	e00a      	b.n	8006e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	4908      	ldr	r1, [pc, #32]	; (8006e80 <__NVIC_SetPriority+0x50>)
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	3b04      	subs	r3, #4
 8006e68:	0112      	lsls	r2, r2, #4
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	761a      	strb	r2, [r3, #24]
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	e000e100 	.word	0xe000e100
 8006e80:	e000ed00 	.word	0xe000ed00

08006e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b089      	sub	sp, #36	; 0x24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	f1c3 0307 	rsb	r3, r3, #7
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	bf28      	it	cs
 8006ea2:	2304      	movcs	r3, #4
 8006ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	2b06      	cmp	r3, #6
 8006eac:	d902      	bls.n	8006eb4 <NVIC_EncodePriority+0x30>
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	3b03      	subs	r3, #3
 8006eb2:	e000      	b.n	8006eb6 <NVIC_EncodePriority+0x32>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec2:	43da      	mvns	r2, r3
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	401a      	ands	r2, r3
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed6:	43d9      	mvns	r1, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006edc:	4313      	orrs	r3, r2
         );
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3724      	adds	r7, #36	; 0x24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b082      	sub	sp, #8
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff ff4c 	bl	8006d90 <__NVIC_SetPriorityGrouping>
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f12:	f7ff ff61 	bl	8006dd8 <__NVIC_GetPriorityGrouping>
 8006f16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	6978      	ldr	r0, [r7, #20]
 8006f1e:	f7ff ffb1 	bl	8006e84 <NVIC_EncodePriority>
 8006f22:	4602      	mov	r2, r0
 8006f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f28:	4611      	mov	r1, r2
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff ff80 	bl	8006e30 <__NVIC_SetPriority>
}
 8006f30:	bf00      	nop
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff ff54 	bl	8006df4 <__NVIC_EnableIRQ>
}
 8006f4c:	bf00      	nop
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006f60:	f7ff fee6 	bl	8006d30 <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e099      	b.n	80070a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0201 	bic.w	r2, r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f90:	e00f      	b.n	8006fb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f92:	f7ff fecd 	bl	8006d30 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b05      	cmp	r3, #5
 8006f9e:	d908      	bls.n	8006fb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2203      	movs	r2, #3
 8006faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e078      	b.n	80070a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e8      	bne.n	8006f92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	4b38      	ldr	r3, [pc, #224]	; (80070ac <HAL_DMA_Init+0x158>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	4313      	orrs	r3, r2
 8007002:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	2b04      	cmp	r3, #4
 800700a:	d107      	bne.n	800701c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007014:	4313      	orrs	r3, r2
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f023 0307 	bic.w	r3, r3, #7
 8007032:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	2b04      	cmp	r3, #4
 8007044:	d117      	bne.n	8007076 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	4313      	orrs	r3, r2
 800704e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00e      	beq.n	8007076 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fb0d 	bl	8007678 <DMA_CheckFifoParam>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d008      	beq.n	8007076 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2240      	movs	r2, #64	; 0x40
 8007068:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007072:	2301      	movs	r3, #1
 8007074:	e016      	b.n	80070a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fac4 	bl	800760c <DMA_CalcBaseAndBitshift>
 8007084:	4603      	mov	r3, r0
 8007086:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708c:	223f      	movs	r2, #63	; 0x3f
 800708e:	409a      	lsls	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3718      	adds	r7, #24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	f010803f 	.word	0xf010803f

080070b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d101      	bne.n	80070d6 <HAL_DMA_Start_IT+0x26>
 80070d2:	2302      	movs	r3, #2
 80070d4:	e040      	b.n	8007158 <HAL_DMA_Start_IT+0xa8>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d12f      	bne.n	800714a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2202      	movs	r2, #2
 80070ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 fa56 	bl	80075b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007108:	223f      	movs	r2, #63	; 0x3f
 800710a:	409a      	lsls	r2, r3
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0216 	orr.w	r2, r2, #22
 800711e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	d007      	beq.n	8007138 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0208 	orr.w	r2, r2, #8
 8007136:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0201 	orr.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	e005      	b.n	8007156 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007152:	2302      	movs	r3, #2
 8007154:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007156:	7dfb      	ldrb	r3, [r7, #23]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800716c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800716e:	f7ff fddf 	bl	8006d30 <HAL_GetTick>
 8007172:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d008      	beq.n	8007192 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2280      	movs	r2, #128	; 0x80
 8007184:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e052      	b.n	8007238 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0216 	bic.w	r2, r2, #22
 80071a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	695a      	ldr	r2, [r3, #20]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <HAL_DMA_Abort+0x62>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0208 	bic.w	r2, r2, #8
 80071d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 0201 	bic.w	r2, r2, #1
 80071e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071e2:	e013      	b.n	800720c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071e4:	f7ff fda4 	bl	8006d30 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	2b05      	cmp	r3, #5
 80071f0:	d90c      	bls.n	800720c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2203      	movs	r2, #3
 80071fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e015      	b.n	8007238 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e4      	bne.n	80071e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800721e:	223f      	movs	r2, #63	; 0x3f
 8007220:	409a      	lsls	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b02      	cmp	r3, #2
 8007252:	d004      	beq.n	800725e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2280      	movs	r2, #128	; 0x80
 8007258:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e00c      	b.n	8007278 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2205      	movs	r2, #5
 8007262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0201 	bic.w	r2, r2, #1
 8007274:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007290:	4b92      	ldr	r3, [pc, #584]	; (80074dc <HAL_DMA_IRQHandler+0x258>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a92      	ldr	r2, [pc, #584]	; (80074e0 <HAL_DMA_IRQHandler+0x25c>)
 8007296:	fba2 2303 	umull	r2, r3, r2, r3
 800729a:	0a9b      	lsrs	r3, r3, #10
 800729c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ae:	2208      	movs	r2, #8
 80072b0:	409a      	lsls	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4013      	ands	r3, r2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d01a      	beq.n	80072f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d013      	beq.n	80072f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0204 	bic.w	r2, r2, #4
 80072d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072dc:	2208      	movs	r2, #8
 80072de:	409a      	lsls	r2, r3
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e8:	f043 0201 	orr.w	r2, r3, #1
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f4:	2201      	movs	r2, #1
 80072f6:	409a      	lsls	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4013      	ands	r3, r2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d012      	beq.n	8007326 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007312:	2201      	movs	r2, #1
 8007314:	409a      	lsls	r2, r3
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731e:	f043 0202 	orr.w	r2, r3, #2
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800732a:	2204      	movs	r2, #4
 800732c:	409a      	lsls	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	4013      	ands	r3, r2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d012      	beq.n	800735c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00b      	beq.n	800735c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007348:	2204      	movs	r2, #4
 800734a:	409a      	lsls	r2, r3
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007354:	f043 0204 	orr.w	r2, r3, #4
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007360:	2210      	movs	r2, #16
 8007362:	409a      	lsls	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4013      	ands	r3, r2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d043      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0308 	and.w	r3, r3, #8
 8007376:	2b00      	cmp	r3, #0
 8007378:	d03c      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800737e:	2210      	movs	r2, #16
 8007380:	409a      	lsls	r2, r3
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d018      	beq.n	80073c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d108      	bne.n	80073b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d024      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	4798      	blx	r3
 80073b2:	e01f      	b.n	80073f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d01b      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	4798      	blx	r3
 80073c4:	e016      	b.n	80073f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d107      	bne.n	80073e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0208 	bic.w	r2, r2, #8
 80073e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f8:	2220      	movs	r2, #32
 80073fa:	409a      	lsls	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4013      	ands	r3, r2
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 808e 	beq.w	8007522 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0310 	and.w	r3, r3, #16
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8086 	beq.w	8007522 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800741a:	2220      	movs	r2, #32
 800741c:	409a      	lsls	r2, r3
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b05      	cmp	r3, #5
 800742c:	d136      	bne.n	800749c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 0216 	bic.w	r2, r2, #22
 800743c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	695a      	ldr	r2, [r3, #20]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800744c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	d103      	bne.n	800745e <HAL_DMA_IRQHandler+0x1da>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0208 	bic.w	r2, r2, #8
 800746c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007472:	223f      	movs	r2, #63	; 0x3f
 8007474:	409a      	lsls	r2, r3
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800748e:	2b00      	cmp	r3, #0
 8007490:	d07d      	beq.n	800758e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	4798      	blx	r3
        }
        return;
 800749a:	e078      	b.n	800758e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d01c      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d108      	bne.n	80074ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d030      	beq.n	8007522 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	4798      	blx	r3
 80074c8:	e02b      	b.n	8007522 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d027      	beq.n	8007522 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	4798      	blx	r3
 80074da:	e022      	b.n	8007522 <HAL_DMA_IRQHandler+0x29e>
 80074dc:	20000018 	.word	0x20000018
 80074e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10f      	bne.n	8007512 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f022 0210 	bic.w	r2, r2, #16
 8007500:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007526:	2b00      	cmp	r3, #0
 8007528:	d032      	beq.n	8007590 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d022      	beq.n	800757c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2205      	movs	r2, #5
 800753a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0201 	bic.w	r2, r2, #1
 800754c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	3301      	adds	r3, #1
 8007552:	60bb      	str	r3, [r7, #8]
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	429a      	cmp	r2, r3
 8007558:	d307      	bcc.n	800756a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1f2      	bne.n	800754e <HAL_DMA_IRQHandler+0x2ca>
 8007568:	e000      	b.n	800756c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800756a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d005      	beq.n	8007590 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	4798      	blx	r3
 800758c:	e000      	b.n	8007590 <HAL_DMA_IRQHandler+0x30c>
        return;
 800758e:	bf00      	nop
    }
  }
}
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop

08007598 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	2b40      	cmp	r3, #64	; 0x40
 80075dc:	d108      	bne.n	80075f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80075ee:	e007      	b.n	8007600 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	60da      	str	r2, [r3, #12]
}
 8007600:	bf00      	nop
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	3b10      	subs	r3, #16
 800761c:	4a14      	ldr	r2, [pc, #80]	; (8007670 <DMA_CalcBaseAndBitshift+0x64>)
 800761e:	fba2 2303 	umull	r2, r3, r2, r3
 8007622:	091b      	lsrs	r3, r3, #4
 8007624:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007626:	4a13      	ldr	r2, [pc, #76]	; (8007674 <DMA_CalcBaseAndBitshift+0x68>)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4413      	add	r3, r2
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b03      	cmp	r3, #3
 8007638:	d909      	bls.n	800764e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007642:	f023 0303 	bic.w	r3, r3, #3
 8007646:	1d1a      	adds	r2, r3, #4
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	659a      	str	r2, [r3, #88]	; 0x58
 800764c:	e007      	b.n	800765e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007656:	f023 0303 	bic.w	r3, r3, #3
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	aaaaaaab 	.word	0xaaaaaaab
 8007674:	08015930 	.word	0x08015930

08007678 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007688:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d11f      	bne.n	80076d2 <DMA_CheckFifoParam+0x5a>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b03      	cmp	r3, #3
 8007696:	d856      	bhi.n	8007746 <DMA_CheckFifoParam+0xce>
 8007698:	a201      	add	r2, pc, #4	; (adr r2, 80076a0 <DMA_CheckFifoParam+0x28>)
 800769a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769e:	bf00      	nop
 80076a0:	080076b1 	.word	0x080076b1
 80076a4:	080076c3 	.word	0x080076c3
 80076a8:	080076b1 	.word	0x080076b1
 80076ac:	08007747 	.word	0x08007747
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d046      	beq.n	800774a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076c0:	e043      	b.n	800774a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076ca:	d140      	bne.n	800774e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076d0:	e03d      	b.n	800774e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076da:	d121      	bne.n	8007720 <DMA_CheckFifoParam+0xa8>
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d837      	bhi.n	8007752 <DMA_CheckFifoParam+0xda>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <DMA_CheckFifoParam+0x70>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	080076f9 	.word	0x080076f9
 80076ec:	080076ff 	.word	0x080076ff
 80076f0:	080076f9 	.word	0x080076f9
 80076f4:	08007711 	.word	0x08007711
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	73fb      	strb	r3, [r7, #15]
      break;
 80076fc:	e030      	b.n	8007760 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d025      	beq.n	8007756 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800770e:	e022      	b.n	8007756 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007718:	d11f      	bne.n	800775a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800771e:	e01c      	b.n	800775a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d903      	bls.n	800772e <DMA_CheckFifoParam+0xb6>
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b03      	cmp	r3, #3
 800772a:	d003      	beq.n	8007734 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800772c:	e018      	b.n	8007760 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	73fb      	strb	r3, [r7, #15]
      break;
 8007732:	e015      	b.n	8007760 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00e      	beq.n	800775e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	73fb      	strb	r3, [r7, #15]
      break;
 8007744:	e00b      	b.n	800775e <DMA_CheckFifoParam+0xe6>
      break;
 8007746:	bf00      	nop
 8007748:	e00a      	b.n	8007760 <DMA_CheckFifoParam+0xe8>
      break;
 800774a:	bf00      	nop
 800774c:	e008      	b.n	8007760 <DMA_CheckFifoParam+0xe8>
      break;
 800774e:	bf00      	nop
 8007750:	e006      	b.n	8007760 <DMA_CheckFifoParam+0xe8>
      break;
 8007752:	bf00      	nop
 8007754:	e004      	b.n	8007760 <DMA_CheckFifoParam+0xe8>
      break;
 8007756:	bf00      	nop
 8007758:	e002      	b.n	8007760 <DMA_CheckFifoParam+0xe8>
      break;   
 800775a:	bf00      	nop
 800775c:	e000      	b.n	8007760 <DMA_CheckFifoParam+0xe8>
      break;
 800775e:	bf00      	nop
    }
  } 
  
  return status; 
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop

08007770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007770:	b480      	push	{r7}
 8007772:	b089      	sub	sp, #36	; 0x24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800777a:	2300      	movs	r3, #0
 800777c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800777e:	2300      	movs	r3, #0
 8007780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007782:	2300      	movs	r3, #0
 8007784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007786:	2300      	movs	r3, #0
 8007788:	61fb      	str	r3, [r7, #28]
 800778a:	e16b      	b.n	8007a64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800778c:	2201      	movs	r2, #1
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	fa02 f303 	lsl.w	r3, r2, r3
 8007794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	4013      	ands	r3, r2
 800779e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	f040 815a 	bne.w	8007a5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d005      	beq.n	80077c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d130      	bne.n	8007824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	2203      	movs	r2, #3
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	43db      	mvns	r3, r3
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	4013      	ands	r3, r2
 80077d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	fa02 f303 	lsl.w	r3, r2, r3
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80077f8:	2201      	movs	r2, #1
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007800:	43db      	mvns	r3, r3
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	4013      	ands	r3, r2
 8007806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	091b      	lsrs	r3, r3, #4
 800780e:	f003 0201 	and.w	r2, r3, #1
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	fa02 f303 	lsl.w	r3, r2, r3
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	4313      	orrs	r3, r2
 800781c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f003 0303 	and.w	r3, r3, #3
 800782c:	2b03      	cmp	r3, #3
 800782e:	d017      	beq.n	8007860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	2203      	movs	r2, #3
 800783c:	fa02 f303 	lsl.w	r3, r2, r3
 8007840:	43db      	mvns	r3, r3
 8007842:	69ba      	ldr	r2, [r7, #24]
 8007844:	4013      	ands	r3, r2
 8007846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	fa02 f303 	lsl.w	r3, r2, r3
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	4313      	orrs	r3, r2
 8007858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f003 0303 	and.w	r3, r3, #3
 8007868:	2b02      	cmp	r3, #2
 800786a:	d123      	bne.n	80078b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	08da      	lsrs	r2, r3, #3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3208      	adds	r2, #8
 8007874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	f003 0307 	and.w	r3, r3, #7
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	220f      	movs	r2, #15
 8007884:	fa02 f303 	lsl.w	r3, r2, r3
 8007888:	43db      	mvns	r3, r3
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	4013      	ands	r3, r2
 800788e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	691a      	ldr	r2, [r3, #16]
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	f003 0307 	and.w	r3, r3, #7
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	fa02 f303 	lsl.w	r3, r2, r3
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	08da      	lsrs	r2, r3, #3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	3208      	adds	r2, #8
 80078ae:	69b9      	ldr	r1, [r7, #24]
 80078b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	2203      	movs	r2, #3
 80078c0:	fa02 f303 	lsl.w	r3, r2, r3
 80078c4:	43db      	mvns	r3, r3
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	4013      	ands	r3, r2
 80078ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f003 0203 	and.w	r2, r3, #3
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	fa02 f303 	lsl.w	r3, r2, r3
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	4313      	orrs	r3, r2
 80078e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 80b4 	beq.w	8007a5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	4b60      	ldr	r3, [pc, #384]	; (8007a7c <HAL_GPIO_Init+0x30c>)
 80078fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fe:	4a5f      	ldr	r2, [pc, #380]	; (8007a7c <HAL_GPIO_Init+0x30c>)
 8007900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007904:	6453      	str	r3, [r2, #68]	; 0x44
 8007906:	4b5d      	ldr	r3, [pc, #372]	; (8007a7c <HAL_GPIO_Init+0x30c>)
 8007908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007912:	4a5b      	ldr	r2, [pc, #364]	; (8007a80 <HAL_GPIO_Init+0x310>)
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	089b      	lsrs	r3, r3, #2
 8007918:	3302      	adds	r3, #2
 800791a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800791e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	220f      	movs	r2, #15
 800792a:	fa02 f303 	lsl.w	r3, r2, r3
 800792e:	43db      	mvns	r3, r3
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	4013      	ands	r3, r2
 8007934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a52      	ldr	r2, [pc, #328]	; (8007a84 <HAL_GPIO_Init+0x314>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d02b      	beq.n	8007996 <HAL_GPIO_Init+0x226>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a51      	ldr	r2, [pc, #324]	; (8007a88 <HAL_GPIO_Init+0x318>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d025      	beq.n	8007992 <HAL_GPIO_Init+0x222>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a50      	ldr	r2, [pc, #320]	; (8007a8c <HAL_GPIO_Init+0x31c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d01f      	beq.n	800798e <HAL_GPIO_Init+0x21e>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a4f      	ldr	r2, [pc, #316]	; (8007a90 <HAL_GPIO_Init+0x320>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d019      	beq.n	800798a <HAL_GPIO_Init+0x21a>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a4e      	ldr	r2, [pc, #312]	; (8007a94 <HAL_GPIO_Init+0x324>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d013      	beq.n	8007986 <HAL_GPIO_Init+0x216>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a4d      	ldr	r2, [pc, #308]	; (8007a98 <HAL_GPIO_Init+0x328>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d00d      	beq.n	8007982 <HAL_GPIO_Init+0x212>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a4c      	ldr	r2, [pc, #304]	; (8007a9c <HAL_GPIO_Init+0x32c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d007      	beq.n	800797e <HAL_GPIO_Init+0x20e>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a4b      	ldr	r2, [pc, #300]	; (8007aa0 <HAL_GPIO_Init+0x330>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d101      	bne.n	800797a <HAL_GPIO_Init+0x20a>
 8007976:	2307      	movs	r3, #7
 8007978:	e00e      	b.n	8007998 <HAL_GPIO_Init+0x228>
 800797a:	2308      	movs	r3, #8
 800797c:	e00c      	b.n	8007998 <HAL_GPIO_Init+0x228>
 800797e:	2306      	movs	r3, #6
 8007980:	e00a      	b.n	8007998 <HAL_GPIO_Init+0x228>
 8007982:	2305      	movs	r3, #5
 8007984:	e008      	b.n	8007998 <HAL_GPIO_Init+0x228>
 8007986:	2304      	movs	r3, #4
 8007988:	e006      	b.n	8007998 <HAL_GPIO_Init+0x228>
 800798a:	2303      	movs	r3, #3
 800798c:	e004      	b.n	8007998 <HAL_GPIO_Init+0x228>
 800798e:	2302      	movs	r3, #2
 8007990:	e002      	b.n	8007998 <HAL_GPIO_Init+0x228>
 8007992:	2301      	movs	r3, #1
 8007994:	e000      	b.n	8007998 <HAL_GPIO_Init+0x228>
 8007996:	2300      	movs	r3, #0
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	f002 0203 	and.w	r2, r2, #3
 800799e:	0092      	lsls	r2, r2, #2
 80079a0:	4093      	lsls	r3, r2
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079a8:	4935      	ldr	r1, [pc, #212]	; (8007a80 <HAL_GPIO_Init+0x310>)
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	089b      	lsrs	r3, r3, #2
 80079ae:	3302      	adds	r3, #2
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80079b6:	4b3b      	ldr	r3, [pc, #236]	; (8007aa4 <HAL_GPIO_Init+0x334>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	43db      	mvns	r3, r3
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	4013      	ands	r3, r2
 80079c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80079da:	4a32      	ldr	r2, [pc, #200]	; (8007aa4 <HAL_GPIO_Init+0x334>)
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80079e0:	4b30      	ldr	r3, [pc, #192]	; (8007aa4 <HAL_GPIO_Init+0x334>)
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	43db      	mvns	r3, r3
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	4013      	ands	r3, r2
 80079ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007a04:	4a27      	ldr	r2, [pc, #156]	; (8007aa4 <HAL_GPIO_Init+0x334>)
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a0a:	4b26      	ldr	r3, [pc, #152]	; (8007aa4 <HAL_GPIO_Init+0x334>)
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	43db      	mvns	r3, r3
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	4013      	ands	r3, r2
 8007a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a2e:	4a1d      	ldr	r2, [pc, #116]	; (8007aa4 <HAL_GPIO_Init+0x334>)
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a34:	4b1b      	ldr	r3, [pc, #108]	; (8007aa4 <HAL_GPIO_Init+0x334>)
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	43db      	mvns	r3, r3
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	4013      	ands	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d003      	beq.n	8007a58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a58:	4a12      	ldr	r2, [pc, #72]	; (8007aa4 <HAL_GPIO_Init+0x334>)
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	3301      	adds	r3, #1
 8007a62:	61fb      	str	r3, [r7, #28]
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	2b0f      	cmp	r3, #15
 8007a68:	f67f ae90 	bls.w	800778c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007a6c:	bf00      	nop
 8007a6e:	bf00      	nop
 8007a70:	3724      	adds	r7, #36	; 0x24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	40023800 	.word	0x40023800
 8007a80:	40013800 	.word	0x40013800
 8007a84:	40020000 	.word	0x40020000
 8007a88:	40020400 	.word	0x40020400
 8007a8c:	40020800 	.word	0x40020800
 8007a90:	40020c00 	.word	0x40020c00
 8007a94:	40021000 	.word	0x40021000
 8007a98:	40021400 	.word	0x40021400
 8007a9c:	40021800 	.word	0x40021800
 8007aa0:	40021c00 	.word	0x40021c00
 8007aa4:	40013c00 	.word	0x40013c00

08007aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	691a      	ldr	r2, [r3, #16]
 8007ab8:	887b      	ldrh	r3, [r7, #2]
 8007aba:	4013      	ands	r3, r2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
 8007ac4:	e001      	b.n	8007aca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	807b      	strh	r3, [r7, #2]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ae8:	787b      	ldrb	r3, [r7, #1]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007aee:	887a      	ldrh	r2, [r7, #2]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007af4:	e003      	b.n	8007afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007af6:	887b      	ldrh	r3, [r7, #2]
 8007af8:	041a      	lsls	r2, r3, #16
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	619a      	str	r2, [r3, #24]
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b085      	sub	sp, #20
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	460b      	mov	r3, r1
 8007b14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007b1c:	887a      	ldrh	r2, [r7, #2]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4013      	ands	r3, r2
 8007b22:	041a      	lsls	r2, r3, #16
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	43d9      	mvns	r1, r3
 8007b28:	887b      	ldrh	r3, [r7, #2]
 8007b2a:	400b      	ands	r3, r1
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	619a      	str	r2, [r3, #24]
}
 8007b32:	bf00      	nop
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
	...

08007b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e12b      	b.n	8007daa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d106      	bne.n	8007b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fd f8aa 	bl	8004cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2224      	movs	r2, #36	; 0x24
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0201 	bic.w	r2, r2, #1
 8007b82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007ba4:	f002 f94e 	bl	8009e44 <HAL_RCC_GetPCLK1Freq>
 8007ba8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	4a81      	ldr	r2, [pc, #516]	; (8007db4 <HAL_I2C_Init+0x274>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d807      	bhi.n	8007bc4 <HAL_I2C_Init+0x84>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4a80      	ldr	r2, [pc, #512]	; (8007db8 <HAL_I2C_Init+0x278>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	bf94      	ite	ls
 8007bbc:	2301      	movls	r3, #1
 8007bbe:	2300      	movhi	r3, #0
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	e006      	b.n	8007bd2 <HAL_I2C_Init+0x92>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4a7d      	ldr	r2, [pc, #500]	; (8007dbc <HAL_I2C_Init+0x27c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	bf94      	ite	ls
 8007bcc:	2301      	movls	r3, #1
 8007bce:	2300      	movhi	r3, #0
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e0e7      	b.n	8007daa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4a78      	ldr	r2, [pc, #480]	; (8007dc0 <HAL_I2C_Init+0x280>)
 8007bde:	fba2 2303 	umull	r2, r3, r2, r3
 8007be2:	0c9b      	lsrs	r3, r3, #18
 8007be4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	4a6a      	ldr	r2, [pc, #424]	; (8007db4 <HAL_I2C_Init+0x274>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d802      	bhi.n	8007c14 <HAL_I2C_Init+0xd4>
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	3301      	adds	r3, #1
 8007c12:	e009      	b.n	8007c28 <HAL_I2C_Init+0xe8>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007c1a:	fb02 f303 	mul.w	r3, r2, r3
 8007c1e:	4a69      	ldr	r2, [pc, #420]	; (8007dc4 <HAL_I2C_Init+0x284>)
 8007c20:	fba2 2303 	umull	r2, r3, r2, r3
 8007c24:	099b      	lsrs	r3, r3, #6
 8007c26:	3301      	adds	r3, #1
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	6812      	ldr	r2, [r2, #0]
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007c3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	495c      	ldr	r1, [pc, #368]	; (8007db4 <HAL_I2C_Init+0x274>)
 8007c44:	428b      	cmp	r3, r1
 8007c46:	d819      	bhi.n	8007c7c <HAL_I2C_Init+0x13c>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	1e59      	subs	r1, r3, #1
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c56:	1c59      	adds	r1, r3, #1
 8007c58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007c5c:	400b      	ands	r3, r1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <HAL_I2C_Init+0x138>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	1e59      	subs	r1, r3, #1
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c70:	3301      	adds	r3, #1
 8007c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c76:	e051      	b.n	8007d1c <HAL_I2C_Init+0x1dc>
 8007c78:	2304      	movs	r3, #4
 8007c7a:	e04f      	b.n	8007d1c <HAL_I2C_Init+0x1dc>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d111      	bne.n	8007ca8 <HAL_I2C_Init+0x168>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	1e58      	subs	r0, r3, #1
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6859      	ldr	r1, [r3, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	440b      	add	r3, r1
 8007c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c96:	3301      	adds	r3, #1
 8007c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bf0c      	ite	eq
 8007ca0:	2301      	moveq	r3, #1
 8007ca2:	2300      	movne	r3, #0
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	e012      	b.n	8007cce <HAL_I2C_Init+0x18e>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	1e58      	subs	r0, r3, #1
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6859      	ldr	r1, [r3, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	0099      	lsls	r1, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	bf0c      	ite	eq
 8007cc8:	2301      	moveq	r3, #1
 8007cca:	2300      	movne	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <HAL_I2C_Init+0x196>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e022      	b.n	8007d1c <HAL_I2C_Init+0x1dc>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10e      	bne.n	8007cfc <HAL_I2C_Init+0x1bc>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1e58      	subs	r0, r3, #1
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6859      	ldr	r1, [r3, #4]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	440b      	add	r3, r1
 8007cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cfa:	e00f      	b.n	8007d1c <HAL_I2C_Init+0x1dc>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	1e58      	subs	r0, r3, #1
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6859      	ldr	r1, [r3, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	0099      	lsls	r1, r3, #2
 8007d0c:	440b      	add	r3, r1
 8007d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d12:	3301      	adds	r3, #1
 8007d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	6809      	ldr	r1, [r1, #0]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69da      	ldr	r2, [r3, #28]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	431a      	orrs	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007d4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	6911      	ldr	r1, [r2, #16]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	68d2      	ldr	r2, [r2, #12]
 8007d56:	4311      	orrs	r1, r2
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6812      	ldr	r2, [r2, #0]
 8007d5c:	430b      	orrs	r3, r1
 8007d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695a      	ldr	r2, [r3, #20]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2220      	movs	r2, #32
 8007d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	000186a0 	.word	0x000186a0
 8007db8:	001e847f 	.word	0x001e847f
 8007dbc:	003d08ff 	.word	0x003d08ff
 8007dc0:	431bde83 	.word	0x431bde83
 8007dc4:	10624dd3 	.word	0x10624dd3

08007dc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b088      	sub	sp, #32
 8007dcc:	af02      	add	r7, sp, #8
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	607a      	str	r2, [r7, #4]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	817b      	strh	r3, [r7, #10]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ddc:	f7fe ffa8 	bl	8006d30 <HAL_GetTick>
 8007de0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b20      	cmp	r3, #32
 8007dec:	f040 80e0 	bne.w	8007fb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	2319      	movs	r3, #25
 8007df6:	2201      	movs	r2, #1
 8007df8:	4970      	ldr	r1, [pc, #448]	; (8007fbc <HAL_I2C_Master_Transmit+0x1f4>)
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f001 fa24 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007e06:	2302      	movs	r3, #2
 8007e08:	e0d3      	b.n	8007fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d101      	bne.n	8007e18 <HAL_I2C_Master_Transmit+0x50>
 8007e14:	2302      	movs	r3, #2
 8007e16:	e0cc      	b.n	8007fb2 <HAL_I2C_Master_Transmit+0x1ea>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d007      	beq.n	8007e3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f042 0201 	orr.w	r2, r2, #1
 8007e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2221      	movs	r2, #33	; 0x21
 8007e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2210      	movs	r2, #16
 8007e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	893a      	ldrh	r2, [r7, #8]
 8007e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4a50      	ldr	r2, [pc, #320]	; (8007fc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8007e7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007e80:	8979      	ldrh	r1, [r7, #10]
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	6a3a      	ldr	r2, [r7, #32]
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 ff10 	bl	8008cac <I2C_MasterRequestWrite>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e08d      	b.n	8007fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e96:	2300      	movs	r3, #0
 8007e98:	613b      	str	r3, [r7, #16]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	613b      	str	r3, [r7, #16]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	613b      	str	r3, [r7, #16]
 8007eaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007eac:	e066      	b.n	8007f7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	6a39      	ldr	r1, [r7, #32]
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f001 fa9e 	bl	80093f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00d      	beq.n	8007eda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	d107      	bne.n	8007ed6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ed4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e06b      	b.n	8007fb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	781a      	ldrb	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	1c5a      	adds	r2, r3, #1
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f02:	3b01      	subs	r3, #1
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	f003 0304 	and.w	r3, r3, #4
 8007f14:	2b04      	cmp	r3, #4
 8007f16:	d11b      	bne.n	8007f50 <HAL_I2C_Master_Transmit+0x188>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d017      	beq.n	8007f50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	781a      	ldrb	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	1c5a      	adds	r2, r3, #1
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	6a39      	ldr	r1, [r7, #32]
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f001 fa8e 	bl	8009476 <I2C_WaitOnBTFFlagUntilTimeout>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00d      	beq.n	8007f7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d107      	bne.n	8007f78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e01a      	b.n	8007fb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d194      	bne.n	8007eae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	e000      	b.n	8007fb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007fb0:	2302      	movs	r3, #2
  }
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	00100002 	.word	0x00100002
 8007fc0:	ffff0000 	.word	0xffff0000

08007fc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b08c      	sub	sp, #48	; 0x30
 8007fc8:	af02      	add	r7, sp, #8
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	607a      	str	r2, [r7, #4]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	817b      	strh	r3, [r7, #10]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007fd8:	f7fe feaa 	bl	8006d30 <HAL_GetTick>
 8007fdc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	f040 820b 	bne.w	8008402 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	2319      	movs	r3, #25
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	497c      	ldr	r1, [pc, #496]	; (80081e8 <HAL_I2C_Master_Receive+0x224>)
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f001 f926 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008002:	2302      	movs	r3, #2
 8008004:	e1fe      	b.n	8008404 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800800c:	2b01      	cmp	r3, #1
 800800e:	d101      	bne.n	8008014 <HAL_I2C_Master_Receive+0x50>
 8008010:	2302      	movs	r3, #2
 8008012:	e1f7      	b.n	8008404 <HAL_I2C_Master_Receive+0x440>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b01      	cmp	r3, #1
 8008028:	d007      	beq.n	800803a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f042 0201 	orr.w	r2, r2, #1
 8008038:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008048:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2222      	movs	r2, #34	; 0x22
 800804e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2210      	movs	r2, #16
 8008056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	893a      	ldrh	r2, [r7, #8]
 800806a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008070:	b29a      	uxth	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4a5c      	ldr	r2, [pc, #368]	; (80081ec <HAL_I2C_Master_Receive+0x228>)
 800807a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800807c:	8979      	ldrh	r1, [r7, #10]
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 fe94 	bl	8008db0 <I2C_MasterRequestRead>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e1b8      	b.n	8008404 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008096:	2b00      	cmp	r3, #0
 8008098:	d113      	bne.n	80080c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800809a:	2300      	movs	r3, #0
 800809c:	623b      	str	r3, [r7, #32]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	623b      	str	r3, [r7, #32]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	623b      	str	r3, [r7, #32]
 80080ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	e18c      	b.n	80083dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d11b      	bne.n	8008102 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080da:	2300      	movs	r3, #0
 80080dc:	61fb      	str	r3, [r7, #28]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	61fb      	str	r3, [r7, #28]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	61fb      	str	r3, [r7, #28]
 80080ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	e16c      	b.n	80083dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008106:	2b02      	cmp	r3, #2
 8008108:	d11b      	bne.n	8008142 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008118:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008128:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800812a:	2300      	movs	r3, #0
 800812c:	61bb      	str	r3, [r7, #24]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	61bb      	str	r3, [r7, #24]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	61bb      	str	r3, [r7, #24]
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	e14c      	b.n	80083dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008150:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008152:	2300      	movs	r3, #0
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	617b      	str	r3, [r7, #20]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008168:	e138      	b.n	80083dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800816e:	2b03      	cmp	r3, #3
 8008170:	f200 80f1 	bhi.w	8008356 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008178:	2b01      	cmp	r3, #1
 800817a:	d123      	bne.n	80081c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800817c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800817e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f001 f9b9 	bl	80094f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e139      	b.n	8008404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691a      	ldr	r2, [r3, #16]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	b2d2      	uxtb	r2, r2
 800819c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ac:	3b01      	subs	r3, #1
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b29a      	uxth	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081c2:	e10b      	b.n	80083dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d14e      	bne.n	800826a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	2200      	movs	r2, #0
 80081d4:	4906      	ldr	r1, [pc, #24]	; (80081f0 <HAL_I2C_Master_Receive+0x22c>)
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f001 f836 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d008      	beq.n	80081f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e10e      	b.n	8008404 <HAL_I2C_Master_Receive+0x440>
 80081e6:	bf00      	nop
 80081e8:	00100002 	.word	0x00100002
 80081ec:	ffff0000 	.word	0xffff0000
 80081f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691a      	ldr	r2, [r3, #16]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820e:	b2d2      	uxtb	r2, r2
 8008210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008220:	3b01      	subs	r3, #1
 8008222:	b29a      	uxth	r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800822c:	b29b      	uxth	r3, r3
 800822e:	3b01      	subs	r3, #1
 8008230:	b29a      	uxth	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	691a      	ldr	r2, [r3, #16]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	b2d2      	uxtb	r2, r2
 8008242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008252:	3b01      	subs	r3, #1
 8008254:	b29a      	uxth	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800825e:	b29b      	uxth	r3, r3
 8008260:	3b01      	subs	r3, #1
 8008262:	b29a      	uxth	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008268:	e0b8      	b.n	80083dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	2200      	movs	r2, #0
 8008272:	4966      	ldr	r1, [pc, #408]	; (800840c <HAL_I2C_Master_Receive+0x448>)
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 ffe7 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d001      	beq.n	8008284 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e0bf      	b.n	8008404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	691a      	ldr	r2, [r3, #16]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	b2d2      	uxtb	r2, r2
 80082a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082b0:	3b01      	subs	r3, #1
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082bc:	b29b      	uxth	r3, r3
 80082be:	3b01      	subs	r3, #1
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	2200      	movs	r2, #0
 80082ce:	494f      	ldr	r1, [pc, #316]	; (800840c <HAL_I2C_Master_Receive+0x448>)
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 ffb9 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e091      	b.n	8008404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	691a      	ldr	r2, [r3, #16]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fa:	b2d2      	uxtb	r2, r2
 80082fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	1c5a      	adds	r2, r3, #1
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800830c:	3b01      	subs	r3, #1
 800830e:	b29a      	uxth	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008318:	b29b      	uxth	r3, r3
 800831a:	3b01      	subs	r3, #1
 800831c:	b29a      	uxth	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691a      	ldr	r2, [r3, #16]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	b2d2      	uxtb	r2, r2
 800832e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800833e:	3b01      	subs	r3, #1
 8008340:	b29a      	uxth	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800834a:	b29b      	uxth	r3, r3
 800834c:	3b01      	subs	r3, #1
 800834e:	b29a      	uxth	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008354:	e042      	b.n	80083dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f001 f8cc 	bl	80094f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e04c      	b.n	8008404 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	691a      	ldr	r2, [r3, #16]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	b2d2      	uxtb	r2, r2
 8008376:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008386:	3b01      	subs	r3, #1
 8008388:	b29a      	uxth	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008392:	b29b      	uxth	r3, r3
 8008394:	3b01      	subs	r3, #1
 8008396:	b29a      	uxth	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	f003 0304 	and.w	r3, r3, #4
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d118      	bne.n	80083dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	b2d2      	uxtb	r2, r2
 80083b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	1c5a      	adds	r2, r3, #1
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083c6:	3b01      	subs	r3, #1
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	3b01      	subs	r3, #1
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f47f aec2 	bne.w	800816a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2220      	movs	r2, #32
 80083ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80083fe:	2300      	movs	r3, #0
 8008400:	e000      	b.n	8008404 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008402:	2302      	movs	r3, #2
  }
}
 8008404:	4618      	mov	r0, r3
 8008406:	3728      	adds	r7, #40	; 0x28
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	00010004 	.word	0x00010004

08008410 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b088      	sub	sp, #32
 8008414:	af02      	add	r7, sp, #8
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	4608      	mov	r0, r1
 800841a:	4611      	mov	r1, r2
 800841c:	461a      	mov	r2, r3
 800841e:	4603      	mov	r3, r0
 8008420:	817b      	strh	r3, [r7, #10]
 8008422:	460b      	mov	r3, r1
 8008424:	813b      	strh	r3, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800842a:	f7fe fc81 	bl	8006d30 <HAL_GetTick>
 800842e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b20      	cmp	r3, #32
 800843a:	f040 80d9 	bne.w	80085f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	2319      	movs	r3, #25
 8008444:	2201      	movs	r2, #1
 8008446:	496d      	ldr	r1, [pc, #436]	; (80085fc <HAL_I2C_Mem_Write+0x1ec>)
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 fefd 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008454:	2302      	movs	r3, #2
 8008456:	e0cc      	b.n	80085f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800845e:	2b01      	cmp	r3, #1
 8008460:	d101      	bne.n	8008466 <HAL_I2C_Mem_Write+0x56>
 8008462:	2302      	movs	r3, #2
 8008464:	e0c5      	b.n	80085f2 <HAL_I2C_Mem_Write+0x1e2>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0301 	and.w	r3, r3, #1
 8008478:	2b01      	cmp	r3, #1
 800847a:	d007      	beq.n	800848c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0201 	orr.w	r2, r2, #1
 800848a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800849a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2221      	movs	r2, #33	; 0x21
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2240      	movs	r2, #64	; 0x40
 80084a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6a3a      	ldr	r2, [r7, #32]
 80084b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80084bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	4a4d      	ldr	r2, [pc, #308]	; (8008600 <HAL_I2C_Mem_Write+0x1f0>)
 80084cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084ce:	88f8      	ldrh	r0, [r7, #6]
 80084d0:	893a      	ldrh	r2, [r7, #8]
 80084d2:	8979      	ldrh	r1, [r7, #10]
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	9301      	str	r3, [sp, #4]
 80084d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	4603      	mov	r3, r0
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 fd34 	bl	8008f4c <I2C_RequestMemoryWrite>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d052      	beq.n	8008590 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e081      	b.n	80085f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f000 ff7e 	bl	80093f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00d      	beq.n	800851a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008502:	2b04      	cmp	r3, #4
 8008504:	d107      	bne.n	8008516 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008514:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e06b      	b.n	80085f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	781a      	ldrb	r2, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008534:	3b01      	subs	r3, #1
 8008536:	b29a      	uxth	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008540:	b29b      	uxth	r3, r3
 8008542:	3b01      	subs	r3, #1
 8008544:	b29a      	uxth	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b04      	cmp	r3, #4
 8008556:	d11b      	bne.n	8008590 <HAL_I2C_Mem_Write+0x180>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800855c:	2b00      	cmp	r3, #0
 800855e:	d017      	beq.n	8008590 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	781a      	ldrb	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800857a:	3b01      	subs	r3, #1
 800857c:	b29a      	uxth	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008586:	b29b      	uxth	r3, r3
 8008588:	3b01      	subs	r3, #1
 800858a:	b29a      	uxth	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1aa      	bne.n	80084ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 ff6a 	bl	8009476 <I2C_WaitOnBTFFlagUntilTimeout>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00d      	beq.n	80085c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ac:	2b04      	cmp	r3, #4
 80085ae:	d107      	bne.n	80085c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e016      	b.n	80085f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2220      	movs	r2, #32
 80085d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	e000      	b.n	80085f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80085f0:	2302      	movs	r3, #2
  }
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	00100002 	.word	0x00100002
 8008600:	ffff0000 	.word	0xffff0000

08008604 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b08c      	sub	sp, #48	; 0x30
 8008608:	af02      	add	r7, sp, #8
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	4608      	mov	r0, r1
 800860e:	4611      	mov	r1, r2
 8008610:	461a      	mov	r2, r3
 8008612:	4603      	mov	r3, r0
 8008614:	817b      	strh	r3, [r7, #10]
 8008616:	460b      	mov	r3, r1
 8008618:	813b      	strh	r3, [r7, #8]
 800861a:	4613      	mov	r3, r2
 800861c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800861e:	f7fe fb87 	bl	8006d30 <HAL_GetTick>
 8008622:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b20      	cmp	r3, #32
 800862e:	f040 8208 	bne.w	8008a42 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	2319      	movs	r3, #25
 8008638:	2201      	movs	r2, #1
 800863a:	497b      	ldr	r1, [pc, #492]	; (8008828 <HAL_I2C_Mem_Read+0x224>)
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 fe03 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008648:	2302      	movs	r3, #2
 800864a:	e1fb      	b.n	8008a44 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008652:	2b01      	cmp	r3, #1
 8008654:	d101      	bne.n	800865a <HAL_I2C_Mem_Read+0x56>
 8008656:	2302      	movs	r3, #2
 8008658:	e1f4      	b.n	8008a44 <HAL_I2C_Mem_Read+0x440>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	2b01      	cmp	r3, #1
 800866e:	d007      	beq.n	8008680 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f042 0201 	orr.w	r2, r2, #1
 800867e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800868e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2222      	movs	r2, #34	; 0x22
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2240      	movs	r2, #64	; 0x40
 800869c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80086b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4a5b      	ldr	r2, [pc, #364]	; (800882c <HAL_I2C_Mem_Read+0x228>)
 80086c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086c2:	88f8      	ldrh	r0, [r7, #6]
 80086c4:	893a      	ldrh	r2, [r7, #8]
 80086c6:	8979      	ldrh	r1, [r7, #10]
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	4603      	mov	r3, r0
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f000 fcd0 	bl	8009078 <I2C_RequestMemoryRead>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e1b0      	b.n	8008a44 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d113      	bne.n	8008712 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086ea:	2300      	movs	r3, #0
 80086ec:	623b      	str	r3, [r7, #32]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	623b      	str	r3, [r7, #32]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	623b      	str	r3, [r7, #32]
 80086fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	e184      	b.n	8008a1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008716:	2b01      	cmp	r3, #1
 8008718:	d11b      	bne.n	8008752 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008728:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800872a:	2300      	movs	r3, #0
 800872c:	61fb      	str	r3, [r7, #28]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	61fb      	str	r3, [r7, #28]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	61fb      	str	r3, [r7, #28]
 800873e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	e164      	b.n	8008a1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008756:	2b02      	cmp	r3, #2
 8008758:	d11b      	bne.n	8008792 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008768:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008778:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800877a:	2300      	movs	r3, #0
 800877c:	61bb      	str	r3, [r7, #24]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	61bb      	str	r3, [r7, #24]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	61bb      	str	r3, [r7, #24]
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	e144      	b.n	8008a1c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008792:	2300      	movs	r3, #0
 8008794:	617b      	str	r3, [r7, #20]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	617b      	str	r3, [r7, #20]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	617b      	str	r3, [r7, #20]
 80087a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80087a8:	e138      	b.n	8008a1c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	f200 80f1 	bhi.w	8008996 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d123      	bne.n	8008804 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 fe99 	bl	80094f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e139      	b.n	8008a44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	691a      	ldr	r2, [r3, #16]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	b2d2      	uxtb	r2, r2
 80087dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e2:	1c5a      	adds	r2, r3, #1
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ec:	3b01      	subs	r3, #1
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	3b01      	subs	r3, #1
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008802:	e10b      	b.n	8008a1c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008808:	2b02      	cmp	r3, #2
 800880a:	d14e      	bne.n	80088aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008812:	2200      	movs	r2, #0
 8008814:	4906      	ldr	r1, [pc, #24]	; (8008830 <HAL_I2C_Mem_Read+0x22c>)
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f000 fd16 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d008      	beq.n	8008834 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e10e      	b.n	8008a44 <HAL_I2C_Mem_Read+0x440>
 8008826:	bf00      	nop
 8008828:	00100002 	.word	0x00100002
 800882c:	ffff0000 	.word	0xffff0000
 8008830:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	691a      	ldr	r2, [r3, #16]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	b2d2      	uxtb	r2, r2
 8008850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800886c:	b29b      	uxth	r3, r3
 800886e:	3b01      	subs	r3, #1
 8008870:	b29a      	uxth	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	691a      	ldr	r2, [r3, #16]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	b2d2      	uxtb	r2, r2
 8008882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008892:	3b01      	subs	r3, #1
 8008894:	b29a      	uxth	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800889e:	b29b      	uxth	r3, r3
 80088a0:	3b01      	subs	r3, #1
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80088a8:	e0b8      	b.n	8008a1c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b0:	2200      	movs	r2, #0
 80088b2:	4966      	ldr	r1, [pc, #408]	; (8008a4c <HAL_I2C_Mem_Read+0x448>)
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 fcc7 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e0bf      	b.n	8008a44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	691a      	ldr	r2, [r3, #16]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	b2d2      	uxtb	r2, r2
 80088e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e6:	1c5a      	adds	r2, r3, #1
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088f0:	3b01      	subs	r3, #1
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	3b01      	subs	r3, #1
 8008900:	b29a      	uxth	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890c:	2200      	movs	r2, #0
 800890e:	494f      	ldr	r1, [pc, #316]	; (8008a4c <HAL_I2C_Mem_Read+0x448>)
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 fc99 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e091      	b.n	8008a44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800892e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	691a      	ldr	r2, [r3, #16]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893a:	b2d2      	uxtb	r2, r2
 800893c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800894c:	3b01      	subs	r3, #1
 800894e:	b29a      	uxth	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008958:	b29b      	uxth	r3, r3
 800895a:	3b01      	subs	r3, #1
 800895c:	b29a      	uxth	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	691a      	ldr	r2, [r3, #16]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	b2d2      	uxtb	r2, r2
 800896e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800897e:	3b01      	subs	r3, #1
 8008980:	b29a      	uxth	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800898a:	b29b      	uxth	r3, r3
 800898c:	3b01      	subs	r3, #1
 800898e:	b29a      	uxth	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008994:	e042      	b.n	8008a1c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008998:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f000 fdac 	bl	80094f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e04c      	b.n	8008a44 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	691a      	ldr	r2, [r3, #16]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	b2d2      	uxtb	r2, r2
 80089b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	1c5a      	adds	r2, r3, #1
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c6:	3b01      	subs	r3, #1
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	3b01      	subs	r3, #1
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	f003 0304 	and.w	r3, r3, #4
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	d118      	bne.n	8008a1c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	691a      	ldr	r2, [r3, #16]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f4:	b2d2      	uxtb	r2, r2
 80089f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a06:	3b01      	subs	r3, #1
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	3b01      	subs	r3, #1
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f47f aec2 	bne.w	80087aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	e000      	b.n	8008a44 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008a42:	2302      	movs	r3, #2
  }
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3728      	adds	r7, #40	; 0x28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	00010004 	.word	0x00010004

08008a50 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08a      	sub	sp, #40	; 0x28
 8008a54:	af02      	add	r7, sp, #8
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	607a      	str	r2, [r7, #4]
 8008a5a:	603b      	str	r3, [r7, #0]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008a60:	f7fe f966 	bl	8006d30 <HAL_GetTick>
 8008a64:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8008a66:	2301      	movs	r3, #1
 8008a68:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b20      	cmp	r3, #32
 8008a74:	f040 8111 	bne.w	8008c9a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	2319      	movs	r3, #25
 8008a7e:	2201      	movs	r2, #1
 8008a80:	4988      	ldr	r1, [pc, #544]	; (8008ca4 <HAL_I2C_IsDeviceReady+0x254>)
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 fbe0 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	e104      	b.n	8008c9c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d101      	bne.n	8008aa0 <HAL_I2C_IsDeviceReady+0x50>
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	e0fd      	b.n	8008c9c <HAL_I2C_IsDeviceReady+0x24c>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0301 	and.w	r3, r3, #1
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d007      	beq.n	8008ac6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f042 0201 	orr.w	r2, r2, #1
 8008ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ad4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2224      	movs	r2, #36	; 0x24
 8008ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4a70      	ldr	r2, [pc, #448]	; (8008ca8 <HAL_I2C_IsDeviceReady+0x258>)
 8008ae8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008af8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 fb9e 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00d      	beq.n	8008b2e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b20:	d103      	bne.n	8008b2a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b28:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e0b6      	b.n	8008c9c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b2e:	897b      	ldrh	r3, [r7, #10]
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	461a      	mov	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b3c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008b3e:	f7fe f8f7 	bl	8006d30 <HAL_GetTick>
 8008b42:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	f003 0302 	and.w	r3, r3, #2
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	bf0c      	ite	eq
 8008b52:	2301      	moveq	r3, #1
 8008b54:	2300      	movne	r3, #0
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b68:	bf0c      	ite	eq
 8008b6a:	2301      	moveq	r3, #1
 8008b6c:	2300      	movne	r3, #0
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008b72:	e025      	b.n	8008bc0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008b74:	f7fe f8dc 	bl	8006d30 <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d302      	bcc.n	8008b8a <HAL_I2C_IsDeviceReady+0x13a>
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d103      	bne.n	8008b92 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	22a0      	movs	r2, #160	; 0xa0
 8008b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	f003 0302 	and.w	r3, r3, #2
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	bf0c      	ite	eq
 8008ba0:	2301      	moveq	r3, #1
 8008ba2:	2300      	movne	r3, #0
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bb6:	bf0c      	ite	eq
 8008bb8:	2301      	moveq	r3, #1
 8008bba:	2300      	movne	r3, #0
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2ba0      	cmp	r3, #160	; 0xa0
 8008bca:	d005      	beq.n	8008bd8 <HAL_I2C_IsDeviceReady+0x188>
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d102      	bne.n	8008bd8 <HAL_I2C_IsDeviceReady+0x188>
 8008bd2:	7dbb      	ldrb	r3, [r7, #22]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d0cd      	beq.n	8008b74 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d129      	bne.n	8008c42 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bfc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bfe:	2300      	movs	r3, #0
 8008c00:	613b      	str	r3, [r7, #16]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	613b      	str	r3, [r7, #16]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	613b      	str	r3, [r7, #16]
 8008c12:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	2319      	movs	r3, #25
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	4921      	ldr	r1, [pc, #132]	; (8008ca4 <HAL_I2C_IsDeviceReady+0x254>)
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 fb12 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e036      	b.n	8008c9c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2220      	movs	r2, #32
 8008c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	e02c      	b.n	8008c9c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c50:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c5a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	2319      	movs	r3, #25
 8008c62:	2201      	movs	r2, #1
 8008c64:	490f      	ldr	r1, [pc, #60]	; (8008ca4 <HAL_I2C_IsDeviceReady+0x254>)
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f000 faee 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e012      	b.n	8008c9c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	f4ff af32 	bcc.w	8008aea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e000      	b.n	8008c9c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008c9a:	2302      	movs	r3, #2
  }
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3720      	adds	r7, #32
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	00100002 	.word	0x00100002
 8008ca8:	ffff0000 	.word	0xffff0000

08008cac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af02      	add	r7, sp, #8
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	607a      	str	r2, [r7, #4]
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b08      	cmp	r3, #8
 8008cc6:	d006      	beq.n	8008cd6 <I2C_MasterRequestWrite+0x2a>
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d003      	beq.n	8008cd6 <I2C_MasterRequestWrite+0x2a>
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008cd4:	d108      	bne.n	8008ce8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ce4:	601a      	str	r2, [r3, #0]
 8008ce6:	e00b      	b.n	8008d00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cec:	2b12      	cmp	r3, #18
 8008cee:	d107      	bne.n	8008d00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 fa9b 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00d      	beq.n	8008d34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d26:	d103      	bne.n	8008d30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e035      	b.n	8008da0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d3c:	d108      	bne.n	8008d50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008d3e:	897b      	ldrh	r3, [r7, #10]
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	461a      	mov	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008d4c:	611a      	str	r2, [r3, #16]
 8008d4e:	e01b      	b.n	8008d88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008d50:	897b      	ldrh	r3, [r7, #10]
 8008d52:	11db      	asrs	r3, r3, #7
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	f003 0306 	and.w	r3, r3, #6
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	f063 030f 	orn	r3, r3, #15
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	490e      	ldr	r1, [pc, #56]	; (8008da8 <I2C_MasterRequestWrite+0xfc>)
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 fac1 	bl	80092f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e010      	b.n	8008da0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008d7e:	897b      	ldrh	r3, [r7, #10]
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	4907      	ldr	r1, [pc, #28]	; (8008dac <I2C_MasterRequestWrite+0x100>)
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 fab1 	bl	80092f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e000      	b.n	8008da0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3718      	adds	r7, #24
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	00010008 	.word	0x00010008
 8008dac:	00010002 	.word	0x00010002

08008db0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b088      	sub	sp, #32
 8008db4:	af02      	add	r7, sp, #8
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	607a      	str	r2, [r7, #4]
 8008dba:	603b      	str	r3, [r7, #0]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008dd4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d006      	beq.n	8008dea <I2C_MasterRequestRead+0x3a>
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d003      	beq.n	8008dea <I2C_MasterRequestRead+0x3a>
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008de8:	d108      	bne.n	8008dfc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	e00b      	b.n	8008e14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e00:	2b11      	cmp	r3, #17
 8008e02:	d107      	bne.n	8008e14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f000 fa11 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00d      	beq.n	8008e48 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e3a:	d103      	bne.n	8008e44 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e079      	b.n	8008f3c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e50:	d108      	bne.n	8008e64 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008e52:	897b      	ldrh	r3, [r7, #10]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	f043 0301 	orr.w	r3, r3, #1
 8008e5a:	b2da      	uxtb	r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	611a      	str	r2, [r3, #16]
 8008e62:	e05f      	b.n	8008f24 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008e64:	897b      	ldrh	r3, [r7, #10]
 8008e66:	11db      	asrs	r3, r3, #7
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	f003 0306 	and.w	r3, r3, #6
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	f063 030f 	orn	r3, r3, #15
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	4930      	ldr	r1, [pc, #192]	; (8008f44 <I2C_MasterRequestRead+0x194>)
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 fa37 	bl	80092f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e054      	b.n	8008f3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008e92:	897b      	ldrh	r3, [r7, #10]
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	4929      	ldr	r1, [pc, #164]	; (8008f48 <I2C_MasterRequestRead+0x198>)
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f000 fa27 	bl	80092f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e044      	b.n	8008f3c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	613b      	str	r3, [r7, #16]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	695b      	ldr	r3, [r3, #20]
 8008ebc:	613b      	str	r3, [r7, #16]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	613b      	str	r3, [r7, #16]
 8008ec6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ed6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 f9af 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00d      	beq.n	8008f0c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008efe:	d103      	bne.n	8008f08 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f06:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e017      	b.n	8008f3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008f0c:	897b      	ldrh	r3, [r7, #10]
 8008f0e:	11db      	asrs	r3, r3, #7
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	f003 0306 	and.w	r3, r3, #6
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	f063 030e 	orn	r3, r3, #14
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	4907      	ldr	r1, [pc, #28]	; (8008f48 <I2C_MasterRequestRead+0x198>)
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 f9e3 	bl	80092f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e000      	b.n	8008f3c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3718      	adds	r7, #24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	00010008 	.word	0x00010008
 8008f48:	00010002 	.word	0x00010002

08008f4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b088      	sub	sp, #32
 8008f50:	af02      	add	r7, sp, #8
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	4608      	mov	r0, r1
 8008f56:	4611      	mov	r1, r2
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	817b      	strh	r3, [r7, #10]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	813b      	strh	r3, [r7, #8]
 8008f62:	4613      	mov	r3, r2
 8008f64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 f960 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00d      	beq.n	8008faa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f9c:	d103      	bne.n	8008fa6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fa4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e05f      	b.n	800906a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008faa:	897b      	ldrh	r3, [r7, #10]
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	461a      	mov	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008fb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	6a3a      	ldr	r2, [r7, #32]
 8008fbe:	492d      	ldr	r1, [pc, #180]	; (8009074 <I2C_RequestMemoryWrite+0x128>)
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 f998 	bl	80092f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d001      	beq.n	8008fd0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e04c      	b.n	800906a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	617b      	str	r3, [r7, #20]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	617b      	str	r3, [r7, #20]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	617b      	str	r3, [r7, #20]
 8008fe4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe8:	6a39      	ldr	r1, [r7, #32]
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f000 fa02 	bl	80093f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00d      	beq.n	8009012 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffa:	2b04      	cmp	r3, #4
 8008ffc:	d107      	bne.n	800900e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800900c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e02b      	b.n	800906a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009012:	88fb      	ldrh	r3, [r7, #6]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d105      	bne.n	8009024 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009018:	893b      	ldrh	r3, [r7, #8]
 800901a:	b2da      	uxtb	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	611a      	str	r2, [r3, #16]
 8009022:	e021      	b.n	8009068 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009024:	893b      	ldrh	r3, [r7, #8]
 8009026:	0a1b      	lsrs	r3, r3, #8
 8009028:	b29b      	uxth	r3, r3
 800902a:	b2da      	uxtb	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009034:	6a39      	ldr	r1, [r7, #32]
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 f9dc 	bl	80093f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00d      	beq.n	800905e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009046:	2b04      	cmp	r3, #4
 8009048:	d107      	bne.n	800905a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009058:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e005      	b.n	800906a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800905e:	893b      	ldrh	r3, [r7, #8]
 8009060:	b2da      	uxtb	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3718      	adds	r7, #24
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	00010002 	.word	0x00010002

08009078 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b088      	sub	sp, #32
 800907c:	af02      	add	r7, sp, #8
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	4608      	mov	r0, r1
 8009082:	4611      	mov	r1, r2
 8009084:	461a      	mov	r2, r3
 8009086:	4603      	mov	r3, r0
 8009088:	817b      	strh	r3, [r7, #10]
 800908a:	460b      	mov	r3, r1
 800908c:	813b      	strh	r3, [r7, #8]
 800908e:	4613      	mov	r3, r2
 8009090:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 f8c2 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00d      	beq.n	80090e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d8:	d103      	bne.n	80090e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e0aa      	b.n	800923c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80090e6:	897b      	ldrh	r3, [r7, #10]
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	461a      	mov	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80090f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f8:	6a3a      	ldr	r2, [r7, #32]
 80090fa:	4952      	ldr	r1, [pc, #328]	; (8009244 <I2C_RequestMemoryRead+0x1cc>)
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f000 f8fa 	bl	80092f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e097      	b.n	800923c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800910c:	2300      	movs	r3, #0
 800910e:	617b      	str	r3, [r7, #20]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009124:	6a39      	ldr	r1, [r7, #32]
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 f964 	bl	80093f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00d      	beq.n	800914e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009136:	2b04      	cmp	r3, #4
 8009138:	d107      	bne.n	800914a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009148:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e076      	b.n	800923c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800914e:	88fb      	ldrh	r3, [r7, #6]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d105      	bne.n	8009160 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009154:	893b      	ldrh	r3, [r7, #8]
 8009156:	b2da      	uxtb	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	611a      	str	r2, [r3, #16]
 800915e:	e021      	b.n	80091a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009160:	893b      	ldrh	r3, [r7, #8]
 8009162:	0a1b      	lsrs	r3, r3, #8
 8009164:	b29b      	uxth	r3, r3
 8009166:	b2da      	uxtb	r2, r3
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800916e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009170:	6a39      	ldr	r1, [r7, #32]
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f000 f93e 	bl	80093f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00d      	beq.n	800919a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009182:	2b04      	cmp	r3, #4
 8009184:	d107      	bne.n	8009196 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009194:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e050      	b.n	800923c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800919a:	893b      	ldrh	r3, [r7, #8]
 800919c:	b2da      	uxtb	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091a6:	6a39      	ldr	r1, [r7, #32]
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f000 f923 	bl	80093f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00d      	beq.n	80091d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	d107      	bne.n	80091cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e035      	b.n	800923c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f82b 	bl	8009248 <I2C_WaitOnFlagUntilTimeout>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00d      	beq.n	8009214 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009206:	d103      	bne.n	8009210 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800920e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e013      	b.n	800923c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009214:	897b      	ldrh	r3, [r7, #10]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	f043 0301 	orr.w	r3, r3, #1
 800921c:	b2da      	uxtb	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009226:	6a3a      	ldr	r2, [r7, #32]
 8009228:	4906      	ldr	r1, [pc, #24]	; (8009244 <I2C_RequestMemoryRead+0x1cc>)
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f000 f863 	bl	80092f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e000      	b.n	800923c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	00010002 	.word	0x00010002

08009248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	603b      	str	r3, [r7, #0]
 8009254:	4613      	mov	r3, r2
 8009256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009258:	e025      	b.n	80092a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009260:	d021      	beq.n	80092a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009262:	f7fd fd65 	bl	8006d30 <HAL_GetTick>
 8009266:	4602      	mov	r2, r0
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	429a      	cmp	r2, r3
 8009270:	d302      	bcc.n	8009278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d116      	bne.n	80092a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2220      	movs	r2, #32
 8009282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009292:	f043 0220 	orr.w	r2, r3, #32
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e023      	b.n	80092ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	0c1b      	lsrs	r3, r3, #16
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d10d      	bne.n	80092cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	43da      	mvns	r2, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	4013      	ands	r3, r2
 80092bc:	b29b      	uxth	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	bf0c      	ite	eq
 80092c2:	2301      	moveq	r3, #1
 80092c4:	2300      	movne	r3, #0
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	461a      	mov	r2, r3
 80092ca:	e00c      	b.n	80092e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	43da      	mvns	r2, r3
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	4013      	ands	r3, r2
 80092d8:	b29b      	uxth	r3, r3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	bf0c      	ite	eq
 80092de:	2301      	moveq	r3, #1
 80092e0:	2300      	movne	r3, #0
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	461a      	mov	r2, r3
 80092e6:	79fb      	ldrb	r3, [r7, #7]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d0b6      	beq.n	800925a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	60b9      	str	r1, [r7, #8]
 8009300:	607a      	str	r2, [r7, #4]
 8009302:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009304:	e051      	b.n	80093aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	695b      	ldr	r3, [r3, #20]
 800930c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009314:	d123      	bne.n	800935e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009324:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800932e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2220      	movs	r2, #32
 800933a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934a:	f043 0204 	orr.w	r2, r3, #4
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e046      	b.n	80093ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009364:	d021      	beq.n	80093aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009366:	f7fd fce3 	bl	8006d30 <HAL_GetTick>
 800936a:	4602      	mov	r2, r0
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	429a      	cmp	r2, r3
 8009374:	d302      	bcc.n	800937c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d116      	bne.n	80093aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2220      	movs	r2, #32
 8009386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009396:	f043 0220 	orr.w	r2, r3, #32
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e020      	b.n	80093ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	0c1b      	lsrs	r3, r3, #16
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d10c      	bne.n	80093ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	43da      	mvns	r2, r3
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	4013      	ands	r3, r2
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	bf14      	ite	ne
 80093c6:	2301      	movne	r3, #1
 80093c8:	2300      	moveq	r3, #0
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	e00b      	b.n	80093e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	43da      	mvns	r2, r3
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	4013      	ands	r3, r2
 80093da:	b29b      	uxth	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	bf14      	ite	ne
 80093e0:	2301      	movne	r3, #1
 80093e2:	2300      	moveq	r3, #0
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d18d      	bne.n	8009306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009400:	e02d      	b.n	800945e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f000 f8ce 	bl	80095a4 <I2C_IsAcknowledgeFailed>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e02d      	b.n	800946e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009418:	d021      	beq.n	800945e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800941a:	f7fd fc89 	bl	8006d30 <HAL_GetTick>
 800941e:	4602      	mov	r2, r0
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	429a      	cmp	r2, r3
 8009428:	d302      	bcc.n	8009430 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d116      	bne.n	800945e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2200      	movs	r2, #0
 8009434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2220      	movs	r2, #32
 800943a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944a:	f043 0220 	orr.w	r2, r3, #32
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e007      	b.n	800946e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009468:	2b80      	cmp	r3, #128	; 0x80
 800946a:	d1ca      	bne.n	8009402 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b084      	sub	sp, #16
 800947a:	af00      	add	r7, sp, #0
 800947c:	60f8      	str	r0, [r7, #12]
 800947e:	60b9      	str	r1, [r7, #8]
 8009480:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009482:	e02d      	b.n	80094e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 f88d 	bl	80095a4 <I2C_IsAcknowledgeFailed>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e02d      	b.n	80094f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949a:	d021      	beq.n	80094e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800949c:	f7fd fc48 	bl	8006d30 <HAL_GetTick>
 80094a0:	4602      	mov	r2, r0
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d302      	bcc.n	80094b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d116      	bne.n	80094e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2220      	movs	r2, #32
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094cc:	f043 0220 	orr.w	r2, r3, #32
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e007      	b.n	80094f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	f003 0304 	and.w	r3, r3, #4
 80094ea:	2b04      	cmp	r3, #4
 80094ec:	d1ca      	bne.n	8009484 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009504:	e042      	b.n	800958c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	695b      	ldr	r3, [r3, #20]
 800950c:	f003 0310 	and.w	r3, r3, #16
 8009510:	2b10      	cmp	r3, #16
 8009512:	d119      	bne.n	8009548 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f06f 0210 	mvn.w	r2, #16
 800951c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2220      	movs	r2, #32
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e029      	b.n	800959c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009548:	f7fd fbf2 	bl	8006d30 <HAL_GetTick>
 800954c:	4602      	mov	r2, r0
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	429a      	cmp	r2, r3
 8009556:	d302      	bcc.n	800955e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d116      	bne.n	800958c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2220      	movs	r2, #32
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009578:	f043 0220 	orr.w	r2, r3, #32
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e007      	b.n	800959c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009596:	2b40      	cmp	r3, #64	; 0x40
 8009598:	d1b5      	bne.n	8009506 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095ba:	d11b      	bne.n	80095f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80095c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2220      	movs	r2, #32
 80095d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e0:	f043 0204 	orr.w	r2, r3, #4
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e000      	b.n	80095f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
	...

08009604 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e264      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	d075      	beq.n	800970e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009622:	4ba3      	ldr	r3, [pc, #652]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	f003 030c 	and.w	r3, r3, #12
 800962a:	2b04      	cmp	r3, #4
 800962c:	d00c      	beq.n	8009648 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800962e:	4ba0      	ldr	r3, [pc, #640]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009636:	2b08      	cmp	r3, #8
 8009638:	d112      	bne.n	8009660 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800963a:	4b9d      	ldr	r3, [pc, #628]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009646:	d10b      	bne.n	8009660 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009648:	4b99      	ldr	r3, [pc, #612]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d05b      	beq.n	800970c <HAL_RCC_OscConfig+0x108>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d157      	bne.n	800970c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e23f      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009668:	d106      	bne.n	8009678 <HAL_RCC_OscConfig+0x74>
 800966a:	4b91      	ldr	r3, [pc, #580]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a90      	ldr	r2, [pc, #576]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009674:	6013      	str	r3, [r2, #0]
 8009676:	e01d      	b.n	80096b4 <HAL_RCC_OscConfig+0xb0>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009680:	d10c      	bne.n	800969c <HAL_RCC_OscConfig+0x98>
 8009682:	4b8b      	ldr	r3, [pc, #556]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a8a      	ldr	r2, [pc, #552]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800968c:	6013      	str	r3, [r2, #0]
 800968e:	4b88      	ldr	r3, [pc, #544]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a87      	ldr	r2, [pc, #540]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009698:	6013      	str	r3, [r2, #0]
 800969a:	e00b      	b.n	80096b4 <HAL_RCC_OscConfig+0xb0>
 800969c:	4b84      	ldr	r3, [pc, #528]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a83      	ldr	r2, [pc, #524]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 80096a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	4b81      	ldr	r3, [pc, #516]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a80      	ldr	r2, [pc, #512]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 80096ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d013      	beq.n	80096e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096bc:	f7fd fb38 	bl	8006d30 <HAL_GetTick>
 80096c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096c2:	e008      	b.n	80096d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096c4:	f7fd fb34 	bl	8006d30 <HAL_GetTick>
 80096c8:	4602      	mov	r2, r0
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	2b64      	cmp	r3, #100	; 0x64
 80096d0:	d901      	bls.n	80096d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e204      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096d6:	4b76      	ldr	r3, [pc, #472]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d0f0      	beq.n	80096c4 <HAL_RCC_OscConfig+0xc0>
 80096e2:	e014      	b.n	800970e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096e4:	f7fd fb24 	bl	8006d30 <HAL_GetTick>
 80096e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096ea:	e008      	b.n	80096fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096ec:	f7fd fb20 	bl	8006d30 <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	2b64      	cmp	r3, #100	; 0x64
 80096f8:	d901      	bls.n	80096fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e1f0      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096fe:	4b6c      	ldr	r3, [pc, #432]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1f0      	bne.n	80096ec <HAL_RCC_OscConfig+0xe8>
 800970a:	e000      	b.n	800970e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800970c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 0302 	and.w	r3, r3, #2
 8009716:	2b00      	cmp	r3, #0
 8009718:	d063      	beq.n	80097e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800971a:	4b65      	ldr	r3, [pc, #404]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f003 030c 	and.w	r3, r3, #12
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00b      	beq.n	800973e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009726:	4b62      	ldr	r3, [pc, #392]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800972e:	2b08      	cmp	r3, #8
 8009730:	d11c      	bne.n	800976c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009732:	4b5f      	ldr	r3, [pc, #380]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d116      	bne.n	800976c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800973e:	4b5c      	ldr	r3, [pc, #368]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 0302 	and.w	r3, r3, #2
 8009746:	2b00      	cmp	r3, #0
 8009748:	d005      	beq.n	8009756 <HAL_RCC_OscConfig+0x152>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d001      	beq.n	8009756 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e1c4      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009756:	4b56      	ldr	r3, [pc, #344]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	00db      	lsls	r3, r3, #3
 8009764:	4952      	ldr	r1, [pc, #328]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009766:	4313      	orrs	r3, r2
 8009768:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800976a:	e03a      	b.n	80097e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d020      	beq.n	80097b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009774:	4b4f      	ldr	r3, [pc, #316]	; (80098b4 <HAL_RCC_OscConfig+0x2b0>)
 8009776:	2201      	movs	r2, #1
 8009778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800977a:	f7fd fad9 	bl	8006d30 <HAL_GetTick>
 800977e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009780:	e008      	b.n	8009794 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009782:	f7fd fad5 	bl	8006d30 <HAL_GetTick>
 8009786:	4602      	mov	r2, r0
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	2b02      	cmp	r3, #2
 800978e:	d901      	bls.n	8009794 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009790:	2303      	movs	r3, #3
 8009792:	e1a5      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009794:	4b46      	ldr	r3, [pc, #280]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d0f0      	beq.n	8009782 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097a0:	4b43      	ldr	r3, [pc, #268]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	00db      	lsls	r3, r3, #3
 80097ae:	4940      	ldr	r1, [pc, #256]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	600b      	str	r3, [r1, #0]
 80097b4:	e015      	b.n	80097e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097b6:	4b3f      	ldr	r3, [pc, #252]	; (80098b4 <HAL_RCC_OscConfig+0x2b0>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097bc:	f7fd fab8 	bl	8006d30 <HAL_GetTick>
 80097c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097c2:	e008      	b.n	80097d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097c4:	f7fd fab4 	bl	8006d30 <HAL_GetTick>
 80097c8:	4602      	mov	r2, r0
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d901      	bls.n	80097d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e184      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097d6:	4b36      	ldr	r3, [pc, #216]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0302 	and.w	r3, r3, #2
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1f0      	bne.n	80097c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0308 	and.w	r3, r3, #8
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d030      	beq.n	8009850 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d016      	beq.n	8009824 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097f6:	4b30      	ldr	r3, [pc, #192]	; (80098b8 <HAL_RCC_OscConfig+0x2b4>)
 80097f8:	2201      	movs	r2, #1
 80097fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097fc:	f7fd fa98 	bl	8006d30 <HAL_GetTick>
 8009800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009802:	e008      	b.n	8009816 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009804:	f7fd fa94 	bl	8006d30 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	2b02      	cmp	r3, #2
 8009810:	d901      	bls.n	8009816 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e164      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009816:	4b26      	ldr	r3, [pc, #152]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800981a:	f003 0302 	and.w	r3, r3, #2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d0f0      	beq.n	8009804 <HAL_RCC_OscConfig+0x200>
 8009822:	e015      	b.n	8009850 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009824:	4b24      	ldr	r3, [pc, #144]	; (80098b8 <HAL_RCC_OscConfig+0x2b4>)
 8009826:	2200      	movs	r2, #0
 8009828:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800982a:	f7fd fa81 	bl	8006d30 <HAL_GetTick>
 800982e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009830:	e008      	b.n	8009844 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009832:	f7fd fa7d 	bl	8006d30 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	2b02      	cmp	r3, #2
 800983e:	d901      	bls.n	8009844 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e14d      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009844:	4b1a      	ldr	r3, [pc, #104]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1f0      	bne.n	8009832 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 80a0 	beq.w	800999e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800985e:	2300      	movs	r3, #0
 8009860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009862:	4b13      	ldr	r3, [pc, #76]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10f      	bne.n	800988e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800986e:	2300      	movs	r3, #0
 8009870:	60bb      	str	r3, [r7, #8]
 8009872:	4b0f      	ldr	r3, [pc, #60]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009876:	4a0e      	ldr	r2, [pc, #56]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800987c:	6413      	str	r3, [r2, #64]	; 0x40
 800987e:	4b0c      	ldr	r3, [pc, #48]	; (80098b0 <HAL_RCC_OscConfig+0x2ac>)
 8009880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009886:	60bb      	str	r3, [r7, #8]
 8009888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800988a:	2301      	movs	r3, #1
 800988c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800988e:	4b0b      	ldr	r3, [pc, #44]	; (80098bc <HAL_RCC_OscConfig+0x2b8>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009896:	2b00      	cmp	r3, #0
 8009898:	d121      	bne.n	80098de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800989a:	4b08      	ldr	r3, [pc, #32]	; (80098bc <HAL_RCC_OscConfig+0x2b8>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a07      	ldr	r2, [pc, #28]	; (80098bc <HAL_RCC_OscConfig+0x2b8>)
 80098a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098a6:	f7fd fa43 	bl	8006d30 <HAL_GetTick>
 80098aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098ac:	e011      	b.n	80098d2 <HAL_RCC_OscConfig+0x2ce>
 80098ae:	bf00      	nop
 80098b0:	40023800 	.word	0x40023800
 80098b4:	42470000 	.word	0x42470000
 80098b8:	42470e80 	.word	0x42470e80
 80098bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098c0:	f7fd fa36 	bl	8006d30 <HAL_GetTick>
 80098c4:	4602      	mov	r2, r0
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d901      	bls.n	80098d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e106      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098d2:	4b85      	ldr	r3, [pc, #532]	; (8009ae8 <HAL_RCC_OscConfig+0x4e4>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d0f0      	beq.n	80098c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d106      	bne.n	80098f4 <HAL_RCC_OscConfig+0x2f0>
 80098e6:	4b81      	ldr	r3, [pc, #516]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 80098e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ea:	4a80      	ldr	r2, [pc, #512]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 80098ec:	f043 0301 	orr.w	r3, r3, #1
 80098f0:	6713      	str	r3, [r2, #112]	; 0x70
 80098f2:	e01c      	b.n	800992e <HAL_RCC_OscConfig+0x32a>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	2b05      	cmp	r3, #5
 80098fa:	d10c      	bne.n	8009916 <HAL_RCC_OscConfig+0x312>
 80098fc:	4b7b      	ldr	r3, [pc, #492]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 80098fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009900:	4a7a      	ldr	r2, [pc, #488]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 8009902:	f043 0304 	orr.w	r3, r3, #4
 8009906:	6713      	str	r3, [r2, #112]	; 0x70
 8009908:	4b78      	ldr	r3, [pc, #480]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 800990a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800990c:	4a77      	ldr	r2, [pc, #476]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 800990e:	f043 0301 	orr.w	r3, r3, #1
 8009912:	6713      	str	r3, [r2, #112]	; 0x70
 8009914:	e00b      	b.n	800992e <HAL_RCC_OscConfig+0x32a>
 8009916:	4b75      	ldr	r3, [pc, #468]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 8009918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991a:	4a74      	ldr	r2, [pc, #464]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 800991c:	f023 0301 	bic.w	r3, r3, #1
 8009920:	6713      	str	r3, [r2, #112]	; 0x70
 8009922:	4b72      	ldr	r3, [pc, #456]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 8009924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009926:	4a71      	ldr	r2, [pc, #452]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 8009928:	f023 0304 	bic.w	r3, r3, #4
 800992c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d015      	beq.n	8009962 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009936:	f7fd f9fb 	bl	8006d30 <HAL_GetTick>
 800993a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800993c:	e00a      	b.n	8009954 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800993e:	f7fd f9f7 	bl	8006d30 <HAL_GetTick>
 8009942:	4602      	mov	r2, r0
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	f241 3288 	movw	r2, #5000	; 0x1388
 800994c:	4293      	cmp	r3, r2
 800994e:	d901      	bls.n	8009954 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009950:	2303      	movs	r3, #3
 8009952:	e0c5      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009954:	4b65      	ldr	r3, [pc, #404]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 8009956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009958:	f003 0302 	and.w	r3, r3, #2
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0ee      	beq.n	800993e <HAL_RCC_OscConfig+0x33a>
 8009960:	e014      	b.n	800998c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009962:	f7fd f9e5 	bl	8006d30 <HAL_GetTick>
 8009966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009968:	e00a      	b.n	8009980 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800996a:	f7fd f9e1 	bl	8006d30 <HAL_GetTick>
 800996e:	4602      	mov	r2, r0
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	f241 3288 	movw	r2, #5000	; 0x1388
 8009978:	4293      	cmp	r3, r2
 800997a:	d901      	bls.n	8009980 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800997c:	2303      	movs	r3, #3
 800997e:	e0af      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009980:	4b5a      	ldr	r3, [pc, #360]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 8009982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009984:	f003 0302 	and.w	r3, r3, #2
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1ee      	bne.n	800996a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800998c:	7dfb      	ldrb	r3, [r7, #23]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d105      	bne.n	800999e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009992:	4b56      	ldr	r3, [pc, #344]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 8009994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009996:	4a55      	ldr	r2, [pc, #340]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 8009998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800999c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f000 809b 	beq.w	8009ade <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80099a8:	4b50      	ldr	r3, [pc, #320]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f003 030c 	and.w	r3, r3, #12
 80099b0:	2b08      	cmp	r3, #8
 80099b2:	d05c      	beq.n	8009a6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	699b      	ldr	r3, [r3, #24]
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d141      	bne.n	8009a40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099bc:	4b4c      	ldr	r3, [pc, #304]	; (8009af0 <HAL_RCC_OscConfig+0x4ec>)
 80099be:	2200      	movs	r2, #0
 80099c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099c2:	f7fd f9b5 	bl	8006d30 <HAL_GetTick>
 80099c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099c8:	e008      	b.n	80099dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099ca:	f7fd f9b1 	bl	8006d30 <HAL_GetTick>
 80099ce:	4602      	mov	r2, r0
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d901      	bls.n	80099dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80099d8:	2303      	movs	r3, #3
 80099da:	e081      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099dc:	4b43      	ldr	r3, [pc, #268]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1f0      	bne.n	80099ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	69da      	ldr	r2, [r3, #28]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a1b      	ldr	r3, [r3, #32]
 80099f0:	431a      	orrs	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f6:	019b      	lsls	r3, r3, #6
 80099f8:	431a      	orrs	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fe:	085b      	lsrs	r3, r3, #1
 8009a00:	3b01      	subs	r3, #1
 8009a02:	041b      	lsls	r3, r3, #16
 8009a04:	431a      	orrs	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0a:	061b      	lsls	r3, r3, #24
 8009a0c:	4937      	ldr	r1, [pc, #220]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a12:	4b37      	ldr	r3, [pc, #220]	; (8009af0 <HAL_RCC_OscConfig+0x4ec>)
 8009a14:	2201      	movs	r2, #1
 8009a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a18:	f7fd f98a 	bl	8006d30 <HAL_GetTick>
 8009a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a1e:	e008      	b.n	8009a32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a20:	f7fd f986 	bl	8006d30 <HAL_GetTick>
 8009a24:	4602      	mov	r2, r0
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d901      	bls.n	8009a32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e056      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a32:	4b2e      	ldr	r3, [pc, #184]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d0f0      	beq.n	8009a20 <HAL_RCC_OscConfig+0x41c>
 8009a3e:	e04e      	b.n	8009ade <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a40:	4b2b      	ldr	r3, [pc, #172]	; (8009af0 <HAL_RCC_OscConfig+0x4ec>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a46:	f7fd f973 	bl	8006d30 <HAL_GetTick>
 8009a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a4c:	e008      	b.n	8009a60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a4e:	f7fd f96f 	bl	8006d30 <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d901      	bls.n	8009a60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e03f      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a60:	4b22      	ldr	r3, [pc, #136]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1f0      	bne.n	8009a4e <HAL_RCC_OscConfig+0x44a>
 8009a6c:	e037      	b.n	8009ade <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d101      	bne.n	8009a7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e032      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009a7a:	4b1c      	ldr	r3, [pc, #112]	; (8009aec <HAL_RCC_OscConfig+0x4e8>)
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d028      	beq.n	8009ada <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d121      	bne.n	8009ada <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d11a      	bne.n	8009ada <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009aaa:	4013      	ands	r3, r2
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ab0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d111      	bne.n	8009ada <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac0:	085b      	lsrs	r3, r3, #1
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d107      	bne.n	8009ada <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d001      	beq.n	8009ade <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e000      	b.n	8009ae0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3718      	adds	r7, #24
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	40007000 	.word	0x40007000
 8009aec:	40023800 	.word	0x40023800
 8009af0:	42470060 	.word	0x42470060

08009af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d101      	bne.n	8009b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e0cc      	b.n	8009ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b08:	4b68      	ldr	r3, [pc, #416]	; (8009cac <HAL_RCC_ClockConfig+0x1b8>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0307 	and.w	r3, r3, #7
 8009b10:	683a      	ldr	r2, [r7, #0]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d90c      	bls.n	8009b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b16:	4b65      	ldr	r3, [pc, #404]	; (8009cac <HAL_RCC_ClockConfig+0x1b8>)
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	b2d2      	uxtb	r2, r2
 8009b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b1e:	4b63      	ldr	r3, [pc, #396]	; (8009cac <HAL_RCC_ClockConfig+0x1b8>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0307 	and.w	r3, r3, #7
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d001      	beq.n	8009b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e0b8      	b.n	8009ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 0302 	and.w	r3, r3, #2
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d020      	beq.n	8009b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 0304 	and.w	r3, r3, #4
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d005      	beq.n	8009b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b48:	4b59      	ldr	r3, [pc, #356]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	4a58      	ldr	r2, [pc, #352]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0308 	and.w	r3, r3, #8
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d005      	beq.n	8009b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b60:	4b53      	ldr	r3, [pc, #332]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	4a52      	ldr	r2, [pc, #328]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b6c:	4b50      	ldr	r3, [pc, #320]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	494d      	ldr	r1, [pc, #308]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 0301 	and.w	r3, r3, #1
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d044      	beq.n	8009c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d107      	bne.n	8009ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b92:	4b47      	ldr	r3, [pc, #284]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d119      	bne.n	8009bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e07f      	b.n	8009ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d003      	beq.n	8009bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d107      	bne.n	8009bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bb2:	4b3f      	ldr	r3, [pc, #252]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d109      	bne.n	8009bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e06f      	b.n	8009ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bc2:	4b3b      	ldr	r3, [pc, #236]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 0302 	and.w	r3, r3, #2
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d101      	bne.n	8009bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e067      	b.n	8009ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009bd2:	4b37      	ldr	r3, [pc, #220]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	f023 0203 	bic.w	r2, r3, #3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	4934      	ldr	r1, [pc, #208]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009be0:	4313      	orrs	r3, r2
 8009be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009be4:	f7fd f8a4 	bl	8006d30 <HAL_GetTick>
 8009be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bea:	e00a      	b.n	8009c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009bec:	f7fd f8a0 	bl	8006d30 <HAL_GetTick>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d901      	bls.n	8009c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e04f      	b.n	8009ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c02:	4b2b      	ldr	r3, [pc, #172]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	f003 020c 	and.w	r2, r3, #12
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d1eb      	bne.n	8009bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c14:	4b25      	ldr	r3, [pc, #148]	; (8009cac <HAL_RCC_ClockConfig+0x1b8>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0307 	and.w	r3, r3, #7
 8009c1c:	683a      	ldr	r2, [r7, #0]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d20c      	bcs.n	8009c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c22:	4b22      	ldr	r3, [pc, #136]	; (8009cac <HAL_RCC_ClockConfig+0x1b8>)
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	b2d2      	uxtb	r2, r2
 8009c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c2a:	4b20      	ldr	r3, [pc, #128]	; (8009cac <HAL_RCC_ClockConfig+0x1b8>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0307 	and.w	r3, r3, #7
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d001      	beq.n	8009c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e032      	b.n	8009ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0304 	and.w	r3, r3, #4
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d008      	beq.n	8009c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c48:	4b19      	ldr	r3, [pc, #100]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	4916      	ldr	r1, [pc, #88]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0308 	and.w	r3, r3, #8
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d009      	beq.n	8009c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c66:	4b12      	ldr	r3, [pc, #72]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	00db      	lsls	r3, r3, #3
 8009c74:	490e      	ldr	r1, [pc, #56]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009c7a:	f000 f821 	bl	8009cc0 <HAL_RCC_GetSysClockFreq>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	091b      	lsrs	r3, r3, #4
 8009c86:	f003 030f 	and.w	r3, r3, #15
 8009c8a:	490a      	ldr	r1, [pc, #40]	; (8009cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8009c8c:	5ccb      	ldrb	r3, [r1, r3]
 8009c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c92:	4a09      	ldr	r2, [pc, #36]	; (8009cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8009c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009c96:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <HAL_RCC_ClockConfig+0x1c8>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fb fa7c 	bl	8005198 <HAL_InitTick>

  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	40023c00 	.word	0x40023c00
 8009cb0:	40023800 	.word	0x40023800
 8009cb4:	08015918 	.word	0x08015918
 8009cb8:	20000018 	.word	0x20000018
 8009cbc:	20000070 	.word	0x20000070

08009cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009cc0:	b5b0      	push	{r4, r5, r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	6079      	str	r1, [r7, #4]
 8009cca:	2100      	movs	r1, #0
 8009ccc:	60f9      	str	r1, [r7, #12]
 8009cce:	2100      	movs	r1, #0
 8009cd0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009cd6:	4952      	ldr	r1, [pc, #328]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8009cd8:	6889      	ldr	r1, [r1, #8]
 8009cda:	f001 010c 	and.w	r1, r1, #12
 8009cde:	2908      	cmp	r1, #8
 8009ce0:	d00d      	beq.n	8009cfe <HAL_RCC_GetSysClockFreq+0x3e>
 8009ce2:	2908      	cmp	r1, #8
 8009ce4:	f200 8094 	bhi.w	8009e10 <HAL_RCC_GetSysClockFreq+0x150>
 8009ce8:	2900      	cmp	r1, #0
 8009cea:	d002      	beq.n	8009cf2 <HAL_RCC_GetSysClockFreq+0x32>
 8009cec:	2904      	cmp	r1, #4
 8009cee:	d003      	beq.n	8009cf8 <HAL_RCC_GetSysClockFreq+0x38>
 8009cf0:	e08e      	b.n	8009e10 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009cf2:	4b4c      	ldr	r3, [pc, #304]	; (8009e24 <HAL_RCC_GetSysClockFreq+0x164>)
 8009cf4:	60bb      	str	r3, [r7, #8]
       break;
 8009cf6:	e08e      	b.n	8009e16 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009cf8:	4b4b      	ldr	r3, [pc, #300]	; (8009e28 <HAL_RCC_GetSysClockFreq+0x168>)
 8009cfa:	60bb      	str	r3, [r7, #8]
      break;
 8009cfc:	e08b      	b.n	8009e16 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009cfe:	4948      	ldr	r1, [pc, #288]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8009d00:	6849      	ldr	r1, [r1, #4]
 8009d02:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009d06:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d08:	4945      	ldr	r1, [pc, #276]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8009d0a:	6849      	ldr	r1, [r1, #4]
 8009d0c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009d10:	2900      	cmp	r1, #0
 8009d12:	d024      	beq.n	8009d5e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d14:	4942      	ldr	r1, [pc, #264]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8009d16:	6849      	ldr	r1, [r1, #4]
 8009d18:	0989      	lsrs	r1, r1, #6
 8009d1a:	4608      	mov	r0, r1
 8009d1c:	f04f 0100 	mov.w	r1, #0
 8009d20:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009d24:	f04f 0500 	mov.w	r5, #0
 8009d28:	ea00 0204 	and.w	r2, r0, r4
 8009d2c:	ea01 0305 	and.w	r3, r1, r5
 8009d30:	493d      	ldr	r1, [pc, #244]	; (8009e28 <HAL_RCC_GetSysClockFreq+0x168>)
 8009d32:	fb01 f003 	mul.w	r0, r1, r3
 8009d36:	2100      	movs	r1, #0
 8009d38:	fb01 f102 	mul.w	r1, r1, r2
 8009d3c:	1844      	adds	r4, r0, r1
 8009d3e:	493a      	ldr	r1, [pc, #232]	; (8009e28 <HAL_RCC_GetSysClockFreq+0x168>)
 8009d40:	fba2 0101 	umull	r0, r1, r2, r1
 8009d44:	1863      	adds	r3, r4, r1
 8009d46:	4619      	mov	r1, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	f04f 0300 	mov.w	r3, #0
 8009d50:	f7f6 ff22 	bl	8000b98 <__aeabi_uldivmod>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	4613      	mov	r3, r2
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	e04a      	b.n	8009df4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d5e:	4b30      	ldr	r3, [pc, #192]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	099b      	lsrs	r3, r3, #6
 8009d64:	461a      	mov	r2, r3
 8009d66:	f04f 0300 	mov.w	r3, #0
 8009d6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009d6e:	f04f 0100 	mov.w	r1, #0
 8009d72:	ea02 0400 	and.w	r4, r2, r0
 8009d76:	ea03 0501 	and.w	r5, r3, r1
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	f04f 0200 	mov.w	r2, #0
 8009d82:	f04f 0300 	mov.w	r3, #0
 8009d86:	014b      	lsls	r3, r1, #5
 8009d88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009d8c:	0142      	lsls	r2, r0, #5
 8009d8e:	4610      	mov	r0, r2
 8009d90:	4619      	mov	r1, r3
 8009d92:	1b00      	subs	r0, r0, r4
 8009d94:	eb61 0105 	sbc.w	r1, r1, r5
 8009d98:	f04f 0200 	mov.w	r2, #0
 8009d9c:	f04f 0300 	mov.w	r3, #0
 8009da0:	018b      	lsls	r3, r1, #6
 8009da2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009da6:	0182      	lsls	r2, r0, #6
 8009da8:	1a12      	subs	r2, r2, r0
 8009daa:	eb63 0301 	sbc.w	r3, r3, r1
 8009dae:	f04f 0000 	mov.w	r0, #0
 8009db2:	f04f 0100 	mov.w	r1, #0
 8009db6:	00d9      	lsls	r1, r3, #3
 8009db8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009dbc:	00d0      	lsls	r0, r2, #3
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	1912      	adds	r2, r2, r4
 8009dc4:	eb45 0303 	adc.w	r3, r5, r3
 8009dc8:	f04f 0000 	mov.w	r0, #0
 8009dcc:	f04f 0100 	mov.w	r1, #0
 8009dd0:	0299      	lsls	r1, r3, #10
 8009dd2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009dd6:	0290      	lsls	r0, r2, #10
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4610      	mov	r0, r2
 8009dde:	4619      	mov	r1, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	461a      	mov	r2, r3
 8009de4:	f04f 0300 	mov.w	r3, #0
 8009de8:	f7f6 fed6 	bl	8000b98 <__aeabi_uldivmod>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	4613      	mov	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009df4:	4b0a      	ldr	r3, [pc, #40]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	0c1b      	lsrs	r3, r3, #16
 8009dfa:	f003 0303 	and.w	r3, r3, #3
 8009dfe:	3301      	adds	r3, #1
 8009e00:	005b      	lsls	r3, r3, #1
 8009e02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e0c:	60bb      	str	r3, [r7, #8]
      break;
 8009e0e:	e002      	b.n	8009e16 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009e10:	4b04      	ldr	r3, [pc, #16]	; (8009e24 <HAL_RCC_GetSysClockFreq+0x164>)
 8009e12:	60bb      	str	r3, [r7, #8]
      break;
 8009e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e16:	68bb      	ldr	r3, [r7, #8]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8009e20:	40023800 	.word	0x40023800
 8009e24:	00f42400 	.word	0x00f42400
 8009e28:	017d7840 	.word	0x017d7840

08009e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e30:	4b03      	ldr	r3, [pc, #12]	; (8009e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8009e32:	681b      	ldr	r3, [r3, #0]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	20000018 	.word	0x20000018

08009e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009e48:	f7ff fff0 	bl	8009e2c <HAL_RCC_GetHCLKFreq>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	0a9b      	lsrs	r3, r3, #10
 8009e54:	f003 0307 	and.w	r3, r3, #7
 8009e58:	4903      	ldr	r1, [pc, #12]	; (8009e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e5a:	5ccb      	ldrb	r3, [r1, r3]
 8009e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	40023800 	.word	0x40023800
 8009e68:	08015928 	.word	0x08015928

08009e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009e70:	f7ff ffdc 	bl	8009e2c <HAL_RCC_GetHCLKFreq>
 8009e74:	4602      	mov	r2, r0
 8009e76:	4b05      	ldr	r3, [pc, #20]	; (8009e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	0b5b      	lsrs	r3, r3, #13
 8009e7c:	f003 0307 	and.w	r3, r3, #7
 8009e80:	4903      	ldr	r1, [pc, #12]	; (8009e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e82:	5ccb      	ldrb	r3, [r1, r3]
 8009e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	40023800 	.word	0x40023800
 8009e90:	08015928 	.word	0x08015928

08009e94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	220f      	movs	r2, #15
 8009ea2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009ea4:	4b12      	ldr	r3, [pc, #72]	; (8009ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f003 0203 	and.w	r2, r3, #3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009eb0:	4b0f      	ldr	r3, [pc, #60]	; (8009ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009ebc:	4b0c      	ldr	r3, [pc, #48]	; (8009ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009ec8:	4b09      	ldr	r3, [pc, #36]	; (8009ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	08db      	lsrs	r3, r3, #3
 8009ece:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009ed6:	4b07      	ldr	r3, [pc, #28]	; (8009ef4 <HAL_RCC_GetClockConfig+0x60>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 0207 	and.w	r2, r3, #7
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	601a      	str	r2, [r3, #0]
}
 8009ee2:	bf00      	nop
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	40023800 	.word	0x40023800
 8009ef4:	40023c00 	.word	0x40023c00

08009ef8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e022      	b.n	8009f50 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d105      	bne.n	8009f22 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7fb f81f 	bl	8004f60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2203      	movs	r2, #3
 8009f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f814 	bl	8009f58 <HAL_SD_InitCard>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e00a      	b.n	8009f50 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009f58:	b5b0      	push	{r4, r5, r7, lr}
 8009f5a:	b08e      	sub	sp, #56	; 0x38
 8009f5c:	af04      	add	r7, sp, #16
 8009f5e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009f60:	2300      	movs	r3, #0
 8009f62:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009f64:	2300      	movs	r3, #0
 8009f66:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009f70:	2300      	movs	r3, #0
 8009f72:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009f74:	2376      	movs	r3, #118	; 0x76
 8009f76:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681d      	ldr	r5, [r3, #0]
 8009f7c:	466c      	mov	r4, sp
 8009f7e:	f107 0314 	add.w	r3, r7, #20
 8009f82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f8a:	f107 0308 	add.w	r3, r7, #8
 8009f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f90:	4628      	mov	r0, r5
 8009f92:	f003 fbaf 	bl	800d6f4 <SDIO_Init>
 8009f96:	4603      	mov	r3, r0
 8009f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e04c      	b.n	800a042 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009fa8:	4b28      	ldr	r3, [pc, #160]	; (800a04c <HAL_SD_InitCard+0xf4>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f003 fbe7 	bl	800d786 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009fb8:	4b24      	ldr	r3, [pc, #144]	; (800a04c <HAL_SD_InitCard+0xf4>)
 8009fba:	2201      	movs	r2, #1
 8009fbc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 ff6a 	bl	800ae98 <SD_PowerON>
 8009fc4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fc6:	6a3b      	ldr	r3, [r7, #32]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00b      	beq.n	8009fe4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fd8:	6a3b      	ldr	r3, [r7, #32]
 8009fda:	431a      	orrs	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e02e      	b.n	800a042 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 fe8b 	bl	800ad00 <SD_InitCard>
 8009fea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fec:	6a3b      	ldr	r3, [r7, #32]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00b      	beq.n	800a00a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	431a      	orrs	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e01b      	b.n	800a042 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a012:	4618      	mov	r0, r3
 800a014:	f003 fc4a 	bl	800d8ac <SDMMC_CmdBlockLength>
 800a018:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00f      	beq.n	800a040 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a0a      	ldr	r2, [pc, #40]	; (800a050 <HAL_SD_InitCard+0xf8>)
 800a026:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	431a      	orrs	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e000      	b.n	800a042 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3728      	adds	r7, #40	; 0x28
 800a046:	46bd      	mov	sp, r7
 800a048:	bdb0      	pop	{r4, r5, r7, pc}
 800a04a:	bf00      	nop
 800a04c:	422580a0 	.word	0x422580a0
 800a050:	004005ff 	.word	0x004005ff

0800a054 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08c      	sub	sp, #48	; 0x30
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d107      	bne.n	800a07c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a070:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	e0c0      	b.n	800a1fe <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b01      	cmp	r3, #1
 800a086:	f040 80b9 	bne.w	800a1fc <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	441a      	add	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d907      	bls.n	800a0ae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e0a7      	b.n	800a1fe <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2203      	movs	r2, #3
 800a0b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	6812      	ldr	r2, [r2, #0]
 800a0c8:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800a0cc:	f043 0302 	orr.w	r3, r3, #2
 800a0d0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d6:	4a4c      	ldr	r2, [pc, #304]	; (800a208 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800a0d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0de:	4a4b      	ldr	r2, [pc, #300]	; (800a20c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a0e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a102:	689a      	ldr	r2, [r3, #8]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	430a      	orrs	r2, r1
 800a10c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3380      	adds	r3, #128	; 0x80
 800a118:	4619      	mov	r1, r3
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	025b      	lsls	r3, r3, #9
 800a120:	089b      	lsrs	r3, r3, #2
 800a122:	f7fc ffc5 	bl	80070b0 <HAL_DMA_Start_IT>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d017      	beq.n	800a15c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a13a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a33      	ldr	r2, [pc, #204]	; (800a210 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a142:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a148:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e050      	b.n	800a1fe <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a15c:	4b2d      	ldr	r3, [pc, #180]	; (800a214 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a15e:	2201      	movs	r2, #1
 800a160:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a166:	2b01      	cmp	r3, #1
 800a168:	d002      	beq.n	800a170 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800a16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16c:	025b      	lsls	r3, r3, #9
 800a16e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a170:	f04f 33ff 	mov.w	r3, #4294967295
 800a174:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	025b      	lsls	r3, r3, #9
 800a17a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a17c:	2390      	movs	r3, #144	; 0x90
 800a17e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a180:	2302      	movs	r3, #2
 800a182:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a184:	2300      	movs	r3, #0
 800a186:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a188:	2301      	movs	r3, #1
 800a18a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f107 0210 	add.w	r2, r7, #16
 800a194:	4611      	mov	r1, r2
 800a196:	4618      	mov	r0, r3
 800a198:	f003 fb5c 	bl	800d854 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d90a      	bls.n	800a1b8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2282      	movs	r2, #130	; 0x82
 800a1a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f003 fbc0 	bl	800d934 <SDMMC_CmdReadMultiBlock>
 800a1b4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a1b6:	e009      	b.n	800a1cc <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2281      	movs	r2, #129	; 0x81
 800a1bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f003 fb93 	bl	800d8f0 <SDMMC_CmdReadSingleBlock>
 800a1ca:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d012      	beq.n	800a1f8 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a0e      	ldr	r2, [pc, #56]	; (800a210 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a1d8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e002      	b.n	800a1fe <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	e000      	b.n	800a1fe <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800a1fc:	2302      	movs	r3, #2
  }
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3730      	adds	r7, #48	; 0x30
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	0800ab0f 	.word	0x0800ab0f
 800a20c:	0800ab81 	.word	0x0800ab81
 800a210:	004005ff 	.word	0x004005ff
 800a214:	4225858c 	.word	0x4225858c

0800a218 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08c      	sub	sp, #48	; 0x30
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
 800a224:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d107      	bne.n	800a240 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a234:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	e0c5      	b.n	800a3cc <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a246:	b2db      	uxtb	r3, r3
 800a248:	2b01      	cmp	r3, #1
 800a24a:	f040 80be 	bne.w	800a3ca <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	441a      	add	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a25e:	429a      	cmp	r2, r3
 800a260:	d907      	bls.n	800a272 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a266:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e0ac      	b.n	800a3cc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2203      	movs	r2, #3
 800a276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2200      	movs	r2, #0
 800a280:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	6812      	ldr	r2, [r2, #0]
 800a28c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800a290:	f043 0302 	orr.w	r3, r3, #2
 800a294:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a29a:	4a4e      	ldr	r2, [pc, #312]	; (800a3d4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800a29c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a2:	4a4d      	ldr	r2, [pc, #308]	; (800a3d8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a2a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d002      	beq.n	800a2bc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800a2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b8:	025b      	lsls	r3, r3, #9
 800a2ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d90a      	bls.n	800a2d8 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	22a0      	movs	r2, #160	; 0xa0
 800a2c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f003 fb74 	bl	800d9bc <SDMMC_CmdWriteMultiBlock>
 800a2d4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a2d6:	e009      	b.n	800a2ec <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2290      	movs	r2, #144	; 0x90
 800a2dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f003 fb47 	bl	800d978 <SDMMC_CmdWriteSingleBlock>
 800a2ea:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d012      	beq.n	800a318 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a39      	ldr	r2, [pc, #228]	; (800a3dc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a2f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a300:	431a      	orrs	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e059      	b.n	800a3cc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a318:	4b31      	ldr	r3, [pc, #196]	; (800a3e0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a31a:	2201      	movs	r2, #1
 800a31c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a322:	2240      	movs	r2, #64	; 0x40
 800a324:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a336:	689a      	ldr	r2, [r3, #8]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	430a      	orrs	r2, r1
 800a340:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a346:	68b9      	ldr	r1, [r7, #8]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3380      	adds	r3, #128	; 0x80
 800a34e:	461a      	mov	r2, r3
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	025b      	lsls	r3, r3, #9
 800a354:	089b      	lsrs	r3, r3, #2
 800a356:	f7fc feab 	bl	80070b0 <HAL_DMA_Start_IT>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d01c      	beq.n	800a39a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	6812      	ldr	r2, [r2, #0]
 800a36a:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800a36e:	f023 0302 	bic.w	r3, r3, #2
 800a372:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a18      	ldr	r2, [pc, #96]	; (800a3dc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a37a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a380:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2200      	movs	r2, #0
 800a394:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e018      	b.n	800a3cc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a39a:	f04f 33ff 	mov.w	r3, #4294967295
 800a39e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	025b      	lsls	r3, r3, #9
 800a3a4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a3a6:	2390      	movs	r3, #144	; 0x90
 800a3a8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f107 0210 	add.w	r2, r7, #16
 800a3be:	4611      	mov	r1, r2
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f003 fa47 	bl	800d854 <SDIO_ConfigData>

      return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e000      	b.n	800a3cc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800a3ca:	2302      	movs	r3, #2
  }
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3730      	adds	r7, #48	; 0x30
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	0800aae5 	.word	0x0800aae5
 800a3d8:	0800ab81 	.word	0x0800ab81
 800a3dc:	004005ff 	.word	0x004005ff
 800a3e0:	4225858c 	.word	0x4225858c

0800a3e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d008      	beq.n	800a412 <HAL_SD_IRQHandler+0x2e>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f003 0308 	and.w	r3, r3, #8
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fdfa 	bl	800b004 <SD_Read_IT>
 800a410:	e165      	b.n	800a6de <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f000 808f 	beq.w	800a540 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a42a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	6812      	ldr	r2, [r2, #0]
 800a436:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800a43a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a43e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f022 0201 	bic.w	r2, r2, #1
 800a44e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f003 0308 	and.w	r3, r3, #8
 800a456:	2b00      	cmp	r3, #0
 800a458:	d039      	beq.n	800a4ce <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f003 0302 	and.w	r3, r3, #2
 800a460:	2b00      	cmp	r3, #0
 800a462:	d104      	bne.n	800a46e <HAL_SD_IRQHandler+0x8a>
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f003 0320 	and.w	r3, r3, #32
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d011      	beq.n	800a492 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4618      	mov	r0, r3
 800a474:	f003 fac4 	bl	800da00 <SDMMC_CmdStopTransfer>
 800a478:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d008      	beq.n	800a492 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	431a      	orrs	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 f92f 	bl	800a6f0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f240 523a 	movw	r2, #1338	; 0x53a
 800a49a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d104      	bne.n	800a4be <HAL_SD_IRQHandler+0xda>
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f003 0302 	and.w	r3, r3, #2
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f003 fee2 	bl	800e288 <HAL_SD_RxCpltCallback>
 800a4c4:	e10b      	b.n	800a6de <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f003 fed4 	bl	800e274 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a4cc:	e107      	b.n	800a6de <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f000 8102 	beq.w	800a6de <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f003 0320 	and.w	r3, r3, #32
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d011      	beq.n	800a508 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f003 fa89 	bl	800da00 <SDMMC_CmdStopTransfer>
 800a4ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d008      	beq.n	800a508 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f8f4 	bl	800a6f0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f040 80e5 	bne.w	800a6de <HAL_SD_IRQHandler+0x2fa>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f003 0302 	and.w	r3, r3, #2
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f040 80df 	bne.w	800a6de <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f022 0208 	bic.w	r2, r2, #8
 800a52e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f003 fe9b 	bl	800e274 <HAL_SD_TxCpltCallback>
}
 800a53e:	e0ce      	b.n	800a6de <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d008      	beq.n	800a560 <HAL_SD_IRQHandler+0x17c>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f003 0308 	and.w	r3, r3, #8
 800a554:	2b00      	cmp	r3, #0
 800a556:	d003      	beq.n	800a560 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fda4 	bl	800b0a6 <SD_Write_IT>
 800a55e:	e0be      	b.n	800a6de <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a566:	f240 233a 	movw	r3, #570	; 0x23a
 800a56a:	4013      	ands	r3, r2
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 80b6 	beq.w	800a6de <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a578:	f003 0302 	and.w	r3, r3, #2
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d005      	beq.n	800a58c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a584:	f043 0202 	orr.w	r2, r3, #2
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a592:	f003 0308 	and.w	r3, r3, #8
 800a596:	2b00      	cmp	r3, #0
 800a598:	d005      	beq.n	800a5a6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59e:	f043 0208 	orr.w	r2, r3, #8
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ac:	f003 0320 	and.w	r3, r3, #32
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d005      	beq.n	800a5c0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b8:	f043 0220 	orr.w	r2, r3, #32
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c6:	f003 0310 	and.w	r3, r3, #16
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d005      	beq.n	800a5da <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d2:	f043 0210 	orr.w	r2, r3, #16
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d005      	beq.n	800a5f4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ec:	f043 0208 	orr.w	r2, r3, #8
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f240 723a 	movw	r2, #1850	; 0x73a
 800a5fc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	6812      	ldr	r2, [r2, #0]
 800a608:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a60c:	f023 0302 	bic.w	r3, r3, #2
 800a610:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4618      	mov	r0, r3
 800a618:	f003 f9f2 	bl	800da00 <SDMMC_CmdStopTransfer>
 800a61c:	4602      	mov	r2, r0
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a622:	431a      	orrs	r2, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f003 0308 	and.w	r3, r3, #8
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00a      	beq.n	800a648 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f855 	bl	800a6f0 <HAL_SD_ErrorCallback>
}
 800a646:	e04a      	b.n	800a6de <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d045      	beq.n	800a6de <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f003 0310 	and.w	r3, r3, #16
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d104      	bne.n	800a666 <HAL_SD_IRQHandler+0x282>
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f003 0320 	and.w	r3, r3, #32
 800a662:	2b00      	cmp	r3, #0
 800a664:	d011      	beq.n	800a68a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a66a:	4a1f      	ldr	r2, [pc, #124]	; (800a6e8 <HAL_SD_IRQHandler+0x304>)
 800a66c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a672:	4618      	mov	r0, r3
 800a674:	f7fc fde4 	bl	8007240 <HAL_DMA_Abort_IT>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d02f      	beq.n	800a6de <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a682:	4618      	mov	r0, r3
 800a684:	f000 face 	bl	800ac24 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a688:	e029      	b.n	800a6de <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f003 0301 	and.w	r3, r3, #1
 800a690:	2b00      	cmp	r3, #0
 800a692:	d104      	bne.n	800a69e <HAL_SD_IRQHandler+0x2ba>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f003 0302 	and.w	r3, r3, #2
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d011      	beq.n	800a6c2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	4a12      	ldr	r2, [pc, #72]	; (800a6ec <HAL_SD_IRQHandler+0x308>)
 800a6a4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fc fdc8 	bl	8007240 <HAL_DMA_Abort_IT>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d013      	beq.n	800a6de <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f000 fae9 	bl	800ac92 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a6c0:	e00d      	b.n	800a6de <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f003 fdc2 	bl	800e260 <HAL_SD_AbortCallback>
}
 800a6dc:	e7ff      	b.n	800a6de <HAL_SD_IRQHandler+0x2fa>
 800a6de:	bf00      	nop
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	0800ac25 	.word	0x0800ac25
 800a6ec:	0800ac93 	.word	0x0800ac93

0800a6f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a712:	0f9b      	lsrs	r3, r3, #30
 800a714:	b2da      	uxtb	r2, r3
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a71e:	0e9b      	lsrs	r3, r3, #26
 800a720:	b2db      	uxtb	r3, r3
 800a722:	f003 030f 	and.w	r3, r3, #15
 800a726:	b2da      	uxtb	r2, r3
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a730:	0e1b      	lsrs	r3, r3, #24
 800a732:	b2db      	uxtb	r3, r3
 800a734:	f003 0303 	and.w	r3, r3, #3
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a742:	0c1b      	lsrs	r3, r3, #16
 800a744:	b2da      	uxtb	r2, r3
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a74e:	0a1b      	lsrs	r3, r3, #8
 800a750:	b2da      	uxtb	r2, r3
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a764:	0d1b      	lsrs	r3, r3, #20
 800a766:	b29a      	uxth	r2, r3
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a770:	0c1b      	lsrs	r3, r3, #16
 800a772:	b2db      	uxtb	r3, r3
 800a774:	f003 030f 	and.w	r3, r3, #15
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a782:	0bdb      	lsrs	r3, r3, #15
 800a784:	b2db      	uxtb	r3, r3
 800a786:	f003 0301 	and.w	r3, r3, #1
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a794:	0b9b      	lsrs	r3, r3, #14
 800a796:	b2db      	uxtb	r3, r3
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7a6:	0b5b      	lsrs	r3, r3, #13
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	b2da      	uxtb	r2, r3
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7b8:	0b1b      	lsrs	r3, r3, #12
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	f003 0301 	and.w	r3, r3, #1
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d163      	bne.n	800a89c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7d8:	009a      	lsls	r2, r3, #2
 800a7da:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a7de:	4013      	ands	r3, r2
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a7e4:	0f92      	lsrs	r2, r2, #30
 800a7e6:	431a      	orrs	r2, r3
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7f0:	0edb      	lsrs	r3, r3, #27
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	f003 0307 	and.w	r3, r3, #7
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a802:	0e1b      	lsrs	r3, r3, #24
 800a804:	b2db      	uxtb	r3, r3
 800a806:	f003 0307 	and.w	r3, r3, #7
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a814:	0d5b      	lsrs	r3, r3, #21
 800a816:	b2db      	uxtb	r3, r3
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a826:	0c9b      	lsrs	r3, r3, #18
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	f003 0307 	and.w	r3, r3, #7
 800a82e:	b2da      	uxtb	r2, r3
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a838:	0bdb      	lsrs	r3, r3, #15
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	f003 0307 	and.w	r3, r3, #7
 800a840:	b2da      	uxtb	r2, r3
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	7e1b      	ldrb	r3, [r3, #24]
 800a854:	b2db      	uxtb	r3, r3
 800a856:	f003 0307 	and.w	r3, r3, #7
 800a85a:	3302      	adds	r3, #2
 800a85c:	2201      	movs	r2, #1
 800a85e:	fa02 f303 	lsl.w	r3, r2, r3
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a866:	fb02 f203 	mul.w	r2, r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	7a1b      	ldrb	r3, [r3, #8]
 800a872:	b2db      	uxtb	r3, r3
 800a874:	f003 030f 	and.w	r3, r3, #15
 800a878:	2201      	movs	r2, #1
 800a87a:	409a      	lsls	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a888:	0a52      	lsrs	r2, r2, #9
 800a88a:	fb02 f203 	mul.w	r2, r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a898:	661a      	str	r2, [r3, #96]	; 0x60
 800a89a:	e031      	b.n	800a900 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d11d      	bne.n	800a8e0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8a8:	041b      	lsls	r3, r3, #16
 800a8aa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8b2:	0c1b      	lsrs	r3, r3, #16
 800a8b4:	431a      	orrs	r2, r3
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	029a      	lsls	r2, r3, #10
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	661a      	str	r2, [r3, #96]	; 0x60
 800a8de:	e00f      	b.n	800a900 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a58      	ldr	r2, [pc, #352]	; (800aa48 <HAL_SD_GetCardCSD+0x344>)
 800a8e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e09d      	b.n	800aa3c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a904:	0b9b      	lsrs	r3, r3, #14
 800a906:	b2db      	uxtb	r3, r3
 800a908:	f003 0301 	and.w	r3, r3, #1
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a916:	09db      	lsrs	r3, r3, #7
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a938:	0fdb      	lsrs	r3, r3, #31
 800a93a:	b2da      	uxtb	r2, r3
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a944:	0f5b      	lsrs	r3, r3, #29
 800a946:	b2db      	uxtb	r3, r3
 800a948:	f003 0303 	and.w	r3, r3, #3
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a956:	0e9b      	lsrs	r3, r3, #26
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	f003 0307 	and.w	r3, r3, #7
 800a95e:	b2da      	uxtb	r2, r3
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a968:	0d9b      	lsrs	r3, r3, #22
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	f003 030f 	and.w	r3, r3, #15
 800a970:	b2da      	uxtb	r2, r3
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a97a:	0d5b      	lsrs	r3, r3, #21
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	f003 0301 	and.w	r3, r3, #1
 800a982:	b2da      	uxtb	r2, r3
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a996:	0c1b      	lsrs	r3, r3, #16
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	b2da      	uxtb	r2, r3
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9aa:	0bdb      	lsrs	r3, r3, #15
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9be:	0b9b      	lsrs	r3, r3, #14
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9d2:	0b5b      	lsrs	r3, r3, #13
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	f003 0301 	and.w	r3, r3, #1
 800a9da:	b2da      	uxtb	r2, r3
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9e6:	0b1b      	lsrs	r3, r3, #12
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	f003 0301 	and.w	r3, r3, #1
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9fa:	0a9b      	lsrs	r3, r3, #10
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	f003 0303 	and.w	r3, r3, #3
 800aa02:	b2da      	uxtb	r2, r3
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa0e:	0a1b      	lsrs	r3, r3, #8
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	f003 0303 	and.w	r3, r3, #3
 800aa16:	b2da      	uxtb	r2, r3
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa22:	085b      	lsrs	r3, r3, #1
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2201      	movs	r2, #1
 800aa36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr
 800aa48:	004005ff 	.word	0x004005ff

0800aa4c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b086      	sub	sp, #24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800aaac:	2300      	movs	r3, #0
 800aaae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800aab0:	f107 030c 	add.w	r3, r7, #12
 800aab4:	4619      	mov	r1, r3
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fa7c 	bl	800afb4 <SD_SendStatus>
 800aabc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d005      	beq.n	800aad0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	431a      	orrs	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	0a5b      	lsrs	r3, r3, #9
 800aad4:	f003 030f 	and.w	r3, r3, #15
 800aad8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800aada:	693b      	ldr	r3, [r7, #16]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3718      	adds	r7, #24
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab00:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ab02:	bf00      	nop
 800ab04:	3714      	adds	r7, #20
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr

0800ab0e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b084      	sub	sp, #16
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab20:	2b82      	cmp	r3, #130	; 0x82
 800ab22:	d111      	bne.n	800ab48 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f002 ff69 	bl	800da00 <SDMMC_CmdStopTransfer>
 800ab2e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d008      	beq.n	800ab48 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	431a      	orrs	r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f7ff fdd4 	bl	800a6f0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f022 0208 	bic.w	r2, r2, #8
 800ab56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f240 523a 	movw	r2, #1338	; 0x53a
 800ab60:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f003 fb89 	bl	800e288 <HAL_SD_RxCpltCallback>
#endif
}
 800ab76:	bf00      	nop
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7fc fd02 	bl	8007598 <HAL_DMA_GetError>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d03e      	beq.n	800ac18 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aba0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aba8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d002      	beq.n	800abb6 <SD_DMAError+0x36>
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d12d      	bne.n	800ac12 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a19      	ldr	r2, [pc, #100]	; (800ac20 <SD_DMAError+0xa0>)
 800abbc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800abcc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800abda:	6978      	ldr	r0, [r7, #20]
 800abdc:	f7ff ff62 	bl	800aaa4 <HAL_SD_GetCardState>
 800abe0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2b06      	cmp	r3, #6
 800abe6:	d002      	beq.n	800abee <SD_DMAError+0x6e>
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	2b05      	cmp	r3, #5
 800abec:	d10a      	bne.n	800ac04 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f002 ff04 	bl	800da00 <SDMMC_CmdStopTransfer>
 800abf8:	4602      	mov	r2, r0
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfe:	431a      	orrs	r2, r3
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ac12:	6978      	ldr	r0, [r7, #20]
 800ac14:	f7ff fd6c 	bl	800a6f0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800ac18:	bf00      	nop
 800ac1a:	3718      	adds	r7, #24
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	004005ff 	.word	0x004005ff

0800ac24 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac30:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f240 523a 	movw	r2, #1338	; 0x53a
 800ac3a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f7ff ff31 	bl	800aaa4 <HAL_SD_GetCardState>
 800ac42:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	2b06      	cmp	r3, #6
 800ac56:	d002      	beq.n	800ac5e <SD_DMATxAbort+0x3a>
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2b05      	cmp	r3, #5
 800ac5c:	d10a      	bne.n	800ac74 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4618      	mov	r0, r3
 800ac64:	f002 fecc 	bl	800da00 <SDMMC_CmdStopTransfer>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6e:	431a      	orrs	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d103      	bne.n	800ac84 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f003 faef 	bl	800e260 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ac82:	e002      	b.n	800ac8a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f7ff fd33 	bl	800a6f0 <HAL_SD_ErrorCallback>
}
 800ac8a:	bf00      	nop
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b084      	sub	sp, #16
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac9e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f240 523a 	movw	r2, #1338	; 0x53a
 800aca8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f7ff fefa 	bl	800aaa4 <HAL_SD_GetCardState>
 800acb0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2201      	movs	r2, #1
 800acb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2b06      	cmp	r3, #6
 800acc4:	d002      	beq.n	800accc <SD_DMARxAbort+0x3a>
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	2b05      	cmp	r3, #5
 800acca:	d10a      	bne.n	800ace2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f002 fe95 	bl	800da00 <SDMMC_CmdStopTransfer>
 800acd6:	4602      	mov	r2, r0
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acdc:	431a      	orrs	r2, r3
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d103      	bne.n	800acf2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f003 fab8 	bl	800e260 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800acf0:	e002      	b.n	800acf8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f7ff fcfc 	bl	800a6f0 <HAL_SD_ErrorCallback>
}
 800acf8:	bf00      	nop
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad00:	b5b0      	push	{r4, r5, r7, lr}
 800ad02:	b094      	sub	sp, #80	; 0x50
 800ad04:	af04      	add	r7, sp, #16
 800ad06:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f002 fd47 	bl	800d7a4 <SDIO_GetPowerState>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d102      	bne.n	800ad22 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ad20:	e0b6      	b.n	800ae90 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad26:	2b03      	cmp	r3, #3
 800ad28:	d02f      	beq.n	800ad8a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f002 ff2d 	bl	800db8e <SDMMC_CmdSendCID>
 800ad34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d001      	beq.n	800ad40 <SD_InitCard+0x40>
    {
      return errorstate;
 800ad3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad3e:	e0a7      	b.n	800ae90 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2100      	movs	r1, #0
 800ad46:	4618      	mov	r0, r3
 800ad48:	f002 fd71 	bl	800d82e <SDIO_GetResponse>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2104      	movs	r1, #4
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f002 fd68 	bl	800d82e <SDIO_GetResponse>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2108      	movs	r1, #8
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f002 fd5f 	bl	800d82e <SDIO_GetResponse>
 800ad70:	4602      	mov	r2, r0
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	210c      	movs	r1, #12
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f002 fd56 	bl	800d82e <SDIO_GetResponse>
 800ad82:	4602      	mov	r2, r0
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad8e:	2b03      	cmp	r3, #3
 800ad90:	d00d      	beq.n	800adae <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f107 020e 	add.w	r2, r7, #14
 800ad9a:	4611      	mov	r1, r2
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f002 ff33 	bl	800dc08 <SDMMC_CmdSetRelAdd>
 800ada2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ada4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <SD_InitCard+0xae>
    {
      return errorstate;
 800adaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adac:	e070      	b.n	800ae90 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adb2:	2b03      	cmp	r3, #3
 800adb4:	d036      	beq.n	800ae24 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800adb6:	89fb      	ldrh	r3, [r7, #14]
 800adb8:	461a      	mov	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adc6:	041b      	lsls	r3, r3, #16
 800adc8:	4619      	mov	r1, r3
 800adca:	4610      	mov	r0, r2
 800adcc:	f002 fefd 	bl	800dbca <SDMMC_CmdSendCSD>
 800add0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800add2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800add4:	2b00      	cmp	r3, #0
 800add6:	d001      	beq.n	800addc <SD_InitCard+0xdc>
    {
      return errorstate;
 800add8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adda:	e059      	b.n	800ae90 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2100      	movs	r1, #0
 800ade2:	4618      	mov	r0, r3
 800ade4:	f002 fd23 	bl	800d82e <SDIO_GetResponse>
 800ade8:	4602      	mov	r2, r0
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2104      	movs	r1, #4
 800adf4:	4618      	mov	r0, r3
 800adf6:	f002 fd1a 	bl	800d82e <SDIO_GetResponse>
 800adfa:	4602      	mov	r2, r0
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2108      	movs	r1, #8
 800ae06:	4618      	mov	r0, r3
 800ae08:	f002 fd11 	bl	800d82e <SDIO_GetResponse>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	210c      	movs	r1, #12
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f002 fd08 	bl	800d82e <SDIO_GetResponse>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2104      	movs	r1, #4
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f002 fcff 	bl	800d82e <SDIO_GetResponse>
 800ae30:	4603      	mov	r3, r0
 800ae32:	0d1a      	lsrs	r2, r3, #20
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ae38:	f107 0310 	add.w	r3, r7, #16
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7ff fc60 	bl	800a704 <HAL_SD_GetCardCSD>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d002      	beq.n	800ae50 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae4e:	e01f      	b.n	800ae90 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6819      	ldr	r1, [r3, #0]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae58:	041b      	lsls	r3, r3, #16
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	f04f 0300 	mov.w	r3, #0
 800ae60:	4608      	mov	r0, r1
 800ae62:	f002 fdef 	bl	800da44 <SDMMC_CmdSelDesel>
 800ae66:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d001      	beq.n	800ae72 <SD_InitCard+0x172>
  {
    return errorstate;
 800ae6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae70:	e00e      	b.n	800ae90 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681d      	ldr	r5, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	466c      	mov	r4, sp
 800ae7a:	f103 0210 	add.w	r2, r3, #16
 800ae7e:	ca07      	ldmia	r2, {r0, r1, r2}
 800ae80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae84:	3304      	adds	r3, #4
 800ae86:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f002 fc33 	bl	800d6f4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3740      	adds	r7, #64	; 0x40
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bdb0      	pop	{r4, r5, r7, pc}

0800ae98 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b086      	sub	sp, #24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aea0:	2300      	movs	r3, #0
 800aea2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aea4:	2300      	movs	r3, #0
 800aea6:	617b      	str	r3, [r7, #20]
 800aea8:	2300      	movs	r3, #0
 800aeaa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f002 fdea 	bl	800da8a <SDMMC_CmdGoIdleState>
 800aeb6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	e072      	b.n	800afa8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f002 fdfd 	bl	800dac6 <SDMMC_CmdOperCond>
 800aecc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00d      	beq.n	800aef0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4618      	mov	r0, r3
 800aee0:	f002 fdd3 	bl	800da8a <SDMMC_CmdGoIdleState>
 800aee4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d004      	beq.n	800aef6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	e05b      	b.n	800afa8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d137      	bne.n	800af6e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2100      	movs	r1, #0
 800af04:	4618      	mov	r0, r3
 800af06:	f002 fdfd 	bl	800db04 <SDMMC_CmdAppCommand>
 800af0a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d02d      	beq.n	800af6e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af16:	e047      	b.n	800afa8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2100      	movs	r1, #0
 800af1e:	4618      	mov	r0, r3
 800af20:	f002 fdf0 	bl	800db04 <SDMMC_CmdAppCommand>
 800af24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <SD_PowerON+0x98>
    {
      return errorstate;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	e03b      	b.n	800afa8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	491e      	ldr	r1, [pc, #120]	; (800afb0 <SD_PowerON+0x118>)
 800af36:	4618      	mov	r0, r3
 800af38:	f002 fe06 	bl	800db48 <SDMMC_CmdAppOperCommand>
 800af3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d002      	beq.n	800af4a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af48:	e02e      	b.n	800afa8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2100      	movs	r1, #0
 800af50:	4618      	mov	r0, r3
 800af52:	f002 fc6c 	bl	800d82e <SDIO_GetResponse>
 800af56:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	0fdb      	lsrs	r3, r3, #31
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d101      	bne.n	800af64 <SD_PowerON+0xcc>
 800af60:	2301      	movs	r3, #1
 800af62:	e000      	b.n	800af66 <SD_PowerON+0xce>
 800af64:	2300      	movs	r3, #0
 800af66:	613b      	str	r3, [r7, #16]

    count++;
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	3301      	adds	r3, #1
 800af6c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800af74:	4293      	cmp	r3, r2
 800af76:	d802      	bhi.n	800af7e <SD_PowerON+0xe6>
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d0cc      	beq.n	800af18 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800af84:	4293      	cmp	r3, r2
 800af86:	d902      	bls.n	800af8e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800af88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af8c:	e00c      	b.n	800afa8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800af94:	2b00      	cmp	r3, #0
 800af96:	d003      	beq.n	800afa0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	645a      	str	r2, [r3, #68]	; 0x44
 800af9e:	e002      	b.n	800afa6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800afa6:	2300      	movs	r3, #0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3718      	adds	r7, #24
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	c1100000 	.word	0xc1100000

0800afb4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d102      	bne.n	800afca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800afc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800afc8:	e018      	b.n	800affc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afd2:	041b      	lsls	r3, r3, #16
 800afd4:	4619      	mov	r1, r3
 800afd6:	4610      	mov	r0, r2
 800afd8:	f002 fe37 	bl	800dc4a <SDMMC_CmdSendStatus>
 800afdc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	e009      	b.n	800affc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2100      	movs	r1, #0
 800afee:	4618      	mov	r0, r3
 800aff0:	f002 fc1d 	bl	800d82e <SDIO_GetResponse>
 800aff4:	4602      	mov	r2, r0
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b010:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b016:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d03f      	beq.n	800b09e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b01e:	2300      	movs	r3, #0
 800b020:	617b      	str	r3, [r7, #20]
 800b022:	e033      	b.n	800b08c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4618      	mov	r0, r3
 800b02a:	f002 fb8e 	bl	800d74a <SDIO_ReadFIFO>
 800b02e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	b2da      	uxtb	r2, r3
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	3301      	adds	r3, #1
 800b03c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	3b01      	subs	r3, #1
 800b042:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	0a1b      	lsrs	r3, r3, #8
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3301      	adds	r3, #1
 800b052:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	3b01      	subs	r3, #1
 800b058:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	0c1b      	lsrs	r3, r3, #16
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	3301      	adds	r3, #1
 800b068:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	3b01      	subs	r3, #1
 800b06e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	0e1b      	lsrs	r3, r3, #24
 800b074:	b2da      	uxtb	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	3301      	adds	r3, #1
 800b07e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	3b01      	subs	r3, #1
 800b084:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	3301      	adds	r3, #1
 800b08a:	617b      	str	r3, [r7, #20]
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	2b07      	cmp	r3, #7
 800b090:	d9c8      	bls.n	800b024 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	693a      	ldr	r2, [r7, #16]
 800b09c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b09e:	bf00      	nop
 800b0a0:	3718      	adds	r7, #24
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b086      	sub	sp, #24
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d043      	beq.n	800b148 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	617b      	str	r3, [r7, #20]
 800b0c4:	e037      	b.n	800b136 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	021a      	lsls	r2, r3, #8
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	041a      	lsls	r2, r3, #16
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	3301      	adds	r3, #1
 800b100:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	3b01      	subs	r3, #1
 800b106:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	061a      	lsls	r2, r3, #24
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	4313      	orrs	r3, r2
 800b112:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	3301      	adds	r3, #1
 800b118:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	3b01      	subs	r3, #1
 800b11e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f107 0208 	add.w	r2, r7, #8
 800b128:	4611      	mov	r1, r2
 800b12a:	4618      	mov	r0, r3
 800b12c:	f002 fb1a 	bl	800d764 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	3301      	adds	r3, #1
 800b134:	617b      	str	r3, [r7, #20]
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	2b07      	cmp	r3, #7
 800b13a:	d9c4      	bls.n	800b0c6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	693a      	ldr	r2, [r7, #16]
 800b146:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b148:	bf00      	nop
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d101      	bne.n	800b162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	e041      	b.n	800b1e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d106      	bne.n	800b17c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7fa fa04 	bl	8005584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2202      	movs	r2, #2
 800b180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3304      	adds	r3, #4
 800b18c:	4619      	mov	r1, r3
 800b18e:	4610      	mov	r0, r2
 800b190:	f000 fc7a 	bl	800ba88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
	...

0800b1f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	2b01      	cmp	r3, #1
 800b202:	d001      	beq.n	800b208 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	e04e      	b.n	800b2a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2202      	movs	r2, #2
 800b20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68da      	ldr	r2, [r3, #12]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f042 0201 	orr.w	r2, r2, #1
 800b21e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a23      	ldr	r2, [pc, #140]	; (800b2b4 <HAL_TIM_Base_Start_IT+0xc4>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d022      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0x80>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b232:	d01d      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0x80>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a1f      	ldr	r2, [pc, #124]	; (800b2b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d018      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0x80>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a1e      	ldr	r2, [pc, #120]	; (800b2bc <HAL_TIM_Base_Start_IT+0xcc>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d013      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0x80>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a1c      	ldr	r2, [pc, #112]	; (800b2c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d00e      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0x80>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a1b      	ldr	r2, [pc, #108]	; (800b2c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d009      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0x80>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a19      	ldr	r2, [pc, #100]	; (800b2c8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d004      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0x80>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a18      	ldr	r2, [pc, #96]	; (800b2cc <HAL_TIM_Base_Start_IT+0xdc>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d111      	bne.n	800b294 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	f003 0307 	and.w	r3, r3, #7
 800b27a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2b06      	cmp	r3, #6
 800b280:	d010      	beq.n	800b2a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f042 0201 	orr.w	r2, r2, #1
 800b290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b292:	e007      	b.n	800b2a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f042 0201 	orr.w	r2, r2, #1
 800b2a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3714      	adds	r7, #20
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	40010000 	.word	0x40010000
 800b2b8:	40000400 	.word	0x40000400
 800b2bc:	40000800 	.word	0x40000800
 800b2c0:	40000c00 	.word	0x40000c00
 800b2c4:	40010400 	.word	0x40010400
 800b2c8:	40014000 	.word	0x40014000
 800b2cc:	40001800 	.word	0x40001800

0800b2d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e041      	b.n	800b366 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d106      	bne.n	800b2fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f839 	bl	800b36e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2202      	movs	r2, #2
 800b300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	3304      	adds	r3, #4
 800b30c:	4619      	mov	r1, r3
 800b30e:	4610      	mov	r0, r2
 800b310:	f000 fbba 	bl	800ba88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b36e:	b480      	push	{r7}
 800b370:	b083      	sub	sp, #12
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b376:	bf00      	nop
 800b378:	370c      	adds	r7, #12
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
	...

0800b384 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d109      	bne.n	800b3a8 <HAL_TIM_PWM_Start+0x24>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	bf14      	ite	ne
 800b3a0:	2301      	movne	r3, #1
 800b3a2:	2300      	moveq	r3, #0
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	e022      	b.n	800b3ee <HAL_TIM_PWM_Start+0x6a>
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	2b04      	cmp	r3, #4
 800b3ac:	d109      	bne.n	800b3c2 <HAL_TIM_PWM_Start+0x3e>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	bf14      	ite	ne
 800b3ba:	2301      	movne	r3, #1
 800b3bc:	2300      	moveq	r3, #0
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	e015      	b.n	800b3ee <HAL_TIM_PWM_Start+0x6a>
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2b08      	cmp	r3, #8
 800b3c6:	d109      	bne.n	800b3dc <HAL_TIM_PWM_Start+0x58>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	bf14      	ite	ne
 800b3d4:	2301      	movne	r3, #1
 800b3d6:	2300      	moveq	r3, #0
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	e008      	b.n	800b3ee <HAL_TIM_PWM_Start+0x6a>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	bf14      	ite	ne
 800b3e8:	2301      	movne	r3, #1
 800b3ea:	2300      	moveq	r3, #0
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d001      	beq.n	800b3f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e07c      	b.n	800b4f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d104      	bne.n	800b406 <HAL_TIM_PWM_Start+0x82>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2202      	movs	r2, #2
 800b400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b404:	e013      	b.n	800b42e <HAL_TIM_PWM_Start+0xaa>
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	2b04      	cmp	r3, #4
 800b40a:	d104      	bne.n	800b416 <HAL_TIM_PWM_Start+0x92>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2202      	movs	r2, #2
 800b410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b414:	e00b      	b.n	800b42e <HAL_TIM_PWM_Start+0xaa>
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	2b08      	cmp	r3, #8
 800b41a:	d104      	bne.n	800b426 <HAL_TIM_PWM_Start+0xa2>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2202      	movs	r2, #2
 800b420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b424:	e003      	b.n	800b42e <HAL_TIM_PWM_Start+0xaa>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2202      	movs	r2, #2
 800b42a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2201      	movs	r2, #1
 800b434:	6839      	ldr	r1, [r7, #0]
 800b436:	4618      	mov	r0, r3
 800b438:	f000 fe10 	bl	800c05c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a2d      	ldr	r2, [pc, #180]	; (800b4f8 <HAL_TIM_PWM_Start+0x174>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d004      	beq.n	800b450 <HAL_TIM_PWM_Start+0xcc>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a2c      	ldr	r2, [pc, #176]	; (800b4fc <HAL_TIM_PWM_Start+0x178>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d101      	bne.n	800b454 <HAL_TIM_PWM_Start+0xd0>
 800b450:	2301      	movs	r3, #1
 800b452:	e000      	b.n	800b456 <HAL_TIM_PWM_Start+0xd2>
 800b454:	2300      	movs	r3, #0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d007      	beq.n	800b46a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b468:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a22      	ldr	r2, [pc, #136]	; (800b4f8 <HAL_TIM_PWM_Start+0x174>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d022      	beq.n	800b4ba <HAL_TIM_PWM_Start+0x136>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b47c:	d01d      	beq.n	800b4ba <HAL_TIM_PWM_Start+0x136>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a1f      	ldr	r2, [pc, #124]	; (800b500 <HAL_TIM_PWM_Start+0x17c>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d018      	beq.n	800b4ba <HAL_TIM_PWM_Start+0x136>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a1d      	ldr	r2, [pc, #116]	; (800b504 <HAL_TIM_PWM_Start+0x180>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d013      	beq.n	800b4ba <HAL_TIM_PWM_Start+0x136>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a1c      	ldr	r2, [pc, #112]	; (800b508 <HAL_TIM_PWM_Start+0x184>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d00e      	beq.n	800b4ba <HAL_TIM_PWM_Start+0x136>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a16      	ldr	r2, [pc, #88]	; (800b4fc <HAL_TIM_PWM_Start+0x178>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d009      	beq.n	800b4ba <HAL_TIM_PWM_Start+0x136>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a18      	ldr	r2, [pc, #96]	; (800b50c <HAL_TIM_PWM_Start+0x188>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d004      	beq.n	800b4ba <HAL_TIM_PWM_Start+0x136>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a16      	ldr	r2, [pc, #88]	; (800b510 <HAL_TIM_PWM_Start+0x18c>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d111      	bne.n	800b4de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	f003 0307 	and.w	r3, r3, #7
 800b4c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2b06      	cmp	r3, #6
 800b4ca:	d010      	beq.n	800b4ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f042 0201 	orr.w	r2, r2, #1
 800b4da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4dc:	e007      	b.n	800b4ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f042 0201 	orr.w	r2, r2, #1
 800b4ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	40010000 	.word	0x40010000
 800b4fc:	40010400 	.word	0x40010400
 800b500:	40000400 	.word	0x40000400
 800b504:	40000800 	.word	0x40000800
 800b508:	40000c00 	.word	0x40000c00
 800b50c:	40014000 	.word	0x40014000
 800b510:	40001800 	.word	0x40001800

0800b514 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	691b      	ldr	r3, [r3, #16]
 800b522:	f003 0302 	and.w	r3, r3, #2
 800b526:	2b02      	cmp	r3, #2
 800b528:	d122      	bne.n	800b570 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	f003 0302 	and.w	r3, r3, #2
 800b534:	2b02      	cmp	r3, #2
 800b536:	d11b      	bne.n	800b570 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f06f 0202 	mvn.w	r2, #2
 800b540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2201      	movs	r2, #1
 800b546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	699b      	ldr	r3, [r3, #24]
 800b54e:	f003 0303 	and.w	r3, r3, #3
 800b552:	2b00      	cmp	r3, #0
 800b554:	d003      	beq.n	800b55e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 fa77 	bl	800ba4a <HAL_TIM_IC_CaptureCallback>
 800b55c:	e005      	b.n	800b56a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 fa69 	bl	800ba36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 fa7a 	bl	800ba5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	f003 0304 	and.w	r3, r3, #4
 800b57a:	2b04      	cmp	r3, #4
 800b57c:	d122      	bne.n	800b5c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	f003 0304 	and.w	r3, r3, #4
 800b588:	2b04      	cmp	r3, #4
 800b58a:	d11b      	bne.n	800b5c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f06f 0204 	mvn.w	r2, #4
 800b594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2202      	movs	r2, #2
 800b59a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	699b      	ldr	r3, [r3, #24]
 800b5a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d003      	beq.n	800b5b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 fa4d 	bl	800ba4a <HAL_TIM_IC_CaptureCallback>
 800b5b0:	e005      	b.n	800b5be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 fa3f 	bl	800ba36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 fa50 	bl	800ba5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	f003 0308 	and.w	r3, r3, #8
 800b5ce:	2b08      	cmp	r3, #8
 800b5d0:	d122      	bne.n	800b618 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	f003 0308 	and.w	r3, r3, #8
 800b5dc:	2b08      	cmp	r3, #8
 800b5de:	d11b      	bne.n	800b618 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f06f 0208 	mvn.w	r2, #8
 800b5e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2204      	movs	r2, #4
 800b5ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	69db      	ldr	r3, [r3, #28]
 800b5f6:	f003 0303 	and.w	r3, r3, #3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d003      	beq.n	800b606 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fa23 	bl	800ba4a <HAL_TIM_IC_CaptureCallback>
 800b604:	e005      	b.n	800b612 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 fa15 	bl	800ba36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fa26 	bl	800ba5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	f003 0310 	and.w	r3, r3, #16
 800b622:	2b10      	cmp	r3, #16
 800b624:	d122      	bne.n	800b66c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	f003 0310 	and.w	r3, r3, #16
 800b630:	2b10      	cmp	r3, #16
 800b632:	d11b      	bne.n	800b66c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f06f 0210 	mvn.w	r2, #16
 800b63c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2208      	movs	r2, #8
 800b642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	69db      	ldr	r3, [r3, #28]
 800b64a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d003      	beq.n	800b65a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 f9f9 	bl	800ba4a <HAL_TIM_IC_CaptureCallback>
 800b658:	e005      	b.n	800b666 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f9eb 	bl	800ba36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f9fc 	bl	800ba5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	f003 0301 	and.w	r3, r3, #1
 800b676:	2b01      	cmp	r3, #1
 800b678:	d10e      	bne.n	800b698 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	f003 0301 	and.w	r3, r3, #1
 800b684:	2b01      	cmp	r3, #1
 800b686:	d107      	bne.n	800b698 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f06f 0201 	mvn.w	r2, #1
 800b690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7f9 fc1c 	bl	8004ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	691b      	ldr	r3, [r3, #16]
 800b69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6a2:	2b80      	cmp	r3, #128	; 0x80
 800b6a4:	d10e      	bne.n	800b6c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b0:	2b80      	cmp	r3, #128	; 0x80
 800b6b2:	d107      	bne.n	800b6c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b6bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fd78 	bl	800c1b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	691b      	ldr	r3, [r3, #16]
 800b6ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ce:	2b40      	cmp	r3, #64	; 0x40
 800b6d0:	d10e      	bne.n	800b6f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6dc:	2b40      	cmp	r3, #64	; 0x40
 800b6de:	d107      	bne.n	800b6f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b6e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f9c1 	bl	800ba72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	f003 0320 	and.w	r3, r3, #32
 800b6fa:	2b20      	cmp	r3, #32
 800b6fc:	d10e      	bne.n	800b71c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	f003 0320 	and.w	r3, r3, #32
 800b708:	2b20      	cmp	r3, #32
 800b70a:	d107      	bne.n	800b71c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f06f 0220 	mvn.w	r2, #32
 800b714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 fd42 	bl	800c1a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b71c:	bf00      	nop
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d101      	bne.n	800b742 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b73e:	2302      	movs	r3, #2
 800b740:	e0ae      	b.n	800b8a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2b0c      	cmp	r3, #12
 800b74e:	f200 809f 	bhi.w	800b890 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b752:	a201      	add	r2, pc, #4	; (adr r2, 800b758 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b758:	0800b78d 	.word	0x0800b78d
 800b75c:	0800b891 	.word	0x0800b891
 800b760:	0800b891 	.word	0x0800b891
 800b764:	0800b891 	.word	0x0800b891
 800b768:	0800b7cd 	.word	0x0800b7cd
 800b76c:	0800b891 	.word	0x0800b891
 800b770:	0800b891 	.word	0x0800b891
 800b774:	0800b891 	.word	0x0800b891
 800b778:	0800b80f 	.word	0x0800b80f
 800b77c:	0800b891 	.word	0x0800b891
 800b780:	0800b891 	.word	0x0800b891
 800b784:	0800b891 	.word	0x0800b891
 800b788:	0800b84f 	.word	0x0800b84f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68b9      	ldr	r1, [r7, #8]
 800b792:	4618      	mov	r0, r3
 800b794:	f000 fa18 	bl	800bbc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	699a      	ldr	r2, [r3, #24]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f042 0208 	orr.w	r2, r2, #8
 800b7a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	699a      	ldr	r2, [r3, #24]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f022 0204 	bic.w	r2, r2, #4
 800b7b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6999      	ldr	r1, [r3, #24]
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	691a      	ldr	r2, [r3, #16]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	430a      	orrs	r2, r1
 800b7c8:	619a      	str	r2, [r3, #24]
      break;
 800b7ca:	e064      	b.n	800b896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	68b9      	ldr	r1, [r7, #8]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f000 fa68 	bl	800bca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	699a      	ldr	r2, [r3, #24]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	699a      	ldr	r2, [r3, #24]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6999      	ldr	r1, [r3, #24]
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	691b      	ldr	r3, [r3, #16]
 800b802:	021a      	lsls	r2, r3, #8
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	430a      	orrs	r2, r1
 800b80a:	619a      	str	r2, [r3, #24]
      break;
 800b80c:	e043      	b.n	800b896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68b9      	ldr	r1, [r7, #8]
 800b814:	4618      	mov	r0, r3
 800b816:	f000 fabd 	bl	800bd94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	69da      	ldr	r2, [r3, #28]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f042 0208 	orr.w	r2, r2, #8
 800b828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	69da      	ldr	r2, [r3, #28]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f022 0204 	bic.w	r2, r2, #4
 800b838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	69d9      	ldr	r1, [r3, #28]
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	691a      	ldr	r2, [r3, #16]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	430a      	orrs	r2, r1
 800b84a:	61da      	str	r2, [r3, #28]
      break;
 800b84c:	e023      	b.n	800b896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68b9      	ldr	r1, [r7, #8]
 800b854:	4618      	mov	r0, r3
 800b856:	f000 fb11 	bl	800be7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	69da      	ldr	r2, [r3, #28]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	69da      	ldr	r2, [r3, #28]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	69d9      	ldr	r1, [r3, #28]
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	021a      	lsls	r2, r3, #8
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	430a      	orrs	r2, r1
 800b88c:	61da      	str	r2, [r3, #28]
      break;
 800b88e:	e002      	b.n	800b896 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	75fb      	strb	r3, [r7, #23]
      break;
 800b894:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b89e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3718      	adds	r7, #24
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d101      	bne.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1c>
 800b8c0:	2302      	movs	r3, #2
 800b8c2:	e0b4      	b.n	800ba2e <HAL_TIM_ConfigClockSource+0x186>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b8e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8fc:	d03e      	beq.n	800b97c <HAL_TIM_ConfigClockSource+0xd4>
 800b8fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b902:	f200 8087 	bhi.w	800ba14 <HAL_TIM_ConfigClockSource+0x16c>
 800b906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b90a:	f000 8086 	beq.w	800ba1a <HAL_TIM_ConfigClockSource+0x172>
 800b90e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b912:	d87f      	bhi.n	800ba14 <HAL_TIM_ConfigClockSource+0x16c>
 800b914:	2b70      	cmp	r3, #112	; 0x70
 800b916:	d01a      	beq.n	800b94e <HAL_TIM_ConfigClockSource+0xa6>
 800b918:	2b70      	cmp	r3, #112	; 0x70
 800b91a:	d87b      	bhi.n	800ba14 <HAL_TIM_ConfigClockSource+0x16c>
 800b91c:	2b60      	cmp	r3, #96	; 0x60
 800b91e:	d050      	beq.n	800b9c2 <HAL_TIM_ConfigClockSource+0x11a>
 800b920:	2b60      	cmp	r3, #96	; 0x60
 800b922:	d877      	bhi.n	800ba14 <HAL_TIM_ConfigClockSource+0x16c>
 800b924:	2b50      	cmp	r3, #80	; 0x50
 800b926:	d03c      	beq.n	800b9a2 <HAL_TIM_ConfigClockSource+0xfa>
 800b928:	2b50      	cmp	r3, #80	; 0x50
 800b92a:	d873      	bhi.n	800ba14 <HAL_TIM_ConfigClockSource+0x16c>
 800b92c:	2b40      	cmp	r3, #64	; 0x40
 800b92e:	d058      	beq.n	800b9e2 <HAL_TIM_ConfigClockSource+0x13a>
 800b930:	2b40      	cmp	r3, #64	; 0x40
 800b932:	d86f      	bhi.n	800ba14 <HAL_TIM_ConfigClockSource+0x16c>
 800b934:	2b30      	cmp	r3, #48	; 0x30
 800b936:	d064      	beq.n	800ba02 <HAL_TIM_ConfigClockSource+0x15a>
 800b938:	2b30      	cmp	r3, #48	; 0x30
 800b93a:	d86b      	bhi.n	800ba14 <HAL_TIM_ConfigClockSource+0x16c>
 800b93c:	2b20      	cmp	r3, #32
 800b93e:	d060      	beq.n	800ba02 <HAL_TIM_ConfigClockSource+0x15a>
 800b940:	2b20      	cmp	r3, #32
 800b942:	d867      	bhi.n	800ba14 <HAL_TIM_ConfigClockSource+0x16c>
 800b944:	2b00      	cmp	r3, #0
 800b946:	d05c      	beq.n	800ba02 <HAL_TIM_ConfigClockSource+0x15a>
 800b948:	2b10      	cmp	r3, #16
 800b94a:	d05a      	beq.n	800ba02 <HAL_TIM_ConfigClockSource+0x15a>
 800b94c:	e062      	b.n	800ba14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6818      	ldr	r0, [r3, #0]
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	6899      	ldr	r1, [r3, #8]
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	685a      	ldr	r2, [r3, #4]
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	f000 fb5d 	bl	800c01c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b970:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68ba      	ldr	r2, [r7, #8]
 800b978:	609a      	str	r2, [r3, #8]
      break;
 800b97a:	e04f      	b.n	800ba1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6818      	ldr	r0, [r3, #0]
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	6899      	ldr	r1, [r3, #8]
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	685a      	ldr	r2, [r3, #4]
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	f000 fb46 	bl	800c01c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	689a      	ldr	r2, [r3, #8]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b99e:	609a      	str	r2, [r3, #8]
      break;
 800b9a0:	e03c      	b.n	800ba1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6818      	ldr	r0, [r3, #0]
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	6859      	ldr	r1, [r3, #4]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	f000 faba 	bl	800bf28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2150      	movs	r1, #80	; 0x50
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f000 fb13 	bl	800bfe6 <TIM_ITRx_SetConfig>
      break;
 800b9c0:	e02c      	b.n	800ba1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6818      	ldr	r0, [r3, #0]
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	6859      	ldr	r1, [r3, #4]
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	f000 fad9 	bl	800bf86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2160      	movs	r1, #96	; 0x60
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f000 fb03 	bl	800bfe6 <TIM_ITRx_SetConfig>
      break;
 800b9e0:	e01c      	b.n	800ba1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6818      	ldr	r0, [r3, #0]
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	6859      	ldr	r1, [r3, #4]
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	f000 fa9a 	bl	800bf28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2140      	movs	r1, #64	; 0x40
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 faf3 	bl	800bfe6 <TIM_ITRx_SetConfig>
      break;
 800ba00:	e00c      	b.n	800ba1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	f000 faea 	bl	800bfe6 <TIM_ITRx_SetConfig>
      break;
 800ba12:	e003      	b.n	800ba1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	73fb      	strb	r3, [r7, #15]
      break;
 800ba18:	e000      	b.n	800ba1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ba1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b083      	sub	sp, #12
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba3e:	bf00      	nop
 800ba40:	370c      	adds	r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr

0800ba4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b083      	sub	sp, #12
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba52:	bf00      	nop
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr

0800ba5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba5e:	b480      	push	{r7}
 800ba60:	b083      	sub	sp, #12
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba66:	bf00      	nop
 800ba68:	370c      	adds	r7, #12
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba72:	b480      	push	{r7}
 800ba74:	b083      	sub	sp, #12
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba7a:	bf00      	nop
 800ba7c:	370c      	adds	r7, #12
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
	...

0800ba88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a40      	ldr	r2, [pc, #256]	; (800bb9c <TIM_Base_SetConfig+0x114>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d013      	beq.n	800bac8 <TIM_Base_SetConfig+0x40>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baa6:	d00f      	beq.n	800bac8 <TIM_Base_SetConfig+0x40>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a3d      	ldr	r2, [pc, #244]	; (800bba0 <TIM_Base_SetConfig+0x118>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d00b      	beq.n	800bac8 <TIM_Base_SetConfig+0x40>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a3c      	ldr	r2, [pc, #240]	; (800bba4 <TIM_Base_SetConfig+0x11c>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d007      	beq.n	800bac8 <TIM_Base_SetConfig+0x40>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4a3b      	ldr	r2, [pc, #236]	; (800bba8 <TIM_Base_SetConfig+0x120>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d003      	beq.n	800bac8 <TIM_Base_SetConfig+0x40>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4a3a      	ldr	r2, [pc, #232]	; (800bbac <TIM_Base_SetConfig+0x124>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d108      	bne.n	800bada <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a2f      	ldr	r2, [pc, #188]	; (800bb9c <TIM_Base_SetConfig+0x114>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d02b      	beq.n	800bb3a <TIM_Base_SetConfig+0xb2>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bae8:	d027      	beq.n	800bb3a <TIM_Base_SetConfig+0xb2>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a2c      	ldr	r2, [pc, #176]	; (800bba0 <TIM_Base_SetConfig+0x118>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d023      	beq.n	800bb3a <TIM_Base_SetConfig+0xb2>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a2b      	ldr	r2, [pc, #172]	; (800bba4 <TIM_Base_SetConfig+0x11c>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d01f      	beq.n	800bb3a <TIM_Base_SetConfig+0xb2>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a2a      	ldr	r2, [pc, #168]	; (800bba8 <TIM_Base_SetConfig+0x120>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d01b      	beq.n	800bb3a <TIM_Base_SetConfig+0xb2>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a29      	ldr	r2, [pc, #164]	; (800bbac <TIM_Base_SetConfig+0x124>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d017      	beq.n	800bb3a <TIM_Base_SetConfig+0xb2>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a28      	ldr	r2, [pc, #160]	; (800bbb0 <TIM_Base_SetConfig+0x128>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d013      	beq.n	800bb3a <TIM_Base_SetConfig+0xb2>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a27      	ldr	r2, [pc, #156]	; (800bbb4 <TIM_Base_SetConfig+0x12c>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d00f      	beq.n	800bb3a <TIM_Base_SetConfig+0xb2>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a26      	ldr	r2, [pc, #152]	; (800bbb8 <TIM_Base_SetConfig+0x130>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d00b      	beq.n	800bb3a <TIM_Base_SetConfig+0xb2>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a25      	ldr	r2, [pc, #148]	; (800bbbc <TIM_Base_SetConfig+0x134>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d007      	beq.n	800bb3a <TIM_Base_SetConfig+0xb2>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4a24      	ldr	r2, [pc, #144]	; (800bbc0 <TIM_Base_SetConfig+0x138>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d003      	beq.n	800bb3a <TIM_Base_SetConfig+0xb2>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4a23      	ldr	r2, [pc, #140]	; (800bbc4 <TIM_Base_SetConfig+0x13c>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d108      	bne.n	800bb4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	695b      	ldr	r3, [r3, #20]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	689a      	ldr	r2, [r3, #8]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4a0a      	ldr	r2, [pc, #40]	; (800bb9c <TIM_Base_SetConfig+0x114>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d003      	beq.n	800bb80 <TIM_Base_SetConfig+0xf8>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a0c      	ldr	r2, [pc, #48]	; (800bbac <TIM_Base_SetConfig+0x124>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d103      	bne.n	800bb88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	691a      	ldr	r2, [r3, #16]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	615a      	str	r2, [r3, #20]
}
 800bb8e:	bf00      	nop
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	40010000 	.word	0x40010000
 800bba0:	40000400 	.word	0x40000400
 800bba4:	40000800 	.word	0x40000800
 800bba8:	40000c00 	.word	0x40000c00
 800bbac:	40010400 	.word	0x40010400
 800bbb0:	40014000 	.word	0x40014000
 800bbb4:	40014400 	.word	0x40014400
 800bbb8:	40014800 	.word	0x40014800
 800bbbc:	40001800 	.word	0x40001800
 800bbc0:	40001c00 	.word	0x40001c00
 800bbc4:	40002000 	.word	0x40002000

0800bbc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b087      	sub	sp, #28
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	f023 0201 	bic.w	r2, r3, #1
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a1b      	ldr	r3, [r3, #32]
 800bbe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	699b      	ldr	r3, [r3, #24]
 800bbee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f023 0303 	bic.w	r3, r3, #3
 800bbfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f023 0302 	bic.w	r3, r3, #2
 800bc10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4a20      	ldr	r2, [pc, #128]	; (800bca0 <TIM_OC1_SetConfig+0xd8>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d003      	beq.n	800bc2c <TIM_OC1_SetConfig+0x64>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4a1f      	ldr	r2, [pc, #124]	; (800bca4 <TIM_OC1_SetConfig+0xdc>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d10c      	bne.n	800bc46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	f023 0308 	bic.w	r3, r3, #8
 800bc32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	697a      	ldr	r2, [r7, #20]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	f023 0304 	bic.w	r3, r3, #4
 800bc44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a15      	ldr	r2, [pc, #84]	; (800bca0 <TIM_OC1_SetConfig+0xd8>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d003      	beq.n	800bc56 <TIM_OC1_SetConfig+0x8e>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a14      	ldr	r2, [pc, #80]	; (800bca4 <TIM_OC1_SetConfig+0xdc>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d111      	bne.n	800bc7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	695b      	ldr	r3, [r3, #20]
 800bc6a:	693a      	ldr	r2, [r7, #16]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	693a      	ldr	r2, [r7, #16]
 800bc76:	4313      	orrs	r3, r2
 800bc78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	693a      	ldr	r2, [r7, #16]
 800bc7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	685a      	ldr	r2, [r3, #4]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	697a      	ldr	r2, [r7, #20]
 800bc92:	621a      	str	r2, [r3, #32]
}
 800bc94:	bf00      	nop
 800bc96:	371c      	adds	r7, #28
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr
 800bca0:	40010000 	.word	0x40010000
 800bca4:	40010400 	.word	0x40010400

0800bca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b087      	sub	sp, #28
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	f023 0210 	bic.w	r2, r3, #16
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a1b      	ldr	r3, [r3, #32]
 800bcc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	699b      	ldr	r3, [r3, #24]
 800bcce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	021b      	lsls	r3, r3, #8
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	f023 0320 	bic.w	r3, r3, #32
 800bcf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	011b      	lsls	r3, r3, #4
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4a22      	ldr	r2, [pc, #136]	; (800bd8c <TIM_OC2_SetConfig+0xe4>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d003      	beq.n	800bd10 <TIM_OC2_SetConfig+0x68>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4a21      	ldr	r2, [pc, #132]	; (800bd90 <TIM_OC2_SetConfig+0xe8>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d10d      	bne.n	800bd2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	011b      	lsls	r3, r3, #4
 800bd1e:	697a      	ldr	r2, [r7, #20]
 800bd20:	4313      	orrs	r3, r2
 800bd22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4a17      	ldr	r2, [pc, #92]	; (800bd8c <TIM_OC2_SetConfig+0xe4>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d003      	beq.n	800bd3c <TIM_OC2_SetConfig+0x94>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a16      	ldr	r2, [pc, #88]	; (800bd90 <TIM_OC2_SetConfig+0xe8>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d113      	bne.n	800bd64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bd42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	695b      	ldr	r3, [r3, #20]
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	4313      	orrs	r3, r2
 800bd56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	699b      	ldr	r3, [r3, #24]
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	693a      	ldr	r2, [r7, #16]
 800bd68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	685a      	ldr	r2, [r3, #4]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	697a      	ldr	r2, [r7, #20]
 800bd7c:	621a      	str	r2, [r3, #32]
}
 800bd7e:	bf00      	nop
 800bd80:	371c      	adds	r7, #28
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	40010000 	.word	0x40010000
 800bd90:	40010400 	.word	0x40010400

0800bd94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b087      	sub	sp, #28
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a1b      	ldr	r3, [r3, #32]
 800bda2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a1b      	ldr	r3, [r3, #32]
 800bdae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	69db      	ldr	r3, [r3, #28]
 800bdba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f023 0303 	bic.w	r3, r3, #3
 800bdca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	021b      	lsls	r3, r3, #8
 800bde4:	697a      	ldr	r2, [r7, #20]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4a21      	ldr	r2, [pc, #132]	; (800be74 <TIM_OC3_SetConfig+0xe0>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d003      	beq.n	800bdfa <TIM_OC3_SetConfig+0x66>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4a20      	ldr	r2, [pc, #128]	; (800be78 <TIM_OC3_SetConfig+0xe4>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d10d      	bne.n	800be16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	021b      	lsls	r3, r3, #8
 800be08:	697a      	ldr	r2, [r7, #20]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800be14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	4a16      	ldr	r2, [pc, #88]	; (800be74 <TIM_OC3_SetConfig+0xe0>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d003      	beq.n	800be26 <TIM_OC3_SetConfig+0x92>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	4a15      	ldr	r2, [pc, #84]	; (800be78 <TIM_OC3_SetConfig+0xe4>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d113      	bne.n	800be4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	695b      	ldr	r3, [r3, #20]
 800be3a:	011b      	lsls	r3, r3, #4
 800be3c:	693a      	ldr	r2, [r7, #16]
 800be3e:	4313      	orrs	r3, r2
 800be40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	699b      	ldr	r3, [r3, #24]
 800be46:	011b      	lsls	r3, r3, #4
 800be48:	693a      	ldr	r2, [r7, #16]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	685a      	ldr	r2, [r3, #4]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	697a      	ldr	r2, [r7, #20]
 800be66:	621a      	str	r2, [r3, #32]
}
 800be68:	bf00      	nop
 800be6a:	371c      	adds	r7, #28
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr
 800be74:	40010000 	.word	0x40010000
 800be78:	40010400 	.word	0x40010400

0800be7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b087      	sub	sp, #28
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a1b      	ldr	r3, [r3, #32]
 800be8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a1b      	ldr	r3, [r3, #32]
 800be96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	69db      	ldr	r3, [r3, #28]
 800bea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800beb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	021b      	lsls	r3, r3, #8
 800beba:	68fa      	ldr	r2, [r7, #12]
 800bebc:	4313      	orrs	r3, r2
 800bebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	031b      	lsls	r3, r3, #12
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	4a12      	ldr	r2, [pc, #72]	; (800bf20 <TIM_OC4_SetConfig+0xa4>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d003      	beq.n	800bee4 <TIM_OC4_SetConfig+0x68>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a11      	ldr	r2, [pc, #68]	; (800bf24 <TIM_OC4_SetConfig+0xa8>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d109      	bne.n	800bef8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800beea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	695b      	ldr	r3, [r3, #20]
 800bef0:	019b      	lsls	r3, r3, #6
 800bef2:	697a      	ldr	r2, [r7, #20]
 800bef4:	4313      	orrs	r3, r2
 800bef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	697a      	ldr	r2, [r7, #20]
 800befc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	685a      	ldr	r2, [r3, #4]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	693a      	ldr	r2, [r7, #16]
 800bf10:	621a      	str	r2, [r3, #32]
}
 800bf12:	bf00      	nop
 800bf14:	371c      	adds	r7, #28
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr
 800bf1e:	bf00      	nop
 800bf20:	40010000 	.word	0x40010000
 800bf24:	40010400 	.word	0x40010400

0800bf28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b087      	sub	sp, #28
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6a1b      	ldr	r3, [r3, #32]
 800bf38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6a1b      	ldr	r3, [r3, #32]
 800bf3e:	f023 0201 	bic.w	r2, r3, #1
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	699b      	ldr	r3, [r3, #24]
 800bf4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	011b      	lsls	r3, r3, #4
 800bf58:	693a      	ldr	r2, [r7, #16]
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	f023 030a 	bic.w	r3, r3, #10
 800bf64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf66:	697a      	ldr	r2, [r7, #20]
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	693a      	ldr	r2, [r7, #16]
 800bf72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	697a      	ldr	r2, [r7, #20]
 800bf78:	621a      	str	r2, [r3, #32]
}
 800bf7a:	bf00      	nop
 800bf7c:	371c      	adds	r7, #28
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr

0800bf86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf86:	b480      	push	{r7}
 800bf88:	b087      	sub	sp, #28
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	60f8      	str	r0, [r7, #12]
 800bf8e:	60b9      	str	r1, [r7, #8]
 800bf90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6a1b      	ldr	r3, [r3, #32]
 800bf96:	f023 0210 	bic.w	r2, r3, #16
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6a1b      	ldr	r3, [r3, #32]
 800bfa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bfb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	031b      	lsls	r3, r3, #12
 800bfb6:	697a      	ldr	r2, [r7, #20]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bfc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	011b      	lsls	r3, r3, #4
 800bfc8:	693a      	ldr	r2, [r7, #16]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	697a      	ldr	r2, [r7, #20]
 800bfd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	693a      	ldr	r2, [r7, #16]
 800bfd8:	621a      	str	r2, [r3, #32]
}
 800bfda:	bf00      	nop
 800bfdc:	371c      	adds	r7, #28
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bfe6:	b480      	push	{r7}
 800bfe8:	b085      	sub	sp, #20
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
 800bfee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bffc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	4313      	orrs	r3, r2
 800c004:	f043 0307 	orr.w	r3, r3, #7
 800c008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	609a      	str	r2, [r3, #8]
}
 800c010:	bf00      	nop
 800c012:	3714      	adds	r7, #20
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b087      	sub	sp, #28
 800c020:	af00      	add	r7, sp, #0
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	60b9      	str	r1, [r7, #8]
 800c026:	607a      	str	r2, [r7, #4]
 800c028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	689b      	ldr	r3, [r3, #8]
 800c02e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	021a      	lsls	r2, r3, #8
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	431a      	orrs	r2, r3
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	4313      	orrs	r3, r2
 800c044:	697a      	ldr	r2, [r7, #20]
 800c046:	4313      	orrs	r3, r2
 800c048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	609a      	str	r2, [r3, #8]
}
 800c050:	bf00      	nop
 800c052:	371c      	adds	r7, #28
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b087      	sub	sp, #28
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	f003 031f 	and.w	r3, r3, #31
 800c06e:	2201      	movs	r2, #1
 800c070:	fa02 f303 	lsl.w	r3, r2, r3
 800c074:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6a1a      	ldr	r2, [r3, #32]
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	43db      	mvns	r3, r3
 800c07e:	401a      	ands	r2, r3
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6a1a      	ldr	r2, [r3, #32]
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	f003 031f 	and.w	r3, r3, #31
 800c08e:	6879      	ldr	r1, [r7, #4]
 800c090:	fa01 f303 	lsl.w	r3, r1, r3
 800c094:	431a      	orrs	r2, r3
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	621a      	str	r2, [r3, #32]
}
 800c09a:	bf00      	nop
 800c09c:	371c      	adds	r7, #28
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr
	...

0800c0a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d101      	bne.n	800c0c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0bc:	2302      	movs	r3, #2
 800c0be:	e05a      	b.n	800c176 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2202      	movs	r2, #2
 800c0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a21      	ldr	r2, [pc, #132]	; (800c184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d022      	beq.n	800c14a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c10c:	d01d      	beq.n	800c14a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a1d      	ldr	r2, [pc, #116]	; (800c188 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d018      	beq.n	800c14a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a1b      	ldr	r2, [pc, #108]	; (800c18c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d013      	beq.n	800c14a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a1a      	ldr	r2, [pc, #104]	; (800c190 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d00e      	beq.n	800c14a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a18      	ldr	r2, [pc, #96]	; (800c194 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d009      	beq.n	800c14a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a17      	ldr	r2, [pc, #92]	; (800c198 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d004      	beq.n	800c14a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a15      	ldr	r2, [pc, #84]	; (800c19c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d10c      	bne.n	800c164 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	68ba      	ldr	r2, [r7, #8]
 800c158:	4313      	orrs	r3, r2
 800c15a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	68ba      	ldr	r2, [r7, #8]
 800c162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2201      	movs	r2, #1
 800c168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	3714      	adds	r7, #20
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	40010000 	.word	0x40010000
 800c188:	40000400 	.word	0x40000400
 800c18c:	40000800 	.word	0x40000800
 800c190:	40000c00 	.word	0x40000c00
 800c194:	40010400 	.word	0x40010400
 800c198:	40014000 	.word	0x40014000
 800c19c:	40001800 	.word	0x40001800

0800c1a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1a8:	bf00      	nop
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1bc:	bf00      	nop
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d101      	bne.n	800c1da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e03f      	b.n	800c25a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d106      	bne.n	800c1f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f7f9 fade 	bl	80057b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2224      	movs	r2, #36	; 0x24
 800c1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	68da      	ldr	r2, [r3, #12]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c20a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f001 f8a9 	bl	800d364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	691a      	ldr	r2, [r3, #16]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c220:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	695a      	ldr	r2, [r3, #20]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c230:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	68da      	ldr	r2, [r3, #12]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c240:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2220      	movs	r2, #32
 800c24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2220      	movs	r2, #32
 800c254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c258:	2300      	movs	r3, #0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3708      	adds	r7, #8
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b08a      	sub	sp, #40	; 0x28
 800c266:	af02      	add	r7, sp, #8
 800c268:	60f8      	str	r0, [r7, #12]
 800c26a:	60b9      	str	r1, [r7, #8]
 800c26c:	603b      	str	r3, [r7, #0]
 800c26e:	4613      	mov	r3, r2
 800c270:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c272:	2300      	movs	r3, #0
 800c274:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	2b20      	cmp	r3, #32
 800c280:	d17c      	bne.n	800c37c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d002      	beq.n	800c28e <HAL_UART_Transmit+0x2c>
 800c288:	88fb      	ldrh	r3, [r7, #6]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d101      	bne.n	800c292 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e075      	b.n	800c37e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d101      	bne.n	800c2a0 <HAL_UART_Transmit+0x3e>
 800c29c:	2302      	movs	r3, #2
 800c29e:	e06e      	b.n	800c37e <HAL_UART_Transmit+0x11c>
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2221      	movs	r2, #33	; 0x21
 800c2b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c2b6:	f7fa fd3b 	bl	8006d30 <HAL_GetTick>
 800c2ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	88fa      	ldrh	r2, [r7, #6]
 800c2c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	88fa      	ldrh	r2, [r7, #6]
 800c2c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2d0:	d108      	bne.n	800c2e4 <HAL_UART_Transmit+0x82>
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d104      	bne.n	800c2e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	61bb      	str	r3, [r7, #24]
 800c2e2:	e003      	b.n	800c2ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c2f4:	e02a      	b.n	800c34c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	2180      	movs	r1, #128	; 0x80
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f000 fd2a 	bl	800cd5a <UART_WaitOnFlagUntilTimeout>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d001      	beq.n	800c310 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c30c:	2303      	movs	r3, #3
 800c30e:	e036      	b.n	800c37e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d10b      	bne.n	800c32e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	881b      	ldrh	r3, [r3, #0]
 800c31a:	461a      	mov	r2, r3
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c324:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	3302      	adds	r3, #2
 800c32a:	61bb      	str	r3, [r7, #24]
 800c32c:	e007      	b.n	800c33e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	781a      	ldrb	r2, [r3, #0]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	3301      	adds	r3, #1
 800c33c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c342:	b29b      	uxth	r3, r3
 800c344:	3b01      	subs	r3, #1
 800c346:	b29a      	uxth	r2, r3
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c350:	b29b      	uxth	r3, r3
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1cf      	bne.n	800c2f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	2200      	movs	r2, #0
 800c35e:	2140      	movs	r1, #64	; 0x40
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f000 fcfa 	bl	800cd5a <UART_WaitOnFlagUntilTimeout>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c36c:	2303      	movs	r3, #3
 800c36e:	e006      	b.n	800c37e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2220      	movs	r2, #32
 800c374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c378:	2300      	movs	r3, #0
 800c37a:	e000      	b.n	800c37e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c37c:	2302      	movs	r3, #2
  }
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3720      	adds	r7, #32
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c386:	b580      	push	{r7, lr}
 800c388:	b084      	sub	sp, #16
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	60f8      	str	r0, [r7, #12]
 800c38e:	60b9      	str	r1, [r7, #8]
 800c390:	4613      	mov	r3, r2
 800c392:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	2b20      	cmp	r3, #32
 800c39e:	d11d      	bne.n	800c3dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d002      	beq.n	800c3ac <HAL_UART_Receive_IT+0x26>
 800c3a6:	88fb      	ldrh	r3, [r7, #6]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d101      	bne.n	800c3b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e016      	b.n	800c3de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d101      	bne.n	800c3be <HAL_UART_Receive_IT+0x38>
 800c3ba:	2302      	movs	r3, #2
 800c3bc:	e00f      	b.n	800c3de <HAL_UART_Receive_IT+0x58>
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c3cc:	88fb      	ldrh	r3, [r7, #6]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	68b9      	ldr	r1, [r7, #8]
 800c3d2:	68f8      	ldr	r0, [r7, #12]
 800c3d4:	f000 fd2f 	bl	800ce36 <UART_Start_Receive_IT>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	e000      	b.n	800c3de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c3dc:	2302      	movs	r3, #2
  }
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
	...

0800c3e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b08c      	sub	sp, #48	; 0x30
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	2b20      	cmp	r3, #32
 800c400:	d165      	bne.n	800c4ce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d002      	beq.n	800c40e <HAL_UART_Transmit_DMA+0x26>
 800c408:	88fb      	ldrh	r3, [r7, #6]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d101      	bne.n	800c412 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c40e:	2301      	movs	r3, #1
 800c410:	e05e      	b.n	800c4d0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d101      	bne.n	800c420 <HAL_UART_Transmit_DMA+0x38>
 800c41c:	2302      	movs	r3, #2
 800c41e:	e057      	b.n	800c4d0 <HAL_UART_Transmit_DMA+0xe8>
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	88fa      	ldrh	r2, [r7, #6]
 800c432:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	88fa      	ldrh	r2, [r7, #6]
 800c438:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2200      	movs	r2, #0
 800c43e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2221      	movs	r2, #33	; 0x21
 800c444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c44c:	4a22      	ldr	r2, [pc, #136]	; (800c4d8 <HAL_UART_Transmit_DMA+0xf0>)
 800c44e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c454:	4a21      	ldr	r2, [pc, #132]	; (800c4dc <HAL_UART_Transmit_DMA+0xf4>)
 800c456:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c45c:	4a20      	ldr	r2, [pc, #128]	; (800c4e0 <HAL_UART_Transmit_DMA+0xf8>)
 800c45e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c464:	2200      	movs	r2, #0
 800c466:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800c468:	f107 0308 	add.w	r3, r7, #8
 800c46c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c474:	6819      	ldr	r1, [r3, #0]
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	3304      	adds	r3, #4
 800c47c:	461a      	mov	r2, r3
 800c47e:	88fb      	ldrh	r3, [r7, #6]
 800c480:	f7fa fe16 	bl	80070b0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c48c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2200      	movs	r2, #0
 800c492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	3314      	adds	r3, #20
 800c49c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	e853 3f00 	ldrex	r3, [r3]
 800c4a4:	617b      	str	r3, [r7, #20]
   return(result);
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	3314      	adds	r3, #20
 800c4b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4b6:	627a      	str	r2, [r7, #36]	; 0x24
 800c4b8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ba:	6a39      	ldr	r1, [r7, #32]
 800c4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4be:	e841 2300 	strex	r3, r2, [r1]
 800c4c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1e5      	bne.n	800c496 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	e000      	b.n	800c4d0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800c4ce:	2302      	movs	r3, #2
  }
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3730      	adds	r7, #48	; 0x30
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	0800cab5 	.word	0x0800cab5
 800c4dc:	0800cb4f 	.word	0x0800cb4f
 800c4e0:	0800ccc7 	.word	0x0800ccc7

0800c4e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	2b20      	cmp	r3, #32
 800c4fc:	d11d      	bne.n	800c53a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d002      	beq.n	800c50a <HAL_UART_Receive_DMA+0x26>
 800c504:	88fb      	ldrh	r3, [r7, #6]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d101      	bne.n	800c50e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	e016      	b.n	800c53c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c514:	2b01      	cmp	r3, #1
 800c516:	d101      	bne.n	800c51c <HAL_UART_Receive_DMA+0x38>
 800c518:	2302      	movs	r3, #2
 800c51a:	e00f      	b.n	800c53c <HAL_UART_Receive_DMA+0x58>
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2201      	movs	r2, #1
 800c520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c52a:	88fb      	ldrh	r3, [r7, #6]
 800c52c:	461a      	mov	r2, r3
 800c52e:	68b9      	ldr	r1, [r7, #8]
 800c530:	68f8      	ldr	r0, [r7, #12]
 800c532:	f000 fcbb 	bl	800ceac <UART_Start_Receive_DMA>
 800c536:	4603      	mov	r3, r0
 800c538:	e000      	b.n	800c53c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c53a:	2302      	movs	r3, #2
  }
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3710      	adds	r7, #16
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b0ba      	sub	sp, #232	; 0xe8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	695b      	ldr	r3, [r3, #20]
 800c566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c56a:	2300      	movs	r3, #0
 800c56c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c570:	2300      	movs	r3, #0
 800c572:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c57a:	f003 030f 	and.w	r3, r3, #15
 800c57e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c586:	2b00      	cmp	r3, #0
 800c588:	d10f      	bne.n	800c5aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c58a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c58e:	f003 0320 	and.w	r3, r3, #32
 800c592:	2b00      	cmp	r3, #0
 800c594:	d009      	beq.n	800c5aa <HAL_UART_IRQHandler+0x66>
 800c596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c59a:	f003 0320 	and.w	r3, r3, #32
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d003      	beq.n	800c5aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 fe23 	bl	800d1ee <UART_Receive_IT>
      return;
 800c5a8:	e256      	b.n	800ca58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c5aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	f000 80de 	beq.w	800c770 <HAL_UART_IRQHandler+0x22c>
 800c5b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5b8:	f003 0301 	and.w	r3, r3, #1
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d106      	bne.n	800c5ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c5c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f000 80d1 	beq.w	800c770 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5d2:	f003 0301 	and.w	r3, r3, #1
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00b      	beq.n	800c5f2 <HAL_UART_IRQHandler+0xae>
 800c5da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d005      	beq.n	800c5f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ea:	f043 0201 	orr.w	r2, r3, #1
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c5f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5f6:	f003 0304 	and.w	r3, r3, #4
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00b      	beq.n	800c616 <HAL_UART_IRQHandler+0xd2>
 800c5fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	d005      	beq.n	800c616 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60e:	f043 0202 	orr.w	r2, r3, #2
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c61a:	f003 0302 	and.w	r3, r3, #2
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00b      	beq.n	800c63a <HAL_UART_IRQHandler+0xf6>
 800c622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c626:	f003 0301 	and.w	r3, r3, #1
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d005      	beq.n	800c63a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c632:	f043 0204 	orr.w	r2, r3, #4
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c63e:	f003 0308 	and.w	r3, r3, #8
 800c642:	2b00      	cmp	r3, #0
 800c644:	d011      	beq.n	800c66a <HAL_UART_IRQHandler+0x126>
 800c646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c64a:	f003 0320 	and.w	r3, r3, #32
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d105      	bne.n	800c65e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c656:	f003 0301 	and.w	r3, r3, #1
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d005      	beq.n	800c66a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c662:	f043 0208 	orr.w	r2, r3, #8
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f000 81ed 	beq.w	800ca4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c678:	f003 0320 	and.w	r3, r3, #32
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d008      	beq.n	800c692 <HAL_UART_IRQHandler+0x14e>
 800c680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c684:	f003 0320 	and.w	r3, r3, #32
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d002      	beq.n	800c692 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fdae 	bl	800d1ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	695b      	ldr	r3, [r3, #20]
 800c698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c69c:	2b40      	cmp	r3, #64	; 0x40
 800c69e:	bf0c      	ite	eq
 800c6a0:	2301      	moveq	r3, #1
 800c6a2:	2300      	movne	r3, #0
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ae:	f003 0308 	and.w	r3, r3, #8
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d103      	bne.n	800c6be <HAL_UART_IRQHandler+0x17a>
 800c6b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d04f      	beq.n	800c75e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 fcb6 	bl	800d030 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	695b      	ldr	r3, [r3, #20]
 800c6ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6ce:	2b40      	cmp	r3, #64	; 0x40
 800c6d0:	d141      	bne.n	800c756 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	3314      	adds	r3, #20
 800c6d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c6e0:	e853 3f00 	ldrex	r3, [r3]
 800c6e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c6e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	3314      	adds	r3, #20
 800c6fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c6fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c706:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c70a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c70e:	e841 2300 	strex	r3, r2, [r1]
 800c712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d1d9      	bne.n	800c6d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c722:	2b00      	cmp	r3, #0
 800c724:	d013      	beq.n	800c74e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c72a:	4a7d      	ldr	r2, [pc, #500]	; (800c920 <HAL_UART_IRQHandler+0x3dc>)
 800c72c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c732:	4618      	mov	r0, r3
 800c734:	f7fa fd84 	bl	8007240 <HAL_DMA_Abort_IT>
 800c738:	4603      	mov	r3, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d016      	beq.n	800c76c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c748:	4610      	mov	r0, r2
 800c74a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c74c:	e00e      	b.n	800c76c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 f99a 	bl	800ca88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c754:	e00a      	b.n	800c76c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f996 	bl	800ca88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c75c:	e006      	b.n	800c76c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f992 	bl	800ca88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c76a:	e170      	b.n	800ca4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c76c:	bf00      	nop
    return;
 800c76e:	e16e      	b.n	800ca4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c774:	2b01      	cmp	r3, #1
 800c776:	f040 814a 	bne.w	800ca0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c77a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c77e:	f003 0310 	and.w	r3, r3, #16
 800c782:	2b00      	cmp	r3, #0
 800c784:	f000 8143 	beq.w	800ca0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c78c:	f003 0310 	and.w	r3, r3, #16
 800c790:	2b00      	cmp	r3, #0
 800c792:	f000 813c 	beq.w	800ca0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c796:	2300      	movs	r3, #0
 800c798:	60bb      	str	r3, [r7, #8]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	60bb      	str	r3, [r7, #8]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	60bb      	str	r3, [r7, #8]
 800c7aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	695b      	ldr	r3, [r3, #20]
 800c7b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7b6:	2b40      	cmp	r3, #64	; 0x40
 800c7b8:	f040 80b4 	bne.w	800c924 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c7c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f000 8140 	beq.w	800ca52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c7d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	f080 8139 	bcs.w	800ca52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c7e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ec:	69db      	ldr	r3, [r3, #28]
 800c7ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7f2:	f000 8088 	beq.w	800c906 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	330c      	adds	r3, #12
 800c7fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c800:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c804:	e853 3f00 	ldrex	r3, [r3]
 800c808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c80c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	330c      	adds	r3, #12
 800c81e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c822:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c826:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c82e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c832:	e841 2300 	strex	r3, r2, [r1]
 800c836:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c83a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1d9      	bne.n	800c7f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	3314      	adds	r3, #20
 800c848:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c84c:	e853 3f00 	ldrex	r3, [r3]
 800c850:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c854:	f023 0301 	bic.w	r3, r3, #1
 800c858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	3314      	adds	r3, #20
 800c862:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c866:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c86a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c86e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c872:	e841 2300 	strex	r3, r2, [r1]
 800c876:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c878:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1e1      	bne.n	800c842 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	3314      	adds	r3, #20
 800c884:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c888:	e853 3f00 	ldrex	r3, [r3]
 800c88c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c88e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	3314      	adds	r3, #20
 800c89e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c8a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c8a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c8a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c8aa:	e841 2300 	strex	r3, r2, [r1]
 800c8ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c8b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d1e3      	bne.n	800c87e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2220      	movs	r2, #32
 800c8ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	330c      	adds	r3, #12
 800c8ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8ce:	e853 3f00 	ldrex	r3, [r3]
 800c8d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c8d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8d6:	f023 0310 	bic.w	r3, r3, #16
 800c8da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	330c      	adds	r3, #12
 800c8e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c8e8:	65ba      	str	r2, [r7, #88]	; 0x58
 800c8ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c8ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8f0:	e841 2300 	strex	r3, r2, [r1]
 800c8f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c8f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1e3      	bne.n	800c8c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c900:	4618      	mov	r0, r3
 800c902:	f7fa fc2d 	bl	8007160 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c90e:	b29b      	uxth	r3, r3
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	b29b      	uxth	r3, r3
 800c914:	4619      	mov	r1, r3
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 f8c0 	bl	800ca9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c91c:	e099      	b.n	800ca52 <HAL_UART_IRQHandler+0x50e>
 800c91e:	bf00      	nop
 800c920:	0800d0f7 	.word	0x0800d0f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c938:	b29b      	uxth	r3, r3
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	f000 808b 	beq.w	800ca56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c944:	2b00      	cmp	r3, #0
 800c946:	f000 8086 	beq.w	800ca56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	330c      	adds	r3, #12
 800c950:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c954:	e853 3f00 	ldrex	r3, [r3]
 800c958:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c95c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c960:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	330c      	adds	r3, #12
 800c96a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c96e:	647a      	str	r2, [r7, #68]	; 0x44
 800c970:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c972:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c976:	e841 2300 	strex	r3, r2, [r1]
 800c97a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1e3      	bne.n	800c94a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3314      	adds	r3, #20
 800c988:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98c:	e853 3f00 	ldrex	r3, [r3]
 800c990:	623b      	str	r3, [r7, #32]
   return(result);
 800c992:	6a3b      	ldr	r3, [r7, #32]
 800c994:	f023 0301 	bic.w	r3, r3, #1
 800c998:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	3314      	adds	r3, #20
 800c9a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c9a6:	633a      	str	r2, [r7, #48]	; 0x30
 800c9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9ae:	e841 2300 	strex	r3, r2, [r1]
 800c9b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1e3      	bne.n	800c982 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2220      	movs	r2, #32
 800c9be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	330c      	adds	r3, #12
 800c9ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	e853 3f00 	ldrex	r3, [r3]
 800c9d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f023 0310 	bic.w	r3, r3, #16
 800c9de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	330c      	adds	r3, #12
 800c9e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c9ec:	61fa      	str	r2, [r7, #28]
 800c9ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f0:	69b9      	ldr	r1, [r7, #24]
 800c9f2:	69fa      	ldr	r2, [r7, #28]
 800c9f4:	e841 2300 	strex	r3, r2, [r1]
 800c9f8:	617b      	str	r3, [r7, #20]
   return(result);
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1e3      	bne.n	800c9c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca04:	4619      	mov	r1, r3
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 f848 	bl	800ca9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ca0c:	e023      	b.n	800ca56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ca0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d009      	beq.n	800ca2e <HAL_UART_IRQHandler+0x4ea>
 800ca1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d003      	beq.n	800ca2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 fb79 	bl	800d11e <UART_Transmit_IT>
    return;
 800ca2c:	e014      	b.n	800ca58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ca2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00e      	beq.n	800ca58 <HAL_UART_IRQHandler+0x514>
 800ca3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d008      	beq.n	800ca58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 fbb9 	bl	800d1be <UART_EndTransmit_IT>
    return;
 800ca4c:	e004      	b.n	800ca58 <HAL_UART_IRQHandler+0x514>
    return;
 800ca4e:	bf00      	nop
 800ca50:	e002      	b.n	800ca58 <HAL_UART_IRQHandler+0x514>
      return;
 800ca52:	bf00      	nop
 800ca54:	e000      	b.n	800ca58 <HAL_UART_IRQHandler+0x514>
      return;
 800ca56:	bf00      	nop
  }
}
 800ca58:	37e8      	adds	r7, #232	; 0xe8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop

0800ca60 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ca68:	bf00      	nop
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ca7c:	bf00      	nop
 800ca7e:	370c      	adds	r7, #12
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ca90:	bf00      	nop
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	460b      	mov	r3, r1
 800caa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800caa8:	bf00      	nop
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b090      	sub	sp, #64	; 0x40
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d137      	bne.n	800cb40 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800cad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cad2:	2200      	movs	r2, #0
 800cad4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	3314      	adds	r3, #20
 800cadc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae0:	e853 3f00 	ldrex	r3, [r3]
 800cae4:	623b      	str	r3, [r7, #32]
   return(result);
 800cae6:	6a3b      	ldr	r3, [r7, #32]
 800cae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800caec:	63bb      	str	r3, [r7, #56]	; 0x38
 800caee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3314      	adds	r3, #20
 800caf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caf6:	633a      	str	r2, [r7, #48]	; 0x30
 800caf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cafa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cafc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cafe:	e841 2300 	strex	r3, r2, [r1]
 800cb02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1e5      	bne.n	800cad6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	330c      	adds	r3, #12
 800cb10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	e853 3f00 	ldrex	r3, [r3]
 800cb18:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb20:	637b      	str	r3, [r7, #52]	; 0x34
 800cb22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	330c      	adds	r3, #12
 800cb28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb2a:	61fa      	str	r2, [r7, #28]
 800cb2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb2e:	69b9      	ldr	r1, [r7, #24]
 800cb30:	69fa      	ldr	r2, [r7, #28]
 800cb32:	e841 2300 	strex	r3, r2, [r1]
 800cb36:	617b      	str	r3, [r7, #20]
   return(result);
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1e5      	bne.n	800cb0a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cb3e:	e002      	b.n	800cb46 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800cb40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cb42:	f7f7 fb27 	bl	8004194 <HAL_UART_TxCpltCallback>
}
 800cb46:	bf00      	nop
 800cb48:	3740      	adds	r7, #64	; 0x40
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b084      	sub	sp, #16
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cb5c:	68f8      	ldr	r0, [r7, #12]
 800cb5e:	f7ff ff7f 	bl	800ca60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb62:	bf00      	nop
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b09c      	sub	sp, #112	; 0x70
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb76:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d172      	bne.n	800cc6c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800cb86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb88:	2200      	movs	r2, #0
 800cb8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	330c      	adds	r3, #12
 800cb92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb96:	e853 3f00 	ldrex	r3, [r3]
 800cb9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cb9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cba2:	66bb      	str	r3, [r7, #104]	; 0x68
 800cba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	330c      	adds	r3, #12
 800cbaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cbac:	65ba      	str	r2, [r7, #88]	; 0x58
 800cbae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cbb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cbb4:	e841 2300 	strex	r3, r2, [r1]
 800cbb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cbba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d1e5      	bne.n	800cb8c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	3314      	adds	r3, #20
 800cbc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbca:	e853 3f00 	ldrex	r3, [r3]
 800cbce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cbd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd2:	f023 0301 	bic.w	r3, r3, #1
 800cbd6:	667b      	str	r3, [r7, #100]	; 0x64
 800cbd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	3314      	adds	r3, #20
 800cbde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cbe0:	647a      	str	r2, [r7, #68]	; 0x44
 800cbe2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cbe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cbe8:	e841 2300 	strex	r3, r2, [r1]
 800cbec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cbee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d1e5      	bne.n	800cbc0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	3314      	adds	r3, #20
 800cbfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfe:	e853 3f00 	ldrex	r3, [r3]
 800cc02:	623b      	str	r3, [r7, #32]
   return(result);
 800cc04:	6a3b      	ldr	r3, [r7, #32]
 800cc06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc0a:	663b      	str	r3, [r7, #96]	; 0x60
 800cc0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	3314      	adds	r3, #20
 800cc12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc14:	633a      	str	r2, [r7, #48]	; 0x30
 800cc16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc1c:	e841 2300 	strex	r3, r2, [r1]
 800cc20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d1e5      	bne.n	800cbf4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cc28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc2a:	2220      	movs	r2, #32
 800cc2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d119      	bne.n	800cc6c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	330c      	adds	r3, #12
 800cc3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	e853 3f00 	ldrex	r3, [r3]
 800cc46:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f023 0310 	bic.w	r3, r3, #16
 800cc4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	330c      	adds	r3, #12
 800cc56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc58:	61fa      	str	r2, [r7, #28]
 800cc5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc5c:	69b9      	ldr	r1, [r7, #24]
 800cc5e:	69fa      	ldr	r2, [r7, #28]
 800cc60:	e841 2300 	strex	r3, r2, [r1]
 800cc64:	617b      	str	r3, [r7, #20]
   return(result);
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1e5      	bne.n	800cc38 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d106      	bne.n	800cc82 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cc78:	4619      	mov	r1, r3
 800cc7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cc7c:	f7ff ff0e 	bl	800ca9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc80:	e002      	b.n	800cc88 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800cc82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cc84:	f7f7 fa6c 	bl	8004160 <HAL_UART_RxCpltCallback>
}
 800cc88:	bf00      	nop
 800cc8a:	3770      	adds	r7, #112	; 0x70
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc9c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d108      	bne.n	800ccb8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ccaa:	085b      	lsrs	r3, r3, #1
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	4619      	mov	r1, r3
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f7ff fef3 	bl	800ca9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ccb6:	e002      	b.n	800ccbe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f7ff fedb 	bl	800ca74 <HAL_UART_RxHalfCpltCallback>
}
 800ccbe:	bf00      	nop
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b084      	sub	sp, #16
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	695b      	ldr	r3, [r3, #20]
 800ccde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cce2:	2b80      	cmp	r3, #128	; 0x80
 800cce4:	bf0c      	ite	eq
 800cce6:	2301      	moveq	r3, #1
 800cce8:	2300      	movne	r3, #0
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	2b21      	cmp	r3, #33	; 0x21
 800ccf8:	d108      	bne.n	800cd0c <UART_DMAError+0x46>
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d005      	beq.n	800cd0c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	2200      	movs	r2, #0
 800cd04:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800cd06:	68b8      	ldr	r0, [r7, #8]
 800cd08:	f000 f96a 	bl	800cfe0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	695b      	ldr	r3, [r3, #20]
 800cd12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd16:	2b40      	cmp	r3, #64	; 0x40
 800cd18:	bf0c      	ite	eq
 800cd1a:	2301      	moveq	r3, #1
 800cd1c:	2300      	movne	r3, #0
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	2b22      	cmp	r3, #34	; 0x22
 800cd2c:	d108      	bne.n	800cd40 <UART_DMAError+0x7a>
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d005      	beq.n	800cd40 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	2200      	movs	r2, #0
 800cd38:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800cd3a:	68b8      	ldr	r0, [r7, #8]
 800cd3c:	f000 f978 	bl	800d030 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd44:	f043 0210 	orr.w	r2, r3, #16
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd4c:	68b8      	ldr	r0, [r7, #8]
 800cd4e:	f7ff fe9b 	bl	800ca88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd52:	bf00      	nop
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b090      	sub	sp, #64	; 0x40
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	60b9      	str	r1, [r7, #8]
 800cd64:	603b      	str	r3, [r7, #0]
 800cd66:	4613      	mov	r3, r2
 800cd68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd6a:	e050      	b.n	800ce0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd72:	d04c      	beq.n	800ce0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cd74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d007      	beq.n	800cd8a <UART_WaitOnFlagUntilTimeout+0x30>
 800cd7a:	f7f9 ffd9 	bl	8006d30 <HAL_GetTick>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d241      	bcs.n	800ce0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	330c      	adds	r3, #12
 800cd90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd94:	e853 3f00 	ldrex	r3, [r3]
 800cd98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cda0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	330c      	adds	r3, #12
 800cda8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cdaa:	637a      	str	r2, [r7, #52]	; 0x34
 800cdac:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cdb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdb2:	e841 2300 	strex	r3, r2, [r1]
 800cdb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1e5      	bne.n	800cd8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	3314      	adds	r3, #20
 800cdc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	e853 3f00 	ldrex	r3, [r3]
 800cdcc:	613b      	str	r3, [r7, #16]
   return(result);
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	f023 0301 	bic.w	r3, r3, #1
 800cdd4:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	3314      	adds	r3, #20
 800cddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdde:	623a      	str	r2, [r7, #32]
 800cde0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde2:	69f9      	ldr	r1, [r7, #28]
 800cde4:	6a3a      	ldr	r2, [r7, #32]
 800cde6:	e841 2300 	strex	r3, r2, [r1]
 800cdea:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d1e5      	bne.n	800cdbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2220      	movs	r2, #32
 800cdf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2220      	movs	r2, #32
 800cdfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2200      	movs	r2, #0
 800ce06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ce0a:	2303      	movs	r3, #3
 800ce0c:	e00f      	b.n	800ce2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	4013      	ands	r3, r2
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	bf0c      	ite	eq
 800ce1e:	2301      	moveq	r3, #1
 800ce20:	2300      	movne	r3, #0
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	461a      	mov	r2, r3
 800ce26:	79fb      	ldrb	r3, [r7, #7]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d09f      	beq.n	800cd6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3740      	adds	r7, #64	; 0x40
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce36:	b480      	push	{r7}
 800ce38:	b085      	sub	sp, #20
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	60f8      	str	r0, [r7, #12]
 800ce3e:	60b9      	str	r1, [r7, #8]
 800ce40:	4613      	mov	r3, r2
 800ce42:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	88fa      	ldrh	r2, [r7, #6]
 800ce4e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	88fa      	ldrh	r2, [r7, #6]
 800ce54:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2222      	movs	r2, #34	; 0x22
 800ce60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68da      	ldr	r2, [r3, #12]
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce7a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	695a      	ldr	r2, [r3, #20]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f042 0201 	orr.w	r2, r2, #1
 800ce8a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	68da      	ldr	r2, [r3, #12]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f042 0220 	orr.w	r2, r2, #32
 800ce9a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ce9c:	2300      	movs	r3, #0
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3714      	adds	r7, #20
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr
	...

0800ceac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b098      	sub	sp, #96	; 0x60
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	4613      	mov	r3, r2
 800ceb8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ceba:	68ba      	ldr	r2, [r7, #8]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	88fa      	ldrh	r2, [r7, #6]
 800cec4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2200      	movs	r2, #0
 800ceca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2222      	movs	r2, #34	; 0x22
 800ced0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced8:	4a3e      	ldr	r2, [pc, #248]	; (800cfd4 <UART_Start_Receive_DMA+0x128>)
 800ceda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee0:	4a3d      	ldr	r2, [pc, #244]	; (800cfd8 <UART_Start_Receive_DMA+0x12c>)
 800cee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee8:	4a3c      	ldr	r2, [pc, #240]	; (800cfdc <UART_Start_Receive_DMA+0x130>)
 800ceea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef0:	2200      	movs	r2, #0
 800cef2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800cef4:	f107 0308 	add.w	r3, r7, #8
 800cef8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	3304      	adds	r3, #4
 800cf04:	4619      	mov	r1, r3
 800cf06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	88fb      	ldrh	r3, [r7, #6]
 800cf0c:	f7fa f8d0 	bl	80070b0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800cf10:	2300      	movs	r3, #0
 800cf12:	613b      	str	r3, [r7, #16]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	613b      	str	r3, [r7, #16]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	613b      	str	r3, [r7, #16]
 800cf24:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	330c      	adds	r3, #12
 800cf34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf38:	e853 3f00 	ldrex	r3, [r3]
 800cf3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cf3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf44:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	330c      	adds	r3, #12
 800cf4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf4e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cf50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cf54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf56:	e841 2300 	strex	r3, r2, [r1]
 800cf5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cf5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d1e5      	bne.n	800cf2e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	3314      	adds	r3, #20
 800cf68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6c:	e853 3f00 	ldrex	r3, [r3]
 800cf70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf74:	f043 0301 	orr.w	r3, r3, #1
 800cf78:	657b      	str	r3, [r7, #84]	; 0x54
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	3314      	adds	r3, #20
 800cf80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf82:	63ba      	str	r2, [r7, #56]	; 0x38
 800cf84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf8a:	e841 2300 	strex	r3, r2, [r1]
 800cf8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cf90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d1e5      	bne.n	800cf62 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	3314      	adds	r3, #20
 800cf9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	e853 3f00 	ldrex	r3, [r3]
 800cfa4:	617b      	str	r3, [r7, #20]
   return(result);
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfac:	653b      	str	r3, [r7, #80]	; 0x50
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	3314      	adds	r3, #20
 800cfb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cfb6:	627a      	str	r2, [r7, #36]	; 0x24
 800cfb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfba:	6a39      	ldr	r1, [r7, #32]
 800cfbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfbe:	e841 2300 	strex	r3, r2, [r1]
 800cfc2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1e5      	bne.n	800cf96 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800cfca:	2300      	movs	r3, #0
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3760      	adds	r7, #96	; 0x60
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	0800cb6b 	.word	0x0800cb6b
 800cfd8:	0800cc91 	.word	0x0800cc91
 800cfdc:	0800ccc7 	.word	0x0800ccc7

0800cfe0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b089      	sub	sp, #36	; 0x24
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	330c      	adds	r3, #12
 800cfee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	e853 3f00 	ldrex	r3, [r3]
 800cff6:	60bb      	str	r3, [r7, #8]
   return(result);
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cffe:	61fb      	str	r3, [r7, #28]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	330c      	adds	r3, #12
 800d006:	69fa      	ldr	r2, [r7, #28]
 800d008:	61ba      	str	r2, [r7, #24]
 800d00a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d00c:	6979      	ldr	r1, [r7, #20]
 800d00e:	69ba      	ldr	r2, [r7, #24]
 800d010:	e841 2300 	strex	r3, r2, [r1]
 800d014:	613b      	str	r3, [r7, #16]
   return(result);
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d1e5      	bne.n	800cfe8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2220      	movs	r2, #32
 800d020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800d024:	bf00      	nop
 800d026:	3724      	adds	r7, #36	; 0x24
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr

0800d030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d030:	b480      	push	{r7}
 800d032:	b095      	sub	sp, #84	; 0x54
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	330c      	adds	r3, #12
 800d03e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d042:	e853 3f00 	ldrex	r3, [r3]
 800d046:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d04e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	330c      	adds	r3, #12
 800d056:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d058:	643a      	str	r2, [r7, #64]	; 0x40
 800d05a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d05c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d05e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d060:	e841 2300 	strex	r3, r2, [r1]
 800d064:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d1e5      	bne.n	800d038 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	3314      	adds	r3, #20
 800d072:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d074:	6a3b      	ldr	r3, [r7, #32]
 800d076:	e853 3f00 	ldrex	r3, [r3]
 800d07a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	f023 0301 	bic.w	r3, r3, #1
 800d082:	64bb      	str	r3, [r7, #72]	; 0x48
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	3314      	adds	r3, #20
 800d08a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d08c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d08e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d094:	e841 2300 	strex	r3, r2, [r1]
 800d098:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d1e5      	bne.n	800d06c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d119      	bne.n	800d0dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	330c      	adds	r3, #12
 800d0ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	e853 3f00 	ldrex	r3, [r3]
 800d0b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	f023 0310 	bic.w	r3, r3, #16
 800d0be:	647b      	str	r3, [r7, #68]	; 0x44
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	330c      	adds	r3, #12
 800d0c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0c8:	61ba      	str	r2, [r7, #24]
 800d0ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0cc:	6979      	ldr	r1, [r7, #20]
 800d0ce:	69ba      	ldr	r2, [r7, #24]
 800d0d0:	e841 2300 	strex	r3, r2, [r1]
 800d0d4:	613b      	str	r3, [r7, #16]
   return(result);
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d1e5      	bne.n	800d0a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2220      	movs	r2, #32
 800d0e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d0ea:	bf00      	nop
 800d0ec:	3754      	adds	r7, #84	; 0x54
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b084      	sub	sp, #16
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d102:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2200      	movs	r2, #0
 800d108:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2200      	movs	r2, #0
 800d10e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f7ff fcb9 	bl	800ca88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d116:	bf00      	nop
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d11e:	b480      	push	{r7}
 800d120:	b085      	sub	sp, #20
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	2b21      	cmp	r3, #33	; 0x21
 800d130:	d13e      	bne.n	800d1b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d13a:	d114      	bne.n	800d166 <UART_Transmit_IT+0x48>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	691b      	ldr	r3, [r3, #16]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d110      	bne.n	800d166 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6a1b      	ldr	r3, [r3, #32]
 800d148:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	881b      	ldrh	r3, [r3, #0]
 800d14e:	461a      	mov	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d158:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a1b      	ldr	r3, [r3, #32]
 800d15e:	1c9a      	adds	r2, r3, #2
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	621a      	str	r2, [r3, #32]
 800d164:	e008      	b.n	800d178 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a1b      	ldr	r3, [r3, #32]
 800d16a:	1c59      	adds	r1, r3, #1
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	6211      	str	r1, [r2, #32]
 800d170:	781a      	ldrb	r2, [r3, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	3b01      	subs	r3, #1
 800d180:	b29b      	uxth	r3, r3
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	4619      	mov	r1, r3
 800d186:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10f      	bne.n	800d1ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	68da      	ldr	r2, [r3, #12]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d19a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	68da      	ldr	r2, [r3, #12]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	e000      	b.n	800d1b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d1b0:	2302      	movs	r3, #2
  }
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3714      	adds	r7, #20
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr

0800d1be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b082      	sub	sp, #8
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	68da      	ldr	r2, [r3, #12]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2220      	movs	r2, #32
 800d1da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7f6 ffd8 	bl	8004194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d1e4:	2300      	movs	r3, #0
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3708      	adds	r7, #8
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b08c      	sub	sp, #48	; 0x30
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	2b22      	cmp	r3, #34	; 0x22
 800d200:	f040 80ab 	bne.w	800d35a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d20c:	d117      	bne.n	800d23e <UART_Receive_IT+0x50>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	691b      	ldr	r3, [r3, #16]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d113      	bne.n	800d23e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d216:	2300      	movs	r3, #0
 800d218:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d21e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	b29b      	uxth	r3, r3
 800d228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d22c:	b29a      	uxth	r2, r3
 800d22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d230:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d236:	1c9a      	adds	r2, r3, #2
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	629a      	str	r2, [r3, #40]	; 0x28
 800d23c:	e026      	b.n	800d28c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d242:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d244:	2300      	movs	r3, #0
 800d246:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d250:	d007      	beq.n	800d262 <UART_Receive_IT+0x74>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d10a      	bne.n	800d270 <UART_Receive_IT+0x82>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d106      	bne.n	800d270 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	b2da      	uxtb	r2, r3
 800d26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26c:	701a      	strb	r2, [r3, #0]
 800d26e:	e008      	b.n	800d282 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	b2db      	uxtb	r3, r3
 800d278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d27c:	b2da      	uxtb	r2, r3
 800d27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d280:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d286:	1c5a      	adds	r2, r3, #1
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d290:	b29b      	uxth	r3, r3
 800d292:	3b01      	subs	r3, #1
 800d294:	b29b      	uxth	r3, r3
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	4619      	mov	r1, r3
 800d29a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d15a      	bne.n	800d356 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	68da      	ldr	r2, [r3, #12]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f022 0220 	bic.w	r2, r2, #32
 800d2ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	68da      	ldr	r2, [r3, #12]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d2be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	695a      	ldr	r2, [r3, #20]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f022 0201 	bic.w	r2, r2, #1
 800d2ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2220      	movs	r2, #32
 800d2d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d135      	bne.n	800d34c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	330c      	adds	r3, #12
 800d2ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	e853 3f00 	ldrex	r3, [r3]
 800d2f4:	613b      	str	r3, [r7, #16]
   return(result);
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	f023 0310 	bic.w	r3, r3, #16
 800d2fc:	627b      	str	r3, [r7, #36]	; 0x24
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	330c      	adds	r3, #12
 800d304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d306:	623a      	str	r2, [r7, #32]
 800d308:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d30a:	69f9      	ldr	r1, [r7, #28]
 800d30c:	6a3a      	ldr	r2, [r7, #32]
 800d30e:	e841 2300 	strex	r3, r2, [r1]
 800d312:	61bb      	str	r3, [r7, #24]
   return(result);
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d1e5      	bne.n	800d2e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f003 0310 	and.w	r3, r3, #16
 800d324:	2b10      	cmp	r3, #16
 800d326:	d10a      	bne.n	800d33e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d328:	2300      	movs	r3, #0
 800d32a:	60fb      	str	r3, [r7, #12]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	60fb      	str	r3, [r7, #12]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	60fb      	str	r3, [r7, #12]
 800d33c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d342:	4619      	mov	r1, r3
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff fba9 	bl	800ca9c <HAL_UARTEx_RxEventCallback>
 800d34a:	e002      	b.n	800d352 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f7f6 ff07 	bl	8004160 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d352:	2300      	movs	r3, #0
 800d354:	e002      	b.n	800d35c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d356:	2300      	movs	r3, #0
 800d358:	e000      	b.n	800d35c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d35a:	2302      	movs	r3, #2
  }
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3730      	adds	r7, #48	; 0x30
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d368:	b09f      	sub	sp, #124	; 0x7c
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d36e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	691b      	ldr	r3, [r3, #16]
 800d374:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d37a:	68d9      	ldr	r1, [r3, #12]
 800d37c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	ea40 0301 	orr.w	r3, r0, r1
 800d384:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d388:	689a      	ldr	r2, [r3, #8]
 800d38a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	431a      	orrs	r2, r3
 800d390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d392:	695b      	ldr	r3, [r3, #20]
 800d394:	431a      	orrs	r2, r3
 800d396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d398:	69db      	ldr	r3, [r3, #28]
 800d39a:	4313      	orrs	r3, r2
 800d39c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800d39e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d3a8:	f021 010c 	bic.w	r1, r1, #12
 800d3ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3b2:	430b      	orrs	r3, r1
 800d3b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d3b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	695b      	ldr	r3, [r3, #20]
 800d3bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d3c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3c2:	6999      	ldr	r1, [r3, #24]
 800d3c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	ea40 0301 	orr.w	r3, r0, r1
 800d3cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d3ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	4bc5      	ldr	r3, [pc, #788]	; (800d6e8 <UART_SetConfig+0x384>)
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d004      	beq.n	800d3e2 <UART_SetConfig+0x7e>
 800d3d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	4bc3      	ldr	r3, [pc, #780]	; (800d6ec <UART_SetConfig+0x388>)
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d103      	bne.n	800d3ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d3e2:	f7fc fd43 	bl	8009e6c <HAL_RCC_GetPCLK2Freq>
 800d3e6:	6778      	str	r0, [r7, #116]	; 0x74
 800d3e8:	e002      	b.n	800d3f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d3ea:	f7fc fd2b 	bl	8009e44 <HAL_RCC_GetPCLK1Freq>
 800d3ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d3f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3f2:	69db      	ldr	r3, [r3, #28]
 800d3f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3f8:	f040 80b6 	bne.w	800d568 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d3fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3fe:	461c      	mov	r4, r3
 800d400:	f04f 0500 	mov.w	r5, #0
 800d404:	4622      	mov	r2, r4
 800d406:	462b      	mov	r3, r5
 800d408:	1891      	adds	r1, r2, r2
 800d40a:	6439      	str	r1, [r7, #64]	; 0x40
 800d40c:	415b      	adcs	r3, r3
 800d40e:	647b      	str	r3, [r7, #68]	; 0x44
 800d410:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d414:	1912      	adds	r2, r2, r4
 800d416:	eb45 0303 	adc.w	r3, r5, r3
 800d41a:	f04f 0000 	mov.w	r0, #0
 800d41e:	f04f 0100 	mov.w	r1, #0
 800d422:	00d9      	lsls	r1, r3, #3
 800d424:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d428:	00d0      	lsls	r0, r2, #3
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	1911      	adds	r1, r2, r4
 800d430:	6639      	str	r1, [r7, #96]	; 0x60
 800d432:	416b      	adcs	r3, r5
 800d434:	667b      	str	r3, [r7, #100]	; 0x64
 800d436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	461a      	mov	r2, r3
 800d43c:	f04f 0300 	mov.w	r3, #0
 800d440:	1891      	adds	r1, r2, r2
 800d442:	63b9      	str	r1, [r7, #56]	; 0x38
 800d444:	415b      	adcs	r3, r3
 800d446:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d448:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d44c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d450:	f7f3 fba2 	bl	8000b98 <__aeabi_uldivmod>
 800d454:	4602      	mov	r2, r0
 800d456:	460b      	mov	r3, r1
 800d458:	4ba5      	ldr	r3, [pc, #660]	; (800d6f0 <UART_SetConfig+0x38c>)
 800d45a:	fba3 2302 	umull	r2, r3, r3, r2
 800d45e:	095b      	lsrs	r3, r3, #5
 800d460:	011e      	lsls	r6, r3, #4
 800d462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d464:	461c      	mov	r4, r3
 800d466:	f04f 0500 	mov.w	r5, #0
 800d46a:	4622      	mov	r2, r4
 800d46c:	462b      	mov	r3, r5
 800d46e:	1891      	adds	r1, r2, r2
 800d470:	6339      	str	r1, [r7, #48]	; 0x30
 800d472:	415b      	adcs	r3, r3
 800d474:	637b      	str	r3, [r7, #52]	; 0x34
 800d476:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d47a:	1912      	adds	r2, r2, r4
 800d47c:	eb45 0303 	adc.w	r3, r5, r3
 800d480:	f04f 0000 	mov.w	r0, #0
 800d484:	f04f 0100 	mov.w	r1, #0
 800d488:	00d9      	lsls	r1, r3, #3
 800d48a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d48e:	00d0      	lsls	r0, r2, #3
 800d490:	4602      	mov	r2, r0
 800d492:	460b      	mov	r3, r1
 800d494:	1911      	adds	r1, r2, r4
 800d496:	65b9      	str	r1, [r7, #88]	; 0x58
 800d498:	416b      	adcs	r3, r5
 800d49a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d49c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	f04f 0300 	mov.w	r3, #0
 800d4a6:	1891      	adds	r1, r2, r2
 800d4a8:	62b9      	str	r1, [r7, #40]	; 0x28
 800d4aa:	415b      	adcs	r3, r3
 800d4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d4b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d4b6:	f7f3 fb6f 	bl	8000b98 <__aeabi_uldivmod>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	460b      	mov	r3, r1
 800d4be:	4b8c      	ldr	r3, [pc, #560]	; (800d6f0 <UART_SetConfig+0x38c>)
 800d4c0:	fba3 1302 	umull	r1, r3, r3, r2
 800d4c4:	095b      	lsrs	r3, r3, #5
 800d4c6:	2164      	movs	r1, #100	; 0x64
 800d4c8:	fb01 f303 	mul.w	r3, r1, r3
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	00db      	lsls	r3, r3, #3
 800d4d0:	3332      	adds	r3, #50	; 0x32
 800d4d2:	4a87      	ldr	r2, [pc, #540]	; (800d6f0 <UART_SetConfig+0x38c>)
 800d4d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d4d8:	095b      	lsrs	r3, r3, #5
 800d4da:	005b      	lsls	r3, r3, #1
 800d4dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d4e0:	441e      	add	r6, r3
 800d4e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f04f 0100 	mov.w	r1, #0
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	1894      	adds	r4, r2, r2
 800d4f0:	623c      	str	r4, [r7, #32]
 800d4f2:	415b      	adcs	r3, r3
 800d4f4:	627b      	str	r3, [r7, #36]	; 0x24
 800d4f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d4fa:	1812      	adds	r2, r2, r0
 800d4fc:	eb41 0303 	adc.w	r3, r1, r3
 800d500:	f04f 0400 	mov.w	r4, #0
 800d504:	f04f 0500 	mov.w	r5, #0
 800d508:	00dd      	lsls	r5, r3, #3
 800d50a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d50e:	00d4      	lsls	r4, r2, #3
 800d510:	4622      	mov	r2, r4
 800d512:	462b      	mov	r3, r5
 800d514:	1814      	adds	r4, r2, r0
 800d516:	653c      	str	r4, [r7, #80]	; 0x50
 800d518:	414b      	adcs	r3, r1
 800d51a:	657b      	str	r3, [r7, #84]	; 0x54
 800d51c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	461a      	mov	r2, r3
 800d522:	f04f 0300 	mov.w	r3, #0
 800d526:	1891      	adds	r1, r2, r2
 800d528:	61b9      	str	r1, [r7, #24]
 800d52a:	415b      	adcs	r3, r3
 800d52c:	61fb      	str	r3, [r7, #28]
 800d52e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d532:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d536:	f7f3 fb2f 	bl	8000b98 <__aeabi_uldivmod>
 800d53a:	4602      	mov	r2, r0
 800d53c:	460b      	mov	r3, r1
 800d53e:	4b6c      	ldr	r3, [pc, #432]	; (800d6f0 <UART_SetConfig+0x38c>)
 800d540:	fba3 1302 	umull	r1, r3, r3, r2
 800d544:	095b      	lsrs	r3, r3, #5
 800d546:	2164      	movs	r1, #100	; 0x64
 800d548:	fb01 f303 	mul.w	r3, r1, r3
 800d54c:	1ad3      	subs	r3, r2, r3
 800d54e:	00db      	lsls	r3, r3, #3
 800d550:	3332      	adds	r3, #50	; 0x32
 800d552:	4a67      	ldr	r2, [pc, #412]	; (800d6f0 <UART_SetConfig+0x38c>)
 800d554:	fba2 2303 	umull	r2, r3, r2, r3
 800d558:	095b      	lsrs	r3, r3, #5
 800d55a:	f003 0207 	and.w	r2, r3, #7
 800d55e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4432      	add	r2, r6
 800d564:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d566:	e0b9      	b.n	800d6dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d56a:	461c      	mov	r4, r3
 800d56c:	f04f 0500 	mov.w	r5, #0
 800d570:	4622      	mov	r2, r4
 800d572:	462b      	mov	r3, r5
 800d574:	1891      	adds	r1, r2, r2
 800d576:	6139      	str	r1, [r7, #16]
 800d578:	415b      	adcs	r3, r3
 800d57a:	617b      	str	r3, [r7, #20]
 800d57c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d580:	1912      	adds	r2, r2, r4
 800d582:	eb45 0303 	adc.w	r3, r5, r3
 800d586:	f04f 0000 	mov.w	r0, #0
 800d58a:	f04f 0100 	mov.w	r1, #0
 800d58e:	00d9      	lsls	r1, r3, #3
 800d590:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d594:	00d0      	lsls	r0, r2, #3
 800d596:	4602      	mov	r2, r0
 800d598:	460b      	mov	r3, r1
 800d59a:	eb12 0804 	adds.w	r8, r2, r4
 800d59e:	eb43 0905 	adc.w	r9, r3, r5
 800d5a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f04f 0100 	mov.w	r1, #0
 800d5ac:	f04f 0200 	mov.w	r2, #0
 800d5b0:	f04f 0300 	mov.w	r3, #0
 800d5b4:	008b      	lsls	r3, r1, #2
 800d5b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d5ba:	0082      	lsls	r2, r0, #2
 800d5bc:	4640      	mov	r0, r8
 800d5be:	4649      	mov	r1, r9
 800d5c0:	f7f3 faea 	bl	8000b98 <__aeabi_uldivmod>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	4b49      	ldr	r3, [pc, #292]	; (800d6f0 <UART_SetConfig+0x38c>)
 800d5ca:	fba3 2302 	umull	r2, r3, r3, r2
 800d5ce:	095b      	lsrs	r3, r3, #5
 800d5d0:	011e      	lsls	r6, r3, #4
 800d5d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f04f 0100 	mov.w	r1, #0
 800d5da:	4602      	mov	r2, r0
 800d5dc:	460b      	mov	r3, r1
 800d5de:	1894      	adds	r4, r2, r2
 800d5e0:	60bc      	str	r4, [r7, #8]
 800d5e2:	415b      	adcs	r3, r3
 800d5e4:	60fb      	str	r3, [r7, #12]
 800d5e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d5ea:	1812      	adds	r2, r2, r0
 800d5ec:	eb41 0303 	adc.w	r3, r1, r3
 800d5f0:	f04f 0400 	mov.w	r4, #0
 800d5f4:	f04f 0500 	mov.w	r5, #0
 800d5f8:	00dd      	lsls	r5, r3, #3
 800d5fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d5fe:	00d4      	lsls	r4, r2, #3
 800d600:	4622      	mov	r2, r4
 800d602:	462b      	mov	r3, r5
 800d604:	1814      	adds	r4, r2, r0
 800d606:	64bc      	str	r4, [r7, #72]	; 0x48
 800d608:	414b      	adcs	r3, r1
 800d60a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d60c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	4618      	mov	r0, r3
 800d612:	f04f 0100 	mov.w	r1, #0
 800d616:	f04f 0200 	mov.w	r2, #0
 800d61a:	f04f 0300 	mov.w	r3, #0
 800d61e:	008b      	lsls	r3, r1, #2
 800d620:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d624:	0082      	lsls	r2, r0, #2
 800d626:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d62a:	f7f3 fab5 	bl	8000b98 <__aeabi_uldivmod>
 800d62e:	4602      	mov	r2, r0
 800d630:	460b      	mov	r3, r1
 800d632:	4b2f      	ldr	r3, [pc, #188]	; (800d6f0 <UART_SetConfig+0x38c>)
 800d634:	fba3 1302 	umull	r1, r3, r3, r2
 800d638:	095b      	lsrs	r3, r3, #5
 800d63a:	2164      	movs	r1, #100	; 0x64
 800d63c:	fb01 f303 	mul.w	r3, r1, r3
 800d640:	1ad3      	subs	r3, r2, r3
 800d642:	011b      	lsls	r3, r3, #4
 800d644:	3332      	adds	r3, #50	; 0x32
 800d646:	4a2a      	ldr	r2, [pc, #168]	; (800d6f0 <UART_SetConfig+0x38c>)
 800d648:	fba2 2303 	umull	r2, r3, r2, r3
 800d64c:	095b      	lsrs	r3, r3, #5
 800d64e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d652:	441e      	add	r6, r3
 800d654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d656:	4618      	mov	r0, r3
 800d658:	f04f 0100 	mov.w	r1, #0
 800d65c:	4602      	mov	r2, r0
 800d65e:	460b      	mov	r3, r1
 800d660:	1894      	adds	r4, r2, r2
 800d662:	603c      	str	r4, [r7, #0]
 800d664:	415b      	adcs	r3, r3
 800d666:	607b      	str	r3, [r7, #4]
 800d668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d66c:	1812      	adds	r2, r2, r0
 800d66e:	eb41 0303 	adc.w	r3, r1, r3
 800d672:	f04f 0400 	mov.w	r4, #0
 800d676:	f04f 0500 	mov.w	r5, #0
 800d67a:	00dd      	lsls	r5, r3, #3
 800d67c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d680:	00d4      	lsls	r4, r2, #3
 800d682:	4622      	mov	r2, r4
 800d684:	462b      	mov	r3, r5
 800d686:	eb12 0a00 	adds.w	sl, r2, r0
 800d68a:	eb43 0b01 	adc.w	fp, r3, r1
 800d68e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	4618      	mov	r0, r3
 800d694:	f04f 0100 	mov.w	r1, #0
 800d698:	f04f 0200 	mov.w	r2, #0
 800d69c:	f04f 0300 	mov.w	r3, #0
 800d6a0:	008b      	lsls	r3, r1, #2
 800d6a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d6a6:	0082      	lsls	r2, r0, #2
 800d6a8:	4650      	mov	r0, sl
 800d6aa:	4659      	mov	r1, fp
 800d6ac:	f7f3 fa74 	bl	8000b98 <__aeabi_uldivmod>
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	4b0e      	ldr	r3, [pc, #56]	; (800d6f0 <UART_SetConfig+0x38c>)
 800d6b6:	fba3 1302 	umull	r1, r3, r3, r2
 800d6ba:	095b      	lsrs	r3, r3, #5
 800d6bc:	2164      	movs	r1, #100	; 0x64
 800d6be:	fb01 f303 	mul.w	r3, r1, r3
 800d6c2:	1ad3      	subs	r3, r2, r3
 800d6c4:	011b      	lsls	r3, r3, #4
 800d6c6:	3332      	adds	r3, #50	; 0x32
 800d6c8:	4a09      	ldr	r2, [pc, #36]	; (800d6f0 <UART_SetConfig+0x38c>)
 800d6ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d6ce:	095b      	lsrs	r3, r3, #5
 800d6d0:	f003 020f 	and.w	r2, r3, #15
 800d6d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4432      	add	r2, r6
 800d6da:	609a      	str	r2, [r3, #8]
}
 800d6dc:	bf00      	nop
 800d6de:	377c      	adds	r7, #124	; 0x7c
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e6:	bf00      	nop
 800d6e8:	40011000 	.word	0x40011000
 800d6ec:	40011400 	.word	0x40011400
 800d6f0:	51eb851f 	.word	0x51eb851f

0800d6f4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d6f4:	b084      	sub	sp, #16
 800d6f6:	b480      	push	{r7}
 800d6f8:	b085      	sub	sp, #20
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
 800d6fe:	f107 001c 	add.w	r0, r7, #28
 800d702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d706:	2300      	movs	r3, #0
 800d708:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d70a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d70c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d70e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d712:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d714:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d716:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d71a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d71e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	4313      	orrs	r3, r2
 800d724:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d72e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d732:	68fa      	ldr	r2, [r7, #12]
 800d734:	431a      	orrs	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3714      	adds	r7, #20
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	b004      	add	sp, #16
 800d748:	4770      	bx	lr

0800d74a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d74a:	b480      	push	{r7}
 800d74c:	b083      	sub	sp, #12
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d758:	4618      	mov	r0, r3
 800d75a:	370c      	adds	r7, #12
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d778:	2300      	movs	r3, #0
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	370c      	adds	r7, #12
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr

0800d786 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d786:	b580      	push	{r7, lr}
 800d788:	b082      	sub	sp, #8
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2203      	movs	r2, #3
 800d792:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d794:	2002      	movs	r0, #2
 800d796:	f7f9 fad7 	bl	8006d48 <HAL_Delay>
  
  return HAL_OK;
 800d79a:	2300      	movs	r3, #0
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3708      	adds	r7, #8
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f003 0303 	and.w	r3, r3, #3
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d7de:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d7e4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d7ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d7ec:	68fa      	ldr	r2, [r7, #12]
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	68db      	ldr	r3, [r3, #12]
 800d7f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d7fa:	f023 030f 	bic.w	r3, r3, #15
 800d7fe:	68fa      	ldr	r2, [r7, #12]
 800d800:	431a      	orrs	r2, r3
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d806:	2300      	movs	r3, #0
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3714      	adds	r7, #20
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr

0800d814 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d814:	b480      	push	{r7}
 800d816:	b083      	sub	sp, #12
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	691b      	ldr	r3, [r3, #16]
 800d820:	b2db      	uxtb	r3, r3
}
 800d822:	4618      	mov	r0, r3
 800d824:	370c      	adds	r7, #12
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr

0800d82e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d82e:	b480      	push	{r7}
 800d830:	b085      	sub	sp, #20
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	3314      	adds	r3, #20
 800d83c:	461a      	mov	r2, r3
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	4413      	add	r3, r2
 800d842:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
}  
 800d848:	4618      	mov	r0, r3
 800d84a:	3714      	adds	r7, #20
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr

0800d854 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d854:	b480      	push	{r7}
 800d856:	b085      	sub	sp, #20
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d85e:	2300      	movs	r3, #0
 800d860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	685a      	ldr	r2, [r3, #4]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d87a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d880:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d886:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	4313      	orrs	r3, r2
 800d88c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d892:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	431a      	orrs	r2, r3
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d89e:	2300      	movs	r3, #0

}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3714      	adds	r7, #20
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b088      	sub	sp, #32
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d8ba:	2310      	movs	r3, #16
 800d8bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8be:	2340      	movs	r3, #64	; 0x40
 800d8c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8cc:	f107 0308 	add.w	r3, r7, #8
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f7ff ff74 	bl	800d7c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d8d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8dc:	2110      	movs	r1, #16
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 fa02 	bl	800dce8 <SDMMC_GetCmdResp1>
 800d8e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8e6:	69fb      	ldr	r3, [r7, #28]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3720      	adds	r7, #32
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b088      	sub	sp, #32
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d8fe:	2311      	movs	r3, #17
 800d900:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d902:	2340      	movs	r3, #64	; 0x40
 800d904:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d906:	2300      	movs	r3, #0
 800d908:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d90a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d90e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d910:	f107 0308 	add.w	r3, r7, #8
 800d914:	4619      	mov	r1, r3
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f7ff ff52 	bl	800d7c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d91c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d920:	2111      	movs	r1, #17
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 f9e0 	bl	800dce8 <SDMMC_GetCmdResp1>
 800d928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d92a:	69fb      	ldr	r3, [r7, #28]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3720      	adds	r7, #32
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b088      	sub	sp, #32
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d942:	2312      	movs	r3, #18
 800d944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d946:	2340      	movs	r3, #64	; 0x40
 800d948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d94a:	2300      	movs	r3, #0
 800d94c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d94e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d952:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d954:	f107 0308 	add.w	r3, r7, #8
 800d958:	4619      	mov	r1, r3
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7ff ff30 	bl	800d7c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d960:	f241 3288 	movw	r2, #5000	; 0x1388
 800d964:	2112      	movs	r1, #18
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 f9be 	bl	800dce8 <SDMMC_GetCmdResp1>
 800d96c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d96e:	69fb      	ldr	r3, [r7, #28]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3720      	adds	r7, #32
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b088      	sub	sp, #32
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d986:	2318      	movs	r3, #24
 800d988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d98a:	2340      	movs	r3, #64	; 0x40
 800d98c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d98e:	2300      	movs	r3, #0
 800d990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d996:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d998:	f107 0308 	add.w	r3, r7, #8
 800d99c:	4619      	mov	r1, r3
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7ff ff0e 	bl	800d7c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d9a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9a8:	2118      	movs	r1, #24
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f99c 	bl	800dce8 <SDMMC_GetCmdResp1>
 800d9b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9b2:	69fb      	ldr	r3, [r7, #28]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3720      	adds	r7, #32
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b088      	sub	sp, #32
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d9ca:	2319      	movs	r3, #25
 800d9cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d9ce:	2340      	movs	r3, #64	; 0x40
 800d9d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d9d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d9dc:	f107 0308 	add.w	r3, r7, #8
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f7ff feec 	bl	800d7c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d9e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9ec:	2119      	movs	r1, #25
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f000 f97a 	bl	800dce8 <SDMMC_GetCmdResp1>
 800d9f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9f6:	69fb      	ldr	r3, [r7, #28]
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3720      	adds	r7, #32
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b088      	sub	sp, #32
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800da08:	2300      	movs	r3, #0
 800da0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800da0c:	230c      	movs	r3, #12
 800da0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da10:	2340      	movs	r3, #64	; 0x40
 800da12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da14:	2300      	movs	r3, #0
 800da16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da1e:	f107 0308 	add.w	r3, r7, #8
 800da22:	4619      	mov	r1, r3
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f7ff fecb 	bl	800d7c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800da2a:	4a05      	ldr	r2, [pc, #20]	; (800da40 <SDMMC_CmdStopTransfer+0x40>)
 800da2c:	210c      	movs	r1, #12
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 f95a 	bl	800dce8 <SDMMC_GetCmdResp1>
 800da34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da36:	69fb      	ldr	r3, [r7, #28]
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3720      	adds	r7, #32
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	05f5e100 	.word	0x05f5e100

0800da44 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b08a      	sub	sp, #40	; 0x28
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800da54:	2307      	movs	r3, #7
 800da56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da58:	2340      	movs	r3, #64	; 0x40
 800da5a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da5c:	2300      	movs	r3, #0
 800da5e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da64:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da66:	f107 0310 	add.w	r3, r7, #16
 800da6a:	4619      	mov	r1, r3
 800da6c:	68f8      	ldr	r0, [r7, #12]
 800da6e:	f7ff fea7 	bl	800d7c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800da72:	f241 3288 	movw	r2, #5000	; 0x1388
 800da76:	2107      	movs	r1, #7
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	f000 f935 	bl	800dce8 <SDMMC_GetCmdResp1>
 800da7e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800da80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da82:	4618      	mov	r0, r3
 800da84:	3728      	adds	r7, #40	; 0x28
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b088      	sub	sp, #32
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800da92:	2300      	movs	r3, #0
 800da94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800da96:	2300      	movs	r3, #0
 800da98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800da9a:	2300      	movs	r3, #0
 800da9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da9e:	2300      	movs	r3, #0
 800daa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800daa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daa6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800daa8:	f107 0308 	add.w	r3, r7, #8
 800daac:	4619      	mov	r1, r3
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f7ff fe86 	bl	800d7c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 f8eb 	bl	800dc90 <SDMMC_GetCmdError>
 800daba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dabc:	69fb      	ldr	r3, [r7, #28]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3720      	adds	r7, #32
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b088      	sub	sp, #32
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dace:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dad4:	2308      	movs	r3, #8
 800dad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dad8:	2340      	movs	r3, #64	; 0x40
 800dada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dadc:	2300      	movs	r3, #0
 800dade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dae4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dae6:	f107 0308 	add.w	r3, r7, #8
 800daea:	4619      	mov	r1, r3
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7ff fe67 	bl	800d7c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 fae2 	bl	800e0bc <SDMMC_GetCmdResp7>
 800daf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dafa:	69fb      	ldr	r3, [r7, #28]
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3720      	adds	r7, #32
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b088      	sub	sp, #32
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800db12:	2337      	movs	r3, #55	; 0x37
 800db14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db16:	2340      	movs	r3, #64	; 0x40
 800db18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db1a:	2300      	movs	r3, #0
 800db1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db24:	f107 0308 	add.w	r3, r7, #8
 800db28:	4619      	mov	r1, r3
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f7ff fe48 	bl	800d7c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800db30:	f241 3288 	movw	r2, #5000	; 0x1388
 800db34:	2137      	movs	r1, #55	; 0x37
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 f8d6 	bl	800dce8 <SDMMC_GetCmdResp1>
 800db3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db3e:	69fb      	ldr	r3, [r7, #28]
}
 800db40:	4618      	mov	r0, r3
 800db42:	3720      	adds	r7, #32
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b088      	sub	sp, #32
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800db58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800db5e:	2329      	movs	r3, #41	; 0x29
 800db60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db62:	2340      	movs	r3, #64	; 0x40
 800db64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db66:	2300      	movs	r3, #0
 800db68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db70:	f107 0308 	add.w	r3, r7, #8
 800db74:	4619      	mov	r1, r3
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7ff fe22 	bl	800d7c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 f9e9 	bl	800df54 <SDMMC_GetCmdResp3>
 800db82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db84:	69fb      	ldr	r3, [r7, #28]
}
 800db86:	4618      	mov	r0, r3
 800db88:	3720      	adds	r7, #32
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}

0800db8e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800db8e:	b580      	push	{r7, lr}
 800db90:	b088      	sub	sp, #32
 800db92:	af00      	add	r7, sp, #0
 800db94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800db96:	2300      	movs	r3, #0
 800db98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800db9a:	2302      	movs	r3, #2
 800db9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800db9e:	23c0      	movs	r3, #192	; 0xc0
 800dba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dba2:	2300      	movs	r3, #0
 800dba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbac:	f107 0308 	add.w	r3, r7, #8
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f7ff fe04 	bl	800d7c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 f983 	bl	800dec4 <SDMMC_GetCmdResp2>
 800dbbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbc0:	69fb      	ldr	r3, [r7, #28]
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3720      	adds	r7, #32
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}

0800dbca <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	b088      	sub	sp, #32
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
 800dbd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800dbd8:	2309      	movs	r3, #9
 800dbda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800dbdc:	23c0      	movs	r3, #192	; 0xc0
 800dbde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dbe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbe8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbea:	f107 0308 	add.w	r3, r7, #8
 800dbee:	4619      	mov	r1, r3
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7ff fde5 	bl	800d7c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 f964 	bl	800dec4 <SDMMC_GetCmdResp2>
 800dbfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbfe:	69fb      	ldr	r3, [r7, #28]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3720      	adds	r7, #32
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b088      	sub	sp, #32
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dc12:	2300      	movs	r3, #0
 800dc14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dc16:	2303      	movs	r3, #3
 800dc18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc1a:	2340      	movs	r3, #64	; 0x40
 800dc1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc28:	f107 0308 	add.w	r3, r7, #8
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f7ff fdc6 	bl	800d7c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dc34:	683a      	ldr	r2, [r7, #0]
 800dc36:	2103      	movs	r1, #3
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 f9c9 	bl	800dfd0 <SDMMC_GetCmdResp6>
 800dc3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc40:	69fb      	ldr	r3, [r7, #28]
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3720      	adds	r7, #32
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}

0800dc4a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dc4a:	b580      	push	{r7, lr}
 800dc4c:	b088      	sub	sp, #32
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
 800dc52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dc58:	230d      	movs	r3, #13
 800dc5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc5c:	2340      	movs	r3, #64	; 0x40
 800dc5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc60:	2300      	movs	r3, #0
 800dc62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc6a:	f107 0308 	add.w	r3, r7, #8
 800dc6e:	4619      	mov	r1, r3
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7ff fda5 	bl	800d7c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800dc76:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc7a:	210d      	movs	r1, #13
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 f833 	bl	800dce8 <SDMMC_GetCmdResp1>
 800dc82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc84:	69fb      	ldr	r3, [r7, #28]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3720      	adds	r7, #32
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
	...

0800dc90 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b085      	sub	sp, #20
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc98:	4b11      	ldr	r3, [pc, #68]	; (800dce0 <SDMMC_GetCmdError+0x50>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a11      	ldr	r2, [pc, #68]	; (800dce4 <SDMMC_GetCmdError+0x54>)
 800dc9e:	fba2 2303 	umull	r2, r3, r2, r3
 800dca2:	0a5b      	lsrs	r3, r3, #9
 800dca4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dca8:	fb02 f303 	mul.w	r3, r2, r3
 800dcac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	1e5a      	subs	r2, r3, #1
 800dcb2:	60fa      	str	r2, [r7, #12]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d102      	bne.n	800dcbe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dcb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dcbc:	e009      	b.n	800dcd2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d0f1      	beq.n	800dcae <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	22c5      	movs	r2, #197	; 0xc5
 800dcce:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3714      	adds	r7, #20
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop
 800dce0:	20000018 	.word	0x20000018
 800dce4:	10624dd3 	.word	0x10624dd3

0800dce8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b088      	sub	sp, #32
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	607a      	str	r2, [r7, #4]
 800dcf4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dcf6:	4b70      	ldr	r3, [pc, #448]	; (800deb8 <SDMMC_GetCmdResp1+0x1d0>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4a70      	ldr	r2, [pc, #448]	; (800debc <SDMMC_GetCmdResp1+0x1d4>)
 800dcfc:	fba2 2303 	umull	r2, r3, r2, r3
 800dd00:	0a5a      	lsrs	r2, r3, #9
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	fb02 f303 	mul.w	r3, r2, r3
 800dd08:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	1e5a      	subs	r2, r3, #1
 800dd0e:	61fa      	str	r2, [r7, #28]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d102      	bne.n	800dd1a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd18:	e0c9      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd1e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d0ef      	beq.n	800dd0a <SDMMC_GetCmdResp1+0x22>
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d1ea      	bne.n	800dd0a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd38:	f003 0304 	and.w	r3, r3, #4
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d004      	beq.n	800dd4a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2204      	movs	r2, #4
 800dd44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd46:	2304      	movs	r3, #4
 800dd48:	e0b1      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd4e:	f003 0301 	and.w	r3, r3, #1
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d004      	beq.n	800dd60 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	e0a6      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	22c5      	movs	r2, #197	; 0xc5
 800dd64:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	f7ff fd54 	bl	800d814 <SDIO_GetCommandResponse>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	461a      	mov	r2, r3
 800dd70:	7afb      	ldrb	r3, [r7, #11]
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d001      	beq.n	800dd7a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd76:	2301      	movs	r3, #1
 800dd78:	e099      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dd7a:	2100      	movs	r1, #0
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f7ff fd56 	bl	800d82e <SDIO_GetResponse>
 800dd82:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dd84:	697a      	ldr	r2, [r7, #20]
 800dd86:	4b4e      	ldr	r3, [pc, #312]	; (800dec0 <SDMMC_GetCmdResp1+0x1d8>)
 800dd88:	4013      	ands	r3, r2
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d101      	bne.n	800dd92 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	e08d      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	da02      	bge.n	800dd9e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dd98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dd9c:	e087      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d001      	beq.n	800ddac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dda8:	2340      	movs	r3, #64	; 0x40
 800ddaa:	e080      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d001      	beq.n	800ddba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ddb6:	2380      	movs	r3, #128	; 0x80
 800ddb8:	e079      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d002      	beq.n	800ddca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ddc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ddc8:	e071      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d002      	beq.n	800ddda <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ddd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddd8:	e069      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d002      	beq.n	800ddea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dde4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dde8:	e061      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d002      	beq.n	800ddfa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ddf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ddf8:	e059      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de00:	2b00      	cmp	r3, #0
 800de02:	d002      	beq.n	800de0a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800de04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de08:	e051      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de10:	2b00      	cmp	r3, #0
 800de12:	d002      	beq.n	800de1a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800de14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800de18:	e049      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800de20:	2b00      	cmp	r3, #0
 800de22:	d002      	beq.n	800de2a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800de24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800de28:	e041      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de30:	2b00      	cmp	r3, #0
 800de32:	d002      	beq.n	800de3a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800de34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de38:	e039      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800de40:	2b00      	cmp	r3, #0
 800de42:	d002      	beq.n	800de4a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800de44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800de48:	e031      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de50:	2b00      	cmp	r3, #0
 800de52:	d002      	beq.n	800de5a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800de54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800de58:	e029      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de60:	2b00      	cmp	r3, #0
 800de62:	d002      	beq.n	800de6a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800de64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800de68:	e021      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de70:	2b00      	cmp	r3, #0
 800de72:	d002      	beq.n	800de7a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800de74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800de78:	e019      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de80:	2b00      	cmp	r3, #0
 800de82:	d002      	beq.n	800de8a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800de84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800de88:	e011      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de90:	2b00      	cmp	r3, #0
 800de92:	d002      	beq.n	800de9a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800de94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800de98:	e009      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	f003 0308 	and.w	r3, r3, #8
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d002      	beq.n	800deaa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dea4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dea8:	e001      	b.n	800deae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800deaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3720      	adds	r7, #32
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	20000018 	.word	0x20000018
 800debc:	10624dd3 	.word	0x10624dd3
 800dec0:	fdffe008 	.word	0xfdffe008

0800dec4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b085      	sub	sp, #20
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800decc:	4b1f      	ldr	r3, [pc, #124]	; (800df4c <SDMMC_GetCmdResp2+0x88>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a1f      	ldr	r2, [pc, #124]	; (800df50 <SDMMC_GetCmdResp2+0x8c>)
 800ded2:	fba2 2303 	umull	r2, r3, r2, r3
 800ded6:	0a5b      	lsrs	r3, r3, #9
 800ded8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dedc:	fb02 f303 	mul.w	r3, r2, r3
 800dee0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	1e5a      	subs	r2, r3, #1
 800dee6:	60fa      	str	r2, [r7, #12]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d102      	bne.n	800def2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800deec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800def0:	e026      	b.n	800df40 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800def6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800defe:	2b00      	cmp	r3, #0
 800df00:	d0ef      	beq.n	800dee2 <SDMMC_GetCmdResp2+0x1e>
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1ea      	bne.n	800dee2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df10:	f003 0304 	and.w	r3, r3, #4
 800df14:	2b00      	cmp	r3, #0
 800df16:	d004      	beq.n	800df22 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2204      	movs	r2, #4
 800df1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df1e:	2304      	movs	r3, #4
 800df20:	e00e      	b.n	800df40 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df26:	f003 0301 	and.w	r3, r3, #1
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d004      	beq.n	800df38 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2201      	movs	r2, #1
 800df32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df34:	2301      	movs	r3, #1
 800df36:	e003      	b.n	800df40 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	22c5      	movs	r2, #197	; 0xc5
 800df3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800df3e:	2300      	movs	r3, #0
}
 800df40:	4618      	mov	r0, r3
 800df42:	3714      	adds	r7, #20
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr
 800df4c:	20000018 	.word	0x20000018
 800df50:	10624dd3 	.word	0x10624dd3

0800df54 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800df54:	b480      	push	{r7}
 800df56:	b085      	sub	sp, #20
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df5c:	4b1a      	ldr	r3, [pc, #104]	; (800dfc8 <SDMMC_GetCmdResp3+0x74>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4a1a      	ldr	r2, [pc, #104]	; (800dfcc <SDMMC_GetCmdResp3+0x78>)
 800df62:	fba2 2303 	umull	r2, r3, r2, r3
 800df66:	0a5b      	lsrs	r3, r3, #9
 800df68:	f241 3288 	movw	r2, #5000	; 0x1388
 800df6c:	fb02 f303 	mul.w	r3, r2, r3
 800df70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	1e5a      	subs	r2, r3, #1
 800df76:	60fa      	str	r2, [r7, #12]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d102      	bne.n	800df82 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df80:	e01b      	b.n	800dfba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d0ef      	beq.n	800df72 <SDMMC_GetCmdResp3+0x1e>
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1ea      	bne.n	800df72 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfa0:	f003 0304 	and.w	r3, r3, #4
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d004      	beq.n	800dfb2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2204      	movs	r2, #4
 800dfac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dfae:	2304      	movs	r3, #4
 800dfb0:	e003      	b.n	800dfba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	22c5      	movs	r2, #197	; 0xc5
 800dfb6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dfb8:	2300      	movs	r3, #0
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3714      	adds	r7, #20
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop
 800dfc8:	20000018 	.word	0x20000018
 800dfcc:	10624dd3 	.word	0x10624dd3

0800dfd0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b088      	sub	sp, #32
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	607a      	str	r2, [r7, #4]
 800dfdc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dfde:	4b35      	ldr	r3, [pc, #212]	; (800e0b4 <SDMMC_GetCmdResp6+0xe4>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4a35      	ldr	r2, [pc, #212]	; (800e0b8 <SDMMC_GetCmdResp6+0xe8>)
 800dfe4:	fba2 2303 	umull	r2, r3, r2, r3
 800dfe8:	0a5b      	lsrs	r3, r3, #9
 800dfea:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfee:	fb02 f303 	mul.w	r3, r2, r3
 800dff2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	1e5a      	subs	r2, r3, #1
 800dff8:	61fa      	str	r2, [r7, #28]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d102      	bne.n	800e004 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dffe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e002:	e052      	b.n	800e0aa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e008:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e010:	2b00      	cmp	r3, #0
 800e012:	d0ef      	beq.n	800dff4 <SDMMC_GetCmdResp6+0x24>
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d1ea      	bne.n	800dff4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e022:	f003 0304 	and.w	r3, r3, #4
 800e026:	2b00      	cmp	r3, #0
 800e028:	d004      	beq.n	800e034 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	2204      	movs	r2, #4
 800e02e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e030:	2304      	movs	r3, #4
 800e032:	e03a      	b.n	800e0aa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e038:	f003 0301 	and.w	r3, r3, #1
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d004      	beq.n	800e04a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	2201      	movs	r2, #1
 800e044:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e046:	2301      	movs	r3, #1
 800e048:	e02f      	b.n	800e0aa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e04a:	68f8      	ldr	r0, [r7, #12]
 800e04c:	f7ff fbe2 	bl	800d814 <SDIO_GetCommandResponse>
 800e050:	4603      	mov	r3, r0
 800e052:	461a      	mov	r2, r3
 800e054:	7afb      	ldrb	r3, [r7, #11]
 800e056:	4293      	cmp	r3, r2
 800e058:	d001      	beq.n	800e05e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e05a:	2301      	movs	r3, #1
 800e05c:	e025      	b.n	800e0aa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	22c5      	movs	r2, #197	; 0xc5
 800e062:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e064:	2100      	movs	r1, #0
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f7ff fbe1 	bl	800d82e <SDIO_GetResponse>
 800e06c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e074:	2b00      	cmp	r3, #0
 800e076:	d106      	bne.n	800e086 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	0c1b      	lsrs	r3, r3, #16
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e082:	2300      	movs	r3, #0
 800e084:	e011      	b.n	800e0aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e094:	e009      	b.n	800e0aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d002      	beq.n	800e0a6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e0a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0a4:	e001      	b.n	800e0aa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e0a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3720      	adds	r7, #32
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	20000018 	.word	0x20000018
 800e0b8:	10624dd3 	.word	0x10624dd3

0800e0bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e0c4:	4b22      	ldr	r3, [pc, #136]	; (800e150 <SDMMC_GetCmdResp7+0x94>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4a22      	ldr	r2, [pc, #136]	; (800e154 <SDMMC_GetCmdResp7+0x98>)
 800e0ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ce:	0a5b      	lsrs	r3, r3, #9
 800e0d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0d4:	fb02 f303 	mul.w	r3, r2, r3
 800e0d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	1e5a      	subs	r2, r3, #1
 800e0de:	60fa      	str	r2, [r7, #12]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d102      	bne.n	800e0ea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0e8:	e02c      	b.n	800e144 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d0ef      	beq.n	800e0da <SDMMC_GetCmdResp7+0x1e>
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e100:	2b00      	cmp	r3, #0
 800e102:	d1ea      	bne.n	800e0da <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e108:	f003 0304 	and.w	r3, r3, #4
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d004      	beq.n	800e11a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2204      	movs	r2, #4
 800e114:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e116:	2304      	movs	r3, #4
 800e118:	e014      	b.n	800e144 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e11e:	f003 0301 	and.w	r3, r3, #1
 800e122:	2b00      	cmp	r3, #0
 800e124:	d004      	beq.n	800e130 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2201      	movs	r2, #1
 800e12a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e12c:	2301      	movs	r3, #1
 800e12e:	e009      	b.n	800e144 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d002      	beq.n	800e142 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2240      	movs	r2, #64	; 0x40
 800e140:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e142:	2300      	movs	r3, #0
  
}
 800e144:	4618      	mov	r0, r3
 800e146:	3714      	adds	r7, #20
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr
 800e150:	20000018 	.word	0x20000018
 800e154:	10624dd3 	.word	0x10624dd3

0800e158 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e15c:	4904      	ldr	r1, [pc, #16]	; (800e170 <MX_FATFS_Init+0x18>)
 800e15e:	4805      	ldr	r0, [pc, #20]	; (800e174 <MX_FATFS_Init+0x1c>)
 800e160:	f003 fbb8 	bl	80118d4 <FATFS_LinkDriver>
 800e164:	4603      	mov	r3, r0
 800e166:	461a      	mov	r2, r3
 800e168:	4b03      	ldr	r3, [pc, #12]	; (800e178 <MX_FATFS_Init+0x20>)
 800e16a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e16c:	bf00      	nop
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	20004bf4 	.word	0x20004bf4
 800e174:	08015938 	.word	0x08015938
 800e178:	20004bf0 	.word	0x20004bf0

0800e17c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e17c:	b480      	push	{r7}
 800e17e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e180:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e182:	4618      	mov	r0, r3
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e192:	2300      	movs	r3, #0
 800e194:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e196:	f000 f888 	bl	800e2aa <BSP_SD_IsDetected>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d001      	beq.n	800e1a4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e005      	b.n	800e1b0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e1a4:	4804      	ldr	r0, [pc, #16]	; (800e1b8 <BSP_SD_Init+0x2c>)
 800e1a6:	f7fb fea7 	bl	8009ef8 <HAL_SD_Init>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800e1ae:	79fb      	ldrb	r3, [r7, #7]
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3708      	adds	r7, #8
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}
 800e1b8:	200047fc 	.word	0x200047fc

0800e1bc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b086      	sub	sp, #24
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	60f8      	str	r0, [r7, #12]
 800e1c4:	60b9      	str	r1, [r7, #8]
 800e1c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	68ba      	ldr	r2, [r7, #8]
 800e1d0:	68f9      	ldr	r1, [r7, #12]
 800e1d2:	4806      	ldr	r0, [pc, #24]	; (800e1ec <BSP_SD_ReadBlocks_DMA+0x30>)
 800e1d4:	f7fb ff3e 	bl	800a054 <HAL_SD_ReadBlocks_DMA>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3718      	adds	r7, #24
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	200047fc 	.word	0x200047fc

0800e1f0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b086      	sub	sp, #24
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	68ba      	ldr	r2, [r7, #8]
 800e204:	68f9      	ldr	r1, [r7, #12]
 800e206:	4806      	ldr	r0, [pc, #24]	; (800e220 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e208:	f7fc f806 	bl	800a218 <HAL_SD_WriteBlocks_DMA>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d001      	beq.n	800e216 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e212:	2301      	movs	r3, #1
 800e214:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e216:	7dfb      	ldrb	r3, [r7, #23]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3718      	adds	r7, #24
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	200047fc 	.word	0x200047fc

0800e224 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e228:	4805      	ldr	r0, [pc, #20]	; (800e240 <BSP_SD_GetCardState+0x1c>)
 800e22a:	f7fc fc3b 	bl	800aaa4 <HAL_SD_GetCardState>
 800e22e:	4603      	mov	r3, r0
 800e230:	2b04      	cmp	r3, #4
 800e232:	bf14      	ite	ne
 800e234:	2301      	movne	r3, #1
 800e236:	2300      	moveq	r3, #0
 800e238:	b2db      	uxtb	r3, r3
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	200047fc 	.word	0x200047fc

0800e244 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e24c:	6879      	ldr	r1, [r7, #4]
 800e24e:	4803      	ldr	r0, [pc, #12]	; (800e25c <BSP_SD_GetCardInfo+0x18>)
 800e250:	f7fc fbfc 	bl	800aa4c <HAL_SD_GetCardInfo>
}
 800e254:	bf00      	nop
 800e256:	3708      	adds	r7, #8
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	200047fc 	.word	0x200047fc

0800e260 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e268:	f000 f818 	bl	800e29c <BSP_SD_AbortCallback>
}
 800e26c:	bf00      	nop
 800e26e:	3708      	adds	r7, #8
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e27c:	f000 f9c4 	bl	800e608 <BSP_SD_WriteCpltCallback>
}
 800e280:	bf00      	nop
 800e282:	3708      	adds	r7, #8
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e290:	f000 f9c8 	bl	800e624 <BSP_SD_ReadCpltCallback>
}
 800e294:	bf00      	nop
 800e296:	3708      	adds	r7, #8
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e29c:	b480      	push	{r7}
 800e29e:	af00      	add	r7, sp, #0

}
 800e2a0:	bf00      	nop
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr

0800e2aa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b082      	sub	sp, #8
 800e2ae:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e2b4:	f000 f80c 	bl	800e2d0 <BSP_PlatformIsDetected>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d101      	bne.n	800e2c2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e2c2:	79fb      	ldrb	r3, [r7, #7]
 800e2c4:	b2db      	uxtb	r3, r3
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3708      	adds	r7, #8
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
	...

0800e2d0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e2da:	2120      	movs	r1, #32
 800e2dc:	4806      	ldr	r0, [pc, #24]	; (800e2f8 <BSP_PlatformIsDetected+0x28>)
 800e2de:	f7f9 fbe3 	bl	8007aa8 <HAL_GPIO_ReadPin>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d001      	beq.n	800e2ec <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e2ec:	79fb      	ldrb	r3, [r7, #7]
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3708      	adds	r7, #8
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	40020400 	.word	0x40020400

0800e2fc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800e304:	f003 fc43 	bl	8011b8e <osKernelSysTick>
 800e308:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800e30a:	e006      	b.n	800e31a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e30c:	f7ff ff8a 	bl	800e224 <BSP_SD_GetCardState>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d101      	bne.n	800e31a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e316:	2300      	movs	r3, #0
 800e318:	e009      	b.n	800e32e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800e31a:	f003 fc38 	bl	8011b8e <osKernelSysTick>
 800e31e:	4602      	mov	r2, r0
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	1ad3      	subs	r3, r2, r3
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	429a      	cmp	r2, r3
 800e328:	d8f0      	bhi.n	800e30c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e32a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
	...

0800e338 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	4603      	mov	r3, r0
 800e340:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e342:	4b0b      	ldr	r3, [pc, #44]	; (800e370 <SD_CheckStatus+0x38>)
 800e344:	2201      	movs	r2, #1
 800e346:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e348:	f7ff ff6c 	bl	800e224 <BSP_SD_GetCardState>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d107      	bne.n	800e362 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e352:	4b07      	ldr	r3, [pc, #28]	; (800e370 <SD_CheckStatus+0x38>)
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	b2db      	uxtb	r3, r3
 800e358:	f023 0301 	bic.w	r3, r3, #1
 800e35c:	b2da      	uxtb	r2, r3
 800e35e:	4b04      	ldr	r3, [pc, #16]	; (800e370 <SD_CheckStatus+0x38>)
 800e360:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e362:	4b03      	ldr	r3, [pc, #12]	; (800e370 <SD_CheckStatus+0x38>)
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	b2db      	uxtb	r3, r3
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3708      	adds	r7, #8
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	20000075 	.word	0x20000075

0800e374 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	4603      	mov	r3, r0
 800e37c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e37e:	4b20      	ldr	r3, [pc, #128]	; (800e400 <SD_initialize+0x8c>)
 800e380:	2201      	movs	r2, #1
 800e382:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800e384:	f003 fbf7 	bl	8011b76 <osKernelRunning>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d031      	beq.n	800e3f2 <SD_initialize+0x7e>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e38e:	f7ff fefd 	bl	800e18c <BSP_SD_Init>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d107      	bne.n	800e3a8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e398:	79fb      	ldrb	r3, [r7, #7]
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7ff ffcc 	bl	800e338 <SD_CheckStatus>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	4b16      	ldr	r3, [pc, #88]	; (800e400 <SD_initialize+0x8c>)
 800e3a6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e3a8:	4b15      	ldr	r3, [pc, #84]	; (800e400 <SD_initialize+0x8c>)
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d01f      	beq.n	800e3f2 <SD_initialize+0x7e>
    {
      if (SDQueueID == NULL)
 800e3b2:	4b14      	ldr	r3, [pc, #80]	; (800e404 <SD_initialize+0x90>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d10f      	bne.n	800e3da <SD_initialize+0x66>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800e3ba:	4a13      	ldr	r2, [pc, #76]	; (800e408 <SD_initialize+0x94>)
 800e3bc:	f107 0308 	add.w	r3, r7, #8
 800e3c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e3c4:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800e3c8:	f107 0308 	add.w	r3, r7, #8
 800e3cc:	2100      	movs	r1, #0
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f003 fcdd 	bl	8011d8e <osMessageCreate>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	4a0b      	ldr	r2, [pc, #44]	; (800e404 <SD_initialize+0x90>)
 800e3d8:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800e3da:	4b0a      	ldr	r3, [pc, #40]	; (800e404 <SD_initialize+0x90>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d107      	bne.n	800e3f2 <SD_initialize+0x7e>
      {
        Stat |= STA_NOINIT;
 800e3e2:	4b07      	ldr	r3, [pc, #28]	; (800e400 <SD_initialize+0x8c>)
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	f043 0301 	orr.w	r3, r3, #1
 800e3ec:	b2da      	uxtb	r2, r3
 800e3ee:	4b04      	ldr	r3, [pc, #16]	; (800e400 <SD_initialize+0x8c>)
 800e3f0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e3f2:	4b03      	ldr	r3, [pc, #12]	; (800e400 <SD_initialize+0x8c>)
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	b2db      	uxtb	r3, r3
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3710      	adds	r7, #16
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	20000075 	.word	0x20000075
 800e404:	20000464 	.word	0x20000464
 800e408:	08015834 	.word	0x08015834

0800e40c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	4603      	mov	r3, r0
 800e414:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e416:	79fb      	ldrb	r3, [r7, #7]
 800e418:	4618      	mov	r0, r3
 800e41a:	f7ff ff8d 	bl	800e338 <SD_CheckStatus>
 800e41e:	4603      	mov	r3, r0
}
 800e420:	4618      	mov	r0, r3
 800e422:	3708      	adds	r7, #8
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}

0800e428 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b08a      	sub	sp, #40	; 0x28
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	60b9      	str	r1, [r7, #8]
 800e430:	607a      	str	r2, [r7, #4]
 800e432:	603b      	str	r3, [r7, #0]
 800e434:	4603      	mov	r3, r0
 800e436:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800e438:	2301      	movs	r3, #1
 800e43a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e43e:	f247 5030 	movw	r0, #30000	; 0x7530
 800e442:	f7ff ff5b 	bl	800e2fc <SD_CheckStatusWithTimeout>
 800e446:	4603      	mov	r3, r0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	da02      	bge.n	800e452 <SD_read+0x2a>
  {
    return res;
 800e44c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e450:	e032      	b.n	800e4b8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e452:	683a      	ldr	r2, [r7, #0]
 800e454:	6879      	ldr	r1, [r7, #4]
 800e456:	68b8      	ldr	r0, [r7, #8]
 800e458:	f7ff feb0 	bl	800e1bc <BSP_SD_ReadBlocks_DMA>
 800e45c:	4603      	mov	r3, r0
 800e45e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800e462:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e466:	2b00      	cmp	r3, #0
 800e468:	d124      	bne.n	800e4b4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e46a:	4b15      	ldr	r3, [pc, #84]	; (800e4c0 <SD_read+0x98>)
 800e46c:	6819      	ldr	r1, [r3, #0]
 800e46e:	f107 0314 	add.w	r3, r7, #20
 800e472:	f247 5230 	movw	r2, #30000	; 0x7530
 800e476:	4618      	mov	r0, r3
 800e478:	f003 fcdc 	bl	8011e34 <osMessageGet>

    if (event.status == osEventMessage)
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	2b10      	cmp	r3, #16
 800e480:	d118      	bne.n	800e4b4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800e482:	69bb      	ldr	r3, [r7, #24]
 800e484:	2b01      	cmp	r3, #1
 800e486:	d115      	bne.n	800e4b4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800e488:	f003 fb81 	bl	8011b8e <osKernelSysTick>
 800e48c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e48e:	e008      	b.n	800e4a2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e490:	f7ff fec8 	bl	800e224 <BSP_SD_GetCardState>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d103      	bne.n	800e4a2 <SD_read+0x7a>
              {
                res = RES_OK;
 800e49a:	2300      	movs	r3, #0
 800e49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800e4a0:	e008      	b.n	800e4b4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e4a2:	f003 fb74 	bl	8011b8e <osKernelSysTick>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	6a3b      	ldr	r3, [r7, #32]
 800e4aa:	1ad3      	subs	r3, r2, r3
 800e4ac:	f247 522f 	movw	r2, #29999	; 0x752f
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d9ed      	bls.n	800e490 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800e4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3728      	adds	r7, #40	; 0x28
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	20000464 	.word	0x20000464

0800e4c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b08a      	sub	sp, #40	; 0x28
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	60b9      	str	r1, [r7, #8]
 800e4cc:	607a      	str	r2, [r7, #4]
 800e4ce:	603b      	str	r3, [r7, #0]
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e4da:	f247 5030 	movw	r0, #30000	; 0x7530
 800e4de:	f7ff ff0d 	bl	800e2fc <SD_CheckStatusWithTimeout>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	da02      	bge.n	800e4ee <SD_write+0x2a>
  {
    return res;
 800e4e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4ec:	e02e      	b.n	800e54c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e4ee:	683a      	ldr	r2, [r7, #0]
 800e4f0:	6879      	ldr	r1, [r7, #4]
 800e4f2:	68b8      	ldr	r0, [r7, #8]
 800e4f4:	f7ff fe7c 	bl	800e1f0 <BSP_SD_WriteBlocks_DMA>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d124      	bne.n	800e548 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e4fe:	4b15      	ldr	r3, [pc, #84]	; (800e554 <SD_write+0x90>)
 800e500:	6819      	ldr	r1, [r3, #0]
 800e502:	f107 0314 	add.w	r3, r7, #20
 800e506:	f247 5230 	movw	r2, #30000	; 0x7530
 800e50a:	4618      	mov	r0, r3
 800e50c:	f003 fc92 	bl	8011e34 <osMessageGet>

    if (event.status == osEventMessage)
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	2b10      	cmp	r3, #16
 800e514:	d118      	bne.n	800e548 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800e516:	69bb      	ldr	r3, [r7, #24]
 800e518:	2b02      	cmp	r3, #2
 800e51a:	d115      	bne.n	800e548 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800e51c:	f003 fb37 	bl	8011b8e <osKernelSysTick>
 800e520:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e522:	e008      	b.n	800e536 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e524:	f7ff fe7e 	bl	800e224 <BSP_SD_GetCardState>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d103      	bne.n	800e536 <SD_write+0x72>
          {
            res = RES_OK;
 800e52e:	2300      	movs	r3, #0
 800e530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e534:	e008      	b.n	800e548 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e536:	f003 fb2a 	bl	8011b8e <osKernelSysTick>
 800e53a:	4602      	mov	r2, r0
 800e53c:	6a3b      	ldr	r3, [r7, #32]
 800e53e:	1ad3      	subs	r3, r2, r3
 800e540:	f247 522f 	movw	r2, #29999	; 0x752f
 800e544:	4293      	cmp	r3, r2
 800e546:	d9ed      	bls.n	800e524 <SD_write+0x60>
    }

  }
#endif

  return res;
 800e548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3728      	adds	r7, #40	; 0x28
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	20000464 	.word	0x20000464

0800e558 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b08c      	sub	sp, #48	; 0x30
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	4603      	mov	r3, r0
 800e560:	603a      	str	r2, [r7, #0]
 800e562:	71fb      	strb	r3, [r7, #7]
 800e564:	460b      	mov	r3, r1
 800e566:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e568:	2301      	movs	r3, #1
 800e56a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e56e:	4b25      	ldr	r3, [pc, #148]	; (800e604 <SD_ioctl+0xac>)
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	b2db      	uxtb	r3, r3
 800e574:	f003 0301 	and.w	r3, r3, #1
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d001      	beq.n	800e580 <SD_ioctl+0x28>
 800e57c:	2303      	movs	r3, #3
 800e57e:	e03c      	b.n	800e5fa <SD_ioctl+0xa2>

  switch (cmd)
 800e580:	79bb      	ldrb	r3, [r7, #6]
 800e582:	2b03      	cmp	r3, #3
 800e584:	d834      	bhi.n	800e5f0 <SD_ioctl+0x98>
 800e586:	a201      	add	r2, pc, #4	; (adr r2, 800e58c <SD_ioctl+0x34>)
 800e588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e58c:	0800e59d 	.word	0x0800e59d
 800e590:	0800e5a5 	.word	0x0800e5a5
 800e594:	0800e5bd 	.word	0x0800e5bd
 800e598:	0800e5d7 	.word	0x0800e5d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e59c:	2300      	movs	r3, #0
 800e59e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5a2:	e028      	b.n	800e5f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e5a4:	f107 030c 	add.w	r3, r7, #12
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7ff fe4b 	bl	800e244 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e5ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5ba:	e01c      	b.n	800e5f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e5bc:	f107 030c 	add.w	r3, r7, #12
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7ff fe3f 	bl	800e244 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5d4:	e00f      	b.n	800e5f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e5d6:	f107 030c 	add.w	r3, r7, #12
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7ff fe32 	bl	800e244 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e2:	0a5a      	lsrs	r2, r3, #9
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5ee:	e002      	b.n	800e5f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e5f0:	2304      	movs	r3, #4
 800e5f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e5f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3730      	adds	r7, #48	; 0x30
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	20000075 	.word	0x20000075

0800e608 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800e60c:	4b04      	ldr	r3, [pc, #16]	; (800e620 <BSP_SD_WriteCpltCallback+0x18>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	2200      	movs	r2, #0
 800e612:	2102      	movs	r1, #2
 800e614:	4618      	mov	r0, r3
 800e616:	f003 fbcd 	bl	8011db4 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800e61a:	bf00      	nop
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	20000464 	.word	0x20000464

0800e624 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800e628:	4b04      	ldr	r3, [pc, #16]	; (800e63c <BSP_SD_ReadCpltCallback+0x18>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2200      	movs	r2, #0
 800e62e:	2101      	movs	r1, #1
 800e630:	4618      	mov	r0, r3
 800e632:	f003 fbbf 	bl	8011db4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800e636:	bf00      	nop
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	20000464 	.word	0x20000464

0800e640 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	4603      	mov	r3, r0
 800e648:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e64a:	79fb      	ldrb	r3, [r7, #7]
 800e64c:	4a08      	ldr	r2, [pc, #32]	; (800e670 <disk_status+0x30>)
 800e64e:	009b      	lsls	r3, r3, #2
 800e650:	4413      	add	r3, r2
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	79fa      	ldrb	r2, [r7, #7]
 800e658:	4905      	ldr	r1, [pc, #20]	; (800e670 <disk_status+0x30>)
 800e65a:	440a      	add	r2, r1
 800e65c:	7a12      	ldrb	r2, [r2, #8]
 800e65e:	4610      	mov	r0, r2
 800e660:	4798      	blx	r3
 800e662:	4603      	mov	r3, r0
 800e664:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e666:	7bfb      	ldrb	r3, [r7, #15]
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	20000490 	.word	0x20000490

0800e674 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	4603      	mov	r3, r0
 800e67c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e67e:	2300      	movs	r3, #0
 800e680:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e682:	79fb      	ldrb	r3, [r7, #7]
 800e684:	4a0d      	ldr	r2, [pc, #52]	; (800e6bc <disk_initialize+0x48>)
 800e686:	5cd3      	ldrb	r3, [r2, r3]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d111      	bne.n	800e6b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e68c:	79fb      	ldrb	r3, [r7, #7]
 800e68e:	4a0b      	ldr	r2, [pc, #44]	; (800e6bc <disk_initialize+0x48>)
 800e690:	2101      	movs	r1, #1
 800e692:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e694:	79fb      	ldrb	r3, [r7, #7]
 800e696:	4a09      	ldr	r2, [pc, #36]	; (800e6bc <disk_initialize+0x48>)
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	4413      	add	r3, r2
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	79fa      	ldrb	r2, [r7, #7]
 800e6a2:	4906      	ldr	r1, [pc, #24]	; (800e6bc <disk_initialize+0x48>)
 800e6a4:	440a      	add	r2, r1
 800e6a6:	7a12      	ldrb	r2, [r2, #8]
 800e6a8:	4610      	mov	r0, r2
 800e6aa:	4798      	blx	r3
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	20000490 	.word	0x20000490

0800e6c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e6c0:	b590      	push	{r4, r7, lr}
 800e6c2:	b087      	sub	sp, #28
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60b9      	str	r1, [r7, #8]
 800e6c8:	607a      	str	r2, [r7, #4]
 800e6ca:	603b      	str	r3, [r7, #0]
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e6d0:	7bfb      	ldrb	r3, [r7, #15]
 800e6d2:	4a0a      	ldr	r2, [pc, #40]	; (800e6fc <disk_read+0x3c>)
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	4413      	add	r3, r2
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	689c      	ldr	r4, [r3, #8]
 800e6dc:	7bfb      	ldrb	r3, [r7, #15]
 800e6de:	4a07      	ldr	r2, [pc, #28]	; (800e6fc <disk_read+0x3c>)
 800e6e0:	4413      	add	r3, r2
 800e6e2:	7a18      	ldrb	r0, [r3, #8]
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	68b9      	ldr	r1, [r7, #8]
 800e6ea:	47a0      	blx	r4
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800e6f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	371c      	adds	r7, #28
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd90      	pop	{r4, r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	20000490 	.word	0x20000490

0800e700 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e700:	b590      	push	{r4, r7, lr}
 800e702:	b087      	sub	sp, #28
 800e704:	af00      	add	r7, sp, #0
 800e706:	60b9      	str	r1, [r7, #8]
 800e708:	607a      	str	r2, [r7, #4]
 800e70a:	603b      	str	r3, [r7, #0]
 800e70c:	4603      	mov	r3, r0
 800e70e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e710:	7bfb      	ldrb	r3, [r7, #15]
 800e712:	4a0a      	ldr	r2, [pc, #40]	; (800e73c <disk_write+0x3c>)
 800e714:	009b      	lsls	r3, r3, #2
 800e716:	4413      	add	r3, r2
 800e718:	685b      	ldr	r3, [r3, #4]
 800e71a:	68dc      	ldr	r4, [r3, #12]
 800e71c:	7bfb      	ldrb	r3, [r7, #15]
 800e71e:	4a07      	ldr	r2, [pc, #28]	; (800e73c <disk_write+0x3c>)
 800e720:	4413      	add	r3, r2
 800e722:	7a18      	ldrb	r0, [r3, #8]
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	68b9      	ldr	r1, [r7, #8]
 800e72a:	47a0      	blx	r4
 800e72c:	4603      	mov	r3, r0
 800e72e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e730:	7dfb      	ldrb	r3, [r7, #23]
}
 800e732:	4618      	mov	r0, r3
 800e734:	371c      	adds	r7, #28
 800e736:	46bd      	mov	sp, r7
 800e738:	bd90      	pop	{r4, r7, pc}
 800e73a:	bf00      	nop
 800e73c:	20000490 	.word	0x20000490

0800e740 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
 800e746:	4603      	mov	r3, r0
 800e748:	603a      	str	r2, [r7, #0]
 800e74a:	71fb      	strb	r3, [r7, #7]
 800e74c:	460b      	mov	r3, r1
 800e74e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e750:	79fb      	ldrb	r3, [r7, #7]
 800e752:	4a09      	ldr	r2, [pc, #36]	; (800e778 <disk_ioctl+0x38>)
 800e754:	009b      	lsls	r3, r3, #2
 800e756:	4413      	add	r3, r2
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	691b      	ldr	r3, [r3, #16]
 800e75c:	79fa      	ldrb	r2, [r7, #7]
 800e75e:	4906      	ldr	r1, [pc, #24]	; (800e778 <disk_ioctl+0x38>)
 800e760:	440a      	add	r2, r1
 800e762:	7a10      	ldrb	r0, [r2, #8]
 800e764:	79b9      	ldrb	r1, [r7, #6]
 800e766:	683a      	ldr	r2, [r7, #0]
 800e768:	4798      	blx	r3
 800e76a:	4603      	mov	r3, r0
 800e76c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e770:	4618      	mov	r0, r3
 800e772:	3710      	adds	r7, #16
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	20000490 	.word	0x20000490

0800e77c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e77c:	b480      	push	{r7}
 800e77e:	b085      	sub	sp, #20
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	3301      	adds	r3, #1
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e78c:	89fb      	ldrh	r3, [r7, #14]
 800e78e:	021b      	lsls	r3, r3, #8
 800e790:	b21a      	sxth	r2, r3
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	b21b      	sxth	r3, r3
 800e798:	4313      	orrs	r3, r2
 800e79a:	b21b      	sxth	r3, r3
 800e79c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e79e:	89fb      	ldrh	r3, [r7, #14]
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3714      	adds	r7, #20
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr

0800e7ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b085      	sub	sp, #20
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	3303      	adds	r3, #3
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	021b      	lsls	r3, r3, #8
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	3202      	adds	r2, #2
 800e7c4:	7812      	ldrb	r2, [r2, #0]
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	021b      	lsls	r3, r3, #8
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	3201      	adds	r2, #1
 800e7d2:	7812      	ldrb	r2, [r2, #0]
 800e7d4:	4313      	orrs	r3, r2
 800e7d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	021b      	lsls	r3, r3, #8
 800e7dc:	687a      	ldr	r2, [r7, #4]
 800e7de:	7812      	ldrb	r2, [r2, #0]
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	60fb      	str	r3, [r7, #12]
	return rv;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3714      	adds	r7, #20
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr

0800e7f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e7f2:	b480      	push	{r7}
 800e7f4:	b083      	sub	sp, #12
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	1c5a      	adds	r2, r3, #1
 800e802:	607a      	str	r2, [r7, #4]
 800e804:	887a      	ldrh	r2, [r7, #2]
 800e806:	b2d2      	uxtb	r2, r2
 800e808:	701a      	strb	r2, [r3, #0]
 800e80a:	887b      	ldrh	r3, [r7, #2]
 800e80c:	0a1b      	lsrs	r3, r3, #8
 800e80e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	1c5a      	adds	r2, r3, #1
 800e814:	607a      	str	r2, [r7, #4]
 800e816:	887a      	ldrh	r2, [r7, #2]
 800e818:	b2d2      	uxtb	r2, r2
 800e81a:	701a      	strb	r2, [r3, #0]
}
 800e81c:	bf00      	nop
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e828:	b480      	push	{r7}
 800e82a:	b083      	sub	sp, #12
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	1c5a      	adds	r2, r3, #1
 800e836:	607a      	str	r2, [r7, #4]
 800e838:	683a      	ldr	r2, [r7, #0]
 800e83a:	b2d2      	uxtb	r2, r2
 800e83c:	701a      	strb	r2, [r3, #0]
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	0a1b      	lsrs	r3, r3, #8
 800e842:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	1c5a      	adds	r2, r3, #1
 800e848:	607a      	str	r2, [r7, #4]
 800e84a:	683a      	ldr	r2, [r7, #0]
 800e84c:	b2d2      	uxtb	r2, r2
 800e84e:	701a      	strb	r2, [r3, #0]
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	0a1b      	lsrs	r3, r3, #8
 800e854:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	1c5a      	adds	r2, r3, #1
 800e85a:	607a      	str	r2, [r7, #4]
 800e85c:	683a      	ldr	r2, [r7, #0]
 800e85e:	b2d2      	uxtb	r2, r2
 800e860:	701a      	strb	r2, [r3, #0]
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	0a1b      	lsrs	r3, r3, #8
 800e866:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	1c5a      	adds	r2, r3, #1
 800e86c:	607a      	str	r2, [r7, #4]
 800e86e:	683a      	ldr	r2, [r7, #0]
 800e870:	b2d2      	uxtb	r2, r2
 800e872:	701a      	strb	r2, [r3, #0]
}
 800e874:	bf00      	nop
 800e876:	370c      	adds	r7, #12
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr

0800e880 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e880:	b480      	push	{r7}
 800e882:	b087      	sub	sp, #28
 800e884:	af00      	add	r7, sp, #0
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00d      	beq.n	800e8b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e89a:	693a      	ldr	r2, [r7, #16]
 800e89c:	1c53      	adds	r3, r2, #1
 800e89e:	613b      	str	r3, [r7, #16]
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	1c59      	adds	r1, r3, #1
 800e8a4:	6179      	str	r1, [r7, #20]
 800e8a6:	7812      	ldrb	r2, [r2, #0]
 800e8a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	607b      	str	r3, [r7, #4]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d1f1      	bne.n	800e89a <mem_cpy+0x1a>
	}
}
 800e8b6:	bf00      	nop
 800e8b8:	371c      	adds	r7, #28
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr

0800e8c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e8c2:	b480      	push	{r7}
 800e8c4:	b087      	sub	sp, #28
 800e8c6:	af00      	add	r7, sp, #0
 800e8c8:	60f8      	str	r0, [r7, #12]
 800e8ca:	60b9      	str	r1, [r7, #8]
 800e8cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	1c5a      	adds	r2, r3, #1
 800e8d6:	617a      	str	r2, [r7, #20]
 800e8d8:	68ba      	ldr	r2, [r7, #8]
 800e8da:	b2d2      	uxtb	r2, r2
 800e8dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	607b      	str	r3, [r7, #4]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d1f3      	bne.n	800e8d2 <mem_set+0x10>
}
 800e8ea:	bf00      	nop
 800e8ec:	bf00      	nop
 800e8ee:	371c      	adds	r7, #28
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e8f8:	b480      	push	{r7}
 800e8fa:	b089      	sub	sp, #36	; 0x24
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	61fb      	str	r3, [r7, #28]
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e90c:	2300      	movs	r3, #0
 800e90e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	1c5a      	adds	r2, r3, #1
 800e914:	61fa      	str	r2, [r7, #28]
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	4619      	mov	r1, r3
 800e91a:	69bb      	ldr	r3, [r7, #24]
 800e91c:	1c5a      	adds	r2, r3, #1
 800e91e:	61ba      	str	r2, [r7, #24]
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	1acb      	subs	r3, r1, r3
 800e924:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	3b01      	subs	r3, #1
 800e92a:	607b      	str	r3, [r7, #4]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d002      	beq.n	800e938 <mem_cmp+0x40>
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d0eb      	beq.n	800e910 <mem_cmp+0x18>

	return r;
 800e938:	697b      	ldr	r3, [r7, #20]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3724      	adds	r7, #36	; 0x24
 800e93e:	46bd      	mov	sp, r7
 800e940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e944:	4770      	bx	lr

0800e946 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e946:	b480      	push	{r7}
 800e948:	b083      	sub	sp, #12
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
 800e94e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e950:	e002      	b.n	800e958 <chk_chr+0x12>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	3301      	adds	r3, #1
 800e956:	607b      	str	r3, [r7, #4]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d005      	beq.n	800e96c <chk_chr+0x26>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	461a      	mov	r2, r3
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	4293      	cmp	r3, r2
 800e96a:	d1f2      	bne.n	800e952 <chk_chr+0xc>
	return *str;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	781b      	ldrb	r3, [r3, #0]
}
 800e970:	4618      	mov	r0, r3
 800e972:	370c      	adds	r7, #12
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr

0800e97c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d009      	beq.n	800e99e <lock_fs+0x22>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	691b      	ldr	r3, [r3, #16]
 800e98e:	4618      	mov	r0, r3
 800e990:	f003 f8a0 	bl	8011ad4 <ff_req_grant>
 800e994:	4603      	mov	r3, r0
 800e996:	2b00      	cmp	r3, #0
 800e998:	d001      	beq.n	800e99e <lock_fs+0x22>
 800e99a:	2301      	movs	r3, #1
 800e99c:	e000      	b.n	800e9a0 <lock_fs+0x24>
 800e99e:	2300      	movs	r3, #0
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3708      	adds	r7, #8
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d00d      	beq.n	800e9d6 <unlock_fs+0x2e>
 800e9ba:	78fb      	ldrb	r3, [r7, #3]
 800e9bc:	2b0c      	cmp	r3, #12
 800e9be:	d00a      	beq.n	800e9d6 <unlock_fs+0x2e>
 800e9c0:	78fb      	ldrb	r3, [r7, #3]
 800e9c2:	2b0b      	cmp	r3, #11
 800e9c4:	d007      	beq.n	800e9d6 <unlock_fs+0x2e>
 800e9c6:	78fb      	ldrb	r3, [r7, #3]
 800e9c8:	2b0f      	cmp	r3, #15
 800e9ca:	d004      	beq.n	800e9d6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	691b      	ldr	r3, [r3, #16]
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f003 f894 	bl	8011afe <ff_rel_grant>
	}
}
 800e9d6:	bf00      	nop
 800e9d8:	3708      	adds	r7, #8
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
	...

0800e9e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	60bb      	str	r3, [r7, #8]
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	60fb      	str	r3, [r7, #12]
 800e9f2:	e029      	b.n	800ea48 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e9f4:	4a27      	ldr	r2, [pc, #156]	; (800ea94 <chk_lock+0xb4>)
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	011b      	lsls	r3, r3, #4
 800e9fa:	4413      	add	r3, r2
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d01d      	beq.n	800ea3e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ea02:	4a24      	ldr	r2, [pc, #144]	; (800ea94 <chk_lock+0xb4>)
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	011b      	lsls	r3, r3, #4
 800ea08:	4413      	add	r3, r2
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d116      	bne.n	800ea42 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ea14:	4a1f      	ldr	r2, [pc, #124]	; (800ea94 <chk_lock+0xb4>)
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	011b      	lsls	r3, r3, #4
 800ea1a:	4413      	add	r3, r2
 800ea1c:	3304      	adds	r3, #4
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d10c      	bne.n	800ea42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ea28:	4a1a      	ldr	r2, [pc, #104]	; (800ea94 <chk_lock+0xb4>)
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	011b      	lsls	r3, r3, #4
 800ea2e:	4413      	add	r3, r2
 800ea30:	3308      	adds	r3, #8
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d102      	bne.n	800ea42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ea3c:	e007      	b.n	800ea4e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	3301      	adds	r3, #1
 800ea46:	60fb      	str	r3, [r7, #12]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d9d2      	bls.n	800e9f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2b02      	cmp	r3, #2
 800ea52:	d109      	bne.n	800ea68 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d102      	bne.n	800ea60 <chk_lock+0x80>
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	2b02      	cmp	r3, #2
 800ea5e:	d101      	bne.n	800ea64 <chk_lock+0x84>
 800ea60:	2300      	movs	r3, #0
 800ea62:	e010      	b.n	800ea86 <chk_lock+0xa6>
 800ea64:	2312      	movs	r3, #18
 800ea66:	e00e      	b.n	800ea86 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d108      	bne.n	800ea80 <chk_lock+0xa0>
 800ea6e:	4a09      	ldr	r2, [pc, #36]	; (800ea94 <chk_lock+0xb4>)
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	011b      	lsls	r3, r3, #4
 800ea74:	4413      	add	r3, r2
 800ea76:	330c      	adds	r3, #12
 800ea78:	881b      	ldrh	r3, [r3, #0]
 800ea7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea7e:	d101      	bne.n	800ea84 <chk_lock+0xa4>
 800ea80:	2310      	movs	r3, #16
 800ea82:	e000      	b.n	800ea86 <chk_lock+0xa6>
 800ea84:	2300      	movs	r3, #0
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3714      	adds	r7, #20
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	20000470 	.word	0x20000470

0800ea98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	607b      	str	r3, [r7, #4]
 800eaa2:	e002      	b.n	800eaaa <enq_lock+0x12>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	607b      	str	r3, [r7, #4]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d806      	bhi.n	800eabe <enq_lock+0x26>
 800eab0:	4a09      	ldr	r2, [pc, #36]	; (800ead8 <enq_lock+0x40>)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	011b      	lsls	r3, r3, #4
 800eab6:	4413      	add	r3, r2
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d1f2      	bne.n	800eaa4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2b02      	cmp	r3, #2
 800eac2:	bf14      	ite	ne
 800eac4:	2301      	movne	r3, #1
 800eac6:	2300      	moveq	r3, #0
 800eac8:	b2db      	uxtb	r3, r3
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	370c      	adds	r7, #12
 800eace:	46bd      	mov	sp, r7
 800ead0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead4:	4770      	bx	lr
 800ead6:	bf00      	nop
 800ead8:	20000470 	.word	0x20000470

0800eadc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eadc:	b480      	push	{r7}
 800eade:	b085      	sub	sp, #20
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eae6:	2300      	movs	r3, #0
 800eae8:	60fb      	str	r3, [r7, #12]
 800eaea:	e01f      	b.n	800eb2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800eaec:	4a41      	ldr	r2, [pc, #260]	; (800ebf4 <inc_lock+0x118>)
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	011b      	lsls	r3, r3, #4
 800eaf2:	4413      	add	r3, r2
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d113      	bne.n	800eb26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800eafe:	4a3d      	ldr	r2, [pc, #244]	; (800ebf4 <inc_lock+0x118>)
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	011b      	lsls	r3, r3, #4
 800eb04:	4413      	add	r3, r2
 800eb06:	3304      	adds	r3, #4
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d109      	bne.n	800eb26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800eb12:	4a38      	ldr	r2, [pc, #224]	; (800ebf4 <inc_lock+0x118>)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	011b      	lsls	r3, r3, #4
 800eb18:	4413      	add	r3, r2
 800eb1a:	3308      	adds	r3, #8
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d006      	beq.n	800eb34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	60fb      	str	r3, [r7, #12]
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d9dc      	bls.n	800eaec <inc_lock+0x10>
 800eb32:	e000      	b.n	800eb36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800eb34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2b02      	cmp	r3, #2
 800eb3a:	d132      	bne.n	800eba2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	60fb      	str	r3, [r7, #12]
 800eb40:	e002      	b.n	800eb48 <inc_lock+0x6c>
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	3301      	adds	r3, #1
 800eb46:	60fb      	str	r3, [r7, #12]
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d806      	bhi.n	800eb5c <inc_lock+0x80>
 800eb4e:	4a29      	ldr	r2, [pc, #164]	; (800ebf4 <inc_lock+0x118>)
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	011b      	lsls	r3, r3, #4
 800eb54:	4413      	add	r3, r2
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1f2      	bne.n	800eb42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2b02      	cmp	r3, #2
 800eb60:	d101      	bne.n	800eb66 <inc_lock+0x8a>
 800eb62:	2300      	movs	r3, #0
 800eb64:	e040      	b.n	800ebe8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	4922      	ldr	r1, [pc, #136]	; (800ebf4 <inc_lock+0x118>)
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	011b      	lsls	r3, r3, #4
 800eb70:	440b      	add	r3, r1
 800eb72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	689a      	ldr	r2, [r3, #8]
 800eb78:	491e      	ldr	r1, [pc, #120]	; (800ebf4 <inc_lock+0x118>)
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	011b      	lsls	r3, r3, #4
 800eb7e:	440b      	add	r3, r1
 800eb80:	3304      	adds	r3, #4
 800eb82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	695a      	ldr	r2, [r3, #20]
 800eb88:	491a      	ldr	r1, [pc, #104]	; (800ebf4 <inc_lock+0x118>)
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	011b      	lsls	r3, r3, #4
 800eb8e:	440b      	add	r3, r1
 800eb90:	3308      	adds	r3, #8
 800eb92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800eb94:	4a17      	ldr	r2, [pc, #92]	; (800ebf4 <inc_lock+0x118>)
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	011b      	lsls	r3, r3, #4
 800eb9a:	4413      	add	r3, r2
 800eb9c:	330c      	adds	r3, #12
 800eb9e:	2200      	movs	r2, #0
 800eba0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d009      	beq.n	800ebbc <inc_lock+0xe0>
 800eba8:	4a12      	ldr	r2, [pc, #72]	; (800ebf4 <inc_lock+0x118>)
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	011b      	lsls	r3, r3, #4
 800ebae:	4413      	add	r3, r2
 800ebb0:	330c      	adds	r3, #12
 800ebb2:	881b      	ldrh	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d001      	beq.n	800ebbc <inc_lock+0xe0>
 800ebb8:	2300      	movs	r3, #0
 800ebba:	e015      	b.n	800ebe8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d108      	bne.n	800ebd4 <inc_lock+0xf8>
 800ebc2:	4a0c      	ldr	r2, [pc, #48]	; (800ebf4 <inc_lock+0x118>)
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	011b      	lsls	r3, r3, #4
 800ebc8:	4413      	add	r3, r2
 800ebca:	330c      	adds	r3, #12
 800ebcc:	881b      	ldrh	r3, [r3, #0]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	b29a      	uxth	r2, r3
 800ebd2:	e001      	b.n	800ebd8 <inc_lock+0xfc>
 800ebd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ebd8:	4906      	ldr	r1, [pc, #24]	; (800ebf4 <inc_lock+0x118>)
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	011b      	lsls	r3, r3, #4
 800ebde:	440b      	add	r3, r1
 800ebe0:	330c      	adds	r3, #12
 800ebe2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	3301      	adds	r3, #1
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3714      	adds	r7, #20
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr
 800ebf4:	20000470 	.word	0x20000470

0800ebf8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ec00:	2300      	movs	r3, #0
 800ec02:	60fb      	str	r3, [r7, #12]
 800ec04:	e010      	b.n	800ec28 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ec06:	4a0d      	ldr	r2, [pc, #52]	; (800ec3c <clear_lock+0x44>)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	011b      	lsls	r3, r3, #4
 800ec0c:	4413      	add	r3, r2
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d105      	bne.n	800ec22 <clear_lock+0x2a>
 800ec16:	4a09      	ldr	r2, [pc, #36]	; (800ec3c <clear_lock+0x44>)
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	011b      	lsls	r3, r3, #4
 800ec1c:	4413      	add	r3, r2
 800ec1e:	2200      	movs	r2, #0
 800ec20:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	3301      	adds	r3, #1
 800ec26:	60fb      	str	r3, [r7, #12]
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d9eb      	bls.n	800ec06 <clear_lock+0xe>
	}
}
 800ec2e:	bf00      	nop
 800ec30:	bf00      	nop
 800ec32:	3714      	adds	r7, #20
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr
 800ec3c:	20000470 	.word	0x20000470

0800ec40 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b086      	sub	sp, #24
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	78db      	ldrb	r3, [r3, #3]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d034      	beq.n	800ecbe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	7858      	ldrb	r0, [r3, #1]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ec64:	2301      	movs	r3, #1
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	f7ff fd4a 	bl	800e700 <disk_write>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d002      	beq.n	800ec78 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ec72:	2301      	movs	r3, #1
 800ec74:	73fb      	strb	r3, [r7, #15]
 800ec76:	e022      	b.n	800ecbe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec82:	697a      	ldr	r2, [r7, #20]
 800ec84:	1ad2      	subs	r2, r2, r3
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6a1b      	ldr	r3, [r3, #32]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d217      	bcs.n	800ecbe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	789b      	ldrb	r3, [r3, #2]
 800ec92:	613b      	str	r3, [r7, #16]
 800ec94:	e010      	b.n	800ecb8 <sync_window+0x78>
					wsect += fs->fsize;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6a1b      	ldr	r3, [r3, #32]
 800ec9a:	697a      	ldr	r2, [r7, #20]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	7858      	ldrb	r0, [r3, #1]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ecaa:	2301      	movs	r3, #1
 800ecac:	697a      	ldr	r2, [r7, #20]
 800ecae:	f7ff fd27 	bl	800e700 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	3b01      	subs	r3, #1
 800ecb6:	613b      	str	r3, [r7, #16]
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d8eb      	bhi.n	800ec96 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ecbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3718      	adds	r7, #24
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecda:	683a      	ldr	r2, [r7, #0]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d01b      	beq.n	800ed18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f7ff ffad 	bl	800ec40 <sync_window>
 800ece6:	4603      	mov	r3, r0
 800ece8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ecea:	7bfb      	ldrb	r3, [r7, #15]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d113      	bne.n	800ed18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	7858      	ldrb	r0, [r3, #1]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	683a      	ldr	r2, [r7, #0]
 800ecfe:	f7ff fcdf 	bl	800e6c0 <disk_read>
 800ed02:	4603      	mov	r3, r0
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d004      	beq.n	800ed12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ed08:	f04f 33ff 	mov.w	r3, #4294967295
 800ed0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ed0e:	2301      	movs	r3, #1
 800ed10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	683a      	ldr	r2, [r7, #0]
 800ed16:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800ed18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
	...

0800ed24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b084      	sub	sp, #16
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f7ff ff87 	bl	800ec40 <sync_window>
 800ed32:	4603      	mov	r3, r0
 800ed34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ed36:	7bfb      	ldrb	r3, [r7, #15]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d158      	bne.n	800edee <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	2b03      	cmp	r3, #3
 800ed42:	d148      	bne.n	800edd6 <sync_fs+0xb2>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	791b      	ldrb	r3, [r3, #4]
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d144      	bne.n	800edd6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	3338      	adds	r3, #56	; 0x38
 800ed50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed54:	2100      	movs	r1, #0
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7ff fdb3 	bl	800e8c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	3338      	adds	r3, #56	; 0x38
 800ed60:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ed64:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7ff fd42 	bl	800e7f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	3338      	adds	r3, #56	; 0x38
 800ed72:	4921      	ldr	r1, [pc, #132]	; (800edf8 <sync_fs+0xd4>)
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7ff fd57 	bl	800e828 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	3338      	adds	r3, #56	; 0x38
 800ed7e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ed82:	491e      	ldr	r1, [pc, #120]	; (800edfc <sync_fs+0xd8>)
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7ff fd4f 	bl	800e828 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	3338      	adds	r3, #56	; 0x38
 800ed8e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	699b      	ldr	r3, [r3, #24]
 800ed96:	4619      	mov	r1, r3
 800ed98:	4610      	mov	r0, r2
 800ed9a:	f7ff fd45 	bl	800e828 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	3338      	adds	r3, #56	; 0x38
 800eda2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	695b      	ldr	r3, [r3, #20]
 800edaa:	4619      	mov	r1, r3
 800edac:	4610      	mov	r0, r2
 800edae:	f7ff fd3b 	bl	800e828 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb6:	1c5a      	adds	r2, r3, #1
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	7858      	ldrb	r0, [r3, #1]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edca:	2301      	movs	r3, #1
 800edcc:	f7ff fc98 	bl	800e700 <disk_write>
			fs->fsi_flag = 0;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2200      	movs	r2, #0
 800edd4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	785b      	ldrb	r3, [r3, #1]
 800edda:	2200      	movs	r2, #0
 800eddc:	2100      	movs	r1, #0
 800edde:	4618      	mov	r0, r3
 800ede0:	f7ff fcae 	bl	800e740 <disk_ioctl>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d001      	beq.n	800edee <sync_fs+0xca>
 800edea:	2301      	movs	r3, #1
 800edec:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800edee:	7bfb      	ldrb	r3, [r7, #15]
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	41615252 	.word	0x41615252
 800edfc:	61417272 	.word	0x61417272

0800ee00 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b083      	sub	sp, #12
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	3b02      	subs	r3, #2
 800ee0e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	69db      	ldr	r3, [r3, #28]
 800ee14:	3b02      	subs	r3, #2
 800ee16:	683a      	ldr	r2, [r7, #0]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d301      	bcc.n	800ee20 <clust2sect+0x20>
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	e008      	b.n	800ee32 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	895b      	ldrh	r3, [r3, #10]
 800ee24:	461a      	mov	r2, r3
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	fb03 f202 	mul.w	r2, r3, r2
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee30:	4413      	add	r3, r2
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	370c      	adds	r7, #12
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b086      	sub	sp, #24
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d904      	bls.n	800ee5e <get_fat+0x20>
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	69db      	ldr	r3, [r3, #28]
 800ee58:	683a      	ldr	r2, [r7, #0]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d302      	bcc.n	800ee64 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ee5e:	2301      	movs	r3, #1
 800ee60:	617b      	str	r3, [r7, #20]
 800ee62:	e08f      	b.n	800ef84 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ee64:	f04f 33ff 	mov.w	r3, #4294967295
 800ee68:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	2b03      	cmp	r3, #3
 800ee70:	d062      	beq.n	800ef38 <get_fat+0xfa>
 800ee72:	2b03      	cmp	r3, #3
 800ee74:	dc7c      	bgt.n	800ef70 <get_fat+0x132>
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d002      	beq.n	800ee80 <get_fat+0x42>
 800ee7a:	2b02      	cmp	r3, #2
 800ee7c:	d042      	beq.n	800ef04 <get_fat+0xc6>
 800ee7e:	e077      	b.n	800ef70 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	60fb      	str	r3, [r7, #12]
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	085b      	lsrs	r3, r3, #1
 800ee88:	68fa      	ldr	r2, [r7, #12]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	0a5b      	lsrs	r3, r3, #9
 800ee96:	4413      	add	r3, r2
 800ee98:	4619      	mov	r1, r3
 800ee9a:	6938      	ldr	r0, [r7, #16]
 800ee9c:	f7ff ff14 	bl	800ecc8 <move_window>
 800eea0:	4603      	mov	r3, r0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d167      	bne.n	800ef76 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	1c5a      	adds	r2, r3, #1
 800eeaa:	60fa      	str	r2, [r7, #12]
 800eeac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeb0:	693a      	ldr	r2, [r7, #16]
 800eeb2:	4413      	add	r3, r2
 800eeb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eeb8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	0a5b      	lsrs	r3, r3, #9
 800eec2:	4413      	add	r3, r2
 800eec4:	4619      	mov	r1, r3
 800eec6:	6938      	ldr	r0, [r7, #16]
 800eec8:	f7ff fefe 	bl	800ecc8 <move_window>
 800eecc:	4603      	mov	r3, r0
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d153      	bne.n	800ef7a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eed8:	693a      	ldr	r2, [r7, #16]
 800eeda:	4413      	add	r3, r2
 800eedc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eee0:	021b      	lsls	r3, r3, #8
 800eee2:	461a      	mov	r2, r3
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	4313      	orrs	r3, r2
 800eee8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	f003 0301 	and.w	r3, r3, #1
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d002      	beq.n	800eefa <get_fat+0xbc>
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	091b      	lsrs	r3, r3, #4
 800eef8:	e002      	b.n	800ef00 <get_fat+0xc2>
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef00:	617b      	str	r3, [r7, #20]
			break;
 800ef02:	e03f      	b.n	800ef84 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	0a1b      	lsrs	r3, r3, #8
 800ef0c:	4413      	add	r3, r2
 800ef0e:	4619      	mov	r1, r3
 800ef10:	6938      	ldr	r0, [r7, #16]
 800ef12:	f7ff fed9 	bl	800ecc8 <move_window>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d130      	bne.n	800ef7e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	005b      	lsls	r3, r3, #1
 800ef26:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ef2a:	4413      	add	r3, r2
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7ff fc25 	bl	800e77c <ld_word>
 800ef32:	4603      	mov	r3, r0
 800ef34:	617b      	str	r3, [r7, #20]
			break;
 800ef36:	e025      	b.n	800ef84 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	09db      	lsrs	r3, r3, #7
 800ef40:	4413      	add	r3, r2
 800ef42:	4619      	mov	r1, r3
 800ef44:	6938      	ldr	r0, [r7, #16]
 800ef46:	f7ff febf 	bl	800ecc8 <move_window>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d118      	bne.n	800ef82 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	009b      	lsls	r3, r3, #2
 800ef5a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ef5e:	4413      	add	r3, r2
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7ff fc23 	bl	800e7ac <ld_dword>
 800ef66:	4603      	mov	r3, r0
 800ef68:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ef6c:	617b      	str	r3, [r7, #20]
			break;
 800ef6e:	e009      	b.n	800ef84 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ef70:	2301      	movs	r3, #1
 800ef72:	617b      	str	r3, [r7, #20]
 800ef74:	e006      	b.n	800ef84 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef76:	bf00      	nop
 800ef78:	e004      	b.n	800ef84 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef7a:	bf00      	nop
 800ef7c:	e002      	b.n	800ef84 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ef7e:	bf00      	nop
 800ef80:	e000      	b.n	800ef84 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ef82:	bf00      	nop
		}
	}

	return val;
 800ef84:	697b      	ldr	r3, [r7, #20]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3718      	adds	r7, #24
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ef8e:	b590      	push	{r4, r7, lr}
 800ef90:	b089      	sub	sp, #36	; 0x24
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	60f8      	str	r0, [r7, #12]
 800ef96:	60b9      	str	r1, [r7, #8]
 800ef98:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ef9a:	2302      	movs	r3, #2
 800ef9c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	f240 80d2 	bls.w	800f14a <put_fat+0x1bc>
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	69db      	ldr	r3, [r3, #28]
 800efaa:	68ba      	ldr	r2, [r7, #8]
 800efac:	429a      	cmp	r2, r3
 800efae:	f080 80cc 	bcs.w	800f14a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	2b03      	cmp	r3, #3
 800efb8:	f000 8096 	beq.w	800f0e8 <put_fat+0x15a>
 800efbc:	2b03      	cmp	r3, #3
 800efbe:	f300 80cd 	bgt.w	800f15c <put_fat+0x1ce>
 800efc2:	2b01      	cmp	r3, #1
 800efc4:	d002      	beq.n	800efcc <put_fat+0x3e>
 800efc6:	2b02      	cmp	r3, #2
 800efc8:	d06e      	beq.n	800f0a8 <put_fat+0x11a>
 800efca:	e0c7      	b.n	800f15c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	61bb      	str	r3, [r7, #24]
 800efd0:	69bb      	ldr	r3, [r7, #24]
 800efd2:	085b      	lsrs	r3, r3, #1
 800efd4:	69ba      	ldr	r2, [r7, #24]
 800efd6:	4413      	add	r3, r2
 800efd8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800efde:	69bb      	ldr	r3, [r7, #24]
 800efe0:	0a5b      	lsrs	r3, r3, #9
 800efe2:	4413      	add	r3, r2
 800efe4:	4619      	mov	r1, r3
 800efe6:	68f8      	ldr	r0, [r7, #12]
 800efe8:	f7ff fe6e 	bl	800ecc8 <move_window>
 800efec:	4603      	mov	r3, r0
 800efee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eff0:	7ffb      	ldrb	r3, [r7, #31]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	f040 80ab 	bne.w	800f14e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800effe:	69bb      	ldr	r3, [r7, #24]
 800f000:	1c59      	adds	r1, r3, #1
 800f002:	61b9      	str	r1, [r7, #24]
 800f004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f008:	4413      	add	r3, r2
 800f00a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	f003 0301 	and.w	r3, r3, #1
 800f012:	2b00      	cmp	r3, #0
 800f014:	d00d      	beq.n	800f032 <put_fat+0xa4>
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	b25b      	sxtb	r3, r3
 800f01c:	f003 030f 	and.w	r3, r3, #15
 800f020:	b25a      	sxtb	r2, r3
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	b2db      	uxtb	r3, r3
 800f026:	011b      	lsls	r3, r3, #4
 800f028:	b25b      	sxtb	r3, r3
 800f02a:	4313      	orrs	r3, r2
 800f02c:	b25b      	sxtb	r3, r3
 800f02e:	b2db      	uxtb	r3, r3
 800f030:	e001      	b.n	800f036 <put_fat+0xa8>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	b2db      	uxtb	r3, r3
 800f036:	697a      	ldr	r2, [r7, #20]
 800f038:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	2201      	movs	r2, #1
 800f03e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f044:	69bb      	ldr	r3, [r7, #24]
 800f046:	0a5b      	lsrs	r3, r3, #9
 800f048:	4413      	add	r3, r2
 800f04a:	4619      	mov	r1, r3
 800f04c:	68f8      	ldr	r0, [r7, #12]
 800f04e:	f7ff fe3b 	bl	800ecc8 <move_window>
 800f052:	4603      	mov	r3, r0
 800f054:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f056:	7ffb      	ldrb	r3, [r7, #31]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d17a      	bne.n	800f152 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f068:	4413      	add	r3, r2
 800f06a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	f003 0301 	and.w	r3, r3, #1
 800f072:	2b00      	cmp	r3, #0
 800f074:	d003      	beq.n	800f07e <put_fat+0xf0>
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	091b      	lsrs	r3, r3, #4
 800f07a:	b2db      	uxtb	r3, r3
 800f07c:	e00e      	b.n	800f09c <put_fat+0x10e>
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	b25b      	sxtb	r3, r3
 800f084:	f023 030f 	bic.w	r3, r3, #15
 800f088:	b25a      	sxtb	r2, r3
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	0a1b      	lsrs	r3, r3, #8
 800f08e:	b25b      	sxtb	r3, r3
 800f090:	f003 030f 	and.w	r3, r3, #15
 800f094:	b25b      	sxtb	r3, r3
 800f096:	4313      	orrs	r3, r2
 800f098:	b25b      	sxtb	r3, r3
 800f09a:	b2db      	uxtb	r3, r3
 800f09c:	697a      	ldr	r2, [r7, #20]
 800f09e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	70da      	strb	r2, [r3, #3]
			break;
 800f0a6:	e059      	b.n	800f15c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	0a1b      	lsrs	r3, r3, #8
 800f0b0:	4413      	add	r3, r2
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	68f8      	ldr	r0, [r7, #12]
 800f0b6:	f7ff fe07 	bl	800ecc8 <move_window>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f0be:	7ffb      	ldrb	r3, [r7, #31]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d148      	bne.n	800f156 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	005b      	lsls	r3, r3, #1
 800f0ce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f0d2:	4413      	add	r3, r2
 800f0d4:	687a      	ldr	r2, [r7, #4]
 800f0d6:	b292      	uxth	r2, r2
 800f0d8:	4611      	mov	r1, r2
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7ff fb89 	bl	800e7f2 <st_word>
			fs->wflag = 1;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	70da      	strb	r2, [r3, #3]
			break;
 800f0e6:	e039      	b.n	800f15c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	09db      	lsrs	r3, r3, #7
 800f0f0:	4413      	add	r3, r2
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	68f8      	ldr	r0, [r7, #12]
 800f0f6:	f7ff fde7 	bl	800ecc8 <move_window>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f0fe:	7ffb      	ldrb	r3, [r7, #31]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d12a      	bne.n	800f15a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	009b      	lsls	r3, r3, #2
 800f114:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f118:	4413      	add	r3, r2
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7ff fb46 	bl	800e7ac <ld_dword>
 800f120:	4603      	mov	r3, r0
 800f122:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f126:	4323      	orrs	r3, r4
 800f128:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	009b      	lsls	r3, r3, #2
 800f134:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f138:	4413      	add	r3, r2
 800f13a:	6879      	ldr	r1, [r7, #4]
 800f13c:	4618      	mov	r0, r3
 800f13e:	f7ff fb73 	bl	800e828 <st_dword>
			fs->wflag = 1;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2201      	movs	r2, #1
 800f146:	70da      	strb	r2, [r3, #3]
			break;
 800f148:	e008      	b.n	800f15c <put_fat+0x1ce>
		}
	}
 800f14a:	bf00      	nop
 800f14c:	e006      	b.n	800f15c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f14e:	bf00      	nop
 800f150:	e004      	b.n	800f15c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f152:	bf00      	nop
 800f154:	e002      	b.n	800f15c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f156:	bf00      	nop
 800f158:	e000      	b.n	800f15c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f15a:	bf00      	nop
	return res;
 800f15c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3724      	adds	r7, #36	; 0x24
 800f162:	46bd      	mov	sp, r7
 800f164:	bd90      	pop	{r4, r7, pc}

0800f166 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b088      	sub	sp, #32
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	60f8      	str	r0, [r7, #12]
 800f16e:	60b9      	str	r1, [r7, #8]
 800f170:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f172:	2300      	movs	r3, #0
 800f174:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d904      	bls.n	800f18c <remove_chain+0x26>
 800f182:	69bb      	ldr	r3, [r7, #24]
 800f184:	69db      	ldr	r3, [r3, #28]
 800f186:	68ba      	ldr	r2, [r7, #8]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d301      	bcc.n	800f190 <remove_chain+0x2a>
 800f18c:	2302      	movs	r3, #2
 800f18e:	e04b      	b.n	800f228 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d00c      	beq.n	800f1b0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f196:	f04f 32ff 	mov.w	r2, #4294967295
 800f19a:	6879      	ldr	r1, [r7, #4]
 800f19c:	69b8      	ldr	r0, [r7, #24]
 800f19e:	f7ff fef6 	bl	800ef8e <put_fat>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f1a6:	7ffb      	ldrb	r3, [r7, #31]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d001      	beq.n	800f1b0 <remove_chain+0x4a>
 800f1ac:	7ffb      	ldrb	r3, [r7, #31]
 800f1ae:	e03b      	b.n	800f228 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f1b0:	68b9      	ldr	r1, [r7, #8]
 800f1b2:	68f8      	ldr	r0, [r7, #12]
 800f1b4:	f7ff fe43 	bl	800ee3e <get_fat>
 800f1b8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d031      	beq.n	800f224 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d101      	bne.n	800f1ca <remove_chain+0x64>
 800f1c6:	2302      	movs	r3, #2
 800f1c8:	e02e      	b.n	800f228 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d0:	d101      	bne.n	800f1d6 <remove_chain+0x70>
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	e028      	b.n	800f228 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	68b9      	ldr	r1, [r7, #8]
 800f1da:	69b8      	ldr	r0, [r7, #24]
 800f1dc:	f7ff fed7 	bl	800ef8e <put_fat>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f1e4:	7ffb      	ldrb	r3, [r7, #31]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d001      	beq.n	800f1ee <remove_chain+0x88>
 800f1ea:	7ffb      	ldrb	r3, [r7, #31]
 800f1ec:	e01c      	b.n	800f228 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f1ee:	69bb      	ldr	r3, [r7, #24]
 800f1f0:	699a      	ldr	r2, [r3, #24]
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	69db      	ldr	r3, [r3, #28]
 800f1f6:	3b02      	subs	r3, #2
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d20b      	bcs.n	800f214 <remove_chain+0xae>
			fs->free_clst++;
 800f1fc:	69bb      	ldr	r3, [r7, #24]
 800f1fe:	699b      	ldr	r3, [r3, #24]
 800f200:	1c5a      	adds	r2, r3, #1
 800f202:	69bb      	ldr	r3, [r7, #24]
 800f204:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800f206:	69bb      	ldr	r3, [r7, #24]
 800f208:	791b      	ldrb	r3, [r3, #4]
 800f20a:	f043 0301 	orr.w	r3, r3, #1
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	69bb      	ldr	r3, [r7, #24]
 800f212:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f218:	69bb      	ldr	r3, [r7, #24]
 800f21a:	69db      	ldr	r3, [r3, #28]
 800f21c:	68ba      	ldr	r2, [r7, #8]
 800f21e:	429a      	cmp	r2, r3
 800f220:	d3c6      	bcc.n	800f1b0 <remove_chain+0x4a>
 800f222:	e000      	b.n	800f226 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f224:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f226:	2300      	movs	r3, #0
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3720      	adds	r7, #32
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}

0800f230 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b088      	sub	sp, #32
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d10d      	bne.n	800f262 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	695b      	ldr	r3, [r3, #20]
 800f24a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f24c:	69bb      	ldr	r3, [r7, #24]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d004      	beq.n	800f25c <create_chain+0x2c>
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	69db      	ldr	r3, [r3, #28]
 800f256:	69ba      	ldr	r2, [r7, #24]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d31b      	bcc.n	800f294 <create_chain+0x64>
 800f25c:	2301      	movs	r3, #1
 800f25e:	61bb      	str	r3, [r7, #24]
 800f260:	e018      	b.n	800f294 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f262:	6839      	ldr	r1, [r7, #0]
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7ff fdea 	bl	800ee3e <get_fat>
 800f26a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	2b01      	cmp	r3, #1
 800f270:	d801      	bhi.n	800f276 <create_chain+0x46>
 800f272:	2301      	movs	r3, #1
 800f274:	e070      	b.n	800f358 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f27c:	d101      	bne.n	800f282 <create_chain+0x52>
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	e06a      	b.n	800f358 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	69db      	ldr	r3, [r3, #28]
 800f286:	68fa      	ldr	r2, [r7, #12]
 800f288:	429a      	cmp	r2, r3
 800f28a:	d201      	bcs.n	800f290 <create_chain+0x60>
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	e063      	b.n	800f358 <create_chain+0x128>
		scl = clst;
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f298:	69fb      	ldr	r3, [r7, #28]
 800f29a:	3301      	adds	r3, #1
 800f29c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	69db      	ldr	r3, [r3, #28]
 800f2a2:	69fa      	ldr	r2, [r7, #28]
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d307      	bcc.n	800f2b8 <create_chain+0x88>
				ncl = 2;
 800f2a8:	2302      	movs	r3, #2
 800f2aa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f2ac:	69fa      	ldr	r2, [r7, #28]
 800f2ae:	69bb      	ldr	r3, [r7, #24]
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d901      	bls.n	800f2b8 <create_chain+0x88>
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	e04f      	b.n	800f358 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f2b8:	69f9      	ldr	r1, [r7, #28]
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7ff fdbf 	bl	800ee3e <get_fat>
 800f2c0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d00e      	beq.n	800f2e6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d003      	beq.n	800f2d6 <create_chain+0xa6>
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2d4:	d101      	bne.n	800f2da <create_chain+0xaa>
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	e03e      	b.n	800f358 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f2da:	69fa      	ldr	r2, [r7, #28]
 800f2dc:	69bb      	ldr	r3, [r7, #24]
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d1da      	bne.n	800f298 <create_chain+0x68>
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	e038      	b.n	800f358 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f2e6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ec:	69f9      	ldr	r1, [r7, #28]
 800f2ee:	6938      	ldr	r0, [r7, #16]
 800f2f0:	f7ff fe4d 	bl	800ef8e <put_fat>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f2f8:	7dfb      	ldrb	r3, [r7, #23]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d109      	bne.n	800f312 <create_chain+0xe2>
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d006      	beq.n	800f312 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f304:	69fa      	ldr	r2, [r7, #28]
 800f306:	6839      	ldr	r1, [r7, #0]
 800f308:	6938      	ldr	r0, [r7, #16]
 800f30a:	f7ff fe40 	bl	800ef8e <put_fat>
 800f30e:	4603      	mov	r3, r0
 800f310:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f312:	7dfb      	ldrb	r3, [r7, #23]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d116      	bne.n	800f346 <create_chain+0x116>
		fs->last_clst = ncl;
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	69fa      	ldr	r2, [r7, #28]
 800f31c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	699a      	ldr	r2, [r3, #24]
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	69db      	ldr	r3, [r3, #28]
 800f326:	3b02      	subs	r3, #2
 800f328:	429a      	cmp	r2, r3
 800f32a:	d804      	bhi.n	800f336 <create_chain+0x106>
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	699b      	ldr	r3, [r3, #24]
 800f330:	1e5a      	subs	r2, r3, #1
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	791b      	ldrb	r3, [r3, #4]
 800f33a:	f043 0301 	orr.w	r3, r3, #1
 800f33e:	b2da      	uxtb	r2, r3
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	711a      	strb	r2, [r3, #4]
 800f344:	e007      	b.n	800f356 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f346:	7dfb      	ldrb	r3, [r7, #23]
 800f348:	2b01      	cmp	r3, #1
 800f34a:	d102      	bne.n	800f352 <create_chain+0x122>
 800f34c:	f04f 33ff 	mov.w	r3, #4294967295
 800f350:	e000      	b.n	800f354 <create_chain+0x124>
 800f352:	2301      	movs	r3, #1
 800f354:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f356:	69fb      	ldr	r3, [r7, #28]
}
 800f358:	4618      	mov	r0, r3
 800f35a:	3720      	adds	r7, #32
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f360:	b480      	push	{r7}
 800f362:	b087      	sub	sp, #28
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f374:	3304      	adds	r3, #4
 800f376:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	0a5b      	lsrs	r3, r3, #9
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	8952      	ldrh	r2, [r2, #10]
 800f380:	fbb3 f3f2 	udiv	r3, r3, r2
 800f384:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	1d1a      	adds	r2, r3, #4
 800f38a:	613a      	str	r2, [r7, #16]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d101      	bne.n	800f39a <clmt_clust+0x3a>
 800f396:	2300      	movs	r3, #0
 800f398:	e010      	b.n	800f3bc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f39a:	697a      	ldr	r2, [r7, #20]
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d307      	bcc.n	800f3b2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f3a2:	697a      	ldr	r2, [r7, #20]
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	1ad3      	subs	r3, r2, r3
 800f3a8:	617b      	str	r3, [r7, #20]
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	3304      	adds	r3, #4
 800f3ae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f3b0:	e7e9      	b.n	800f386 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f3b2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	681a      	ldr	r2, [r3, #0]
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	4413      	add	r3, r2
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	371c      	adds	r7, #28
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b086      	sub	sp, #24
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f3de:	d204      	bcs.n	800f3ea <dir_sdi+0x22>
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	f003 031f 	and.w	r3, r3, #31
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d001      	beq.n	800f3ee <dir_sdi+0x26>
		return FR_INT_ERR;
 800f3ea:	2302      	movs	r3, #2
 800f3ec:	e063      	b.n	800f4b6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	683a      	ldr	r2, [r7, #0]
 800f3f2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d106      	bne.n	800f40e <dir_sdi+0x46>
 800f400:	693b      	ldr	r3, [r7, #16]
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	2b02      	cmp	r3, #2
 800f406:	d902      	bls.n	800f40e <dir_sdi+0x46>
		clst = fs->dirbase;
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f40c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d10c      	bne.n	800f42e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	095b      	lsrs	r3, r3, #5
 800f418:	693a      	ldr	r2, [r7, #16]
 800f41a:	8912      	ldrh	r2, [r2, #8]
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d301      	bcc.n	800f424 <dir_sdi+0x5c>
 800f420:	2302      	movs	r3, #2
 800f422:	e048      	b.n	800f4b6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	61da      	str	r2, [r3, #28]
 800f42c:	e029      	b.n	800f482 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	895b      	ldrh	r3, [r3, #10]
 800f432:	025b      	lsls	r3, r3, #9
 800f434:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f436:	e019      	b.n	800f46c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6979      	ldr	r1, [r7, #20]
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7ff fcfe 	bl	800ee3e <get_fat>
 800f442:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f44a:	d101      	bne.n	800f450 <dir_sdi+0x88>
 800f44c:	2301      	movs	r3, #1
 800f44e:	e032      	b.n	800f4b6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	2b01      	cmp	r3, #1
 800f454:	d904      	bls.n	800f460 <dir_sdi+0x98>
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	69db      	ldr	r3, [r3, #28]
 800f45a:	697a      	ldr	r2, [r7, #20]
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d301      	bcc.n	800f464 <dir_sdi+0x9c>
 800f460:	2302      	movs	r3, #2
 800f462:	e028      	b.n	800f4b6 <dir_sdi+0xee>
			ofs -= csz;
 800f464:	683a      	ldr	r2, [r7, #0]
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	1ad3      	subs	r3, r2, r3
 800f46a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f46c:	683a      	ldr	r2, [r7, #0]
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	429a      	cmp	r2, r3
 800f472:	d2e1      	bcs.n	800f438 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f474:	6979      	ldr	r1, [r7, #20]
 800f476:	6938      	ldr	r0, [r7, #16]
 800f478:	f7ff fcc2 	bl	800ee00 <clust2sect>
 800f47c:	4602      	mov	r2, r0
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	697a      	ldr	r2, [r7, #20]
 800f486:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	69db      	ldr	r3, [r3, #28]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d101      	bne.n	800f494 <dir_sdi+0xcc>
 800f490:	2302      	movs	r3, #2
 800f492:	e010      	b.n	800f4b6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	69da      	ldr	r2, [r3, #28]
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	0a5b      	lsrs	r3, r3, #9
 800f49c:	441a      	add	r2, r3
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4ae:	441a      	add	r2, r3
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f4b4:	2300      	movs	r3, #0
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3718      	adds	r7, #24
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b086      	sub	sp, #24
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	6078      	str	r0, [r7, #4]
 800f4c6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	695b      	ldr	r3, [r3, #20]
 800f4d2:	3320      	adds	r3, #32
 800f4d4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	69db      	ldr	r3, [r3, #28]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d003      	beq.n	800f4e6 <dir_next+0x28>
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f4e4:	d301      	bcc.n	800f4ea <dir_next+0x2c>
 800f4e6:	2304      	movs	r3, #4
 800f4e8:	e0aa      	b.n	800f640 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	f040 8098 	bne.w	800f626 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	69db      	ldr	r3, [r3, #28]
 800f4fa:	1c5a      	adds	r2, r3, #1
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	699b      	ldr	r3, [r3, #24]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d10b      	bne.n	800f520 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	095b      	lsrs	r3, r3, #5
 800f50c:	68fa      	ldr	r2, [r7, #12]
 800f50e:	8912      	ldrh	r2, [r2, #8]
 800f510:	4293      	cmp	r3, r2
 800f512:	f0c0 8088 	bcc.w	800f626 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2200      	movs	r2, #0
 800f51a:	61da      	str	r2, [r3, #28]
 800f51c:	2304      	movs	r3, #4
 800f51e:	e08f      	b.n	800f640 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	0a5b      	lsrs	r3, r3, #9
 800f524:	68fa      	ldr	r2, [r7, #12]
 800f526:	8952      	ldrh	r2, [r2, #10]
 800f528:	3a01      	subs	r2, #1
 800f52a:	4013      	ands	r3, r2
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d17a      	bne.n	800f626 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	699b      	ldr	r3, [r3, #24]
 800f536:	4619      	mov	r1, r3
 800f538:	4610      	mov	r0, r2
 800f53a:	f7ff fc80 	bl	800ee3e <get_fat>
 800f53e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	2b01      	cmp	r3, #1
 800f544:	d801      	bhi.n	800f54a <dir_next+0x8c>
 800f546:	2302      	movs	r3, #2
 800f548:	e07a      	b.n	800f640 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f550:	d101      	bne.n	800f556 <dir_next+0x98>
 800f552:	2301      	movs	r3, #1
 800f554:	e074      	b.n	800f640 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	69db      	ldr	r3, [r3, #28]
 800f55a:	697a      	ldr	r2, [r7, #20]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d358      	bcc.n	800f612 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d104      	bne.n	800f570 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2200      	movs	r2, #0
 800f56a:	61da      	str	r2, [r3, #28]
 800f56c:	2304      	movs	r3, #4
 800f56e:	e067      	b.n	800f640 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	699b      	ldr	r3, [r3, #24]
 800f576:	4619      	mov	r1, r3
 800f578:	4610      	mov	r0, r2
 800f57a:	f7ff fe59 	bl	800f230 <create_chain>
 800f57e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d101      	bne.n	800f58a <dir_next+0xcc>
 800f586:	2307      	movs	r3, #7
 800f588:	e05a      	b.n	800f640 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d101      	bne.n	800f594 <dir_next+0xd6>
 800f590:	2302      	movs	r3, #2
 800f592:	e055      	b.n	800f640 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f59a:	d101      	bne.n	800f5a0 <dir_next+0xe2>
 800f59c:	2301      	movs	r3, #1
 800f59e:	e04f      	b.n	800f640 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f5a0:	68f8      	ldr	r0, [r7, #12]
 800f5a2:	f7ff fb4d 	bl	800ec40 <sync_window>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d001      	beq.n	800f5b0 <dir_next+0xf2>
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	e047      	b.n	800f640 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	3338      	adds	r3, #56	; 0x38
 800f5b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f5b8:	2100      	movs	r1, #0
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7ff f981 	bl	800e8c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	613b      	str	r3, [r7, #16]
 800f5c4:	6979      	ldr	r1, [r7, #20]
 800f5c6:	68f8      	ldr	r0, [r7, #12]
 800f5c8:	f7ff fc1a 	bl	800ee00 <clust2sect>
 800f5cc:	4602      	mov	r2, r0
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	635a      	str	r2, [r3, #52]	; 0x34
 800f5d2:	e012      	b.n	800f5fa <dir_next+0x13c>
						fs->wflag = 1;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f5da:	68f8      	ldr	r0, [r7, #12]
 800f5dc:	f7ff fb30 	bl	800ec40 <sync_window>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d001      	beq.n	800f5ea <dir_next+0x12c>
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	e02a      	b.n	800f640 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	613b      	str	r3, [r7, #16]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5f4:	1c5a      	adds	r2, r3, #1
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	635a      	str	r2, [r3, #52]	; 0x34
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	895b      	ldrh	r3, [r3, #10]
 800f5fe:	461a      	mov	r2, r3
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	4293      	cmp	r3, r2
 800f604:	d3e6      	bcc.n	800f5d4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	1ad2      	subs	r2, r2, r3
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	697a      	ldr	r2, [r7, #20]
 800f616:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f618:	6979      	ldr	r1, [r7, #20]
 800f61a:	68f8      	ldr	r0, [r7, #12]
 800f61c:	f7ff fbf0 	bl	800ee00 <clust2sect>
 800f620:	4602      	mov	r2, r0
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	68ba      	ldr	r2, [r7, #8]
 800f62a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f638:	441a      	add	r2, r3
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f63e:	2300      	movs	r3, #0
}
 800f640:	4618      	mov	r0, r3
 800f642:	3718      	adds	r7, #24
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b086      	sub	sp, #24
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f658:	2100      	movs	r1, #0
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f7ff feb4 	bl	800f3c8 <dir_sdi>
 800f660:	4603      	mov	r3, r0
 800f662:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f664:	7dfb      	ldrb	r3, [r7, #23]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d12b      	bne.n	800f6c2 <dir_alloc+0x7a>
		n = 0;
 800f66a:	2300      	movs	r3, #0
 800f66c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	69db      	ldr	r3, [r3, #28]
 800f672:	4619      	mov	r1, r3
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	f7ff fb27 	bl	800ecc8 <move_window>
 800f67a:	4603      	mov	r3, r0
 800f67c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f67e:	7dfb      	ldrb	r3, [r7, #23]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d11d      	bne.n	800f6c0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6a1b      	ldr	r3, [r3, #32]
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	2be5      	cmp	r3, #229	; 0xe5
 800f68c:	d004      	beq.n	800f698 <dir_alloc+0x50>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6a1b      	ldr	r3, [r3, #32]
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d107      	bne.n	800f6a8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	3301      	adds	r3, #1
 800f69c:	613b      	str	r3, [r7, #16]
 800f69e:	693a      	ldr	r2, [r7, #16]
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d102      	bne.n	800f6ac <dir_alloc+0x64>
 800f6a6:	e00c      	b.n	800f6c2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f6ac:	2101      	movs	r1, #1
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f7ff ff05 	bl	800f4be <dir_next>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f6b8:	7dfb      	ldrb	r3, [r7, #23]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d0d7      	beq.n	800f66e <dir_alloc+0x26>
 800f6be:	e000      	b.n	800f6c2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f6c0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f6c2:	7dfb      	ldrb	r3, [r7, #23]
 800f6c4:	2b04      	cmp	r3, #4
 800f6c6:	d101      	bne.n	800f6cc <dir_alloc+0x84>
 800f6c8:	2307      	movs	r3, #7
 800f6ca:	75fb      	strb	r3, [r7, #23]
	return res;
 800f6cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3718      	adds	r7, #24
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b084      	sub	sp, #16
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
 800f6de:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	331a      	adds	r3, #26
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7ff f849 	bl	800e77c <ld_word>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	2b03      	cmp	r3, #3
 800f6f4:	d109      	bne.n	800f70a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	3314      	adds	r3, #20
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7ff f83e 	bl	800e77c <ld_word>
 800f700:	4603      	mov	r3, r0
 800f702:	041b      	lsls	r3, r3, #16
 800f704:	68fa      	ldr	r2, [r7, #12]
 800f706:	4313      	orrs	r3, r2
 800f708:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f70a:	68fb      	ldr	r3, [r7, #12]
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3710      	adds	r7, #16
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	331a      	adds	r3, #26
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	b292      	uxth	r2, r2
 800f728:	4611      	mov	r1, r2
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7ff f861 	bl	800e7f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	2b03      	cmp	r3, #3
 800f736:	d109      	bne.n	800f74c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	f103 0214 	add.w	r2, r3, #20
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	0c1b      	lsrs	r3, r3, #16
 800f742:	b29b      	uxth	r3, r3
 800f744:	4619      	mov	r1, r3
 800f746:	4610      	mov	r0, r2
 800f748:	f7ff f853 	bl	800e7f2 <st_word>
	}
}
 800f74c:	bf00      	nop
 800f74e:	3710      	adds	r7, #16
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f754:	b590      	push	{r4, r7, lr}
 800f756:	b087      	sub	sp, #28
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	331a      	adds	r3, #26
 800f762:	4618      	mov	r0, r3
 800f764:	f7ff f80a 	bl	800e77c <ld_word>
 800f768:	4603      	mov	r3, r0
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d001      	beq.n	800f772 <cmp_lfn+0x1e>
 800f76e:	2300      	movs	r3, #0
 800f770:	e059      	b.n	800f826 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f77a:	1e5a      	subs	r2, r3, #1
 800f77c:	4613      	mov	r3, r2
 800f77e:	005b      	lsls	r3, r3, #1
 800f780:	4413      	add	r3, r2
 800f782:	009b      	lsls	r3, r3, #2
 800f784:	4413      	add	r3, r2
 800f786:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f788:	2301      	movs	r3, #1
 800f78a:	81fb      	strh	r3, [r7, #14]
 800f78c:	2300      	movs	r3, #0
 800f78e:	613b      	str	r3, [r7, #16]
 800f790:	e033      	b.n	800f7fa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f792:	4a27      	ldr	r2, [pc, #156]	; (800f830 <cmp_lfn+0xdc>)
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	4413      	add	r3, r2
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	461a      	mov	r2, r3
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	4413      	add	r3, r2
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7fe ffeb 	bl	800e77c <ld_word>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f7aa:	89fb      	ldrh	r3, [r7, #14]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d01a      	beq.n	800f7e6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	2bfe      	cmp	r3, #254	; 0xfe
 800f7b4:	d812      	bhi.n	800f7dc <cmp_lfn+0x88>
 800f7b6:	89bb      	ldrh	r3, [r7, #12]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f002 f8d7 	bl	801196c <ff_wtoupper>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	461c      	mov	r4, r3
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	1c5a      	adds	r2, r3, #1
 800f7c6:	617a      	str	r2, [r7, #20]
 800f7c8:	005b      	lsls	r3, r3, #1
 800f7ca:	687a      	ldr	r2, [r7, #4]
 800f7cc:	4413      	add	r3, r2
 800f7ce:	881b      	ldrh	r3, [r3, #0]
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f002 f8cb 	bl	801196c <ff_wtoupper>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	429c      	cmp	r4, r3
 800f7da:	d001      	beq.n	800f7e0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f7dc:	2300      	movs	r3, #0
 800f7de:	e022      	b.n	800f826 <cmp_lfn+0xd2>
			}
			wc = uc;
 800f7e0:	89bb      	ldrh	r3, [r7, #12]
 800f7e2:	81fb      	strh	r3, [r7, #14]
 800f7e4:	e006      	b.n	800f7f4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f7e6:	89bb      	ldrh	r3, [r7, #12]
 800f7e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d001      	beq.n	800f7f4 <cmp_lfn+0xa0>
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	e018      	b.n	800f826 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	613b      	str	r3, [r7, #16]
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	2b0c      	cmp	r3, #12
 800f7fe:	d9c8      	bls.n	800f792 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d00b      	beq.n	800f824 <cmp_lfn+0xd0>
 800f80c:	89fb      	ldrh	r3, [r7, #14]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d008      	beq.n	800f824 <cmp_lfn+0xd0>
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	005b      	lsls	r3, r3, #1
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	4413      	add	r3, r2
 800f81a:	881b      	ldrh	r3, [r3, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d001      	beq.n	800f824 <cmp_lfn+0xd0>
 800f820:	2300      	movs	r3, #0
 800f822:	e000      	b.n	800f826 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800f824:	2301      	movs	r3, #1
}
 800f826:	4618      	mov	r0, r3
 800f828:	371c      	adds	r7, #28
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd90      	pop	{r4, r7, pc}
 800f82e:	bf00      	nop
 800f830:	080159cc 	.word	0x080159cc

0800f834 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b088      	sub	sp, #32
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	4611      	mov	r1, r2
 800f840:	461a      	mov	r2, r3
 800f842:	460b      	mov	r3, r1
 800f844:	71fb      	strb	r3, [r7, #7]
 800f846:	4613      	mov	r3, r2
 800f848:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	330d      	adds	r3, #13
 800f84e:	79ba      	ldrb	r2, [r7, #6]
 800f850:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	330b      	adds	r3, #11
 800f856:	220f      	movs	r2, #15
 800f858:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	330c      	adds	r3, #12
 800f85e:	2200      	movs	r2, #0
 800f860:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	331a      	adds	r3, #26
 800f866:	2100      	movs	r1, #0
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fe ffc2 	bl	800e7f2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f86e:	79fb      	ldrb	r3, [r7, #7]
 800f870:	1e5a      	subs	r2, r3, #1
 800f872:	4613      	mov	r3, r2
 800f874:	005b      	lsls	r3, r3, #1
 800f876:	4413      	add	r3, r2
 800f878:	009b      	lsls	r3, r3, #2
 800f87a:	4413      	add	r3, r2
 800f87c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f87e:	2300      	movs	r3, #0
 800f880:	82fb      	strh	r3, [r7, #22]
 800f882:	2300      	movs	r3, #0
 800f884:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f886:	8afb      	ldrh	r3, [r7, #22]
 800f888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d007      	beq.n	800f8a0 <put_lfn+0x6c>
 800f890:	69fb      	ldr	r3, [r7, #28]
 800f892:	1c5a      	adds	r2, r3, #1
 800f894:	61fa      	str	r2, [r7, #28]
 800f896:	005b      	lsls	r3, r3, #1
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	4413      	add	r3, r2
 800f89c:	881b      	ldrh	r3, [r3, #0]
 800f89e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f8a0:	4a17      	ldr	r2, [pc, #92]	; (800f900 <put_lfn+0xcc>)
 800f8a2:	69bb      	ldr	r3, [r7, #24]
 800f8a4:	4413      	add	r3, r2
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	8afa      	ldrh	r2, [r7, #22]
 800f8b0:	4611      	mov	r1, r2
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7fe ff9d 	bl	800e7f2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f8b8:	8afb      	ldrh	r3, [r7, #22]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d102      	bne.n	800f8c4 <put_lfn+0x90>
 800f8be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8c2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f8c4:	69bb      	ldr	r3, [r7, #24]
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	61bb      	str	r3, [r7, #24]
 800f8ca:	69bb      	ldr	r3, [r7, #24]
 800f8cc:	2b0c      	cmp	r3, #12
 800f8ce:	d9da      	bls.n	800f886 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f8d0:	8afb      	ldrh	r3, [r7, #22]
 800f8d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d006      	beq.n	800f8e8 <put_lfn+0xb4>
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	005b      	lsls	r3, r3, #1
 800f8de:	68fa      	ldr	r2, [r7, #12]
 800f8e0:	4413      	add	r3, r2
 800f8e2:	881b      	ldrh	r3, [r3, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d103      	bne.n	800f8f0 <put_lfn+0xbc>
 800f8e8:	79fb      	ldrb	r3, [r7, #7]
 800f8ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8ee:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	79fa      	ldrb	r2, [r7, #7]
 800f8f4:	701a      	strb	r2, [r3, #0]
}
 800f8f6:	bf00      	nop
 800f8f8:	3720      	adds	r7, #32
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	080159cc 	.word	0x080159cc

0800f904 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b08c      	sub	sp, #48	; 0x30
 800f908:	af00      	add	r7, sp, #0
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	607a      	str	r2, [r7, #4]
 800f910:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f912:	220b      	movs	r2, #11
 800f914:	68b9      	ldr	r1, [r7, #8]
 800f916:	68f8      	ldr	r0, [r7, #12]
 800f918:	f7fe ffb2 	bl	800e880 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	2b05      	cmp	r3, #5
 800f920:	d92b      	bls.n	800f97a <gen_numname+0x76>
		sr = seq;
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f926:	e022      	b.n	800f96e <gen_numname+0x6a>
			wc = *lfn++;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	1c9a      	adds	r2, r3, #2
 800f92c:	607a      	str	r2, [r7, #4]
 800f92e:	881b      	ldrh	r3, [r3, #0]
 800f930:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f932:	2300      	movs	r3, #0
 800f934:	62bb      	str	r3, [r7, #40]	; 0x28
 800f936:	e017      	b.n	800f968 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	005a      	lsls	r2, r3, #1
 800f93c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f93e:	f003 0301 	and.w	r3, r3, #1
 800f942:	4413      	add	r3, r2
 800f944:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f946:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f948:	085b      	lsrs	r3, r3, #1
 800f94a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f952:	2b00      	cmp	r3, #0
 800f954:	d005      	beq.n	800f962 <gen_numname+0x5e>
 800f956:	69fb      	ldr	r3, [r7, #28]
 800f958:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f95c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f960:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f964:	3301      	adds	r3, #1
 800f966:	62bb      	str	r3, [r7, #40]	; 0x28
 800f968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f96a:	2b0f      	cmp	r3, #15
 800f96c:	d9e4      	bls.n	800f938 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	881b      	ldrh	r3, [r3, #0]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d1d8      	bne.n	800f928 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f976:	69fb      	ldr	r3, [r7, #28]
 800f978:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f97a:	2307      	movs	r3, #7
 800f97c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	b2db      	uxtb	r3, r3
 800f982:	f003 030f 	and.w	r3, r3, #15
 800f986:	b2db      	uxtb	r3, r3
 800f988:	3330      	adds	r3, #48	; 0x30
 800f98a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f98e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f992:	2b39      	cmp	r3, #57	; 0x39
 800f994:	d904      	bls.n	800f9a0 <gen_numname+0x9c>
 800f996:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f99a:	3307      	adds	r3, #7
 800f99c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a2:	1e5a      	subs	r2, r3, #1
 800f9a4:	62ba      	str	r2, [r7, #40]	; 0x28
 800f9a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f9aa:	4413      	add	r3, r2
 800f9ac:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f9b0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	091b      	lsrs	r3, r3, #4
 800f9b8:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d1de      	bne.n	800f97e <gen_numname+0x7a>
	ns[i] = '~';
 800f9c0:	f107 0214 	add.w	r2, r7, #20
 800f9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c6:	4413      	add	r3, r2
 800f9c8:	227e      	movs	r2, #126	; 0x7e
 800f9ca:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	627b      	str	r3, [r7, #36]	; 0x24
 800f9d0:	e002      	b.n	800f9d8 <gen_numname+0xd4>
 800f9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	627b      	str	r3, [r7, #36]	; 0x24
 800f9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d205      	bcs.n	800f9ec <gen_numname+0xe8>
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e4:	4413      	add	r3, r2
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	2b20      	cmp	r3, #32
 800f9ea:	d1f2      	bne.n	800f9d2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ee:	2b07      	cmp	r3, #7
 800f9f0:	d808      	bhi.n	800fa04 <gen_numname+0x100>
 800f9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f4:	1c5a      	adds	r2, r3, #1
 800f9f6:	62ba      	str	r2, [r7, #40]	; 0x28
 800f9f8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f9fc:	4413      	add	r3, r2
 800f9fe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800fa02:	e000      	b.n	800fa06 <gen_numname+0x102>
 800fa04:	2120      	movs	r1, #32
 800fa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa08:	1c5a      	adds	r2, r3, #1
 800fa0a:	627a      	str	r2, [r7, #36]	; 0x24
 800fa0c:	68fa      	ldr	r2, [r7, #12]
 800fa0e:	4413      	add	r3, r2
 800fa10:	460a      	mov	r2, r1
 800fa12:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	2b07      	cmp	r3, #7
 800fa18:	d9e8      	bls.n	800f9ec <gen_numname+0xe8>
}
 800fa1a:	bf00      	nop
 800fa1c:	bf00      	nop
 800fa1e:	3730      	adds	r7, #48	; 0x30
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b085      	sub	sp, #20
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800fa30:	230b      	movs	r3, #11
 800fa32:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800fa34:	7bfb      	ldrb	r3, [r7, #15]
 800fa36:	b2da      	uxtb	r2, r3
 800fa38:	0852      	lsrs	r2, r2, #1
 800fa3a:	01db      	lsls	r3, r3, #7
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	b2da      	uxtb	r2, r3
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	1c59      	adds	r1, r3, #1
 800fa44:	6079      	str	r1, [r7, #4]
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	4413      	add	r3, r2
 800fa4a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	3b01      	subs	r3, #1
 800fa50:	60bb      	str	r3, [r7, #8]
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d1ed      	bne.n	800fa34 <sum_sfn+0x10>
	return sum;
 800fa58:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3714      	adds	r7, #20
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr

0800fa66 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fa66:	b580      	push	{r7, lr}
 800fa68:	b086      	sub	sp, #24
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fa74:	2100      	movs	r1, #0
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7ff fca6 	bl	800f3c8 <dir_sdi>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fa80:	7dfb      	ldrb	r3, [r7, #23]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d001      	beq.n	800fa8a <dir_find+0x24>
 800fa86:	7dfb      	ldrb	r3, [r7, #23]
 800fa88:	e0a9      	b.n	800fbde <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fa8a:	23ff      	movs	r3, #255	; 0xff
 800fa8c:	753b      	strb	r3, [r7, #20]
 800fa8e:	7d3b      	ldrb	r3, [r7, #20]
 800fa90:	757b      	strb	r3, [r7, #21]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f04f 32ff 	mov.w	r2, #4294967295
 800fa98:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	69db      	ldr	r3, [r3, #28]
 800fa9e:	4619      	mov	r1, r3
 800faa0:	6938      	ldr	r0, [r7, #16]
 800faa2:	f7ff f911 	bl	800ecc8 <move_window>
 800faa6:	4603      	mov	r3, r0
 800faa8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800faaa:	7dfb      	ldrb	r3, [r7, #23]
 800faac:	2b00      	cmp	r3, #0
 800faae:	f040 8090 	bne.w	800fbd2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6a1b      	ldr	r3, [r3, #32]
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800faba:	7dbb      	ldrb	r3, [r7, #22]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d102      	bne.n	800fac6 <dir_find+0x60>
 800fac0:	2304      	movs	r3, #4
 800fac2:	75fb      	strb	r3, [r7, #23]
 800fac4:	e08a      	b.n	800fbdc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6a1b      	ldr	r3, [r3, #32]
 800faca:	330b      	adds	r3, #11
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fad2:	73fb      	strb	r3, [r7, #15]
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	7bfa      	ldrb	r2, [r7, #15]
 800fad8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800fada:	7dbb      	ldrb	r3, [r7, #22]
 800fadc:	2be5      	cmp	r3, #229	; 0xe5
 800fade:	d007      	beq.n	800faf0 <dir_find+0x8a>
 800fae0:	7bfb      	ldrb	r3, [r7, #15]
 800fae2:	f003 0308 	and.w	r3, r3, #8
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d009      	beq.n	800fafe <dir_find+0x98>
 800faea:	7bfb      	ldrb	r3, [r7, #15]
 800faec:	2b0f      	cmp	r3, #15
 800faee:	d006      	beq.n	800fafe <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800faf0:	23ff      	movs	r3, #255	; 0xff
 800faf2:	757b      	strb	r3, [r7, #21]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f04f 32ff 	mov.w	r2, #4294967295
 800fafa:	631a      	str	r2, [r3, #48]	; 0x30
 800fafc:	e05e      	b.n	800fbbc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800fafe:	7bfb      	ldrb	r3, [r7, #15]
 800fb00:	2b0f      	cmp	r3, #15
 800fb02:	d136      	bne.n	800fb72 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d154      	bne.n	800fbbc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800fb12:	7dbb      	ldrb	r3, [r7, #22]
 800fb14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d00d      	beq.n	800fb38 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6a1b      	ldr	r3, [r3, #32]
 800fb20:	7b5b      	ldrb	r3, [r3, #13]
 800fb22:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800fb24:	7dbb      	ldrb	r3, [r7, #22]
 800fb26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb2a:	75bb      	strb	r3, [r7, #22]
 800fb2c:	7dbb      	ldrb	r3, [r7, #22]
 800fb2e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	695a      	ldr	r2, [r3, #20]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fb38:	7dba      	ldrb	r2, [r7, #22]
 800fb3a:	7d7b      	ldrb	r3, [r7, #21]
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	d115      	bne.n	800fb6c <dir_find+0x106>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6a1b      	ldr	r3, [r3, #32]
 800fb44:	330d      	adds	r3, #13
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	7d3a      	ldrb	r2, [r7, #20]
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d10e      	bne.n	800fb6c <dir_find+0x106>
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	68da      	ldr	r2, [r3, #12]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6a1b      	ldr	r3, [r3, #32]
 800fb56:	4619      	mov	r1, r3
 800fb58:	4610      	mov	r0, r2
 800fb5a:	f7ff fdfb 	bl	800f754 <cmp_lfn>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d003      	beq.n	800fb6c <dir_find+0x106>
 800fb64:	7d7b      	ldrb	r3, [r7, #21]
 800fb66:	3b01      	subs	r3, #1
 800fb68:	b2db      	uxtb	r3, r3
 800fb6a:	e000      	b.n	800fb6e <dir_find+0x108>
 800fb6c:	23ff      	movs	r3, #255	; 0xff
 800fb6e:	757b      	strb	r3, [r7, #21]
 800fb70:	e024      	b.n	800fbbc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fb72:	7d7b      	ldrb	r3, [r7, #21]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d109      	bne.n	800fb8c <dir_find+0x126>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6a1b      	ldr	r3, [r3, #32]
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7ff ff51 	bl	800fa24 <sum_sfn>
 800fb82:	4603      	mov	r3, r0
 800fb84:	461a      	mov	r2, r3
 800fb86:	7d3b      	ldrb	r3, [r7, #20]
 800fb88:	4293      	cmp	r3, r2
 800fb8a:	d024      	beq.n	800fbd6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb92:	f003 0301 	and.w	r3, r3, #1
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d10a      	bne.n	800fbb0 <dir_find+0x14a>
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6a18      	ldr	r0, [r3, #32]
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	3324      	adds	r3, #36	; 0x24
 800fba2:	220b      	movs	r2, #11
 800fba4:	4619      	mov	r1, r3
 800fba6:	f7fe fea7 	bl	800e8f8 <mem_cmp>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d014      	beq.n	800fbda <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fbb0:	23ff      	movs	r3, #255	; 0xff
 800fbb2:	757b      	strb	r3, [r7, #21]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f04f 32ff 	mov.w	r2, #4294967295
 800fbba:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fbbc:	2100      	movs	r1, #0
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f7ff fc7d 	bl	800f4be <dir_next>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fbc8:	7dfb      	ldrb	r3, [r7, #23]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	f43f af65 	beq.w	800fa9a <dir_find+0x34>
 800fbd0:	e004      	b.n	800fbdc <dir_find+0x176>
		if (res != FR_OK) break;
 800fbd2:	bf00      	nop
 800fbd4:	e002      	b.n	800fbdc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fbd6:	bf00      	nop
 800fbd8:	e000      	b.n	800fbdc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fbda:	bf00      	nop

	return res;
 800fbdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3718      	adds	r7, #24
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
	...

0800fbe8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b08c      	sub	sp, #48	; 0x30
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fbfc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d001      	beq.n	800fc08 <dir_register+0x20>
 800fc04:	2306      	movs	r3, #6
 800fc06:	e0e0      	b.n	800fdca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800fc08:	2300      	movs	r3, #0
 800fc0a:	627b      	str	r3, [r7, #36]	; 0x24
 800fc0c:	e002      	b.n	800fc14 <dir_register+0x2c>
 800fc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc10:	3301      	adds	r3, #1
 800fc12:	627b      	str	r3, [r7, #36]	; 0x24
 800fc14:	69fb      	ldr	r3, [r7, #28]
 800fc16:	68da      	ldr	r2, [r3, #12]
 800fc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1a:	005b      	lsls	r3, r3, #1
 800fc1c:	4413      	add	r3, r2
 800fc1e:	881b      	ldrh	r3, [r3, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d1f4      	bne.n	800fc0e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800fc2a:	f107 030c 	add.w	r3, r7, #12
 800fc2e:	220c      	movs	r2, #12
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7fe fe25 	bl	800e880 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800fc36:	7dfb      	ldrb	r3, [r7, #23]
 800fc38:	f003 0301 	and.w	r3, r3, #1
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d032      	beq.n	800fca6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2240      	movs	r2, #64	; 0x40
 800fc44:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800fc48:	2301      	movs	r3, #1
 800fc4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc4c:	e016      	b.n	800fc7c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	68da      	ldr	r2, [r3, #12]
 800fc58:	f107 010c 	add.w	r1, r7, #12
 800fc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc5e:	f7ff fe51 	bl	800f904 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f7ff feff 	bl	800fa66 <dir_find>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800fc6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d106      	bne.n	800fc84 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800fc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc78:	3301      	adds	r3, #1
 800fc7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7e:	2b63      	cmp	r3, #99	; 0x63
 800fc80:	d9e5      	bls.n	800fc4e <dir_register+0x66>
 800fc82:	e000      	b.n	800fc86 <dir_register+0x9e>
			if (res != FR_OK) break;
 800fc84:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800fc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc88:	2b64      	cmp	r3, #100	; 0x64
 800fc8a:	d101      	bne.n	800fc90 <dir_register+0xa8>
 800fc8c:	2307      	movs	r3, #7
 800fc8e:	e09c      	b.n	800fdca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800fc90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc94:	2b04      	cmp	r3, #4
 800fc96:	d002      	beq.n	800fc9e <dir_register+0xb6>
 800fc98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc9c:	e095      	b.n	800fdca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800fc9e:	7dfa      	ldrb	r2, [r7, #23]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800fca6:	7dfb      	ldrb	r3, [r7, #23]
 800fca8:	f003 0302 	and.w	r3, r3, #2
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d007      	beq.n	800fcc0 <dir_register+0xd8>
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb2:	330c      	adds	r3, #12
 800fcb4:	4a47      	ldr	r2, [pc, #284]	; (800fdd4 <dir_register+0x1ec>)
 800fcb6:	fba2 2303 	umull	r2, r3, r2, r3
 800fcba:	089b      	lsrs	r3, r3, #2
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	e000      	b.n	800fcc2 <dir_register+0xda>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800fcc4:	6a39      	ldr	r1, [r7, #32]
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f7ff fcbe 	bl	800f648 <dir_alloc>
 800fccc:	4603      	mov	r3, r0
 800fcce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800fcd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d148      	bne.n	800fd6c <dir_register+0x184>
 800fcda:	6a3b      	ldr	r3, [r7, #32]
 800fcdc:	3b01      	subs	r3, #1
 800fcde:	623b      	str	r3, [r7, #32]
 800fce0:	6a3b      	ldr	r3, [r7, #32]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d042      	beq.n	800fd6c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	695a      	ldr	r2, [r3, #20]
 800fcea:	6a3b      	ldr	r3, [r7, #32]
 800fcec:	015b      	lsls	r3, r3, #5
 800fcee:	1ad3      	subs	r3, r2, r3
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f7ff fb68 	bl	800f3c8 <dir_sdi>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800fcfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d132      	bne.n	800fd6c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	3324      	adds	r3, #36	; 0x24
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7ff fe8a 	bl	800fa24 <sum_sfn>
 800fd10:	4603      	mov	r3, r0
 800fd12:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	69db      	ldr	r3, [r3, #28]
 800fd18:	4619      	mov	r1, r3
 800fd1a:	69f8      	ldr	r0, [r7, #28]
 800fd1c:	f7fe ffd4 	bl	800ecc8 <move_window>
 800fd20:	4603      	mov	r3, r0
 800fd22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800fd26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d11d      	bne.n	800fd6a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800fd2e:	69fb      	ldr	r3, [r7, #28]
 800fd30:	68d8      	ldr	r0, [r3, #12]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6a19      	ldr	r1, [r3, #32]
 800fd36:	6a3b      	ldr	r3, [r7, #32]
 800fd38:	b2da      	uxtb	r2, r3
 800fd3a:	7efb      	ldrb	r3, [r7, #27]
 800fd3c:	f7ff fd7a 	bl	800f834 <put_lfn>
				fs->wflag = 1;
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	2201      	movs	r2, #1
 800fd44:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800fd46:	2100      	movs	r1, #0
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f7ff fbb8 	bl	800f4be <dir_next>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800fd54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d107      	bne.n	800fd6c <dir_register+0x184>
 800fd5c:	6a3b      	ldr	r3, [r7, #32]
 800fd5e:	3b01      	subs	r3, #1
 800fd60:	623b      	str	r3, [r7, #32]
 800fd62:	6a3b      	ldr	r3, [r7, #32]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d1d5      	bne.n	800fd14 <dir_register+0x12c>
 800fd68:	e000      	b.n	800fd6c <dir_register+0x184>
				if (res != FR_OK) break;
 800fd6a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fd6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d128      	bne.n	800fdc6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	69db      	ldr	r3, [r3, #28]
 800fd78:	4619      	mov	r1, r3
 800fd7a:	69f8      	ldr	r0, [r7, #28]
 800fd7c:	f7fe ffa4 	bl	800ecc8 <move_window>
 800fd80:	4603      	mov	r3, r0
 800fd82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800fd86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d11b      	bne.n	800fdc6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6a1b      	ldr	r3, [r3, #32]
 800fd92:	2220      	movs	r2, #32
 800fd94:	2100      	movs	r1, #0
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7fe fd93 	bl	800e8c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6a18      	ldr	r0, [r3, #32]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	3324      	adds	r3, #36	; 0x24
 800fda4:	220b      	movs	r2, #11
 800fda6:	4619      	mov	r1, r3
 800fda8:	f7fe fd6a 	bl	800e880 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6a1b      	ldr	r3, [r3, #32]
 800fdb6:	330c      	adds	r3, #12
 800fdb8:	f002 0218 	and.w	r2, r2, #24
 800fdbc:	b2d2      	uxtb	r2, r2
 800fdbe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800fdc0:	69fb      	ldr	r3, [r7, #28]
 800fdc2:	2201      	movs	r2, #1
 800fdc4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fdc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3730      	adds	r7, #48	; 0x30
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	4ec4ec4f 	.word	0x4ec4ec4f

0800fdd8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b08a      	sub	sp, #40	; 0x28
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	613b      	str	r3, [r7, #16]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	68db      	ldr	r3, [r3, #12]
 800fdee:	60fb      	str	r3, [r7, #12]
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	617b      	str	r3, [r7, #20]
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800fdf8:	69bb      	ldr	r3, [r7, #24]
 800fdfa:	1c5a      	adds	r2, r3, #1
 800fdfc:	61ba      	str	r2, [r7, #24]
 800fdfe:	693a      	ldr	r2, [r7, #16]
 800fe00:	4413      	add	r3, r2
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800fe06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe08:	2b1f      	cmp	r3, #31
 800fe0a:	d940      	bls.n	800fe8e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800fe0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe0e:	2b2f      	cmp	r3, #47	; 0x2f
 800fe10:	d006      	beq.n	800fe20 <create_name+0x48>
 800fe12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe14:	2b5c      	cmp	r3, #92	; 0x5c
 800fe16:	d110      	bne.n	800fe3a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fe18:	e002      	b.n	800fe20 <create_name+0x48>
 800fe1a:	69bb      	ldr	r3, [r7, #24]
 800fe1c:	3301      	adds	r3, #1
 800fe1e:	61bb      	str	r3, [r7, #24]
 800fe20:	693a      	ldr	r2, [r7, #16]
 800fe22:	69bb      	ldr	r3, [r7, #24]
 800fe24:	4413      	add	r3, r2
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	2b2f      	cmp	r3, #47	; 0x2f
 800fe2a:	d0f6      	beq.n	800fe1a <create_name+0x42>
 800fe2c:	693a      	ldr	r2, [r7, #16]
 800fe2e:	69bb      	ldr	r3, [r7, #24]
 800fe30:	4413      	add	r3, r2
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	2b5c      	cmp	r3, #92	; 0x5c
 800fe36:	d0f0      	beq.n	800fe1a <create_name+0x42>
			break;
 800fe38:	e02a      	b.n	800fe90 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	2bfe      	cmp	r3, #254	; 0xfe
 800fe3e:	d901      	bls.n	800fe44 <create_name+0x6c>
 800fe40:	2306      	movs	r3, #6
 800fe42:	e177      	b.n	8010134 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800fe44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800fe4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe4c:	2101      	movs	r1, #1
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f001 fd50 	bl	80118f4 <ff_convert>
 800fe54:	4603      	mov	r3, r0
 800fe56:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800fe58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d101      	bne.n	800fe62 <create_name+0x8a>
 800fe5e:	2306      	movs	r3, #6
 800fe60:	e168      	b.n	8010134 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800fe62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe64:	2b7f      	cmp	r3, #127	; 0x7f
 800fe66:	d809      	bhi.n	800fe7c <create_name+0xa4>
 800fe68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	48b3      	ldr	r0, [pc, #716]	; (801013c <create_name+0x364>)
 800fe6e:	f7fe fd6a 	bl	800e946 <chk_chr>
 800fe72:	4603      	mov	r3, r0
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d001      	beq.n	800fe7c <create_name+0xa4>
 800fe78:	2306      	movs	r3, #6
 800fe7a:	e15b      	b.n	8010134 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	1c5a      	adds	r2, r3, #1
 800fe80:	617a      	str	r2, [r7, #20]
 800fe82:	005b      	lsls	r3, r3, #1
 800fe84:	68fa      	ldr	r2, [r7, #12]
 800fe86:	4413      	add	r3, r2
 800fe88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fe8a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800fe8c:	e7b4      	b.n	800fdf8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800fe8e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800fe90:	693a      	ldr	r2, [r7, #16]
 800fe92:	69bb      	ldr	r3, [r7, #24]
 800fe94:	441a      	add	r2, r3
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fe9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe9c:	2b1f      	cmp	r3, #31
 800fe9e:	d801      	bhi.n	800fea4 <create_name+0xcc>
 800fea0:	2304      	movs	r3, #4
 800fea2:	e000      	b.n	800fea6 <create_name+0xce>
 800fea4:	2300      	movs	r3, #0
 800fea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800feaa:	e011      	b.n	800fed0 <create_name+0xf8>
		w = lfn[di - 1];
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800feb2:	3b01      	subs	r3, #1
 800feb4:	005b      	lsls	r3, r3, #1
 800feb6:	68fa      	ldr	r2, [r7, #12]
 800feb8:	4413      	add	r3, r2
 800feba:	881b      	ldrh	r3, [r3, #0]
 800febc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800febe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fec0:	2b20      	cmp	r3, #32
 800fec2:	d002      	beq.n	800feca <create_name+0xf2>
 800fec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fec6:	2b2e      	cmp	r3, #46	; 0x2e
 800fec8:	d106      	bne.n	800fed8 <create_name+0x100>
		di--;
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	3b01      	subs	r3, #1
 800fece:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d1ea      	bne.n	800feac <create_name+0xd4>
 800fed6:	e000      	b.n	800feda <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800fed8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	005b      	lsls	r3, r3, #1
 800fede:	68fa      	ldr	r2, [r7, #12]
 800fee0:	4413      	add	r3, r2
 800fee2:	2200      	movs	r2, #0
 800fee4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d101      	bne.n	800fef0 <create_name+0x118>
 800feec:	2306      	movs	r3, #6
 800feee:	e121      	b.n	8010134 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	3324      	adds	r3, #36	; 0x24
 800fef4:	220b      	movs	r2, #11
 800fef6:	2120      	movs	r1, #32
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7fe fce2 	bl	800e8c2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800fefe:	2300      	movs	r3, #0
 800ff00:	61bb      	str	r3, [r7, #24]
 800ff02:	e002      	b.n	800ff0a <create_name+0x132>
 800ff04:	69bb      	ldr	r3, [r7, #24]
 800ff06:	3301      	adds	r3, #1
 800ff08:	61bb      	str	r3, [r7, #24]
 800ff0a:	69bb      	ldr	r3, [r7, #24]
 800ff0c:	005b      	lsls	r3, r3, #1
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	4413      	add	r3, r2
 800ff12:	881b      	ldrh	r3, [r3, #0]
 800ff14:	2b20      	cmp	r3, #32
 800ff16:	d0f5      	beq.n	800ff04 <create_name+0x12c>
 800ff18:	69bb      	ldr	r3, [r7, #24]
 800ff1a:	005b      	lsls	r3, r3, #1
 800ff1c:	68fa      	ldr	r2, [r7, #12]
 800ff1e:	4413      	add	r3, r2
 800ff20:	881b      	ldrh	r3, [r3, #0]
 800ff22:	2b2e      	cmp	r3, #46	; 0x2e
 800ff24:	d0ee      	beq.n	800ff04 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ff26:	69bb      	ldr	r3, [r7, #24]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d009      	beq.n	800ff40 <create_name+0x168>
 800ff2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff30:	f043 0303 	orr.w	r3, r3, #3
 800ff34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ff38:	e002      	b.n	800ff40 <create_name+0x168>
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	3b01      	subs	r3, #1
 800ff3e:	617b      	str	r3, [r7, #20]
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d009      	beq.n	800ff5a <create_name+0x182>
 800ff46:	697b      	ldr	r3, [r7, #20]
 800ff48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ff4c:	3b01      	subs	r3, #1
 800ff4e:	005b      	lsls	r3, r3, #1
 800ff50:	68fa      	ldr	r2, [r7, #12]
 800ff52:	4413      	add	r3, r2
 800ff54:	881b      	ldrh	r3, [r3, #0]
 800ff56:	2b2e      	cmp	r3, #46	; 0x2e
 800ff58:	d1ef      	bne.n	800ff3a <create_name+0x162>

	i = b = 0; ni = 8;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ff60:	2300      	movs	r3, #0
 800ff62:	623b      	str	r3, [r7, #32]
 800ff64:	2308      	movs	r3, #8
 800ff66:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ff68:	69bb      	ldr	r3, [r7, #24]
 800ff6a:	1c5a      	adds	r2, r3, #1
 800ff6c:	61ba      	str	r2, [r7, #24]
 800ff6e:	005b      	lsls	r3, r3, #1
 800ff70:	68fa      	ldr	r2, [r7, #12]
 800ff72:	4413      	add	r3, r2
 800ff74:	881b      	ldrh	r3, [r3, #0]
 800ff76:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ff78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	f000 8090 	beq.w	80100a0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ff80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff82:	2b20      	cmp	r3, #32
 800ff84:	d006      	beq.n	800ff94 <create_name+0x1bc>
 800ff86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff88:	2b2e      	cmp	r3, #46	; 0x2e
 800ff8a:	d10a      	bne.n	800ffa2 <create_name+0x1ca>
 800ff8c:	69ba      	ldr	r2, [r7, #24]
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d006      	beq.n	800ffa2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ff94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff98:	f043 0303 	orr.w	r3, r3, #3
 800ff9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ffa0:	e07d      	b.n	801009e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ffa2:	6a3a      	ldr	r2, [r7, #32]
 800ffa4:	69fb      	ldr	r3, [r7, #28]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d203      	bcs.n	800ffb2 <create_name+0x1da>
 800ffaa:	69ba      	ldr	r2, [r7, #24]
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	d123      	bne.n	800fffa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ffb2:	69fb      	ldr	r3, [r7, #28]
 800ffb4:	2b0b      	cmp	r3, #11
 800ffb6:	d106      	bne.n	800ffc6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ffb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffbc:	f043 0303 	orr.w	r3, r3, #3
 800ffc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ffc4:	e06f      	b.n	80100a6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ffc6:	69ba      	ldr	r2, [r7, #24]
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d005      	beq.n	800ffda <create_name+0x202>
 800ffce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffd2:	f043 0303 	orr.w	r3, r3, #3
 800ffd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ffda:	69ba      	ldr	r2, [r7, #24]
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d860      	bhi.n	80100a4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	61bb      	str	r3, [r7, #24]
 800ffe6:	2308      	movs	r3, #8
 800ffe8:	623b      	str	r3, [r7, #32]
 800ffea:	230b      	movs	r3, #11
 800ffec:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ffee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fff2:	009b      	lsls	r3, r3, #2
 800fff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fff8:	e051      	b.n	801009e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800fffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fffc:	2b7f      	cmp	r3, #127	; 0x7f
 800fffe:	d914      	bls.n	801002a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010002:	2100      	movs	r1, #0
 8010004:	4618      	mov	r0, r3
 8010006:	f001 fc75 	bl	80118f4 <ff_convert>
 801000a:	4603      	mov	r3, r0
 801000c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801000e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010010:	2b00      	cmp	r3, #0
 8010012:	d004      	beq.n	801001e <create_name+0x246>
 8010014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010016:	3b80      	subs	r3, #128	; 0x80
 8010018:	4a49      	ldr	r2, [pc, #292]	; (8010140 <create_name+0x368>)
 801001a:	5cd3      	ldrb	r3, [r2, r3]
 801001c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801001e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010022:	f043 0302 	orr.w	r3, r3, #2
 8010026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801002a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801002c:	2b00      	cmp	r3, #0
 801002e:	d007      	beq.n	8010040 <create_name+0x268>
 8010030:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010032:	4619      	mov	r1, r3
 8010034:	4843      	ldr	r0, [pc, #268]	; (8010144 <create_name+0x36c>)
 8010036:	f7fe fc86 	bl	800e946 <chk_chr>
 801003a:	4603      	mov	r3, r0
 801003c:	2b00      	cmp	r3, #0
 801003e:	d008      	beq.n	8010052 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010040:	235f      	movs	r3, #95	; 0x5f
 8010042:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010048:	f043 0303 	orr.w	r3, r3, #3
 801004c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010050:	e01b      	b.n	801008a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010054:	2b40      	cmp	r3, #64	; 0x40
 8010056:	d909      	bls.n	801006c <create_name+0x294>
 8010058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801005a:	2b5a      	cmp	r3, #90	; 0x5a
 801005c:	d806      	bhi.n	801006c <create_name+0x294>
					b |= 2;
 801005e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010062:	f043 0302 	orr.w	r3, r3, #2
 8010066:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801006a:	e00e      	b.n	801008a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801006c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801006e:	2b60      	cmp	r3, #96	; 0x60
 8010070:	d90b      	bls.n	801008a <create_name+0x2b2>
 8010072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010074:	2b7a      	cmp	r3, #122	; 0x7a
 8010076:	d808      	bhi.n	801008a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8010078:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801007c:	f043 0301 	orr.w	r3, r3, #1
 8010080:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010086:	3b20      	subs	r3, #32
 8010088:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801008a:	6a3b      	ldr	r3, [r7, #32]
 801008c:	1c5a      	adds	r2, r3, #1
 801008e:	623a      	str	r2, [r7, #32]
 8010090:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010092:	b2d1      	uxtb	r1, r2
 8010094:	687a      	ldr	r2, [r7, #4]
 8010096:	4413      	add	r3, r2
 8010098:	460a      	mov	r2, r1
 801009a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801009e:	e763      	b.n	800ff68 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80100a0:	bf00      	nop
 80100a2:	e000      	b.n	80100a6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80100a4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80100ac:	2be5      	cmp	r3, #229	; 0xe5
 80100ae:	d103      	bne.n	80100b8 <create_name+0x2e0>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2205      	movs	r2, #5
 80100b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80100b8:	69fb      	ldr	r3, [r7, #28]
 80100ba:	2b08      	cmp	r3, #8
 80100bc:	d104      	bne.n	80100c8 <create_name+0x2f0>
 80100be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80100c2:	009b      	lsls	r3, r3, #2
 80100c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80100c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80100cc:	f003 030c 	and.w	r3, r3, #12
 80100d0:	2b0c      	cmp	r3, #12
 80100d2:	d005      	beq.n	80100e0 <create_name+0x308>
 80100d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80100d8:	f003 0303 	and.w	r3, r3, #3
 80100dc:	2b03      	cmp	r3, #3
 80100de:	d105      	bne.n	80100ec <create_name+0x314>
 80100e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100e4:	f043 0302 	orr.w	r3, r3, #2
 80100e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80100ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100f0:	f003 0302 	and.w	r3, r3, #2
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d117      	bne.n	8010128 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80100f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80100fc:	f003 0303 	and.w	r3, r3, #3
 8010100:	2b01      	cmp	r3, #1
 8010102:	d105      	bne.n	8010110 <create_name+0x338>
 8010104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010108:	f043 0310 	orr.w	r3, r3, #16
 801010c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010110:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010114:	f003 030c 	and.w	r3, r3, #12
 8010118:	2b04      	cmp	r3, #4
 801011a:	d105      	bne.n	8010128 <create_name+0x350>
 801011c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010120:	f043 0308 	orr.w	r3, r3, #8
 8010124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801012e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8010132:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010134:	4618      	mov	r0, r3
 8010136:	3728      	adds	r7, #40	; 0x28
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	0801583c 	.word	0x0801583c
 8010140:	0801594c 	.word	0x0801594c
 8010144:	08015848 	.word	0x08015848

08010148 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b086      	sub	sp, #24
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801015c:	e002      	b.n	8010164 <follow_path+0x1c>
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	3301      	adds	r3, #1
 8010162:	603b      	str	r3, [r7, #0]
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	2b2f      	cmp	r3, #47	; 0x2f
 801016a:	d0f8      	beq.n	801015e <follow_path+0x16>
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	2b5c      	cmp	r3, #92	; 0x5c
 8010172:	d0f4      	beq.n	801015e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	2200      	movs	r2, #0
 8010178:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	2b1f      	cmp	r3, #31
 8010180:	d80a      	bhi.n	8010198 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2280      	movs	r2, #128	; 0x80
 8010186:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801018a:	2100      	movs	r1, #0
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f7ff f91b 	bl	800f3c8 <dir_sdi>
 8010192:	4603      	mov	r3, r0
 8010194:	75fb      	strb	r3, [r7, #23]
 8010196:	e043      	b.n	8010220 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010198:	463b      	mov	r3, r7
 801019a:	4619      	mov	r1, r3
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f7ff fe1b 	bl	800fdd8 <create_name>
 80101a2:	4603      	mov	r3, r0
 80101a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80101a6:	7dfb      	ldrb	r3, [r7, #23]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d134      	bne.n	8010216 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f7ff fc5a 	bl	800fa66 <dir_find>
 80101b2:	4603      	mov	r3, r0
 80101b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80101bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80101be:	7dfb      	ldrb	r3, [r7, #23]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d00a      	beq.n	80101da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80101c4:	7dfb      	ldrb	r3, [r7, #23]
 80101c6:	2b04      	cmp	r3, #4
 80101c8:	d127      	bne.n	801021a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80101ca:	7afb      	ldrb	r3, [r7, #11]
 80101cc:	f003 0304 	and.w	r3, r3, #4
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d122      	bne.n	801021a <follow_path+0xd2>
 80101d4:	2305      	movs	r3, #5
 80101d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80101d8:	e01f      	b.n	801021a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80101da:	7afb      	ldrb	r3, [r7, #11]
 80101dc:	f003 0304 	and.w	r3, r3, #4
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d11c      	bne.n	801021e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	799b      	ldrb	r3, [r3, #6]
 80101e8:	f003 0310 	and.w	r3, r3, #16
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d102      	bne.n	80101f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80101f0:	2305      	movs	r3, #5
 80101f2:	75fb      	strb	r3, [r7, #23]
 80101f4:	e014      	b.n	8010220 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	695b      	ldr	r3, [r3, #20]
 8010200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010204:	4413      	add	r3, r2
 8010206:	4619      	mov	r1, r3
 8010208:	68f8      	ldr	r0, [r7, #12]
 801020a:	f7ff fa64 	bl	800f6d6 <ld_clust>
 801020e:	4602      	mov	r2, r0
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010214:	e7c0      	b.n	8010198 <follow_path+0x50>
			if (res != FR_OK) break;
 8010216:	bf00      	nop
 8010218:	e002      	b.n	8010220 <follow_path+0xd8>
				break;
 801021a:	bf00      	nop
 801021c:	e000      	b.n	8010220 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801021e:	bf00      	nop
			}
		}
	}

	return res;
 8010220:	7dfb      	ldrb	r3, [r7, #23]
}
 8010222:	4618      	mov	r0, r3
 8010224:	3718      	adds	r7, #24
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}

0801022a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801022a:	b480      	push	{r7}
 801022c:	b087      	sub	sp, #28
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010232:	f04f 33ff 	mov.w	r3, #4294967295
 8010236:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d031      	beq.n	80102a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	617b      	str	r3, [r7, #20]
 8010246:	e002      	b.n	801024e <get_ldnumber+0x24>
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	3301      	adds	r3, #1
 801024c:	617b      	str	r3, [r7, #20]
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	2b1f      	cmp	r3, #31
 8010254:	d903      	bls.n	801025e <get_ldnumber+0x34>
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	2b3a      	cmp	r3, #58	; 0x3a
 801025c:	d1f4      	bne.n	8010248 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	2b3a      	cmp	r3, #58	; 0x3a
 8010264:	d11c      	bne.n	80102a0 <get_ldnumber+0x76>
			tp = *path;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	1c5a      	adds	r2, r3, #1
 8010270:	60fa      	str	r2, [r7, #12]
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	3b30      	subs	r3, #48	; 0x30
 8010276:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	2b09      	cmp	r3, #9
 801027c:	d80e      	bhi.n	801029c <get_ldnumber+0x72>
 801027e:	68fa      	ldr	r2, [r7, #12]
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	429a      	cmp	r2, r3
 8010284:	d10a      	bne.n	801029c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d107      	bne.n	801029c <get_ldnumber+0x72>
					vol = (int)i;
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	3301      	adds	r3, #1
 8010294:	617b      	str	r3, [r7, #20]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	697a      	ldr	r2, [r7, #20]
 801029a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801029c:	693b      	ldr	r3, [r7, #16]
 801029e:	e002      	b.n	80102a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80102a0:	2300      	movs	r3, #0
 80102a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80102a4:	693b      	ldr	r3, [r7, #16]
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	371c      	adds	r7, #28
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr
	...

080102b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2200      	movs	r2, #0
 80102c2:	70da      	strb	r2, [r3, #3]
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f04f 32ff 	mov.w	r2, #4294967295
 80102ca:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80102cc:	6839      	ldr	r1, [r7, #0]
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f7fe fcfa 	bl	800ecc8 <move_window>
 80102d4:	4603      	mov	r3, r0
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d001      	beq.n	80102de <check_fs+0x2a>
 80102da:	2304      	movs	r3, #4
 80102dc:	e038      	b.n	8010350 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	3338      	adds	r3, #56	; 0x38
 80102e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fe fa48 	bl	800e77c <ld_word>
 80102ec:	4603      	mov	r3, r0
 80102ee:	461a      	mov	r2, r3
 80102f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d001      	beq.n	80102fc <check_fs+0x48>
 80102f8:	2303      	movs	r3, #3
 80102fa:	e029      	b.n	8010350 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010302:	2be9      	cmp	r3, #233	; 0xe9
 8010304:	d009      	beq.n	801031a <check_fs+0x66>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801030c:	2beb      	cmp	r3, #235	; 0xeb
 801030e:	d11e      	bne.n	801034e <check_fs+0x9a>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010316:	2b90      	cmp	r3, #144	; 0x90
 8010318:	d119      	bne.n	801034e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	3338      	adds	r3, #56	; 0x38
 801031e:	3336      	adds	r3, #54	; 0x36
 8010320:	4618      	mov	r0, r3
 8010322:	f7fe fa43 	bl	800e7ac <ld_dword>
 8010326:	4603      	mov	r3, r0
 8010328:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801032c:	4a0a      	ldr	r2, [pc, #40]	; (8010358 <check_fs+0xa4>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d101      	bne.n	8010336 <check_fs+0x82>
 8010332:	2300      	movs	r3, #0
 8010334:	e00c      	b.n	8010350 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	3338      	adds	r3, #56	; 0x38
 801033a:	3352      	adds	r3, #82	; 0x52
 801033c:	4618      	mov	r0, r3
 801033e:	f7fe fa35 	bl	800e7ac <ld_dword>
 8010342:	4603      	mov	r3, r0
 8010344:	4a05      	ldr	r2, [pc, #20]	; (801035c <check_fs+0xa8>)
 8010346:	4293      	cmp	r3, r2
 8010348:	d101      	bne.n	801034e <check_fs+0x9a>
 801034a:	2300      	movs	r3, #0
 801034c:	e000      	b.n	8010350 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801034e:	2302      	movs	r3, #2
}
 8010350:	4618      	mov	r0, r3
 8010352:	3708      	adds	r7, #8
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}
 8010358:	00544146 	.word	0x00544146
 801035c:	33544146 	.word	0x33544146

08010360 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b096      	sub	sp, #88	; 0x58
 8010364:	af00      	add	r7, sp, #0
 8010366:	60f8      	str	r0, [r7, #12]
 8010368:	60b9      	str	r1, [r7, #8]
 801036a:	4613      	mov	r3, r2
 801036c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	2200      	movs	r2, #0
 8010372:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010374:	68f8      	ldr	r0, [r7, #12]
 8010376:	f7ff ff58 	bl	801022a <get_ldnumber>
 801037a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801037c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801037e:	2b00      	cmp	r3, #0
 8010380:	da01      	bge.n	8010386 <find_volume+0x26>
 8010382:	230b      	movs	r3, #11
 8010384:	e236      	b.n	80107f4 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010386:	4aac      	ldr	r2, [pc, #688]	; (8010638 <find_volume+0x2d8>)
 8010388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801038a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801038e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010392:	2b00      	cmp	r3, #0
 8010394:	d101      	bne.n	801039a <find_volume+0x3a>
 8010396:	230c      	movs	r3, #12
 8010398:	e22c      	b.n	80107f4 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 801039a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801039c:	f7fe faee 	bl	800e97c <lock_fs>
 80103a0:	4603      	mov	r3, r0
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d101      	bne.n	80103aa <find_volume+0x4a>
 80103a6:	230f      	movs	r3, #15
 80103a8:	e224      	b.n	80107f4 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80103b0:	79fb      	ldrb	r3, [r7, #7]
 80103b2:	f023 0301 	bic.w	r3, r3, #1
 80103b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80103b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d01a      	beq.n	80103f6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80103c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c2:	785b      	ldrb	r3, [r3, #1]
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7fe f93b 	bl	800e640 <disk_status>
 80103ca:	4603      	mov	r3, r0
 80103cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80103d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80103d4:	f003 0301 	and.w	r3, r3, #1
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d10c      	bne.n	80103f6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80103dc:	79fb      	ldrb	r3, [r7, #7]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d007      	beq.n	80103f2 <find_volume+0x92>
 80103e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80103e6:	f003 0304 	and.w	r3, r3, #4
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d001      	beq.n	80103f2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80103ee:	230a      	movs	r3, #10
 80103f0:	e200      	b.n	80107f4 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 80103f2:	2300      	movs	r3, #0
 80103f4:	e1fe      	b.n	80107f4 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80103f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f8:	2200      	movs	r2, #0
 80103fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80103fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103fe:	b2da      	uxtb	r2, r3
 8010400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010402:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010406:	785b      	ldrb	r3, [r3, #1]
 8010408:	4618      	mov	r0, r3
 801040a:	f7fe f933 	bl	800e674 <disk_initialize>
 801040e:	4603      	mov	r3, r0
 8010410:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010414:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010418:	f003 0301 	and.w	r3, r3, #1
 801041c:	2b00      	cmp	r3, #0
 801041e:	d001      	beq.n	8010424 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010420:	2303      	movs	r3, #3
 8010422:	e1e7      	b.n	80107f4 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010424:	79fb      	ldrb	r3, [r7, #7]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d007      	beq.n	801043a <find_volume+0xda>
 801042a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801042e:	f003 0304 	and.w	r3, r3, #4
 8010432:	2b00      	cmp	r3, #0
 8010434:	d001      	beq.n	801043a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010436:	230a      	movs	r3, #10
 8010438:	e1dc      	b.n	80107f4 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801043a:	2300      	movs	r3, #0
 801043c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801043e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010440:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010442:	f7ff ff37 	bl	80102b4 <check_fs>
 8010446:	4603      	mov	r3, r0
 8010448:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801044c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010450:	2b02      	cmp	r3, #2
 8010452:	d14b      	bne.n	80104ec <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010454:	2300      	movs	r3, #0
 8010456:	643b      	str	r3, [r7, #64]	; 0x40
 8010458:	e01f      	b.n	801049a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801045a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010462:	011b      	lsls	r3, r3, #4
 8010464:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010468:	4413      	add	r3, r2
 801046a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801046c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046e:	3304      	adds	r3, #4
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d006      	beq.n	8010484 <find_volume+0x124>
 8010476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010478:	3308      	adds	r3, #8
 801047a:	4618      	mov	r0, r3
 801047c:	f7fe f996 	bl	800e7ac <ld_dword>
 8010480:	4602      	mov	r2, r0
 8010482:	e000      	b.n	8010486 <find_volume+0x126>
 8010484:	2200      	movs	r2, #0
 8010486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010488:	009b      	lsls	r3, r3, #2
 801048a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801048e:	440b      	add	r3, r1
 8010490:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010496:	3301      	adds	r3, #1
 8010498:	643b      	str	r3, [r7, #64]	; 0x40
 801049a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801049c:	2b03      	cmp	r3, #3
 801049e:	d9dc      	bls.n	801045a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80104a0:	2300      	movs	r3, #0
 80104a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80104a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d002      	beq.n	80104b0 <find_volume+0x150>
 80104aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104ac:	3b01      	subs	r3, #1
 80104ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80104b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104b2:	009b      	lsls	r3, r3, #2
 80104b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80104b8:	4413      	add	r3, r2
 80104ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80104be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80104c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d005      	beq.n	80104d2 <find_volume+0x172>
 80104c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80104c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80104ca:	f7ff fef3 	bl	80102b4 <check_fs>
 80104ce:	4603      	mov	r3, r0
 80104d0:	e000      	b.n	80104d4 <find_volume+0x174>
 80104d2:	2303      	movs	r3, #3
 80104d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80104d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80104dc:	2b01      	cmp	r3, #1
 80104de:	d905      	bls.n	80104ec <find_volume+0x18c>
 80104e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104e2:	3301      	adds	r3, #1
 80104e4:	643b      	str	r3, [r7, #64]	; 0x40
 80104e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104e8:	2b03      	cmp	r3, #3
 80104ea:	d9e1      	bls.n	80104b0 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80104ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80104f0:	2b04      	cmp	r3, #4
 80104f2:	d101      	bne.n	80104f8 <find_volume+0x198>
 80104f4:	2301      	movs	r3, #1
 80104f6:	e17d      	b.n	80107f4 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80104f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80104fc:	2b01      	cmp	r3, #1
 80104fe:	d901      	bls.n	8010504 <find_volume+0x1a4>
 8010500:	230d      	movs	r3, #13
 8010502:	e177      	b.n	80107f4 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010506:	3338      	adds	r3, #56	; 0x38
 8010508:	330b      	adds	r3, #11
 801050a:	4618      	mov	r0, r3
 801050c:	f7fe f936 	bl	800e77c <ld_word>
 8010510:	4603      	mov	r3, r0
 8010512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010516:	d001      	beq.n	801051c <find_volume+0x1bc>
 8010518:	230d      	movs	r3, #13
 801051a:	e16b      	b.n	80107f4 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801051c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801051e:	3338      	adds	r3, #56	; 0x38
 8010520:	3316      	adds	r3, #22
 8010522:	4618      	mov	r0, r3
 8010524:	f7fe f92a 	bl	800e77c <ld_word>
 8010528:	4603      	mov	r3, r0
 801052a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801052c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801052e:	2b00      	cmp	r3, #0
 8010530:	d106      	bne.n	8010540 <find_volume+0x1e0>
 8010532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010534:	3338      	adds	r3, #56	; 0x38
 8010536:	3324      	adds	r3, #36	; 0x24
 8010538:	4618      	mov	r0, r3
 801053a:	f7fe f937 	bl	800e7ac <ld_dword>
 801053e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010542:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010544:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010548:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801054c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801054e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010552:	789b      	ldrb	r3, [r3, #2]
 8010554:	2b01      	cmp	r3, #1
 8010556:	d005      	beq.n	8010564 <find_volume+0x204>
 8010558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801055a:	789b      	ldrb	r3, [r3, #2]
 801055c:	2b02      	cmp	r3, #2
 801055e:	d001      	beq.n	8010564 <find_volume+0x204>
 8010560:	230d      	movs	r3, #13
 8010562:	e147      	b.n	80107f4 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010566:	789b      	ldrb	r3, [r3, #2]
 8010568:	461a      	mov	r2, r3
 801056a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801056c:	fb02 f303 	mul.w	r3, r2, r3
 8010570:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010578:	b29a      	uxth	r2, r3
 801057a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801057c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801057e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010580:	895b      	ldrh	r3, [r3, #10]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d008      	beq.n	8010598 <find_volume+0x238>
 8010586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010588:	895b      	ldrh	r3, [r3, #10]
 801058a:	461a      	mov	r2, r3
 801058c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801058e:	895b      	ldrh	r3, [r3, #10]
 8010590:	3b01      	subs	r3, #1
 8010592:	4013      	ands	r3, r2
 8010594:	2b00      	cmp	r3, #0
 8010596:	d001      	beq.n	801059c <find_volume+0x23c>
 8010598:	230d      	movs	r3, #13
 801059a:	e12b      	b.n	80107f4 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801059c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059e:	3338      	adds	r3, #56	; 0x38
 80105a0:	3311      	adds	r3, #17
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7fe f8ea 	bl	800e77c <ld_word>
 80105a8:	4603      	mov	r3, r0
 80105aa:	461a      	mov	r2, r3
 80105ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80105b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b2:	891b      	ldrh	r3, [r3, #8]
 80105b4:	f003 030f 	and.w	r3, r3, #15
 80105b8:	b29b      	uxth	r3, r3
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d001      	beq.n	80105c2 <find_volume+0x262>
 80105be:	230d      	movs	r3, #13
 80105c0:	e118      	b.n	80107f4 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80105c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c4:	3338      	adds	r3, #56	; 0x38
 80105c6:	3313      	adds	r3, #19
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7fe f8d7 	bl	800e77c <ld_word>
 80105ce:	4603      	mov	r3, r0
 80105d0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80105d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d106      	bne.n	80105e6 <find_volume+0x286>
 80105d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105da:	3338      	adds	r3, #56	; 0x38
 80105dc:	3320      	adds	r3, #32
 80105de:	4618      	mov	r0, r3
 80105e0:	f7fe f8e4 	bl	800e7ac <ld_dword>
 80105e4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80105e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e8:	3338      	adds	r3, #56	; 0x38
 80105ea:	330e      	adds	r3, #14
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7fe f8c5 	bl	800e77c <ld_word>
 80105f2:	4603      	mov	r3, r0
 80105f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80105f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d101      	bne.n	8010600 <find_volume+0x2a0>
 80105fc:	230d      	movs	r3, #13
 80105fe:	e0f9      	b.n	80107f4 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010600:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010604:	4413      	add	r3, r2
 8010606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010608:	8912      	ldrh	r2, [r2, #8]
 801060a:	0912      	lsrs	r2, r2, #4
 801060c:	b292      	uxth	r2, r2
 801060e:	4413      	add	r3, r2
 8010610:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010616:	429a      	cmp	r2, r3
 8010618:	d201      	bcs.n	801061e <find_volume+0x2be>
 801061a:	230d      	movs	r3, #13
 801061c:	e0ea      	b.n	80107f4 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801061e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010622:	1ad3      	subs	r3, r2, r3
 8010624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010626:	8952      	ldrh	r2, [r2, #10]
 8010628:	fbb3 f3f2 	udiv	r3, r3, r2
 801062c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801062e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010630:	2b00      	cmp	r3, #0
 8010632:	d103      	bne.n	801063c <find_volume+0x2dc>
 8010634:	230d      	movs	r3, #13
 8010636:	e0dd      	b.n	80107f4 <find_volume+0x494>
 8010638:	20000468 	.word	0x20000468
		fmt = FS_FAT32;
 801063c:	2303      	movs	r3, #3
 801063e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010644:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010648:	4293      	cmp	r3, r2
 801064a:	d802      	bhi.n	8010652 <find_volume+0x2f2>
 801064c:	2302      	movs	r3, #2
 801064e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010654:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010658:	4293      	cmp	r3, r2
 801065a:	d802      	bhi.n	8010662 <find_volume+0x302>
 801065c:	2301      	movs	r3, #1
 801065e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010664:	1c9a      	adds	r2, r3, #2
 8010666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010668:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801066a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801066e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010670:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010674:	441a      	add	r2, r3
 8010676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010678:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801067a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801067c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801067e:	441a      	add	r2, r3
 8010680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010682:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8010684:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010688:	2b03      	cmp	r3, #3
 801068a:	d11e      	bne.n	80106ca <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801068c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801068e:	3338      	adds	r3, #56	; 0x38
 8010690:	332a      	adds	r3, #42	; 0x2a
 8010692:	4618      	mov	r0, r3
 8010694:	f7fe f872 	bl	800e77c <ld_word>
 8010698:	4603      	mov	r3, r0
 801069a:	2b00      	cmp	r3, #0
 801069c:	d001      	beq.n	80106a2 <find_volume+0x342>
 801069e:	230d      	movs	r3, #13
 80106a0:	e0a8      	b.n	80107f4 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80106a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a4:	891b      	ldrh	r3, [r3, #8]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d001      	beq.n	80106ae <find_volume+0x34e>
 80106aa:	230d      	movs	r3, #13
 80106ac:	e0a2      	b.n	80107f4 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80106ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b0:	3338      	adds	r3, #56	; 0x38
 80106b2:	332c      	adds	r3, #44	; 0x2c
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7fe f879 	bl	800e7ac <ld_dword>
 80106ba:	4602      	mov	r2, r0
 80106bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106be:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80106c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c2:	69db      	ldr	r3, [r3, #28]
 80106c4:	009b      	lsls	r3, r3, #2
 80106c6:	647b      	str	r3, [r7, #68]	; 0x44
 80106c8:	e01f      	b.n	801070a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80106ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106cc:	891b      	ldrh	r3, [r3, #8]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d101      	bne.n	80106d6 <find_volume+0x376>
 80106d2:	230d      	movs	r3, #13
 80106d4:	e08e      	b.n	80107f4 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80106d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80106da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106dc:	441a      	add	r2, r3
 80106de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80106e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80106e6:	2b02      	cmp	r3, #2
 80106e8:	d103      	bne.n	80106f2 <find_volume+0x392>
 80106ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ec:	69db      	ldr	r3, [r3, #28]
 80106ee:	005b      	lsls	r3, r3, #1
 80106f0:	e00a      	b.n	8010708 <find_volume+0x3a8>
 80106f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f4:	69da      	ldr	r2, [r3, #28]
 80106f6:	4613      	mov	r3, r2
 80106f8:	005b      	lsls	r3, r3, #1
 80106fa:	4413      	add	r3, r2
 80106fc:	085a      	lsrs	r2, r3, #1
 80106fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010700:	69db      	ldr	r3, [r3, #28]
 8010702:	f003 0301 	and.w	r3, r3, #1
 8010706:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010708:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801070a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801070c:	6a1a      	ldr	r2, [r3, #32]
 801070e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010710:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010714:	0a5b      	lsrs	r3, r3, #9
 8010716:	429a      	cmp	r2, r3
 8010718:	d201      	bcs.n	801071e <find_volume+0x3be>
 801071a:	230d      	movs	r3, #13
 801071c:	e06a      	b.n	80107f4 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801071e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010720:	f04f 32ff 	mov.w	r2, #4294967295
 8010724:	619a      	str	r2, [r3, #24]
 8010726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010728:	699a      	ldr	r2, [r3, #24]
 801072a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801072c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801072e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010730:	2280      	movs	r2, #128	; 0x80
 8010732:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010734:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010738:	2b03      	cmp	r3, #3
 801073a:	d149      	bne.n	80107d0 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801073c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801073e:	3338      	adds	r3, #56	; 0x38
 8010740:	3330      	adds	r3, #48	; 0x30
 8010742:	4618      	mov	r0, r3
 8010744:	f7fe f81a 	bl	800e77c <ld_word>
 8010748:	4603      	mov	r3, r0
 801074a:	2b01      	cmp	r3, #1
 801074c:	d140      	bne.n	80107d0 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 801074e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010750:	3301      	adds	r3, #1
 8010752:	4619      	mov	r1, r3
 8010754:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010756:	f7fe fab7 	bl	800ecc8 <move_window>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	d137      	bne.n	80107d0 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8010760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010762:	2200      	movs	r2, #0
 8010764:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010768:	3338      	adds	r3, #56	; 0x38
 801076a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801076e:	4618      	mov	r0, r3
 8010770:	f7fe f804 	bl	800e77c <ld_word>
 8010774:	4603      	mov	r3, r0
 8010776:	461a      	mov	r2, r3
 8010778:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801077c:	429a      	cmp	r2, r3
 801077e:	d127      	bne.n	80107d0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010782:	3338      	adds	r3, #56	; 0x38
 8010784:	4618      	mov	r0, r3
 8010786:	f7fe f811 	bl	800e7ac <ld_dword>
 801078a:	4603      	mov	r3, r0
 801078c:	4a1b      	ldr	r2, [pc, #108]	; (80107fc <find_volume+0x49c>)
 801078e:	4293      	cmp	r3, r2
 8010790:	d11e      	bne.n	80107d0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010794:	3338      	adds	r3, #56	; 0x38
 8010796:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801079a:	4618      	mov	r0, r3
 801079c:	f7fe f806 	bl	800e7ac <ld_dword>
 80107a0:	4603      	mov	r3, r0
 80107a2:	4a17      	ldr	r2, [pc, #92]	; (8010800 <find_volume+0x4a0>)
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d113      	bne.n	80107d0 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80107a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107aa:	3338      	adds	r3, #56	; 0x38
 80107ac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7fd fffb 	bl	800e7ac <ld_dword>
 80107b6:	4602      	mov	r2, r0
 80107b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ba:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80107bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107be:	3338      	adds	r3, #56	; 0x38
 80107c0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80107c4:	4618      	mov	r0, r3
 80107c6:	f7fd fff1 	bl	800e7ac <ld_dword>
 80107ca:	4602      	mov	r2, r0
 80107cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ce:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80107d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80107d6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80107d8:	4b0a      	ldr	r3, [pc, #40]	; (8010804 <find_volume+0x4a4>)
 80107da:	881b      	ldrh	r3, [r3, #0]
 80107dc:	3301      	adds	r3, #1
 80107de:	b29a      	uxth	r2, r3
 80107e0:	4b08      	ldr	r3, [pc, #32]	; (8010804 <find_volume+0x4a4>)
 80107e2:	801a      	strh	r2, [r3, #0]
 80107e4:	4b07      	ldr	r3, [pc, #28]	; (8010804 <find_volume+0x4a4>)
 80107e6:	881a      	ldrh	r2, [r3, #0]
 80107e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ea:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80107ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80107ee:	f7fe fa03 	bl	800ebf8 <clear_lock>
#endif
	return FR_OK;
 80107f2:	2300      	movs	r3, #0
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3758      	adds	r7, #88	; 0x58
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	41615252 	.word	0x41615252
 8010800:	61417272 	.word	0x61417272
 8010804:	2000046c 	.word	0x2000046c

08010808 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b084      	sub	sp, #16
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010812:	2309      	movs	r3, #9
 8010814:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d02e      	beq.n	801087a <validate+0x72>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d02a      	beq.n	801087a <validate+0x72>
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d025      	beq.n	801087a <validate+0x72>
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	889a      	ldrh	r2, [r3, #4]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	88db      	ldrh	r3, [r3, #6]
 8010838:	429a      	cmp	r2, r3
 801083a:	d11e      	bne.n	801087a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	4618      	mov	r0, r3
 8010842:	f7fe f89b 	bl	800e97c <lock_fs>
 8010846:	4603      	mov	r3, r0
 8010848:	2b00      	cmp	r3, #0
 801084a:	d014      	beq.n	8010876 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	785b      	ldrb	r3, [r3, #1]
 8010852:	4618      	mov	r0, r3
 8010854:	f7fd fef4 	bl	800e640 <disk_status>
 8010858:	4603      	mov	r3, r0
 801085a:	f003 0301 	and.w	r3, r3, #1
 801085e:	2b00      	cmp	r3, #0
 8010860:	d102      	bne.n	8010868 <validate+0x60>
				res = FR_OK;
 8010862:	2300      	movs	r3, #0
 8010864:	73fb      	strb	r3, [r7, #15]
 8010866:	e008      	b.n	801087a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	2100      	movs	r1, #0
 801086e:	4618      	mov	r0, r3
 8010870:	f7fe f89a 	bl	800e9a8 <unlock_fs>
 8010874:	e001      	b.n	801087a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010876:	230f      	movs	r3, #15
 8010878:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801087a:	7bfb      	ldrb	r3, [r7, #15]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d102      	bne.n	8010886 <validate+0x7e>
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	e000      	b.n	8010888 <validate+0x80>
 8010886:	2300      	movs	r3, #0
 8010888:	683a      	ldr	r2, [r7, #0]
 801088a:	6013      	str	r3, [r2, #0]
	return res;
 801088c:	7bfb      	ldrb	r3, [r7, #15]
}
 801088e:	4618      	mov	r0, r3
 8010890:	3710      	adds	r7, #16
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}
	...

08010898 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b088      	sub	sp, #32
 801089c:	af00      	add	r7, sp, #0
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	4613      	mov	r3, r2
 80108a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80108aa:	f107 0310 	add.w	r3, r7, #16
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7ff fcbb 	bl	801022a <get_ldnumber>
 80108b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80108b6:	69fb      	ldr	r3, [r7, #28]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	da01      	bge.n	80108c0 <f_mount+0x28>
 80108bc:	230b      	movs	r3, #11
 80108be:	e048      	b.n	8010952 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80108c0:	4a26      	ldr	r2, [pc, #152]	; (801095c <f_mount+0xc4>)
 80108c2:	69fb      	ldr	r3, [r7, #28]
 80108c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80108ca:	69bb      	ldr	r3, [r7, #24]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d00f      	beq.n	80108f0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80108d0:	69b8      	ldr	r0, [r7, #24]
 80108d2:	f7fe f991 	bl	800ebf8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80108d6:	69bb      	ldr	r3, [r7, #24]
 80108d8:	691b      	ldr	r3, [r3, #16]
 80108da:	4618      	mov	r0, r3
 80108dc:	f001 f8ee 	bl	8011abc <ff_del_syncobj>
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d101      	bne.n	80108ea <f_mount+0x52>
 80108e6:	2302      	movs	r3, #2
 80108e8:	e033      	b.n	8010952 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80108ea:	69bb      	ldr	r3, [r7, #24]
 80108ec:	2200      	movs	r2, #0
 80108ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d00f      	beq.n	8010916 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	2200      	movs	r2, #0
 80108fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80108fc:	69fb      	ldr	r3, [r7, #28]
 80108fe:	b2da      	uxtb	r2, r3
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	3310      	adds	r3, #16
 8010904:	4619      	mov	r1, r3
 8010906:	4610      	mov	r0, r2
 8010908:	f001 f8ba 	bl	8011a80 <ff_cre_syncobj>
 801090c:	4603      	mov	r3, r0
 801090e:	2b00      	cmp	r3, #0
 8010910:	d101      	bne.n	8010916 <f_mount+0x7e>
 8010912:	2302      	movs	r3, #2
 8010914:	e01d      	b.n	8010952 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010916:	68fa      	ldr	r2, [r7, #12]
 8010918:	4910      	ldr	r1, [pc, #64]	; (801095c <f_mount+0xc4>)
 801091a:	69fb      	ldr	r3, [r7, #28]
 801091c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d002      	beq.n	801092c <f_mount+0x94>
 8010926:	79fb      	ldrb	r3, [r7, #7]
 8010928:	2b01      	cmp	r3, #1
 801092a:	d001      	beq.n	8010930 <f_mount+0x98>
 801092c:	2300      	movs	r3, #0
 801092e:	e010      	b.n	8010952 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010930:	f107 010c 	add.w	r1, r7, #12
 8010934:	f107 0308 	add.w	r3, r7, #8
 8010938:	2200      	movs	r2, #0
 801093a:	4618      	mov	r0, r3
 801093c:	f7ff fd10 	bl	8010360 <find_volume>
 8010940:	4603      	mov	r3, r0
 8010942:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	7dfa      	ldrb	r2, [r7, #23]
 8010948:	4611      	mov	r1, r2
 801094a:	4618      	mov	r0, r3
 801094c:	f7fe f82c 	bl	800e9a8 <unlock_fs>
 8010950:	7dfb      	ldrb	r3, [r7, #23]
}
 8010952:	4618      	mov	r0, r3
 8010954:	3720      	adds	r7, #32
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	20000468 	.word	0x20000468

08010960 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8010966:	af00      	add	r7, sp, #0
 8010968:	f107 030c 	add.w	r3, r7, #12
 801096c:	6018      	str	r0, [r3, #0]
 801096e:	f107 0308 	add.w	r3, r7, #8
 8010972:	6019      	str	r1, [r3, #0]
 8010974:	1dfb      	adds	r3, r7, #7
 8010976:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010978:	f107 030c 	add.w	r3, r7, #12
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d101      	bne.n	8010986 <f_open+0x26>
 8010982:	2309      	movs	r3, #9
 8010984:	e239      	b.n	8010dfa <f_open+0x49a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010986:	1dfb      	adds	r3, r7, #7
 8010988:	1dfa      	adds	r2, r7, #7
 801098a:	7812      	ldrb	r2, [r2, #0]
 801098c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010990:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8010992:	1dfb      	adds	r3, r7, #7
 8010994:	781a      	ldrb	r2, [r3, #0]
 8010996:	f507 7105 	add.w	r1, r7, #532	; 0x214
 801099a:	f107 0308 	add.w	r3, r7, #8
 801099e:	4618      	mov	r0, r3
 80109a0:	f7ff fcde 	bl	8010360 <find_volume>
 80109a4:	4603      	mov	r3, r0
 80109a6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 80109aa:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	f040 8210 	bne.w	8010dd4 <f_open+0x474>
		dj.obj.fs = fs;
 80109b4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80109b8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80109bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80109c0:	f107 0214 	add.w	r2, r7, #20
 80109c4:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80109c6:	f107 0308 	add.w	r3, r7, #8
 80109ca:	681a      	ldr	r2, [r3, #0]
 80109cc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80109d0:	4611      	mov	r1, r2
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7ff fbb8 	bl	8010148 <follow_path>
 80109d8:	4603      	mov	r3, r0
 80109da:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80109de:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d11b      	bne.n	8010a1e <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80109e6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80109ea:	b25b      	sxtb	r3, r3
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	da03      	bge.n	80109f8 <f_open+0x98>
				res = FR_INVALID_NAME;
 80109f0:	2306      	movs	r3, #6
 80109f2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80109f6:	e012      	b.n	8010a1e <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80109f8:	1dfb      	adds	r3, r7, #7
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	f023 0301 	bic.w	r3, r3, #1
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	bf14      	ite	ne
 8010a04:	2301      	movne	r3, #1
 8010a06:	2300      	moveq	r3, #0
 8010a08:	b2db      	uxtb	r3, r3
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010a10:	4611      	mov	r1, r2
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fd ffe4 	bl	800e9e0 <chk_lock>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010a1e:	1dfb      	adds	r3, r7, #7
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	f003 031c 	and.w	r3, r3, #28
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	f000 809b 	beq.w	8010b62 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8010a2c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d019      	beq.n	8010a68 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010a34:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010a38:	2b04      	cmp	r3, #4
 8010a3a:	d10e      	bne.n	8010a5a <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010a3c:	f7fe f82c 	bl	800ea98 <enq_lock>
 8010a40:	4603      	mov	r3, r0
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d006      	beq.n	8010a54 <f_open+0xf4>
 8010a46:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7ff f8cc 	bl	800fbe8 <dir_register>
 8010a50:	4603      	mov	r3, r0
 8010a52:	e000      	b.n	8010a56 <f_open+0xf6>
 8010a54:	2312      	movs	r3, #18
 8010a56:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010a5a:	1dfb      	adds	r3, r7, #7
 8010a5c:	1dfa      	adds	r2, r7, #7
 8010a5e:	7812      	ldrb	r2, [r2, #0]
 8010a60:	f042 0208 	orr.w	r2, r2, #8
 8010a64:	701a      	strb	r2, [r3, #0]
 8010a66:	e012      	b.n	8010a8e <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010a68:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8010a6c:	f003 0311 	and.w	r3, r3, #17
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d003      	beq.n	8010a7c <f_open+0x11c>
					res = FR_DENIED;
 8010a74:	2307      	movs	r3, #7
 8010a76:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8010a7a:	e008      	b.n	8010a8e <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010a7c:	1dfb      	adds	r3, r7, #7
 8010a7e:	781b      	ldrb	r3, [r3, #0]
 8010a80:	f003 0304 	and.w	r3, r3, #4
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d002      	beq.n	8010a8e <f_open+0x12e>
 8010a88:	2308      	movs	r3, #8
 8010a8a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010a8e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	f040 8082 	bne.w	8010b9c <f_open+0x23c>
 8010a98:	1dfb      	adds	r3, r7, #7
 8010a9a:	781b      	ldrb	r3, [r3, #0]
 8010a9c:	f003 0308 	and.w	r3, r3, #8
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d07b      	beq.n	8010b9c <f_open+0x23c>
				dw = GET_FATTIME();
 8010aa4:	f7fd fb6a 	bl	800e17c <get_fattime>
 8010aa8:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010aac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010ab0:	330e      	adds	r3, #14
 8010ab2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f7fd feb6 	bl	800e828 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010abc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010ac0:	3316      	adds	r3, #22
 8010ac2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7fd feae 	bl	800e828 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010acc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010ad0:	330b      	adds	r3, #11
 8010ad2:	2220      	movs	r2, #32
 8010ad4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010ad6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010ada:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8010ade:	4611      	mov	r1, r2
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7fe fdf8 	bl	800f6d6 <ld_clust>
 8010ae6:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010aea:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010aee:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8010af2:	2200      	movs	r2, #0
 8010af4:	4618      	mov	r0, r3
 8010af6:	f7fe fe0d 	bl	800f714 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010afa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010afe:	331c      	adds	r3, #28
 8010b00:	2100      	movs	r1, #0
 8010b02:	4618      	mov	r0, r3
 8010b04:	f7fd fe90 	bl	800e828 <st_dword>
					fs->wflag = 1;
 8010b08:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010b10:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d041      	beq.n	8010b9c <f_open+0x23c>
						dw = fs->winsect;
 8010b18:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b1e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8010b22:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010b26:	2200      	movs	r2, #0
 8010b28:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f7fe fb1a 	bl	800f166 <remove_chain>
 8010b32:	4603      	mov	r3, r0
 8010b34:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8010b38:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d12d      	bne.n	8010b9c <f_open+0x23c>
							res = move_window(fs, dw);
 8010b40:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010b44:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f7fe f8bd 	bl	800ecc8 <move_window>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010b54:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010b58:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8010b5c:	3a01      	subs	r2, #1
 8010b5e:	615a      	str	r2, [r3, #20]
 8010b60:	e01c      	b.n	8010b9c <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010b62:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d118      	bne.n	8010b9c <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010b6a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8010b6e:	f003 0310 	and.w	r3, r3, #16
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d003      	beq.n	8010b7e <f_open+0x21e>
					res = FR_NO_FILE;
 8010b76:	2304      	movs	r3, #4
 8010b78:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8010b7c:	e00e      	b.n	8010b9c <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010b7e:	1dfb      	adds	r3, r7, #7
 8010b80:	781b      	ldrb	r3, [r3, #0]
 8010b82:	f003 0302 	and.w	r3, r3, #2
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d008      	beq.n	8010b9c <f_open+0x23c>
 8010b8a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8010b8e:	f003 0301 	and.w	r3, r3, #1
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d002      	beq.n	8010b9c <f_open+0x23c>
						res = FR_DENIED;
 8010b96:	2307      	movs	r3, #7
 8010b98:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8010b9c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d136      	bne.n	8010c12 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010ba4:	1dfb      	adds	r3, r7, #7
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	f003 0308 	and.w	r3, r3, #8
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d005      	beq.n	8010bbc <f_open+0x25c>
				mode |= FA_MODIFIED;
 8010bb0:	1dfb      	adds	r3, r7, #7
 8010bb2:	1dfa      	adds	r2, r7, #7
 8010bb4:	7812      	ldrb	r2, [r2, #0]
 8010bb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010bba:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010bbc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010bc2:	f107 030c 	add.w	r3, r7, #12
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010bca:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8010bce:	f107 030c 	add.w	r3, r7, #12
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010bd6:	1dfb      	adds	r3, r7, #7
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	f023 0301 	bic.w	r3, r3, #1
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	bf14      	ite	ne
 8010be2:	2301      	movne	r3, #1
 8010be4:	2300      	moveq	r3, #0
 8010be6:	b2db      	uxtb	r3, r3
 8010be8:	461a      	mov	r2, r3
 8010bea:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010bee:	4611      	mov	r1, r2
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f7fd ff73 	bl	800eadc <inc_lock>
 8010bf6:	4602      	mov	r2, r0
 8010bf8:	f107 030c 	add.w	r3, r7, #12
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010c00:	f107 030c 	add.w	r3, r7, #12
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	691b      	ldr	r3, [r3, #16]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d102      	bne.n	8010c12 <f_open+0x2b2>
 8010c0c:	2302      	movs	r3, #2
 8010c0e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010c12:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	f040 80dc 	bne.w	8010dd4 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010c1c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010c20:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8010c24:	4611      	mov	r1, r2
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7fe fd55 	bl	800f6d6 <ld_clust>
 8010c2c:	4602      	mov	r2, r0
 8010c2e:	f107 030c 	add.w	r3, r7, #12
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010c36:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010c3a:	331c      	adds	r3, #28
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7fd fdb5 	bl	800e7ac <ld_dword>
 8010c42:	4602      	mov	r2, r0
 8010c44:	f107 030c 	add.w	r3, r7, #12
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010c4c:	f107 030c 	add.w	r3, r7, #12
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	2200      	movs	r2, #0
 8010c54:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010c56:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8010c5a:	f107 030c 	add.w	r3, r7, #12
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010c62:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010c66:	88da      	ldrh	r2, [r3, #6]
 8010c68:	f107 030c 	add.w	r3, r7, #12
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010c70:	f107 030c 	add.w	r3, r7, #12
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	1dfa      	adds	r2, r7, #7
 8010c78:	7812      	ldrb	r2, [r2, #0]
 8010c7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010c7c:	f107 030c 	add.w	r3, r7, #12
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	2200      	movs	r2, #0
 8010c84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010c86:	f107 030c 	add.w	r3, r7, #12
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010c90:	f107 030c 	add.w	r3, r7, #12
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	2200      	movs	r2, #0
 8010c98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010c9a:	f107 030c 	add.w	r3, r7, #12
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	3330      	adds	r3, #48	; 0x30
 8010ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ca6:	2100      	movs	r1, #0
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7fd fe0a 	bl	800e8c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010cae:	1dfb      	adds	r3, r7, #7
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	f003 0320 	and.w	r3, r3, #32
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	f000 808c 	beq.w	8010dd4 <f_open+0x474>
 8010cbc:	f107 030c 	add.w	r3, r7, #12
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	f000 8085 	beq.w	8010dd4 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010cca:	f107 030c 	add.w	r3, r7, #12
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	68da      	ldr	r2, [r3, #12]
 8010cd2:	f107 030c 	add.w	r3, r7, #12
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010cda:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010cde:	895b      	ldrh	r3, [r3, #10]
 8010ce0:	025b      	lsls	r3, r3, #9
 8010ce2:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010ce6:	f107 030c 	add.w	r3, r7, #12
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	689b      	ldr	r3, [r3, #8]
 8010cee:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010cf2:	f107 030c 	add.w	r3, r7, #12
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8010cfe:	e01f      	b.n	8010d40 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 8010d00:	f107 030c 	add.w	r3, r7, #12
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f7fe f897 	bl	800ee3e <get_fat>
 8010d10:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8010d14:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	d802      	bhi.n	8010d22 <f_open+0x3c2>
 8010d1c:	2302      	movs	r3, #2
 8010d1e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010d22:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8010d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d2a:	d102      	bne.n	8010d32 <f_open+0x3d2>
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010d32:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8010d36:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8010d3a:	1ad3      	subs	r3, r2, r3
 8010d3c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8010d40:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d105      	bne.n	8010d54 <f_open+0x3f4>
 8010d48:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8010d4c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8010d50:	429a      	cmp	r2, r3
 8010d52:	d8d5      	bhi.n	8010d00 <f_open+0x3a0>
				}
				fp->clust = clst;
 8010d54:	f107 030c 	add.w	r3, r7, #12
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8010d5e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010d60:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d135      	bne.n	8010dd4 <f_open+0x474>
 8010d68:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8010d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d02f      	beq.n	8010dd4 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010d74:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010d78:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7fe f83f 	bl	800ee00 <clust2sect>
 8010d82:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8010d86:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d103      	bne.n	8010d96 <f_open+0x436>
						res = FR_INT_ERR;
 8010d8e:	2302      	movs	r3, #2
 8010d90:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8010d94:	e01e      	b.n	8010dd4 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010d96:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8010d9a:	0a5a      	lsrs	r2, r3, #9
 8010d9c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8010da0:	441a      	add	r2, r3
 8010da2:	f107 030c 	add.w	r3, r7, #12
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010daa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010dae:	7858      	ldrb	r0, [r3, #1]
 8010db0:	f107 030c 	add.w	r3, r7, #12
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010dba:	f107 030c 	add.w	r3, r7, #12
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	6a1a      	ldr	r2, [r3, #32]
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	f7fd fc7c 	bl	800e6c0 <disk_read>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d002      	beq.n	8010dd4 <f_open+0x474>
 8010dce:	2301      	movs	r3, #1
 8010dd0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010dd4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d004      	beq.n	8010de6 <f_open+0x486>
 8010ddc:	f107 030c 	add.w	r3, r7, #12
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	2200      	movs	r2, #0
 8010de4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010de6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010dea:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8010dee:	4611      	mov	r1, r2
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7fd fdd9 	bl	800e9a8 <unlock_fs>
 8010df6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}

08010e04 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b08c      	sub	sp, #48	; 0x30
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	60f8      	str	r0, [r7, #12]
 8010e0c:	60b9      	str	r1, [r7, #8]
 8010e0e:	607a      	str	r2, [r7, #4]
 8010e10:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f107 0210 	add.w	r2, r7, #16
 8010e22:	4611      	mov	r1, r2
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7ff fcef 	bl	8010808 <validate>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d107      	bne.n	8010e48 <f_write+0x44>
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	7d5b      	ldrb	r3, [r3, #21]
 8010e3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010e40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d009      	beq.n	8010e5c <f_write+0x58>
 8010e48:	693b      	ldr	r3, [r7, #16]
 8010e4a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8010e4e:	4611      	mov	r1, r2
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7fd fda9 	bl	800e9a8 <unlock_fs>
 8010e56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e5a:	e173      	b.n	8011144 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	7d1b      	ldrb	r3, [r3, #20]
 8010e60:	f003 0302 	and.w	r3, r3, #2
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d106      	bne.n	8010e76 <f_write+0x72>
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	2107      	movs	r1, #7
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7fd fd9b 	bl	800e9a8 <unlock_fs>
 8010e72:	2307      	movs	r3, #7
 8010e74:	e166      	b.n	8011144 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	699a      	ldr	r2, [r3, #24]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	441a      	add	r2, r3
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	699b      	ldr	r3, [r3, #24]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	f080 814b 	bcs.w	801111e <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	699b      	ldr	r3, [r3, #24]
 8010e8c:	43db      	mvns	r3, r3
 8010e8e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010e90:	e145      	b.n	801111e <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	699b      	ldr	r3, [r3, #24]
 8010e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	f040 8101 	bne.w	80110a2 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	699b      	ldr	r3, [r3, #24]
 8010ea4:	0a5b      	lsrs	r3, r3, #9
 8010ea6:	693a      	ldr	r2, [r7, #16]
 8010ea8:	8952      	ldrh	r2, [r2, #10]
 8010eaa:	3a01      	subs	r2, #1
 8010eac:	4013      	ands	r3, r2
 8010eae:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d14d      	bne.n	8010f52 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	699b      	ldr	r3, [r3, #24]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d10c      	bne.n	8010ed8 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	689b      	ldr	r3, [r3, #8]
 8010ec2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d11a      	bne.n	8010f00 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	2100      	movs	r1, #0
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7fe f9ae 	bl	800f230 <create_chain>
 8010ed4:	62b8      	str	r0, [r7, #40]	; 0x28
 8010ed6:	e013      	b.n	8010f00 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d007      	beq.n	8010ef0 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	699b      	ldr	r3, [r3, #24]
 8010ee4:	4619      	mov	r1, r3
 8010ee6:	68f8      	ldr	r0, [r7, #12]
 8010ee8:	f7fe fa3a 	bl	800f360 <clmt_clust>
 8010eec:	62b8      	str	r0, [r7, #40]	; 0x28
 8010eee:	e007      	b.n	8010f00 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010ef0:	68fa      	ldr	r2, [r7, #12]
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	69db      	ldr	r3, [r3, #28]
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	4610      	mov	r0, r2
 8010efa:	f7fe f999 	bl	800f230 <create_chain>
 8010efe:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	f000 8110 	beq.w	8011128 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f0a:	2b01      	cmp	r3, #1
 8010f0c:	d109      	bne.n	8010f22 <f_write+0x11e>
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	2202      	movs	r2, #2
 8010f12:	755a      	strb	r2, [r3, #21]
 8010f14:	693b      	ldr	r3, [r7, #16]
 8010f16:	2102      	movs	r1, #2
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7fd fd45 	bl	800e9a8 <unlock_fs>
 8010f1e:	2302      	movs	r3, #2
 8010f20:	e110      	b.n	8011144 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f28:	d109      	bne.n	8010f3e <f_write+0x13a>
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	755a      	strb	r2, [r3, #21]
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	2101      	movs	r1, #1
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7fd fd37 	bl	800e9a8 <unlock_fs>
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	e102      	b.n	8011144 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f42:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	689b      	ldr	r3, [r3, #8]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d102      	bne.n	8010f52 <f_write+0x14e>
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f50:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	7d1b      	ldrb	r3, [r3, #20]
 8010f56:	b25b      	sxtb	r3, r3
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	da1d      	bge.n	8010f98 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	7858      	ldrb	r0, [r3, #1]
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	6a1a      	ldr	r2, [r3, #32]
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	f7fd fbc8 	bl	800e700 <disk_write>
 8010f70:	4603      	mov	r3, r0
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d009      	beq.n	8010f8a <f_write+0x186>
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	2201      	movs	r2, #1
 8010f7a:	755a      	strb	r2, [r3, #21]
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	2101      	movs	r1, #1
 8010f80:	4618      	mov	r0, r3
 8010f82:	f7fd fd11 	bl	800e9a8 <unlock_fs>
 8010f86:	2301      	movs	r3, #1
 8010f88:	e0dc      	b.n	8011144 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	7d1b      	ldrb	r3, [r3, #20]
 8010f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f92:	b2da      	uxtb	r2, r3
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010f98:	693a      	ldr	r2, [r7, #16]
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	69db      	ldr	r3, [r3, #28]
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	4610      	mov	r0, r2
 8010fa2:	f7fd ff2d 	bl	800ee00 <clust2sect>
 8010fa6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d109      	bne.n	8010fc2 <f_write+0x1be>
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	2202      	movs	r2, #2
 8010fb2:	755a      	strb	r2, [r3, #21]
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	2102      	movs	r1, #2
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7fd fcf5 	bl	800e9a8 <unlock_fs>
 8010fbe:	2302      	movs	r3, #2
 8010fc0:	e0c0      	b.n	8011144 <f_write+0x340>
			sect += csect;
 8010fc2:	697a      	ldr	r2, [r7, #20]
 8010fc4:	69bb      	ldr	r3, [r7, #24]
 8010fc6:	4413      	add	r3, r2
 8010fc8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	0a5b      	lsrs	r3, r3, #9
 8010fce:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010fd0:	6a3b      	ldr	r3, [r7, #32]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d041      	beq.n	801105a <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010fd6:	69ba      	ldr	r2, [r7, #24]
 8010fd8:	6a3b      	ldr	r3, [r7, #32]
 8010fda:	4413      	add	r3, r2
 8010fdc:	693a      	ldr	r2, [r7, #16]
 8010fde:	8952      	ldrh	r2, [r2, #10]
 8010fe0:	4293      	cmp	r3, r2
 8010fe2:	d905      	bls.n	8010ff0 <f_write+0x1ec>
					cc = fs->csize - csect;
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	895b      	ldrh	r3, [r3, #10]
 8010fe8:	461a      	mov	r2, r3
 8010fea:	69bb      	ldr	r3, [r7, #24]
 8010fec:	1ad3      	subs	r3, r2, r3
 8010fee:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	7858      	ldrb	r0, [r3, #1]
 8010ff4:	6a3b      	ldr	r3, [r7, #32]
 8010ff6:	697a      	ldr	r2, [r7, #20]
 8010ff8:	69f9      	ldr	r1, [r7, #28]
 8010ffa:	f7fd fb81 	bl	800e700 <disk_write>
 8010ffe:	4603      	mov	r3, r0
 8011000:	2b00      	cmp	r3, #0
 8011002:	d009      	beq.n	8011018 <f_write+0x214>
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	2201      	movs	r2, #1
 8011008:	755a      	strb	r2, [r3, #21]
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	2101      	movs	r1, #1
 801100e:	4618      	mov	r0, r3
 8011010:	f7fd fcca 	bl	800e9a8 <unlock_fs>
 8011014:	2301      	movs	r3, #1
 8011016:	e095      	b.n	8011144 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	6a1a      	ldr	r2, [r3, #32]
 801101c:	697b      	ldr	r3, [r7, #20]
 801101e:	1ad3      	subs	r3, r2, r3
 8011020:	6a3a      	ldr	r2, [r7, #32]
 8011022:	429a      	cmp	r2, r3
 8011024:	d915      	bls.n	8011052 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	6a1a      	ldr	r2, [r3, #32]
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	1ad3      	subs	r3, r2, r3
 8011034:	025b      	lsls	r3, r3, #9
 8011036:	69fa      	ldr	r2, [r7, #28]
 8011038:	4413      	add	r3, r2
 801103a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801103e:	4619      	mov	r1, r3
 8011040:	f7fd fc1e 	bl	800e880 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	7d1b      	ldrb	r3, [r3, #20]
 8011048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801104c:	b2da      	uxtb	r2, r3
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011052:	6a3b      	ldr	r3, [r7, #32]
 8011054:	025b      	lsls	r3, r3, #9
 8011056:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011058:	e044      	b.n	80110e4 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	6a1b      	ldr	r3, [r3, #32]
 801105e:	697a      	ldr	r2, [r7, #20]
 8011060:	429a      	cmp	r2, r3
 8011062:	d01b      	beq.n	801109c <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	699a      	ldr	r2, [r3, #24]
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801106c:	429a      	cmp	r2, r3
 801106e:	d215      	bcs.n	801109c <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	7858      	ldrb	r0, [r3, #1]
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801107a:	2301      	movs	r3, #1
 801107c:	697a      	ldr	r2, [r7, #20]
 801107e:	f7fd fb1f 	bl	800e6c0 <disk_read>
 8011082:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011084:	2b00      	cmp	r3, #0
 8011086:	d009      	beq.n	801109c <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	2201      	movs	r2, #1
 801108c:	755a      	strb	r2, [r3, #21]
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	2101      	movs	r1, #1
 8011092:	4618      	mov	r0, r3
 8011094:	f7fd fc88 	bl	800e9a8 <unlock_fs>
 8011098:	2301      	movs	r3, #1
 801109a:	e053      	b.n	8011144 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	697a      	ldr	r2, [r7, #20]
 80110a0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	699b      	ldr	r3, [r3, #24]
 80110a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80110ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80110b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d901      	bls.n	80110bc <f_write+0x2b8>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	699b      	ldr	r3, [r3, #24]
 80110c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110ca:	4413      	add	r3, r2
 80110cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110ce:	69f9      	ldr	r1, [r7, #28]
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7fd fbd5 	bl	800e880 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	7d1b      	ldrb	r3, [r3, #20]
 80110da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80110de:	b2da      	uxtb	r2, r3
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80110e4:	69fa      	ldr	r2, [r7, #28]
 80110e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e8:	4413      	add	r3, r2
 80110ea:	61fb      	str	r3, [r7, #28]
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	699a      	ldr	r2, [r3, #24]
 80110f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f2:	441a      	add	r2, r3
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	619a      	str	r2, [r3, #24]
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	68da      	ldr	r2, [r3, #12]
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	699b      	ldr	r3, [r3, #24]
 8011100:	429a      	cmp	r2, r3
 8011102:	bf38      	it	cc
 8011104:	461a      	movcc	r2, r3
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	60da      	str	r2, [r3, #12]
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	681a      	ldr	r2, [r3, #0]
 801110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011110:	441a      	add	r2, r3
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	601a      	str	r2, [r3, #0]
 8011116:	687a      	ldr	r2, [r7, #4]
 8011118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111a:	1ad3      	subs	r3, r2, r3
 801111c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2b00      	cmp	r3, #0
 8011122:	f47f aeb6 	bne.w	8010e92 <f_write+0x8e>
 8011126:	e000      	b.n	801112a <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011128:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	7d1b      	ldrb	r3, [r3, #20]
 801112e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011132:	b2da      	uxtb	r2, r3
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	2100      	movs	r1, #0
 801113c:	4618      	mov	r0, r3
 801113e:	f7fd fc33 	bl	800e9a8 <unlock_fs>
 8011142:	2300      	movs	r3, #0
}
 8011144:	4618      	mov	r0, r3
 8011146:	3730      	adds	r7, #48	; 0x30
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}

0801114c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b086      	sub	sp, #24
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f107 0208 	add.w	r2, r7, #8
 801115a:	4611      	mov	r1, r2
 801115c:	4618      	mov	r0, r3
 801115e:	f7ff fb53 	bl	8010808 <validate>
 8011162:	4603      	mov	r3, r0
 8011164:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011166:	7dfb      	ldrb	r3, [r7, #23]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d16d      	bne.n	8011248 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	7d1b      	ldrb	r3, [r3, #20]
 8011170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011174:	2b00      	cmp	r3, #0
 8011176:	d067      	beq.n	8011248 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	7d1b      	ldrb	r3, [r3, #20]
 801117c:	b25b      	sxtb	r3, r3
 801117e:	2b00      	cmp	r3, #0
 8011180:	da1a      	bge.n	80111b8 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	7858      	ldrb	r0, [r3, #1]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6a1a      	ldr	r2, [r3, #32]
 8011190:	2301      	movs	r3, #1
 8011192:	f7fd fab5 	bl	800e700 <disk_write>
 8011196:	4603      	mov	r3, r0
 8011198:	2b00      	cmp	r3, #0
 801119a:	d006      	beq.n	80111aa <f_sync+0x5e>
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	2101      	movs	r1, #1
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7fd fc01 	bl	800e9a8 <unlock_fs>
 80111a6:	2301      	movs	r3, #1
 80111a8:	e055      	b.n	8011256 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	7d1b      	ldrb	r3, [r3, #20]
 80111ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111b2:	b2da      	uxtb	r2, r3
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80111b8:	f7fc ffe0 	bl	800e17c <get_fattime>
 80111bc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80111be:	68ba      	ldr	r2, [r7, #8]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111c4:	4619      	mov	r1, r3
 80111c6:	4610      	mov	r0, r2
 80111c8:	f7fd fd7e 	bl	800ecc8 <move_window>
 80111cc:	4603      	mov	r3, r0
 80111ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80111d0:	7dfb      	ldrb	r3, [r7, #23]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d138      	bne.n	8011248 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111da:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	330b      	adds	r3, #11
 80111e0:	781a      	ldrb	r2, [r3, #0]
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	330b      	adds	r3, #11
 80111e6:	f042 0220 	orr.w	r2, r2, #32
 80111ea:	b2d2      	uxtb	r2, r2
 80111ec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6818      	ldr	r0, [r3, #0]
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	689b      	ldr	r3, [r3, #8]
 80111f6:	461a      	mov	r2, r3
 80111f8:	68f9      	ldr	r1, [r7, #12]
 80111fa:	f7fe fa8b 	bl	800f714 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	f103 021c 	add.w	r2, r3, #28
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	68db      	ldr	r3, [r3, #12]
 8011208:	4619      	mov	r1, r3
 801120a:	4610      	mov	r0, r2
 801120c:	f7fd fb0c 	bl	800e828 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	3316      	adds	r3, #22
 8011214:	6939      	ldr	r1, [r7, #16]
 8011216:	4618      	mov	r0, r3
 8011218:	f7fd fb06 	bl	800e828 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	3312      	adds	r3, #18
 8011220:	2100      	movs	r1, #0
 8011222:	4618      	mov	r0, r3
 8011224:	f7fd fae5 	bl	800e7f2 <st_word>
					fs->wflag = 1;
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	2201      	movs	r2, #1
 801122c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	4618      	mov	r0, r3
 8011232:	f7fd fd77 	bl	800ed24 <sync_fs>
 8011236:	4603      	mov	r3, r0
 8011238:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	7d1b      	ldrb	r3, [r3, #20]
 801123e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011242:	b2da      	uxtb	r2, r3
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	7dfa      	ldrb	r2, [r7, #23]
 801124c:	4611      	mov	r1, r2
 801124e:	4618      	mov	r0, r3
 8011250:	f7fd fbaa 	bl	800e9a8 <unlock_fs>
 8011254:	7dfb      	ldrb	r3, [r7, #23]
}
 8011256:	4618      	mov	r0, r3
 8011258:	3718      	adds	r7, #24
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}

0801125e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801125e:	b580      	push	{r7, lr}
 8011260:	b090      	sub	sp, #64	; 0x40
 8011262:	af00      	add	r7, sp, #0
 8011264:	6078      	str	r0, [r7, #4]
 8011266:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f107 0208 	add.w	r2, r7, #8
 801126e:	4611      	mov	r1, r2
 8011270:	4618      	mov	r0, r3
 8011272:	f7ff fac9 	bl	8010808 <validate>
 8011276:	4603      	mov	r3, r0
 8011278:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801127c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011280:	2b00      	cmp	r3, #0
 8011282:	d103      	bne.n	801128c <f_lseek+0x2e>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	7d5b      	ldrb	r3, [r3, #21]
 8011288:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801128c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011290:	2b00      	cmp	r3, #0
 8011292:	d009      	beq.n	80112a8 <f_lseek+0x4a>
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801129a:	4611      	mov	r1, r2
 801129c:	4618      	mov	r0, r3
 801129e:	f7fd fb83 	bl	800e9a8 <unlock_fs>
 80112a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80112a6:	e229      	b.n	80116fc <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	f000 80ea 	beq.w	8011486 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112b8:	d164      	bne.n	8011384 <f_lseek+0x126>
			tbl = fp->cltbl;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112be:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80112c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c2:	1d1a      	adds	r2, r3, #4
 80112c4:	627a      	str	r2, [r7, #36]	; 0x24
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	617b      	str	r3, [r7, #20]
 80112ca:	2302      	movs	r3, #2
 80112cc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	689b      	ldr	r3, [r3, #8]
 80112d2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80112d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d044      	beq.n	8011364 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80112da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112dc:	613b      	str	r3, [r7, #16]
 80112de:	2300      	movs	r3, #0
 80112e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80112e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e4:	3302      	adds	r3, #2
 80112e6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80112e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ea:	60fb      	str	r3, [r7, #12]
 80112ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ee:	3301      	adds	r3, #1
 80112f0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7fd fda1 	bl	800ee3e <get_fat>
 80112fc:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80112fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011300:	2b01      	cmp	r3, #1
 8011302:	d809      	bhi.n	8011318 <f_lseek+0xba>
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2202      	movs	r2, #2
 8011308:	755a      	strb	r2, [r3, #21]
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	2102      	movs	r1, #2
 801130e:	4618      	mov	r0, r3
 8011310:	f7fd fb4a 	bl	800e9a8 <unlock_fs>
 8011314:	2302      	movs	r3, #2
 8011316:	e1f1      	b.n	80116fc <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801131e:	d109      	bne.n	8011334 <f_lseek+0xd6>
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2201      	movs	r2, #1
 8011324:	755a      	strb	r2, [r3, #21]
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	2101      	movs	r1, #1
 801132a:	4618      	mov	r0, r3
 801132c:	f7fd fb3c 	bl	800e9a8 <unlock_fs>
 8011330:	2301      	movs	r3, #1
 8011332:	e1e3      	b.n	80116fc <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	3301      	adds	r3, #1
 8011338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801133a:	429a      	cmp	r2, r3
 801133c:	d0d4      	beq.n	80112e8 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801133e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	429a      	cmp	r2, r3
 8011344:	d809      	bhi.n	801135a <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8011346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011348:	1d1a      	adds	r2, r3, #4
 801134a:	627a      	str	r2, [r7, #36]	; 0x24
 801134c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801134e:	601a      	str	r2, [r3, #0]
 8011350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011352:	1d1a      	adds	r2, r3, #4
 8011354:	627a      	str	r2, [r7, #36]	; 0x24
 8011356:	693a      	ldr	r2, [r7, #16]
 8011358:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	69db      	ldr	r3, [r3, #28]
 801135e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011360:	429a      	cmp	r2, r3
 8011362:	d3ba      	bcc.n	80112da <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801136a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801136c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	429a      	cmp	r2, r3
 8011372:	d803      	bhi.n	801137c <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8011374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011376:	2200      	movs	r2, #0
 8011378:	601a      	str	r2, [r3, #0]
 801137a:	e1b6      	b.n	80116ea <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801137c:	2311      	movs	r3, #17
 801137e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011382:	e1b2      	b.n	80116ea <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	68db      	ldr	r3, [r3, #12]
 8011388:	683a      	ldr	r2, [r7, #0]
 801138a:	429a      	cmp	r2, r3
 801138c:	d902      	bls.n	8011394 <f_lseek+0x136>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	683a      	ldr	r2, [r7, #0]
 8011398:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801139a:	683b      	ldr	r3, [r7, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	f000 81a4 	beq.w	80116ea <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	3b01      	subs	r3, #1
 80113a6:	4619      	mov	r1, r3
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f7fd ffd9 	bl	800f360 <clmt_clust>
 80113ae:	4602      	mov	r2, r0
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80113b4:	68ba      	ldr	r2, [r7, #8]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	69db      	ldr	r3, [r3, #28]
 80113ba:	4619      	mov	r1, r3
 80113bc:	4610      	mov	r0, r2
 80113be:	f7fd fd1f 	bl	800ee00 <clust2sect>
 80113c2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80113c4:	69bb      	ldr	r3, [r7, #24]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d109      	bne.n	80113de <f_lseek+0x180>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2202      	movs	r2, #2
 80113ce:	755a      	strb	r2, [r3, #21]
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	2102      	movs	r1, #2
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7fd fae7 	bl	800e9a8 <unlock_fs>
 80113da:	2302      	movs	r3, #2
 80113dc:	e18e      	b.n	80116fc <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	3b01      	subs	r3, #1
 80113e2:	0a5b      	lsrs	r3, r3, #9
 80113e4:	68ba      	ldr	r2, [r7, #8]
 80113e6:	8952      	ldrh	r2, [r2, #10]
 80113e8:	3a01      	subs	r2, #1
 80113ea:	4013      	ands	r3, r2
 80113ec:	69ba      	ldr	r2, [r7, #24]
 80113ee:	4413      	add	r3, r2
 80113f0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	699b      	ldr	r3, [r3, #24]
 80113f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	f000 8175 	beq.w	80116ea <f_lseek+0x48c>
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6a1b      	ldr	r3, [r3, #32]
 8011404:	69ba      	ldr	r2, [r7, #24]
 8011406:	429a      	cmp	r2, r3
 8011408:	f000 816f 	beq.w	80116ea <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	7d1b      	ldrb	r3, [r3, #20]
 8011410:	b25b      	sxtb	r3, r3
 8011412:	2b00      	cmp	r3, #0
 8011414:	da1d      	bge.n	8011452 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	7858      	ldrb	r0, [r3, #1]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6a1a      	ldr	r2, [r3, #32]
 8011424:	2301      	movs	r3, #1
 8011426:	f7fd f96b 	bl	800e700 <disk_write>
 801142a:	4603      	mov	r3, r0
 801142c:	2b00      	cmp	r3, #0
 801142e:	d009      	beq.n	8011444 <f_lseek+0x1e6>
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2201      	movs	r2, #1
 8011434:	755a      	strb	r2, [r3, #21]
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	2101      	movs	r1, #1
 801143a:	4618      	mov	r0, r3
 801143c:	f7fd fab4 	bl	800e9a8 <unlock_fs>
 8011440:	2301      	movs	r3, #1
 8011442:	e15b      	b.n	80116fc <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	7d1b      	ldrb	r3, [r3, #20]
 8011448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801144c:	b2da      	uxtb	r2, r3
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	7858      	ldrb	r0, [r3, #1]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801145c:	2301      	movs	r3, #1
 801145e:	69ba      	ldr	r2, [r7, #24]
 8011460:	f7fd f92e 	bl	800e6c0 <disk_read>
 8011464:	4603      	mov	r3, r0
 8011466:	2b00      	cmp	r3, #0
 8011468:	d009      	beq.n	801147e <f_lseek+0x220>
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2201      	movs	r2, #1
 801146e:	755a      	strb	r2, [r3, #21]
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	2101      	movs	r1, #1
 8011474:	4618      	mov	r0, r3
 8011476:	f7fd fa97 	bl	800e9a8 <unlock_fs>
 801147a:	2301      	movs	r3, #1
 801147c:	e13e      	b.n	80116fc <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	69ba      	ldr	r2, [r7, #24]
 8011482:	621a      	str	r2, [r3, #32]
 8011484:	e131      	b.n	80116ea <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	68db      	ldr	r3, [r3, #12]
 801148a:	683a      	ldr	r2, [r7, #0]
 801148c:	429a      	cmp	r2, r3
 801148e:	d908      	bls.n	80114a2 <f_lseek+0x244>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	7d1b      	ldrb	r3, [r3, #20]
 8011494:	f003 0302 	and.w	r3, r3, #2
 8011498:	2b00      	cmp	r3, #0
 801149a:	d102      	bne.n	80114a2 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	68db      	ldr	r3, [r3, #12]
 80114a0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	699b      	ldr	r3, [r3, #24]
 80114a6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80114a8:	2300      	movs	r3, #0
 80114aa:	637b      	str	r3, [r7, #52]	; 0x34
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114b0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	f000 80c0 	beq.w	801163a <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	895b      	ldrh	r3, [r3, #10]
 80114be:	025b      	lsls	r3, r3, #9
 80114c0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80114c2:	6a3b      	ldr	r3, [r7, #32]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d01b      	beq.n	8011500 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	1e5a      	subs	r2, r3, #1
 80114cc:	69fb      	ldr	r3, [r7, #28]
 80114ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80114d2:	6a3b      	ldr	r3, [r7, #32]
 80114d4:	1e59      	subs	r1, r3, #1
 80114d6:	69fb      	ldr	r3, [r7, #28]
 80114d8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80114dc:	429a      	cmp	r2, r3
 80114de:	d30f      	bcc.n	8011500 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80114e0:	6a3b      	ldr	r3, [r7, #32]
 80114e2:	1e5a      	subs	r2, r3, #1
 80114e4:	69fb      	ldr	r3, [r7, #28]
 80114e6:	425b      	negs	r3, r3
 80114e8:	401a      	ands	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	699b      	ldr	r3, [r3, #24]
 80114f2:	683a      	ldr	r2, [r7, #0]
 80114f4:	1ad3      	subs	r3, r2, r3
 80114f6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	69db      	ldr	r3, [r3, #28]
 80114fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80114fe:	e02c      	b.n	801155a <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	689b      	ldr	r3, [r3, #8]
 8011504:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011508:	2b00      	cmp	r3, #0
 801150a:	d123      	bne.n	8011554 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2100      	movs	r1, #0
 8011510:	4618      	mov	r0, r3
 8011512:	f7fd fe8d 	bl	800f230 <create_chain>
 8011516:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801151a:	2b01      	cmp	r3, #1
 801151c:	d109      	bne.n	8011532 <f_lseek+0x2d4>
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	2202      	movs	r2, #2
 8011522:	755a      	strb	r2, [r3, #21]
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	2102      	movs	r1, #2
 8011528:	4618      	mov	r0, r3
 801152a:	f7fd fa3d 	bl	800e9a8 <unlock_fs>
 801152e:	2302      	movs	r3, #2
 8011530:	e0e4      	b.n	80116fc <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011538:	d109      	bne.n	801154e <f_lseek+0x2f0>
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2201      	movs	r2, #1
 801153e:	755a      	strb	r2, [r3, #21]
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	2101      	movs	r1, #1
 8011544:	4618      	mov	r0, r3
 8011546:	f7fd fa2f 	bl	800e9a8 <unlock_fs>
 801154a:	2301      	movs	r3, #1
 801154c:	e0d6      	b.n	80116fc <f_lseek+0x49e>
					fp->obj.sclust = clst;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011552:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011558:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801155a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801155c:	2b00      	cmp	r3, #0
 801155e:	d06c      	beq.n	801163a <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8011560:	e044      	b.n	80115ec <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8011562:	683a      	ldr	r2, [r7, #0]
 8011564:	69fb      	ldr	r3, [r7, #28]
 8011566:	1ad3      	subs	r3, r2, r3
 8011568:	603b      	str	r3, [r7, #0]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	699a      	ldr	r2, [r3, #24]
 801156e:	69fb      	ldr	r3, [r7, #28]
 8011570:	441a      	add	r2, r3
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	7d1b      	ldrb	r3, [r3, #20]
 801157a:	f003 0302 	and.w	r3, r3, #2
 801157e:	2b00      	cmp	r3, #0
 8011580:	d00b      	beq.n	801159a <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011586:	4618      	mov	r0, r3
 8011588:	f7fd fe52 	bl	800f230 <create_chain>
 801158c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801158e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011590:	2b00      	cmp	r3, #0
 8011592:	d108      	bne.n	80115a6 <f_lseek+0x348>
							ofs = 0; break;
 8011594:	2300      	movs	r3, #0
 8011596:	603b      	str	r3, [r7, #0]
 8011598:	e02c      	b.n	80115f4 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801159e:	4618      	mov	r0, r3
 80115a0:	f7fd fc4d 	bl	800ee3e <get_fat>
 80115a4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80115a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ac:	d109      	bne.n	80115c2 <f_lseek+0x364>
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2201      	movs	r2, #1
 80115b2:	755a      	strb	r2, [r3, #21]
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	2101      	movs	r1, #1
 80115b8:	4618      	mov	r0, r3
 80115ba:	f7fd f9f5 	bl	800e9a8 <unlock_fs>
 80115be:	2301      	movs	r3, #1
 80115c0:	e09c      	b.n	80116fc <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80115c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c4:	2b01      	cmp	r3, #1
 80115c6:	d904      	bls.n	80115d2 <f_lseek+0x374>
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	69db      	ldr	r3, [r3, #28]
 80115cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d309      	bcc.n	80115e6 <f_lseek+0x388>
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2202      	movs	r2, #2
 80115d6:	755a      	strb	r2, [r3, #21]
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	2102      	movs	r1, #2
 80115dc:	4618      	mov	r0, r3
 80115de:	f7fd f9e3 	bl	800e9a8 <unlock_fs>
 80115e2:	2302      	movs	r3, #2
 80115e4:	e08a      	b.n	80116fc <f_lseek+0x49e>
					fp->clust = clst;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115ea:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80115ec:	683a      	ldr	r2, [r7, #0]
 80115ee:	69fb      	ldr	r3, [r7, #28]
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d8b6      	bhi.n	8011562 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	699a      	ldr	r2, [r3, #24]
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	441a      	add	r2, r3
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011606:	2b00      	cmp	r3, #0
 8011608:	d017      	beq.n	801163a <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801160e:	4618      	mov	r0, r3
 8011610:	f7fd fbf6 	bl	800ee00 <clust2sect>
 8011614:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011618:	2b00      	cmp	r3, #0
 801161a:	d109      	bne.n	8011630 <f_lseek+0x3d2>
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2202      	movs	r2, #2
 8011620:	755a      	strb	r2, [r3, #21]
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	2102      	movs	r1, #2
 8011626:	4618      	mov	r0, r3
 8011628:	f7fd f9be 	bl	800e9a8 <unlock_fs>
 801162c:	2302      	movs	r3, #2
 801162e:	e065      	b.n	80116fc <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	0a5b      	lsrs	r3, r3, #9
 8011634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011636:	4413      	add	r3, r2
 8011638:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	699a      	ldr	r2, [r3, #24]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	68db      	ldr	r3, [r3, #12]
 8011642:	429a      	cmp	r2, r3
 8011644:	d90a      	bls.n	801165c <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	699a      	ldr	r2, [r3, #24]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	7d1b      	ldrb	r3, [r3, #20]
 8011652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011656:	b2da      	uxtb	r2, r3
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	699b      	ldr	r3, [r3, #24]
 8011660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011664:	2b00      	cmp	r3, #0
 8011666:	d040      	beq.n	80116ea <f_lseek+0x48c>
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6a1b      	ldr	r3, [r3, #32]
 801166c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801166e:	429a      	cmp	r2, r3
 8011670:	d03b      	beq.n	80116ea <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	7d1b      	ldrb	r3, [r3, #20]
 8011676:	b25b      	sxtb	r3, r3
 8011678:	2b00      	cmp	r3, #0
 801167a:	da1d      	bge.n	80116b8 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	7858      	ldrb	r0, [r3, #1]
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6a1a      	ldr	r2, [r3, #32]
 801168a:	2301      	movs	r3, #1
 801168c:	f7fd f838 	bl	800e700 <disk_write>
 8011690:	4603      	mov	r3, r0
 8011692:	2b00      	cmp	r3, #0
 8011694:	d009      	beq.n	80116aa <f_lseek+0x44c>
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2201      	movs	r2, #1
 801169a:	755a      	strb	r2, [r3, #21]
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	2101      	movs	r1, #1
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7fd f981 	bl	800e9a8 <unlock_fs>
 80116a6:	2301      	movs	r3, #1
 80116a8:	e028      	b.n	80116fc <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	7d1b      	ldrb	r3, [r3, #20]
 80116ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116b2:	b2da      	uxtb	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	7858      	ldrb	r0, [r3, #1]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80116c2:	2301      	movs	r3, #1
 80116c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116c6:	f7fc fffb 	bl	800e6c0 <disk_read>
 80116ca:	4603      	mov	r3, r0
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d009      	beq.n	80116e4 <f_lseek+0x486>
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2201      	movs	r2, #1
 80116d4:	755a      	strb	r2, [r3, #21]
 80116d6:	68bb      	ldr	r3, [r7, #8]
 80116d8:	2101      	movs	r1, #1
 80116da:	4618      	mov	r0, r3
 80116dc:	f7fd f964 	bl	800e9a8 <unlock_fs>
 80116e0:	2301      	movs	r3, #1
 80116e2:	e00b      	b.n	80116fc <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116e8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80116f0:	4611      	mov	r1, r2
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fd f958 	bl	800e9a8 <unlock_fs>
 80116f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3740      	adds	r7, #64	; 0x40
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b084      	sub	sp, #16
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	460b      	mov	r3, r1
 801170e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8011710:	78fb      	ldrb	r3, [r7, #3]
 8011712:	2b0a      	cmp	r3, #10
 8011714:	d103      	bne.n	801171e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8011716:	210d      	movs	r1, #13
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f7ff fff3 	bl	8011704 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	2b00      	cmp	r3, #0
 8011728:	db25      	blt.n	8011776 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	1c5a      	adds	r2, r3, #1
 801172e:	60fa      	str	r2, [r7, #12]
 8011730:	687a      	ldr	r2, [r7, #4]
 8011732:	4413      	add	r3, r2
 8011734:	78fa      	ldrb	r2, [r7, #3]
 8011736:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2b3c      	cmp	r3, #60	; 0x3c
 801173c:	dd12      	ble.n	8011764 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6818      	ldr	r0, [r3, #0]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f103 010c 	add.w	r1, r3, #12
 8011748:	68fa      	ldr	r2, [r7, #12]
 801174a:	f107 0308 	add.w	r3, r7, #8
 801174e:	f7ff fb59 	bl	8010e04 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011752:	68ba      	ldr	r2, [r7, #8]
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	429a      	cmp	r2, r3
 8011758:	d101      	bne.n	801175e <putc_bfd+0x5a>
 801175a:	2300      	movs	r3, #0
 801175c:	e001      	b.n	8011762 <putc_bfd+0x5e>
 801175e:	f04f 33ff 	mov.w	r3, #4294967295
 8011762:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	68fa      	ldr	r2, [r7, #12]
 8011768:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	689b      	ldr	r3, [r3, #8]
 801176e:	1c5a      	adds	r2, r3, #1
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	609a      	str	r2, [r3, #8]
 8011774:	e000      	b.n	8011778 <putc_bfd+0x74>
	if (i < 0) return;
 8011776:	bf00      	nop
}
 8011778:	3710      	adds	r7, #16
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}

0801177e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801177e:	b580      	push	{r7, lr}
 8011780:	b084      	sub	sp, #16
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	2b00      	cmp	r3, #0
 801178c:	db16      	blt.n	80117bc <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6818      	ldr	r0, [r3, #0]
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f103 010c 	add.w	r1, r3, #12
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	461a      	mov	r2, r3
 801179e:	f107 030c 	add.w	r3, r7, #12
 80117a2:	f7ff fb2f 	bl	8010e04 <f_write>
 80117a6:	4603      	mov	r3, r0
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d107      	bne.n	80117bc <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	68fa      	ldr	r2, [r7, #12]
 80117b2:	4293      	cmp	r3, r2
 80117b4:	d102      	bne.n	80117bc <putc_flush+0x3e>
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	689b      	ldr	r3, [r3, #8]
 80117ba:	e001      	b.n	80117c0 <putc_flush+0x42>
	return EOF;
 80117bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80117c0:	4618      	mov	r0, r3
 80117c2:	3710      	adds	r7, #16
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}

080117c8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80117c8:	b480      	push	{r7}
 80117ca:	b083      	sub	sp, #12
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
 80117d0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	683a      	ldr	r2, [r7, #0]
 80117d6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2200      	movs	r2, #0
 80117dc:	605a      	str	r2, [r3, #4]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	685a      	ldr	r2, [r3, #4]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	609a      	str	r2, [r3, #8]
}
 80117e6:	bf00      	nop
 80117e8:	370c      	adds	r7, #12
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr

080117f2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80117f2:	b580      	push	{r7, lr}
 80117f4:	b096      	sub	sp, #88	; 0x58
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	6078      	str	r0, [r7, #4]
 80117fa:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80117fc:	f107 030c 	add.w	r3, r7, #12
 8011800:	6839      	ldr	r1, [r7, #0]
 8011802:	4618      	mov	r0, r3
 8011804:	f7ff ffe0 	bl	80117c8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8011808:	e009      	b.n	801181e <f_puts+0x2c>
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	1c5a      	adds	r2, r3, #1
 801180e:	607a      	str	r2, [r7, #4]
 8011810:	781a      	ldrb	r2, [r3, #0]
 8011812:	f107 030c 	add.w	r3, r7, #12
 8011816:	4611      	mov	r1, r2
 8011818:	4618      	mov	r0, r3
 801181a:	f7ff ff73 	bl	8011704 <putc_bfd>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d1f1      	bne.n	801180a <f_puts+0x18>
	return putc_flush(&pb);
 8011826:	f107 030c 	add.w	r3, r7, #12
 801182a:	4618      	mov	r0, r3
 801182c:	f7ff ffa7 	bl	801177e <putc_flush>
 8011830:	4603      	mov	r3, r0
}
 8011832:	4618      	mov	r0, r3
 8011834:	3758      	adds	r7, #88	; 0x58
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
	...

0801183c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801183c:	b480      	push	{r7}
 801183e:	b087      	sub	sp, #28
 8011840:	af00      	add	r7, sp, #0
 8011842:	60f8      	str	r0, [r7, #12]
 8011844:	60b9      	str	r1, [r7, #8]
 8011846:	4613      	mov	r3, r2
 8011848:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801184a:	2301      	movs	r3, #1
 801184c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801184e:	2300      	movs	r3, #0
 8011850:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011852:	4b1f      	ldr	r3, [pc, #124]	; (80118d0 <FATFS_LinkDriverEx+0x94>)
 8011854:	7a5b      	ldrb	r3, [r3, #9]
 8011856:	b2db      	uxtb	r3, r3
 8011858:	2b00      	cmp	r3, #0
 801185a:	d131      	bne.n	80118c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801185c:	4b1c      	ldr	r3, [pc, #112]	; (80118d0 <FATFS_LinkDriverEx+0x94>)
 801185e:	7a5b      	ldrb	r3, [r3, #9]
 8011860:	b2db      	uxtb	r3, r3
 8011862:	461a      	mov	r2, r3
 8011864:	4b1a      	ldr	r3, [pc, #104]	; (80118d0 <FATFS_LinkDriverEx+0x94>)
 8011866:	2100      	movs	r1, #0
 8011868:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801186a:	4b19      	ldr	r3, [pc, #100]	; (80118d0 <FATFS_LinkDriverEx+0x94>)
 801186c:	7a5b      	ldrb	r3, [r3, #9]
 801186e:	b2db      	uxtb	r3, r3
 8011870:	4a17      	ldr	r2, [pc, #92]	; (80118d0 <FATFS_LinkDriverEx+0x94>)
 8011872:	009b      	lsls	r3, r3, #2
 8011874:	4413      	add	r3, r2
 8011876:	68fa      	ldr	r2, [r7, #12]
 8011878:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801187a:	4b15      	ldr	r3, [pc, #84]	; (80118d0 <FATFS_LinkDriverEx+0x94>)
 801187c:	7a5b      	ldrb	r3, [r3, #9]
 801187e:	b2db      	uxtb	r3, r3
 8011880:	461a      	mov	r2, r3
 8011882:	4b13      	ldr	r3, [pc, #76]	; (80118d0 <FATFS_LinkDriverEx+0x94>)
 8011884:	4413      	add	r3, r2
 8011886:	79fa      	ldrb	r2, [r7, #7]
 8011888:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801188a:	4b11      	ldr	r3, [pc, #68]	; (80118d0 <FATFS_LinkDriverEx+0x94>)
 801188c:	7a5b      	ldrb	r3, [r3, #9]
 801188e:	b2db      	uxtb	r3, r3
 8011890:	1c5a      	adds	r2, r3, #1
 8011892:	b2d1      	uxtb	r1, r2
 8011894:	4a0e      	ldr	r2, [pc, #56]	; (80118d0 <FATFS_LinkDriverEx+0x94>)
 8011896:	7251      	strb	r1, [r2, #9]
 8011898:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801189a:	7dbb      	ldrb	r3, [r7, #22]
 801189c:	3330      	adds	r3, #48	; 0x30
 801189e:	b2da      	uxtb	r2, r3
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	3301      	adds	r3, #1
 80118a8:	223a      	movs	r2, #58	; 0x3a
 80118aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	3302      	adds	r3, #2
 80118b0:	222f      	movs	r2, #47	; 0x2f
 80118b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80118b4:	68bb      	ldr	r3, [r7, #8]
 80118b6:	3303      	adds	r3, #3
 80118b8:	2200      	movs	r2, #0
 80118ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80118bc:	2300      	movs	r3, #0
 80118be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80118c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	371c      	adds	r7, #28
 80118c6:	46bd      	mov	sp, r7
 80118c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118cc:	4770      	bx	lr
 80118ce:	bf00      	nop
 80118d0:	20000490 	.word	0x20000490

080118d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80118de:	2200      	movs	r2, #0
 80118e0:	6839      	ldr	r1, [r7, #0]
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f7ff ffaa 	bl	801183c <FATFS_LinkDriverEx>
 80118e8:	4603      	mov	r3, r0
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3708      	adds	r7, #8
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
	...

080118f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80118f4:	b480      	push	{r7}
 80118f6:	b085      	sub	sp, #20
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	4603      	mov	r3, r0
 80118fc:	6039      	str	r1, [r7, #0]
 80118fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011900:	88fb      	ldrh	r3, [r7, #6]
 8011902:	2b7f      	cmp	r3, #127	; 0x7f
 8011904:	d802      	bhi.n	801190c <ff_convert+0x18>
		c = chr;
 8011906:	88fb      	ldrh	r3, [r7, #6]
 8011908:	81fb      	strh	r3, [r7, #14]
 801190a:	e025      	b.n	8011958 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d00b      	beq.n	801192a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011912:	88fb      	ldrh	r3, [r7, #6]
 8011914:	2bff      	cmp	r3, #255	; 0xff
 8011916:	d805      	bhi.n	8011924 <ff_convert+0x30>
 8011918:	88fb      	ldrh	r3, [r7, #6]
 801191a:	3b80      	subs	r3, #128	; 0x80
 801191c:	4a12      	ldr	r2, [pc, #72]	; (8011968 <ff_convert+0x74>)
 801191e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011922:	e000      	b.n	8011926 <ff_convert+0x32>
 8011924:	2300      	movs	r3, #0
 8011926:	81fb      	strh	r3, [r7, #14]
 8011928:	e016      	b.n	8011958 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801192a:	2300      	movs	r3, #0
 801192c:	81fb      	strh	r3, [r7, #14]
 801192e:	e009      	b.n	8011944 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011930:	89fb      	ldrh	r3, [r7, #14]
 8011932:	4a0d      	ldr	r2, [pc, #52]	; (8011968 <ff_convert+0x74>)
 8011934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011938:	88fa      	ldrh	r2, [r7, #6]
 801193a:	429a      	cmp	r2, r3
 801193c:	d006      	beq.n	801194c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801193e:	89fb      	ldrh	r3, [r7, #14]
 8011940:	3301      	adds	r3, #1
 8011942:	81fb      	strh	r3, [r7, #14]
 8011944:	89fb      	ldrh	r3, [r7, #14]
 8011946:	2b7f      	cmp	r3, #127	; 0x7f
 8011948:	d9f2      	bls.n	8011930 <ff_convert+0x3c>
 801194a:	e000      	b.n	801194e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801194c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801194e:	89fb      	ldrh	r3, [r7, #14]
 8011950:	3380      	adds	r3, #128	; 0x80
 8011952:	b29b      	uxth	r3, r3
 8011954:	b2db      	uxtb	r3, r3
 8011956:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011958:	89fb      	ldrh	r3, [r7, #14]
}
 801195a:	4618      	mov	r0, r3
 801195c:	3714      	adds	r7, #20
 801195e:	46bd      	mov	sp, r7
 8011960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011964:	4770      	bx	lr
 8011966:	bf00      	nop
 8011968:	080159dc 	.word	0x080159dc

0801196c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801196c:	b480      	push	{r7}
 801196e:	b087      	sub	sp, #28
 8011970:	af00      	add	r7, sp, #0
 8011972:	4603      	mov	r3, r0
 8011974:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011976:	88fb      	ldrh	r3, [r7, #6]
 8011978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801197c:	d201      	bcs.n	8011982 <ff_wtoupper+0x16>
 801197e:	4b3e      	ldr	r3, [pc, #248]	; (8011a78 <ff_wtoupper+0x10c>)
 8011980:	e000      	b.n	8011984 <ff_wtoupper+0x18>
 8011982:	4b3e      	ldr	r3, [pc, #248]	; (8011a7c <ff_wtoupper+0x110>)
 8011984:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	1c9a      	adds	r2, r3, #2
 801198a:	617a      	str	r2, [r7, #20]
 801198c:	881b      	ldrh	r3, [r3, #0]
 801198e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011990:	8a7b      	ldrh	r3, [r7, #18]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d068      	beq.n	8011a68 <ff_wtoupper+0xfc>
 8011996:	88fa      	ldrh	r2, [r7, #6]
 8011998:	8a7b      	ldrh	r3, [r7, #18]
 801199a:	429a      	cmp	r2, r3
 801199c:	d364      	bcc.n	8011a68 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	1c9a      	adds	r2, r3, #2
 80119a2:	617a      	str	r2, [r7, #20]
 80119a4:	881b      	ldrh	r3, [r3, #0]
 80119a6:	823b      	strh	r3, [r7, #16]
 80119a8:	8a3b      	ldrh	r3, [r7, #16]
 80119aa:	0a1b      	lsrs	r3, r3, #8
 80119ac:	81fb      	strh	r3, [r7, #14]
 80119ae:	8a3b      	ldrh	r3, [r7, #16]
 80119b0:	b2db      	uxtb	r3, r3
 80119b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80119b4:	88fa      	ldrh	r2, [r7, #6]
 80119b6:	8a79      	ldrh	r1, [r7, #18]
 80119b8:	8a3b      	ldrh	r3, [r7, #16]
 80119ba:	440b      	add	r3, r1
 80119bc:	429a      	cmp	r2, r3
 80119be:	da49      	bge.n	8011a54 <ff_wtoupper+0xe8>
			switch (cmd) {
 80119c0:	89fb      	ldrh	r3, [r7, #14]
 80119c2:	2b08      	cmp	r3, #8
 80119c4:	d84f      	bhi.n	8011a66 <ff_wtoupper+0xfa>
 80119c6:	a201      	add	r2, pc, #4	; (adr r2, 80119cc <ff_wtoupper+0x60>)
 80119c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119cc:	080119f1 	.word	0x080119f1
 80119d0:	08011a03 	.word	0x08011a03
 80119d4:	08011a19 	.word	0x08011a19
 80119d8:	08011a21 	.word	0x08011a21
 80119dc:	08011a29 	.word	0x08011a29
 80119e0:	08011a31 	.word	0x08011a31
 80119e4:	08011a39 	.word	0x08011a39
 80119e8:	08011a41 	.word	0x08011a41
 80119ec:	08011a49 	.word	0x08011a49
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80119f0:	88fa      	ldrh	r2, [r7, #6]
 80119f2:	8a7b      	ldrh	r3, [r7, #18]
 80119f4:	1ad3      	subs	r3, r2, r3
 80119f6:	005b      	lsls	r3, r3, #1
 80119f8:	697a      	ldr	r2, [r7, #20]
 80119fa:	4413      	add	r3, r2
 80119fc:	881b      	ldrh	r3, [r3, #0]
 80119fe:	80fb      	strh	r3, [r7, #6]
 8011a00:	e027      	b.n	8011a52 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011a02:	88fa      	ldrh	r2, [r7, #6]
 8011a04:	8a7b      	ldrh	r3, [r7, #18]
 8011a06:	1ad3      	subs	r3, r2, r3
 8011a08:	b29b      	uxth	r3, r3
 8011a0a:	f003 0301 	and.w	r3, r3, #1
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	88fa      	ldrh	r2, [r7, #6]
 8011a12:	1ad3      	subs	r3, r2, r3
 8011a14:	80fb      	strh	r3, [r7, #6]
 8011a16:	e01c      	b.n	8011a52 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011a18:	88fb      	ldrh	r3, [r7, #6]
 8011a1a:	3b10      	subs	r3, #16
 8011a1c:	80fb      	strh	r3, [r7, #6]
 8011a1e:	e018      	b.n	8011a52 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011a20:	88fb      	ldrh	r3, [r7, #6]
 8011a22:	3b20      	subs	r3, #32
 8011a24:	80fb      	strh	r3, [r7, #6]
 8011a26:	e014      	b.n	8011a52 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011a28:	88fb      	ldrh	r3, [r7, #6]
 8011a2a:	3b30      	subs	r3, #48	; 0x30
 8011a2c:	80fb      	strh	r3, [r7, #6]
 8011a2e:	e010      	b.n	8011a52 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011a30:	88fb      	ldrh	r3, [r7, #6]
 8011a32:	3b1a      	subs	r3, #26
 8011a34:	80fb      	strh	r3, [r7, #6]
 8011a36:	e00c      	b.n	8011a52 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011a38:	88fb      	ldrh	r3, [r7, #6]
 8011a3a:	3308      	adds	r3, #8
 8011a3c:	80fb      	strh	r3, [r7, #6]
 8011a3e:	e008      	b.n	8011a52 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011a40:	88fb      	ldrh	r3, [r7, #6]
 8011a42:	3b50      	subs	r3, #80	; 0x50
 8011a44:	80fb      	strh	r3, [r7, #6]
 8011a46:	e004      	b.n	8011a52 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011a48:	88fb      	ldrh	r3, [r7, #6]
 8011a4a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011a4e:	80fb      	strh	r3, [r7, #6]
 8011a50:	bf00      	nop
			}
			break;
 8011a52:	e008      	b.n	8011a66 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011a54:	89fb      	ldrh	r3, [r7, #14]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d195      	bne.n	8011986 <ff_wtoupper+0x1a>
 8011a5a:	8a3b      	ldrh	r3, [r7, #16]
 8011a5c:	005b      	lsls	r3, r3, #1
 8011a5e:	697a      	ldr	r2, [r7, #20]
 8011a60:	4413      	add	r3, r2
 8011a62:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011a64:	e78f      	b.n	8011986 <ff_wtoupper+0x1a>
			break;
 8011a66:	bf00      	nop
	}

	return chr;
 8011a68:	88fb      	ldrh	r3, [r7, #6]
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	371c      	adds	r7, #28
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a74:	4770      	bx	lr
 8011a76:	bf00      	nop
 8011a78:	08015adc 	.word	0x08015adc
 8011a7c:	08015cd0 	.word	0x08015cd0

08011a80 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b084      	sub	sp, #16
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	4603      	mov	r3, r0
 8011a88:	6039      	str	r1, [r7, #0]
 8011a8a:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8011a90:	f107 0308 	add.w	r3, r7, #8
 8011a94:	2101      	movs	r1, #1
 8011a96:	4618      	mov	r0, r3
 8011a98:	f000 f8c4 	bl	8011c24 <osSemaphoreCreate>
 8011a9c:	4602      	mov	r2, r0
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	bf14      	ite	ne
 8011aaa:	2301      	movne	r3, #1
 8011aac:	2300      	moveq	r3, #0
 8011aae:	b2db      	uxtb	r3, r3
 8011ab0:	60fb      	str	r3, [r7, #12]

    return ret;
 8011ab2:	68fb      	ldr	r3, [r7, #12]
}
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	3710      	adds	r7, #16
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}

08011abc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b082      	sub	sp, #8
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f000 f94f 	bl	8011d68 <osSemaphoreDelete>
#endif
    return 1;
 8011aca:	2301      	movs	r3, #1
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3708      	adds	r7, #8
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}

08011ad4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b084      	sub	sp, #16
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011adc:	2300      	movs	r3, #0
 8011ade:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8011ae0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f000 f8bb 	bl	8011c60 <osSemaphoreWait>
 8011aea:	4603      	mov	r3, r0
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d101      	bne.n	8011af4 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8011af0:	2301      	movs	r3, #1
 8011af2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011af4:	68fb      	ldr	r3, [r7, #12]
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3710      	adds	r7, #16
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}

08011afe <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011afe:	b580      	push	{r7, lr}
 8011b00:	b082      	sub	sp, #8
 8011b02:	af00      	add	r7, sp, #0
 8011b04:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011b06:	6878      	ldr	r0, [r7, #4]
 8011b08:	f000 f8f8 	bl	8011cfc <osSemaphoreRelease>
#endif
}
 8011b0c:	bf00      	nop
 8011b0e:	3708      	adds	r7, #8
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}

08011b14 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011b14:	b480      	push	{r7}
 8011b16:	b085      	sub	sp, #20
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b26:	2b84      	cmp	r3, #132	; 0x84
 8011b28:	d005      	beq.n	8011b36 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011b2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	4413      	add	r3, r2
 8011b32:	3303      	adds	r3, #3
 8011b34:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011b36:	68fb      	ldr	r3, [r7, #12]
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3714      	adds	r7, #20
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b42:	4770      	bx	lr

08011b44 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011b44:	b480      	push	{r7}
 8011b46:	b083      	sub	sp, #12
 8011b48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b4a:	f3ef 8305 	mrs	r3, IPSR
 8011b4e:	607b      	str	r3, [r7, #4]
  return(result);
 8011b50:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	bf14      	ite	ne
 8011b56:	2301      	movne	r3, #1
 8011b58:	2300      	moveq	r3, #0
 8011b5a:	b2db      	uxtb	r3, r3
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	370c      	adds	r7, #12
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr

08011b68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011b6c:	f001 fc70 	bl	8013450 <vTaskStartScheduler>
  
  return osOK;
 8011b70:	2300      	movs	r3, #0
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	bd80      	pop	{r7, pc}

08011b76 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8011b76:	b580      	push	{r7, lr}
 8011b78:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8011b7a:	f002 f89d 	bl	8013cb8 <xTaskGetSchedulerState>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	2b01      	cmp	r3, #1
 8011b82:	d101      	bne.n	8011b88 <osKernelRunning+0x12>
    return 0;
 8011b84:	2300      	movs	r3, #0
 8011b86:	e000      	b.n	8011b8a <osKernelRunning+0x14>
  else
    return 1;
 8011b88:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	bd80      	pop	{r7, pc}

08011b8e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8011b8e:	b580      	push	{r7, lr}
 8011b90:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8011b92:	f7ff ffd7 	bl	8011b44 <inHandlerMode>
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d003      	beq.n	8011ba4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8011b9c:	f001 fd62 	bl	8013664 <xTaskGetTickCountFromISR>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	e002      	b.n	8011baa <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8011ba4:	f001 fd4e 	bl	8013644 <xTaskGetTickCount>
 8011ba8:	4603      	mov	r3, r0
  }
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	bd80      	pop	{r7, pc}

08011bae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011bae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bb0:	b087      	sub	sp, #28
 8011bb2:	af02      	add	r7, sp, #8
 8011bb4:	6078      	str	r0, [r7, #4]
 8011bb6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	685c      	ldr	r4, [r3, #4]
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011bc4:	b29e      	uxth	r6, r3
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7ff ffa1 	bl	8011b14 <makeFreeRtosPriority>
 8011bd2:	4602      	mov	r2, r0
 8011bd4:	f107 030c 	add.w	r3, r7, #12
 8011bd8:	9301      	str	r3, [sp, #4]
 8011bda:	9200      	str	r2, [sp, #0]
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	4632      	mov	r2, r6
 8011be0:	4629      	mov	r1, r5
 8011be2:	4620      	mov	r0, r4
 8011be4:	f001 f90e 	bl	8012e04 <xTaskCreate>
 8011be8:	4603      	mov	r3, r0
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d001      	beq.n	8011bf2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	e000      	b.n	8011bf4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
}
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	3714      	adds	r7, #20
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011bfc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b084      	sub	sp, #16
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d001      	beq.n	8011c12 <osDelay+0x16>
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	e000      	b.n	8011c14 <osDelay+0x18>
 8011c12:	2301      	movs	r3, #1
 8011c14:	4618      	mov	r0, r3
 8011c16:	f001 fac5 	bl	80131a4 <vTaskDelay>
  
  return osOK;
 8011c1a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3710      	adds	r7, #16
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	2b01      	cmp	r3, #1
 8011c32:	d110      	bne.n	8011c56 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8011c34:	2203      	movs	r2, #3
 8011c36:	2100      	movs	r1, #0
 8011c38:	2001      	movs	r0, #1
 8011c3a:	f000 fa8b 	bl	8012154 <xQueueGenericCreate>
 8011c3e:	60f8      	str	r0, [r7, #12]
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d005      	beq.n	8011c52 <osSemaphoreCreate+0x2e>
 8011c46:	2300      	movs	r3, #0
 8011c48:	2200      	movs	r2, #0
 8011c4a:	2100      	movs	r1, #0
 8011c4c:	68f8      	ldr	r0, [r7, #12]
 8011c4e:	f000 fad7 	bl	8012200 <xQueueGenericSend>
    return sema;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	e000      	b.n	8011c58 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8011c56:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8011c58:	4618      	mov	r0, r3
 8011c5a:	3710      	adds	r7, #16
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	bd80      	pop	{r7, pc}

08011c60 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b084      	sub	sp, #16
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
 8011c68:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d101      	bne.n	8011c78 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011c74:	2380      	movs	r3, #128	; 0x80
 8011c76:	e03a      	b.n	8011cee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011c78:	2300      	movs	r3, #0
 8011c7a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c82:	d103      	bne.n	8011c8c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011c84:	f04f 33ff 	mov.w	r3, #4294967295
 8011c88:	60fb      	str	r3, [r7, #12]
 8011c8a:	e009      	b.n	8011ca0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d006      	beq.n	8011ca0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d101      	bne.n	8011ca0 <osSemaphoreWait+0x40>
      ticks = 1;
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011ca0:	f7ff ff50 	bl	8011b44 <inHandlerMode>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d017      	beq.n	8011cda <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011caa:	f107 0308 	add.w	r3, r7, #8
 8011cae:	461a      	mov	r2, r3
 8011cb0:	2100      	movs	r1, #0
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f000 feb6 	bl	8012a24 <xQueueReceiveFromISR>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2b01      	cmp	r3, #1
 8011cbc:	d001      	beq.n	8011cc2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8011cbe:	23ff      	movs	r3, #255	; 0xff
 8011cc0:	e015      	b.n	8011cee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d011      	beq.n	8011cec <osSemaphoreWait+0x8c>
 8011cc8:	4b0b      	ldr	r3, [pc, #44]	; (8011cf8 <osSemaphoreWait+0x98>)
 8011cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cce:	601a      	str	r2, [r3, #0]
 8011cd0:	f3bf 8f4f 	dsb	sy
 8011cd4:	f3bf 8f6f 	isb	sy
 8011cd8:	e008      	b.n	8011cec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011cda:	68f9      	ldr	r1, [r7, #12]
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f000 fd95 	bl	801280c <xQueueSemaphoreTake>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	2b01      	cmp	r3, #1
 8011ce6:	d001      	beq.n	8011cec <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011ce8:	23ff      	movs	r3, #255	; 0xff
 8011cea:	e000      	b.n	8011cee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011cec:	2300      	movs	r3, #0
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3710      	adds	r7, #16
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	e000ed04 	.word	0xe000ed04

08011cfc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b084      	sub	sp, #16
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011d04:	2300      	movs	r3, #0
 8011d06:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011d0c:	f7ff ff1a 	bl	8011b44 <inHandlerMode>
 8011d10:	4603      	mov	r3, r0
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d016      	beq.n	8011d44 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011d16:	f107 0308 	add.w	r3, r7, #8
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f000 fc08 	bl	8012532 <xQueueGiveFromISR>
 8011d22:	4603      	mov	r3, r0
 8011d24:	2b01      	cmp	r3, #1
 8011d26:	d001      	beq.n	8011d2c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011d28:	23ff      	movs	r3, #255	; 0xff
 8011d2a:	e017      	b.n	8011d5c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d013      	beq.n	8011d5a <osSemaphoreRelease+0x5e>
 8011d32:	4b0c      	ldr	r3, [pc, #48]	; (8011d64 <osSemaphoreRelease+0x68>)
 8011d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d38:	601a      	str	r2, [r3, #0]
 8011d3a:	f3bf 8f4f 	dsb	sy
 8011d3e:	f3bf 8f6f 	isb	sy
 8011d42:	e00a      	b.n	8011d5a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011d44:	2300      	movs	r3, #0
 8011d46:	2200      	movs	r2, #0
 8011d48:	2100      	movs	r1, #0
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f000 fa58 	bl	8012200 <xQueueGenericSend>
 8011d50:	4603      	mov	r3, r0
 8011d52:	2b01      	cmp	r3, #1
 8011d54:	d001      	beq.n	8011d5a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011d56:	23ff      	movs	r3, #255	; 0xff
 8011d58:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011d5a:	68fb      	ldr	r3, [r7, #12]
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3710      	adds	r7, #16
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}
 8011d64:	e000ed04 	.word	0xe000ed04

08011d68 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011d70:	f7ff fee8 	bl	8011b44 <inHandlerMode>
 8011d74:	4603      	mov	r3, r0
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d001      	beq.n	8011d7e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8011d7a:	2382      	movs	r3, #130	; 0x82
 8011d7c:	e003      	b.n	8011d86 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f000 fed0 	bl	8012b24 <vQueueDelete>

  return osOK; 
 8011d84:	2300      	movs	r3, #0
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3708      	adds	r7, #8
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}

08011d8e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011d8e:	b580      	push	{r7, lr}
 8011d90:	b082      	sub	sp, #8
 8011d92:	af00      	add	r7, sp, #0
 8011d94:	6078      	str	r0, [r7, #4]
 8011d96:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6818      	ldr	r0, [r3, #0]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	685b      	ldr	r3, [r3, #4]
 8011da0:	2200      	movs	r2, #0
 8011da2:	4619      	mov	r1, r3
 8011da4:	f000 f9d6 	bl	8012154 <xQueueGenericCreate>
 8011da8:	4603      	mov	r3, r0
#endif
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3708      	adds	r7, #8
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
	...

08011db4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b086      	sub	sp, #24
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	60f8      	str	r0, [r7, #12]
 8011dbc:	60b9      	str	r1, [r7, #8]
 8011dbe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d101      	bne.n	8011dd2 <osMessagePut+0x1e>
    ticks = 1;
 8011dce:	2301      	movs	r3, #1
 8011dd0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8011dd2:	f7ff feb7 	bl	8011b44 <inHandlerMode>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d018      	beq.n	8011e0e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011ddc:	f107 0210 	add.w	r2, r7, #16
 8011de0:	f107 0108 	add.w	r1, r7, #8
 8011de4:	2300      	movs	r3, #0
 8011de6:	68f8      	ldr	r0, [r7, #12]
 8011de8:	f000 fb08 	bl	80123fc <xQueueGenericSendFromISR>
 8011dec:	4603      	mov	r3, r0
 8011dee:	2b01      	cmp	r3, #1
 8011df0:	d001      	beq.n	8011df6 <osMessagePut+0x42>
      return osErrorOS;
 8011df2:	23ff      	movs	r3, #255	; 0xff
 8011df4:	e018      	b.n	8011e28 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011df6:	693b      	ldr	r3, [r7, #16]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d014      	beq.n	8011e26 <osMessagePut+0x72>
 8011dfc:	4b0c      	ldr	r3, [pc, #48]	; (8011e30 <osMessagePut+0x7c>)
 8011dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e02:	601a      	str	r2, [r3, #0]
 8011e04:	f3bf 8f4f 	dsb	sy
 8011e08:	f3bf 8f6f 	isb	sy
 8011e0c:	e00b      	b.n	8011e26 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011e0e:	f107 0108 	add.w	r1, r7, #8
 8011e12:	2300      	movs	r3, #0
 8011e14:	697a      	ldr	r2, [r7, #20]
 8011e16:	68f8      	ldr	r0, [r7, #12]
 8011e18:	f000 f9f2 	bl	8012200 <xQueueGenericSend>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	2b01      	cmp	r3, #1
 8011e20:	d001      	beq.n	8011e26 <osMessagePut+0x72>
      return osErrorOS;
 8011e22:	23ff      	movs	r3, #255	; 0xff
 8011e24:	e000      	b.n	8011e28 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011e26:	2300      	movs	r3, #0
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	3718      	adds	r7, #24
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}
 8011e30:	e000ed04 	.word	0xe000ed04

08011e34 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011e34:	b590      	push	{r4, r7, lr}
 8011e36:	b08b      	sub	sp, #44	; 0x2c
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	60f8      	str	r0, [r7, #12]
 8011e3c:	60b9      	str	r1, [r7, #8]
 8011e3e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011e44:	2300      	movs	r3, #0
 8011e46:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d10a      	bne.n	8011e64 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011e4e:	2380      	movs	r3, #128	; 0x80
 8011e50:	617b      	str	r3, [r7, #20]
    return event;
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	461c      	mov	r4, r3
 8011e56:	f107 0314 	add.w	r3, r7, #20
 8011e5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011e62:	e054      	b.n	8011f0e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011e64:	2300      	movs	r3, #0
 8011e66:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e72:	d103      	bne.n	8011e7c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011e74:	f04f 33ff 	mov.w	r3, #4294967295
 8011e78:	627b      	str	r3, [r7, #36]	; 0x24
 8011e7a:	e009      	b.n	8011e90 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d006      	beq.n	8011e90 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8011e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d101      	bne.n	8011e90 <osMessageGet+0x5c>
      ticks = 1;
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011e90:	f7ff fe58 	bl	8011b44 <inHandlerMode>
 8011e94:	4603      	mov	r3, r0
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d01c      	beq.n	8011ed4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8011e9a:	f107 0220 	add.w	r2, r7, #32
 8011e9e:	f107 0314 	add.w	r3, r7, #20
 8011ea2:	3304      	adds	r3, #4
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	68b8      	ldr	r0, [r7, #8]
 8011ea8:	f000 fdbc 	bl	8012a24 <xQueueReceiveFromISR>
 8011eac:	4603      	mov	r3, r0
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	d102      	bne.n	8011eb8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8011eb2:	2310      	movs	r3, #16
 8011eb4:	617b      	str	r3, [r7, #20]
 8011eb6:	e001      	b.n	8011ebc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8011eb8:	2300      	movs	r3, #0
 8011eba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011ebc:	6a3b      	ldr	r3, [r7, #32]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d01d      	beq.n	8011efe <osMessageGet+0xca>
 8011ec2:	4b15      	ldr	r3, [pc, #84]	; (8011f18 <osMessageGet+0xe4>)
 8011ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ec8:	601a      	str	r2, [r3, #0]
 8011eca:	f3bf 8f4f 	dsb	sy
 8011ece:	f3bf 8f6f 	isb	sy
 8011ed2:	e014      	b.n	8011efe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011ed4:	f107 0314 	add.w	r3, r7, #20
 8011ed8:	3304      	adds	r3, #4
 8011eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011edc:	4619      	mov	r1, r3
 8011ede:	68b8      	ldr	r0, [r7, #8]
 8011ee0:	f000 fbb4 	bl	801264c <xQueueReceive>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	2b01      	cmp	r3, #1
 8011ee8:	d102      	bne.n	8011ef0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8011eea:	2310      	movs	r3, #16
 8011eec:	617b      	str	r3, [r7, #20]
 8011eee:	e006      	b.n	8011efe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d101      	bne.n	8011efa <osMessageGet+0xc6>
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	e000      	b.n	8011efc <osMessageGet+0xc8>
 8011efa:	2340      	movs	r3, #64	; 0x40
 8011efc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	461c      	mov	r4, r3
 8011f02:	f107 0314 	add.w	r3, r7, #20
 8011f06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011f0e:	68f8      	ldr	r0, [r7, #12]
 8011f10:	372c      	adds	r7, #44	; 0x2c
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd90      	pop	{r4, r7, pc}
 8011f16:	bf00      	nop
 8011f18:	e000ed04 	.word	0xe000ed04

08011f1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b083      	sub	sp, #12
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	f103 0208 	add.w	r2, r3, #8
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f04f 32ff 	mov.w	r2, #4294967295
 8011f34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f103 0208 	add.w	r2, r3, #8
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f103 0208 	add.w	r2, r3, #8
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011f50:	bf00      	nop
 8011f52:	370c      	adds	r7, #12
 8011f54:	46bd      	mov	sp, r7
 8011f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5a:	4770      	bx	lr

08011f5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011f5c:	b480      	push	{r7}
 8011f5e:	b083      	sub	sp, #12
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2200      	movs	r2, #0
 8011f68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011f6a:	bf00      	nop
 8011f6c:	370c      	adds	r7, #12
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f74:	4770      	bx	lr

08011f76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011f76:	b480      	push	{r7}
 8011f78:	b085      	sub	sp, #20
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	6078      	str	r0, [r7, #4]
 8011f7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	68fa      	ldr	r2, [r7, #12]
 8011f8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	689a      	ldr	r2, [r3, #8]
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	689b      	ldr	r3, [r3, #8]
 8011f98:	683a      	ldr	r2, [r7, #0]
 8011f9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	683a      	ldr	r2, [r7, #0]
 8011fa0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	1c5a      	adds	r2, r3, #1
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	601a      	str	r2, [r3, #0]
}
 8011fb2:	bf00      	nop
 8011fb4:	3714      	adds	r7, #20
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbc:	4770      	bx	lr

08011fbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011fbe:	b480      	push	{r7}
 8011fc0:	b085      	sub	sp, #20
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
 8011fc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011fce:	68bb      	ldr	r3, [r7, #8]
 8011fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fd4:	d103      	bne.n	8011fde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	691b      	ldr	r3, [r3, #16]
 8011fda:	60fb      	str	r3, [r7, #12]
 8011fdc:	e00c      	b.n	8011ff8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	3308      	adds	r3, #8
 8011fe2:	60fb      	str	r3, [r7, #12]
 8011fe4:	e002      	b.n	8011fec <vListInsert+0x2e>
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	685b      	ldr	r3, [r3, #4]
 8011fea:	60fb      	str	r3, [r7, #12]
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	68ba      	ldr	r2, [r7, #8]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d2f6      	bcs.n	8011fe6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	685a      	ldr	r2, [r3, #4]
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	685b      	ldr	r3, [r3, #4]
 8012004:	683a      	ldr	r2, [r7, #0]
 8012006:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	68fa      	ldr	r2, [r7, #12]
 801200c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	683a      	ldr	r2, [r7, #0]
 8012012:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	1c5a      	adds	r2, r3, #1
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	601a      	str	r2, [r3, #0]
}
 8012024:	bf00      	nop
 8012026:	3714      	adds	r7, #20
 8012028:	46bd      	mov	sp, r7
 801202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202e:	4770      	bx	lr

08012030 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012030:	b480      	push	{r7}
 8012032:	b085      	sub	sp, #20
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	691b      	ldr	r3, [r3, #16]
 801203c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	685b      	ldr	r3, [r3, #4]
 8012042:	687a      	ldr	r2, [r7, #4]
 8012044:	6892      	ldr	r2, [r2, #8]
 8012046:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	689b      	ldr	r3, [r3, #8]
 801204c:	687a      	ldr	r2, [r7, #4]
 801204e:	6852      	ldr	r2, [r2, #4]
 8012050:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	685b      	ldr	r3, [r3, #4]
 8012056:	687a      	ldr	r2, [r7, #4]
 8012058:	429a      	cmp	r2, r3
 801205a:	d103      	bne.n	8012064 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	689a      	ldr	r2, [r3, #8]
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2200      	movs	r2, #0
 8012068:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	1e5a      	subs	r2, r3, #1
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	681b      	ldr	r3, [r3, #0]
}
 8012078:	4618      	mov	r0, r3
 801207a:	3714      	adds	r7, #20
 801207c:	46bd      	mov	sp, r7
 801207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012082:	4770      	bx	lr

08012084 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b084      	sub	sp, #16
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d10a      	bne.n	80120ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801209c:	f383 8811 	msr	BASEPRI, r3
 80120a0:	f3bf 8f6f 	isb	sy
 80120a4:	f3bf 8f4f 	dsb	sy
 80120a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80120aa:	bf00      	nop
 80120ac:	e7fe      	b.n	80120ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80120ae:	f002 f951 	bl	8014354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	681a      	ldr	r2, [r3, #0]
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120ba:	68f9      	ldr	r1, [r7, #12]
 80120bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80120be:	fb01 f303 	mul.w	r3, r1, r3
 80120c2:	441a      	add	r2, r3
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	2200      	movs	r2, #0
 80120cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	681a      	ldr	r2, [r3, #0]
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	681a      	ldr	r2, [r3, #0]
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120de:	3b01      	subs	r3, #1
 80120e0:	68f9      	ldr	r1, [r7, #12]
 80120e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80120e4:	fb01 f303 	mul.w	r3, r1, r3
 80120e8:	441a      	add	r2, r3
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	22ff      	movs	r2, #255	; 0xff
 80120f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	22ff      	movs	r2, #255	; 0xff
 80120fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d114      	bne.n	801212e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	691b      	ldr	r3, [r3, #16]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d01a      	beq.n	8012142 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	3310      	adds	r3, #16
 8012110:	4618      	mov	r0, r3
 8012112:	f001 fbf7 	bl	8013904 <xTaskRemoveFromEventList>
 8012116:	4603      	mov	r3, r0
 8012118:	2b00      	cmp	r3, #0
 801211a:	d012      	beq.n	8012142 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801211c:	4b0c      	ldr	r3, [pc, #48]	; (8012150 <xQueueGenericReset+0xcc>)
 801211e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012122:	601a      	str	r2, [r3, #0]
 8012124:	f3bf 8f4f 	dsb	sy
 8012128:	f3bf 8f6f 	isb	sy
 801212c:	e009      	b.n	8012142 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	3310      	adds	r3, #16
 8012132:	4618      	mov	r0, r3
 8012134:	f7ff fef2 	bl	8011f1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	3324      	adds	r3, #36	; 0x24
 801213c:	4618      	mov	r0, r3
 801213e:	f7ff feed 	bl	8011f1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012142:	f002 f937 	bl	80143b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012146:	2301      	movs	r3, #1
}
 8012148:	4618      	mov	r0, r3
 801214a:	3710      	adds	r7, #16
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}
 8012150:	e000ed04 	.word	0xe000ed04

08012154 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012154:	b580      	push	{r7, lr}
 8012156:	b08a      	sub	sp, #40	; 0x28
 8012158:	af02      	add	r7, sp, #8
 801215a:	60f8      	str	r0, [r7, #12]
 801215c:	60b9      	str	r1, [r7, #8]
 801215e:	4613      	mov	r3, r2
 8012160:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d10a      	bne.n	801217e <xQueueGenericCreate+0x2a>
	__asm volatile
 8012168:	f04f 0350 	mov.w	r3, #80	; 0x50
 801216c:	f383 8811 	msr	BASEPRI, r3
 8012170:	f3bf 8f6f 	isb	sy
 8012174:	f3bf 8f4f 	dsb	sy
 8012178:	613b      	str	r3, [r7, #16]
}
 801217a:	bf00      	nop
 801217c:	e7fe      	b.n	801217c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	68ba      	ldr	r2, [r7, #8]
 8012182:	fb02 f303 	mul.w	r3, r2, r3
 8012186:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012188:	69fb      	ldr	r3, [r7, #28]
 801218a:	3348      	adds	r3, #72	; 0x48
 801218c:	4618      	mov	r0, r3
 801218e:	f002 fa03 	bl	8014598 <pvPortMalloc>
 8012192:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012194:	69bb      	ldr	r3, [r7, #24]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d00d      	beq.n	80121b6 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801219a:	69bb      	ldr	r3, [r7, #24]
 801219c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	3348      	adds	r3, #72	; 0x48
 80121a2:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80121a4:	79fa      	ldrb	r2, [r7, #7]
 80121a6:	69bb      	ldr	r3, [r7, #24]
 80121a8:	9300      	str	r3, [sp, #0]
 80121aa:	4613      	mov	r3, r2
 80121ac:	697a      	ldr	r2, [r7, #20]
 80121ae:	68b9      	ldr	r1, [r7, #8]
 80121b0:	68f8      	ldr	r0, [r7, #12]
 80121b2:	f000 f805 	bl	80121c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80121b6:	69bb      	ldr	r3, [r7, #24]
	}
 80121b8:	4618      	mov	r0, r3
 80121ba:	3720      	adds	r7, #32
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}

080121c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b084      	sub	sp, #16
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	60b9      	str	r1, [r7, #8]
 80121ca:	607a      	str	r2, [r7, #4]
 80121cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80121ce:	68bb      	ldr	r3, [r7, #8]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d103      	bne.n	80121dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80121d4:	69bb      	ldr	r3, [r7, #24]
 80121d6:	69ba      	ldr	r2, [r7, #24]
 80121d8:	601a      	str	r2, [r3, #0]
 80121da:	e002      	b.n	80121e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80121dc:	69bb      	ldr	r3, [r7, #24]
 80121de:	687a      	ldr	r2, [r7, #4]
 80121e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	68fa      	ldr	r2, [r7, #12]
 80121e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80121e8:	69bb      	ldr	r3, [r7, #24]
 80121ea:	68ba      	ldr	r2, [r7, #8]
 80121ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80121ee:	2101      	movs	r1, #1
 80121f0:	69b8      	ldr	r0, [r7, #24]
 80121f2:	f7ff ff47 	bl	8012084 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80121f6:	bf00      	nop
 80121f8:	3710      	adds	r7, #16
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}
	...

08012200 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b08e      	sub	sp, #56	; 0x38
 8012204:	af00      	add	r7, sp, #0
 8012206:	60f8      	str	r0, [r7, #12]
 8012208:	60b9      	str	r1, [r7, #8]
 801220a:	607a      	str	r2, [r7, #4]
 801220c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801220e:	2300      	movs	r3, #0
 8012210:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012218:	2b00      	cmp	r3, #0
 801221a:	d10a      	bne.n	8012232 <xQueueGenericSend+0x32>
	__asm volatile
 801221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012220:	f383 8811 	msr	BASEPRI, r3
 8012224:	f3bf 8f6f 	isb	sy
 8012228:	f3bf 8f4f 	dsb	sy
 801222c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801222e:	bf00      	nop
 8012230:	e7fe      	b.n	8012230 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d103      	bne.n	8012240 <xQueueGenericSend+0x40>
 8012238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801223c:	2b00      	cmp	r3, #0
 801223e:	d101      	bne.n	8012244 <xQueueGenericSend+0x44>
 8012240:	2301      	movs	r3, #1
 8012242:	e000      	b.n	8012246 <xQueueGenericSend+0x46>
 8012244:	2300      	movs	r3, #0
 8012246:	2b00      	cmp	r3, #0
 8012248:	d10a      	bne.n	8012260 <xQueueGenericSend+0x60>
	__asm volatile
 801224a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801224e:	f383 8811 	msr	BASEPRI, r3
 8012252:	f3bf 8f6f 	isb	sy
 8012256:	f3bf 8f4f 	dsb	sy
 801225a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801225c:	bf00      	nop
 801225e:	e7fe      	b.n	801225e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	2b02      	cmp	r3, #2
 8012264:	d103      	bne.n	801226e <xQueueGenericSend+0x6e>
 8012266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801226a:	2b01      	cmp	r3, #1
 801226c:	d101      	bne.n	8012272 <xQueueGenericSend+0x72>
 801226e:	2301      	movs	r3, #1
 8012270:	e000      	b.n	8012274 <xQueueGenericSend+0x74>
 8012272:	2300      	movs	r3, #0
 8012274:	2b00      	cmp	r3, #0
 8012276:	d10a      	bne.n	801228e <xQueueGenericSend+0x8e>
	__asm volatile
 8012278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801227c:	f383 8811 	msr	BASEPRI, r3
 8012280:	f3bf 8f6f 	isb	sy
 8012284:	f3bf 8f4f 	dsb	sy
 8012288:	623b      	str	r3, [r7, #32]
}
 801228a:	bf00      	nop
 801228c:	e7fe      	b.n	801228c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801228e:	f001 fd13 	bl	8013cb8 <xTaskGetSchedulerState>
 8012292:	4603      	mov	r3, r0
 8012294:	2b00      	cmp	r3, #0
 8012296:	d102      	bne.n	801229e <xQueueGenericSend+0x9e>
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d101      	bne.n	80122a2 <xQueueGenericSend+0xa2>
 801229e:	2301      	movs	r3, #1
 80122a0:	e000      	b.n	80122a4 <xQueueGenericSend+0xa4>
 80122a2:	2300      	movs	r3, #0
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d10a      	bne.n	80122be <xQueueGenericSend+0xbe>
	__asm volatile
 80122a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ac:	f383 8811 	msr	BASEPRI, r3
 80122b0:	f3bf 8f6f 	isb	sy
 80122b4:	f3bf 8f4f 	dsb	sy
 80122b8:	61fb      	str	r3, [r7, #28]
}
 80122ba:	bf00      	nop
 80122bc:	e7fe      	b.n	80122bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80122be:	f002 f849 	bl	8014354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80122c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80122c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d302      	bcc.n	80122d4 <xQueueGenericSend+0xd4>
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	2b02      	cmp	r3, #2
 80122d2:	d129      	bne.n	8012328 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80122d4:	683a      	ldr	r2, [r7, #0]
 80122d6:	68b9      	ldr	r1, [r7, #8]
 80122d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122da:	f000 fc59 	bl	8012b90 <prvCopyDataToQueue>
 80122de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80122e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d010      	beq.n	801230a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80122e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ea:	3324      	adds	r3, #36	; 0x24
 80122ec:	4618      	mov	r0, r3
 80122ee:	f001 fb09 	bl	8013904 <xTaskRemoveFromEventList>
 80122f2:	4603      	mov	r3, r0
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d013      	beq.n	8012320 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80122f8:	4b3f      	ldr	r3, [pc, #252]	; (80123f8 <xQueueGenericSend+0x1f8>)
 80122fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122fe:	601a      	str	r2, [r3, #0]
 8012300:	f3bf 8f4f 	dsb	sy
 8012304:	f3bf 8f6f 	isb	sy
 8012308:	e00a      	b.n	8012320 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801230c:	2b00      	cmp	r3, #0
 801230e:	d007      	beq.n	8012320 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012310:	4b39      	ldr	r3, [pc, #228]	; (80123f8 <xQueueGenericSend+0x1f8>)
 8012312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012316:	601a      	str	r2, [r3, #0]
 8012318:	f3bf 8f4f 	dsb	sy
 801231c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012320:	f002 f848 	bl	80143b4 <vPortExitCritical>
				return pdPASS;
 8012324:	2301      	movs	r3, #1
 8012326:	e063      	b.n	80123f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d103      	bne.n	8012336 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801232e:	f002 f841 	bl	80143b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012332:	2300      	movs	r3, #0
 8012334:	e05c      	b.n	80123f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012338:	2b00      	cmp	r3, #0
 801233a:	d106      	bne.n	801234a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801233c:	f107 0314 	add.w	r3, r7, #20
 8012340:	4618      	mov	r0, r3
 8012342:	f001 fb41 	bl	80139c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012346:	2301      	movs	r3, #1
 8012348:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801234a:	f002 f833 	bl	80143b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801234e:	f001 f8cf 	bl	80134f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012352:	f001 ffff 	bl	8014354 <vPortEnterCritical>
 8012356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801235c:	b25b      	sxtb	r3, r3
 801235e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012362:	d103      	bne.n	801236c <xQueueGenericSend+0x16c>
 8012364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012366:	2200      	movs	r2, #0
 8012368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801236c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801236e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012372:	b25b      	sxtb	r3, r3
 8012374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012378:	d103      	bne.n	8012382 <xQueueGenericSend+0x182>
 801237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801237c:	2200      	movs	r2, #0
 801237e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012382:	f002 f817 	bl	80143b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012386:	1d3a      	adds	r2, r7, #4
 8012388:	f107 0314 	add.w	r3, r7, #20
 801238c:	4611      	mov	r1, r2
 801238e:	4618      	mov	r0, r3
 8012390:	f001 fb30 	bl	80139f4 <xTaskCheckForTimeOut>
 8012394:	4603      	mov	r3, r0
 8012396:	2b00      	cmp	r3, #0
 8012398:	d124      	bne.n	80123e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801239a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801239c:	f000 fcf0 	bl	8012d80 <prvIsQueueFull>
 80123a0:	4603      	mov	r3, r0
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d018      	beq.n	80123d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80123a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a8:	3310      	adds	r3, #16
 80123aa:	687a      	ldr	r2, [r7, #4]
 80123ac:	4611      	mov	r1, r2
 80123ae:	4618      	mov	r0, r3
 80123b0:	f001 fa84 	bl	80138bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80123b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123b6:	f000 fc7b 	bl	8012cb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80123ba:	f001 f8a7 	bl	801350c <xTaskResumeAll>
 80123be:	4603      	mov	r3, r0
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	f47f af7c 	bne.w	80122be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80123c6:	4b0c      	ldr	r3, [pc, #48]	; (80123f8 <xQueueGenericSend+0x1f8>)
 80123c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123cc:	601a      	str	r2, [r3, #0]
 80123ce:	f3bf 8f4f 	dsb	sy
 80123d2:	f3bf 8f6f 	isb	sy
 80123d6:	e772      	b.n	80122be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80123d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123da:	f000 fc69 	bl	8012cb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80123de:	f001 f895 	bl	801350c <xTaskResumeAll>
 80123e2:	e76c      	b.n	80122be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80123e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123e6:	f000 fc63 	bl	8012cb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80123ea:	f001 f88f 	bl	801350c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80123ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80123f0:	4618      	mov	r0, r3
 80123f2:	3738      	adds	r7, #56	; 0x38
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}
 80123f8:	e000ed04 	.word	0xe000ed04

080123fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b090      	sub	sp, #64	; 0x40
 8012400:	af00      	add	r7, sp, #0
 8012402:	60f8      	str	r0, [r7, #12]
 8012404:	60b9      	str	r1, [r7, #8]
 8012406:	607a      	str	r2, [r7, #4]
 8012408:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012410:	2b00      	cmp	r3, #0
 8012412:	d10a      	bne.n	801242a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012418:	f383 8811 	msr	BASEPRI, r3
 801241c:	f3bf 8f6f 	isb	sy
 8012420:	f3bf 8f4f 	dsb	sy
 8012424:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012426:	bf00      	nop
 8012428:	e7fe      	b.n	8012428 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d103      	bne.n	8012438 <xQueueGenericSendFromISR+0x3c>
 8012430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012434:	2b00      	cmp	r3, #0
 8012436:	d101      	bne.n	801243c <xQueueGenericSendFromISR+0x40>
 8012438:	2301      	movs	r3, #1
 801243a:	e000      	b.n	801243e <xQueueGenericSendFromISR+0x42>
 801243c:	2300      	movs	r3, #0
 801243e:	2b00      	cmp	r3, #0
 8012440:	d10a      	bne.n	8012458 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012446:	f383 8811 	msr	BASEPRI, r3
 801244a:	f3bf 8f6f 	isb	sy
 801244e:	f3bf 8f4f 	dsb	sy
 8012452:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012454:	bf00      	nop
 8012456:	e7fe      	b.n	8012456 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	2b02      	cmp	r3, #2
 801245c:	d103      	bne.n	8012466 <xQueueGenericSendFromISR+0x6a>
 801245e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012462:	2b01      	cmp	r3, #1
 8012464:	d101      	bne.n	801246a <xQueueGenericSendFromISR+0x6e>
 8012466:	2301      	movs	r3, #1
 8012468:	e000      	b.n	801246c <xQueueGenericSendFromISR+0x70>
 801246a:	2300      	movs	r3, #0
 801246c:	2b00      	cmp	r3, #0
 801246e:	d10a      	bne.n	8012486 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012474:	f383 8811 	msr	BASEPRI, r3
 8012478:	f3bf 8f6f 	isb	sy
 801247c:	f3bf 8f4f 	dsb	sy
 8012480:	623b      	str	r3, [r7, #32]
}
 8012482:	bf00      	nop
 8012484:	e7fe      	b.n	8012484 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012486:	f002 f847 	bl	8014518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801248a:	f3ef 8211 	mrs	r2, BASEPRI
 801248e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012492:	f383 8811 	msr	BASEPRI, r3
 8012496:	f3bf 8f6f 	isb	sy
 801249a:	f3bf 8f4f 	dsb	sy
 801249e:	61fa      	str	r2, [r7, #28]
 80124a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80124a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80124a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80124a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124ae:	429a      	cmp	r2, r3
 80124b0:	d302      	bcc.n	80124b8 <xQueueGenericSendFromISR+0xbc>
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	2b02      	cmp	r3, #2
 80124b6:	d12f      	bne.n	8012518 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80124b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80124c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80124c8:	683a      	ldr	r2, [r7, #0]
 80124ca:	68b9      	ldr	r1, [r7, #8]
 80124cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80124ce:	f000 fb5f 	bl	8012b90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80124d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80124d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124da:	d112      	bne.n	8012502 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80124dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d016      	beq.n	8012512 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80124e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e6:	3324      	adds	r3, #36	; 0x24
 80124e8:	4618      	mov	r0, r3
 80124ea:	f001 fa0b 	bl	8013904 <xTaskRemoveFromEventList>
 80124ee:	4603      	mov	r3, r0
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d00e      	beq.n	8012512 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d00b      	beq.n	8012512 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2201      	movs	r2, #1
 80124fe:	601a      	str	r2, [r3, #0]
 8012500:	e007      	b.n	8012512 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012502:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012506:	3301      	adds	r3, #1
 8012508:	b2db      	uxtb	r3, r3
 801250a:	b25a      	sxtb	r2, r3
 801250c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801250e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012512:	2301      	movs	r3, #1
 8012514:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012516:	e001      	b.n	801251c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012518:	2300      	movs	r3, #0
 801251a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801251e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012520:	697b      	ldr	r3, [r7, #20]
 8012522:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012526:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801252a:	4618      	mov	r0, r3
 801252c:	3740      	adds	r7, #64	; 0x40
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}

08012532 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012532:	b580      	push	{r7, lr}
 8012534:	b08e      	sub	sp, #56	; 0x38
 8012536:	af00      	add	r7, sp, #0
 8012538:	6078      	str	r0, [r7, #4]
 801253a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012542:	2b00      	cmp	r3, #0
 8012544:	d10a      	bne.n	801255c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8012546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801254a:	f383 8811 	msr	BASEPRI, r3
 801254e:	f3bf 8f6f 	isb	sy
 8012552:	f3bf 8f4f 	dsb	sy
 8012556:	623b      	str	r3, [r7, #32]
}
 8012558:	bf00      	nop
 801255a:	e7fe      	b.n	801255a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012560:	2b00      	cmp	r3, #0
 8012562:	d00a      	beq.n	801257a <xQueueGiveFromISR+0x48>
	__asm volatile
 8012564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012568:	f383 8811 	msr	BASEPRI, r3
 801256c:	f3bf 8f6f 	isb	sy
 8012570:	f3bf 8f4f 	dsb	sy
 8012574:	61fb      	str	r3, [r7, #28]
}
 8012576:	bf00      	nop
 8012578:	e7fe      	b.n	8012578 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d103      	bne.n	801258a <xQueueGiveFromISR+0x58>
 8012582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012584:	689b      	ldr	r3, [r3, #8]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d101      	bne.n	801258e <xQueueGiveFromISR+0x5c>
 801258a:	2301      	movs	r3, #1
 801258c:	e000      	b.n	8012590 <xQueueGiveFromISR+0x5e>
 801258e:	2300      	movs	r3, #0
 8012590:	2b00      	cmp	r3, #0
 8012592:	d10a      	bne.n	80125aa <xQueueGiveFromISR+0x78>
	__asm volatile
 8012594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012598:	f383 8811 	msr	BASEPRI, r3
 801259c:	f3bf 8f6f 	isb	sy
 80125a0:	f3bf 8f4f 	dsb	sy
 80125a4:	61bb      	str	r3, [r7, #24]
}
 80125a6:	bf00      	nop
 80125a8:	e7fe      	b.n	80125a8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80125aa:	f001 ffb5 	bl	8014518 <vPortValidateInterruptPriority>
	__asm volatile
 80125ae:	f3ef 8211 	mrs	r2, BASEPRI
 80125b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b6:	f383 8811 	msr	BASEPRI, r3
 80125ba:	f3bf 8f6f 	isb	sy
 80125be:	f3bf 8f4f 	dsb	sy
 80125c2:	617a      	str	r2, [r7, #20]
 80125c4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80125c6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80125c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80125ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80125d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d22b      	bcs.n	8012632 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80125da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80125e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80125e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e6:	1c5a      	adds	r2, r3, #1
 80125e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80125ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80125f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125f4:	d112      	bne.n	801261c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80125f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d016      	beq.n	801262c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80125fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012600:	3324      	adds	r3, #36	; 0x24
 8012602:	4618      	mov	r0, r3
 8012604:	f001 f97e 	bl	8013904 <xTaskRemoveFromEventList>
 8012608:	4603      	mov	r3, r0
 801260a:	2b00      	cmp	r3, #0
 801260c:	d00e      	beq.n	801262c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d00b      	beq.n	801262c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	2201      	movs	r2, #1
 8012618:	601a      	str	r2, [r3, #0]
 801261a:	e007      	b.n	801262c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801261c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012620:	3301      	adds	r3, #1
 8012622:	b2db      	uxtb	r3, r3
 8012624:	b25a      	sxtb	r2, r3
 8012626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801262c:	2301      	movs	r3, #1
 801262e:	637b      	str	r3, [r7, #52]	; 0x34
 8012630:	e001      	b.n	8012636 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012632:	2300      	movs	r3, #0
 8012634:	637b      	str	r3, [r7, #52]	; 0x34
 8012636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012638:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	f383 8811 	msr	BASEPRI, r3
}
 8012640:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012644:	4618      	mov	r0, r3
 8012646:	3738      	adds	r7, #56	; 0x38
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b08c      	sub	sp, #48	; 0x30
 8012650:	af00      	add	r7, sp, #0
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	60b9      	str	r1, [r7, #8]
 8012656:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012658:	2300      	movs	r3, #0
 801265a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012662:	2b00      	cmp	r3, #0
 8012664:	d10a      	bne.n	801267c <xQueueReceive+0x30>
	__asm volatile
 8012666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801266a:	f383 8811 	msr	BASEPRI, r3
 801266e:	f3bf 8f6f 	isb	sy
 8012672:	f3bf 8f4f 	dsb	sy
 8012676:	623b      	str	r3, [r7, #32]
}
 8012678:	bf00      	nop
 801267a:	e7fe      	b.n	801267a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d103      	bne.n	801268a <xQueueReceive+0x3e>
 8012682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012686:	2b00      	cmp	r3, #0
 8012688:	d101      	bne.n	801268e <xQueueReceive+0x42>
 801268a:	2301      	movs	r3, #1
 801268c:	e000      	b.n	8012690 <xQueueReceive+0x44>
 801268e:	2300      	movs	r3, #0
 8012690:	2b00      	cmp	r3, #0
 8012692:	d10a      	bne.n	80126aa <xQueueReceive+0x5e>
	__asm volatile
 8012694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012698:	f383 8811 	msr	BASEPRI, r3
 801269c:	f3bf 8f6f 	isb	sy
 80126a0:	f3bf 8f4f 	dsb	sy
 80126a4:	61fb      	str	r3, [r7, #28]
}
 80126a6:	bf00      	nop
 80126a8:	e7fe      	b.n	80126a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80126aa:	f001 fb05 	bl	8013cb8 <xTaskGetSchedulerState>
 80126ae:	4603      	mov	r3, r0
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d102      	bne.n	80126ba <xQueueReceive+0x6e>
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d101      	bne.n	80126be <xQueueReceive+0x72>
 80126ba:	2301      	movs	r3, #1
 80126bc:	e000      	b.n	80126c0 <xQueueReceive+0x74>
 80126be:	2300      	movs	r3, #0
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d10a      	bne.n	80126da <xQueueReceive+0x8e>
	__asm volatile
 80126c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c8:	f383 8811 	msr	BASEPRI, r3
 80126cc:	f3bf 8f6f 	isb	sy
 80126d0:	f3bf 8f4f 	dsb	sy
 80126d4:	61bb      	str	r3, [r7, #24]
}
 80126d6:	bf00      	nop
 80126d8:	e7fe      	b.n	80126d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80126da:	f001 fe3b 	bl	8014354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80126de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80126e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d01f      	beq.n	801272a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80126ea:	68b9      	ldr	r1, [r7, #8]
 80126ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126ee:	f000 fab9 	bl	8012c64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80126f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f4:	1e5a      	subs	r2, r3, #1
 80126f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80126fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126fc:	691b      	ldr	r3, [r3, #16]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d00f      	beq.n	8012722 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012704:	3310      	adds	r3, #16
 8012706:	4618      	mov	r0, r3
 8012708:	f001 f8fc 	bl	8013904 <xTaskRemoveFromEventList>
 801270c:	4603      	mov	r3, r0
 801270e:	2b00      	cmp	r3, #0
 8012710:	d007      	beq.n	8012722 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012712:	4b3d      	ldr	r3, [pc, #244]	; (8012808 <xQueueReceive+0x1bc>)
 8012714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012718:	601a      	str	r2, [r3, #0]
 801271a:	f3bf 8f4f 	dsb	sy
 801271e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012722:	f001 fe47 	bl	80143b4 <vPortExitCritical>
				return pdPASS;
 8012726:	2301      	movs	r3, #1
 8012728:	e069      	b.n	80127fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d103      	bne.n	8012738 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012730:	f001 fe40 	bl	80143b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012734:	2300      	movs	r3, #0
 8012736:	e062      	b.n	80127fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801273a:	2b00      	cmp	r3, #0
 801273c:	d106      	bne.n	801274c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801273e:	f107 0310 	add.w	r3, r7, #16
 8012742:	4618      	mov	r0, r3
 8012744:	f001 f940 	bl	80139c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012748:	2301      	movs	r3, #1
 801274a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801274c:	f001 fe32 	bl	80143b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012750:	f000 fece 	bl	80134f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012754:	f001 fdfe 	bl	8014354 <vPortEnterCritical>
 8012758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801275a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801275e:	b25b      	sxtb	r3, r3
 8012760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012764:	d103      	bne.n	801276e <xQueueReceive+0x122>
 8012766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012768:	2200      	movs	r2, #0
 801276a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012774:	b25b      	sxtb	r3, r3
 8012776:	f1b3 3fff 	cmp.w	r3, #4294967295
 801277a:	d103      	bne.n	8012784 <xQueueReceive+0x138>
 801277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801277e:	2200      	movs	r2, #0
 8012780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012784:	f001 fe16 	bl	80143b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012788:	1d3a      	adds	r2, r7, #4
 801278a:	f107 0310 	add.w	r3, r7, #16
 801278e:	4611      	mov	r1, r2
 8012790:	4618      	mov	r0, r3
 8012792:	f001 f92f 	bl	80139f4 <xTaskCheckForTimeOut>
 8012796:	4603      	mov	r3, r0
 8012798:	2b00      	cmp	r3, #0
 801279a:	d123      	bne.n	80127e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801279c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801279e:	f000 fad9 	bl	8012d54 <prvIsQueueEmpty>
 80127a2:	4603      	mov	r3, r0
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d017      	beq.n	80127d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80127a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127aa:	3324      	adds	r3, #36	; 0x24
 80127ac:	687a      	ldr	r2, [r7, #4]
 80127ae:	4611      	mov	r1, r2
 80127b0:	4618      	mov	r0, r3
 80127b2:	f001 f883 	bl	80138bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80127b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127b8:	f000 fa7a 	bl	8012cb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80127bc:	f000 fea6 	bl	801350c <xTaskResumeAll>
 80127c0:	4603      	mov	r3, r0
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d189      	bne.n	80126da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80127c6:	4b10      	ldr	r3, [pc, #64]	; (8012808 <xQueueReceive+0x1bc>)
 80127c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127cc:	601a      	str	r2, [r3, #0]
 80127ce:	f3bf 8f4f 	dsb	sy
 80127d2:	f3bf 8f6f 	isb	sy
 80127d6:	e780      	b.n	80126da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80127d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127da:	f000 fa69 	bl	8012cb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80127de:	f000 fe95 	bl	801350c <xTaskResumeAll>
 80127e2:	e77a      	b.n	80126da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80127e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127e6:	f000 fa63 	bl	8012cb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80127ea:	f000 fe8f 	bl	801350c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80127ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127f0:	f000 fab0 	bl	8012d54 <prvIsQueueEmpty>
 80127f4:	4603      	mov	r3, r0
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	f43f af6f 	beq.w	80126da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80127fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80127fe:	4618      	mov	r0, r3
 8012800:	3730      	adds	r7, #48	; 0x30
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
 8012806:	bf00      	nop
 8012808:	e000ed04 	.word	0xe000ed04

0801280c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b08e      	sub	sp, #56	; 0x38
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012816:	2300      	movs	r3, #0
 8012818:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801281e:	2300      	movs	r3, #0
 8012820:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012824:	2b00      	cmp	r3, #0
 8012826:	d10a      	bne.n	801283e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801282c:	f383 8811 	msr	BASEPRI, r3
 8012830:	f3bf 8f6f 	isb	sy
 8012834:	f3bf 8f4f 	dsb	sy
 8012838:	623b      	str	r3, [r7, #32]
}
 801283a:	bf00      	nop
 801283c:	e7fe      	b.n	801283c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012842:	2b00      	cmp	r3, #0
 8012844:	d00a      	beq.n	801285c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8012846:	f04f 0350 	mov.w	r3, #80	; 0x50
 801284a:	f383 8811 	msr	BASEPRI, r3
 801284e:	f3bf 8f6f 	isb	sy
 8012852:	f3bf 8f4f 	dsb	sy
 8012856:	61fb      	str	r3, [r7, #28]
}
 8012858:	bf00      	nop
 801285a:	e7fe      	b.n	801285a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801285c:	f001 fa2c 	bl	8013cb8 <xTaskGetSchedulerState>
 8012860:	4603      	mov	r3, r0
 8012862:	2b00      	cmp	r3, #0
 8012864:	d102      	bne.n	801286c <xQueueSemaphoreTake+0x60>
 8012866:	683b      	ldr	r3, [r7, #0]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d101      	bne.n	8012870 <xQueueSemaphoreTake+0x64>
 801286c:	2301      	movs	r3, #1
 801286e:	e000      	b.n	8012872 <xQueueSemaphoreTake+0x66>
 8012870:	2300      	movs	r3, #0
 8012872:	2b00      	cmp	r3, #0
 8012874:	d10a      	bne.n	801288c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8012876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801287a:	f383 8811 	msr	BASEPRI, r3
 801287e:	f3bf 8f6f 	isb	sy
 8012882:	f3bf 8f4f 	dsb	sy
 8012886:	61bb      	str	r3, [r7, #24]
}
 8012888:	bf00      	nop
 801288a:	e7fe      	b.n	801288a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801288c:	f001 fd62 	bl	8014354 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012894:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012898:	2b00      	cmp	r3, #0
 801289a:	d024      	beq.n	80128e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801289e:	1e5a      	subs	r2, r3, #1
 80128a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80128a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d104      	bne.n	80128b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80128ac:	f001 fbac 	bl	8014008 <pvTaskIncrementMutexHeldCount>
 80128b0:	4602      	mov	r2, r0
 80128b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80128b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b8:	691b      	ldr	r3, [r3, #16]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d00f      	beq.n	80128de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80128be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128c0:	3310      	adds	r3, #16
 80128c2:	4618      	mov	r0, r3
 80128c4:	f001 f81e 	bl	8013904 <xTaskRemoveFromEventList>
 80128c8:	4603      	mov	r3, r0
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d007      	beq.n	80128de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80128ce:	4b54      	ldr	r3, [pc, #336]	; (8012a20 <xQueueSemaphoreTake+0x214>)
 80128d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128d4:	601a      	str	r2, [r3, #0]
 80128d6:	f3bf 8f4f 	dsb	sy
 80128da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80128de:	f001 fd69 	bl	80143b4 <vPortExitCritical>
				return pdPASS;
 80128e2:	2301      	movs	r3, #1
 80128e4:	e097      	b.n	8012a16 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d111      	bne.n	8012910 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80128ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d00a      	beq.n	8012908 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80128f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f6:	f383 8811 	msr	BASEPRI, r3
 80128fa:	f3bf 8f6f 	isb	sy
 80128fe:	f3bf 8f4f 	dsb	sy
 8012902:	617b      	str	r3, [r7, #20]
}
 8012904:	bf00      	nop
 8012906:	e7fe      	b.n	8012906 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012908:	f001 fd54 	bl	80143b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801290c:	2300      	movs	r3, #0
 801290e:	e082      	b.n	8012a16 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012912:	2b00      	cmp	r3, #0
 8012914:	d106      	bne.n	8012924 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012916:	f107 030c 	add.w	r3, r7, #12
 801291a:	4618      	mov	r0, r3
 801291c:	f001 f854 	bl	80139c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012920:	2301      	movs	r3, #1
 8012922:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012924:	f001 fd46 	bl	80143b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012928:	f000 fde2 	bl	80134f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801292c:	f001 fd12 	bl	8014354 <vPortEnterCritical>
 8012930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012936:	b25b      	sxtb	r3, r3
 8012938:	f1b3 3fff 	cmp.w	r3, #4294967295
 801293c:	d103      	bne.n	8012946 <xQueueSemaphoreTake+0x13a>
 801293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012940:	2200      	movs	r2, #0
 8012942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801294c:	b25b      	sxtb	r3, r3
 801294e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012952:	d103      	bne.n	801295c <xQueueSemaphoreTake+0x150>
 8012954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012956:	2200      	movs	r2, #0
 8012958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801295c:	f001 fd2a 	bl	80143b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012960:	463a      	mov	r2, r7
 8012962:	f107 030c 	add.w	r3, r7, #12
 8012966:	4611      	mov	r1, r2
 8012968:	4618      	mov	r0, r3
 801296a:	f001 f843 	bl	80139f4 <xTaskCheckForTimeOut>
 801296e:	4603      	mov	r3, r0
 8012970:	2b00      	cmp	r3, #0
 8012972:	d132      	bne.n	80129da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012974:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012976:	f000 f9ed 	bl	8012d54 <prvIsQueueEmpty>
 801297a:	4603      	mov	r3, r0
 801297c:	2b00      	cmp	r3, #0
 801297e:	d026      	beq.n	80129ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d109      	bne.n	801299c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8012988:	f001 fce4 	bl	8014354 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801298e:	689b      	ldr	r3, [r3, #8]
 8012990:	4618      	mov	r0, r3
 8012992:	f001 f9af 	bl	8013cf4 <xTaskPriorityInherit>
 8012996:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012998:	f001 fd0c 	bl	80143b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801299e:	3324      	adds	r3, #36	; 0x24
 80129a0:	683a      	ldr	r2, [r7, #0]
 80129a2:	4611      	mov	r1, r2
 80129a4:	4618      	mov	r0, r3
 80129a6:	f000 ff89 	bl	80138bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80129aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129ac:	f000 f980 	bl	8012cb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80129b0:	f000 fdac 	bl	801350c <xTaskResumeAll>
 80129b4:	4603      	mov	r3, r0
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	f47f af68 	bne.w	801288c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80129bc:	4b18      	ldr	r3, [pc, #96]	; (8012a20 <xQueueSemaphoreTake+0x214>)
 80129be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129c2:	601a      	str	r2, [r3, #0]
 80129c4:	f3bf 8f4f 	dsb	sy
 80129c8:	f3bf 8f6f 	isb	sy
 80129cc:	e75e      	b.n	801288c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80129ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129d0:	f000 f96e 	bl	8012cb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80129d4:	f000 fd9a 	bl	801350c <xTaskResumeAll>
 80129d8:	e758      	b.n	801288c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80129da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129dc:	f000 f968 	bl	8012cb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80129e0:	f000 fd94 	bl	801350c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80129e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129e6:	f000 f9b5 	bl	8012d54 <prvIsQueueEmpty>
 80129ea:	4603      	mov	r3, r0
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	f43f af4d 	beq.w	801288c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80129f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d00d      	beq.n	8012a14 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80129f8:	f001 fcac 	bl	8014354 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80129fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129fe:	f000 f8af 	bl	8012b60 <prvGetDisinheritPriorityAfterTimeout>
 8012a02:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a06:	689b      	ldr	r3, [r3, #8]
 8012a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f001 fa6e 	bl	8013eec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012a10:	f001 fcd0 	bl	80143b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012a14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012a16:	4618      	mov	r0, r3
 8012a18:	3738      	adds	r7, #56	; 0x38
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}
 8012a1e:	bf00      	nop
 8012a20:	e000ed04 	.word	0xe000ed04

08012a24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b08e      	sub	sp, #56	; 0x38
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	60f8      	str	r0, [r7, #12]
 8012a2c:	60b9      	str	r1, [r7, #8]
 8012a2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d10a      	bne.n	8012a50 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a3e:	f383 8811 	msr	BASEPRI, r3
 8012a42:	f3bf 8f6f 	isb	sy
 8012a46:	f3bf 8f4f 	dsb	sy
 8012a4a:	623b      	str	r3, [r7, #32]
}
 8012a4c:	bf00      	nop
 8012a4e:	e7fe      	b.n	8012a4e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d103      	bne.n	8012a5e <xQueueReceiveFromISR+0x3a>
 8012a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d101      	bne.n	8012a62 <xQueueReceiveFromISR+0x3e>
 8012a5e:	2301      	movs	r3, #1
 8012a60:	e000      	b.n	8012a64 <xQueueReceiveFromISR+0x40>
 8012a62:	2300      	movs	r3, #0
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d10a      	bne.n	8012a7e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a6c:	f383 8811 	msr	BASEPRI, r3
 8012a70:	f3bf 8f6f 	isb	sy
 8012a74:	f3bf 8f4f 	dsb	sy
 8012a78:	61fb      	str	r3, [r7, #28]
}
 8012a7a:	bf00      	nop
 8012a7c:	e7fe      	b.n	8012a7c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012a7e:	f001 fd4b 	bl	8014518 <vPortValidateInterruptPriority>
	__asm volatile
 8012a82:	f3ef 8211 	mrs	r2, BASEPRI
 8012a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a8a:	f383 8811 	msr	BASEPRI, r3
 8012a8e:	f3bf 8f6f 	isb	sy
 8012a92:	f3bf 8f4f 	dsb	sy
 8012a96:	61ba      	str	r2, [r7, #24]
 8012a98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012a9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012aa2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d02f      	beq.n	8012b0a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012ab4:	68b9      	ldr	r1, [r7, #8]
 8012ab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ab8:	f000 f8d4 	bl	8012c64 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012abe:	1e5a      	subs	r2, r3, #1
 8012ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012ac4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012acc:	d112      	bne.n	8012af4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad0:	691b      	ldr	r3, [r3, #16]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d016      	beq.n	8012b04 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad8:	3310      	adds	r3, #16
 8012ada:	4618      	mov	r0, r3
 8012adc:	f000 ff12 	bl	8013904 <xTaskRemoveFromEventList>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d00e      	beq.n	8012b04 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d00b      	beq.n	8012b04 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2201      	movs	r2, #1
 8012af0:	601a      	str	r2, [r3, #0]
 8012af2:	e007      	b.n	8012b04 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012af8:	3301      	adds	r3, #1
 8012afa:	b2db      	uxtb	r3, r3
 8012afc:	b25a      	sxtb	r2, r3
 8012afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012b04:	2301      	movs	r3, #1
 8012b06:	637b      	str	r3, [r7, #52]	; 0x34
 8012b08:	e001      	b.n	8012b0e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8012b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	f383 8811 	msr	BASEPRI, r3
}
 8012b18:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	3738      	adds	r7, #56	; 0x38
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd80      	pop	{r7, pc}

08012b24 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b084      	sub	sp, #16
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d10a      	bne.n	8012b4c <vQueueDelete+0x28>
	__asm volatile
 8012b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b3a:	f383 8811 	msr	BASEPRI, r3
 8012b3e:	f3bf 8f6f 	isb	sy
 8012b42:	f3bf 8f4f 	dsb	sy
 8012b46:	60bb      	str	r3, [r7, #8]
}
 8012b48:	bf00      	nop
 8012b4a:	e7fe      	b.n	8012b4a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012b4c:	68f8      	ldr	r0, [r7, #12]
 8012b4e:	f000 f92f 	bl	8012db0 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8012b52:	68f8      	ldr	r0, [r7, #12]
 8012b54:	f001 fdec 	bl	8014730 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012b58:	bf00      	nop
 8012b5a:	3710      	adds	r7, #16
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}

08012b60 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012b60:	b480      	push	{r7}
 8012b62:	b085      	sub	sp, #20
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d006      	beq.n	8012b7e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	f1c3 0307 	rsb	r3, r3, #7
 8012b7a:	60fb      	str	r3, [r7, #12]
 8012b7c:	e001      	b.n	8012b82 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012b7e:	2300      	movs	r3, #0
 8012b80:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012b82:	68fb      	ldr	r3, [r7, #12]
	}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3714      	adds	r7, #20
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8e:	4770      	bx	lr

08012b90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b086      	sub	sp, #24
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	60f8      	str	r0, [r7, #12]
 8012b98:	60b9      	str	r1, [r7, #8]
 8012b9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ba4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d10d      	bne.n	8012bca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d14d      	bne.n	8012c52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	689b      	ldr	r3, [r3, #8]
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f001 f910 	bl	8013de0 <xTaskPriorityDisinherit>
 8012bc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	609a      	str	r2, [r3, #8]
 8012bc8:	e043      	b.n	8012c52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d119      	bne.n	8012c04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	6858      	ldr	r0, [r3, #4]
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bd8:	461a      	mov	r2, r3
 8012bda:	68b9      	ldr	r1, [r7, #8]
 8012bdc:	f001 fefa 	bl	80149d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	685a      	ldr	r2, [r3, #4]
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012be8:	441a      	add	r2, r3
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	685a      	ldr	r2, [r3, #4]
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	689b      	ldr	r3, [r3, #8]
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d32b      	bcc.n	8012c52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	681a      	ldr	r2, [r3, #0]
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	605a      	str	r2, [r3, #4]
 8012c02:	e026      	b.n	8012c52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	68d8      	ldr	r0, [r3, #12]
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c0c:	461a      	mov	r2, r3
 8012c0e:	68b9      	ldr	r1, [r7, #8]
 8012c10:	f001 fee0 	bl	80149d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	68da      	ldr	r2, [r3, #12]
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c1c:	425b      	negs	r3, r3
 8012c1e:	441a      	add	r2, r3
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	68da      	ldr	r2, [r3, #12]
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d207      	bcs.n	8012c40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	689a      	ldr	r2, [r3, #8]
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c38:	425b      	negs	r3, r3
 8012c3a:	441a      	add	r2, r3
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2b02      	cmp	r3, #2
 8012c44:	d105      	bne.n	8012c52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d002      	beq.n	8012c52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012c4c:	693b      	ldr	r3, [r7, #16]
 8012c4e:	3b01      	subs	r3, #1
 8012c50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	1c5a      	adds	r2, r3, #1
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012c5a:	697b      	ldr	r3, [r7, #20]
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3718      	adds	r7, #24
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}

08012c64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
 8012c6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d018      	beq.n	8012ca8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	68da      	ldr	r2, [r3, #12]
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c7e:	441a      	add	r2, r3
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	68da      	ldr	r2, [r3, #12]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	689b      	ldr	r3, [r3, #8]
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	d303      	bcc.n	8012c98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	68d9      	ldr	r1, [r3, #12]
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ca0:	461a      	mov	r2, r3
 8012ca2:	6838      	ldr	r0, [r7, #0]
 8012ca4:	f001 fe96 	bl	80149d4 <memcpy>
	}
}
 8012ca8:	bf00      	nop
 8012caa:	3708      	adds	r7, #8
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b084      	sub	sp, #16
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012cb8:	f001 fb4c 	bl	8014354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012cc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012cc4:	e011      	b.n	8012cea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d012      	beq.n	8012cf4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	3324      	adds	r3, #36	; 0x24
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f000 fe16 	bl	8013904 <xTaskRemoveFromEventList>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d001      	beq.n	8012ce2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012cde:	f000 feeb 	bl	8013ab8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012ce2:	7bfb      	ldrb	r3, [r7, #15]
 8012ce4:	3b01      	subs	r3, #1
 8012ce6:	b2db      	uxtb	r3, r3
 8012ce8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	dce9      	bgt.n	8012cc6 <prvUnlockQueue+0x16>
 8012cf2:	e000      	b.n	8012cf6 <prvUnlockQueue+0x46>
					break;
 8012cf4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	22ff      	movs	r2, #255	; 0xff
 8012cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012cfe:	f001 fb59 	bl	80143b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012d02:	f001 fb27 	bl	8014354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012d0e:	e011      	b.n	8012d34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	691b      	ldr	r3, [r3, #16]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d012      	beq.n	8012d3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	3310      	adds	r3, #16
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f000 fdf1 	bl	8013904 <xTaskRemoveFromEventList>
 8012d22:	4603      	mov	r3, r0
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d001      	beq.n	8012d2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012d28:	f000 fec6 	bl	8013ab8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012d2c:	7bbb      	ldrb	r3, [r7, #14]
 8012d2e:	3b01      	subs	r3, #1
 8012d30:	b2db      	uxtb	r3, r3
 8012d32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012d34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	dce9      	bgt.n	8012d10 <prvUnlockQueue+0x60>
 8012d3c:	e000      	b.n	8012d40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012d3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	22ff      	movs	r2, #255	; 0xff
 8012d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012d48:	f001 fb34 	bl	80143b4 <vPortExitCritical>
}
 8012d4c:	bf00      	nop
 8012d4e:	3710      	adds	r7, #16
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}

08012d54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b084      	sub	sp, #16
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012d5c:	f001 fafa 	bl	8014354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d102      	bne.n	8012d6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012d68:	2301      	movs	r3, #1
 8012d6a:	60fb      	str	r3, [r7, #12]
 8012d6c:	e001      	b.n	8012d72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012d72:	f001 fb1f 	bl	80143b4 <vPortExitCritical>

	return xReturn;
 8012d76:	68fb      	ldr	r3, [r7, #12]
}
 8012d78:	4618      	mov	r0, r3
 8012d7a:	3710      	adds	r7, #16
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}

08012d80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b084      	sub	sp, #16
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012d88:	f001 fae4 	bl	8014354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d94:	429a      	cmp	r2, r3
 8012d96:	d102      	bne.n	8012d9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012d98:	2301      	movs	r3, #1
 8012d9a:	60fb      	str	r3, [r7, #12]
 8012d9c:	e001      	b.n	8012da2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012da2:	f001 fb07 	bl	80143b4 <vPortExitCritical>

	return xReturn;
 8012da6:	68fb      	ldr	r3, [r7, #12]
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3710      	adds	r7, #16
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}

08012db0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012db0:	b480      	push	{r7}
 8012db2:	b085      	sub	sp, #20
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012db8:	2300      	movs	r3, #0
 8012dba:	60fb      	str	r3, [r7, #12]
 8012dbc:	e016      	b.n	8012dec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012dbe:	4a10      	ldr	r2, [pc, #64]	; (8012e00 <vQueueUnregisterQueue+0x50>)
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	00db      	lsls	r3, r3, #3
 8012dc4:	4413      	add	r3, r2
 8012dc6:	685b      	ldr	r3, [r3, #4]
 8012dc8:	687a      	ldr	r2, [r7, #4]
 8012dca:	429a      	cmp	r2, r3
 8012dcc:	d10b      	bne.n	8012de6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012dce:	4a0c      	ldr	r2, [pc, #48]	; (8012e00 <vQueueUnregisterQueue+0x50>)
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	2100      	movs	r1, #0
 8012dd4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012dd8:	4a09      	ldr	r2, [pc, #36]	; (8012e00 <vQueueUnregisterQueue+0x50>)
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	00db      	lsls	r3, r3, #3
 8012dde:	4413      	add	r3, r2
 8012de0:	2200      	movs	r2, #0
 8012de2:	605a      	str	r2, [r3, #4]
				break;
 8012de4:	e006      	b.n	8012df4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	3301      	adds	r3, #1
 8012dea:	60fb      	str	r3, [r7, #12]
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	2b07      	cmp	r3, #7
 8012df0:	d9e5      	bls.n	8012dbe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012df2:	bf00      	nop
 8012df4:	bf00      	nop
 8012df6:	3714      	adds	r7, #20
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfe:	4770      	bx	lr
 8012e00:	20005060 	.word	0x20005060

08012e04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b08c      	sub	sp, #48	; 0x30
 8012e08:	af04      	add	r7, sp, #16
 8012e0a:	60f8      	str	r0, [r7, #12]
 8012e0c:	60b9      	str	r1, [r7, #8]
 8012e0e:	603b      	str	r3, [r7, #0]
 8012e10:	4613      	mov	r3, r2
 8012e12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012e14:	88fb      	ldrh	r3, [r7, #6]
 8012e16:	009b      	lsls	r3, r3, #2
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f001 fbbd 	bl	8014598 <pvPortMalloc>
 8012e1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d00e      	beq.n	8012e44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012e26:	20b4      	movs	r0, #180	; 0xb4
 8012e28:	f001 fbb6 	bl	8014598 <pvPortMalloc>
 8012e2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012e2e:	69fb      	ldr	r3, [r7, #28]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d003      	beq.n	8012e3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012e34:	69fb      	ldr	r3, [r7, #28]
 8012e36:	697a      	ldr	r2, [r7, #20]
 8012e38:	631a      	str	r2, [r3, #48]	; 0x30
 8012e3a:	e005      	b.n	8012e48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012e3c:	6978      	ldr	r0, [r7, #20]
 8012e3e:	f001 fc77 	bl	8014730 <vPortFree>
 8012e42:	e001      	b.n	8012e48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012e44:	2300      	movs	r3, #0
 8012e46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012e48:	69fb      	ldr	r3, [r7, #28]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d013      	beq.n	8012e76 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012e4e:	88fa      	ldrh	r2, [r7, #6]
 8012e50:	2300      	movs	r3, #0
 8012e52:	9303      	str	r3, [sp, #12]
 8012e54:	69fb      	ldr	r3, [r7, #28]
 8012e56:	9302      	str	r3, [sp, #8]
 8012e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e5a:	9301      	str	r3, [sp, #4]
 8012e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e5e:	9300      	str	r3, [sp, #0]
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	68b9      	ldr	r1, [r7, #8]
 8012e64:	68f8      	ldr	r0, [r7, #12]
 8012e66:	f000 f80f 	bl	8012e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012e6a:	69f8      	ldr	r0, [r7, #28]
 8012e6c:	f000 f8b2 	bl	8012fd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012e70:	2301      	movs	r3, #1
 8012e72:	61bb      	str	r3, [r7, #24]
 8012e74:	e002      	b.n	8012e7c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012e76:	f04f 33ff 	mov.w	r3, #4294967295
 8012e7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012e7c:	69bb      	ldr	r3, [r7, #24]
	}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	3720      	adds	r7, #32
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bd80      	pop	{r7, pc}
	...

08012e88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b088      	sub	sp, #32
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	60f8      	str	r0, [r7, #12]
 8012e90:	60b9      	str	r1, [r7, #8]
 8012e92:	607a      	str	r2, [r7, #4]
 8012e94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	009b      	lsls	r3, r3, #2
 8012e9e:	461a      	mov	r2, r3
 8012ea0:	21a5      	movs	r1, #165	; 0xa5
 8012ea2:	f001 fda5 	bl	80149f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012eb0:	3b01      	subs	r3, #1
 8012eb2:	009b      	lsls	r3, r3, #2
 8012eb4:	4413      	add	r3, r2
 8012eb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012eb8:	69bb      	ldr	r3, [r7, #24]
 8012eba:	f023 0307 	bic.w	r3, r3, #7
 8012ebe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012ec0:	69bb      	ldr	r3, [r7, #24]
 8012ec2:	f003 0307 	and.w	r3, r3, #7
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d00a      	beq.n	8012ee0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8012eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ece:	f383 8811 	msr	BASEPRI, r3
 8012ed2:	f3bf 8f6f 	isb	sy
 8012ed6:	f3bf 8f4f 	dsb	sy
 8012eda:	617b      	str	r3, [r7, #20]
}
 8012edc:	bf00      	nop
 8012ede:	e7fe      	b.n	8012ede <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012ee0:	68bb      	ldr	r3, [r7, #8]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d01f      	beq.n	8012f26 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	61fb      	str	r3, [r7, #28]
 8012eea:	e012      	b.n	8012f12 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012eec:	68ba      	ldr	r2, [r7, #8]
 8012eee:	69fb      	ldr	r3, [r7, #28]
 8012ef0:	4413      	add	r3, r2
 8012ef2:	7819      	ldrb	r1, [r3, #0]
 8012ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ef6:	69fb      	ldr	r3, [r7, #28]
 8012ef8:	4413      	add	r3, r2
 8012efa:	3334      	adds	r3, #52	; 0x34
 8012efc:	460a      	mov	r2, r1
 8012efe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012f00:	68ba      	ldr	r2, [r7, #8]
 8012f02:	69fb      	ldr	r3, [r7, #28]
 8012f04:	4413      	add	r3, r2
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d006      	beq.n	8012f1a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012f0c:	69fb      	ldr	r3, [r7, #28]
 8012f0e:	3301      	adds	r3, #1
 8012f10:	61fb      	str	r3, [r7, #28]
 8012f12:	69fb      	ldr	r3, [r7, #28]
 8012f14:	2b0f      	cmp	r3, #15
 8012f16:	d9e9      	bls.n	8012eec <prvInitialiseNewTask+0x64>
 8012f18:	e000      	b.n	8012f1c <prvInitialiseNewTask+0x94>
			{
				break;
 8012f1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f1e:	2200      	movs	r2, #0
 8012f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012f24:	e003      	b.n	8012f2e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f28:	2200      	movs	r2, #0
 8012f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f30:	2b06      	cmp	r3, #6
 8012f32:	d901      	bls.n	8012f38 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012f34:	2306      	movs	r3, #6
 8012f36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f42:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f46:	2200      	movs	r2, #0
 8012f48:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f4c:	3304      	adds	r3, #4
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7ff f804 	bl	8011f5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f56:	3318      	adds	r3, #24
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f7fe ffff 	bl	8011f5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f66:	f1c3 0207 	rsb	r2, r3, #7
 8012f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f76:	2200      	movs	r2, #0
 8012f78:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f7e:	2200      	movs	r2, #0
 8012f80:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f86:	334c      	adds	r3, #76	; 0x4c
 8012f88:	2260      	movs	r2, #96	; 0x60
 8012f8a:	2100      	movs	r1, #0
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f001 fd2f 	bl	80149f0 <memset>
 8012f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f94:	4a0c      	ldr	r2, [pc, #48]	; (8012fc8 <prvInitialiseNewTask+0x140>)
 8012f96:	651a      	str	r2, [r3, #80]	; 0x50
 8012f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f9a:	4a0c      	ldr	r2, [pc, #48]	; (8012fcc <prvInitialiseNewTask+0x144>)
 8012f9c:	655a      	str	r2, [r3, #84]	; 0x54
 8012f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fa0:	4a0b      	ldr	r2, [pc, #44]	; (8012fd0 <prvInitialiseNewTask+0x148>)
 8012fa2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012fa4:	683a      	ldr	r2, [r7, #0]
 8012fa6:	68f9      	ldr	r1, [r7, #12]
 8012fa8:	69b8      	ldr	r0, [r7, #24]
 8012faa:	f001 f8a7 	bl	80140fc <pxPortInitialiseStack>
 8012fae:	4602      	mov	r2, r0
 8012fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d002      	beq.n	8012fc0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012fc0:	bf00      	nop
 8012fc2:	3720      	adds	r7, #32
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}
 8012fc8:	08015dac 	.word	0x08015dac
 8012fcc:	08015dcc 	.word	0x08015dcc
 8012fd0:	08015d8c 	.word	0x08015d8c

08012fd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b082      	sub	sp, #8
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012fdc:	f001 f9ba 	bl	8014354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012fe0:	4b2a      	ldr	r3, [pc, #168]	; (801308c <prvAddNewTaskToReadyList+0xb8>)
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	3301      	adds	r3, #1
 8012fe6:	4a29      	ldr	r2, [pc, #164]	; (801308c <prvAddNewTaskToReadyList+0xb8>)
 8012fe8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012fea:	4b29      	ldr	r3, [pc, #164]	; (8013090 <prvAddNewTaskToReadyList+0xbc>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d109      	bne.n	8013006 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012ff2:	4a27      	ldr	r2, [pc, #156]	; (8013090 <prvAddNewTaskToReadyList+0xbc>)
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012ff8:	4b24      	ldr	r3, [pc, #144]	; (801308c <prvAddNewTaskToReadyList+0xb8>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	2b01      	cmp	r3, #1
 8012ffe:	d110      	bne.n	8013022 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013000:	f000 fd7e 	bl	8013b00 <prvInitialiseTaskLists>
 8013004:	e00d      	b.n	8013022 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013006:	4b23      	ldr	r3, [pc, #140]	; (8013094 <prvAddNewTaskToReadyList+0xc0>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d109      	bne.n	8013022 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801300e:	4b20      	ldr	r3, [pc, #128]	; (8013090 <prvAddNewTaskToReadyList+0xbc>)
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013018:	429a      	cmp	r2, r3
 801301a:	d802      	bhi.n	8013022 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801301c:	4a1c      	ldr	r2, [pc, #112]	; (8013090 <prvAddNewTaskToReadyList+0xbc>)
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013022:	4b1d      	ldr	r3, [pc, #116]	; (8013098 <prvAddNewTaskToReadyList+0xc4>)
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	3301      	adds	r3, #1
 8013028:	4a1b      	ldr	r2, [pc, #108]	; (8013098 <prvAddNewTaskToReadyList+0xc4>)
 801302a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013030:	2201      	movs	r2, #1
 8013032:	409a      	lsls	r2, r3
 8013034:	4b19      	ldr	r3, [pc, #100]	; (801309c <prvAddNewTaskToReadyList+0xc8>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	4313      	orrs	r3, r2
 801303a:	4a18      	ldr	r2, [pc, #96]	; (801309c <prvAddNewTaskToReadyList+0xc8>)
 801303c:	6013      	str	r3, [r2, #0]
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013042:	4613      	mov	r3, r2
 8013044:	009b      	lsls	r3, r3, #2
 8013046:	4413      	add	r3, r2
 8013048:	009b      	lsls	r3, r3, #2
 801304a:	4a15      	ldr	r2, [pc, #84]	; (80130a0 <prvAddNewTaskToReadyList+0xcc>)
 801304c:	441a      	add	r2, r3
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	3304      	adds	r3, #4
 8013052:	4619      	mov	r1, r3
 8013054:	4610      	mov	r0, r2
 8013056:	f7fe ff8e 	bl	8011f76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801305a:	f001 f9ab 	bl	80143b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801305e:	4b0d      	ldr	r3, [pc, #52]	; (8013094 <prvAddNewTaskToReadyList+0xc0>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d00e      	beq.n	8013084 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013066:	4b0a      	ldr	r3, [pc, #40]	; (8013090 <prvAddNewTaskToReadyList+0xbc>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013070:	429a      	cmp	r2, r3
 8013072:	d207      	bcs.n	8013084 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013074:	4b0b      	ldr	r3, [pc, #44]	; (80130a4 <prvAddNewTaskToReadyList+0xd0>)
 8013076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801307a:	601a      	str	r2, [r3, #0]
 801307c:	f3bf 8f4f 	dsb	sy
 8013080:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013084:	bf00      	nop
 8013086:	3708      	adds	r7, #8
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}
 801308c:	2000059c 	.word	0x2000059c
 8013090:	2000049c 	.word	0x2000049c
 8013094:	200005a8 	.word	0x200005a8
 8013098:	200005b8 	.word	0x200005b8
 801309c:	200005a4 	.word	0x200005a4
 80130a0:	200004a0 	.word	0x200004a0
 80130a4:	e000ed04 	.word	0xe000ed04

080130a8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b08a      	sub	sp, #40	; 0x28
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80130b2:	2300      	movs	r3, #0
 80130b4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d10a      	bne.n	80130d2 <vTaskDelayUntil+0x2a>
	__asm volatile
 80130bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c0:	f383 8811 	msr	BASEPRI, r3
 80130c4:	f3bf 8f6f 	isb	sy
 80130c8:	f3bf 8f4f 	dsb	sy
 80130cc:	617b      	str	r3, [r7, #20]
}
 80130ce:	bf00      	nop
 80130d0:	e7fe      	b.n	80130d0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d10a      	bne.n	80130ee <vTaskDelayUntil+0x46>
	__asm volatile
 80130d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130dc:	f383 8811 	msr	BASEPRI, r3
 80130e0:	f3bf 8f6f 	isb	sy
 80130e4:	f3bf 8f4f 	dsb	sy
 80130e8:	613b      	str	r3, [r7, #16]
}
 80130ea:	bf00      	nop
 80130ec:	e7fe      	b.n	80130ec <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80130ee:	4b2a      	ldr	r3, [pc, #168]	; (8013198 <vTaskDelayUntil+0xf0>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d00a      	beq.n	801310c <vTaskDelayUntil+0x64>
	__asm volatile
 80130f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130fa:	f383 8811 	msr	BASEPRI, r3
 80130fe:	f3bf 8f6f 	isb	sy
 8013102:	f3bf 8f4f 	dsb	sy
 8013106:	60fb      	str	r3, [r7, #12]
}
 8013108:	bf00      	nop
 801310a:	e7fe      	b.n	801310a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 801310c:	f000 f9f0 	bl	80134f0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8013110:	4b22      	ldr	r3, [pc, #136]	; (801319c <vTaskDelayUntil+0xf4>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	683a      	ldr	r2, [r7, #0]
 801311c:	4413      	add	r3, r2
 801311e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	6a3a      	ldr	r2, [r7, #32]
 8013126:	429a      	cmp	r2, r3
 8013128:	d20b      	bcs.n	8013142 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	69fa      	ldr	r2, [r7, #28]
 8013130:	429a      	cmp	r2, r3
 8013132:	d211      	bcs.n	8013158 <vTaskDelayUntil+0xb0>
 8013134:	69fa      	ldr	r2, [r7, #28]
 8013136:	6a3b      	ldr	r3, [r7, #32]
 8013138:	429a      	cmp	r2, r3
 801313a:	d90d      	bls.n	8013158 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801313c:	2301      	movs	r3, #1
 801313e:	627b      	str	r3, [r7, #36]	; 0x24
 8013140:	e00a      	b.n	8013158 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	69fa      	ldr	r2, [r7, #28]
 8013148:	429a      	cmp	r2, r3
 801314a:	d303      	bcc.n	8013154 <vTaskDelayUntil+0xac>
 801314c:	69fa      	ldr	r2, [r7, #28]
 801314e:	6a3b      	ldr	r3, [r7, #32]
 8013150:	429a      	cmp	r2, r3
 8013152:	d901      	bls.n	8013158 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8013154:	2301      	movs	r3, #1
 8013156:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	69fa      	ldr	r2, [r7, #28]
 801315c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013160:	2b00      	cmp	r3, #0
 8013162:	d006      	beq.n	8013172 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8013164:	69fa      	ldr	r2, [r7, #28]
 8013166:	6a3b      	ldr	r3, [r7, #32]
 8013168:	1ad3      	subs	r3, r2, r3
 801316a:	2100      	movs	r1, #0
 801316c:	4618      	mov	r0, r3
 801316e:	f000 ff5f 	bl	8014030 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8013172:	f000 f9cb 	bl	801350c <xTaskResumeAll>
 8013176:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013178:	69bb      	ldr	r3, [r7, #24]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d107      	bne.n	801318e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 801317e:	4b08      	ldr	r3, [pc, #32]	; (80131a0 <vTaskDelayUntil+0xf8>)
 8013180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013184:	601a      	str	r2, [r3, #0]
 8013186:	f3bf 8f4f 	dsb	sy
 801318a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801318e:	bf00      	nop
 8013190:	3728      	adds	r7, #40	; 0x28
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}
 8013196:	bf00      	nop
 8013198:	200005c4 	.word	0x200005c4
 801319c:	200005a0 	.word	0x200005a0
 80131a0:	e000ed04 	.word	0xe000ed04

080131a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b084      	sub	sp, #16
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80131ac:	2300      	movs	r3, #0
 80131ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d017      	beq.n	80131e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80131b6:	4b13      	ldr	r3, [pc, #76]	; (8013204 <vTaskDelay+0x60>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d00a      	beq.n	80131d4 <vTaskDelay+0x30>
	__asm volatile
 80131be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131c2:	f383 8811 	msr	BASEPRI, r3
 80131c6:	f3bf 8f6f 	isb	sy
 80131ca:	f3bf 8f4f 	dsb	sy
 80131ce:	60bb      	str	r3, [r7, #8]
}
 80131d0:	bf00      	nop
 80131d2:	e7fe      	b.n	80131d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80131d4:	f000 f98c 	bl	80134f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80131d8:	2100      	movs	r1, #0
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	f000 ff28 	bl	8014030 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80131e0:	f000 f994 	bl	801350c <xTaskResumeAll>
 80131e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d107      	bne.n	80131fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80131ec:	4b06      	ldr	r3, [pc, #24]	; (8013208 <vTaskDelay+0x64>)
 80131ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131f2:	601a      	str	r2, [r3, #0]
 80131f4:	f3bf 8f4f 	dsb	sy
 80131f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80131fc:	bf00      	nop
 80131fe:	3710      	adds	r7, #16
 8013200:	46bd      	mov	sp, r7
 8013202:	bd80      	pop	{r7, pc}
 8013204:	200005c4 	.word	0x200005c4
 8013208:	e000ed04 	.word	0xe000ed04

0801320c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801320c:	b580      	push	{r7, lr}
 801320e:	b084      	sub	sp, #16
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013214:	f001 f89e 	bl	8014354 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d102      	bne.n	8013224 <vTaskSuspend+0x18>
 801321e:	4b3c      	ldr	r3, [pc, #240]	; (8013310 <vTaskSuspend+0x104>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	e000      	b.n	8013226 <vTaskSuspend+0x1a>
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	3304      	adds	r3, #4
 801322c:	4618      	mov	r0, r3
 801322e:	f7fe feff 	bl	8012030 <uxListRemove>
 8013232:	4603      	mov	r3, r0
 8013234:	2b00      	cmp	r3, #0
 8013236:	d115      	bne.n	8013264 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801323c:	4935      	ldr	r1, [pc, #212]	; (8013314 <vTaskSuspend+0x108>)
 801323e:	4613      	mov	r3, r2
 8013240:	009b      	lsls	r3, r3, #2
 8013242:	4413      	add	r3, r2
 8013244:	009b      	lsls	r3, r3, #2
 8013246:	440b      	add	r3, r1
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d10a      	bne.n	8013264 <vTaskSuspend+0x58>
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013252:	2201      	movs	r2, #1
 8013254:	fa02 f303 	lsl.w	r3, r2, r3
 8013258:	43da      	mvns	r2, r3
 801325a:	4b2f      	ldr	r3, [pc, #188]	; (8013318 <vTaskSuspend+0x10c>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	4013      	ands	r3, r2
 8013260:	4a2d      	ldr	r2, [pc, #180]	; (8013318 <vTaskSuspend+0x10c>)
 8013262:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013268:	2b00      	cmp	r3, #0
 801326a:	d004      	beq.n	8013276 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	3318      	adds	r3, #24
 8013270:	4618      	mov	r0, r3
 8013272:	f7fe fedd 	bl	8012030 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	3304      	adds	r3, #4
 801327a:	4619      	mov	r1, r3
 801327c:	4827      	ldr	r0, [pc, #156]	; (801331c <vTaskSuspend+0x110>)
 801327e:	f7fe fe7a 	bl	8011f76 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8013288:	b2db      	uxtb	r3, r3
 801328a:	2b01      	cmp	r3, #1
 801328c:	d103      	bne.n	8013296 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	2200      	movs	r2, #0
 8013292:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8013296:	f001 f88d 	bl	80143b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801329a:	4b21      	ldr	r3, [pc, #132]	; (8013320 <vTaskSuspend+0x114>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d005      	beq.n	80132ae <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80132a2:	f001 f857 	bl	8014354 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80132a6:	f000 fce7 	bl	8013c78 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80132aa:	f001 f883 	bl	80143b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80132ae:	4b18      	ldr	r3, [pc, #96]	; (8013310 <vTaskSuspend+0x104>)
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	68fa      	ldr	r2, [r7, #12]
 80132b4:	429a      	cmp	r2, r3
 80132b6:	d127      	bne.n	8013308 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80132b8:	4b19      	ldr	r3, [pc, #100]	; (8013320 <vTaskSuspend+0x114>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d017      	beq.n	80132f0 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80132c0:	4b18      	ldr	r3, [pc, #96]	; (8013324 <vTaskSuspend+0x118>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d00a      	beq.n	80132de <vTaskSuspend+0xd2>
	__asm volatile
 80132c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132cc:	f383 8811 	msr	BASEPRI, r3
 80132d0:	f3bf 8f6f 	isb	sy
 80132d4:	f3bf 8f4f 	dsb	sy
 80132d8:	60bb      	str	r3, [r7, #8]
}
 80132da:	bf00      	nop
 80132dc:	e7fe      	b.n	80132dc <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80132de:	4b12      	ldr	r3, [pc, #72]	; (8013328 <vTaskSuspend+0x11c>)
 80132e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132e4:	601a      	str	r2, [r3, #0]
 80132e6:	f3bf 8f4f 	dsb	sy
 80132ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80132ee:	e00b      	b.n	8013308 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80132f0:	4b0a      	ldr	r3, [pc, #40]	; (801331c <vTaskSuspend+0x110>)
 80132f2:	681a      	ldr	r2, [r3, #0]
 80132f4:	4b0d      	ldr	r3, [pc, #52]	; (801332c <vTaskSuspend+0x120>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	429a      	cmp	r2, r3
 80132fa:	d103      	bne.n	8013304 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80132fc:	4b04      	ldr	r3, [pc, #16]	; (8013310 <vTaskSuspend+0x104>)
 80132fe:	2200      	movs	r2, #0
 8013300:	601a      	str	r2, [r3, #0]
	}
 8013302:	e001      	b.n	8013308 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8013304:	f000 fa78 	bl	80137f8 <vTaskSwitchContext>
	}
 8013308:	bf00      	nop
 801330a:	3710      	adds	r7, #16
 801330c:	46bd      	mov	sp, r7
 801330e:	bd80      	pop	{r7, pc}
 8013310:	2000049c 	.word	0x2000049c
 8013314:	200004a0 	.word	0x200004a0
 8013318:	200005a4 	.word	0x200005a4
 801331c:	20000588 	.word	0x20000588
 8013320:	200005a8 	.word	0x200005a8
 8013324:	200005c4 	.word	0x200005c4
 8013328:	e000ed04 	.word	0xe000ed04
 801332c:	2000059c 	.word	0x2000059c

08013330 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8013330:	b480      	push	{r7}
 8013332:	b087      	sub	sp, #28
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013338:	2300      	movs	r3, #0
 801333a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d10a      	bne.n	801335c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8013346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801334a:	f383 8811 	msr	BASEPRI, r3
 801334e:	f3bf 8f6f 	isb	sy
 8013352:	f3bf 8f4f 	dsb	sy
 8013356:	60fb      	str	r3, [r7, #12]
}
 8013358:	bf00      	nop
 801335a:	e7fe      	b.n	801335a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	695b      	ldr	r3, [r3, #20]
 8013360:	4a0a      	ldr	r2, [pc, #40]	; (801338c <prvTaskIsTaskSuspended+0x5c>)
 8013362:	4293      	cmp	r3, r2
 8013364:	d10a      	bne.n	801337c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8013366:	693b      	ldr	r3, [r7, #16]
 8013368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801336a:	4a09      	ldr	r2, [pc, #36]	; (8013390 <prvTaskIsTaskSuspended+0x60>)
 801336c:	4293      	cmp	r3, r2
 801336e:	d005      	beq.n	801337c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8013370:	693b      	ldr	r3, [r7, #16]
 8013372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013374:	2b00      	cmp	r3, #0
 8013376:	d101      	bne.n	801337c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8013378:	2301      	movs	r3, #1
 801337a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801337c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801337e:	4618      	mov	r0, r3
 8013380:	371c      	adds	r7, #28
 8013382:	46bd      	mov	sp, r7
 8013384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013388:	4770      	bx	lr
 801338a:	bf00      	nop
 801338c:	20000588 	.word	0x20000588
 8013390:	2000055c 	.word	0x2000055c

08013394 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8013394:	b580      	push	{r7, lr}
 8013396:	b084      	sub	sp, #16
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d10a      	bne.n	80133bc <vTaskResume+0x28>
	__asm volatile
 80133a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133aa:	f383 8811 	msr	BASEPRI, r3
 80133ae:	f3bf 8f6f 	isb	sy
 80133b2:	f3bf 8f4f 	dsb	sy
 80133b6:	60bb      	str	r3, [r7, #8]
}
 80133b8:	bf00      	nop
 80133ba:	e7fe      	b.n	80133ba <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80133bc:	4b20      	ldr	r3, [pc, #128]	; (8013440 <vTaskResume+0xac>)
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	68fa      	ldr	r2, [r7, #12]
 80133c2:	429a      	cmp	r2, r3
 80133c4:	d037      	beq.n	8013436 <vTaskResume+0xa2>
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d034      	beq.n	8013436 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80133cc:	f000 ffc2 	bl	8014354 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80133d0:	68f8      	ldr	r0, [r7, #12]
 80133d2:	f7ff ffad 	bl	8013330 <prvTaskIsTaskSuspended>
 80133d6:	4603      	mov	r3, r0
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d02a      	beq.n	8013432 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	3304      	adds	r3, #4
 80133e0:	4618      	mov	r0, r3
 80133e2:	f7fe fe25 	bl	8012030 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ea:	2201      	movs	r2, #1
 80133ec:	409a      	lsls	r2, r3
 80133ee:	4b15      	ldr	r3, [pc, #84]	; (8013444 <vTaskResume+0xb0>)
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	4313      	orrs	r3, r2
 80133f4:	4a13      	ldr	r2, [pc, #76]	; (8013444 <vTaskResume+0xb0>)
 80133f6:	6013      	str	r3, [r2, #0]
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133fc:	4613      	mov	r3, r2
 80133fe:	009b      	lsls	r3, r3, #2
 8013400:	4413      	add	r3, r2
 8013402:	009b      	lsls	r3, r3, #2
 8013404:	4a10      	ldr	r2, [pc, #64]	; (8013448 <vTaskResume+0xb4>)
 8013406:	441a      	add	r2, r3
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	3304      	adds	r3, #4
 801340c:	4619      	mov	r1, r3
 801340e:	4610      	mov	r0, r2
 8013410:	f7fe fdb1 	bl	8011f76 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013418:	4b09      	ldr	r3, [pc, #36]	; (8013440 <vTaskResume+0xac>)
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801341e:	429a      	cmp	r2, r3
 8013420:	d307      	bcc.n	8013432 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8013422:	4b0a      	ldr	r3, [pc, #40]	; (801344c <vTaskResume+0xb8>)
 8013424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013428:	601a      	str	r2, [r3, #0]
 801342a:	f3bf 8f4f 	dsb	sy
 801342e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8013432:	f000 ffbf 	bl	80143b4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013436:	bf00      	nop
 8013438:	3710      	adds	r7, #16
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	2000049c 	.word	0x2000049c
 8013444:	200005a4 	.word	0x200005a4
 8013448:	200004a0 	.word	0x200004a0
 801344c:	e000ed04 	.word	0xe000ed04

08013450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b086      	sub	sp, #24
 8013454:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8013456:	4b1e      	ldr	r3, [pc, #120]	; (80134d0 <vTaskStartScheduler+0x80>)
 8013458:	9301      	str	r3, [sp, #4]
 801345a:	2300      	movs	r3, #0
 801345c:	9300      	str	r3, [sp, #0]
 801345e:	2300      	movs	r3, #0
 8013460:	2280      	movs	r2, #128	; 0x80
 8013462:	491c      	ldr	r1, [pc, #112]	; (80134d4 <vTaskStartScheduler+0x84>)
 8013464:	481c      	ldr	r0, [pc, #112]	; (80134d8 <vTaskStartScheduler+0x88>)
 8013466:	f7ff fccd 	bl	8012e04 <xTaskCreate>
 801346a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	2b01      	cmp	r3, #1
 8013470:	d11b      	bne.n	80134aa <vTaskStartScheduler+0x5a>
	__asm volatile
 8013472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013476:	f383 8811 	msr	BASEPRI, r3
 801347a:	f3bf 8f6f 	isb	sy
 801347e:	f3bf 8f4f 	dsb	sy
 8013482:	60bb      	str	r3, [r7, #8]
}
 8013484:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013486:	4b15      	ldr	r3, [pc, #84]	; (80134dc <vTaskStartScheduler+0x8c>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	334c      	adds	r3, #76	; 0x4c
 801348c:	4a14      	ldr	r2, [pc, #80]	; (80134e0 <vTaskStartScheduler+0x90>)
 801348e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013490:	4b14      	ldr	r3, [pc, #80]	; (80134e4 <vTaskStartScheduler+0x94>)
 8013492:	f04f 32ff 	mov.w	r2, #4294967295
 8013496:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013498:	4b13      	ldr	r3, [pc, #76]	; (80134e8 <vTaskStartScheduler+0x98>)
 801349a:	2201      	movs	r2, #1
 801349c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801349e:	4b13      	ldr	r3, [pc, #76]	; (80134ec <vTaskStartScheduler+0x9c>)
 80134a0:	2200      	movs	r2, #0
 80134a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80134a4:	f000 feb4 	bl	8014210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80134a8:	e00e      	b.n	80134c8 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134b0:	d10a      	bne.n	80134c8 <vTaskStartScheduler+0x78>
	__asm volatile
 80134b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134b6:	f383 8811 	msr	BASEPRI, r3
 80134ba:	f3bf 8f6f 	isb	sy
 80134be:	f3bf 8f4f 	dsb	sy
 80134c2:	607b      	str	r3, [r7, #4]
}
 80134c4:	bf00      	nop
 80134c6:	e7fe      	b.n	80134c6 <vTaskStartScheduler+0x76>
}
 80134c8:	bf00      	nop
 80134ca:	3710      	adds	r7, #16
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}
 80134d0:	200005c0 	.word	0x200005c0
 80134d4:	08015884 	.word	0x08015884
 80134d8:	08013ad1 	.word	0x08013ad1
 80134dc:	2000049c 	.word	0x2000049c
 80134e0:	2000007c 	.word	0x2000007c
 80134e4:	200005bc 	.word	0x200005bc
 80134e8:	200005a8 	.word	0x200005a8
 80134ec:	200005a0 	.word	0x200005a0

080134f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80134f0:	b480      	push	{r7}
 80134f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80134f4:	4b04      	ldr	r3, [pc, #16]	; (8013508 <vTaskSuspendAll+0x18>)
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	3301      	adds	r3, #1
 80134fa:	4a03      	ldr	r2, [pc, #12]	; (8013508 <vTaskSuspendAll+0x18>)
 80134fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80134fe:	bf00      	nop
 8013500:	46bd      	mov	sp, r7
 8013502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013506:	4770      	bx	lr
 8013508:	200005c4 	.word	0x200005c4

0801350c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b084      	sub	sp, #16
 8013510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013512:	2300      	movs	r3, #0
 8013514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013516:	2300      	movs	r3, #0
 8013518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801351a:	4b41      	ldr	r3, [pc, #260]	; (8013620 <xTaskResumeAll+0x114>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d10a      	bne.n	8013538 <xTaskResumeAll+0x2c>
	__asm volatile
 8013522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013526:	f383 8811 	msr	BASEPRI, r3
 801352a:	f3bf 8f6f 	isb	sy
 801352e:	f3bf 8f4f 	dsb	sy
 8013532:	603b      	str	r3, [r7, #0]
}
 8013534:	bf00      	nop
 8013536:	e7fe      	b.n	8013536 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013538:	f000 ff0c 	bl	8014354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801353c:	4b38      	ldr	r3, [pc, #224]	; (8013620 <xTaskResumeAll+0x114>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	3b01      	subs	r3, #1
 8013542:	4a37      	ldr	r2, [pc, #220]	; (8013620 <xTaskResumeAll+0x114>)
 8013544:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013546:	4b36      	ldr	r3, [pc, #216]	; (8013620 <xTaskResumeAll+0x114>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d161      	bne.n	8013612 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801354e:	4b35      	ldr	r3, [pc, #212]	; (8013624 <xTaskResumeAll+0x118>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d05d      	beq.n	8013612 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013556:	e02e      	b.n	80135b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013558:	4b33      	ldr	r3, [pc, #204]	; (8013628 <xTaskResumeAll+0x11c>)
 801355a:	68db      	ldr	r3, [r3, #12]
 801355c:	68db      	ldr	r3, [r3, #12]
 801355e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	3318      	adds	r3, #24
 8013564:	4618      	mov	r0, r3
 8013566:	f7fe fd63 	bl	8012030 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	3304      	adds	r3, #4
 801356e:	4618      	mov	r0, r3
 8013570:	f7fe fd5e 	bl	8012030 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013578:	2201      	movs	r2, #1
 801357a:	409a      	lsls	r2, r3
 801357c:	4b2b      	ldr	r3, [pc, #172]	; (801362c <xTaskResumeAll+0x120>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	4313      	orrs	r3, r2
 8013582:	4a2a      	ldr	r2, [pc, #168]	; (801362c <xTaskResumeAll+0x120>)
 8013584:	6013      	str	r3, [r2, #0]
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801358a:	4613      	mov	r3, r2
 801358c:	009b      	lsls	r3, r3, #2
 801358e:	4413      	add	r3, r2
 8013590:	009b      	lsls	r3, r3, #2
 8013592:	4a27      	ldr	r2, [pc, #156]	; (8013630 <xTaskResumeAll+0x124>)
 8013594:	441a      	add	r2, r3
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	3304      	adds	r3, #4
 801359a:	4619      	mov	r1, r3
 801359c:	4610      	mov	r0, r2
 801359e:	f7fe fcea 	bl	8011f76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135a6:	4b23      	ldr	r3, [pc, #140]	; (8013634 <xTaskResumeAll+0x128>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135ac:	429a      	cmp	r2, r3
 80135ae:	d302      	bcc.n	80135b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80135b0:	4b21      	ldr	r3, [pc, #132]	; (8013638 <xTaskResumeAll+0x12c>)
 80135b2:	2201      	movs	r2, #1
 80135b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80135b6:	4b1c      	ldr	r3, [pc, #112]	; (8013628 <xTaskResumeAll+0x11c>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d1cc      	bne.n	8013558 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d001      	beq.n	80135c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80135c4:	f000 fb58 	bl	8013c78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80135c8:	4b1c      	ldr	r3, [pc, #112]	; (801363c <xTaskResumeAll+0x130>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d010      	beq.n	80135f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80135d4:	f000 f858 	bl	8013688 <xTaskIncrementTick>
 80135d8:	4603      	mov	r3, r0
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d002      	beq.n	80135e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80135de:	4b16      	ldr	r3, [pc, #88]	; (8013638 <xTaskResumeAll+0x12c>)
 80135e0:	2201      	movs	r2, #1
 80135e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	3b01      	subs	r3, #1
 80135e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d1f1      	bne.n	80135d4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80135f0:	4b12      	ldr	r3, [pc, #72]	; (801363c <xTaskResumeAll+0x130>)
 80135f2:	2200      	movs	r2, #0
 80135f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80135f6:	4b10      	ldr	r3, [pc, #64]	; (8013638 <xTaskResumeAll+0x12c>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d009      	beq.n	8013612 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80135fe:	2301      	movs	r3, #1
 8013600:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013602:	4b0f      	ldr	r3, [pc, #60]	; (8013640 <xTaskResumeAll+0x134>)
 8013604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013608:	601a      	str	r2, [r3, #0]
 801360a:	f3bf 8f4f 	dsb	sy
 801360e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013612:	f000 fecf 	bl	80143b4 <vPortExitCritical>

	return xAlreadyYielded;
 8013616:	68bb      	ldr	r3, [r7, #8]
}
 8013618:	4618      	mov	r0, r3
 801361a:	3710      	adds	r7, #16
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}
 8013620:	200005c4 	.word	0x200005c4
 8013624:	2000059c 	.word	0x2000059c
 8013628:	2000055c 	.word	0x2000055c
 801362c:	200005a4 	.word	0x200005a4
 8013630:	200004a0 	.word	0x200004a0
 8013634:	2000049c 	.word	0x2000049c
 8013638:	200005b0 	.word	0x200005b0
 801363c:	200005ac 	.word	0x200005ac
 8013640:	e000ed04 	.word	0xe000ed04

08013644 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013644:	b480      	push	{r7}
 8013646:	b083      	sub	sp, #12
 8013648:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801364a:	4b05      	ldr	r3, [pc, #20]	; (8013660 <xTaskGetTickCount+0x1c>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013650:	687b      	ldr	r3, [r7, #4]
}
 8013652:	4618      	mov	r0, r3
 8013654:	370c      	adds	r7, #12
 8013656:	46bd      	mov	sp, r7
 8013658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365c:	4770      	bx	lr
 801365e:	bf00      	nop
 8013660:	200005a0 	.word	0x200005a0

08013664 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b082      	sub	sp, #8
 8013668:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801366a:	f000 ff55 	bl	8014518 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801366e:	2300      	movs	r3, #0
 8013670:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013672:	4b04      	ldr	r3, [pc, #16]	; (8013684 <xTaskGetTickCountFromISR+0x20>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013678:	683b      	ldr	r3, [r7, #0]
}
 801367a:	4618      	mov	r0, r3
 801367c:	3708      	adds	r7, #8
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}
 8013682:	bf00      	nop
 8013684:	200005a0 	.word	0x200005a0

08013688 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b086      	sub	sp, #24
 801368c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801368e:	2300      	movs	r3, #0
 8013690:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013692:	4b4e      	ldr	r3, [pc, #312]	; (80137cc <xTaskIncrementTick+0x144>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	2b00      	cmp	r3, #0
 8013698:	f040 808e 	bne.w	80137b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801369c:	4b4c      	ldr	r3, [pc, #304]	; (80137d0 <xTaskIncrementTick+0x148>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	3301      	adds	r3, #1
 80136a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80136a4:	4a4a      	ldr	r2, [pc, #296]	; (80137d0 <xTaskIncrementTick+0x148>)
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d120      	bne.n	80136f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80136b0:	4b48      	ldr	r3, [pc, #288]	; (80137d4 <xTaskIncrementTick+0x14c>)
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d00a      	beq.n	80136d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80136ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136be:	f383 8811 	msr	BASEPRI, r3
 80136c2:	f3bf 8f6f 	isb	sy
 80136c6:	f3bf 8f4f 	dsb	sy
 80136ca:	603b      	str	r3, [r7, #0]
}
 80136cc:	bf00      	nop
 80136ce:	e7fe      	b.n	80136ce <xTaskIncrementTick+0x46>
 80136d0:	4b40      	ldr	r3, [pc, #256]	; (80137d4 <xTaskIncrementTick+0x14c>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	60fb      	str	r3, [r7, #12]
 80136d6:	4b40      	ldr	r3, [pc, #256]	; (80137d8 <xTaskIncrementTick+0x150>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	4a3e      	ldr	r2, [pc, #248]	; (80137d4 <xTaskIncrementTick+0x14c>)
 80136dc:	6013      	str	r3, [r2, #0]
 80136de:	4a3e      	ldr	r2, [pc, #248]	; (80137d8 <xTaskIncrementTick+0x150>)
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	6013      	str	r3, [r2, #0]
 80136e4:	4b3d      	ldr	r3, [pc, #244]	; (80137dc <xTaskIncrementTick+0x154>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	3301      	adds	r3, #1
 80136ea:	4a3c      	ldr	r2, [pc, #240]	; (80137dc <xTaskIncrementTick+0x154>)
 80136ec:	6013      	str	r3, [r2, #0]
 80136ee:	f000 fac3 	bl	8013c78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80136f2:	4b3b      	ldr	r3, [pc, #236]	; (80137e0 <xTaskIncrementTick+0x158>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	693a      	ldr	r2, [r7, #16]
 80136f8:	429a      	cmp	r2, r3
 80136fa:	d348      	bcc.n	801378e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80136fc:	4b35      	ldr	r3, [pc, #212]	; (80137d4 <xTaskIncrementTick+0x14c>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d104      	bne.n	8013710 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013706:	4b36      	ldr	r3, [pc, #216]	; (80137e0 <xTaskIncrementTick+0x158>)
 8013708:	f04f 32ff 	mov.w	r2, #4294967295
 801370c:	601a      	str	r2, [r3, #0]
					break;
 801370e:	e03e      	b.n	801378e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013710:	4b30      	ldr	r3, [pc, #192]	; (80137d4 <xTaskIncrementTick+0x14c>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	68db      	ldr	r3, [r3, #12]
 8013716:	68db      	ldr	r3, [r3, #12]
 8013718:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	685b      	ldr	r3, [r3, #4]
 801371e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013720:	693a      	ldr	r2, [r7, #16]
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	429a      	cmp	r2, r3
 8013726:	d203      	bcs.n	8013730 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013728:	4a2d      	ldr	r2, [pc, #180]	; (80137e0 <xTaskIncrementTick+0x158>)
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801372e:	e02e      	b.n	801378e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	3304      	adds	r3, #4
 8013734:	4618      	mov	r0, r3
 8013736:	f7fe fc7b 	bl	8012030 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801373a:	68bb      	ldr	r3, [r7, #8]
 801373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801373e:	2b00      	cmp	r3, #0
 8013740:	d004      	beq.n	801374c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	3318      	adds	r3, #24
 8013746:	4618      	mov	r0, r3
 8013748:	f7fe fc72 	bl	8012030 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013750:	2201      	movs	r2, #1
 8013752:	409a      	lsls	r2, r3
 8013754:	4b23      	ldr	r3, [pc, #140]	; (80137e4 <xTaskIncrementTick+0x15c>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	4313      	orrs	r3, r2
 801375a:	4a22      	ldr	r2, [pc, #136]	; (80137e4 <xTaskIncrementTick+0x15c>)
 801375c:	6013      	str	r3, [r2, #0]
 801375e:	68bb      	ldr	r3, [r7, #8]
 8013760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013762:	4613      	mov	r3, r2
 8013764:	009b      	lsls	r3, r3, #2
 8013766:	4413      	add	r3, r2
 8013768:	009b      	lsls	r3, r3, #2
 801376a:	4a1f      	ldr	r2, [pc, #124]	; (80137e8 <xTaskIncrementTick+0x160>)
 801376c:	441a      	add	r2, r3
 801376e:	68bb      	ldr	r3, [r7, #8]
 8013770:	3304      	adds	r3, #4
 8013772:	4619      	mov	r1, r3
 8013774:	4610      	mov	r0, r2
 8013776:	f7fe fbfe 	bl	8011f76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801377a:	68bb      	ldr	r3, [r7, #8]
 801377c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801377e:	4b1b      	ldr	r3, [pc, #108]	; (80137ec <xTaskIncrementTick+0x164>)
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013784:	429a      	cmp	r2, r3
 8013786:	d3b9      	bcc.n	80136fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013788:	2301      	movs	r3, #1
 801378a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801378c:	e7b6      	b.n	80136fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801378e:	4b17      	ldr	r3, [pc, #92]	; (80137ec <xTaskIncrementTick+0x164>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013794:	4914      	ldr	r1, [pc, #80]	; (80137e8 <xTaskIncrementTick+0x160>)
 8013796:	4613      	mov	r3, r2
 8013798:	009b      	lsls	r3, r3, #2
 801379a:	4413      	add	r3, r2
 801379c:	009b      	lsls	r3, r3, #2
 801379e:	440b      	add	r3, r1
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	2b01      	cmp	r3, #1
 80137a4:	d901      	bls.n	80137aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80137a6:	2301      	movs	r3, #1
 80137a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80137aa:	4b11      	ldr	r3, [pc, #68]	; (80137f0 <xTaskIncrementTick+0x168>)
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d007      	beq.n	80137c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80137b2:	2301      	movs	r3, #1
 80137b4:	617b      	str	r3, [r7, #20]
 80137b6:	e004      	b.n	80137c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80137b8:	4b0e      	ldr	r3, [pc, #56]	; (80137f4 <xTaskIncrementTick+0x16c>)
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	3301      	adds	r3, #1
 80137be:	4a0d      	ldr	r2, [pc, #52]	; (80137f4 <xTaskIncrementTick+0x16c>)
 80137c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80137c2:	697b      	ldr	r3, [r7, #20]
}
 80137c4:	4618      	mov	r0, r3
 80137c6:	3718      	adds	r7, #24
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd80      	pop	{r7, pc}
 80137cc:	200005c4 	.word	0x200005c4
 80137d0:	200005a0 	.word	0x200005a0
 80137d4:	20000554 	.word	0x20000554
 80137d8:	20000558 	.word	0x20000558
 80137dc:	200005b4 	.word	0x200005b4
 80137e0:	200005bc 	.word	0x200005bc
 80137e4:	200005a4 	.word	0x200005a4
 80137e8:	200004a0 	.word	0x200004a0
 80137ec:	2000049c 	.word	0x2000049c
 80137f0:	200005b0 	.word	0x200005b0
 80137f4:	200005ac 	.word	0x200005ac

080137f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80137f8:	b480      	push	{r7}
 80137fa:	b087      	sub	sp, #28
 80137fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80137fe:	4b29      	ldr	r3, [pc, #164]	; (80138a4 <vTaskSwitchContext+0xac>)
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d003      	beq.n	801380e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013806:	4b28      	ldr	r3, [pc, #160]	; (80138a8 <vTaskSwitchContext+0xb0>)
 8013808:	2201      	movs	r2, #1
 801380a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801380c:	e044      	b.n	8013898 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 801380e:	4b26      	ldr	r3, [pc, #152]	; (80138a8 <vTaskSwitchContext+0xb0>)
 8013810:	2200      	movs	r2, #0
 8013812:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013814:	4b25      	ldr	r3, [pc, #148]	; (80138ac <vTaskSwitchContext+0xb4>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	fab3 f383 	clz	r3, r3
 8013820:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013822:	7afb      	ldrb	r3, [r7, #11]
 8013824:	f1c3 031f 	rsb	r3, r3, #31
 8013828:	617b      	str	r3, [r7, #20]
 801382a:	4921      	ldr	r1, [pc, #132]	; (80138b0 <vTaskSwitchContext+0xb8>)
 801382c:	697a      	ldr	r2, [r7, #20]
 801382e:	4613      	mov	r3, r2
 8013830:	009b      	lsls	r3, r3, #2
 8013832:	4413      	add	r3, r2
 8013834:	009b      	lsls	r3, r3, #2
 8013836:	440b      	add	r3, r1
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d10a      	bne.n	8013854 <vTaskSwitchContext+0x5c>
	__asm volatile
 801383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013842:	f383 8811 	msr	BASEPRI, r3
 8013846:	f3bf 8f6f 	isb	sy
 801384a:	f3bf 8f4f 	dsb	sy
 801384e:	607b      	str	r3, [r7, #4]
}
 8013850:	bf00      	nop
 8013852:	e7fe      	b.n	8013852 <vTaskSwitchContext+0x5a>
 8013854:	697a      	ldr	r2, [r7, #20]
 8013856:	4613      	mov	r3, r2
 8013858:	009b      	lsls	r3, r3, #2
 801385a:	4413      	add	r3, r2
 801385c:	009b      	lsls	r3, r3, #2
 801385e:	4a14      	ldr	r2, [pc, #80]	; (80138b0 <vTaskSwitchContext+0xb8>)
 8013860:	4413      	add	r3, r2
 8013862:	613b      	str	r3, [r7, #16]
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	685b      	ldr	r3, [r3, #4]
 8013868:	685a      	ldr	r2, [r3, #4]
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	605a      	str	r2, [r3, #4]
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	685a      	ldr	r2, [r3, #4]
 8013872:	693b      	ldr	r3, [r7, #16]
 8013874:	3308      	adds	r3, #8
 8013876:	429a      	cmp	r2, r3
 8013878:	d104      	bne.n	8013884 <vTaskSwitchContext+0x8c>
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	685b      	ldr	r3, [r3, #4]
 801387e:	685a      	ldr	r2, [r3, #4]
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	605a      	str	r2, [r3, #4]
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	685b      	ldr	r3, [r3, #4]
 8013888:	68db      	ldr	r3, [r3, #12]
 801388a:	4a0a      	ldr	r2, [pc, #40]	; (80138b4 <vTaskSwitchContext+0xbc>)
 801388c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801388e:	4b09      	ldr	r3, [pc, #36]	; (80138b4 <vTaskSwitchContext+0xbc>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	334c      	adds	r3, #76	; 0x4c
 8013894:	4a08      	ldr	r2, [pc, #32]	; (80138b8 <vTaskSwitchContext+0xc0>)
 8013896:	6013      	str	r3, [r2, #0]
}
 8013898:	bf00      	nop
 801389a:	371c      	adds	r7, #28
 801389c:	46bd      	mov	sp, r7
 801389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a2:	4770      	bx	lr
 80138a4:	200005c4 	.word	0x200005c4
 80138a8:	200005b0 	.word	0x200005b0
 80138ac:	200005a4 	.word	0x200005a4
 80138b0:	200004a0 	.word	0x200004a0
 80138b4:	2000049c 	.word	0x2000049c
 80138b8:	2000007c 	.word	0x2000007c

080138bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b084      	sub	sp, #16
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d10a      	bne.n	80138e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80138cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138d0:	f383 8811 	msr	BASEPRI, r3
 80138d4:	f3bf 8f6f 	isb	sy
 80138d8:	f3bf 8f4f 	dsb	sy
 80138dc:	60fb      	str	r3, [r7, #12]
}
 80138de:	bf00      	nop
 80138e0:	e7fe      	b.n	80138e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80138e2:	4b07      	ldr	r3, [pc, #28]	; (8013900 <vTaskPlaceOnEventList+0x44>)
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	3318      	adds	r3, #24
 80138e8:	4619      	mov	r1, r3
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f7fe fb67 	bl	8011fbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80138f0:	2101      	movs	r1, #1
 80138f2:	6838      	ldr	r0, [r7, #0]
 80138f4:	f000 fb9c 	bl	8014030 <prvAddCurrentTaskToDelayedList>
}
 80138f8:	bf00      	nop
 80138fa:	3710      	adds	r7, #16
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}
 8013900:	2000049c 	.word	0x2000049c

08013904 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b086      	sub	sp, #24
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	68db      	ldr	r3, [r3, #12]
 8013910:	68db      	ldr	r3, [r3, #12]
 8013912:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013914:	693b      	ldr	r3, [r7, #16]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d10a      	bne.n	8013930 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801391e:	f383 8811 	msr	BASEPRI, r3
 8013922:	f3bf 8f6f 	isb	sy
 8013926:	f3bf 8f4f 	dsb	sy
 801392a:	60fb      	str	r3, [r7, #12]
}
 801392c:	bf00      	nop
 801392e:	e7fe      	b.n	801392e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013930:	693b      	ldr	r3, [r7, #16]
 8013932:	3318      	adds	r3, #24
 8013934:	4618      	mov	r0, r3
 8013936:	f7fe fb7b 	bl	8012030 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801393a:	4b1d      	ldr	r3, [pc, #116]	; (80139b0 <xTaskRemoveFromEventList+0xac>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d11c      	bne.n	801397c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	3304      	adds	r3, #4
 8013946:	4618      	mov	r0, r3
 8013948:	f7fe fb72 	bl	8012030 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801394c:	693b      	ldr	r3, [r7, #16]
 801394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013950:	2201      	movs	r2, #1
 8013952:	409a      	lsls	r2, r3
 8013954:	4b17      	ldr	r3, [pc, #92]	; (80139b4 <xTaskRemoveFromEventList+0xb0>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	4313      	orrs	r3, r2
 801395a:	4a16      	ldr	r2, [pc, #88]	; (80139b4 <xTaskRemoveFromEventList+0xb0>)
 801395c:	6013      	str	r3, [r2, #0]
 801395e:	693b      	ldr	r3, [r7, #16]
 8013960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013962:	4613      	mov	r3, r2
 8013964:	009b      	lsls	r3, r3, #2
 8013966:	4413      	add	r3, r2
 8013968:	009b      	lsls	r3, r3, #2
 801396a:	4a13      	ldr	r2, [pc, #76]	; (80139b8 <xTaskRemoveFromEventList+0xb4>)
 801396c:	441a      	add	r2, r3
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	3304      	adds	r3, #4
 8013972:	4619      	mov	r1, r3
 8013974:	4610      	mov	r0, r2
 8013976:	f7fe fafe 	bl	8011f76 <vListInsertEnd>
 801397a:	e005      	b.n	8013988 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	3318      	adds	r3, #24
 8013980:	4619      	mov	r1, r3
 8013982:	480e      	ldr	r0, [pc, #56]	; (80139bc <xTaskRemoveFromEventList+0xb8>)
 8013984:	f7fe faf7 	bl	8011f76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013988:	693b      	ldr	r3, [r7, #16]
 801398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801398c:	4b0c      	ldr	r3, [pc, #48]	; (80139c0 <xTaskRemoveFromEventList+0xbc>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013992:	429a      	cmp	r2, r3
 8013994:	d905      	bls.n	80139a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013996:	2301      	movs	r3, #1
 8013998:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801399a:	4b0a      	ldr	r3, [pc, #40]	; (80139c4 <xTaskRemoveFromEventList+0xc0>)
 801399c:	2201      	movs	r2, #1
 801399e:	601a      	str	r2, [r3, #0]
 80139a0:	e001      	b.n	80139a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80139a2:	2300      	movs	r3, #0
 80139a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80139a6:	697b      	ldr	r3, [r7, #20]
}
 80139a8:	4618      	mov	r0, r3
 80139aa:	3718      	adds	r7, #24
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}
 80139b0:	200005c4 	.word	0x200005c4
 80139b4:	200005a4 	.word	0x200005a4
 80139b8:	200004a0 	.word	0x200004a0
 80139bc:	2000055c 	.word	0x2000055c
 80139c0:	2000049c 	.word	0x2000049c
 80139c4:	200005b0 	.word	0x200005b0

080139c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80139c8:	b480      	push	{r7}
 80139ca:	b083      	sub	sp, #12
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80139d0:	4b06      	ldr	r3, [pc, #24]	; (80139ec <vTaskInternalSetTimeOutState+0x24>)
 80139d2:	681a      	ldr	r2, [r3, #0]
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80139d8:	4b05      	ldr	r3, [pc, #20]	; (80139f0 <vTaskInternalSetTimeOutState+0x28>)
 80139da:	681a      	ldr	r2, [r3, #0]
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	605a      	str	r2, [r3, #4]
}
 80139e0:	bf00      	nop
 80139e2:	370c      	adds	r7, #12
 80139e4:	46bd      	mov	sp, r7
 80139e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ea:	4770      	bx	lr
 80139ec:	200005b4 	.word	0x200005b4
 80139f0:	200005a0 	.word	0x200005a0

080139f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b088      	sub	sp, #32
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d10a      	bne.n	8013a1a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a08:	f383 8811 	msr	BASEPRI, r3
 8013a0c:	f3bf 8f6f 	isb	sy
 8013a10:	f3bf 8f4f 	dsb	sy
 8013a14:	613b      	str	r3, [r7, #16]
}
 8013a16:	bf00      	nop
 8013a18:	e7fe      	b.n	8013a18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d10a      	bne.n	8013a36 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a24:	f383 8811 	msr	BASEPRI, r3
 8013a28:	f3bf 8f6f 	isb	sy
 8013a2c:	f3bf 8f4f 	dsb	sy
 8013a30:	60fb      	str	r3, [r7, #12]
}
 8013a32:	bf00      	nop
 8013a34:	e7fe      	b.n	8013a34 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013a36:	f000 fc8d 	bl	8014354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013a3a:	4b1d      	ldr	r3, [pc, #116]	; (8013ab0 <xTaskCheckForTimeOut+0xbc>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	685b      	ldr	r3, [r3, #4]
 8013a44:	69ba      	ldr	r2, [r7, #24]
 8013a46:	1ad3      	subs	r3, r2, r3
 8013a48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a52:	d102      	bne.n	8013a5a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013a54:	2300      	movs	r3, #0
 8013a56:	61fb      	str	r3, [r7, #28]
 8013a58:	e023      	b.n	8013aa2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	681a      	ldr	r2, [r3, #0]
 8013a5e:	4b15      	ldr	r3, [pc, #84]	; (8013ab4 <xTaskCheckForTimeOut+0xc0>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	429a      	cmp	r2, r3
 8013a64:	d007      	beq.n	8013a76 <xTaskCheckForTimeOut+0x82>
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	685b      	ldr	r3, [r3, #4]
 8013a6a:	69ba      	ldr	r2, [r7, #24]
 8013a6c:	429a      	cmp	r2, r3
 8013a6e:	d302      	bcc.n	8013a76 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013a70:	2301      	movs	r3, #1
 8013a72:	61fb      	str	r3, [r7, #28]
 8013a74:	e015      	b.n	8013aa2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	697a      	ldr	r2, [r7, #20]
 8013a7c:	429a      	cmp	r2, r3
 8013a7e:	d20b      	bcs.n	8013a98 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013a80:	683b      	ldr	r3, [r7, #0]
 8013a82:	681a      	ldr	r2, [r3, #0]
 8013a84:	697b      	ldr	r3, [r7, #20]
 8013a86:	1ad2      	subs	r2, r2, r3
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f7ff ff9b 	bl	80139c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013a92:	2300      	movs	r3, #0
 8013a94:	61fb      	str	r3, [r7, #28]
 8013a96:	e004      	b.n	8013aa2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013a9e:	2301      	movs	r3, #1
 8013aa0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013aa2:	f000 fc87 	bl	80143b4 <vPortExitCritical>

	return xReturn;
 8013aa6:	69fb      	ldr	r3, [r7, #28]
}
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	3720      	adds	r7, #32
 8013aac:	46bd      	mov	sp, r7
 8013aae:	bd80      	pop	{r7, pc}
 8013ab0:	200005a0 	.word	0x200005a0
 8013ab4:	200005b4 	.word	0x200005b4

08013ab8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013ab8:	b480      	push	{r7}
 8013aba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013abc:	4b03      	ldr	r3, [pc, #12]	; (8013acc <vTaskMissedYield+0x14>)
 8013abe:	2201      	movs	r2, #1
 8013ac0:	601a      	str	r2, [r3, #0]
}
 8013ac2:	bf00      	nop
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aca:	4770      	bx	lr
 8013acc:	200005b0 	.word	0x200005b0

08013ad0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b082      	sub	sp, #8
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013ad8:	f000 f852 	bl	8013b80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013adc:	4b06      	ldr	r3, [pc, #24]	; (8013af8 <prvIdleTask+0x28>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	2b01      	cmp	r3, #1
 8013ae2:	d9f9      	bls.n	8013ad8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013ae4:	4b05      	ldr	r3, [pc, #20]	; (8013afc <prvIdleTask+0x2c>)
 8013ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013aea:	601a      	str	r2, [r3, #0]
 8013aec:	f3bf 8f4f 	dsb	sy
 8013af0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013af4:	e7f0      	b.n	8013ad8 <prvIdleTask+0x8>
 8013af6:	bf00      	nop
 8013af8:	200004a0 	.word	0x200004a0
 8013afc:	e000ed04 	.word	0xe000ed04

08013b00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b082      	sub	sp, #8
 8013b04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013b06:	2300      	movs	r3, #0
 8013b08:	607b      	str	r3, [r7, #4]
 8013b0a:	e00c      	b.n	8013b26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013b0c:	687a      	ldr	r2, [r7, #4]
 8013b0e:	4613      	mov	r3, r2
 8013b10:	009b      	lsls	r3, r3, #2
 8013b12:	4413      	add	r3, r2
 8013b14:	009b      	lsls	r3, r3, #2
 8013b16:	4a12      	ldr	r2, [pc, #72]	; (8013b60 <prvInitialiseTaskLists+0x60>)
 8013b18:	4413      	add	r3, r2
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f7fe f9fe 	bl	8011f1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	3301      	adds	r3, #1
 8013b24:	607b      	str	r3, [r7, #4]
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	2b06      	cmp	r3, #6
 8013b2a:	d9ef      	bls.n	8013b0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013b2c:	480d      	ldr	r0, [pc, #52]	; (8013b64 <prvInitialiseTaskLists+0x64>)
 8013b2e:	f7fe f9f5 	bl	8011f1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013b32:	480d      	ldr	r0, [pc, #52]	; (8013b68 <prvInitialiseTaskLists+0x68>)
 8013b34:	f7fe f9f2 	bl	8011f1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013b38:	480c      	ldr	r0, [pc, #48]	; (8013b6c <prvInitialiseTaskLists+0x6c>)
 8013b3a:	f7fe f9ef 	bl	8011f1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013b3e:	480c      	ldr	r0, [pc, #48]	; (8013b70 <prvInitialiseTaskLists+0x70>)
 8013b40:	f7fe f9ec 	bl	8011f1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013b44:	480b      	ldr	r0, [pc, #44]	; (8013b74 <prvInitialiseTaskLists+0x74>)
 8013b46:	f7fe f9e9 	bl	8011f1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013b4a:	4b0b      	ldr	r3, [pc, #44]	; (8013b78 <prvInitialiseTaskLists+0x78>)
 8013b4c:	4a05      	ldr	r2, [pc, #20]	; (8013b64 <prvInitialiseTaskLists+0x64>)
 8013b4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013b50:	4b0a      	ldr	r3, [pc, #40]	; (8013b7c <prvInitialiseTaskLists+0x7c>)
 8013b52:	4a05      	ldr	r2, [pc, #20]	; (8013b68 <prvInitialiseTaskLists+0x68>)
 8013b54:	601a      	str	r2, [r3, #0]
}
 8013b56:	bf00      	nop
 8013b58:	3708      	adds	r7, #8
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}
 8013b5e:	bf00      	nop
 8013b60:	200004a0 	.word	0x200004a0
 8013b64:	2000052c 	.word	0x2000052c
 8013b68:	20000540 	.word	0x20000540
 8013b6c:	2000055c 	.word	0x2000055c
 8013b70:	20000570 	.word	0x20000570
 8013b74:	20000588 	.word	0x20000588
 8013b78:	20000554 	.word	0x20000554
 8013b7c:	20000558 	.word	0x20000558

08013b80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b082      	sub	sp, #8
 8013b84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013b86:	e019      	b.n	8013bbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013b88:	f000 fbe4 	bl	8014354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b8c:	4b10      	ldr	r3, [pc, #64]	; (8013bd0 <prvCheckTasksWaitingTermination+0x50>)
 8013b8e:	68db      	ldr	r3, [r3, #12]
 8013b90:	68db      	ldr	r3, [r3, #12]
 8013b92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	3304      	adds	r3, #4
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7fe fa49 	bl	8012030 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013b9e:	4b0d      	ldr	r3, [pc, #52]	; (8013bd4 <prvCheckTasksWaitingTermination+0x54>)
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	3b01      	subs	r3, #1
 8013ba4:	4a0b      	ldr	r2, [pc, #44]	; (8013bd4 <prvCheckTasksWaitingTermination+0x54>)
 8013ba6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013ba8:	4b0b      	ldr	r3, [pc, #44]	; (8013bd8 <prvCheckTasksWaitingTermination+0x58>)
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	3b01      	subs	r3, #1
 8013bae:	4a0a      	ldr	r2, [pc, #40]	; (8013bd8 <prvCheckTasksWaitingTermination+0x58>)
 8013bb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013bb2:	f000 fbff 	bl	80143b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013bb6:	6878      	ldr	r0, [r7, #4]
 8013bb8:	f000 f848 	bl	8013c4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013bbc:	4b06      	ldr	r3, [pc, #24]	; (8013bd8 <prvCheckTasksWaitingTermination+0x58>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d1e1      	bne.n	8013b88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013bc4:	bf00      	nop
 8013bc6:	bf00      	nop
 8013bc8:	3708      	adds	r7, #8
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}
 8013bce:	bf00      	nop
 8013bd0:	20000570 	.word	0x20000570
 8013bd4:	2000059c 	.word	0x2000059c
 8013bd8:	20000584 	.word	0x20000584

08013bdc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8013bdc:	b480      	push	{r7}
 8013bde:	b085      	sub	sp, #20
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8013be4:	2300      	movs	r3, #0
 8013be6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8013be8:	e005      	b.n	8013bf6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	3301      	adds	r3, #1
 8013bee:	607b      	str	r3, [r7, #4]
			ulCount++;
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	3301      	adds	r3, #1
 8013bf4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	781b      	ldrb	r3, [r3, #0]
 8013bfa:	2ba5      	cmp	r3, #165	; 0xa5
 8013bfc:	d0f5      	beq.n	8013bea <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	089b      	lsrs	r3, r3, #2
 8013c02:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	b29b      	uxth	r3, r3
	}
 8013c08:	4618      	mov	r0, r3
 8013c0a:	3714      	adds	r7, #20
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c12:	4770      	bx	lr

08013c14 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b086      	sub	sp, #24
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d102      	bne.n	8013c28 <uxTaskGetStackHighWaterMark+0x14>
 8013c22:	4b09      	ldr	r3, [pc, #36]	; (8013c48 <uxTaskGetStackHighWaterMark+0x34>)
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	e000      	b.n	8013c2a <uxTaskGetStackHighWaterMark+0x16>
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8013c2c:	697b      	ldr	r3, [r7, #20]
 8013c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c30:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8013c32:	6938      	ldr	r0, [r7, #16]
 8013c34:	f7ff ffd2 	bl	8013bdc <prvTaskCheckFreeStackSpace>
 8013c38:	4603      	mov	r3, r0
 8013c3a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8013c3c:	68fb      	ldr	r3, [r7, #12]
	}
 8013c3e:	4618      	mov	r0, r3
 8013c40:	3718      	adds	r7, #24
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bd80      	pop	{r7, pc}
 8013c46:	bf00      	nop
 8013c48:	2000049c 	.word	0x2000049c

08013c4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b082      	sub	sp, #8
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	334c      	adds	r3, #76	; 0x4c
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f000 ff49 	bl	8014af0 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c62:	4618      	mov	r0, r3
 8013c64:	f000 fd64 	bl	8014730 <vPortFree>
			vPortFree( pxTCB );
 8013c68:	6878      	ldr	r0, [r7, #4]
 8013c6a:	f000 fd61 	bl	8014730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013c6e:	bf00      	nop
 8013c70:	3708      	adds	r7, #8
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}
	...

08013c78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013c78:	b480      	push	{r7}
 8013c7a:	b083      	sub	sp, #12
 8013c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013c7e:	4b0c      	ldr	r3, [pc, #48]	; (8013cb0 <prvResetNextTaskUnblockTime+0x38>)
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d104      	bne.n	8013c92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013c88:	4b0a      	ldr	r3, [pc, #40]	; (8013cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8013c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013c90:	e008      	b.n	8013ca4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c92:	4b07      	ldr	r3, [pc, #28]	; (8013cb0 <prvResetNextTaskUnblockTime+0x38>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	68db      	ldr	r3, [r3, #12]
 8013c98:	68db      	ldr	r3, [r3, #12]
 8013c9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	685b      	ldr	r3, [r3, #4]
 8013ca0:	4a04      	ldr	r2, [pc, #16]	; (8013cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8013ca2:	6013      	str	r3, [r2, #0]
}
 8013ca4:	bf00      	nop
 8013ca6:	370c      	adds	r7, #12
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cae:	4770      	bx	lr
 8013cb0:	20000554 	.word	0x20000554
 8013cb4:	200005bc 	.word	0x200005bc

08013cb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013cb8:	b480      	push	{r7}
 8013cba:	b083      	sub	sp, #12
 8013cbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013cbe:	4b0b      	ldr	r3, [pc, #44]	; (8013cec <xTaskGetSchedulerState+0x34>)
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d102      	bne.n	8013ccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	607b      	str	r3, [r7, #4]
 8013cca:	e008      	b.n	8013cde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ccc:	4b08      	ldr	r3, [pc, #32]	; (8013cf0 <xTaskGetSchedulerState+0x38>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d102      	bne.n	8013cda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013cd4:	2302      	movs	r3, #2
 8013cd6:	607b      	str	r3, [r7, #4]
 8013cd8:	e001      	b.n	8013cde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013cde:	687b      	ldr	r3, [r7, #4]
	}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	370c      	adds	r7, #12
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr
 8013cec:	200005a8 	.word	0x200005a8
 8013cf0:	200005c4 	.word	0x200005c4

08013cf4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b084      	sub	sp, #16
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013d00:	2300      	movs	r3, #0
 8013d02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d05e      	beq.n	8013dc8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d0e:	4b31      	ldr	r3, [pc, #196]	; (8013dd4 <xTaskPriorityInherit+0xe0>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d24e      	bcs.n	8013db6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013d18:	68bb      	ldr	r3, [r7, #8]
 8013d1a:	699b      	ldr	r3, [r3, #24]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	db06      	blt.n	8013d2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d20:	4b2c      	ldr	r3, [pc, #176]	; (8013dd4 <xTaskPriorityInherit+0xe0>)
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d26:	f1c3 0207 	rsb	r2, r3, #7
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	6959      	ldr	r1, [r3, #20]
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d36:	4613      	mov	r3, r2
 8013d38:	009b      	lsls	r3, r3, #2
 8013d3a:	4413      	add	r3, r2
 8013d3c:	009b      	lsls	r3, r3, #2
 8013d3e:	4a26      	ldr	r2, [pc, #152]	; (8013dd8 <xTaskPriorityInherit+0xe4>)
 8013d40:	4413      	add	r3, r2
 8013d42:	4299      	cmp	r1, r3
 8013d44:	d12f      	bne.n	8013da6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	3304      	adds	r3, #4
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7fe f970 	bl	8012030 <uxListRemove>
 8013d50:	4603      	mov	r3, r0
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d10a      	bne.n	8013d6c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8013d56:	68bb      	ldr	r3, [r7, #8]
 8013d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d5a:	2201      	movs	r2, #1
 8013d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8013d60:	43da      	mvns	r2, r3
 8013d62:	4b1e      	ldr	r3, [pc, #120]	; (8013ddc <xTaskPriorityInherit+0xe8>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	4013      	ands	r3, r2
 8013d68:	4a1c      	ldr	r2, [pc, #112]	; (8013ddc <xTaskPriorityInherit+0xe8>)
 8013d6a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013d6c:	4b19      	ldr	r3, [pc, #100]	; (8013dd4 <xTaskPriorityInherit+0xe0>)
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013d76:	68bb      	ldr	r3, [r7, #8]
 8013d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d7a:	2201      	movs	r2, #1
 8013d7c:	409a      	lsls	r2, r3
 8013d7e:	4b17      	ldr	r3, [pc, #92]	; (8013ddc <xTaskPriorityInherit+0xe8>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	4313      	orrs	r3, r2
 8013d84:	4a15      	ldr	r2, [pc, #84]	; (8013ddc <xTaskPriorityInherit+0xe8>)
 8013d86:	6013      	str	r3, [r2, #0]
 8013d88:	68bb      	ldr	r3, [r7, #8]
 8013d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d8c:	4613      	mov	r3, r2
 8013d8e:	009b      	lsls	r3, r3, #2
 8013d90:	4413      	add	r3, r2
 8013d92:	009b      	lsls	r3, r3, #2
 8013d94:	4a10      	ldr	r2, [pc, #64]	; (8013dd8 <xTaskPriorityInherit+0xe4>)
 8013d96:	441a      	add	r2, r3
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	3304      	adds	r3, #4
 8013d9c:	4619      	mov	r1, r3
 8013d9e:	4610      	mov	r0, r2
 8013da0:	f7fe f8e9 	bl	8011f76 <vListInsertEnd>
 8013da4:	e004      	b.n	8013db0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013da6:	4b0b      	ldr	r3, [pc, #44]	; (8013dd4 <xTaskPriorityInherit+0xe0>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013db0:	2301      	movs	r3, #1
 8013db2:	60fb      	str	r3, [r7, #12]
 8013db4:	e008      	b.n	8013dc8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013db6:	68bb      	ldr	r3, [r7, #8]
 8013db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013dba:	4b06      	ldr	r3, [pc, #24]	; (8013dd4 <xTaskPriorityInherit+0xe0>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d201      	bcs.n	8013dc8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013dc8:	68fb      	ldr	r3, [r7, #12]
	}
 8013dca:	4618      	mov	r0, r3
 8013dcc:	3710      	adds	r7, #16
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	bd80      	pop	{r7, pc}
 8013dd2:	bf00      	nop
 8013dd4:	2000049c 	.word	0x2000049c
 8013dd8:	200004a0 	.word	0x200004a0
 8013ddc:	200005a4 	.word	0x200005a4

08013de0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b086      	sub	sp, #24
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013dec:	2300      	movs	r3, #0
 8013dee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d06e      	beq.n	8013ed4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013df6:	4b3a      	ldr	r3, [pc, #232]	; (8013ee0 <xTaskPriorityDisinherit+0x100>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	693a      	ldr	r2, [r7, #16]
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d00a      	beq.n	8013e16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e04:	f383 8811 	msr	BASEPRI, r3
 8013e08:	f3bf 8f6f 	isb	sy
 8013e0c:	f3bf 8f4f 	dsb	sy
 8013e10:	60fb      	str	r3, [r7, #12]
}
 8013e12:	bf00      	nop
 8013e14:	e7fe      	b.n	8013e14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d10a      	bne.n	8013e34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e22:	f383 8811 	msr	BASEPRI, r3
 8013e26:	f3bf 8f6f 	isb	sy
 8013e2a:	f3bf 8f4f 	dsb	sy
 8013e2e:	60bb      	str	r3, [r7, #8]
}
 8013e30:	bf00      	nop
 8013e32:	e7fe      	b.n	8013e32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e38:	1e5a      	subs	r2, r3, #1
 8013e3a:	693b      	ldr	r3, [r7, #16]
 8013e3c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013e3e:	693b      	ldr	r3, [r7, #16]
 8013e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e42:	693b      	ldr	r3, [r7, #16]
 8013e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e46:	429a      	cmp	r2, r3
 8013e48:	d044      	beq.n	8013ed4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d140      	bne.n	8013ed4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	3304      	adds	r3, #4
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7fe f8ea 	bl	8012030 <uxListRemove>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d115      	bne.n	8013e8e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013e62:	693b      	ldr	r3, [r7, #16]
 8013e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e66:	491f      	ldr	r1, [pc, #124]	; (8013ee4 <xTaskPriorityDisinherit+0x104>)
 8013e68:	4613      	mov	r3, r2
 8013e6a:	009b      	lsls	r3, r3, #2
 8013e6c:	4413      	add	r3, r2
 8013e6e:	009b      	lsls	r3, r3, #2
 8013e70:	440b      	add	r3, r1
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d10a      	bne.n	8013e8e <xTaskPriorityDisinherit+0xae>
 8013e78:	693b      	ldr	r3, [r7, #16]
 8013e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e7c:	2201      	movs	r2, #1
 8013e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8013e82:	43da      	mvns	r2, r3
 8013e84:	4b18      	ldr	r3, [pc, #96]	; (8013ee8 <xTaskPriorityDisinherit+0x108>)
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	4013      	ands	r3, r2
 8013e8a:	4a17      	ldr	r2, [pc, #92]	; (8013ee8 <xTaskPriorityDisinherit+0x108>)
 8013e8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013e8e:	693b      	ldr	r3, [r7, #16]
 8013e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e96:	693b      	ldr	r3, [r7, #16]
 8013e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e9a:	f1c3 0207 	rsb	r2, r3, #7
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ea6:	2201      	movs	r2, #1
 8013ea8:	409a      	lsls	r2, r3
 8013eaa:	4b0f      	ldr	r3, [pc, #60]	; (8013ee8 <xTaskPriorityDisinherit+0x108>)
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	4313      	orrs	r3, r2
 8013eb0:	4a0d      	ldr	r2, [pc, #52]	; (8013ee8 <xTaskPriorityDisinherit+0x108>)
 8013eb2:	6013      	str	r3, [r2, #0]
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eb8:	4613      	mov	r3, r2
 8013eba:	009b      	lsls	r3, r3, #2
 8013ebc:	4413      	add	r3, r2
 8013ebe:	009b      	lsls	r3, r3, #2
 8013ec0:	4a08      	ldr	r2, [pc, #32]	; (8013ee4 <xTaskPriorityDisinherit+0x104>)
 8013ec2:	441a      	add	r2, r3
 8013ec4:	693b      	ldr	r3, [r7, #16]
 8013ec6:	3304      	adds	r3, #4
 8013ec8:	4619      	mov	r1, r3
 8013eca:	4610      	mov	r0, r2
 8013ecc:	f7fe f853 	bl	8011f76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013ed4:	697b      	ldr	r3, [r7, #20]
	}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	3718      	adds	r7, #24
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
 8013ede:	bf00      	nop
 8013ee0:	2000049c 	.word	0x2000049c
 8013ee4:	200004a0 	.word	0x200004a0
 8013ee8:	200005a4 	.word	0x200005a4

08013eec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b088      	sub	sp, #32
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013efa:	2301      	movs	r3, #1
 8013efc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d077      	beq.n	8013ff4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013f04:	69bb      	ldr	r3, [r7, #24]
 8013f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d10a      	bne.n	8013f22 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8013f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f10:	f383 8811 	msr	BASEPRI, r3
 8013f14:	f3bf 8f6f 	isb	sy
 8013f18:	f3bf 8f4f 	dsb	sy
 8013f1c:	60fb      	str	r3, [r7, #12]
}
 8013f1e:	bf00      	nop
 8013f20:	e7fe      	b.n	8013f20 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013f22:	69bb      	ldr	r3, [r7, #24]
 8013f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f26:	683a      	ldr	r2, [r7, #0]
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	d902      	bls.n	8013f32 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	61fb      	str	r3, [r7, #28]
 8013f30:	e002      	b.n	8013f38 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013f32:	69bb      	ldr	r3, [r7, #24]
 8013f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f36:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013f38:	69bb      	ldr	r3, [r7, #24]
 8013f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f3c:	69fa      	ldr	r2, [r7, #28]
 8013f3e:	429a      	cmp	r2, r3
 8013f40:	d058      	beq.n	8013ff4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013f42:	69bb      	ldr	r3, [r7, #24]
 8013f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f46:	697a      	ldr	r2, [r7, #20]
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	d153      	bne.n	8013ff4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013f4c:	4b2b      	ldr	r3, [pc, #172]	; (8013ffc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	69ba      	ldr	r2, [r7, #24]
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d10a      	bne.n	8013f6c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8013f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f5a:	f383 8811 	msr	BASEPRI, r3
 8013f5e:	f3bf 8f6f 	isb	sy
 8013f62:	f3bf 8f4f 	dsb	sy
 8013f66:	60bb      	str	r3, [r7, #8]
}
 8013f68:	bf00      	nop
 8013f6a:	e7fe      	b.n	8013f6a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013f6c:	69bb      	ldr	r3, [r7, #24]
 8013f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013f72:	69bb      	ldr	r3, [r7, #24]
 8013f74:	69fa      	ldr	r2, [r7, #28]
 8013f76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013f78:	69bb      	ldr	r3, [r7, #24]
 8013f7a:	699b      	ldr	r3, [r3, #24]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	db04      	blt.n	8013f8a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f80:	69fb      	ldr	r3, [r7, #28]
 8013f82:	f1c3 0207 	rsb	r2, r3, #7
 8013f86:	69bb      	ldr	r3, [r7, #24]
 8013f88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013f8a:	69bb      	ldr	r3, [r7, #24]
 8013f8c:	6959      	ldr	r1, [r3, #20]
 8013f8e:	693a      	ldr	r2, [r7, #16]
 8013f90:	4613      	mov	r3, r2
 8013f92:	009b      	lsls	r3, r3, #2
 8013f94:	4413      	add	r3, r2
 8013f96:	009b      	lsls	r3, r3, #2
 8013f98:	4a19      	ldr	r2, [pc, #100]	; (8014000 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8013f9a:	4413      	add	r3, r2
 8013f9c:	4299      	cmp	r1, r3
 8013f9e:	d129      	bne.n	8013ff4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013fa0:	69bb      	ldr	r3, [r7, #24]
 8013fa2:	3304      	adds	r3, #4
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7fe f843 	bl	8012030 <uxListRemove>
 8013faa:	4603      	mov	r3, r0
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d10a      	bne.n	8013fc6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8013fb0:	69bb      	ldr	r3, [r7, #24]
 8013fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fb4:	2201      	movs	r2, #1
 8013fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8013fba:	43da      	mvns	r2, r3
 8013fbc:	4b11      	ldr	r3, [pc, #68]	; (8014004 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	4013      	ands	r3, r2
 8013fc2:	4a10      	ldr	r2, [pc, #64]	; (8014004 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8013fc4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013fc6:	69bb      	ldr	r3, [r7, #24]
 8013fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fca:	2201      	movs	r2, #1
 8013fcc:	409a      	lsls	r2, r3
 8013fce:	4b0d      	ldr	r3, [pc, #52]	; (8014004 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	4313      	orrs	r3, r2
 8013fd4:	4a0b      	ldr	r2, [pc, #44]	; (8014004 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8013fd6:	6013      	str	r3, [r2, #0]
 8013fd8:	69bb      	ldr	r3, [r7, #24]
 8013fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fdc:	4613      	mov	r3, r2
 8013fde:	009b      	lsls	r3, r3, #2
 8013fe0:	4413      	add	r3, r2
 8013fe2:	009b      	lsls	r3, r3, #2
 8013fe4:	4a06      	ldr	r2, [pc, #24]	; (8014000 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8013fe6:	441a      	add	r2, r3
 8013fe8:	69bb      	ldr	r3, [r7, #24]
 8013fea:	3304      	adds	r3, #4
 8013fec:	4619      	mov	r1, r3
 8013fee:	4610      	mov	r0, r2
 8013ff0:	f7fd ffc1 	bl	8011f76 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013ff4:	bf00      	nop
 8013ff6:	3720      	adds	r7, #32
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}
 8013ffc:	2000049c 	.word	0x2000049c
 8014000:	200004a0 	.word	0x200004a0
 8014004:	200005a4 	.word	0x200005a4

08014008 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014008:	b480      	push	{r7}
 801400a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801400c:	4b07      	ldr	r3, [pc, #28]	; (801402c <pvTaskIncrementMutexHeldCount+0x24>)
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d004      	beq.n	801401e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014014:	4b05      	ldr	r3, [pc, #20]	; (801402c <pvTaskIncrementMutexHeldCount+0x24>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801401a:	3201      	adds	r2, #1
 801401c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801401e:	4b03      	ldr	r3, [pc, #12]	; (801402c <pvTaskIncrementMutexHeldCount+0x24>)
 8014020:	681b      	ldr	r3, [r3, #0]
	}
 8014022:	4618      	mov	r0, r3
 8014024:	46bd      	mov	sp, r7
 8014026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402a:	4770      	bx	lr
 801402c:	2000049c 	.word	0x2000049c

08014030 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
 8014038:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801403a:	4b29      	ldr	r3, [pc, #164]	; (80140e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014040:	4b28      	ldr	r3, [pc, #160]	; (80140e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	3304      	adds	r3, #4
 8014046:	4618      	mov	r0, r3
 8014048:	f7fd fff2 	bl	8012030 <uxListRemove>
 801404c:	4603      	mov	r3, r0
 801404e:	2b00      	cmp	r3, #0
 8014050:	d10b      	bne.n	801406a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014052:	4b24      	ldr	r3, [pc, #144]	; (80140e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014058:	2201      	movs	r2, #1
 801405a:	fa02 f303 	lsl.w	r3, r2, r3
 801405e:	43da      	mvns	r2, r3
 8014060:	4b21      	ldr	r3, [pc, #132]	; (80140e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	4013      	ands	r3, r2
 8014066:	4a20      	ldr	r2, [pc, #128]	; (80140e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014068:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014070:	d10a      	bne.n	8014088 <prvAddCurrentTaskToDelayedList+0x58>
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d007      	beq.n	8014088 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014078:	4b1a      	ldr	r3, [pc, #104]	; (80140e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	3304      	adds	r3, #4
 801407e:	4619      	mov	r1, r3
 8014080:	481a      	ldr	r0, [pc, #104]	; (80140ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8014082:	f7fd ff78 	bl	8011f76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014086:	e026      	b.n	80140d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014088:	68fa      	ldr	r2, [r7, #12]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	4413      	add	r3, r2
 801408e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014090:	4b14      	ldr	r3, [pc, #80]	; (80140e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	68ba      	ldr	r2, [r7, #8]
 8014096:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014098:	68ba      	ldr	r2, [r7, #8]
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	429a      	cmp	r2, r3
 801409e:	d209      	bcs.n	80140b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80140a0:	4b13      	ldr	r3, [pc, #76]	; (80140f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80140a2:	681a      	ldr	r2, [r3, #0]
 80140a4:	4b0f      	ldr	r3, [pc, #60]	; (80140e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	3304      	adds	r3, #4
 80140aa:	4619      	mov	r1, r3
 80140ac:	4610      	mov	r0, r2
 80140ae:	f7fd ff86 	bl	8011fbe <vListInsert>
}
 80140b2:	e010      	b.n	80140d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80140b4:	4b0f      	ldr	r3, [pc, #60]	; (80140f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80140b6:	681a      	ldr	r2, [r3, #0]
 80140b8:	4b0a      	ldr	r3, [pc, #40]	; (80140e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	3304      	adds	r3, #4
 80140be:	4619      	mov	r1, r3
 80140c0:	4610      	mov	r0, r2
 80140c2:	f7fd ff7c 	bl	8011fbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80140c6:	4b0c      	ldr	r3, [pc, #48]	; (80140f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	68ba      	ldr	r2, [r7, #8]
 80140cc:	429a      	cmp	r2, r3
 80140ce:	d202      	bcs.n	80140d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80140d0:	4a09      	ldr	r2, [pc, #36]	; (80140f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	6013      	str	r3, [r2, #0]
}
 80140d6:	bf00      	nop
 80140d8:	3710      	adds	r7, #16
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}
 80140de:	bf00      	nop
 80140e0:	200005a0 	.word	0x200005a0
 80140e4:	2000049c 	.word	0x2000049c
 80140e8:	200005a4 	.word	0x200005a4
 80140ec:	20000588 	.word	0x20000588
 80140f0:	20000558 	.word	0x20000558
 80140f4:	20000554 	.word	0x20000554
 80140f8:	200005bc 	.word	0x200005bc

080140fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80140fc:	b480      	push	{r7}
 80140fe:	b085      	sub	sp, #20
 8014100:	af00      	add	r7, sp, #0
 8014102:	60f8      	str	r0, [r7, #12]
 8014104:	60b9      	str	r1, [r7, #8]
 8014106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	3b04      	subs	r3, #4
 801410c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	3b04      	subs	r3, #4
 801411a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	f023 0201 	bic.w	r2, r3, #1
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	3b04      	subs	r3, #4
 801412a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801412c:	4a0c      	ldr	r2, [pc, #48]	; (8014160 <pxPortInitialiseStack+0x64>)
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	3b14      	subs	r3, #20
 8014136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014138:	687a      	ldr	r2, [r7, #4]
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	3b04      	subs	r3, #4
 8014142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	f06f 0202 	mvn.w	r2, #2
 801414a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	3b20      	subs	r3, #32
 8014150:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014152:	68fb      	ldr	r3, [r7, #12]
}
 8014154:	4618      	mov	r0, r3
 8014156:	3714      	adds	r7, #20
 8014158:	46bd      	mov	sp, r7
 801415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415e:	4770      	bx	lr
 8014160:	08014165 	.word	0x08014165

08014164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014164:	b480      	push	{r7}
 8014166:	b085      	sub	sp, #20
 8014168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801416a:	2300      	movs	r3, #0
 801416c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801416e:	4b12      	ldr	r3, [pc, #72]	; (80141b8 <prvTaskExitError+0x54>)
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014176:	d00a      	beq.n	801418e <prvTaskExitError+0x2a>
	__asm volatile
 8014178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801417c:	f383 8811 	msr	BASEPRI, r3
 8014180:	f3bf 8f6f 	isb	sy
 8014184:	f3bf 8f4f 	dsb	sy
 8014188:	60fb      	str	r3, [r7, #12]
}
 801418a:	bf00      	nop
 801418c:	e7fe      	b.n	801418c <prvTaskExitError+0x28>
	__asm volatile
 801418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014192:	f383 8811 	msr	BASEPRI, r3
 8014196:	f3bf 8f6f 	isb	sy
 801419a:	f3bf 8f4f 	dsb	sy
 801419e:	60bb      	str	r3, [r7, #8]
}
 80141a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80141a2:	bf00      	nop
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d0fc      	beq.n	80141a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80141aa:	bf00      	nop
 80141ac:	bf00      	nop
 80141ae:	3714      	adds	r7, #20
 80141b0:	46bd      	mov	sp, r7
 80141b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b6:	4770      	bx	lr
 80141b8:	20000078 	.word	0x20000078
 80141bc:	00000000 	.word	0x00000000

080141c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80141c0:	4b07      	ldr	r3, [pc, #28]	; (80141e0 <pxCurrentTCBConst2>)
 80141c2:	6819      	ldr	r1, [r3, #0]
 80141c4:	6808      	ldr	r0, [r1, #0]
 80141c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141ca:	f380 8809 	msr	PSP, r0
 80141ce:	f3bf 8f6f 	isb	sy
 80141d2:	f04f 0000 	mov.w	r0, #0
 80141d6:	f380 8811 	msr	BASEPRI, r0
 80141da:	4770      	bx	lr
 80141dc:	f3af 8000 	nop.w

080141e0 <pxCurrentTCBConst2>:
 80141e0:	2000049c 	.word	0x2000049c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80141e4:	bf00      	nop
 80141e6:	bf00      	nop

080141e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80141e8:	4808      	ldr	r0, [pc, #32]	; (801420c <prvPortStartFirstTask+0x24>)
 80141ea:	6800      	ldr	r0, [r0, #0]
 80141ec:	6800      	ldr	r0, [r0, #0]
 80141ee:	f380 8808 	msr	MSP, r0
 80141f2:	f04f 0000 	mov.w	r0, #0
 80141f6:	f380 8814 	msr	CONTROL, r0
 80141fa:	b662      	cpsie	i
 80141fc:	b661      	cpsie	f
 80141fe:	f3bf 8f4f 	dsb	sy
 8014202:	f3bf 8f6f 	isb	sy
 8014206:	df00      	svc	0
 8014208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801420a:	bf00      	nop
 801420c:	e000ed08 	.word	0xe000ed08

08014210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b086      	sub	sp, #24
 8014214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014216:	4b46      	ldr	r3, [pc, #280]	; (8014330 <xPortStartScheduler+0x120>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	4a46      	ldr	r2, [pc, #280]	; (8014334 <xPortStartScheduler+0x124>)
 801421c:	4293      	cmp	r3, r2
 801421e:	d10a      	bne.n	8014236 <xPortStartScheduler+0x26>
	__asm volatile
 8014220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014224:	f383 8811 	msr	BASEPRI, r3
 8014228:	f3bf 8f6f 	isb	sy
 801422c:	f3bf 8f4f 	dsb	sy
 8014230:	613b      	str	r3, [r7, #16]
}
 8014232:	bf00      	nop
 8014234:	e7fe      	b.n	8014234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014236:	4b3e      	ldr	r3, [pc, #248]	; (8014330 <xPortStartScheduler+0x120>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	4a3f      	ldr	r2, [pc, #252]	; (8014338 <xPortStartScheduler+0x128>)
 801423c:	4293      	cmp	r3, r2
 801423e:	d10a      	bne.n	8014256 <xPortStartScheduler+0x46>
	__asm volatile
 8014240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014244:	f383 8811 	msr	BASEPRI, r3
 8014248:	f3bf 8f6f 	isb	sy
 801424c:	f3bf 8f4f 	dsb	sy
 8014250:	60fb      	str	r3, [r7, #12]
}
 8014252:	bf00      	nop
 8014254:	e7fe      	b.n	8014254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014256:	4b39      	ldr	r3, [pc, #228]	; (801433c <xPortStartScheduler+0x12c>)
 8014258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801425a:	697b      	ldr	r3, [r7, #20]
 801425c:	781b      	ldrb	r3, [r3, #0]
 801425e:	b2db      	uxtb	r3, r3
 8014260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014262:	697b      	ldr	r3, [r7, #20]
 8014264:	22ff      	movs	r2, #255	; 0xff
 8014266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	b2db      	uxtb	r3, r3
 801426e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014270:	78fb      	ldrb	r3, [r7, #3]
 8014272:	b2db      	uxtb	r3, r3
 8014274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014278:	b2da      	uxtb	r2, r3
 801427a:	4b31      	ldr	r3, [pc, #196]	; (8014340 <xPortStartScheduler+0x130>)
 801427c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801427e:	4b31      	ldr	r3, [pc, #196]	; (8014344 <xPortStartScheduler+0x134>)
 8014280:	2207      	movs	r2, #7
 8014282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014284:	e009      	b.n	801429a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014286:	4b2f      	ldr	r3, [pc, #188]	; (8014344 <xPortStartScheduler+0x134>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	3b01      	subs	r3, #1
 801428c:	4a2d      	ldr	r2, [pc, #180]	; (8014344 <xPortStartScheduler+0x134>)
 801428e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014290:	78fb      	ldrb	r3, [r7, #3]
 8014292:	b2db      	uxtb	r3, r3
 8014294:	005b      	lsls	r3, r3, #1
 8014296:	b2db      	uxtb	r3, r3
 8014298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801429a:	78fb      	ldrb	r3, [r7, #3]
 801429c:	b2db      	uxtb	r3, r3
 801429e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80142a2:	2b80      	cmp	r3, #128	; 0x80
 80142a4:	d0ef      	beq.n	8014286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80142a6:	4b27      	ldr	r3, [pc, #156]	; (8014344 <xPortStartScheduler+0x134>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	f1c3 0307 	rsb	r3, r3, #7
 80142ae:	2b04      	cmp	r3, #4
 80142b0:	d00a      	beq.n	80142c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80142b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142b6:	f383 8811 	msr	BASEPRI, r3
 80142ba:	f3bf 8f6f 	isb	sy
 80142be:	f3bf 8f4f 	dsb	sy
 80142c2:	60bb      	str	r3, [r7, #8]
}
 80142c4:	bf00      	nop
 80142c6:	e7fe      	b.n	80142c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80142c8:	4b1e      	ldr	r3, [pc, #120]	; (8014344 <xPortStartScheduler+0x134>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	021b      	lsls	r3, r3, #8
 80142ce:	4a1d      	ldr	r2, [pc, #116]	; (8014344 <xPortStartScheduler+0x134>)
 80142d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80142d2:	4b1c      	ldr	r3, [pc, #112]	; (8014344 <xPortStartScheduler+0x134>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80142da:	4a1a      	ldr	r2, [pc, #104]	; (8014344 <xPortStartScheduler+0x134>)
 80142dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	b2da      	uxtb	r2, r3
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80142e6:	4b18      	ldr	r3, [pc, #96]	; (8014348 <xPortStartScheduler+0x138>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	4a17      	ldr	r2, [pc, #92]	; (8014348 <xPortStartScheduler+0x138>)
 80142ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80142f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80142f2:	4b15      	ldr	r3, [pc, #84]	; (8014348 <xPortStartScheduler+0x138>)
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	4a14      	ldr	r2, [pc, #80]	; (8014348 <xPortStartScheduler+0x138>)
 80142f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80142fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80142fe:	f000 f8dd 	bl	80144bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014302:	4b12      	ldr	r3, [pc, #72]	; (801434c <xPortStartScheduler+0x13c>)
 8014304:	2200      	movs	r2, #0
 8014306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014308:	f000 f8fc 	bl	8014504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801430c:	4b10      	ldr	r3, [pc, #64]	; (8014350 <xPortStartScheduler+0x140>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	4a0f      	ldr	r2, [pc, #60]	; (8014350 <xPortStartScheduler+0x140>)
 8014312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014318:	f7ff ff66 	bl	80141e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801431c:	f7ff fa6c 	bl	80137f8 <vTaskSwitchContext>
	prvTaskExitError();
 8014320:	f7ff ff20 	bl	8014164 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014324:	2300      	movs	r3, #0
}
 8014326:	4618      	mov	r0, r3
 8014328:	3718      	adds	r7, #24
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}
 801432e:	bf00      	nop
 8014330:	e000ed00 	.word	0xe000ed00
 8014334:	410fc271 	.word	0x410fc271
 8014338:	410fc270 	.word	0x410fc270
 801433c:	e000e400 	.word	0xe000e400
 8014340:	200005c8 	.word	0x200005c8
 8014344:	200005cc 	.word	0x200005cc
 8014348:	e000ed20 	.word	0xe000ed20
 801434c:	20000078 	.word	0x20000078
 8014350:	e000ef34 	.word	0xe000ef34

08014354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014354:	b480      	push	{r7}
 8014356:	b083      	sub	sp, #12
 8014358:	af00      	add	r7, sp, #0
	__asm volatile
 801435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801435e:	f383 8811 	msr	BASEPRI, r3
 8014362:	f3bf 8f6f 	isb	sy
 8014366:	f3bf 8f4f 	dsb	sy
 801436a:	607b      	str	r3, [r7, #4]
}
 801436c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801436e:	4b0f      	ldr	r3, [pc, #60]	; (80143ac <vPortEnterCritical+0x58>)
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	3301      	adds	r3, #1
 8014374:	4a0d      	ldr	r2, [pc, #52]	; (80143ac <vPortEnterCritical+0x58>)
 8014376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014378:	4b0c      	ldr	r3, [pc, #48]	; (80143ac <vPortEnterCritical+0x58>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	2b01      	cmp	r3, #1
 801437e:	d10f      	bne.n	80143a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014380:	4b0b      	ldr	r3, [pc, #44]	; (80143b0 <vPortEnterCritical+0x5c>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	b2db      	uxtb	r3, r3
 8014386:	2b00      	cmp	r3, #0
 8014388:	d00a      	beq.n	80143a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801438e:	f383 8811 	msr	BASEPRI, r3
 8014392:	f3bf 8f6f 	isb	sy
 8014396:	f3bf 8f4f 	dsb	sy
 801439a:	603b      	str	r3, [r7, #0]
}
 801439c:	bf00      	nop
 801439e:	e7fe      	b.n	801439e <vPortEnterCritical+0x4a>
	}
}
 80143a0:	bf00      	nop
 80143a2:	370c      	adds	r7, #12
 80143a4:	46bd      	mov	sp, r7
 80143a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143aa:	4770      	bx	lr
 80143ac:	20000078 	.word	0x20000078
 80143b0:	e000ed04 	.word	0xe000ed04

080143b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80143b4:	b480      	push	{r7}
 80143b6:	b083      	sub	sp, #12
 80143b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80143ba:	4b12      	ldr	r3, [pc, #72]	; (8014404 <vPortExitCritical+0x50>)
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d10a      	bne.n	80143d8 <vPortExitCritical+0x24>
	__asm volatile
 80143c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c6:	f383 8811 	msr	BASEPRI, r3
 80143ca:	f3bf 8f6f 	isb	sy
 80143ce:	f3bf 8f4f 	dsb	sy
 80143d2:	607b      	str	r3, [r7, #4]
}
 80143d4:	bf00      	nop
 80143d6:	e7fe      	b.n	80143d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80143d8:	4b0a      	ldr	r3, [pc, #40]	; (8014404 <vPortExitCritical+0x50>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	3b01      	subs	r3, #1
 80143de:	4a09      	ldr	r2, [pc, #36]	; (8014404 <vPortExitCritical+0x50>)
 80143e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80143e2:	4b08      	ldr	r3, [pc, #32]	; (8014404 <vPortExitCritical+0x50>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d105      	bne.n	80143f6 <vPortExitCritical+0x42>
 80143ea:	2300      	movs	r3, #0
 80143ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	f383 8811 	msr	BASEPRI, r3
}
 80143f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80143f6:	bf00      	nop
 80143f8:	370c      	adds	r7, #12
 80143fa:	46bd      	mov	sp, r7
 80143fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014400:	4770      	bx	lr
 8014402:	bf00      	nop
 8014404:	20000078 	.word	0x20000078
	...

08014410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014410:	f3ef 8009 	mrs	r0, PSP
 8014414:	f3bf 8f6f 	isb	sy
 8014418:	4b15      	ldr	r3, [pc, #84]	; (8014470 <pxCurrentTCBConst>)
 801441a:	681a      	ldr	r2, [r3, #0]
 801441c:	f01e 0f10 	tst.w	lr, #16
 8014420:	bf08      	it	eq
 8014422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801442a:	6010      	str	r0, [r2, #0]
 801442c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014434:	f380 8811 	msr	BASEPRI, r0
 8014438:	f3bf 8f4f 	dsb	sy
 801443c:	f3bf 8f6f 	isb	sy
 8014440:	f7ff f9da 	bl	80137f8 <vTaskSwitchContext>
 8014444:	f04f 0000 	mov.w	r0, #0
 8014448:	f380 8811 	msr	BASEPRI, r0
 801444c:	bc09      	pop	{r0, r3}
 801444e:	6819      	ldr	r1, [r3, #0]
 8014450:	6808      	ldr	r0, [r1, #0]
 8014452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014456:	f01e 0f10 	tst.w	lr, #16
 801445a:	bf08      	it	eq
 801445c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014460:	f380 8809 	msr	PSP, r0
 8014464:	f3bf 8f6f 	isb	sy
 8014468:	4770      	bx	lr
 801446a:	bf00      	nop
 801446c:	f3af 8000 	nop.w

08014470 <pxCurrentTCBConst>:
 8014470:	2000049c 	.word	0x2000049c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014474:	bf00      	nop
 8014476:	bf00      	nop

08014478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b082      	sub	sp, #8
 801447c:	af00      	add	r7, sp, #0
	__asm volatile
 801447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014482:	f383 8811 	msr	BASEPRI, r3
 8014486:	f3bf 8f6f 	isb	sy
 801448a:	f3bf 8f4f 	dsb	sy
 801448e:	607b      	str	r3, [r7, #4]
}
 8014490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014492:	f7ff f8f9 	bl	8013688 <xTaskIncrementTick>
 8014496:	4603      	mov	r3, r0
 8014498:	2b00      	cmp	r3, #0
 801449a:	d003      	beq.n	80144a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801449c:	4b06      	ldr	r3, [pc, #24]	; (80144b8 <SysTick_Handler+0x40>)
 801449e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144a2:	601a      	str	r2, [r3, #0]
 80144a4:	2300      	movs	r3, #0
 80144a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80144a8:	683b      	ldr	r3, [r7, #0]
 80144aa:	f383 8811 	msr	BASEPRI, r3
}
 80144ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80144b0:	bf00      	nop
 80144b2:	3708      	adds	r7, #8
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}
 80144b8:	e000ed04 	.word	0xe000ed04

080144bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80144bc:	b480      	push	{r7}
 80144be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80144c0:	4b0b      	ldr	r3, [pc, #44]	; (80144f0 <vPortSetupTimerInterrupt+0x34>)
 80144c2:	2200      	movs	r2, #0
 80144c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80144c6:	4b0b      	ldr	r3, [pc, #44]	; (80144f4 <vPortSetupTimerInterrupt+0x38>)
 80144c8:	2200      	movs	r2, #0
 80144ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80144cc:	4b0a      	ldr	r3, [pc, #40]	; (80144f8 <vPortSetupTimerInterrupt+0x3c>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	4a0a      	ldr	r2, [pc, #40]	; (80144fc <vPortSetupTimerInterrupt+0x40>)
 80144d2:	fba2 2303 	umull	r2, r3, r2, r3
 80144d6:	099b      	lsrs	r3, r3, #6
 80144d8:	4a09      	ldr	r2, [pc, #36]	; (8014500 <vPortSetupTimerInterrupt+0x44>)
 80144da:	3b01      	subs	r3, #1
 80144dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80144de:	4b04      	ldr	r3, [pc, #16]	; (80144f0 <vPortSetupTimerInterrupt+0x34>)
 80144e0:	2207      	movs	r2, #7
 80144e2:	601a      	str	r2, [r3, #0]
}
 80144e4:	bf00      	nop
 80144e6:	46bd      	mov	sp, r7
 80144e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ec:	4770      	bx	lr
 80144ee:	bf00      	nop
 80144f0:	e000e010 	.word	0xe000e010
 80144f4:	e000e018 	.word	0xe000e018
 80144f8:	20000018 	.word	0x20000018
 80144fc:	10624dd3 	.word	0x10624dd3
 8014500:	e000e014 	.word	0xe000e014

08014504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014514 <vPortEnableVFP+0x10>
 8014508:	6801      	ldr	r1, [r0, #0]
 801450a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801450e:	6001      	str	r1, [r0, #0]
 8014510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014512:	bf00      	nop
 8014514:	e000ed88 	.word	0xe000ed88

08014518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014518:	b480      	push	{r7}
 801451a:	b085      	sub	sp, #20
 801451c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801451e:	f3ef 8305 	mrs	r3, IPSR
 8014522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	2b0f      	cmp	r3, #15
 8014528:	d914      	bls.n	8014554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801452a:	4a17      	ldr	r2, [pc, #92]	; (8014588 <vPortValidateInterruptPriority+0x70>)
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	4413      	add	r3, r2
 8014530:	781b      	ldrb	r3, [r3, #0]
 8014532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014534:	4b15      	ldr	r3, [pc, #84]	; (801458c <vPortValidateInterruptPriority+0x74>)
 8014536:	781b      	ldrb	r3, [r3, #0]
 8014538:	7afa      	ldrb	r2, [r7, #11]
 801453a:	429a      	cmp	r2, r3
 801453c:	d20a      	bcs.n	8014554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014542:	f383 8811 	msr	BASEPRI, r3
 8014546:	f3bf 8f6f 	isb	sy
 801454a:	f3bf 8f4f 	dsb	sy
 801454e:	607b      	str	r3, [r7, #4]
}
 8014550:	bf00      	nop
 8014552:	e7fe      	b.n	8014552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014554:	4b0e      	ldr	r3, [pc, #56]	; (8014590 <vPortValidateInterruptPriority+0x78>)
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801455c:	4b0d      	ldr	r3, [pc, #52]	; (8014594 <vPortValidateInterruptPriority+0x7c>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	429a      	cmp	r2, r3
 8014562:	d90a      	bls.n	801457a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014568:	f383 8811 	msr	BASEPRI, r3
 801456c:	f3bf 8f6f 	isb	sy
 8014570:	f3bf 8f4f 	dsb	sy
 8014574:	603b      	str	r3, [r7, #0]
}
 8014576:	bf00      	nop
 8014578:	e7fe      	b.n	8014578 <vPortValidateInterruptPriority+0x60>
	}
 801457a:	bf00      	nop
 801457c:	3714      	adds	r7, #20
 801457e:	46bd      	mov	sp, r7
 8014580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014584:	4770      	bx	lr
 8014586:	bf00      	nop
 8014588:	e000e3f0 	.word	0xe000e3f0
 801458c:	200005c8 	.word	0x200005c8
 8014590:	e000ed0c 	.word	0xe000ed0c
 8014594:	200005cc 	.word	0x200005cc

08014598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b08a      	sub	sp, #40	; 0x28
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80145a0:	2300      	movs	r3, #0
 80145a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80145a4:	f7fe ffa4 	bl	80134f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80145a8:	4b5b      	ldr	r3, [pc, #364]	; (8014718 <pvPortMalloc+0x180>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d101      	bne.n	80145b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80145b0:	f000 f920 	bl	80147f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80145b4:	4b59      	ldr	r3, [pc, #356]	; (801471c <pvPortMalloc+0x184>)
 80145b6:	681a      	ldr	r2, [r3, #0]
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	4013      	ands	r3, r2
 80145bc:	2b00      	cmp	r3, #0
 80145be:	f040 8093 	bne.w	80146e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d01d      	beq.n	8014604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80145c8:	2208      	movs	r2, #8
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	4413      	add	r3, r2
 80145ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	f003 0307 	and.w	r3, r3, #7
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d014      	beq.n	8014604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f023 0307 	bic.w	r3, r3, #7
 80145e0:	3308      	adds	r3, #8
 80145e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	f003 0307 	and.w	r3, r3, #7
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d00a      	beq.n	8014604 <pvPortMalloc+0x6c>
	__asm volatile
 80145ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145f2:	f383 8811 	msr	BASEPRI, r3
 80145f6:	f3bf 8f6f 	isb	sy
 80145fa:	f3bf 8f4f 	dsb	sy
 80145fe:	617b      	str	r3, [r7, #20]
}
 8014600:	bf00      	nop
 8014602:	e7fe      	b.n	8014602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d06e      	beq.n	80146e8 <pvPortMalloc+0x150>
 801460a:	4b45      	ldr	r3, [pc, #276]	; (8014720 <pvPortMalloc+0x188>)
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	687a      	ldr	r2, [r7, #4]
 8014610:	429a      	cmp	r2, r3
 8014612:	d869      	bhi.n	80146e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014614:	4b43      	ldr	r3, [pc, #268]	; (8014724 <pvPortMalloc+0x18c>)
 8014616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014618:	4b42      	ldr	r3, [pc, #264]	; (8014724 <pvPortMalloc+0x18c>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801461e:	e004      	b.n	801462a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801462c:	685b      	ldr	r3, [r3, #4]
 801462e:	687a      	ldr	r2, [r7, #4]
 8014630:	429a      	cmp	r2, r3
 8014632:	d903      	bls.n	801463c <pvPortMalloc+0xa4>
 8014634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d1f1      	bne.n	8014620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801463c:	4b36      	ldr	r3, [pc, #216]	; (8014718 <pvPortMalloc+0x180>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014642:	429a      	cmp	r2, r3
 8014644:	d050      	beq.n	80146e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014646:	6a3b      	ldr	r3, [r7, #32]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	2208      	movs	r2, #8
 801464c:	4413      	add	r3, r2
 801464e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014652:	681a      	ldr	r2, [r3, #0]
 8014654:	6a3b      	ldr	r3, [r7, #32]
 8014656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801465a:	685a      	ldr	r2, [r3, #4]
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	1ad2      	subs	r2, r2, r3
 8014660:	2308      	movs	r3, #8
 8014662:	005b      	lsls	r3, r3, #1
 8014664:	429a      	cmp	r2, r3
 8014666:	d91f      	bls.n	80146a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	4413      	add	r3, r2
 801466e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014670:	69bb      	ldr	r3, [r7, #24]
 8014672:	f003 0307 	and.w	r3, r3, #7
 8014676:	2b00      	cmp	r3, #0
 8014678:	d00a      	beq.n	8014690 <pvPortMalloc+0xf8>
	__asm volatile
 801467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801467e:	f383 8811 	msr	BASEPRI, r3
 8014682:	f3bf 8f6f 	isb	sy
 8014686:	f3bf 8f4f 	dsb	sy
 801468a:	613b      	str	r3, [r7, #16]
}
 801468c:	bf00      	nop
 801468e:	e7fe      	b.n	801468e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014692:	685a      	ldr	r2, [r3, #4]
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	1ad2      	subs	r2, r2, r3
 8014698:	69bb      	ldr	r3, [r7, #24]
 801469a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801469e:	687a      	ldr	r2, [r7, #4]
 80146a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80146a2:	69b8      	ldr	r0, [r7, #24]
 80146a4:	f000 f908 	bl	80148b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80146a8:	4b1d      	ldr	r3, [pc, #116]	; (8014720 <pvPortMalloc+0x188>)
 80146aa:	681a      	ldr	r2, [r3, #0]
 80146ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ae:	685b      	ldr	r3, [r3, #4]
 80146b0:	1ad3      	subs	r3, r2, r3
 80146b2:	4a1b      	ldr	r2, [pc, #108]	; (8014720 <pvPortMalloc+0x188>)
 80146b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80146b6:	4b1a      	ldr	r3, [pc, #104]	; (8014720 <pvPortMalloc+0x188>)
 80146b8:	681a      	ldr	r2, [r3, #0]
 80146ba:	4b1b      	ldr	r3, [pc, #108]	; (8014728 <pvPortMalloc+0x190>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	429a      	cmp	r2, r3
 80146c0:	d203      	bcs.n	80146ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80146c2:	4b17      	ldr	r3, [pc, #92]	; (8014720 <pvPortMalloc+0x188>)
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	4a18      	ldr	r2, [pc, #96]	; (8014728 <pvPortMalloc+0x190>)
 80146c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80146ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146cc:	685a      	ldr	r2, [r3, #4]
 80146ce:	4b13      	ldr	r3, [pc, #76]	; (801471c <pvPortMalloc+0x184>)
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	431a      	orrs	r2, r3
 80146d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80146d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146da:	2200      	movs	r2, #0
 80146dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80146de:	4b13      	ldr	r3, [pc, #76]	; (801472c <pvPortMalloc+0x194>)
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	3301      	adds	r3, #1
 80146e4:	4a11      	ldr	r2, [pc, #68]	; (801472c <pvPortMalloc+0x194>)
 80146e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80146e8:	f7fe ff10 	bl	801350c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80146ec:	69fb      	ldr	r3, [r7, #28]
 80146ee:	f003 0307 	and.w	r3, r3, #7
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d00a      	beq.n	801470c <pvPortMalloc+0x174>
	__asm volatile
 80146f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146fa:	f383 8811 	msr	BASEPRI, r3
 80146fe:	f3bf 8f6f 	isb	sy
 8014702:	f3bf 8f4f 	dsb	sy
 8014706:	60fb      	str	r3, [r7, #12]
}
 8014708:	bf00      	nop
 801470a:	e7fe      	b.n	801470a <pvPortMalloc+0x172>
	return pvReturn;
 801470c:	69fb      	ldr	r3, [r7, #28]
}
 801470e:	4618      	mov	r0, r3
 8014710:	3728      	adds	r7, #40	; 0x28
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	200041d8 	.word	0x200041d8
 801471c:	200041ec 	.word	0x200041ec
 8014720:	200041dc 	.word	0x200041dc
 8014724:	200041d0 	.word	0x200041d0
 8014728:	200041e0 	.word	0x200041e0
 801472c:	200041e4 	.word	0x200041e4

08014730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b086      	sub	sp, #24
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d04d      	beq.n	80147de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014742:	2308      	movs	r3, #8
 8014744:	425b      	negs	r3, r3
 8014746:	697a      	ldr	r2, [r7, #20]
 8014748:	4413      	add	r3, r2
 801474a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801474c:	697b      	ldr	r3, [r7, #20]
 801474e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	685a      	ldr	r2, [r3, #4]
 8014754:	4b24      	ldr	r3, [pc, #144]	; (80147e8 <vPortFree+0xb8>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	4013      	ands	r3, r2
 801475a:	2b00      	cmp	r3, #0
 801475c:	d10a      	bne.n	8014774 <vPortFree+0x44>
	__asm volatile
 801475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014762:	f383 8811 	msr	BASEPRI, r3
 8014766:	f3bf 8f6f 	isb	sy
 801476a:	f3bf 8f4f 	dsb	sy
 801476e:	60fb      	str	r3, [r7, #12]
}
 8014770:	bf00      	nop
 8014772:	e7fe      	b.n	8014772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014774:	693b      	ldr	r3, [r7, #16]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d00a      	beq.n	8014792 <vPortFree+0x62>
	__asm volatile
 801477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014780:	f383 8811 	msr	BASEPRI, r3
 8014784:	f3bf 8f6f 	isb	sy
 8014788:	f3bf 8f4f 	dsb	sy
 801478c:	60bb      	str	r3, [r7, #8]
}
 801478e:	bf00      	nop
 8014790:	e7fe      	b.n	8014790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	685a      	ldr	r2, [r3, #4]
 8014796:	4b14      	ldr	r3, [pc, #80]	; (80147e8 <vPortFree+0xb8>)
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	4013      	ands	r3, r2
 801479c:	2b00      	cmp	r3, #0
 801479e:	d01e      	beq.n	80147de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d11a      	bne.n	80147de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80147a8:	693b      	ldr	r3, [r7, #16]
 80147aa:	685a      	ldr	r2, [r3, #4]
 80147ac:	4b0e      	ldr	r3, [pc, #56]	; (80147e8 <vPortFree+0xb8>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	43db      	mvns	r3, r3
 80147b2:	401a      	ands	r2, r3
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80147b8:	f7fe fe9a 	bl	80134f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	685a      	ldr	r2, [r3, #4]
 80147c0:	4b0a      	ldr	r3, [pc, #40]	; (80147ec <vPortFree+0xbc>)
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	4413      	add	r3, r2
 80147c6:	4a09      	ldr	r2, [pc, #36]	; (80147ec <vPortFree+0xbc>)
 80147c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80147ca:	6938      	ldr	r0, [r7, #16]
 80147cc:	f000 f874 	bl	80148b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80147d0:	4b07      	ldr	r3, [pc, #28]	; (80147f0 <vPortFree+0xc0>)
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	3301      	adds	r3, #1
 80147d6:	4a06      	ldr	r2, [pc, #24]	; (80147f0 <vPortFree+0xc0>)
 80147d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80147da:	f7fe fe97 	bl	801350c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80147de:	bf00      	nop
 80147e0:	3718      	adds	r7, #24
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}
 80147e6:	bf00      	nop
 80147e8:	200041ec 	.word	0x200041ec
 80147ec:	200041dc 	.word	0x200041dc
 80147f0:	200041e8 	.word	0x200041e8

080147f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80147f4:	b480      	push	{r7}
 80147f6:	b085      	sub	sp, #20
 80147f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80147fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80147fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014800:	4b27      	ldr	r3, [pc, #156]	; (80148a0 <prvHeapInit+0xac>)
 8014802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	f003 0307 	and.w	r3, r3, #7
 801480a:	2b00      	cmp	r3, #0
 801480c:	d00c      	beq.n	8014828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	3307      	adds	r3, #7
 8014812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	f023 0307 	bic.w	r3, r3, #7
 801481a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801481c:	68ba      	ldr	r2, [r7, #8]
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	1ad3      	subs	r3, r2, r3
 8014822:	4a1f      	ldr	r2, [pc, #124]	; (80148a0 <prvHeapInit+0xac>)
 8014824:	4413      	add	r3, r2
 8014826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801482c:	4a1d      	ldr	r2, [pc, #116]	; (80148a4 <prvHeapInit+0xb0>)
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014832:	4b1c      	ldr	r3, [pc, #112]	; (80148a4 <prvHeapInit+0xb0>)
 8014834:	2200      	movs	r2, #0
 8014836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	68ba      	ldr	r2, [r7, #8]
 801483c:	4413      	add	r3, r2
 801483e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014840:	2208      	movs	r2, #8
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	1a9b      	subs	r3, r3, r2
 8014846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	f023 0307 	bic.w	r3, r3, #7
 801484e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	4a15      	ldr	r2, [pc, #84]	; (80148a8 <prvHeapInit+0xb4>)
 8014854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014856:	4b14      	ldr	r3, [pc, #80]	; (80148a8 <prvHeapInit+0xb4>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	2200      	movs	r2, #0
 801485c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801485e:	4b12      	ldr	r3, [pc, #72]	; (80148a8 <prvHeapInit+0xb4>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	2200      	movs	r2, #0
 8014864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	68fa      	ldr	r2, [r7, #12]
 801486e:	1ad2      	subs	r2, r2, r3
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014874:	4b0c      	ldr	r3, [pc, #48]	; (80148a8 <prvHeapInit+0xb4>)
 8014876:	681a      	ldr	r2, [r3, #0]
 8014878:	683b      	ldr	r3, [r7, #0]
 801487a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801487c:	683b      	ldr	r3, [r7, #0]
 801487e:	685b      	ldr	r3, [r3, #4]
 8014880:	4a0a      	ldr	r2, [pc, #40]	; (80148ac <prvHeapInit+0xb8>)
 8014882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	685b      	ldr	r3, [r3, #4]
 8014888:	4a09      	ldr	r2, [pc, #36]	; (80148b0 <prvHeapInit+0xbc>)
 801488a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801488c:	4b09      	ldr	r3, [pc, #36]	; (80148b4 <prvHeapInit+0xc0>)
 801488e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014892:	601a      	str	r2, [r3, #0]
}
 8014894:	bf00      	nop
 8014896:	3714      	adds	r7, #20
 8014898:	46bd      	mov	sp, r7
 801489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489e:	4770      	bx	lr
 80148a0:	200005d0 	.word	0x200005d0
 80148a4:	200041d0 	.word	0x200041d0
 80148a8:	200041d8 	.word	0x200041d8
 80148ac:	200041e0 	.word	0x200041e0
 80148b0:	200041dc 	.word	0x200041dc
 80148b4:	200041ec 	.word	0x200041ec

080148b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80148b8:	b480      	push	{r7}
 80148ba:	b085      	sub	sp, #20
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80148c0:	4b28      	ldr	r3, [pc, #160]	; (8014964 <prvInsertBlockIntoFreeList+0xac>)
 80148c2:	60fb      	str	r3, [r7, #12]
 80148c4:	e002      	b.n	80148cc <prvInsertBlockIntoFreeList+0x14>
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	60fb      	str	r3, [r7, #12]
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	687a      	ldr	r2, [r7, #4]
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d8f7      	bhi.n	80148c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	685b      	ldr	r3, [r3, #4]
 80148de:	68ba      	ldr	r2, [r7, #8]
 80148e0:	4413      	add	r3, r2
 80148e2:	687a      	ldr	r2, [r7, #4]
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d108      	bne.n	80148fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	685a      	ldr	r2, [r3, #4]
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	685b      	ldr	r3, [r3, #4]
 80148f0:	441a      	add	r2, r3
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	68ba      	ldr	r2, [r7, #8]
 8014904:	441a      	add	r2, r3
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	429a      	cmp	r2, r3
 801490c:	d118      	bne.n	8014940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	681a      	ldr	r2, [r3, #0]
 8014912:	4b15      	ldr	r3, [pc, #84]	; (8014968 <prvInsertBlockIntoFreeList+0xb0>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	429a      	cmp	r2, r3
 8014918:	d00d      	beq.n	8014936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	685a      	ldr	r2, [r3, #4]
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	685b      	ldr	r3, [r3, #4]
 8014924:	441a      	add	r2, r3
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	681a      	ldr	r2, [r3, #0]
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	601a      	str	r2, [r3, #0]
 8014934:	e008      	b.n	8014948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014936:	4b0c      	ldr	r3, [pc, #48]	; (8014968 <prvInsertBlockIntoFreeList+0xb0>)
 8014938:	681a      	ldr	r2, [r3, #0]
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	601a      	str	r2, [r3, #0]
 801493e:	e003      	b.n	8014948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	681a      	ldr	r2, [r3, #0]
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014948:	68fa      	ldr	r2, [r7, #12]
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	429a      	cmp	r2, r3
 801494e:	d002      	beq.n	8014956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	687a      	ldr	r2, [r7, #4]
 8014954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014956:	bf00      	nop
 8014958:	3714      	adds	r7, #20
 801495a:	46bd      	mov	sp, r7
 801495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014960:	4770      	bx	lr
 8014962:	bf00      	nop
 8014964:	200041d0 	.word	0x200041d0
 8014968:	200041d8 	.word	0x200041d8

0801496c <calloc>:
 801496c:	4b02      	ldr	r3, [pc, #8]	; (8014978 <calloc+0xc>)
 801496e:	460a      	mov	r2, r1
 8014970:	4601      	mov	r1, r0
 8014972:	6818      	ldr	r0, [r3, #0]
 8014974:	f000 b844 	b.w	8014a00 <_calloc_r>
 8014978:	2000007c 	.word	0x2000007c

0801497c <__errno>:
 801497c:	4b01      	ldr	r3, [pc, #4]	; (8014984 <__errno+0x8>)
 801497e:	6818      	ldr	r0, [r3, #0]
 8014980:	4770      	bx	lr
 8014982:	bf00      	nop
 8014984:	2000007c 	.word	0x2000007c

08014988 <__libc_init_array>:
 8014988:	b570      	push	{r4, r5, r6, lr}
 801498a:	4d0d      	ldr	r5, [pc, #52]	; (80149c0 <__libc_init_array+0x38>)
 801498c:	4c0d      	ldr	r4, [pc, #52]	; (80149c4 <__libc_init_array+0x3c>)
 801498e:	1b64      	subs	r4, r4, r5
 8014990:	10a4      	asrs	r4, r4, #2
 8014992:	2600      	movs	r6, #0
 8014994:	42a6      	cmp	r6, r4
 8014996:	d109      	bne.n	80149ac <__libc_init_array+0x24>
 8014998:	4d0b      	ldr	r5, [pc, #44]	; (80149c8 <__libc_init_array+0x40>)
 801499a:	4c0c      	ldr	r4, [pc, #48]	; (80149cc <__libc_init_array+0x44>)
 801499c:	f000 fec2 	bl	8015724 <_init>
 80149a0:	1b64      	subs	r4, r4, r5
 80149a2:	10a4      	asrs	r4, r4, #2
 80149a4:	2600      	movs	r6, #0
 80149a6:	42a6      	cmp	r6, r4
 80149a8:	d105      	bne.n	80149b6 <__libc_init_array+0x2e>
 80149aa:	bd70      	pop	{r4, r5, r6, pc}
 80149ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80149b0:	4798      	blx	r3
 80149b2:	3601      	adds	r6, #1
 80149b4:	e7ee      	b.n	8014994 <__libc_init_array+0xc>
 80149b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80149ba:	4798      	blx	r3
 80149bc:	3601      	adds	r6, #1
 80149be:	e7f2      	b.n	80149a6 <__libc_init_array+0x1e>
 80149c0:	08015e18 	.word	0x08015e18
 80149c4:	08015e18 	.word	0x08015e18
 80149c8:	08015e18 	.word	0x08015e18
 80149cc:	08015e1c 	.word	0x08015e1c

080149d0 <__retarget_lock_acquire_recursive>:
 80149d0:	4770      	bx	lr

080149d2 <__retarget_lock_release_recursive>:
 80149d2:	4770      	bx	lr

080149d4 <memcpy>:
 80149d4:	440a      	add	r2, r1
 80149d6:	4291      	cmp	r1, r2
 80149d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80149dc:	d100      	bne.n	80149e0 <memcpy+0xc>
 80149de:	4770      	bx	lr
 80149e0:	b510      	push	{r4, lr}
 80149e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80149e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80149ea:	4291      	cmp	r1, r2
 80149ec:	d1f9      	bne.n	80149e2 <memcpy+0xe>
 80149ee:	bd10      	pop	{r4, pc}

080149f0 <memset>:
 80149f0:	4402      	add	r2, r0
 80149f2:	4603      	mov	r3, r0
 80149f4:	4293      	cmp	r3, r2
 80149f6:	d100      	bne.n	80149fa <memset+0xa>
 80149f8:	4770      	bx	lr
 80149fa:	f803 1b01 	strb.w	r1, [r3], #1
 80149fe:	e7f9      	b.n	80149f4 <memset+0x4>

08014a00 <_calloc_r>:
 8014a00:	b513      	push	{r0, r1, r4, lr}
 8014a02:	434a      	muls	r2, r1
 8014a04:	4611      	mov	r1, r2
 8014a06:	9201      	str	r2, [sp, #4]
 8014a08:	f000 f80a 	bl	8014a20 <_malloc_r>
 8014a0c:	4604      	mov	r4, r0
 8014a0e:	b118      	cbz	r0, 8014a18 <_calloc_r+0x18>
 8014a10:	9a01      	ldr	r2, [sp, #4]
 8014a12:	2100      	movs	r1, #0
 8014a14:	f7ff ffec 	bl	80149f0 <memset>
 8014a18:	4620      	mov	r0, r4
 8014a1a:	b002      	add	sp, #8
 8014a1c:	bd10      	pop	{r4, pc}
	...

08014a20 <_malloc_r>:
 8014a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a22:	1ccd      	adds	r5, r1, #3
 8014a24:	f025 0503 	bic.w	r5, r5, #3
 8014a28:	3508      	adds	r5, #8
 8014a2a:	2d0c      	cmp	r5, #12
 8014a2c:	bf38      	it	cc
 8014a2e:	250c      	movcc	r5, #12
 8014a30:	2d00      	cmp	r5, #0
 8014a32:	4606      	mov	r6, r0
 8014a34:	db01      	blt.n	8014a3a <_malloc_r+0x1a>
 8014a36:	42a9      	cmp	r1, r5
 8014a38:	d903      	bls.n	8014a42 <_malloc_r+0x22>
 8014a3a:	230c      	movs	r3, #12
 8014a3c:	6033      	str	r3, [r6, #0]
 8014a3e:	2000      	movs	r0, #0
 8014a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a42:	f000 f8c1 	bl	8014bc8 <__malloc_lock>
 8014a46:	4921      	ldr	r1, [pc, #132]	; (8014acc <_malloc_r+0xac>)
 8014a48:	680a      	ldr	r2, [r1, #0]
 8014a4a:	4614      	mov	r4, r2
 8014a4c:	b99c      	cbnz	r4, 8014a76 <_malloc_r+0x56>
 8014a4e:	4f20      	ldr	r7, [pc, #128]	; (8014ad0 <_malloc_r+0xb0>)
 8014a50:	683b      	ldr	r3, [r7, #0]
 8014a52:	b923      	cbnz	r3, 8014a5e <_malloc_r+0x3e>
 8014a54:	4621      	mov	r1, r4
 8014a56:	4630      	mov	r0, r6
 8014a58:	f000 f8a6 	bl	8014ba8 <_sbrk_r>
 8014a5c:	6038      	str	r0, [r7, #0]
 8014a5e:	4629      	mov	r1, r5
 8014a60:	4630      	mov	r0, r6
 8014a62:	f000 f8a1 	bl	8014ba8 <_sbrk_r>
 8014a66:	1c43      	adds	r3, r0, #1
 8014a68:	d123      	bne.n	8014ab2 <_malloc_r+0x92>
 8014a6a:	230c      	movs	r3, #12
 8014a6c:	6033      	str	r3, [r6, #0]
 8014a6e:	4630      	mov	r0, r6
 8014a70:	f000 f8b0 	bl	8014bd4 <__malloc_unlock>
 8014a74:	e7e3      	b.n	8014a3e <_malloc_r+0x1e>
 8014a76:	6823      	ldr	r3, [r4, #0]
 8014a78:	1b5b      	subs	r3, r3, r5
 8014a7a:	d417      	bmi.n	8014aac <_malloc_r+0x8c>
 8014a7c:	2b0b      	cmp	r3, #11
 8014a7e:	d903      	bls.n	8014a88 <_malloc_r+0x68>
 8014a80:	6023      	str	r3, [r4, #0]
 8014a82:	441c      	add	r4, r3
 8014a84:	6025      	str	r5, [r4, #0]
 8014a86:	e004      	b.n	8014a92 <_malloc_r+0x72>
 8014a88:	6863      	ldr	r3, [r4, #4]
 8014a8a:	42a2      	cmp	r2, r4
 8014a8c:	bf0c      	ite	eq
 8014a8e:	600b      	streq	r3, [r1, #0]
 8014a90:	6053      	strne	r3, [r2, #4]
 8014a92:	4630      	mov	r0, r6
 8014a94:	f000 f89e 	bl	8014bd4 <__malloc_unlock>
 8014a98:	f104 000b 	add.w	r0, r4, #11
 8014a9c:	1d23      	adds	r3, r4, #4
 8014a9e:	f020 0007 	bic.w	r0, r0, #7
 8014aa2:	1ac2      	subs	r2, r0, r3
 8014aa4:	d0cc      	beq.n	8014a40 <_malloc_r+0x20>
 8014aa6:	1a1b      	subs	r3, r3, r0
 8014aa8:	50a3      	str	r3, [r4, r2]
 8014aaa:	e7c9      	b.n	8014a40 <_malloc_r+0x20>
 8014aac:	4622      	mov	r2, r4
 8014aae:	6864      	ldr	r4, [r4, #4]
 8014ab0:	e7cc      	b.n	8014a4c <_malloc_r+0x2c>
 8014ab2:	1cc4      	adds	r4, r0, #3
 8014ab4:	f024 0403 	bic.w	r4, r4, #3
 8014ab8:	42a0      	cmp	r0, r4
 8014aba:	d0e3      	beq.n	8014a84 <_malloc_r+0x64>
 8014abc:	1a21      	subs	r1, r4, r0
 8014abe:	4630      	mov	r0, r6
 8014ac0:	f000 f872 	bl	8014ba8 <_sbrk_r>
 8014ac4:	3001      	adds	r0, #1
 8014ac6:	d1dd      	bne.n	8014a84 <_malloc_r+0x64>
 8014ac8:	e7cf      	b.n	8014a6a <_malloc_r+0x4a>
 8014aca:	bf00      	nop
 8014acc:	200041f0 	.word	0x200041f0
 8014ad0:	200041f4 	.word	0x200041f4

08014ad4 <cleanup_glue>:
 8014ad4:	b538      	push	{r3, r4, r5, lr}
 8014ad6:	460c      	mov	r4, r1
 8014ad8:	6809      	ldr	r1, [r1, #0]
 8014ada:	4605      	mov	r5, r0
 8014adc:	b109      	cbz	r1, 8014ae2 <cleanup_glue+0xe>
 8014ade:	f7ff fff9 	bl	8014ad4 <cleanup_glue>
 8014ae2:	4621      	mov	r1, r4
 8014ae4:	4628      	mov	r0, r5
 8014ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014aea:	f000 b879 	b.w	8014be0 <_free_r>
	...

08014af0 <_reclaim_reent>:
 8014af0:	4b2c      	ldr	r3, [pc, #176]	; (8014ba4 <_reclaim_reent+0xb4>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	4283      	cmp	r3, r0
 8014af6:	b570      	push	{r4, r5, r6, lr}
 8014af8:	4604      	mov	r4, r0
 8014afa:	d051      	beq.n	8014ba0 <_reclaim_reent+0xb0>
 8014afc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014afe:	b143      	cbz	r3, 8014b12 <_reclaim_reent+0x22>
 8014b00:	68db      	ldr	r3, [r3, #12]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d14a      	bne.n	8014b9c <_reclaim_reent+0xac>
 8014b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b08:	6819      	ldr	r1, [r3, #0]
 8014b0a:	b111      	cbz	r1, 8014b12 <_reclaim_reent+0x22>
 8014b0c:	4620      	mov	r0, r4
 8014b0e:	f000 f867 	bl	8014be0 <_free_r>
 8014b12:	6961      	ldr	r1, [r4, #20]
 8014b14:	b111      	cbz	r1, 8014b1c <_reclaim_reent+0x2c>
 8014b16:	4620      	mov	r0, r4
 8014b18:	f000 f862 	bl	8014be0 <_free_r>
 8014b1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014b1e:	b111      	cbz	r1, 8014b26 <_reclaim_reent+0x36>
 8014b20:	4620      	mov	r0, r4
 8014b22:	f000 f85d 	bl	8014be0 <_free_r>
 8014b26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014b28:	b111      	cbz	r1, 8014b30 <_reclaim_reent+0x40>
 8014b2a:	4620      	mov	r0, r4
 8014b2c:	f000 f858 	bl	8014be0 <_free_r>
 8014b30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014b32:	b111      	cbz	r1, 8014b3a <_reclaim_reent+0x4a>
 8014b34:	4620      	mov	r0, r4
 8014b36:	f000 f853 	bl	8014be0 <_free_r>
 8014b3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014b3c:	b111      	cbz	r1, 8014b44 <_reclaim_reent+0x54>
 8014b3e:	4620      	mov	r0, r4
 8014b40:	f000 f84e 	bl	8014be0 <_free_r>
 8014b44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014b46:	b111      	cbz	r1, 8014b4e <_reclaim_reent+0x5e>
 8014b48:	4620      	mov	r0, r4
 8014b4a:	f000 f849 	bl	8014be0 <_free_r>
 8014b4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014b50:	b111      	cbz	r1, 8014b58 <_reclaim_reent+0x68>
 8014b52:	4620      	mov	r0, r4
 8014b54:	f000 f844 	bl	8014be0 <_free_r>
 8014b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b5a:	b111      	cbz	r1, 8014b62 <_reclaim_reent+0x72>
 8014b5c:	4620      	mov	r0, r4
 8014b5e:	f000 f83f 	bl	8014be0 <_free_r>
 8014b62:	69a3      	ldr	r3, [r4, #24]
 8014b64:	b1e3      	cbz	r3, 8014ba0 <_reclaim_reent+0xb0>
 8014b66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014b68:	4620      	mov	r0, r4
 8014b6a:	4798      	blx	r3
 8014b6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014b6e:	b1b9      	cbz	r1, 8014ba0 <_reclaim_reent+0xb0>
 8014b70:	4620      	mov	r0, r4
 8014b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b76:	f7ff bfad 	b.w	8014ad4 <cleanup_glue>
 8014b7a:	5949      	ldr	r1, [r1, r5]
 8014b7c:	b941      	cbnz	r1, 8014b90 <_reclaim_reent+0xa0>
 8014b7e:	3504      	adds	r5, #4
 8014b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b82:	2d80      	cmp	r5, #128	; 0x80
 8014b84:	68d9      	ldr	r1, [r3, #12]
 8014b86:	d1f8      	bne.n	8014b7a <_reclaim_reent+0x8a>
 8014b88:	4620      	mov	r0, r4
 8014b8a:	f000 f829 	bl	8014be0 <_free_r>
 8014b8e:	e7ba      	b.n	8014b06 <_reclaim_reent+0x16>
 8014b90:	680e      	ldr	r6, [r1, #0]
 8014b92:	4620      	mov	r0, r4
 8014b94:	f000 f824 	bl	8014be0 <_free_r>
 8014b98:	4631      	mov	r1, r6
 8014b9a:	e7ef      	b.n	8014b7c <_reclaim_reent+0x8c>
 8014b9c:	2500      	movs	r5, #0
 8014b9e:	e7ef      	b.n	8014b80 <_reclaim_reent+0x90>
 8014ba0:	bd70      	pop	{r4, r5, r6, pc}
 8014ba2:	bf00      	nop
 8014ba4:	2000007c 	.word	0x2000007c

08014ba8 <_sbrk_r>:
 8014ba8:	b538      	push	{r3, r4, r5, lr}
 8014baa:	4d06      	ldr	r5, [pc, #24]	; (8014bc4 <_sbrk_r+0x1c>)
 8014bac:	2300      	movs	r3, #0
 8014bae:	4604      	mov	r4, r0
 8014bb0:	4608      	mov	r0, r1
 8014bb2:	602b      	str	r3, [r5, #0]
 8014bb4:	f7f0 fbc4 	bl	8005340 <_sbrk>
 8014bb8:	1c43      	adds	r3, r0, #1
 8014bba:	d102      	bne.n	8014bc2 <_sbrk_r+0x1a>
 8014bbc:	682b      	ldr	r3, [r5, #0]
 8014bbe:	b103      	cbz	r3, 8014bc2 <_sbrk_r+0x1a>
 8014bc0:	6023      	str	r3, [r4, #0]
 8014bc2:	bd38      	pop	{r3, r4, r5, pc}
 8014bc4:	200050ac 	.word	0x200050ac

08014bc8 <__malloc_lock>:
 8014bc8:	4801      	ldr	r0, [pc, #4]	; (8014bd0 <__malloc_lock+0x8>)
 8014bca:	f7ff bf01 	b.w	80149d0 <__retarget_lock_acquire_recursive>
 8014bce:	bf00      	nop
 8014bd0:	200050a4 	.word	0x200050a4

08014bd4 <__malloc_unlock>:
 8014bd4:	4801      	ldr	r0, [pc, #4]	; (8014bdc <__malloc_unlock+0x8>)
 8014bd6:	f7ff befc 	b.w	80149d2 <__retarget_lock_release_recursive>
 8014bda:	bf00      	nop
 8014bdc:	200050a4 	.word	0x200050a4

08014be0 <_free_r>:
 8014be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014be2:	2900      	cmp	r1, #0
 8014be4:	d048      	beq.n	8014c78 <_free_r+0x98>
 8014be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014bea:	9001      	str	r0, [sp, #4]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	f1a1 0404 	sub.w	r4, r1, #4
 8014bf2:	bfb8      	it	lt
 8014bf4:	18e4      	addlt	r4, r4, r3
 8014bf6:	f7ff ffe7 	bl	8014bc8 <__malloc_lock>
 8014bfa:	4a20      	ldr	r2, [pc, #128]	; (8014c7c <_free_r+0x9c>)
 8014bfc:	9801      	ldr	r0, [sp, #4]
 8014bfe:	6813      	ldr	r3, [r2, #0]
 8014c00:	4615      	mov	r5, r2
 8014c02:	b933      	cbnz	r3, 8014c12 <_free_r+0x32>
 8014c04:	6063      	str	r3, [r4, #4]
 8014c06:	6014      	str	r4, [r2, #0]
 8014c08:	b003      	add	sp, #12
 8014c0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c0e:	f7ff bfe1 	b.w	8014bd4 <__malloc_unlock>
 8014c12:	42a3      	cmp	r3, r4
 8014c14:	d90b      	bls.n	8014c2e <_free_r+0x4e>
 8014c16:	6821      	ldr	r1, [r4, #0]
 8014c18:	1862      	adds	r2, r4, r1
 8014c1a:	4293      	cmp	r3, r2
 8014c1c:	bf04      	itt	eq
 8014c1e:	681a      	ldreq	r2, [r3, #0]
 8014c20:	685b      	ldreq	r3, [r3, #4]
 8014c22:	6063      	str	r3, [r4, #4]
 8014c24:	bf04      	itt	eq
 8014c26:	1852      	addeq	r2, r2, r1
 8014c28:	6022      	streq	r2, [r4, #0]
 8014c2a:	602c      	str	r4, [r5, #0]
 8014c2c:	e7ec      	b.n	8014c08 <_free_r+0x28>
 8014c2e:	461a      	mov	r2, r3
 8014c30:	685b      	ldr	r3, [r3, #4]
 8014c32:	b10b      	cbz	r3, 8014c38 <_free_r+0x58>
 8014c34:	42a3      	cmp	r3, r4
 8014c36:	d9fa      	bls.n	8014c2e <_free_r+0x4e>
 8014c38:	6811      	ldr	r1, [r2, #0]
 8014c3a:	1855      	adds	r5, r2, r1
 8014c3c:	42a5      	cmp	r5, r4
 8014c3e:	d10b      	bne.n	8014c58 <_free_r+0x78>
 8014c40:	6824      	ldr	r4, [r4, #0]
 8014c42:	4421      	add	r1, r4
 8014c44:	1854      	adds	r4, r2, r1
 8014c46:	42a3      	cmp	r3, r4
 8014c48:	6011      	str	r1, [r2, #0]
 8014c4a:	d1dd      	bne.n	8014c08 <_free_r+0x28>
 8014c4c:	681c      	ldr	r4, [r3, #0]
 8014c4e:	685b      	ldr	r3, [r3, #4]
 8014c50:	6053      	str	r3, [r2, #4]
 8014c52:	4421      	add	r1, r4
 8014c54:	6011      	str	r1, [r2, #0]
 8014c56:	e7d7      	b.n	8014c08 <_free_r+0x28>
 8014c58:	d902      	bls.n	8014c60 <_free_r+0x80>
 8014c5a:	230c      	movs	r3, #12
 8014c5c:	6003      	str	r3, [r0, #0]
 8014c5e:	e7d3      	b.n	8014c08 <_free_r+0x28>
 8014c60:	6825      	ldr	r5, [r4, #0]
 8014c62:	1961      	adds	r1, r4, r5
 8014c64:	428b      	cmp	r3, r1
 8014c66:	bf04      	itt	eq
 8014c68:	6819      	ldreq	r1, [r3, #0]
 8014c6a:	685b      	ldreq	r3, [r3, #4]
 8014c6c:	6063      	str	r3, [r4, #4]
 8014c6e:	bf04      	itt	eq
 8014c70:	1949      	addeq	r1, r1, r5
 8014c72:	6021      	streq	r1, [r4, #0]
 8014c74:	6054      	str	r4, [r2, #4]
 8014c76:	e7c7      	b.n	8014c08 <_free_r+0x28>
 8014c78:	b003      	add	sp, #12
 8014c7a:	bd30      	pop	{r4, r5, pc}
 8014c7c:	200041f0 	.word	0x200041f0

08014c80 <sqrt>:
 8014c80:	b538      	push	{r3, r4, r5, lr}
 8014c82:	ed2d 8b02 	vpush	{d8}
 8014c86:	ec55 4b10 	vmov	r4, r5, d0
 8014c8a:	f000 f8eb 	bl	8014e64 <__ieee754_sqrt>
 8014c8e:	4b15      	ldr	r3, [pc, #84]	; (8014ce4 <sqrt+0x64>)
 8014c90:	eeb0 8a40 	vmov.f32	s16, s0
 8014c94:	eef0 8a60 	vmov.f32	s17, s1
 8014c98:	f993 3000 	ldrsb.w	r3, [r3]
 8014c9c:	3301      	adds	r3, #1
 8014c9e:	d019      	beq.n	8014cd4 <sqrt+0x54>
 8014ca0:	4622      	mov	r2, r4
 8014ca2:	462b      	mov	r3, r5
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	4629      	mov	r1, r5
 8014ca8:	f7eb fee8 	bl	8000a7c <__aeabi_dcmpun>
 8014cac:	b990      	cbnz	r0, 8014cd4 <sqrt+0x54>
 8014cae:	2200      	movs	r2, #0
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	4620      	mov	r0, r4
 8014cb4:	4629      	mov	r1, r5
 8014cb6:	f7eb feb9 	bl	8000a2c <__aeabi_dcmplt>
 8014cba:	b158      	cbz	r0, 8014cd4 <sqrt+0x54>
 8014cbc:	f7ff fe5e 	bl	801497c <__errno>
 8014cc0:	2321      	movs	r3, #33	; 0x21
 8014cc2:	6003      	str	r3, [r0, #0]
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	4610      	mov	r0, r2
 8014cca:	4619      	mov	r1, r3
 8014ccc:	f7eb fd66 	bl	800079c <__aeabi_ddiv>
 8014cd0:	ec41 0b18 	vmov	d8, r0, r1
 8014cd4:	eeb0 0a48 	vmov.f32	s0, s16
 8014cd8:	eef0 0a68 	vmov.f32	s1, s17
 8014cdc:	ecbd 8b02 	vpop	{d8}
 8014ce0:	bd38      	pop	{r3, r4, r5, pc}
 8014ce2:	bf00      	nop
 8014ce4:	200000e0 	.word	0x200000e0

08014ce8 <powf>:
 8014ce8:	b508      	push	{r3, lr}
 8014cea:	ed2d 8b04 	vpush	{d8-d9}
 8014cee:	eeb0 9a40 	vmov.f32	s18, s0
 8014cf2:	eef0 8a60 	vmov.f32	s17, s1
 8014cf6:	f000 f969 	bl	8014fcc <__ieee754_powf>
 8014cfa:	4b43      	ldr	r3, [pc, #268]	; (8014e08 <powf+0x120>)
 8014cfc:	f993 3000 	ldrsb.w	r3, [r3]
 8014d00:	3301      	adds	r3, #1
 8014d02:	eeb0 8a40 	vmov.f32	s16, s0
 8014d06:	d012      	beq.n	8014d2e <powf+0x46>
 8014d08:	eef4 8a68 	vcmp.f32	s17, s17
 8014d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d10:	d60d      	bvs.n	8014d2e <powf+0x46>
 8014d12:	eeb4 9a49 	vcmp.f32	s18, s18
 8014d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d1a:	d70d      	bvc.n	8014d38 <powf+0x50>
 8014d1c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014d28:	bf08      	it	eq
 8014d2a:	eeb0 8a67 	vmoveq.f32	s16, s15
 8014d2e:	eeb0 0a48 	vmov.f32	s0, s16
 8014d32:	ecbd 8b04 	vpop	{d8-d9}
 8014d36:	bd08      	pop	{r3, pc}
 8014d38:	eddf 9a34 	vldr	s19, [pc, #208]	; 8014e0c <powf+0x124>
 8014d3c:	eeb4 9a69 	vcmp.f32	s18, s19
 8014d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d44:	d116      	bne.n	8014d74 <powf+0x8c>
 8014d46:	eef4 8a69 	vcmp.f32	s17, s19
 8014d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d4e:	d057      	beq.n	8014e00 <powf+0x118>
 8014d50:	eeb0 0a68 	vmov.f32	s0, s17
 8014d54:	f000 fc04 	bl	8015560 <finitef>
 8014d58:	2800      	cmp	r0, #0
 8014d5a:	d0e8      	beq.n	8014d2e <powf+0x46>
 8014d5c:	eef4 8ae9 	vcmpe.f32	s17, s19
 8014d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d64:	d5e3      	bpl.n	8014d2e <powf+0x46>
 8014d66:	f7ff fe09 	bl	801497c <__errno>
 8014d6a:	2321      	movs	r3, #33	; 0x21
 8014d6c:	6003      	str	r3, [r0, #0]
 8014d6e:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8014e10 <powf+0x128>
 8014d72:	e7dc      	b.n	8014d2e <powf+0x46>
 8014d74:	f000 fbf4 	bl	8015560 <finitef>
 8014d78:	bb50      	cbnz	r0, 8014dd0 <powf+0xe8>
 8014d7a:	eeb0 0a49 	vmov.f32	s0, s18
 8014d7e:	f000 fbef 	bl	8015560 <finitef>
 8014d82:	b328      	cbz	r0, 8014dd0 <powf+0xe8>
 8014d84:	eeb0 0a68 	vmov.f32	s0, s17
 8014d88:	f000 fbea 	bl	8015560 <finitef>
 8014d8c:	b300      	cbz	r0, 8014dd0 <powf+0xe8>
 8014d8e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d96:	d706      	bvc.n	8014da6 <powf+0xbe>
 8014d98:	f7ff fdf0 	bl	801497c <__errno>
 8014d9c:	2321      	movs	r3, #33	; 0x21
 8014d9e:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8014da2:	6003      	str	r3, [r0, #0]
 8014da4:	e7c3      	b.n	8014d2e <powf+0x46>
 8014da6:	f7ff fde9 	bl	801497c <__errno>
 8014daa:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8014dae:	2322      	movs	r3, #34	; 0x22
 8014db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014db4:	6003      	str	r3, [r0, #0]
 8014db6:	d508      	bpl.n	8014dca <powf+0xe2>
 8014db8:	eeb0 0a68 	vmov.f32	s0, s17
 8014dbc:	f000 fbe4 	bl	8015588 <rintf>
 8014dc0:	eeb4 0a68 	vcmp.f32	s0, s17
 8014dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dc8:	d1d1      	bne.n	8014d6e <powf+0x86>
 8014dca:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8014e14 <powf+0x12c>
 8014dce:	e7ae      	b.n	8014d2e <powf+0x46>
 8014dd0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dd8:	d1a9      	bne.n	8014d2e <powf+0x46>
 8014dda:	eeb0 0a49 	vmov.f32	s0, s18
 8014dde:	f000 fbbf 	bl	8015560 <finitef>
 8014de2:	2800      	cmp	r0, #0
 8014de4:	d0a3      	beq.n	8014d2e <powf+0x46>
 8014de6:	eeb0 0a68 	vmov.f32	s0, s17
 8014dea:	f000 fbb9 	bl	8015560 <finitef>
 8014dee:	2800      	cmp	r0, #0
 8014df0:	d09d      	beq.n	8014d2e <powf+0x46>
 8014df2:	f7ff fdc3 	bl	801497c <__errno>
 8014df6:	2322      	movs	r3, #34	; 0x22
 8014df8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8014e0c <powf+0x124>
 8014dfc:	6003      	str	r3, [r0, #0]
 8014dfe:	e796      	b.n	8014d2e <powf+0x46>
 8014e00:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014e04:	e793      	b.n	8014d2e <powf+0x46>
 8014e06:	bf00      	nop
 8014e08:	200000e0 	.word	0x200000e0
 8014e0c:	00000000 	.word	0x00000000
 8014e10:	ff800000 	.word	0xff800000
 8014e14:	7f800000 	.word	0x7f800000

08014e18 <sqrtf>:
 8014e18:	b508      	push	{r3, lr}
 8014e1a:	ed2d 8b02 	vpush	{d8}
 8014e1e:	eeb0 8a40 	vmov.f32	s16, s0
 8014e22:	f000 fb93 	bl	801554c <__ieee754_sqrtf>
 8014e26:	4b0d      	ldr	r3, [pc, #52]	; (8014e5c <sqrtf+0x44>)
 8014e28:	f993 3000 	ldrsb.w	r3, [r3]
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	d011      	beq.n	8014e54 <sqrtf+0x3c>
 8014e30:	eeb4 8a48 	vcmp.f32	s16, s16
 8014e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e38:	d60c      	bvs.n	8014e54 <sqrtf+0x3c>
 8014e3a:	eddf 8a09 	vldr	s17, [pc, #36]	; 8014e60 <sqrtf+0x48>
 8014e3e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e46:	d505      	bpl.n	8014e54 <sqrtf+0x3c>
 8014e48:	f7ff fd98 	bl	801497c <__errno>
 8014e4c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014e50:	2321      	movs	r3, #33	; 0x21
 8014e52:	6003      	str	r3, [r0, #0]
 8014e54:	ecbd 8b02 	vpop	{d8}
 8014e58:	bd08      	pop	{r3, pc}
 8014e5a:	bf00      	nop
 8014e5c:	200000e0 	.word	0x200000e0
 8014e60:	00000000 	.word	0x00000000

08014e64 <__ieee754_sqrt>:
 8014e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e68:	ec55 4b10 	vmov	r4, r5, d0
 8014e6c:	4e56      	ldr	r6, [pc, #344]	; (8014fc8 <__ieee754_sqrt+0x164>)
 8014e6e:	43ae      	bics	r6, r5
 8014e70:	ee10 0a10 	vmov	r0, s0
 8014e74:	ee10 3a10 	vmov	r3, s0
 8014e78:	4629      	mov	r1, r5
 8014e7a:	462a      	mov	r2, r5
 8014e7c:	d110      	bne.n	8014ea0 <__ieee754_sqrt+0x3c>
 8014e7e:	ee10 2a10 	vmov	r2, s0
 8014e82:	462b      	mov	r3, r5
 8014e84:	f7eb fb60 	bl	8000548 <__aeabi_dmul>
 8014e88:	4602      	mov	r2, r0
 8014e8a:	460b      	mov	r3, r1
 8014e8c:	4620      	mov	r0, r4
 8014e8e:	4629      	mov	r1, r5
 8014e90:	f7eb f9a4 	bl	80001dc <__adddf3>
 8014e94:	4604      	mov	r4, r0
 8014e96:	460d      	mov	r5, r1
 8014e98:	ec45 4b10 	vmov	d0, r4, r5
 8014e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ea0:	2d00      	cmp	r5, #0
 8014ea2:	dc10      	bgt.n	8014ec6 <__ieee754_sqrt+0x62>
 8014ea4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014ea8:	4330      	orrs	r0, r6
 8014eaa:	d0f5      	beq.n	8014e98 <__ieee754_sqrt+0x34>
 8014eac:	b15d      	cbz	r5, 8014ec6 <__ieee754_sqrt+0x62>
 8014eae:	ee10 2a10 	vmov	r2, s0
 8014eb2:	462b      	mov	r3, r5
 8014eb4:	ee10 0a10 	vmov	r0, s0
 8014eb8:	f7eb f98e 	bl	80001d8 <__aeabi_dsub>
 8014ebc:	4602      	mov	r2, r0
 8014ebe:	460b      	mov	r3, r1
 8014ec0:	f7eb fc6c 	bl	800079c <__aeabi_ddiv>
 8014ec4:	e7e6      	b.n	8014e94 <__ieee754_sqrt+0x30>
 8014ec6:	1509      	asrs	r1, r1, #20
 8014ec8:	d076      	beq.n	8014fb8 <__ieee754_sqrt+0x154>
 8014eca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014ece:	07ce      	lsls	r6, r1, #31
 8014ed0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8014ed4:	bf5e      	ittt	pl
 8014ed6:	0fda      	lsrpl	r2, r3, #31
 8014ed8:	005b      	lslpl	r3, r3, #1
 8014eda:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8014ede:	0fda      	lsrs	r2, r3, #31
 8014ee0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8014ee4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8014ee8:	2000      	movs	r0, #0
 8014eea:	106d      	asrs	r5, r5, #1
 8014eec:	005b      	lsls	r3, r3, #1
 8014eee:	f04f 0e16 	mov.w	lr, #22
 8014ef2:	4684      	mov	ip, r0
 8014ef4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014ef8:	eb0c 0401 	add.w	r4, ip, r1
 8014efc:	4294      	cmp	r4, r2
 8014efe:	bfde      	ittt	le
 8014f00:	1b12      	suble	r2, r2, r4
 8014f02:	eb04 0c01 	addle.w	ip, r4, r1
 8014f06:	1840      	addle	r0, r0, r1
 8014f08:	0052      	lsls	r2, r2, #1
 8014f0a:	f1be 0e01 	subs.w	lr, lr, #1
 8014f0e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014f12:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014f16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014f1a:	d1ed      	bne.n	8014ef8 <__ieee754_sqrt+0x94>
 8014f1c:	4671      	mov	r1, lr
 8014f1e:	2720      	movs	r7, #32
 8014f20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8014f24:	4562      	cmp	r2, ip
 8014f26:	eb04 060e 	add.w	r6, r4, lr
 8014f2a:	dc02      	bgt.n	8014f32 <__ieee754_sqrt+0xce>
 8014f2c:	d113      	bne.n	8014f56 <__ieee754_sqrt+0xf2>
 8014f2e:	429e      	cmp	r6, r3
 8014f30:	d811      	bhi.n	8014f56 <__ieee754_sqrt+0xf2>
 8014f32:	2e00      	cmp	r6, #0
 8014f34:	eb06 0e04 	add.w	lr, r6, r4
 8014f38:	da43      	bge.n	8014fc2 <__ieee754_sqrt+0x15e>
 8014f3a:	f1be 0f00 	cmp.w	lr, #0
 8014f3e:	db40      	blt.n	8014fc2 <__ieee754_sqrt+0x15e>
 8014f40:	f10c 0801 	add.w	r8, ip, #1
 8014f44:	eba2 020c 	sub.w	r2, r2, ip
 8014f48:	429e      	cmp	r6, r3
 8014f4a:	bf88      	it	hi
 8014f4c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014f50:	1b9b      	subs	r3, r3, r6
 8014f52:	4421      	add	r1, r4
 8014f54:	46c4      	mov	ip, r8
 8014f56:	0052      	lsls	r2, r2, #1
 8014f58:	3f01      	subs	r7, #1
 8014f5a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014f5e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8014f62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014f66:	d1dd      	bne.n	8014f24 <__ieee754_sqrt+0xc0>
 8014f68:	4313      	orrs	r3, r2
 8014f6a:	d006      	beq.n	8014f7a <__ieee754_sqrt+0x116>
 8014f6c:	1c4c      	adds	r4, r1, #1
 8014f6e:	bf13      	iteet	ne
 8014f70:	3101      	addne	r1, #1
 8014f72:	3001      	addeq	r0, #1
 8014f74:	4639      	moveq	r1, r7
 8014f76:	f021 0101 	bicne.w	r1, r1, #1
 8014f7a:	1043      	asrs	r3, r0, #1
 8014f7c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014f80:	0849      	lsrs	r1, r1, #1
 8014f82:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8014f86:	07c2      	lsls	r2, r0, #31
 8014f88:	bf48      	it	mi
 8014f8a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8014f8e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8014f92:	460c      	mov	r4, r1
 8014f94:	463d      	mov	r5, r7
 8014f96:	e77f      	b.n	8014e98 <__ieee754_sqrt+0x34>
 8014f98:	0ada      	lsrs	r2, r3, #11
 8014f9a:	3815      	subs	r0, #21
 8014f9c:	055b      	lsls	r3, r3, #21
 8014f9e:	2a00      	cmp	r2, #0
 8014fa0:	d0fa      	beq.n	8014f98 <__ieee754_sqrt+0x134>
 8014fa2:	02d7      	lsls	r7, r2, #11
 8014fa4:	d50a      	bpl.n	8014fbc <__ieee754_sqrt+0x158>
 8014fa6:	f1c1 0420 	rsb	r4, r1, #32
 8014faa:	fa23 f404 	lsr.w	r4, r3, r4
 8014fae:	1e4d      	subs	r5, r1, #1
 8014fb0:	408b      	lsls	r3, r1
 8014fb2:	4322      	orrs	r2, r4
 8014fb4:	1b41      	subs	r1, r0, r5
 8014fb6:	e788      	b.n	8014eca <__ieee754_sqrt+0x66>
 8014fb8:	4608      	mov	r0, r1
 8014fba:	e7f0      	b.n	8014f9e <__ieee754_sqrt+0x13a>
 8014fbc:	0052      	lsls	r2, r2, #1
 8014fbe:	3101      	adds	r1, #1
 8014fc0:	e7ef      	b.n	8014fa2 <__ieee754_sqrt+0x13e>
 8014fc2:	46e0      	mov	r8, ip
 8014fc4:	e7be      	b.n	8014f44 <__ieee754_sqrt+0xe0>
 8014fc6:	bf00      	nop
 8014fc8:	7ff00000 	.word	0x7ff00000

08014fcc <__ieee754_powf>:
 8014fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fd0:	ee10 5a90 	vmov	r5, s1
 8014fd4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8014fd8:	ed2d 8b02 	vpush	{d8}
 8014fdc:	eeb0 8a40 	vmov.f32	s16, s0
 8014fe0:	eef0 8a60 	vmov.f32	s17, s1
 8014fe4:	f000 8291 	beq.w	801550a <__ieee754_powf+0x53e>
 8014fe8:	ee10 8a10 	vmov	r8, s0
 8014fec:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8014ff0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014ff4:	dc06      	bgt.n	8015004 <__ieee754_powf+0x38>
 8014ff6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8014ffa:	dd0a      	ble.n	8015012 <__ieee754_powf+0x46>
 8014ffc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015000:	f000 8283 	beq.w	801550a <__ieee754_powf+0x53e>
 8015004:	ecbd 8b02 	vpop	{d8}
 8015008:	48d8      	ldr	r0, [pc, #864]	; (801536c <__ieee754_powf+0x3a0>)
 801500a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801500e:	f000 bab5 	b.w	801557c <nanf>
 8015012:	f1b8 0f00 	cmp.w	r8, #0
 8015016:	da1f      	bge.n	8015058 <__ieee754_powf+0x8c>
 8015018:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801501c:	da2e      	bge.n	801507c <__ieee754_powf+0xb0>
 801501e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8015022:	f2c0 827b 	blt.w	801551c <__ieee754_powf+0x550>
 8015026:	15fb      	asrs	r3, r7, #23
 8015028:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801502c:	fa47 f603 	asr.w	r6, r7, r3
 8015030:	fa06 f303 	lsl.w	r3, r6, r3
 8015034:	42bb      	cmp	r3, r7
 8015036:	f040 8271 	bne.w	801551c <__ieee754_powf+0x550>
 801503a:	f006 0601 	and.w	r6, r6, #1
 801503e:	f1c6 0602 	rsb	r6, r6, #2
 8015042:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8015046:	d120      	bne.n	801508a <__ieee754_powf+0xbe>
 8015048:	2d00      	cmp	r5, #0
 801504a:	f280 8264 	bge.w	8015516 <__ieee754_powf+0x54a>
 801504e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015052:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8015056:	e00d      	b.n	8015074 <__ieee754_powf+0xa8>
 8015058:	2600      	movs	r6, #0
 801505a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801505e:	d1f0      	bne.n	8015042 <__ieee754_powf+0x76>
 8015060:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015064:	f000 8251 	beq.w	801550a <__ieee754_powf+0x53e>
 8015068:	dd0a      	ble.n	8015080 <__ieee754_powf+0xb4>
 801506a:	2d00      	cmp	r5, #0
 801506c:	f280 8250 	bge.w	8015510 <__ieee754_powf+0x544>
 8015070:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8015370 <__ieee754_powf+0x3a4>
 8015074:	ecbd 8b02 	vpop	{d8}
 8015078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801507c:	2602      	movs	r6, #2
 801507e:	e7ec      	b.n	801505a <__ieee754_powf+0x8e>
 8015080:	2d00      	cmp	r5, #0
 8015082:	daf5      	bge.n	8015070 <__ieee754_powf+0xa4>
 8015084:	eeb1 0a68 	vneg.f32	s0, s17
 8015088:	e7f4      	b.n	8015074 <__ieee754_powf+0xa8>
 801508a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801508e:	d102      	bne.n	8015096 <__ieee754_powf+0xca>
 8015090:	ee28 0a08 	vmul.f32	s0, s16, s16
 8015094:	e7ee      	b.n	8015074 <__ieee754_powf+0xa8>
 8015096:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801509a:	eeb0 0a48 	vmov.f32	s0, s16
 801509e:	d108      	bne.n	80150b2 <__ieee754_powf+0xe6>
 80150a0:	f1b8 0f00 	cmp.w	r8, #0
 80150a4:	db05      	blt.n	80150b2 <__ieee754_powf+0xe6>
 80150a6:	ecbd 8b02 	vpop	{d8}
 80150aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150ae:	f000 ba4d 	b.w	801554c <__ieee754_sqrtf>
 80150b2:	f000 fa4e 	bl	8015552 <fabsf>
 80150b6:	b124      	cbz	r4, 80150c2 <__ieee754_powf+0xf6>
 80150b8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80150bc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80150c0:	d117      	bne.n	80150f2 <__ieee754_powf+0x126>
 80150c2:	2d00      	cmp	r5, #0
 80150c4:	bfbc      	itt	lt
 80150c6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80150ca:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80150ce:	f1b8 0f00 	cmp.w	r8, #0
 80150d2:	dacf      	bge.n	8015074 <__ieee754_powf+0xa8>
 80150d4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80150d8:	ea54 0306 	orrs.w	r3, r4, r6
 80150dc:	d104      	bne.n	80150e8 <__ieee754_powf+0x11c>
 80150de:	ee70 7a40 	vsub.f32	s15, s0, s0
 80150e2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80150e6:	e7c5      	b.n	8015074 <__ieee754_powf+0xa8>
 80150e8:	2e01      	cmp	r6, #1
 80150ea:	d1c3      	bne.n	8015074 <__ieee754_powf+0xa8>
 80150ec:	eeb1 0a40 	vneg.f32	s0, s0
 80150f0:	e7c0      	b.n	8015074 <__ieee754_powf+0xa8>
 80150f2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80150f6:	3801      	subs	r0, #1
 80150f8:	ea56 0300 	orrs.w	r3, r6, r0
 80150fc:	d104      	bne.n	8015108 <__ieee754_powf+0x13c>
 80150fe:	ee38 8a48 	vsub.f32	s16, s16, s16
 8015102:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015106:	e7b5      	b.n	8015074 <__ieee754_powf+0xa8>
 8015108:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801510c:	dd6b      	ble.n	80151e6 <__ieee754_powf+0x21a>
 801510e:	4b99      	ldr	r3, [pc, #612]	; (8015374 <__ieee754_powf+0x3a8>)
 8015110:	429c      	cmp	r4, r3
 8015112:	dc06      	bgt.n	8015122 <__ieee754_powf+0x156>
 8015114:	2d00      	cmp	r5, #0
 8015116:	daab      	bge.n	8015070 <__ieee754_powf+0xa4>
 8015118:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8015378 <__ieee754_powf+0x3ac>
 801511c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015120:	e7a8      	b.n	8015074 <__ieee754_powf+0xa8>
 8015122:	4b96      	ldr	r3, [pc, #600]	; (801537c <__ieee754_powf+0x3b0>)
 8015124:	429c      	cmp	r4, r3
 8015126:	dd02      	ble.n	801512e <__ieee754_powf+0x162>
 8015128:	2d00      	cmp	r5, #0
 801512a:	dcf5      	bgt.n	8015118 <__ieee754_powf+0x14c>
 801512c:	e7a0      	b.n	8015070 <__ieee754_powf+0xa4>
 801512e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015132:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015136:	eddf 6a92 	vldr	s13, [pc, #584]	; 8015380 <__ieee754_powf+0x3b4>
 801513a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801513e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8015142:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015146:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801514a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801514e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015152:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8015384 <__ieee754_powf+0x3b8>
 8015156:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801515a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8015388 <__ieee754_powf+0x3bc>
 801515e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015162:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801538c <__ieee754_powf+0x3c0>
 8015166:	eef0 6a67 	vmov.f32	s13, s15
 801516a:	eee0 6a07 	vfma.f32	s13, s0, s14
 801516e:	ee16 3a90 	vmov	r3, s13
 8015172:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015176:	f023 030f 	bic.w	r3, r3, #15
 801517a:	ee00 3a90 	vmov	s1, r3
 801517e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8015182:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015186:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801518a:	f025 050f 	bic.w	r5, r5, #15
 801518e:	ee07 5a10 	vmov	s14, r5
 8015192:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8015196:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801519a:	ee07 3a90 	vmov	s15, r3
 801519e:	eee7 0a27 	vfma.f32	s1, s14, s15
 80151a2:	3e01      	subs	r6, #1
 80151a4:	ea56 0200 	orrs.w	r2, r6, r0
 80151a8:	ee07 5a10 	vmov	s14, r5
 80151ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151b0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80151b4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80151b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80151bc:	ee17 4a10 	vmov	r4, s14
 80151c0:	bf08      	it	eq
 80151c2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80151c6:	2c00      	cmp	r4, #0
 80151c8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80151cc:	f340 8184 	ble.w	80154d8 <__ieee754_powf+0x50c>
 80151d0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80151d4:	f340 80fc 	ble.w	80153d0 <__ieee754_powf+0x404>
 80151d8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8015378 <__ieee754_powf+0x3ac>
 80151dc:	ee28 0a27 	vmul.f32	s0, s16, s15
 80151e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80151e4:	e746      	b.n	8015074 <__ieee754_powf+0xa8>
 80151e6:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80151ea:	bf01      	itttt	eq
 80151ec:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8015390 <__ieee754_powf+0x3c4>
 80151f0:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80151f4:	f06f 0217 	mvneq.w	r2, #23
 80151f8:	ee17 4a90 	vmoveq	r4, s15
 80151fc:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8015200:	bf18      	it	ne
 8015202:	2200      	movne	r2, #0
 8015204:	3b7f      	subs	r3, #127	; 0x7f
 8015206:	4413      	add	r3, r2
 8015208:	4a62      	ldr	r2, [pc, #392]	; (8015394 <__ieee754_powf+0x3c8>)
 801520a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801520e:	4294      	cmp	r4, r2
 8015210:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8015214:	dd06      	ble.n	8015224 <__ieee754_powf+0x258>
 8015216:	4a60      	ldr	r2, [pc, #384]	; (8015398 <__ieee754_powf+0x3cc>)
 8015218:	4294      	cmp	r4, r2
 801521a:	f340 80a4 	ble.w	8015366 <__ieee754_powf+0x39a>
 801521e:	3301      	adds	r3, #1
 8015220:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8015224:	2400      	movs	r4, #0
 8015226:	4a5d      	ldr	r2, [pc, #372]	; (801539c <__ieee754_powf+0x3d0>)
 8015228:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801522c:	ee07 1a90 	vmov	s15, r1
 8015230:	ed92 7a00 	vldr	s14, [r2]
 8015234:	4a5a      	ldr	r2, [pc, #360]	; (80153a0 <__ieee754_powf+0x3d4>)
 8015236:	ee37 6a27 	vadd.f32	s12, s14, s15
 801523a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801523e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8015242:	1049      	asrs	r1, r1, #1
 8015244:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8015248:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801524c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8015250:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8015254:	ee06 1a10 	vmov	s12, r1
 8015258:	ee65 4a26 	vmul.f32	s9, s10, s13
 801525c:	ee36 7a47 	vsub.f32	s14, s12, s14
 8015260:	ee14 7a90 	vmov	r7, s9
 8015264:	4017      	ands	r7, r2
 8015266:	ee05 7a90 	vmov	s11, r7
 801526a:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801526e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015272:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80153a4 <__ieee754_powf+0x3d8>
 8015276:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801527a:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801527e:	ee25 6a26 	vmul.f32	s12, s10, s13
 8015282:	eddf 6a49 	vldr	s13, [pc, #292]	; 80153a8 <__ieee754_powf+0x3dc>
 8015286:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801528a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80153ac <__ieee754_powf+0x3e0>
 801528e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015292:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8015380 <__ieee754_powf+0x3b4>
 8015296:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801529a:	eddf 6a45 	vldr	s13, [pc, #276]	; 80153b0 <__ieee754_powf+0x3e4>
 801529e:	eee7 6a27 	vfma.f32	s13, s14, s15
 80152a2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80153b4 <__ieee754_powf+0x3e8>
 80152a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80152aa:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80152ae:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80152b2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80152b6:	eee5 6a07 	vfma.f32	s13, s10, s14
 80152ba:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80152be:	eef0 7a45 	vmov.f32	s15, s10
 80152c2:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80152c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80152ca:	ee17 1a90 	vmov	r1, s15
 80152ce:	4011      	ands	r1, r2
 80152d0:	ee07 1a90 	vmov	s15, r1
 80152d4:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80152d8:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80152dc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80152e0:	ee27 7a24 	vmul.f32	s14, s14, s9
 80152e4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80152e8:	eeb0 6a47 	vmov.f32	s12, s14
 80152ec:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80152f0:	ee16 1a10 	vmov	r1, s12
 80152f4:	4011      	ands	r1, r2
 80152f6:	ee06 1a90 	vmov	s13, r1
 80152fa:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80152fe:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80153b8 <__ieee754_powf+0x3ec>
 8015302:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80153bc <__ieee754_powf+0x3f0>
 8015306:	ee37 7a66 	vsub.f32	s14, s14, s13
 801530a:	ee06 1a10 	vmov	s12, r1
 801530e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015312:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80153c0 <__ieee754_powf+0x3f4>
 8015316:	492b      	ldr	r1, [pc, #172]	; (80153c4 <__ieee754_powf+0x3f8>)
 8015318:	eea6 7a27 	vfma.f32	s14, s12, s15
 801531c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015320:	edd1 7a00 	vldr	s15, [r1]
 8015324:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015328:	ee07 3a90 	vmov	s15, r3
 801532c:	4b26      	ldr	r3, [pc, #152]	; (80153c8 <__ieee754_powf+0x3fc>)
 801532e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015332:	eef0 7a47 	vmov.f32	s15, s14
 8015336:	eee6 7a25 	vfma.f32	s15, s12, s11
 801533a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801533e:	edd4 0a00 	vldr	s1, [r4]
 8015342:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8015346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801534a:	ee17 3a90 	vmov	r3, s15
 801534e:	4013      	ands	r3, r2
 8015350:	ee07 3a90 	vmov	s15, r3
 8015354:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8015358:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801535c:	eee6 6a65 	vfms.f32	s13, s12, s11
 8015360:	ee77 7a66 	vsub.f32	s15, s14, s13
 8015364:	e70f      	b.n	8015186 <__ieee754_powf+0x1ba>
 8015366:	2401      	movs	r4, #1
 8015368:	e75d      	b.n	8015226 <__ieee754_powf+0x25a>
 801536a:	bf00      	nop
 801536c:	08015dec 	.word	0x08015dec
 8015370:	00000000 	.word	0x00000000
 8015374:	3f7ffff7 	.word	0x3f7ffff7
 8015378:	7149f2ca 	.word	0x7149f2ca
 801537c:	3f800007 	.word	0x3f800007
 8015380:	3eaaaaab 	.word	0x3eaaaaab
 8015384:	3fb8aa3b 	.word	0x3fb8aa3b
 8015388:	36eca570 	.word	0x36eca570
 801538c:	3fb8aa00 	.word	0x3fb8aa00
 8015390:	4b800000 	.word	0x4b800000
 8015394:	001cc471 	.word	0x001cc471
 8015398:	005db3d6 	.word	0x005db3d6
 801539c:	08015df0 	.word	0x08015df0
 80153a0:	fffff000 	.word	0xfffff000
 80153a4:	3e6c3255 	.word	0x3e6c3255
 80153a8:	3e53f142 	.word	0x3e53f142
 80153ac:	3e8ba305 	.word	0x3e8ba305
 80153b0:	3edb6db7 	.word	0x3edb6db7
 80153b4:	3f19999a 	.word	0x3f19999a
 80153b8:	3f76384f 	.word	0x3f76384f
 80153bc:	3f763800 	.word	0x3f763800
 80153c0:	369dc3a0 	.word	0x369dc3a0
 80153c4:	08015e00 	.word	0x08015e00
 80153c8:	08015df8 	.word	0x08015df8
 80153cc:	3338aa3c 	.word	0x3338aa3c
 80153d0:	f040 8092 	bne.w	80154f8 <__ieee754_powf+0x52c>
 80153d4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80153cc <__ieee754_powf+0x400>
 80153d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80153dc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80153e0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80153e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e8:	f73f aef6 	bgt.w	80151d8 <__ieee754_powf+0x20c>
 80153ec:	15db      	asrs	r3, r3, #23
 80153ee:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80153f2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80153f6:	4103      	asrs	r3, r0
 80153f8:	4423      	add	r3, r4
 80153fa:	4949      	ldr	r1, [pc, #292]	; (8015520 <__ieee754_powf+0x554>)
 80153fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015400:	3a7f      	subs	r2, #127	; 0x7f
 8015402:	4111      	asrs	r1, r2
 8015404:	ea23 0101 	bic.w	r1, r3, r1
 8015408:	ee07 1a10 	vmov	s14, r1
 801540c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8015410:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8015414:	f1c2 0217 	rsb	r2, r2, #23
 8015418:	4110      	asrs	r0, r2
 801541a:	2c00      	cmp	r4, #0
 801541c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015420:	bfb8      	it	lt
 8015422:	4240      	neglt	r0, r0
 8015424:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8015428:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8015524 <__ieee754_powf+0x558>
 801542c:	ee17 3a10 	vmov	r3, s14
 8015430:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015434:	f023 030f 	bic.w	r3, r3, #15
 8015438:	ee07 3a10 	vmov	s14, r3
 801543c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015440:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8015444:	eddf 7a38 	vldr	s15, [pc, #224]	; 8015528 <__ieee754_powf+0x55c>
 8015448:	ee67 7a27 	vmul.f32	s15, s14, s15
 801544c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8015450:	eddf 6a36 	vldr	s13, [pc, #216]	; 801552c <__ieee754_powf+0x560>
 8015454:	eeb0 0a67 	vmov.f32	s0, s15
 8015458:	eea7 0a26 	vfma.f32	s0, s14, s13
 801545c:	eeb0 6a40 	vmov.f32	s12, s0
 8015460:	eea7 6a66 	vfms.f32	s12, s14, s13
 8015464:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015468:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801546c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8015530 <__ieee754_powf+0x564>
 8015470:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8015534 <__ieee754_powf+0x568>
 8015474:	eea7 6a26 	vfma.f32	s12, s14, s13
 8015478:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8015538 <__ieee754_powf+0x56c>
 801547c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015480:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801553c <__ieee754_powf+0x570>
 8015484:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015488:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8015540 <__ieee754_powf+0x574>
 801548c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015490:	eeb0 6a40 	vmov.f32	s12, s0
 8015494:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8015498:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801549c:	eeb0 7a46 	vmov.f32	s14, s12
 80154a0:	ee77 6a66 	vsub.f32	s13, s14, s13
 80154a4:	ee20 6a06 	vmul.f32	s12, s0, s12
 80154a8:	eee0 7a27 	vfma.f32	s15, s0, s15
 80154ac:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80154b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80154b4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80154b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80154bc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80154c0:	ee10 3a10 	vmov	r3, s0
 80154c4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80154c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80154cc:	da1a      	bge.n	8015504 <__ieee754_powf+0x538>
 80154ce:	f000 f8b7 	bl	8015640 <scalbnf>
 80154d2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80154d6:	e5cd      	b.n	8015074 <__ieee754_powf+0xa8>
 80154d8:	4a1a      	ldr	r2, [pc, #104]	; (8015544 <__ieee754_powf+0x578>)
 80154da:	4293      	cmp	r3, r2
 80154dc:	dd02      	ble.n	80154e4 <__ieee754_powf+0x518>
 80154de:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8015548 <__ieee754_powf+0x57c>
 80154e2:	e67b      	b.n	80151dc <__ieee754_powf+0x210>
 80154e4:	d108      	bne.n	80154f8 <__ieee754_powf+0x52c>
 80154e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80154ea:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80154ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154f2:	f6ff af7b 	blt.w	80153ec <__ieee754_powf+0x420>
 80154f6:	e7f2      	b.n	80154de <__ieee754_powf+0x512>
 80154f8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80154fc:	f73f af76 	bgt.w	80153ec <__ieee754_powf+0x420>
 8015500:	2000      	movs	r0, #0
 8015502:	e78f      	b.n	8015424 <__ieee754_powf+0x458>
 8015504:	ee00 3a10 	vmov	s0, r3
 8015508:	e7e3      	b.n	80154d2 <__ieee754_powf+0x506>
 801550a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801550e:	e5b1      	b.n	8015074 <__ieee754_powf+0xa8>
 8015510:	eeb0 0a68 	vmov.f32	s0, s17
 8015514:	e5ae      	b.n	8015074 <__ieee754_powf+0xa8>
 8015516:	eeb0 0a48 	vmov.f32	s0, s16
 801551a:	e5ab      	b.n	8015074 <__ieee754_powf+0xa8>
 801551c:	2600      	movs	r6, #0
 801551e:	e590      	b.n	8015042 <__ieee754_powf+0x76>
 8015520:	007fffff 	.word	0x007fffff
 8015524:	3f317218 	.word	0x3f317218
 8015528:	35bfbe8c 	.word	0x35bfbe8c
 801552c:	3f317200 	.word	0x3f317200
 8015530:	3331bb4c 	.word	0x3331bb4c
 8015534:	b5ddea0e 	.word	0xb5ddea0e
 8015538:	388ab355 	.word	0x388ab355
 801553c:	bb360b61 	.word	0xbb360b61
 8015540:	3e2aaaab 	.word	0x3e2aaaab
 8015544:	43160000 	.word	0x43160000
 8015548:	0da24260 	.word	0x0da24260

0801554c <__ieee754_sqrtf>:
 801554c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015550:	4770      	bx	lr

08015552 <fabsf>:
 8015552:	ee10 3a10 	vmov	r3, s0
 8015556:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801555a:	ee00 3a10 	vmov	s0, r3
 801555e:	4770      	bx	lr

08015560 <finitef>:
 8015560:	b082      	sub	sp, #8
 8015562:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015566:	9801      	ldr	r0, [sp, #4]
 8015568:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801556c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8015570:	bfac      	ite	ge
 8015572:	2000      	movge	r0, #0
 8015574:	2001      	movlt	r0, #1
 8015576:	b002      	add	sp, #8
 8015578:	4770      	bx	lr
	...

0801557c <nanf>:
 801557c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015584 <nanf+0x8>
 8015580:	4770      	bx	lr
 8015582:	bf00      	nop
 8015584:	7fc00000 	.word	0x7fc00000

08015588 <rintf>:
 8015588:	ee10 2a10 	vmov	r2, s0
 801558c:	b513      	push	{r0, r1, r4, lr}
 801558e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8015592:	397f      	subs	r1, #127	; 0x7f
 8015594:	2916      	cmp	r1, #22
 8015596:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801559a:	dc47      	bgt.n	801562c <rintf+0xa4>
 801559c:	b32b      	cbz	r3, 80155ea <rintf+0x62>
 801559e:	2900      	cmp	r1, #0
 80155a0:	ee10 3a10 	vmov	r3, s0
 80155a4:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 80155a8:	da21      	bge.n	80155ee <rintf+0x66>
 80155aa:	f3c2 0316 	ubfx	r3, r2, #0, #23
 80155ae:	425b      	negs	r3, r3
 80155b0:	4921      	ldr	r1, [pc, #132]	; (8015638 <rintf+0xb0>)
 80155b2:	0a5b      	lsrs	r3, r3, #9
 80155b4:	0d12      	lsrs	r2, r2, #20
 80155b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80155ba:	0512      	lsls	r2, r2, #20
 80155bc:	4313      	orrs	r3, r2
 80155be:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80155c2:	ee07 3a90 	vmov	s15, r3
 80155c6:	edd1 6a00 	vldr	s13, [r1]
 80155ca:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80155ce:	ed8d 7a01 	vstr	s14, [sp, #4]
 80155d2:	eddd 7a01 	vldr	s15, [sp, #4]
 80155d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80155da:	ee17 3a90 	vmov	r3, s15
 80155de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80155e2:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80155e6:	ee00 3a10 	vmov	s0, r3
 80155ea:	b002      	add	sp, #8
 80155ec:	bd10      	pop	{r4, pc}
 80155ee:	4a13      	ldr	r2, [pc, #76]	; (801563c <rintf+0xb4>)
 80155f0:	410a      	asrs	r2, r1
 80155f2:	4213      	tst	r3, r2
 80155f4:	d0f9      	beq.n	80155ea <rintf+0x62>
 80155f6:	0854      	lsrs	r4, r2, #1
 80155f8:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 80155fc:	d006      	beq.n	801560c <rintf+0x84>
 80155fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8015602:	ea23 0304 	bic.w	r3, r3, r4
 8015606:	fa42 f101 	asr.w	r1, r2, r1
 801560a:	430b      	orrs	r3, r1
 801560c:	4a0a      	ldr	r2, [pc, #40]	; (8015638 <rintf+0xb0>)
 801560e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8015612:	ed90 7a00 	vldr	s14, [r0]
 8015616:	ee07 3a90 	vmov	s15, r3
 801561a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801561e:	edcd 7a01 	vstr	s15, [sp, #4]
 8015622:	ed9d 0a01 	vldr	s0, [sp, #4]
 8015626:	ee30 0a47 	vsub.f32	s0, s0, s14
 801562a:	e7de      	b.n	80155ea <rintf+0x62>
 801562c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015630:	d3db      	bcc.n	80155ea <rintf+0x62>
 8015632:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015636:	e7d8      	b.n	80155ea <rintf+0x62>
 8015638:	08015e08 	.word	0x08015e08
 801563c:	007fffff 	.word	0x007fffff

08015640 <scalbnf>:
 8015640:	ee10 3a10 	vmov	r3, s0
 8015644:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8015648:	d025      	beq.n	8015696 <scalbnf+0x56>
 801564a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801564e:	d302      	bcc.n	8015656 <scalbnf+0x16>
 8015650:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015654:	4770      	bx	lr
 8015656:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801565a:	d122      	bne.n	80156a2 <scalbnf+0x62>
 801565c:	4b2a      	ldr	r3, [pc, #168]	; (8015708 <scalbnf+0xc8>)
 801565e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801570c <scalbnf+0xcc>
 8015662:	4298      	cmp	r0, r3
 8015664:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015668:	db16      	blt.n	8015698 <scalbnf+0x58>
 801566a:	ee10 3a10 	vmov	r3, s0
 801566e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015672:	3a19      	subs	r2, #25
 8015674:	4402      	add	r2, r0
 8015676:	2afe      	cmp	r2, #254	; 0xfe
 8015678:	dd15      	ble.n	80156a6 <scalbnf+0x66>
 801567a:	ee10 3a10 	vmov	r3, s0
 801567e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8015710 <scalbnf+0xd0>
 8015682:	eddf 6a24 	vldr	s13, [pc, #144]	; 8015714 <scalbnf+0xd4>
 8015686:	2b00      	cmp	r3, #0
 8015688:	eeb0 7a67 	vmov.f32	s14, s15
 801568c:	bfb8      	it	lt
 801568e:	eef0 7a66 	vmovlt.f32	s15, s13
 8015692:	ee27 0a27 	vmul.f32	s0, s14, s15
 8015696:	4770      	bx	lr
 8015698:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015718 <scalbnf+0xd8>
 801569c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80156a0:	4770      	bx	lr
 80156a2:	0dd2      	lsrs	r2, r2, #23
 80156a4:	e7e6      	b.n	8015674 <scalbnf+0x34>
 80156a6:	2a00      	cmp	r2, #0
 80156a8:	dd06      	ble.n	80156b8 <scalbnf+0x78>
 80156aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80156ae:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80156b2:	ee00 3a10 	vmov	s0, r3
 80156b6:	4770      	bx	lr
 80156b8:	f112 0f16 	cmn.w	r2, #22
 80156bc:	da1a      	bge.n	80156f4 <scalbnf+0xb4>
 80156be:	f24c 3350 	movw	r3, #50000	; 0xc350
 80156c2:	4298      	cmp	r0, r3
 80156c4:	ee10 3a10 	vmov	r3, s0
 80156c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80156cc:	dd0a      	ble.n	80156e4 <scalbnf+0xa4>
 80156ce:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8015710 <scalbnf+0xd0>
 80156d2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8015714 <scalbnf+0xd4>
 80156d6:	eef0 7a40 	vmov.f32	s15, s0
 80156da:	2b00      	cmp	r3, #0
 80156dc:	bf18      	it	ne
 80156de:	eeb0 0a47 	vmovne.f32	s0, s14
 80156e2:	e7db      	b.n	801569c <scalbnf+0x5c>
 80156e4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8015718 <scalbnf+0xd8>
 80156e8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801571c <scalbnf+0xdc>
 80156ec:	eef0 7a40 	vmov.f32	s15, s0
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	e7f3      	b.n	80156dc <scalbnf+0x9c>
 80156f4:	3219      	adds	r2, #25
 80156f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80156fa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80156fe:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015720 <scalbnf+0xe0>
 8015702:	ee07 3a10 	vmov	s14, r3
 8015706:	e7c4      	b.n	8015692 <scalbnf+0x52>
 8015708:	ffff3cb0 	.word	0xffff3cb0
 801570c:	4c000000 	.word	0x4c000000
 8015710:	7149f2ca 	.word	0x7149f2ca
 8015714:	f149f2ca 	.word	0xf149f2ca
 8015718:	0da24260 	.word	0x0da24260
 801571c:	8da24260 	.word	0x8da24260
 8015720:	33000000 	.word	0x33000000

08015724 <_init>:
 8015724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015726:	bf00      	nop
 8015728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801572a:	bc08      	pop	{r3}
 801572c:	469e      	mov	lr, r3
 801572e:	4770      	bx	lr

08015730 <_fini>:
 8015730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015732:	bf00      	nop
 8015734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015736:	bc08      	pop	{r3}
 8015738:	469e      	mov	lr, r3
 801573a:	4770      	bx	lr
