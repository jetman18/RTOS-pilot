
RTOSpilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012dd4  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  08012fc4  08012fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801374c  0801374c  000150b0  2**0
                  CONTENTS
  4 .ARM          00000000  0801374c  0801374c  000150b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801374c  0801374c  000150b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801374c  0801374c  0001474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013750  08013750  00014750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  08013754  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cbc  200000b0  08013804  000150b0  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20002d6c  08013804  00015d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000150b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000292ff  00000000  00000000  000150d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007086  00000000  00000000  0003e3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022d8  00000000  00000000  00045460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ad1  00000000  00000000  00047738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b777  00000000  00000000  00049209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034097  00000000  00000000  00054980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2883  00000000  00000000  00088a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b29a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000953c  00000000  00000000  0015b2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0016481c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000b0 	.word	0x200000b0
 800020c:	00000000 	.word	0x00000000
 8000210:	08012fac 	.word	0x08012fac

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000b4 	.word	0x200000b4
 800022c:	08012fac 	.word	0x08012fac

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	@ 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_fmul>:
 8000e14:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e1c:	bf1e      	ittt	ne
 8000e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e22:	ea92 0f0c 	teqne	r2, ip
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d06f      	beq.n	8000f0c <__aeabi_fmul+0xf8>
 8000e2c:	441a      	add	r2, r3
 8000e2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e32:	0240      	lsls	r0, r0, #9
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3a:	d01e      	beq.n	8000e7a <__aeabi_fmul+0x66>
 8000e3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e48:	fba0 3101 	umull	r3, r1, r0, r1
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e50:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e54:	bf3e      	ittt	cc
 8000e56:	0049      	lslcc	r1, r1, #1
 8000e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	ea40 0001 	orr.w	r0, r0, r1
 8000e62:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e66:	2afd      	cmp	r2, #253	@ 0xfd
 8000e68:	d81d      	bhi.n	8000ea6 <__aeabi_fmul+0x92>
 8000e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e72:	bf08      	it	eq
 8000e74:	f020 0001 	biceq.w	r0, r0, #1
 8000e78:	4770      	bx	lr
 8000e7a:	f090 0f00 	teq	r0, #0
 8000e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	0249      	lsleq	r1, r1, #9
 8000e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e90:	bfc2      	ittt	gt
 8000e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9a:	4770      	bxgt	lr
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	dc5d      	bgt.n	8000f64 <__aeabi_fmul+0x150>
 8000ea8:	f112 0f19 	cmn.w	r2, #25
 8000eac:	bfdc      	itt	le
 8000eae:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000eb2:	4770      	bxle	lr
 8000eb4:	f1c2 0200 	rsb	r2, r2, #0
 8000eb8:	0041      	lsls	r1, r0, #1
 8000eba:	fa21 f102 	lsr.w	r1, r1, r2
 8000ebe:	f1c2 0220 	rsb	r2, r2, #32
 8000ec2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eca:	f140 0000 	adc.w	r0, r0, #0
 8000ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed2:	bf08      	it	eq
 8000ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed8:	4770      	bx	lr
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xce>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fmul+0xe6>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e78f      	b.n	8000e2c <__aeabi_fmul+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	bf18      	it	ne
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d00a      	beq.n	8000f32 <__aeabi_fmul+0x11e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	d1d8      	bne.n	8000eda <__aeabi_fmul+0xc6>
 8000f28:	ea80 0001 	eor.w	r0, r0, r1
 8000f2c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f090 0f00 	teq	r0, #0
 8000f36:	bf17      	itett	ne
 8000f38:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f3c:	4608      	moveq	r0, r1
 8000f3e:	f091 0f00 	teqne	r1, #0
 8000f42:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f46:	d014      	beq.n	8000f72 <__aeabi_fmul+0x15e>
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_fmul+0x13e>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d10f      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f52:	ea93 0f0c 	teq	r3, ip
 8000f56:	d103      	bne.n	8000f60 <__aeabi_fmul+0x14c>
 8000f58:	024b      	lsls	r3, r1, #9
 8000f5a:	bf18      	it	ne
 8000f5c:	4608      	movne	r0, r1
 8000f5e:	d108      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f70:	4770      	bx	lr
 8000f72:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f76:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_fdiv>:
 8000f7c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f84:	bf1e      	ittt	ne
 8000f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8a:	ea92 0f0c 	teqne	r2, ip
 8000f8e:	ea93 0f0c 	teqne	r3, ip
 8000f92:	d069      	beq.n	8001068 <__aeabi_fdiv+0xec>
 8000f94:	eba2 0203 	sub.w	r2, r2, r3
 8000f98:	ea80 0c01 	eor.w	ip, r0, r1
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa2:	d037      	beq.n	8001014 <__aeabi_fdiv+0x98>
 8000fa4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	bf38      	it	cc
 8000fb8:	005b      	lslcc	r3, r3, #1
 8000fba:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000fbe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	bf24      	itt	cs
 8000fc6:	1a5b      	subcs	r3, r3, r1
 8000fc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd0:	bf24      	itt	cs
 8000fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fde:	bf24      	itt	cs
 8000fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fec:	bf24      	itt	cs
 8000fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	bf18      	it	ne
 8000ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffe:	d1e0      	bne.n	8000fc2 <__aeabi_fdiv+0x46>
 8001000:	2afd      	cmp	r2, #253	@ 0xfd
 8001002:	f63f af50 	bhi.w	8000ea6 <__aeabi_fmul+0x92>
 8001006:	428b      	cmp	r3, r1
 8001008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800100c:	bf08      	it	eq
 800100e:	f020 0001 	biceq.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800101c:	327f      	adds	r2, #127	@ 0x7f
 800101e:	bfc2      	ittt	gt
 8001020:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001028:	4770      	bxgt	lr
 800102a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	3a01      	subs	r2, #1
 8001034:	e737      	b.n	8000ea6 <__aeabi_fmul+0x92>
 8001036:	f092 0f00 	teq	r2, #0
 800103a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0040      	lsleq	r0, r0, #1
 8001042:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001046:	3a01      	subeq	r2, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xc2>
 800104a:	ea40 000c 	orr.w	r0, r0, ip
 800104e:	f093 0f00 	teq	r3, #0
 8001052:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001056:	bf02      	ittt	eq
 8001058:	0049      	lsleq	r1, r1, #1
 800105a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800105e:	3b01      	subeq	r3, #1
 8001060:	d0f9      	beq.n	8001056 <__aeabi_fdiv+0xda>
 8001062:	ea41 010c 	orr.w	r1, r1, ip
 8001066:	e795      	b.n	8000f94 <__aeabi_fdiv+0x18>
 8001068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d108      	bne.n	8001084 <__aeabi_fdiv+0x108>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	f47f af7d 	bne.w	8000f72 <__aeabi_fmul+0x15e>
 8001078:	ea93 0f0c 	teq	r3, ip
 800107c:	f47f af70 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 8001080:	4608      	mov	r0, r1
 8001082:	e776      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	d104      	bne.n	8001094 <__aeabi_fdiv+0x118>
 800108a:	024b      	lsls	r3, r1, #9
 800108c:	f43f af4c 	beq.w	8000f28 <__aeabi_fmul+0x114>
 8001090:	4608      	mov	r0, r1
 8001092:	e76e      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001094:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001098:	bf18      	it	ne
 800109a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	d1ca      	bne.n	8001036 <__aeabi_fdiv+0xba>
 80010a0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010a4:	f47f af5c 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 80010a8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ac:	f47f af3c 	bne.w	8000f28 <__aeabi_fmul+0x114>
 80010b0:	e75f      	b.n	8000f72 <__aeabi_fmul+0x15e>
 80010b2:	bf00      	nop

080010b4 <__gesf2>:
 80010b4:	f04f 3cff 	mov.w	ip, #4294967295
 80010b8:	e006      	b.n	80010c8 <__cmpsf2+0x4>
 80010ba:	bf00      	nop

080010bc <__lesf2>:
 80010bc:	f04f 0c01 	mov.w	ip, #1
 80010c0:	e002      	b.n	80010c8 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__cmpsf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d8:	bf18      	it	ne
 80010da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010de:	d011      	beq.n	8001104 <__cmpsf2+0x40>
 80010e0:	b001      	add	sp, #4
 80010e2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e6:	bf18      	it	ne
 80010e8:	ea90 0f01 	teqne	r0, r1
 80010ec:	bf58      	it	pl
 80010ee:	ebb2 0003 	subspl.w	r0, r2, r3
 80010f2:	bf88      	it	hi
 80010f4:	17c8      	asrhi	r0, r1, #31
 80010f6:	bf38      	it	cc
 80010f8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010fc:	bf18      	it	ne
 80010fe:	f040 0001 	orrne.w	r0, r0, #1
 8001102:	4770      	bx	lr
 8001104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001108:	d102      	bne.n	8001110 <__cmpsf2+0x4c>
 800110a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110e:	d105      	bne.n	800111c <__cmpsf2+0x58>
 8001110:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001114:	d1e4      	bne.n	80010e0 <__cmpsf2+0x1c>
 8001116:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111a:	d0e1      	beq.n	80010e0 <__cmpsf2+0x1c>
 800111c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <__aeabi_cfrcmple>:
 8001124:	4684      	mov	ip, r0
 8001126:	4608      	mov	r0, r1
 8001128:	4661      	mov	r1, ip
 800112a:	e7ff      	b.n	800112c <__aeabi_cfcmpeq>

0800112c <__aeabi_cfcmpeq>:
 800112c:	b50f      	push	{r0, r1, r2, r3, lr}
 800112e:	f7ff ffc9 	bl	80010c4 <__cmpsf2>
 8001132:	2800      	cmp	r0, #0
 8001134:	bf48      	it	mi
 8001136:	f110 0f00 	cmnmi.w	r0, #0
 800113a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800113c <__aeabi_fcmpeq>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff fff4 	bl	800112c <__aeabi_cfcmpeq>
 8001144:	bf0c      	ite	eq
 8001146:	2001      	moveq	r0, #1
 8001148:	2000      	movne	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmplt>:
 8001150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001154:	f7ff ffea 	bl	800112c <__aeabi_cfcmpeq>
 8001158:	bf34      	ite	cc
 800115a:	2001      	movcc	r0, #1
 800115c:	2000      	movcs	r0, #0
 800115e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001162:	bf00      	nop

08001164 <__aeabi_fcmple>:
 8001164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001168:	f7ff ffe0 	bl	800112c <__aeabi_cfcmpeq>
 800116c:	bf94      	ite	ls
 800116e:	2001      	movls	r0, #1
 8001170:	2000      	movhi	r0, #0
 8001172:	f85d fb08 	ldr.w	pc, [sp], #8
 8001176:	bf00      	nop

08001178 <__aeabi_fcmpge>:
 8001178:	f84d ed08 	str.w	lr, [sp, #-8]!
 800117c:	f7ff ffd2 	bl	8001124 <__aeabi_cfrcmple>
 8001180:	bf94      	ite	ls
 8001182:	2001      	movls	r0, #1
 8001184:	2000      	movhi	r0, #0
 8001186:	f85d fb08 	ldr.w	pc, [sp], #8
 800118a:	bf00      	nop

0800118c <__aeabi_fcmpgt>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff ffc8 	bl	8001124 <__aeabi_cfrcmple>
 8001194:	bf34      	ite	cc
 8001196:	2001      	movcc	r0, #1
 8001198:	2000      	movcs	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_fcmpun>:
 80011a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011ac:	d102      	bne.n	80011b4 <__aeabi_fcmpun+0x14>
 80011ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011b2:	d108      	bne.n	80011c6 <__aeabi_fcmpun+0x26>
 80011b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011b8:	d102      	bne.n	80011c0 <__aeabi_fcmpun+0x20>
 80011ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011be:	d102      	bne.n	80011c6 <__aeabi_fcmpun+0x26>
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	f04f 0001 	mov.w	r0, #1
 80011ca:	4770      	bx	lr

080011cc <__aeabi_f2iz>:
 80011cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011d4:	d30f      	bcc.n	80011f6 <__aeabi_f2iz+0x2a>
 80011d6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011de:	d90d      	bls.n	80011fc <__aeabi_f2iz+0x30>
 80011e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011e8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80011ec:	fa23 f002 	lsr.w	r0, r3, r2
 80011f0:	bf18      	it	ne
 80011f2:	4240      	negne	r0, r0
 80011f4:	4770      	bx	lr
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001200:	d101      	bne.n	8001206 <__aeabi_f2iz+0x3a>
 8001202:	0242      	lsls	r2, r0, #9
 8001204:	d105      	bne.n	8001212 <__aeabi_f2iz+0x46>
 8001206:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800120a:	bf08      	it	eq
 800120c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr

08001218 <__aeabi_f2uiz>:
 8001218:	0042      	lsls	r2, r0, #1
 800121a:	d20e      	bcs.n	800123a <__aeabi_f2uiz+0x22>
 800121c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001220:	d30b      	bcc.n	800123a <__aeabi_f2uiz+0x22>
 8001222:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001226:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800122a:	d409      	bmi.n	8001240 <__aeabi_f2uiz+0x28>
 800122c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001230:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001234:	fa23 f002 	lsr.w	r0, r3, r2
 8001238:	4770      	bx	lr
 800123a:	f04f 0000 	mov.w	r0, #0
 800123e:	4770      	bx	lr
 8001240:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001244:	d101      	bne.n	800124a <__aeabi_f2uiz+0x32>
 8001246:	0242      	lsls	r2, r0, #9
 8001248:	d102      	bne.n	8001250 <__aeabi_f2uiz+0x38>
 800124a:	f04f 30ff 	mov.w	r0, #4294967295
 800124e:	4770      	bx	lr
 8001250:	f04f 0000 	mov.w	r0, #0
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e008      	b.n	8001278 <ibus_init+0x20>
      ibusChannelData[i] = 1000;
 8001266:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <ibus_init+0x44>)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800126e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3301      	adds	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b0d      	cmp	r3, #13
 800127c:	ddf3      	ble.n	8001266 <ibus_init+0xe>
    }
	uart = uartt;
 800127e:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <ibus_init+0x48>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <ibus_init+0x48>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2201      	movs	r2, #1
 800128a:	4906      	ldr	r1, [pc, #24]	@ (80012a4 <ibus_init+0x4c>)
 800128c:	4618      	mov	r0, r3
 800128e:	f00a f836 	bl	800b2fe <HAL_UART_Receive_IT>
#endif
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200000d0 	.word	0x200000d0
 80012a0:	2000012c 	.word	0x2000012c
 80012a4:	20000128 	.word	0x20000128

080012a8 <ibus_uart_port>:

UART_HandleTypeDef *ibus_uart_port(){
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
   return uart;
 80012ac:	4b02      	ldr	r3, [pc, #8]	@ (80012b8 <ibus_uart_port+0x10>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	2000012c 	.word	0x2000012c

080012bc <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <ibus_calback+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f80d 	bl	80012e4 <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 80012ca:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <ibus_calback+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2201      	movs	r2, #1
 80012d0:	4902      	ldr	r1, [pc, #8]	@ (80012dc <ibus_calback+0x20>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f00a f813 	bl	800b2fe <HAL_UART_Receive_IT>
#endif

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000128 	.word	0x20000128
 80012e0:	2000012c 	.word	0x2000012c

080012e4 <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 80012ee:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <ibusDataReceive+0x78>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001360 <ibusDataReceive+0x7c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 80012fe:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <ibusDataReceive+0x80>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800130a:	4293      	cmp	r3, r2
 800130c:	d902      	bls.n	8001314 <ibusDataReceive+0x30>
        ibusFramePosition = 0;
 800130e:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <ibusDataReceive+0x84>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 8001314:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <ibusDataReceive+0x80>)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 800131a:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <ibusDataReceive+0x84>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <ibusDataReceive+0x44>
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b20      	cmp	r3, #32
 8001326:	d114      	bne.n	8001352 <ibusDataReceive+0x6e>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <ibusDataReceive+0x84>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <ibusDataReceive+0x88>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <ibusDataReceive+0x84>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b1f      	cmp	r3, #31
 800133a:	d103      	bne.n	8001344 <ibusDataReceive+0x60>
        ibusFrameDone = TRUE;
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <ibusDataReceive+0x8c>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	e007      	b.n	8001354 <ibusDataReceive+0x70>
    } else {
        ibusFramePosition++;
 8001344:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <ibusDataReceive+0x84>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <ibusDataReceive+0x84>)
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	e000      	b.n	8001354 <ibusDataReceive+0x70>
        return;
 8001352:	bf00      	nop
    }
}
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	20000534 	.word	0x20000534
 8001360:	20000538 	.word	0x20000538
 8001364:	20000130 	.word	0x20000130
 8001368:	20000134 	.word	0x20000134
 800136c:	20000108 	.word	0x20000108
 8001370:	200000cc 	.word	0x200000cc

08001374 <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 800137a:	4b63      	ldr	r3, [pc, #396]	@ (8001508 <ibusFrameComplete+0x194>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 80bb 	beq.w	80014fa <ibusFrameComplete+0x186>
        ibusFrameDone = FALSE;
 8001384:	4b60      	ldr	r3, [pc, #384]	@ (8001508 <ibusFrameComplete+0x194>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 800138a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800138e:	81bb      	strh	r3, [r7, #12]

        for (i = 0; i < 30; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e009      	b.n	80013aa <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	4a5c      	ldr	r2, [pc, #368]	@ (800150c <ibusFrameComplete+0x198>)
 800139a:	5cd3      	ldrb	r3, [r2, r3]
 800139c:	461a      	mov	r2, r3
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 30; i++)
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	3301      	adds	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b1d      	cmp	r3, #29
 80013ae:	d9f2      	bls.n	8001396 <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 80013b0:	4b56      	ldr	r3, [pc, #344]	@ (800150c <ibusFrameComplete+0x198>)
 80013b2:	7f9b      	ldrb	r3, [r3, #30]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b55      	ldr	r3, [pc, #340]	@ (800150c <ibusFrameComplete+0x198>)
 80013b8:	7fdb      	ldrb	r3, [r3, #31]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b29b      	uxth	r3, r3
 80013be:	4413      	add	r3, r2
 80013c0:	80fb      	strh	r3, [r7, #6]

        if (chksum == rxsum) {
 80013c2:	89ba      	ldrh	r2, [r7, #12]
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	f040 8097 	bne.w	80014fa <ibusFrameComplete+0x186>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 80013cc:	4b4f      	ldr	r3, [pc, #316]	@ (800150c <ibusFrameComplete+0x198>)
 80013ce:	78db      	ldrb	r3, [r3, #3]
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	4a4e      	ldr	r2, [pc, #312]	@ (800150c <ibusFrameComplete+0x198>)
 80013d4:	7892      	ldrb	r2, [r2, #2]
 80013d6:	4413      	add	r3, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	4b4d      	ldr	r3, [pc, #308]	@ (8001510 <ibusFrameComplete+0x19c>)
 80013dc:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 80013de:	4b4b      	ldr	r3, [pc, #300]	@ (800150c <ibusFrameComplete+0x198>)
 80013e0:	795b      	ldrb	r3, [r3, #5]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	4a49      	ldr	r2, [pc, #292]	@ (800150c <ibusFrameComplete+0x198>)
 80013e6:	7912      	ldrb	r2, [r2, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b48      	ldr	r3, [pc, #288]	@ (8001510 <ibusFrameComplete+0x19c>)
 80013ee:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 80013f0:	4b46      	ldr	r3, [pc, #280]	@ (800150c <ibusFrameComplete+0x198>)
 80013f2:	79db      	ldrb	r3, [r3, #7]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	4a45      	ldr	r2, [pc, #276]	@ (800150c <ibusFrameComplete+0x198>)
 80013f8:	7992      	ldrb	r2, [r2, #6]
 80013fa:	4413      	add	r3, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b44      	ldr	r3, [pc, #272]	@ (8001510 <ibusFrameComplete+0x19c>)
 8001400:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 8001402:	4b42      	ldr	r3, [pc, #264]	@ (800150c <ibusFrameComplete+0x198>)
 8001404:	7a5b      	ldrb	r3, [r3, #9]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	4a40      	ldr	r2, [pc, #256]	@ (800150c <ibusFrameComplete+0x198>)
 800140a:	7a12      	ldrb	r2, [r2, #8]
 800140c:	4413      	add	r3, r2
 800140e:	461a      	mov	r2, r3
 8001410:	4b3f      	ldr	r3, [pc, #252]	@ (8001510 <ibusFrameComplete+0x19c>)
 8001412:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 8001414:	4b3d      	ldr	r3, [pc, #244]	@ (800150c <ibusFrameComplete+0x198>)
 8001416:	7adb      	ldrb	r3, [r3, #11]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	4a3c      	ldr	r2, [pc, #240]	@ (800150c <ibusFrameComplete+0x198>)
 800141c:	7a92      	ldrb	r2, [r2, #10]
 800141e:	4413      	add	r3, r2
 8001420:	461a      	mov	r2, r3
 8001422:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <ibusFrameComplete+0x19c>)
 8001424:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 8001426:	4b39      	ldr	r3, [pc, #228]	@ (800150c <ibusFrameComplete+0x198>)
 8001428:	7b5b      	ldrb	r3, [r3, #13]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	4a37      	ldr	r2, [pc, #220]	@ (800150c <ibusFrameComplete+0x198>)
 800142e:	7b12      	ldrb	r2, [r2, #12]
 8001430:	4413      	add	r3, r2
 8001432:	461a      	mov	r2, r3
 8001434:	4b36      	ldr	r3, [pc, #216]	@ (8001510 <ibusFrameComplete+0x19c>)
 8001436:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 8001438:	4b34      	ldr	r3, [pc, #208]	@ (800150c <ibusFrameComplete+0x198>)
 800143a:	7bdb      	ldrb	r3, [r3, #15]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	4a33      	ldr	r2, [pc, #204]	@ (800150c <ibusFrameComplete+0x198>)
 8001440:	7b92      	ldrb	r2, [r2, #14]
 8001442:	4413      	add	r3, r2
 8001444:	461a      	mov	r2, r3
 8001446:	4b32      	ldr	r3, [pc, #200]	@ (8001510 <ibusFrameComplete+0x19c>)
 8001448:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 800144a:	4b30      	ldr	r3, [pc, #192]	@ (800150c <ibusFrameComplete+0x198>)
 800144c:	7c5b      	ldrb	r3, [r3, #17]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	4a2e      	ldr	r2, [pc, #184]	@ (800150c <ibusFrameComplete+0x198>)
 8001452:	7c12      	ldrb	r2, [r2, #16]
 8001454:	4413      	add	r3, r2
 8001456:	461a      	mov	r2, r3
 8001458:	4b2d      	ldr	r3, [pc, #180]	@ (8001510 <ibusFrameComplete+0x19c>)
 800145a:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 800145c:	4b2b      	ldr	r3, [pc, #172]	@ (800150c <ibusFrameComplete+0x198>)
 800145e:	7cdb      	ldrb	r3, [r3, #19]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	4a2a      	ldr	r2, [pc, #168]	@ (800150c <ibusFrameComplete+0x198>)
 8001464:	7c92      	ldrb	r2, [r2, #18]
 8001466:	4413      	add	r3, r2
 8001468:	461a      	mov	r2, r3
 800146a:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <ibusFrameComplete+0x19c>)
 800146c:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 800146e:	4b27      	ldr	r3, [pc, #156]	@ (800150c <ibusFrameComplete+0x198>)
 8001470:	7d5b      	ldrb	r3, [r3, #21]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	4a25      	ldr	r2, [pc, #148]	@ (800150c <ibusFrameComplete+0x198>)
 8001476:	7d12      	ldrb	r2, [r2, #20]
 8001478:	4413      	add	r3, r2
 800147a:	461a      	mov	r2, r3
 800147c:	4b24      	ldr	r3, [pc, #144]	@ (8001510 <ibusFrameComplete+0x19c>)
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
            ibusChannelData[10] = (ibus[23] << 8) + ibus[22];
 8001480:	4b22      	ldr	r3, [pc, #136]	@ (800150c <ibusFrameComplete+0x198>)
 8001482:	7ddb      	ldrb	r3, [r3, #23]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	4a21      	ldr	r2, [pc, #132]	@ (800150c <ibusFrameComplete+0x198>)
 8001488:	7d92      	ldrb	r2, [r2, #22]
 800148a:	4413      	add	r3, r2
 800148c:	461a      	mov	r2, r3
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <ibusFrameComplete+0x19c>)
 8001490:	629a      	str	r2, [r3, #40]	@ 0x28
			ibusChannelData[11] = (ibus[25] << 8) + ibus[24];
 8001492:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <ibusFrameComplete+0x198>)
 8001494:	7e5b      	ldrb	r3, [r3, #25]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	4a1c      	ldr	r2, [pc, #112]	@ (800150c <ibusFrameComplete+0x198>)
 800149a:	7e12      	ldrb	r2, [r2, #24]
 800149c:	4413      	add	r3, r2
 800149e:	461a      	mov	r2, r3
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <ibusFrameComplete+0x19c>)
 80014a2:	62da      	str	r2, [r3, #44]	@ 0x2c
			ibusChannelData[12] = (ibus[27] << 8) + ibus[26];
 80014a4:	4b19      	ldr	r3, [pc, #100]	@ (800150c <ibusFrameComplete+0x198>)
 80014a6:	7edb      	ldrb	r3, [r3, #27]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	4a18      	ldr	r2, [pc, #96]	@ (800150c <ibusFrameComplete+0x198>)
 80014ac:	7e92      	ldrb	r2, [r2, #26]
 80014ae:	4413      	add	r3, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <ibusFrameComplete+0x19c>)
 80014b4:	631a      	str	r2, [r3, #48]	@ 0x30
			ibusChannelData[13] = (ibus[29] << 8) + ibus[28];
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <ibusFrameComplete+0x198>)
 80014b8:	7f5b      	ldrb	r3, [r3, #29]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	4a13      	ldr	r2, [pc, #76]	@ (800150c <ibusFrameComplete+0x198>)
 80014be:	7f12      	ldrb	r2, [r2, #28]
 80014c0:	4413      	add	r3, r2
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <ibusFrameComplete+0x19c>)
 80014c6:	635a      	str	r2, [r3, #52]	@ 0x34
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	e010      	b.n	80014f0 <ibusFrameComplete+0x17c>
			    if(ibusChannelData[i] > 2100){
 80014ce:	4a10      	ldr	r2, [pc, #64]	@ (8001510 <ibusFrameComplete+0x19c>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d6:	f640 0234 	movw	r2, #2100	@ 0x834
 80014da:	4293      	cmp	r3, r2
 80014dc:	d905      	bls.n	80014ea <ibusFrameComplete+0x176>
				    ibusChannelData[i] = 1000;
 80014de:	4a0c      	ldr	r2, [pc, #48]	@ (8001510 <ibusFrameComplete+0x19c>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	3301      	adds	r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b0d      	cmp	r3, #13
 80014f4:	ddeb      	ble.n	80014ce <ibusFrameComplete+0x15a>
				}
			}
            return TRUE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <ibusFrameComplete+0x188>
        }
    }
    return FALSE;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200000cc 	.word	0x200000cc
 800150c:	20000108 	.word	0x20000108
 8001510:	200000d0 	.word	0x200000d0

08001514 <mpu6050Connection>:

/* Check mpu6050 connection
 * return 1 -> not connected
 * return 0 -> connected
 */ 
int8_t mpu6050Connection(){
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
    isConnected = HAL_I2C_IsDeviceReady(i2c,IMU_DEV_ADDRES, 3, 5);
 8001518:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <mpu6050Connection+0x24>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	2305      	movs	r3, #5
 800151e:	2203      	movs	r2, #3
 8001520:	21d0      	movs	r1, #208	@ 0xd0
 8001522:	f006 fc49 	bl	8007db8 <HAL_I2C_IsDeviceReady>
 8001526:	4603      	mov	r3, r0
 8001528:	b25a      	sxtb	r2, r3
 800152a:	4b04      	ldr	r3, [pc, #16]	@ (800153c <mpu6050Connection+0x28>)
 800152c:	701a      	strb	r2, [r3, #0]
    return isConnected;
 800152e:	4b03      	ldr	r3, [pc, #12]	@ (800153c <mpu6050Connection+0x28>)
 8001530:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000138 	.word	0x20000138
 800153c:	2000013c 	.word	0x2000013c

08001540 <mpu6050_init>:
}

/* configuration mpu6050*/


int8_t mpu6050_init(I2C_HandleTypeDef *hi2c){
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af02      	add	r7, sp, #8
 8001546:	6078      	str	r0, [r7, #4]
	data[1] = (uint8_t)(ACC_2G<<3);
    SPI_write(&data,2);
	return 0;
#endif
#ifdef I2C
  i2c = hi2c;	
 8001548:	4a25      	ldr	r2, [pc, #148]	@ (80015e0 <mpu6050_init+0xa0>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
	int8_t k = mpu6050Connection();
 800154e:	f7ff ffe1 	bl	8001514 <mpu6050Connection>
 8001552:	4603      	mov	r3, r0
 8001554:	73fb      	strb	r3, [r7, #15]
	if(!k){
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d13a      	bne.n	80015d4 <mpu6050_init+0x94>
		uint8_t buffer[6];	
		buffer[0] = MPU_RA_PWR_MGMT_1; 
 800155e:	236b      	movs	r3, #107	@ 0x6b
 8001560:	723b      	strb	r3, [r7, #8]
		buffer[1] = RESET_REG;
 8001562:	2300      	movs	r3, #0
 8001564:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001566:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <mpu6050_init+0xa0>)
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	f107 0208 	add.w	r2, r7, #8
 800156e:	2301      	movs	r3, #1
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2302      	movs	r3, #2
 8001574:	21d0      	movs	r1, #208	@ 0xd0
 8001576:	f005 fd53 	bl	8007020 <HAL_I2C_Master_Transmit>
		
		//buffer[0] = CONFIGURATION;
		//buffer[1] = (HZ_5<<0);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);

		buffer[0] = GYRO_REG_CONFIG;
 800157a:	231b      	movs	r3, #27
 800157c:	723b      	strb	r3, [r7, #8]
		buffer[1] = (GYRO_1000dps<<3);
 800157e:	2310      	movs	r3, #16
 8001580:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001582:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <mpu6050_init+0xa0>)
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	f107 0208 	add.w	r2, r7, #8
 800158a:	2301      	movs	r3, #1
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2302      	movs	r3, #2
 8001590:	21d0      	movs	r1, #208	@ 0xd0
 8001592:	f005 fd45 	bl	8007020 <HAL_I2C_Master_Transmit>

		buffer[0] = ACC_REG_CONFIG;
 8001596:	231c      	movs	r3, #28
 8001598:	723b      	strb	r3, [r7, #8]
		buffer[1] = (ACC_16G<<3);
 800159a:	2318      	movs	r3, #24
 800159c:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <mpu6050_init+0xa0>)
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	f107 0208 	add.w	r2, r7, #8
 80015a6:	2301      	movs	r3, #1
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2302      	movs	r3, #2
 80015ac:	21d0      	movs	r1, #208	@ 0xd0
 80015ae:	f005 fd37 	bl	8007020 <HAL_I2C_Master_Transmit>
		//buffer[1] &= ~(1<<5);
		//buffer[1] |= (1<<5);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
		
		// set aux i2c pass through mode 
		buffer[0] = INT_PIN_CFG;
 80015b2:	2337      	movs	r3, #55	@ 0x37
 80015b4:	723b      	strb	r3, [r7, #8]
		buffer[1] |= (1<<1);
 80015b6:	7a7b      	ldrb	r3, [r7, #9]
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80015c0:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <mpu6050_init+0xa0>)
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	f107 0208 	add.w	r2, r7, #8
 80015c8:	2301      	movs	r3, #1
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2302      	movs	r3, #2
 80015ce:	21d0      	movs	r1, #208	@ 0xd0
 80015d0:	f005 fd26 	bl	8007020 <HAL_I2C_Master_Transmit>

	}
	return k;
 80015d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
#endif

}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000138 	.word	0x20000138

080015e4 <mpu6050_gyro_get_raw>:
/* Gyro get raw data (Lbs/s)
 * x - rate
 * y - rate
 * z - rate   
 */
void mpu6050_gyro_get_raw(axis3_t *raw){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	6078      	str	r0, [r7, #4]
	  uint8_t buffe[6];
	  buffe[0] = (uint8_t)GYRO_DATA_REG;
 80015ec:	2343      	movs	r3, #67	@ 0x43
 80015ee:	723b      	strb	r3, [r7, #8]

#ifdef I2C
	  HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 80015f0:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <mpu6050_gyro_get_raw+0x74>)
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f107 0208 	add.w	r2, r7, #8
 80015f8:	2301      	movs	r3, #1
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2301      	movs	r3, #1
 80015fe:	21d0      	movs	r1, #208	@ 0xd0
 8001600:	f005 fd0e 	bl	8007020 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <mpu6050_gyro_get_raw+0x74>)
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	f107 0208 	add.w	r2, r7, #8
 800160c:	2301      	movs	r3, #1
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2306      	movs	r3, #6
 8001612:	21d0      	movs	r1, #208	@ 0xd0
 8001614:	f005 fe02 	bl	800721c <HAL_I2C_Master_Receive>
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&SPI_PORT,&buffe[0],1,1);
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
#endif
	  raw->x = (int16_t)buffe[0]<<8|buffe[1];
 8001618:	7a3b      	ldrb	r3, [r7, #8]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	b21a      	sxth	r2, r3
 800161e:	7a7b      	ldrb	r3, [r7, #9]
 8001620:	b21b      	sxth	r3, r3
 8001622:	4313      	orrs	r3, r2
 8001624:	b21a      	sxth	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	801a      	strh	r2, [r3, #0]
	  raw->y = (int16_t)buffe[2]<<8|buffe[3];
 800162a:	7abb      	ldrb	r3, [r7, #10]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	b21a      	sxth	r2, r3
 8001630:	7afb      	ldrb	r3, [r7, #11]
 8001632:	b21b      	sxth	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b21a      	sxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	805a      	strh	r2, [r3, #2]
	  raw->z = (int16_t)buffe[4]<<8|buffe[5];
 800163c:	7b3b      	ldrb	r3, [r7, #12]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21a      	sxth	r2, r3
 8001642:	7b7b      	ldrb	r3, [r7, #13]
 8001644:	b21b      	sxth	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	b21a      	sxth	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	809a      	strh	r2, [r3, #4]
	}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000138 	.word	0x20000138

0800165c <mpu6050_acc_get_raw>:
/* Acc get raw data
	*  x - axis
	*  y - axis
	*  z - axis   
	*/
void mpu6050_acc_get_raw(axis3_t *k){
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af02      	add	r7, sp, #8
 8001662:	6078      	str	r0, [r7, #4]
	axis3_t p_val =*k;
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	6810      	ldr	r0, [r2, #0]
 800166c:	6018      	str	r0, [r3, #0]
 800166e:	8892      	ldrh	r2, [r2, #4]
 8001670:	809a      	strh	r2, [r3, #4]
	uint8_t buffe[6];
	buffe[0] = (uint8_t)ACC_DATA_REG;
 8001672:	233b      	movs	r3, #59	@ 0x3b
 8001674:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 8001676:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <mpu6050_acc_get_raw+0x80>)
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	f107 0208 	add.w	r2, r7, #8
 800167e:	2301      	movs	r3, #1
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2301      	movs	r3, #1
 8001684:	21d0      	movs	r1, #208	@ 0xd0
 8001686:	f005 fccb 	bl	8007020 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 800168a:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <mpu6050_acc_get_raw+0x80>)
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	f107 0208 	add.w	r2, r7, #8
 8001692:	2301      	movs	r3, #1
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2306      	movs	r3, #6
 8001698:	21d0      	movs	r1, #208	@ 0xd0
 800169a:	f005 fdbf 	bl	800721c <HAL_I2C_Master_Receive>
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
*/
      SPI_read(buffe[0],buffe,14);
#endif
	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 800169e:	7a3b      	ldrb	r3, [r7, #8]
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	7a7b      	ldrb	r3, [r7, #9]
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 80016b0:	7abb      	ldrb	r3, [r7, #10]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	7afb      	ldrb	r3, [r7, #11]
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b21a      	sxth	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 80016c2:	7b3b      	ldrb	r3, [r7, #12]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	b21a      	sxth	r2, r3
 80016c8:	7b7b      	ldrb	r3, [r7, #13]
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	809a      	strh	r2, [r3, #4]
}
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000138 	.word	0x20000138

080016e0 <qmc5883_init>:
#include "../Lib/axis.h"

const uint8_t qmc_addres = (0x0d<<1);
static I2C_HandleTypeDef *qmc_i2cport;

void qmc5883_init(I2C_HandleTypeDef *i2cport){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	6078      	str	r0, [r7, #4]
	qmc_i2cport = i2cport;
 80016e8:	4a12      	ldr	r2, [pc, #72]	@ (8001734 <qmc5883_init+0x54>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
    uint8_t buf[2];
    buf[0]=0x0b;
 80016ee:	230b      	movs	r3, #11
 80016f0:	733b      	strb	r3, [r7, #12]
    buf[1]=0X01;
 80016f2:	2301      	movs	r3, #1
 80016f4:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 80016f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <qmc5883_init+0x54>)
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	231a      	movs	r3, #26
 80016fc:	4619      	mov	r1, r3
 80016fe:	f107 020c 	add.w	r2, r7, #12
 8001702:	2301      	movs	r3, #1
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2302      	movs	r3, #2
 8001708:	f005 fc8a 	bl	8007020 <HAL_I2C_Master_Transmit>
    buf[0]=0x09;
 800170c:	2309      	movs	r3, #9
 800170e:	733b      	strb	r3, [r7, #12]
    buf[1]=0X1D;
 8001710:	231d      	movs	r3, #29
 8001712:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8001714:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <qmc5883_init+0x54>)
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	231a      	movs	r3, #26
 800171a:	4619      	mov	r1, r3
 800171c:	f107 020c 	add.w	r2, r7, #12
 8001720:	2301      	movs	r3, #1
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2302      	movs	r3, #2
 8001726:	f005 fc7b 	bl	8007020 <HAL_I2C_Master_Transmit>
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000140 	.word	0x20000140

08001738 <qmc_get_raw>:

void qmc_get_raw(axis3_t *axis){
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af04      	add	r7, sp, #16
 800173e:	6078      	str	r0, [r7, #4]
	  uint8_t buf[6]={0};
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	2300      	movs	r3, #0
 8001746:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(qmc_i2cport,qmc_addres,0x00,1,buf,6,1);
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <qmc_get_raw+0x6c>)
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	231a      	movs	r3, #26
 800174e:	4619      	mov	r1, r3
 8001750:	2301      	movs	r3, #1
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2306      	movs	r3, #6
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2301      	movs	r3, #1
 8001760:	2200      	movs	r2, #0
 8001762:	f006 f8c1 	bl	80078e8 <HAL_I2C_Mem_Read>
	  axis->x=((int16_t)buf[1]<<8|buf[0]) ;
 8001766:	7a7b      	ldrb	r3, [r7, #9]
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	b21a      	sxth	r2, r3
 800176c:	7a3b      	ldrb	r3, [r7, #8]
 800176e:	b21b      	sxth	r3, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	b21a      	sxth	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	801a      	strh	r2, [r3, #0]
	  axis->y=((int16_t)buf[3]<<8|buf[2]);
 8001778:	7afb      	ldrb	r3, [r7, #11]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	b21a      	sxth	r2, r3
 800177e:	7abb      	ldrb	r3, [r7, #10]
 8001780:	b21b      	sxth	r3, r3
 8001782:	4313      	orrs	r3, r2
 8001784:	b21a      	sxth	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	805a      	strh	r2, [r3, #2]
	  axis->z=((int16_t)buf[5]<<8|buf[4]);
 800178a:	7b7b      	ldrb	r3, [r7, #13]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	b21a      	sxth	r2, r3
 8001790:	7b3b      	ldrb	r3, [r7, #12]
 8001792:	b21b      	sxth	r3, r3
 8001794:	4313      	orrs	r3, r2
 8001796:	b21a      	sxth	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	809a      	strh	r2, [r3, #4]
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000140 	.word	0x20000140

080017a8 <black_box_init>:
FRESULT open_state;
int32_t puts_state;
/*
 * init black box
 */
void black_box_init(){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	fs.file = &SDFile;
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <black_box_init+0x34>)
 80017ae:	4a0c      	ldr	r2, [pc, #48]	@ (80017e0 <black_box_init+0x38>)
 80017b0:	605a      	str	r2, [r3, #4]
    mount_state = f_mount(&SDFatFS,"",1);
 80017b2:	2201      	movs	r2, #1
 80017b4:	490b      	ldr	r1, [pc, #44]	@ (80017e4 <black_box_init+0x3c>)
 80017b6:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <black_box_init+0x40>)
 80017b8:	f00d fc92 	bl	800f0e0 <f_mount>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <black_box_init+0x44>)
 80017c2:	701a      	strb	r2, [r3, #0]
    open_state = f_open(&SDFile,"DM.TXT", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80017c4:	2213      	movs	r2, #19
 80017c6:	490a      	ldr	r1, [pc, #40]	@ (80017f0 <black_box_init+0x48>)
 80017c8:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <black_box_init+0x38>)
 80017ca:	f00d fcf1 	bl	800f1b0 <f_open>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <black_box_init+0x4c>)
 80017d4:	701a      	strb	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000144 	.word	0x20000144
 80017e0:	20001040 	.word	0x20001040
 80017e4:	08012fc4 	.word	0x08012fc4
 80017e8:	20000e0c 	.word	0x20000e0c
 80017ec:	20000350 	.word	0x20000350
 80017f0:	08012fc8 	.word	0x08012fc8
 80017f4:	20000351 	.word	0x20000351

080017f8 <black_box_pack_int>:
    fs.buffer_index += index;
}



void black_box_pack_int(int val){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	@ 0x30
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

	fs.indexx=0;
 8001800:	4b48      	ldr	r3, [pc, #288]	@ (8001924 <black_box_pack_int+0x12c>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
	int len_str;
	int val_ = val;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	617b      	str	r3, [r7, #20]
	char str_[11];
	memset(str_,0,11);
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	220b      	movs	r2, #11
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f011 f9f4 	bl	8012c00 <memset>
	if(val != 0){
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d02a      	beq.n	8001874 <black_box_pack_int+0x7c>
		val = abs(val);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	bfb8      	it	lt
 8001824:	425b      	neglt	r3, r3
 8001826:	607b      	str	r3, [r7, #4]
		len_str = intToStr(val,str_,0);
 8001828:	f107 0308 	add.w	r3, r7, #8
 800182c:	2200      	movs	r2, #0
 800182e:	4619      	mov	r1, r3
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f91b 	bl	8001a6c <intToStr>
 8001836:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(val_ < 0){
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	da2a      	bge.n	8001894 <black_box_pack_int+0x9c>
			for(int i = len_str; i > 0; i--){
 800183e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001842:	e00e      	b.n	8001862 <black_box_pack_int+0x6a>
				str_[i] = str_[i - 1];
 8001844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001846:	3b01      	subs	r3, #1
 8001848:	3330      	adds	r3, #48	@ 0x30
 800184a:	443b      	add	r3, r7
 800184c:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 8001850:	f107 0208 	add.w	r2, r7, #8
 8001854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001856:	4413      	add	r3, r2
 8001858:	460a      	mov	r2, r1
 800185a:	701a      	strb	r2, [r3, #0]
			for(int i = len_str; i > 0; i--){
 800185c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800185e:	3b01      	subs	r3, #1
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001864:	2b00      	cmp	r3, #0
 8001866:	dced      	bgt.n	8001844 <black_box_pack_int+0x4c>
			}
			len_str ++;
 8001868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186a:	3301      	adds	r3, #1
 800186c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			str_[0] = '-';
 800186e:	232d      	movs	r3, #45	@ 0x2d
 8001870:	723b      	strb	r3, [r7, #8]
 8001872:	e00f      	b.n	8001894 <black_box_pack_int+0x9c>
		}
	}
	else{
	   fs.buffer[fs.buffer_index] ='0';
 8001874:	4b2b      	ldr	r3, [pc, #172]	@ (8001924 <black_box_pack_int+0x12c>)
 8001876:	891b      	ldrh	r3, [r3, #8]
 8001878:	461a      	mov	r2, r3
 800187a:	4b2a      	ldr	r3, [pc, #168]	@ (8001924 <black_box_pack_int+0x12c>)
 800187c:	4413      	add	r3, r2
 800187e:	2230      	movs	r2, #48	@ 0x30
 8001880:	729a      	strb	r2, [r3, #10]
	   len_str = 1;
 8001882:	2301      	movs	r3, #1
 8001884:	62fb      	str	r3, [r7, #44]	@ 0x2c
	   fs.buffer_index ++;
 8001886:	4b27      	ldr	r3, [pc, #156]	@ (8001924 <black_box_pack_int+0x12c>)
 8001888:	891b      	ldrh	r3, [r3, #8]
 800188a:	3301      	adds	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b25      	ldr	r3, [pc, #148]	@ (8001924 <black_box_pack_int+0x12c>)
 8001890:	811a      	strh	r2, [r3, #8]
 8001892:	e044      	b.n	800191e <black_box_pack_int+0x126>
		return;
	}
	// copy str to buffer
	int str_idx = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
	int index_flag;
	int max_index = fs.buffer_index + len_str;
 8001898:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <black_box_pack_int+0x12c>)
 800189a:	891b      	ldrh	r3, [r3, #8]
 800189c:	461a      	mov	r2, r3
 800189e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a0:	4413      	add	r3, r2
 80018a2:	61fb      	str	r3, [r7, #28]
	if(max_index <=  MAX_BUFFER_SIZE){
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018aa:	dc08      	bgt.n	80018be <black_box_pack_int+0xc6>
		max_index = fs.buffer_index + len_str;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <black_box_pack_int+0x12c>)
 80018ae:	891b      	ldrh	r3, [r3, #8]
 80018b0:	461a      	mov	r2, r3
 80018b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b4:	4413      	add	r3, r2
 80018b6:	61fb      	str	r3, [r7, #28]
		index_flag = 1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	623b      	str	r3, [r7, #32]
 80018bc:	e004      	b.n	80018c8 <black_box_pack_int+0xd0>
	}
	else{
		max_index = MAX_BUFFER_SIZE;
 80018be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018c2:	61fb      	str	r3, [r7, #28]
		index_flag = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
	}
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 80018c8:	4b16      	ldr	r3, [pc, #88]	@ (8001924 <black_box_pack_int+0x12c>)
 80018ca:	891b      	ldrh	r3, [r3, #8]
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	e00f      	b.n	80018f0 <black_box_pack_int+0xf8>
			fs.buffer[j] = str_[str_idx ++];
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80018d6:	3330      	adds	r3, #48	@ 0x30
 80018d8:	443b      	add	r3, r7
 80018da:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80018de:	4a11      	ldr	r2, [pc, #68]	@ (8001924 <black_box_pack_int+0x12c>)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	4413      	add	r3, r2
 80018e4:	330a      	adds	r3, #10
 80018e6:	460a      	mov	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	3301      	adds	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbeb      	blt.n	80018d0 <black_box_pack_int+0xd8>
	}
	
	if(index_flag){
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <black_box_pack_int+0x118>
		fs.buffer_index += len_str;
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <black_box_pack_int+0x12c>)
 8001900:	891a      	ldrh	r2, [r3, #8]
 8001902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001904:	b29b      	uxth	r3, r3
 8001906:	4413      	add	r3, r2
 8001908:	b29a      	uxth	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <black_box_pack_int+0x12c>)
 800190c:	811a      	strh	r2, [r3, #8]
 800190e:	e006      	b.n	800191e <black_box_pack_int+0x126>
	}
	else{
		fs.buffer_index += MAX_BUFFER_SIZE;
 8001910:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <black_box_pack_int+0x12c>)
 8001912:	891b      	ldrh	r3, [r3, #8]
 8001914:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001918:	b29a      	uxth	r2, r3
 800191a:	4b02      	ldr	r3, [pc, #8]	@ (8001924 <black_box_pack_int+0x12c>)
 800191c:	811a      	strh	r2, [r3, #8]
	}
}
 800191e:	3730      	adds	r7, #48	@ 0x30
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000144 	.word	0x20000144

08001928 <black_box_pack_str>:


void black_box_pack_str(char *c){
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

    int i = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 8001934:	e01c      	b.n	8001970 <black_box_pack_str+0x48>
        if((fs.buffer_index + i) > MAX_BUFFER_SIZE){
 8001936:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <black_box_pack_str+0x6c>)
 8001938:	891b      	ldrh	r3, [r3, #8]
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001944:	dd04      	ble.n	8001950 <black_box_pack_str+0x28>
                fs.buffer_index = MAX_BUFFER_SIZE;
 8001946:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <black_box_pack_str+0x6c>)
 8001948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800194c:	811a      	strh	r2, [r3, #8]
                return;
 800194e:	e01d      	b.n	800198c <black_box_pack_str+0x64>
        }
        fs.buffer[fs.buffer_index + i] = c[i];
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	441a      	add	r2, r3
 8001956:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <black_box_pack_str+0x6c>)
 8001958:	891b      	ldrh	r3, [r3, #8]
 800195a:	4619      	mov	r1, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	440b      	add	r3, r1
 8001960:	7811      	ldrb	r1, [r2, #0]
 8001962:	4a0c      	ldr	r2, [pc, #48]	@ (8001994 <black_box_pack_str+0x6c>)
 8001964:	4413      	add	r3, r2
 8001966:	460a      	mov	r2, r1
 8001968:	729a      	strb	r2, [r3, #10]
        i ++;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	3301      	adds	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1dc      	bne.n	8001936 <black_box_pack_str+0xe>
    }
    fs.buffer_index += i;
 800197c:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <black_box_pack_str+0x6c>)
 800197e:	891a      	ldrh	r2, [r3, #8]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	b29b      	uxth	r3, r3
 8001984:	4413      	add	r3, r2
 8001986:	b29a      	uxth	r2, r3
 8001988:	4b02      	ldr	r3, [pc, #8]	@ (8001994 <black_box_pack_str+0x6c>)
 800198a:	811a      	strh	r2, [r3, #8]
}
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000144 	.word	0x20000144

08001998 <black_box_pack_char>:

void black_box_pack_char(char c){
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
    fs.buffer[fs.buffer_index ] = c;
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <black_box_pack_char+0x30>)
 80019a4:	891b      	ldrh	r3, [r3, #8]
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <black_box_pack_char+0x30>)
 80019aa:	4413      	add	r3, r2
 80019ac:	79fa      	ldrb	r2, [r7, #7]
 80019ae:	729a      	strb	r2, [r3, #10]
    fs.buffer_index ++;
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <black_box_pack_char+0x30>)
 80019b2:	891b      	ldrh	r3, [r3, #8]
 80019b4:	3301      	adds	r3, #1
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <black_box_pack_char+0x30>)
 80019ba:	811a      	strh	r2, [r3, #8]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000144 	.word	0x20000144

080019cc <black_box_load>:



void black_box_load()
 {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	  puts_state = f_puts(fs.buffer,fs.file);
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <black_box_load+0x38>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4619      	mov	r1, r3
 80019d6:	480c      	ldr	r0, [pc, #48]	@ (8001a08 <black_box_load+0x3c>)
 80019d8:	f00e f970 	bl	800fcbc <f_puts>
 80019dc:	4603      	mov	r3, r0
 80019de:	4a0b      	ldr	r2, [pc, #44]	@ (8001a0c <black_box_load+0x40>)
 80019e0:	6013      	str	r3, [r2, #0]
      f_sync(fs.file);
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <black_box_load+0x38>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f00e f862 	bl	800fab0 <f_sync>
      memset(fs.buffer,0,MAX_BUFFER_SIZE);
 80019ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019f0:	2100      	movs	r1, #0
 80019f2:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <black_box_load+0x3c>)
 80019f4:	f011 f904 	bl	8012c00 <memset>
      fs.buffer_index = 0;
 80019f8:	4b02      	ldr	r3, [pc, #8]	@ (8001a04 <black_box_load+0x38>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	811a      	strh	r2, [r3, #8]
 }
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000144 	.word	0x20000144
 8001a08:	2000014e 	.word	0x2000014e
 8001a0c:	20000354 	.word	0x20000354

08001a10 <reverse>:




static void reverse( char *str, int len)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001a24:	e018      	b.n	8001a58 <reverse+0x48>
        temp = str[i];
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	441a      	add	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	440b      	add	r3, r1
 8001a3c:	7812      	ldrb	r2, [r2, #0]
 8001a3e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	701a      	strb	r2, [r3, #0]
        i++;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
        j--;
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dbe2      	blt.n	8001a26 <reverse+0x16>
    }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <intToStr>:

 static int intToStr(int x,  char *str, int d)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
    while (x) {
 8001a78:	e01f      	b.n	8001aba <intToStr+0x4e>
        str[fs.indexx++] = (x % 10) + '0';
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <intToStr+0x8c>)
 8001a7e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a82:	1099      	asrs	r1, r3, #2
 8001a84:	17d3      	asrs	r3, r2, #31
 8001a86:	1ac9      	subs	r1, r1, r3
 8001a88:	460b      	mov	r3, r1
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	1ad1      	subs	r1, r2, r3
 8001a92:	b2ca      	uxtb	r2, r1
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <intToStr+0x90>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	1c59      	adds	r1, r3, #1
 8001a9a:	4818      	ldr	r0, [pc, #96]	@ (8001afc <intToStr+0x90>)
 8001a9c:	6001      	str	r1, [r0, #0]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	440b      	add	r3, r1
 8001aa4:	3230      	adds	r2, #48	@ 0x30
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <intToStr+0x8c>)
 8001aae:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab2:	1092      	asrs	r2, r2, #2
 8001ab4:	17db      	asrs	r3, r3, #31
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	60fb      	str	r3, [r7, #12]
    while (x) {
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1dc      	bne.n	8001a7a <intToStr+0xe>
    }

    while (fs.indexx < d)
 8001ac0:	e009      	b.n	8001ad6 <intToStr+0x6a>
        str[fs.indexx++] = '0';
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <intToStr+0x90>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	490c      	ldr	r1, [pc, #48]	@ (8001afc <intToStr+0x90>)
 8001aca:	600a      	str	r2, [r1, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	2230      	movs	r2, #48	@ 0x30
 8001ad4:	701a      	strb	r2, [r3, #0]
    while (fs.indexx < d)
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <intToStr+0x90>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dcf0      	bgt.n	8001ac2 <intToStr+0x56>
    reverse(str,fs.indexx);
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <intToStr+0x90>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	68b8      	ldr	r0, [r7, #8]
 8001ae8:	f7ff ff92 	bl	8001a10 <reverse>
    return fs.indexx;
 8001aec:	4b03      	ldr	r3, [pc, #12]	@ (8001afc <intToStr+0x90>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	66666667 	.word	0x66666667
 8001afc:	20000144 	.word	0x20000144

08001b00 <compassInit>:
int8_t file_open;


/*  Init compass
 */
void compassInit(){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  calibrate_value.scale_factor_axis[X] = 1.0f;
 8001b04:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <compassInit+0x64>)
 8001b06:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b0a:	60da      	str	r2, [r3, #12]
  calibrate_value.scale_factor_axis[Y] = 1.0f;
 8001b0c:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <compassInit+0x64>)
 8001b0e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b12:	611a      	str	r2, [r3, #16]
  calibrate_value.scale_factor_axis[Z] = 1.0f;
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <compassInit+0x64>)
 8001b16:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b1a:	615a      	str	r2, [r3, #20]

  calibrate_value.hard_iron_calibrate_value[X] = 0;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <compassInit+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
  calibrate_value.hard_iron_calibrate_value[Y] = 0;
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <compassInit+0x64>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  calibrate_value.hard_iron_calibrate_value[Z] = 0;
 8001b28:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <compassInit+0x64>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
	
  //file_open = black_box_create_file(&calib_file,file_name);
	 
 // epprom init
  AT24Cxx_init(&device_array, 0x00, &hi2c2);
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b68 <compassInit+0x68>)
 8001b30:	2100      	movs	r1, #0
 8001b32:	480e      	ldr	r0, [pc, #56]	@ (8001b6c <compassInit+0x6c>)
 8001b34:	f003 fa36 	bl	8004fa4 <AT24Cxx_init>
  AT24Cxx_add_dev(&device_array, 0x01, &hi2c2);
 8001b38:	4a0b      	ldr	r2, [pc, #44]	@ (8001b68 <compassInit+0x68>)
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	480b      	ldr	r0, [pc, #44]	@ (8001b6c <compassInit+0x6c>)
 8001b3e:	f003 fa71 	bl	8005024 <AT24Cxx_add_dev>

  // init sensor
#ifdef QMC5883
  qmc5883_init(&hi2c1);
 8001b42:	480b      	ldr	r0, [pc, #44]	@ (8001b70 <compassInit+0x70>)
 8001b44:	f7ff fdcc 	bl	80016e0 <qmc5883_init>
#else
  hmc5883_init(&hi2c2);
#endif
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 8001b48:	2120      	movs	r1, #32
 8001b4a:	480a      	ldr	r0, [pc, #40]	@ (8001b74 <compassInit+0x74>)
 8001b4c:	f005 f8dc 	bl	8006d08 <HAL_GPIO_ReadPin>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <compassInit+0x5c>
      compass_calibrate();
 8001b56:	f000 f8f3 	bl	8001d40 <compass_calibrate>
  }
  else{
      read_calibrate_file();
  }
}
 8001b5a:	e001      	b.n	8001b60 <compassInit+0x60>
      read_calibrate_file();
 8001b5c:	f000 f87c 	bl	8001c58 <read_calibrate_file>
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000380 	.word	0x20000380
 8001b68:	20000828 	.word	0x20000828
 8001b6c:	2000035c 	.word	0x2000035c
 8001b70:	200007d4 	.word	0x200007d4
 8001b74:	40010c00 	.word	0x40010c00

08001b78 <compass_get>:

void compass_get(axis3_t *out){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	axis3_t as;
#ifdef QMC5883
         qmc_get_raw(&as);
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fdd7 	bl	8001738 <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
    // calibrate ouput
	out->x = (as.x - calibrate_value.hard_iron_calibrate_value[X]);
 8001b8a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b30      	ldr	r3, [pc, #192]	@ (8001c54 <compass_get+0xdc>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	b21a      	sxth	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	801a      	strh	r2, [r3, #0]
	out->y = (as.y - calibrate_value.hard_iron_calibrate_value[Y]);
 8001ba0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c54 <compass_get+0xdc>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	b21a      	sxth	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	805a      	strh	r2, [r3, #2]
	out->z = (as.z - calibrate_value.hard_iron_calibrate_value[Z]);
 8001bb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b25      	ldr	r3, [pc, #148]	@ (8001c54 <compass_get+0xdc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	b21a      	sxth	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	809a      	strh	r2, [r3, #4]

    out->x *= calibrate_value.scale_factor_axis[X];
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f8ca 	bl	8000d6c <__aeabi_i2f>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <compass_get+0xdc>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	4619      	mov	r1, r3
 8001be0:	4610      	mov	r0, r2
 8001be2:	f7ff f917 	bl	8000e14 <__aeabi_fmul>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff faef 	bl	80011cc <__aeabi_f2iz>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	801a      	strh	r2, [r3, #0]
    out->y *= calibrate_value.scale_factor_axis[Y];
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff f8b5 	bl	8000d6c <__aeabi_i2f>
 8001c02:	4602      	mov	r2, r0
 8001c04:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <compass_get+0xdc>)
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f7ff f902 	bl	8000e14 <__aeabi_fmul>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fada 	bl	80011cc <__aeabi_f2iz>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	b21a      	sxth	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	805a      	strh	r2, [r3, #2]
    out->z *= calibrate_value.scale_factor_axis[Z];
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f8a0 	bl	8000d6c <__aeabi_i2f>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <compass_get+0xdc>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	4619      	mov	r1, r3
 8001c34:	4610      	mov	r0, r2
 8001c36:	f7ff f8ed 	bl	8000e14 <__aeabi_fmul>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fac5 	bl	80011cc <__aeabi_f2iz>
 8001c42:	4603      	mov	r3, r0
 8001c44:	b21a      	sxth	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	809a      	strh	r2, [r3, #4]
}
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000380 	.word	0x20000380

08001c58 <read_calibrate_file>:

/* read calibrate data from eprrom
 * 
 */

void read_calibrate_file(){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
	int32_t sum_all = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
    AT24Cxx_read_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_value,0x0010,sizeof(cali_mag_t));
 8001c62:	4b33      	ldr	r3, [pc, #204]	@ (8001d30 <read_calibrate_file+0xd8>)
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	231c      	movs	r3, #28
 8001c68:	2210      	movs	r2, #16
 8001c6a:	4932      	ldr	r1, [pc, #200]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001c6c:	f003 fb33 	bl	80052d6 <AT24Cxx_read_byte_buffer>
   	sum_all += calibrate_value.scale_factor_axis[X];
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff f87b 	bl	8000d6c <__aeabi_i2f>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4610      	mov	r0, r2
 8001c80:	f7fe ffc0 	bl	8000c04 <__addsf3>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff faa0 	bl	80011cc <__aeabi_f2iz>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Y];
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff f86b 	bl	8000d6c <__aeabi_i2f>
 8001c96:	4602      	mov	r2, r0
 8001c98:	4b26      	ldr	r3, [pc, #152]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f7fe ffb0 	bl	8000c04 <__addsf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fa90 	bl	80011cc <__aeabi_f2iz>
 8001cac:	4603      	mov	r3, r0
 8001cae:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Z];
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff f85b 	bl	8000d6c <__aeabi_i2f>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	f7fe ffa0 	bl	8000c04 <__addsf3>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fa80 	bl	80011cc <__aeabi_f2iz>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	607b      	str	r3, [r7, #4]

    sum_all += (int)calibrate_value.hard_iron_calibrate_value[X];
 8001cd0:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Y];
 8001cda:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Z];
 8001ce4:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	607b      	str	r3, [r7, #4]

    if(ABS(sum_all - (int)calibrate_value.sum_all_value) > 40){
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bfb8      	it	lt
 8001cfe:	425b      	neglt	r3, r3
 8001d00:	2b28      	cmp	r3, #40	@ 0x28
 8001d02:	dd11      	ble.n	8001d28 <read_calibrate_file+0xd0>
      while(1){
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d08:	480b      	ldr	r0, [pc, #44]	@ (8001d38 <read_calibrate_file+0xe0>)
 8001d0a:	f005 f82c 	bl	8006d66 <HAL_GPIO_TogglePin>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d0e:	2120      	movs	r1, #32
 8001d10:	480a      	ldr	r0, [pc, #40]	@ (8001d3c <read_calibrate_file+0xe4>)
 8001d12:	f005 f828 	bl	8006d66 <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001d16:	2110      	movs	r1, #16
 8001d18:	4808      	ldr	r0, [pc, #32]	@ (8001d3c <read_calibrate_file+0xe4>)
 8001d1a:	f005 f824 	bl	8006d66 <HAL_GPIO_TogglePin>
       HAL_Delay(50); // 10 Hz loop
 8001d1e:	2032      	movs	r0, #50	@ 0x32
 8001d20:	f004 f8d6 	bl	8005ed0 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d24:	bf00      	nop
 8001d26:	e7ed      	b.n	8001d04 <read_calibrate_file+0xac>
      }
    }
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	2000035c 	.word	0x2000035c
 8001d34:	20000380 	.word	0x20000380
 8001d38:	40011000 	.word	0x40011000
 8001d3c:	40010800 	.word	0x40010800

08001d40 <compass_calibrate>:


/* Calibrate function
 * write calibrate value to sd card
 */
static void compass_calibrate(){
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b095      	sub	sp, #84	@ 0x54
 8001d44:	af00      	add	r7, sp, #0
    int16_t max_val[] = {-32767,-32767,-32767};
 8001d46:	4a9f      	ldr	r2, [pc, #636]	@ (8001fc4 <compass_calibrate+0x284>)
 8001d48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d50:	6018      	str	r0, [r3, #0]
 8001d52:	3304      	adds	r3, #4
 8001d54:	8019      	strh	r1, [r3, #0]
    int16_t min_val[] = {32767, 32767, 32767};
 8001d56:	4a9c      	ldr	r2, [pc, #624]	@ (8001fc8 <compass_calibrate+0x288>)
 8001d58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d60:	6018      	str	r0, [r3, #0]
 8001d62:	3304      	adds	r3, #4
 8001d64:	8019      	strh	r1, [r3, #0]
    uint8_t fist_data = TRUE;
 8001d66:	2301      	movs	r3, #1
 8001d68:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    cali_mag_t calibrate_temp;
    ignore_data = 0;
 8001d6c:	4b97      	ldr	r3, [pc, #604]	@ (8001fcc <compass_calibrate+0x28c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	801a      	strh	r2, [r3, #0]
    int16_t last_axis[3];
    axis3_t as;

	while(!file_open){
 8001d72:	e0b5      	b.n	8001ee0 <compass_calibrate+0x1a0>
 // read data from sensor
#ifdef QMC5883
         qmc_get_raw(&as);
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fcde 	bl	8001738 <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
        if(fist_data){
 8001d7c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00c      	beq.n	8001d9e <compass_calibrate+0x5e>
          last_axis[X] = as.x;
 8001d84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d88:	81bb      	strh	r3, [r7, #12]
          last_axis[Y] = as.y;
 8001d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8e:	81fb      	strh	r3, [r7, #14]
          last_axis[Z] = as.z;
 8001d90:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d94:	823b      	strh	r3, [r7, #16]
          fist_data = FALSE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          continue;
 8001d9c:	e0a0      	b.n	8001ee0 <compass_calibrate+0x1a0>
        }
        int16_t delta_x_ = as.x -  last_axis[X];
 8001d9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        int16_t delta_y_ = as.y -  last_axis[Y];
 8001db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        int16_t delta_z_ = as.z -  last_axis[Z];
 8001dc6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        // ignore wrong value and set to zero
        int16_t ckec = sqrt(sq(delta_x_) + sq(delta_y_) + sq(delta_z_));
 8001dda:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001dde:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8001de2:	fb03 f202 	mul.w	r2, r3, r2
 8001de6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8001dea:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	@ 0x48
 8001dee:	fb01 f303 	mul.w	r3, r1, r3
 8001df2:	441a      	add	r2, r3
 8001df4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001df8:	f9b7 1046 	ldrsh.w	r1, [r7, #70]	@ 0x46
 8001dfc:	fb01 f303 	mul.w	r3, r1, r3
 8001e00:	4413      	add	r3, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fb66 	bl	80004d4 <__aeabi_i2d>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f010 ff48 	bl	8012ca4 <sqrt>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f7fe fe74 	bl	8000b08 <__aeabi_d2iz>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        if(ckec > max_change){
 8001e26:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001e2a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	dd09      	ble.n	8001e46 <compass_calibrate+0x106>
            fist_data = TRUE; 
 8001e32:	2301      	movs	r3, #1
 8001e34:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            ignore_data ++;
 8001e38:	4b64      	ldr	r3, [pc, #400]	@ (8001fcc <compass_calibrate+0x28c>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b62      	ldr	r3, [pc, #392]	@ (8001fcc <compass_calibrate+0x28c>)
 8001e42:	801a      	strh	r2, [r3, #0]
            continue;
 8001e44:	e04c      	b.n	8001ee0 <compass_calibrate+0x1a0>
        }
        last_axis[X] = as.x;
 8001e46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e4a:	81bb      	strh	r3, [r7, #12]
        last_axis[Y] = as.y;
 8001e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e50:	81fb      	strh	r3, [r7, #14]
        last_axis[Z] = as.z;
 8001e52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e56:	823b      	strh	r3, [r7, #16]
        // get max value each axis
        if(as.x > max_val[X]) max_val[X] = as.x;
 8001e58:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e5c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dd02      	ble.n	8001e6a <compass_calibrate+0x12a>
 8001e64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e68:	873b      	strh	r3, [r7, #56]	@ 0x38
        if(as.y > max_val[Y]) max_val[Y] = as.y;
 8001e6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e6e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001e72:	429a      	cmp	r2, r3
 8001e74:	dd02      	ble.n	8001e7c <compass_calibrate+0x13c>
 8001e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e7a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        if(as.z > max_val[Z]) max_val[Z] = as.z;
 8001e7c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e80:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dd02      	ble.n	8001e8e <compass_calibrate+0x14e>
 8001e88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e8c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

        // min value
        if(as.x < min_val[X]) min_val[X] = as.x;
 8001e8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e92:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001e96:	429a      	cmp	r2, r3
 8001e98:	da02      	bge.n	8001ea0 <compass_calibrate+0x160>
 8001e9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e9e:	863b      	strh	r3, [r7, #48]	@ 0x30
        if(as.y < min_val[Y]) min_val[Y] = as.y;
 8001ea0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ea4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	da02      	bge.n	8001eb2 <compass_calibrate+0x172>
 8001eac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb0:	867b      	strh	r3, [r7, #50]	@ 0x32
        if(as.z < min_val[Z]) min_val[Z] = as.z;
 8001eb2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001eb6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	da02      	bge.n	8001ec4 <compass_calibrate+0x184>
 8001ebe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ec2:	86bb      	strh	r3, [r7, #52]	@ 0x34
        black_box_pack_str(&calib_file,"\n");
		
		black_box_load(&calib_file);
        black_box_sync(&calib_file);
        */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	4842      	ldr	r0, [pc, #264]	@ (8001fd0 <compass_calibrate+0x290>)
 8001ec8:	f004 ff4d 	bl	8006d66 <HAL_GPIO_TogglePin>
        HAL_Delay(20); // 10 Hz loop
 8001ecc:	2014      	movs	r0, #20
 8001ece:	f003 ffff 	bl	8005ed0 <HAL_Delay>

       if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5) == 0){
 8001ed2:	2120      	movs	r1, #32
 8001ed4:	483f      	ldr	r0, [pc, #252]	@ (8001fd4 <compass_calibrate+0x294>)
 8001ed6:	f004 ff17 	bl	8006d08 <HAL_GPIO_ReadPin>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <compass_calibrate+0x1ae>
	while(!file_open){
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd8 <compass_calibrate+0x298>)
 8001ee2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f43f af44 	beq.w	8001d74 <compass_calibrate+0x34>
 8001eec:	e000      	b.n	8001ef0 <compass_calibrate+0x1b0>
              break;
 8001eee:	bf00      	nop
          }
	  }

    // check all min value is negative sign
    if(min_val[X] > 0 || min_val[Y] > 0 || min_val[Z] > 0){
 8001ef0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	dc02      	bgt.n	8001efe <compass_calibrate+0x1be>
 8001ef8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001efc:	2b00      	cmp	r3, #0
          // error
    }
    // check all max value is positive sign
    if(max_val[X] < 0 || max_val[Y] < 0 || max_val[Z] < 0){
 8001efe:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	db02      	blt.n	8001f0c <compass_calibrate+0x1cc>
 8001f06:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001f0a:	2b00      	cmp	r3, #0
          // error
    }
    // calibrate value for each axis
    calibrate_temp.hard_iron_calibrate_value[X] = (int)(max_val[X] + min_val[X])/2;
 8001f0c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f10:	461a      	mov	r2, r3
 8001f12:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001f16:	4413      	add	r3, r2
 8001f18:	0fda      	lsrs	r2, r3, #31
 8001f1a:	4413      	add	r3, r2
 8001f1c:	105b      	asrs	r3, r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
    calibrate_temp.hard_iron_calibrate_value[Y] = (int)(max_val[Y] + min_val[Y])/2;
 8001f20:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001f24:	461a      	mov	r2, r3
 8001f26:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001f2a:	4413      	add	r3, r2
 8001f2c:	0fda      	lsrs	r2, r3, #31
 8001f2e:	4413      	add	r3, r2
 8001f30:	105b      	asrs	r3, r3, #1
 8001f32:	61bb      	str	r3, [r7, #24]
    calibrate_temp.hard_iron_calibrate_value[Z] = (int)(max_val[Z] + min_val[Z])/2;
 8001f34:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001f3e:	4413      	add	r3, r2
 8001f40:	0fda      	lsrs	r2, r3, #31
 8001f42:	4413      	add	r3, r2
 8001f44:	105b      	asrs	r3, r3, #1
 8001f46:	61fb      	str	r3, [r7, #28]

    // calculate scale factor for each axis
    int16_t x_ = abs(max_val[X]) + abs(min_val[X]);
 8001f48:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bfb8      	it	lt
 8001f50:	425b      	neglt	r3, r3
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bfb8      	it	lt
 8001f5c:	425b      	neglt	r3, r3
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t y_ = abs(max_val[Y]) + abs(min_val[Y]);
 8001f68:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bfb8      	it	lt
 8001f70:	425b      	neglt	r3, r3
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bfb8      	it	lt
 8001f7c:	425b      	neglt	r3, r3
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    int16_t z_ = abs(max_val[Z]) + abs(min_val[Z]);
 8001f88:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bfb8      	it	lt
 8001f90:	425b      	neglt	r3, r3
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bfb8      	it	lt
 8001f9c:	425b      	neglt	r3, r3
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    // get largest value
    int16_t max_value = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(x_ > y_)
 8001fac:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8001fb0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dd11      	ble.n	8001fdc <compass_calibrate+0x29c>
        max_value = x_;
 8001fb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001fbc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001fc0:	e010      	b.n	8001fe4 <compass_calibrate+0x2a4>
 8001fc2:	bf00      	nop
 8001fc4:	08012fd0 	.word	0x08012fd0
 8001fc8:	08012fd8 	.word	0x08012fd8
 8001fcc:	20000358 	.word	0x20000358
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	2000039c 	.word	0x2000039c
    else
        max_value = y_;
 8001fdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001fe0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(max_value < z_)
 8001fe4:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 8001fe8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001fec:	429a      	cmp	r2, r3
 8001fee:	da02      	bge.n	8001ff6 <compass_calibrate+0x2b6>
        max_value = z_;
 8001ff0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001ff2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

    // caculate scale
    calibrate_temp.scale_factor_axis[X] = (float)x_/max_value;
 8001ff6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe feb6 	bl	8000d6c <__aeabi_i2f>
 8002000:	4604      	mov	r4, r0
 8002002:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe feb0 	bl	8000d6c <__aeabi_i2f>
 800200c:	4603      	mov	r3, r0
 800200e:	4619      	mov	r1, r3
 8002010:	4620      	mov	r0, r4
 8002012:	f7fe ffb3 	bl	8000f7c <__aeabi_fdiv>
 8002016:	4603      	mov	r3, r0
 8002018:	623b      	str	r3, [r7, #32]
    calibrate_temp.scale_factor_axis[Y] = (float)y_/max_value;
 800201a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fea4 	bl	8000d6c <__aeabi_i2f>
 8002024:	4604      	mov	r4, r0
 8002026:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fe9e 	bl	8000d6c <__aeabi_i2f>
 8002030:	4603      	mov	r3, r0
 8002032:	4619      	mov	r1, r3
 8002034:	4620      	mov	r0, r4
 8002036:	f7fe ffa1 	bl	8000f7c <__aeabi_fdiv>
 800203a:	4603      	mov	r3, r0
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
    calibrate_temp.scale_factor_axis[Z] = (float)z_/max_value;
 800203e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fe92 	bl	8000d6c <__aeabi_i2f>
 8002048:	4604      	mov	r4, r0
 800204a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fe8c 	bl	8000d6c <__aeabi_i2f>
 8002054:	4603      	mov	r3, r0
 8002056:	4619      	mov	r1, r3
 8002058:	4620      	mov	r0, r4
 800205a:	f7fe ff8f 	bl	8000f7c <__aeabi_fdiv>
 800205e:	4603      	mov	r3, r0
 8002060:	62bb      	str	r3, [r7, #40]	@ 0x28

    calibrate_temp.sum_all_value = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	62fb      	str	r3, [r7, #44]	@ 0x2c

	calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[X];
 8002066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fe7f 	bl	8000d6c <__aeabi_i2f>
 800206e:	4602      	mov	r2, r0
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	4619      	mov	r1, r3
 8002074:	4610      	mov	r0, r2
 8002076:	f7fe fdc5 	bl	8000c04 <__addsf3>
 800207a:	4603      	mov	r3, r0
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff f8a5 	bl	80011cc <__aeabi_f2iz>
 8002082:	4603      	mov	r3, r0
 8002084:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Y];
 8002086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fe6f 	bl	8000d6c <__aeabi_i2f>
 800208e:	4602      	mov	r2, r0
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	4619      	mov	r1, r3
 8002094:	4610      	mov	r0, r2
 8002096:	f7fe fdb5 	bl	8000c04 <__addsf3>
 800209a:	4603      	mov	r3, r0
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff f895 	bl	80011cc <__aeabi_f2iz>
 80020a2:	4603      	mov	r3, r0
 80020a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Z];
 80020a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fe5f 	bl	8000d6c <__aeabi_i2f>
 80020ae:	4602      	mov	r2, r0
 80020b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b2:	4619      	mov	r1, r3
 80020b4:	4610      	mov	r0, r2
 80020b6:	f7fe fda5 	bl	8000c04 <__addsf3>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff f885 	bl	80011cc <__aeabi_f2iz>
 80020c2:	4603      	mov	r3, r0
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[X];
 80020c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	4413      	add	r3, r2
 80020cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Y];
 80020ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	4413      	add	r3, r2
 80020d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Z];
 80020d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	4413      	add	r3, r2
 80020dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // write data to eprrom
    AT24Cxx_write_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_temp, 0x0010, sizeof(cali_mag_t));
 80020de:	4b09      	ldr	r3, [pc, #36]	@ (8002104 <compass_calibrate+0x3c4>)
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	f107 0114 	add.w	r1, r7, #20
 80020e6:	231c      	movs	r3, #28
 80020e8:	2210      	movs	r2, #16
 80020ea:	f002 fff2 	bl	80050d2 <AT24Cxx_write_byte_buffer>
  
   // black_box_load(&calib_file);
   // black_box_close(&calib_file);
	
	while(1){
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80020ee:	2120      	movs	r1, #32
 80020f0:	4805      	ldr	r0, [pc, #20]	@ (8002108 <compass_calibrate+0x3c8>)
 80020f2:	f004 fe38 	bl	8006d66 <HAL_GPIO_TogglePin>
      HAL_Delay(1000); // 10 Hz loop
 80020f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020fa:	f003 fee9 	bl	8005ed0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80020fe:	bf00      	nop
 8002100:	e7f5      	b.n	80020ee <compass_calibrate+0x3ae>
 8002102:	bf00      	nop
 8002104:	2000035c 	.word	0x2000035c
 8002108:	40010800 	.word	0x40010800

0800210c <gps_init>:

/*  
 * Init function 
 */
void gps_init(UART_HandleTypeDef *uart,uint32_t baudrate)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
	_gpsUartPort = uart;
 8002116:	4a27      	ldr	r2, [pc, #156]	@ (80021b4 <gps_init+0xa8>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6013      	str	r3, [r2, #0]
    _gps.timer_ = millis();
 800211c:	4b26      	ldr	r3, [pc, #152]	@ (80021b8 <gps_init+0xac>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002124:	4b25      	ldr	r3, [pc, #148]	@ (80021bc <gps_init+0xb0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4413      	add	r3, r2
 800212a:	4a25      	ldr	r2, [pc, #148]	@ (80021c0 <gps_init+0xb4>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	099b      	lsrs	r3, r3, #6
 8002132:	4a24      	ldr	r2, [pc, #144]	@ (80021c4 <gps_init+0xb8>)
 8002134:	62d3      	str	r3, [r2, #44]	@ 0x2c
    // reset all viriables
    _payload_length = 0;
 8002136:	4b24      	ldr	r3, [pc, #144]	@ (80021c8 <gps_init+0xbc>)
 8002138:	2200      	movs	r2, #0
 800213a:	801a      	strh	r2, [r3, #0]
    _payload_counter = 0;
 800213c:	4b23      	ldr	r3, [pc, #140]	@ (80021cc <gps_init+0xc0>)
 800213e:	2200      	movs	r2, #0
 8002140:	801a      	strh	r2, [r3, #0]
    _msg_id = 0;
 8002142:	4b23      	ldr	r3, [pc, #140]	@ (80021d0 <gps_init+0xc4>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]

    // Configuration _gps module
    HAL_UART_Transmit(_gpsUartPort,ubloxInit,sizeof(ubloxInit),1000);
 8002148:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <gps_init+0xa8>)
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002150:	22a8      	movs	r2, #168	@ 0xa8
 8002152:	4920      	ldr	r1, [pc, #128]	@ (80021d4 <gps_init+0xc8>)
 8002154:	f009 f850 	bl	800b1f8 <HAL_UART_Transmit>
    HAL_Delay(10);
 8002158:	200a      	movs	r0, #10
 800215a:	f003 feb9 	bl	8005ed0 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,ubloxSbasInit,sizeof(ubloxSbasInit),1000);
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <gps_init+0xa8>)
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002166:	2210      	movs	r2, #16
 8002168:	491b      	ldr	r1, [pc, #108]	@ (80021d8 <gps_init+0xcc>)
 800216a:	f009 f845 	bl	800b1f8 <HAL_UART_Transmit>
    HAL_Delay(10);
 800216e:	200a      	movs	r0, #10
 8002170:	f003 feae 	bl	8005ed0 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,uart57600,sizeof(uart57600),1000);
 8002174:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <gps_init+0xa8>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800217c:	221c      	movs	r2, #28
 800217e:	4917      	ldr	r1, [pc, #92]	@ (80021dc <gps_init+0xd0>)
 8002180:	f009 f83a 	bl	800b1f8 <HAL_UART_Transmit>
    HAL_Delay(10);
 8002184:	200a      	movs	r0, #10
 8002186:	f003 fea3 	bl	8005ed0 <HAL_Delay>
    // set baudrate
    _gpsUartPort->Init.BaudRate = baudrate;
 800218a:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <gps_init+0xa8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(_gpsUartPort); 
 8002192:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <gps_init+0xa8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f008 ffde 	bl	800b158 <HAL_UART_Init>

    // read gps using interrup
	HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 800219c:	4b05      	ldr	r3, [pc, #20]	@ (80021b4 <gps_init+0xa8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2201      	movs	r2, #1
 80021a2:	490f      	ldr	r1, [pc, #60]	@ (80021e0 <gps_init+0xd4>)
 80021a4:	4618      	mov	r0, r3
 80021a6:	f009 f8aa 	bl	800b2fe <HAL_UART_Receive_IT>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200003d8 	.word	0x200003d8
 80021b8:	20000534 	.word	0x20000534
 80021bc:	20000538 	.word	0x20000538
 80021c0:	10624dd3 	.word	0x10624dd3
 80021c4:	200003a0 	.word	0x200003a0
 80021c8:	200003e6 	.word	0x200003e6
 80021cc:	200003e8 	.word	0x200003e8
 80021d0:	200003e4 	.word	0x200003e4
 80021d4:	080130f8 	.word	0x080130f8
 80021d8:	20000000 	.word	0x20000000
 80021dc:	080131a0 	.word	0x080131a0
 80021e0:	200003dc 	.word	0x200003dc

080021e4 <gps_uart_port>:

UART_HandleTypeDef *gps_uart_port(){
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
    return _gpsUartPort;
 80021e8:	4b02      	ldr	r3, [pc, #8]	@ (80021f4 <gps_uart_port+0x10>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	200003d8 	.word	0x200003d8

080021f8 <gps_callback>:
/* 
 * REad gps by using interrup
 */
uint32_t gps_interrupt_count;
void gps_callback()
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
   // parse data
   gps_interrupt_count++;
 80021fc:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <gps_callback+0x2c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3301      	adds	r3, #1
 8002202:	4a08      	ldr	r2, [pc, #32]	@ (8002224 <gps_callback+0x2c>)
 8002204:	6013      	str	r3, [r2, #0]
   newdata(_char);
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <gps_callback+0x30>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f8f6 	bl	80023fc <newdata>
   HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 8002210:	4b06      	ldr	r3, [pc, #24]	@ (800222c <gps_callback+0x34>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2201      	movs	r2, #1
 8002216:	4904      	ldr	r1, [pc, #16]	@ (8002228 <gps_callback+0x30>)
 8002218:	4618      	mov	r0, r3
 800221a:	f009 f870 	bl	800b2fe <HAL_UART_Receive_IT>
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200004b4 	.word	0x200004b4
 8002228:	200003dc 	.word	0x200003dc
 800222c:	200003d8 	.word	0x200003d8

08002230 <parse_msg>:
        *ck_a += *data;
        *ck_b += *ck_a;
        data++;
    }
}
static uint8_t parse_msg(){
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
    static uint8_t _new_speed;
    static uint8_t next_fix;
    static uint32_t lastPosUpdateTime;
    static uint8_t _new_position;
    switch (_msg_id) {
 8002234:	4b67      	ldr	r3, [pc, #412]	@ (80023d4 <parse_msg+0x1a4>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b12      	cmp	r3, #18
 800223a:	dc2b      	bgt.n	8002294 <parse_msg+0x64>
 800223c:	2b02      	cmp	r3, #2
 800223e:	f2c0 80ad 	blt.w	800239c <parse_msg+0x16c>
 8002242:	3b02      	subs	r3, #2
 8002244:	2b10      	cmp	r3, #16
 8002246:	f200 80a9 	bhi.w	800239c <parse_msg+0x16c>
 800224a:	a201      	add	r2, pc, #4	@ (adr r2, 8002250 <parse_msg+0x20>)
 800224c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002250:	0800229d 	.word	0x0800229d
 8002254:	08002311 	.word	0x08002311
 8002258:	0800239d 	.word	0x0800239d
 800225c:	0800239d 	.word	0x0800239d
 8002260:	0800233d 	.word	0x0800233d
 8002264:	0800239d 	.word	0x0800239d
 8002268:	0800239d 	.word	0x0800239d
 800226c:	0800239d 	.word	0x0800239d
 8002270:	0800239d 	.word	0x0800239d
 8002274:	0800239d 	.word	0x0800239d
 8002278:	0800239d 	.word	0x0800239d
 800227c:	0800239d 	.word	0x0800239d
 8002280:	0800239d 	.word	0x0800239d
 8002284:	0800239d 	.word	0x0800239d
 8002288:	0800239d 	.word	0x0800239d
 800228c:	0800239d 	.word	0x0800239d
 8002290:	08002355 	.word	0x08002355
 8002294:	2b30      	cmp	r3, #48	@ 0x30
 8002296:	f000 8083 	beq.w	80023a0 <parse_msg+0x170>
 800229a:	e07f      	b.n	800239c <parse_msg+0x16c>
        case MSG_POSLLH:
            _gps.position[LON] = _buffer.posllh.longitude;
 800229c:	4b4e      	ldr	r3, [pc, #312]	@ (80023d8 <parse_msg+0x1a8>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a4e      	ldr	r2, [pc, #312]	@ (80023dc <parse_msg+0x1ac>)
 80022a2:	6013      	str	r3, [r2, #0]
            _gps.position[LAT] = _buffer.posllh.latitude;
 80022a4:	4b4c      	ldr	r3, [pc, #304]	@ (80023d8 <parse_msg+0x1a8>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4a4c      	ldr	r2, [pc, #304]	@ (80023dc <parse_msg+0x1ac>)
 80022aa:	6053      	str	r3, [r2, #4]
            _gps.altitude_msl = _buffer.posllh.altitude_msl;
 80022ac:	4b4a      	ldr	r3, [pc, #296]	@ (80023d8 <parse_msg+0x1a8>)
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	4b4a      	ldr	r3, [pc, #296]	@ (80023dc <parse_msg+0x1ac>)
 80022b4:	861a      	strh	r2, [r3, #48]	@ 0x30
            _gps.horizontalAccuracy = _buffer.posllh.horizontal_accuracy;
 80022b6:	4b48      	ldr	r3, [pc, #288]	@ (80023d8 <parse_msg+0x1a8>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	4a48      	ldr	r2, [pc, #288]	@ (80023dc <parse_msg+0x1ac>)
 80022bc:	6213      	str	r3, [r2, #32]
            _gps.VerticalAccuracy = _buffer.posllh.vertical_accuracy;
 80022be:	4b46      	ldr	r3, [pc, #280]	@ (80023d8 <parse_msg+0x1a8>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	4a46      	ldr	r2, [pc, #280]	@ (80023dc <parse_msg+0x1ac>)
 80022c4:	6253      	str	r3, [r2, #36]	@ 0x24
            /* time update position */
            if(lastPosUpdateTime == 0){
 80022c6:	4b46      	ldr	r3, [pc, #280]	@ (80023e0 <parse_msg+0x1b0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d06a      	beq.n	80023a4 <parse_msg+0x174>
                break;
                lastPosUpdateTime = millis();
            }
            _gps.posUpdateTime = millis() - lastPosUpdateTime;
 80022ce:	4b45      	ldr	r3, [pc, #276]	@ (80023e4 <parse_msg+0x1b4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022d6:	4b44      	ldr	r3, [pc, #272]	@ (80023e8 <parse_msg+0x1b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	4a43      	ldr	r2, [pc, #268]	@ (80023ec <parse_msg+0x1bc>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	099a      	lsrs	r2, r3, #6
 80022e4:	4b3e      	ldr	r3, [pc, #248]	@ (80023e0 <parse_msg+0x1b0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	4a3c      	ldr	r2, [pc, #240]	@ (80023dc <parse_msg+0x1ac>)
 80022ec:	6293      	str	r3, [r2, #40]	@ 0x28
            lastPosUpdateTime = millis();
 80022ee:	4b3d      	ldr	r3, [pc, #244]	@ (80023e4 <parse_msg+0x1b4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022f6:	4b3c      	ldr	r3, [pc, #240]	@ (80023e8 <parse_msg+0x1b8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a3b      	ldr	r2, [pc, #236]	@ (80023ec <parse_msg+0x1bc>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	099b      	lsrs	r3, r3, #6
 8002304:	4a36      	ldr	r2, [pc, #216]	@ (80023e0 <parse_msg+0x1b0>)
 8002306:	6013      	str	r3, [r2, #0]
            /* flag set */
            _new_position = TRUE;
 8002308:	4b39      	ldr	r3, [pc, #228]	@ (80023f0 <parse_msg+0x1c0>)
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
            break;
 800230e:	e04a      	b.n	80023a6 <parse_msg+0x176>
        case MSG_STATUS:
            next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type == FIX_3D);
 8002310:	4b31      	ldr	r3, [pc, #196]	@ (80023d8 <parse_msg+0x1a8>)
 8002312:	795b      	ldrb	r3, [r3, #5]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <parse_msg+0xf8>
 800231c:	4b2e      	ldr	r3, [pc, #184]	@ (80023d8 <parse_msg+0x1a8>)
 800231e:	791b      	ldrb	r3, [r3, #4]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d101      	bne.n	8002328 <parse_msg+0xf8>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <parse_msg+0xfa>
 8002328:	2300      	movs	r3, #0
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b31      	ldr	r3, [pc, #196]	@ (80023f4 <parse_msg+0x1c4>)
 800232e:	701a      	strb	r2, [r3, #0]
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.status.fix_type;
 8002330:	4b29      	ldr	r3, [pc, #164]	@ (80023d8 <parse_msg+0x1a8>)
 8002332:	791a      	ldrb	r2, [r3, #4]
 8002334:	4b29      	ldr	r3, [pc, #164]	@ (80023dc <parse_msg+0x1ac>)
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            break;
 800233a:	e034      	b.n	80023a6 <parse_msg+0x176>
        case MSG_SOL:
            //next_fix = (_buffer.solution.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.solution.fix_type == FIX_3D);
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.solution.fix_type;
 800233c:	4b26      	ldr	r3, [pc, #152]	@ (80023d8 <parse_msg+0x1a8>)
 800233e:	7a9a      	ldrb	r2, [r3, #10]
 8002340:	4b26      	ldr	r3, [pc, #152]	@ (80023dc <parse_msg+0x1ac>)
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            _gps.numSat = _buffer.solution.satellites;
 8002346:	4b24      	ldr	r3, [pc, #144]	@ (80023d8 <parse_msg+0x1a8>)
 8002348:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800234c:	4b23      	ldr	r3, [pc, #140]	@ (80023dc <parse_msg+0x1ac>)
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            break;
 8002352:	e028      	b.n	80023a6 <parse_msg+0x176>
        case MSG_VELNED:
            _gps.velocity[LAT] = _buffer.velned.ned_north;
 8002354:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <parse_msg+0x1a8>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a20      	ldr	r2, [pc, #128]	@ (80023dc <parse_msg+0x1ac>)
 800235a:	60d3      	str	r3, [r2, #12]
            _gps.velocity[LON] = _buffer.velned.ned_east;
 800235c:	4b1e      	ldr	r3, [pc, #120]	@ (80023d8 <parse_msg+0x1a8>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a1e      	ldr	r2, [pc, #120]	@ (80023dc <parse_msg+0x1ac>)
 8002362:	6093      	str	r3, [r2, #8]
            _gps.velocity[DOWN] = _buffer.velned.ned_down;
 8002364:	4b1c      	ldr	r3, [pc, #112]	@ (80023d8 <parse_msg+0x1a8>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4a1c      	ldr	r2, [pc, #112]	@ (80023dc <parse_msg+0x1ac>)
 800236a:	6113      	str	r3, [r2, #16]
            _gps.Gspeed = _buffer.velned.speed_2d;
 800236c:	4b1a      	ldr	r3, [pc, #104]	@ (80023d8 <parse_msg+0x1a8>)
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	461a      	mov	r2, r3
 8002372:	4b1a      	ldr	r3, [pc, #104]	@ (80023dc <parse_msg+0x1ac>)
 8002374:	615a      	str	r2, [r3, #20]
            _gps.ground_course = _buffer.velned.heading_2d;
 8002376:	4b18      	ldr	r3, [pc, #96]	@ (80023d8 <parse_msg+0x1a8>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	b29a      	uxth	r2, r3
 800237c:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <parse_msg+0x1ac>)
 800237e:	865a      	strh	r2, [r3, #50]	@ 0x32
            _gps.speedAccuracy = _buffer.velned.speed_accuracy;
 8002380:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <parse_msg+0x1a8>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	461a      	mov	r2, r3
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <parse_msg+0x1ac>)
 8002388:	619a      	str	r2, [r3, #24]
            _gps.headingAccuracy = _buffer.velned.heading_accuracy;
 800238a:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <parse_msg+0x1a8>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	461a      	mov	r2, r3
 8002390:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <parse_msg+0x1ac>)
 8002392:	61da      	str	r2, [r3, #28]
            _new_speed = TRUE;
 8002394:	4b18      	ldr	r3, [pc, #96]	@ (80023f8 <parse_msg+0x1c8>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
            break;
 800239a:	e004      	b.n	80023a6 <parse_msg+0x176>
            svinfo_rate[0] = svinfo_rate[1];
            svinfo_rate[1] = millis();
            */
            break;
        default:
            return FALSE;
 800239c:	2300      	movs	r3, #0
 800239e:	e014      	b.n	80023ca <parse_msg+0x19a>
            break;
 80023a0:	bf00      	nop
 80023a2:	e000      	b.n	80023a6 <parse_msg+0x176>
                break;
 80023a4:	bf00      	nop
    }
    if (_new_position && _new_speed) {
 80023a6:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <parse_msg+0x1c0>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00c      	beq.n	80023c8 <parse_msg+0x198>
 80023ae:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <parse_msg+0x1c8>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <parse_msg+0x198>
        _new_speed = _new_position = FALSE;
 80023b6:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <parse_msg+0x1c0>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
 80023bc:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <parse_msg+0x1c0>)
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <parse_msg+0x1c8>)
 80023c2:	701a      	strb	r2, [r3, #0]
        return TRUE;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <parse_msg+0x19a>
    }
    return FALSE;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	200003e4 	.word	0x200003e4
 80023d8:	200003ec 	.word	0x200003ec
 80023dc:	200003a0 	.word	0x200003a0
 80023e0:	200004b8 	.word	0x200004b8
 80023e4:	20000534 	.word	0x20000534
 80023e8:	20000538 	.word	0x20000538
 80023ec:	10624dd3 	.word	0x10624dd3
 80023f0:	200004bc 	.word	0x200004bc
 80023f4:	200004bd 	.word	0x200004bd
 80023f8:	200004be 	.word	0x200004be

080023fc <newdata>:

int parse_ok;
static uint8_t newdata(uint8_t data){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
    uint8_t parsed = FALSE;
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]
    static uint8_t _ck_a;
    static uint8_t _ck_b;
    static uint8_t _step = 0;
    static uint32_t current_time_ms = 0;
    switch (_step) {
 800240a:	4b85      	ldr	r3, [pc, #532]	@ (8002620 <newdata+0x224>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b08      	cmp	r3, #8
 8002410:	f200 8100 	bhi.w	8002614 <newdata+0x218>
 8002414:	a201      	add	r2, pc, #4	@ (adr r2, 800241c <newdata+0x20>)
 8002416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241a:	bf00      	nop
 800241c:	08002441 	.word	0x08002441
 8002420:	08002457 	.word	0x08002457
 8002424:	0800246b 	.word	0x0800246b
 8002428:	08002487 	.word	0x08002487
 800242c:	080024b9 	.word	0x080024b9
 8002430:	080024ed 	.word	0x080024ed
 8002434:	08002547 	.word	0x08002547
 8002438:	0800259f 	.word	0x0800259f
 800243c:	080025bd 	.word	0x080025bd
        case 0: // Sync char 1 (0xB5)
            if (PREAMBLE1 == data)
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	2bb5      	cmp	r3, #181	@ 0xb5
 8002444:	f040 80df 	bne.w	8002606 <newdata+0x20a>
                _step++;
 8002448:	4b75      	ldr	r3, [pc, #468]	@ (8002620 <newdata+0x224>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b73      	ldr	r3, [pc, #460]	@ (8002620 <newdata+0x224>)
 8002452:	701a      	strb	r2, [r3, #0]
            break;
 8002454:	e0d7      	b.n	8002606 <newdata+0x20a>
        case 1: // Sync char 2 (0x62)
            if (PREAMBLE2 == data) {
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	2b62      	cmp	r3, #98	@ 0x62
 800245a:	d106      	bne.n	800246a <newdata+0x6e>
                _step++;
 800245c:	4b70      	ldr	r3, [pc, #448]	@ (8002620 <newdata+0x224>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	b2da      	uxtb	r2, r3
 8002464:	4b6e      	ldr	r3, [pc, #440]	@ (8002620 <newdata+0x224>)
 8002466:	701a      	strb	r2, [r3, #0]
                break;
 8002468:	e0d4      	b.n	8002614 <newdata+0x218>
            }
        case 2: // Class
            _step++;
 800246a:	4b6d      	ldr	r3, [pc, #436]	@ (8002620 <newdata+0x224>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b6b      	ldr	r3, [pc, #428]	@ (8002620 <newdata+0x224>)
 8002474:	701a      	strb	r2, [r3, #0]
            _ck_b = _ck_a = data;  
 8002476:	4a6b      	ldr	r2, [pc, #428]	@ (8002624 <newdata+0x228>)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	7013      	strb	r3, [r2, #0]
 800247c:	4b69      	ldr	r3, [pc, #420]	@ (8002624 <newdata+0x228>)
 800247e:	781a      	ldrb	r2, [r3, #0]
 8002480:	4b69      	ldr	r3, [pc, #420]	@ (8002628 <newdata+0x22c>)
 8002482:	701a      	strb	r2, [r3, #0]
            break;
 8002484:	e0c6      	b.n	8002614 <newdata+0x218>
        case 3: // ID
            _step++;
 8002486:	4b66      	ldr	r3, [pc, #408]	@ (8002620 <newdata+0x224>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	3301      	adds	r3, #1
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4b64      	ldr	r3, [pc, #400]	@ (8002620 <newdata+0x224>)
 8002490:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8002492:	4b64      	ldr	r3, [pc, #400]	@ (8002624 <newdata+0x228>)
 8002494:	781a      	ldrb	r2, [r3, #0]
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	4413      	add	r3, r2
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b61      	ldr	r3, [pc, #388]	@ (8002624 <newdata+0x228>)
 800249e:	701a      	strb	r2, [r3, #0]
 80024a0:	4b60      	ldr	r3, [pc, #384]	@ (8002624 <newdata+0x228>)
 80024a2:	781a      	ldrb	r2, [r3, #0]
 80024a4:	4b60      	ldr	r3, [pc, #384]	@ (8002628 <newdata+0x22c>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4413      	add	r3, r2
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002628 <newdata+0x22c>)
 80024ae:	701a      	strb	r2, [r3, #0]
            _msg_id = data;
 80024b0:	4a5e      	ldr	r2, [pc, #376]	@ (800262c <newdata+0x230>)
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	7013      	strb	r3, [r2, #0]
            break;
 80024b6:	e0ad      	b.n	8002614 <newdata+0x218>
        case 4: 
            _step++;
 80024b8:	4b59      	ldr	r3, [pc, #356]	@ (8002620 <newdata+0x224>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b57      	ldr	r3, [pc, #348]	@ (8002620 <newdata+0x224>)
 80024c2:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 80024c4:	4b57      	ldr	r3, [pc, #348]	@ (8002624 <newdata+0x228>)
 80024c6:	781a      	ldrb	r2, [r3, #0]
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	4413      	add	r3, r2
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4b55      	ldr	r3, [pc, #340]	@ (8002624 <newdata+0x228>)
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	4b54      	ldr	r3, [pc, #336]	@ (8002624 <newdata+0x228>)
 80024d4:	781a      	ldrb	r2, [r3, #0]
 80024d6:	4b54      	ldr	r3, [pc, #336]	@ (8002628 <newdata+0x22c>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b52      	ldr	r3, [pc, #328]	@ (8002628 <newdata+0x22c>)
 80024e0:	701a      	strb	r2, [r3, #0]
            _payload_length = data; 
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	4b52      	ldr	r3, [pc, #328]	@ (8002630 <newdata+0x234>)
 80024e8:	801a      	strh	r2, [r3, #0]
            break;
 80024ea:	e093      	b.n	8002614 <newdata+0x218>
        case 5: 
            _step++;
 80024ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002620 <newdata+0x224>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002620 <newdata+0x224>)
 80024f6:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);      
 80024f8:	4b4a      	ldr	r3, [pc, #296]	@ (8002624 <newdata+0x228>)
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4413      	add	r3, r2
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b48      	ldr	r3, [pc, #288]	@ (8002624 <newdata+0x228>)
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	4b47      	ldr	r3, [pc, #284]	@ (8002624 <newdata+0x228>)
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	4b47      	ldr	r3, [pc, #284]	@ (8002628 <newdata+0x22c>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	4413      	add	r3, r2
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b45      	ldr	r3, [pc, #276]	@ (8002628 <newdata+0x22c>)
 8002514:	701a      	strb	r2, [r3, #0]
            _payload_length += (uint16_t)(data << 8);
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	b29b      	uxth	r3, r3
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	b29a      	uxth	r2, r3
 800251e:	4b44      	ldr	r3, [pc, #272]	@ (8002630 <newdata+0x234>)
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	4413      	add	r3, r2
 8002524:	b29a      	uxth	r2, r3
 8002526:	4b42      	ldr	r3, [pc, #264]	@ (8002630 <newdata+0x234>)
 8002528:	801a      	strh	r2, [r3, #0]
            if (_payload_length > UBLOX_BUFFER_SIZE) {
 800252a:	4b41      	ldr	r3, [pc, #260]	@ (8002630 <newdata+0x234>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	2bc8      	cmp	r3, #200	@ 0xc8
 8002530:	d905      	bls.n	800253e <newdata+0x142>
                _payload_length = 0;
 8002532:	4b3f      	ldr	r3, [pc, #252]	@ (8002630 <newdata+0x234>)
 8002534:	2200      	movs	r2, #0
 8002536:	801a      	strh	r2, [r3, #0]
                _step = 0;
 8002538:	4b39      	ldr	r3, [pc, #228]	@ (8002620 <newdata+0x224>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
            }
            _payload_counter = 0;   
 800253e:	4b3d      	ldr	r3, [pc, #244]	@ (8002634 <newdata+0x238>)
 8002540:	2200      	movs	r2, #0
 8002542:	801a      	strh	r2, [r3, #0]
            break;
 8002544:	e066      	b.n	8002614 <newdata+0x218>
        case 6:
            _ck_b += (_ck_a += data);     
 8002546:	4b37      	ldr	r3, [pc, #220]	@ (8002624 <newdata+0x228>)
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	4413      	add	r3, r2
 800254e:	b2da      	uxtb	r2, r3
 8002550:	4b34      	ldr	r3, [pc, #208]	@ (8002624 <newdata+0x228>)
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	4b33      	ldr	r3, [pc, #204]	@ (8002624 <newdata+0x228>)
 8002556:	781a      	ldrb	r2, [r3, #0]
 8002558:	4b33      	ldr	r3, [pc, #204]	@ (8002628 <newdata+0x22c>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4413      	add	r3, r2
 800255e:	b2da      	uxtb	r2, r3
 8002560:	4b31      	ldr	r3, [pc, #196]	@ (8002628 <newdata+0x22c>)
 8002562:	701a      	strb	r2, [r3, #0]
            if (_payload_counter < UBLOX_BUFFER_SIZE) {
 8002564:	4b33      	ldr	r3, [pc, #204]	@ (8002634 <newdata+0x238>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	2bc7      	cmp	r3, #199	@ 0xc7
 800256a:	d805      	bhi.n	8002578 <newdata+0x17c>
                _buffer.bytes[_payload_counter] = data;
 800256c:	4b31      	ldr	r3, [pc, #196]	@ (8002634 <newdata+0x238>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	4a31      	ldr	r2, [pc, #196]	@ (8002638 <newdata+0x23c>)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	5453      	strb	r3, [r2, r1]
            }
            if (++_payload_counter == _payload_length)
 8002578:	4b2e      	ldr	r3, [pc, #184]	@ (8002634 <newdata+0x238>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	3301      	adds	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	4b2c      	ldr	r3, [pc, #176]	@ (8002634 <newdata+0x238>)
 8002582:	801a      	strh	r2, [r3, #0]
 8002584:	4b2b      	ldr	r3, [pc, #172]	@ (8002634 <newdata+0x238>)
 8002586:	881a      	ldrh	r2, [r3, #0]
 8002588:	4b29      	ldr	r3, [pc, #164]	@ (8002630 <newdata+0x234>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d13c      	bne.n	800260a <newdata+0x20e>
                _step++;
 8002590:	4b23      	ldr	r3, [pc, #140]	@ (8002620 <newdata+0x224>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	b2da      	uxtb	r2, r3
 8002598:	4b21      	ldr	r3, [pc, #132]	@ (8002620 <newdata+0x224>)
 800259a:	701a      	strb	r2, [r3, #0]
            break;
 800259c:	e035      	b.n	800260a <newdata+0x20e>
        case 7:
            _step++;
 800259e:	4b20      	ldr	r3, [pc, #128]	@ (8002620 <newdata+0x224>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002620 <newdata+0x224>)
 80025a8:	701a      	strb	r2, [r3, #0]
            if (_ck_a != data)
 80025aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002624 <newdata+0x228>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	79fa      	ldrb	r2, [r7, #7]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d02c      	beq.n	800260e <newdata+0x212>
                _step = 0;         
 80025b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <newdata+0x224>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
            break;
 80025ba:	e028      	b.n	800260e <newdata+0x212>
        case 8:
            _step = 0;
 80025bc:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <newdata+0x224>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
            if (_ck_b != data)
 80025c2:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <newdata+0x22c>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	79fa      	ldrb	r2, [r7, #7]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d122      	bne.n	8002612 <newdata+0x216>
                break;   
			 _therad_read_time_ms = micros() - current_time_ms;
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <newdata+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <newdata+0x244>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	441a      	add	r2, r3
 80025da:	4b1a      	ldr	r3, [pc, #104]	@ (8002644 <newdata+0x248>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	4a19      	ldr	r2, [pc, #100]	@ (8002648 <newdata+0x24c>)
 80025e2:	6013      	str	r3, [r2, #0]
			 current_time_ms = micros();
 80025e4:	4b15      	ldr	r3, [pc, #84]	@ (800263c <newdata+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ec:	4b14      	ldr	r3, [pc, #80]	@ (8002640 <newdata+0x244>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	4a14      	ldr	r2, [pc, #80]	@ (8002644 <newdata+0x248>)
 80025f4:	6013      	str	r3, [r2, #0]
            if (parse_msg())
 80025f6:	f7ff fe1b 	bl	8002230 <parse_msg>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d009      	beq.n	8002614 <newdata+0x218>
            {
                parsed = TRUE;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	e006      	b.n	8002614 <newdata+0x218>
            break;
 8002606:	bf00      	nop
 8002608:	e004      	b.n	8002614 <newdata+0x218>
            break;
 800260a:	bf00      	nop
 800260c:	e002      	b.n	8002614 <newdata+0x218>
            break;
 800260e:	bf00      	nop
 8002610:	e000      	b.n	8002614 <newdata+0x218>
                break;   
 8002612:	bf00      	nop
            }
    } 
    return parsed;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	200004bf 	.word	0x200004bf
 8002624:	200004c0 	.word	0x200004c0
 8002628:	200004c1 	.word	0x200004c1
 800262c:	200003e4 	.word	0x200003e4
 8002630:	200003e6 	.word	0x200003e6
 8002634:	200003e8 	.word	0x200003e8
 8002638:	200003ec 	.word	0x200003ec
 800263c:	20000534 	.word	0x20000534
 8002640:	20000538 	.word	0x20000538
 8002644:	200004c4 	.word	0x200004c4
 8002648:	200003e0 	.word	0x200003e0

0800264c <imu_calibrate>:
  .gyr_lsb = 32.8f
};


static int32_t store_gyro[3];
void imu_calibrate(int16_t *offsx,int16_t *offsy,int16_t *offsz){
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
	axis3_t gyro_;
	integralFBx = 0;
 8002658:	4b2b      	ldr	r3, [pc, #172]	@ (8002708 <imu_calibrate+0xbc>)
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
	integralFBy = 0;
 8002660:	4b2a      	ldr	r3, [pc, #168]	@ (800270c <imu_calibrate+0xc0>)
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
	integralFBz = 0;
 8002668:	4b29      	ldr	r3, [pc, #164]	@ (8002710 <imu_calibrate+0xc4>)
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < OFFSET_CYCLE; i++){
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	e01f      	b.n	80026b6 <imu_calibrate+0x6a>
		mpu6050_gyro_get_raw(&gyro_);
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe ffb2 	bl	80015e4 <mpu6050_gyro_get_raw>
		store_gyro[X] += gyro_.x;
 8002680:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <imu_calibrate+0xc8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002688:	4413      	add	r3, r2
 800268a:	4a22      	ldr	r2, [pc, #136]	@ (8002714 <imu_calibrate+0xc8>)
 800268c:	6013      	str	r3, [r2, #0]
    	store_gyro[Y] += gyro_.y;
 800268e:	4b21      	ldr	r3, [pc, #132]	@ (8002714 <imu_calibrate+0xc8>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002696:	4413      	add	r3, r2
 8002698:	4a1e      	ldr	r2, [pc, #120]	@ (8002714 <imu_calibrate+0xc8>)
 800269a:	6053      	str	r3, [r2, #4]
    	store_gyro[Z] += gyro_.z;
 800269c:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <imu_calibrate+0xc8>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80026a4:	4413      	add	r3, r2
 80026a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002714 <imu_calibrate+0xc8>)
 80026a8:	6093      	str	r3, [r2, #8]
		HAL_Delay(1); // delay 1 ms
 80026aa:	2001      	movs	r0, #1
 80026ac:	f003 fc10 	bl	8005ed0 <HAL_Delay>
	for(int i = 0;i < OFFSET_CYCLE; i++){
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	3301      	adds	r3, #1
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026bc:	dbdb      	blt.n	8002676 <imu_calibrate+0x2a>
	}
	*offsx = store_gyro[X] / OFFSET_CYCLE;
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <imu_calibrate+0xc8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a15      	ldr	r2, [pc, #84]	@ (8002718 <imu_calibrate+0xcc>)
 80026c4:	fb82 1203 	smull	r1, r2, r2, r3
 80026c8:	1192      	asrs	r2, r2, #6
 80026ca:	17db      	asrs	r3, r3, #31
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	b21a      	sxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	801a      	strh	r2, [r3, #0]
	*offsy = store_gyro[Y] / OFFSET_CYCLE;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <imu_calibrate+0xc8>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002718 <imu_calibrate+0xcc>)
 80026da:	fb82 1203 	smull	r1, r2, r2, r3
 80026de:	1192      	asrs	r2, r2, #6
 80026e0:	17db      	asrs	r3, r3, #31
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	b21a      	sxth	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	801a      	strh	r2, [r3, #0]
	*offsz = store_gyro[Z] / OFFSET_CYCLE;
 80026ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <imu_calibrate+0xc8>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <imu_calibrate+0xcc>)
 80026f0:	fb82 1203 	smull	r1, r2, r2, r3
 80026f4:	1192      	asrs	r2, r2, #6
 80026f6:	17db      	asrs	r3, r3, #31
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	b21a      	sxth	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	801a      	strh	r2, [r3, #0]
}
 8002700:	bf00      	nop
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200004e0 	.word	0x200004e0
 800270c:	200004e4 	.word	0x200004e4
 8002710:	200004e8 	.word	0x200004e8
 8002714:	2000051c 	.word	0x2000051c
 8002718:	10624dd3 	.word	0x10624dd3

0800271c <update_ahrs>:
	m->roll   = atan2_approx(-acc.x, (1/invSqrt_(acc.y * acc.y + acc.z * acc.z)))*180/M_PIf;
}

static int8_t first_loop = 1;
// mahony filter
void update_ahrs(int16_t gx_, int16_t gy_, int16_t gz_, int16_t accx_, int16_t accy_, int16_t accz_,int16_t magx,int16_t magy,int16_t magz,float dt){
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b0a5      	sub	sp, #148	@ 0x94
 8002720:	af00      	add	r7, sp, #0
 8002722:	4604      	mov	r4, r0
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	461a      	mov	r2, r3
 800272a:	4623      	mov	r3, r4
 800272c:	80fb      	strh	r3, [r7, #6]
 800272e:	4603      	mov	r3, r0
 8002730:	80bb      	strh	r3, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	807b      	strh	r3, [r7, #2]
 8002736:	4613      	mov	r3, r2
 8002738:	803b      	strh	r3, [r7, #0]
    float acc_x,acc_y,acc_z;
    float vx, vy, vz;
    float emz,wx,wy;
    float mx,my,mz,hx,hy,bx,bz;

	gx = (gx_/config.gyr_lsb) * RAD;
 800273a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe fb14 	bl	8000d6c <__aeabi_i2f>
 8002744:	4602      	mov	r2, r0
 8002746:	4baa      	ldr	r3, [pc, #680]	@ (80029f0 <update_ahrs+0x2d4>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	4619      	mov	r1, r3
 800274c:	4610      	mov	r0, r2
 800274e:	f7fe fc15 	bl	8000f7c <__aeabi_fdiv>
 8002752:	4603      	mov	r3, r0
 8002754:	49a7      	ldr	r1, [pc, #668]	@ (80029f4 <update_ahrs+0x2d8>)
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fb5c 	bl	8000e14 <__aeabi_fmul>
 800275c:	4603      	mov	r3, r0
 800275e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	gy = (gy_/config.gyr_lsb) * RAD;
 8002762:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fb00 	bl	8000d6c <__aeabi_i2f>
 800276c:	4602      	mov	r2, r0
 800276e:	4ba0      	ldr	r3, [pc, #640]	@ (80029f0 <update_ahrs+0x2d4>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	4619      	mov	r1, r3
 8002774:	4610      	mov	r0, r2
 8002776:	f7fe fc01 	bl	8000f7c <__aeabi_fdiv>
 800277a:	4603      	mov	r3, r0
 800277c:	499d      	ldr	r1, [pc, #628]	@ (80029f4 <update_ahrs+0x2d8>)
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fb48 	bl	8000e14 <__aeabi_fmul>
 8002784:	4603      	mov	r3, r0
 8002786:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	gz = (gz_/config.gyr_lsb) * RAD;
 800278a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe faec 	bl	8000d6c <__aeabi_i2f>
 8002794:	4602      	mov	r2, r0
 8002796:	4b96      	ldr	r3, [pc, #600]	@ (80029f0 <update_ahrs+0x2d4>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	4619      	mov	r1, r3
 800279c:	4610      	mov	r0, r2
 800279e:	f7fe fbed 	bl	8000f7c <__aeabi_fdiv>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4993      	ldr	r1, [pc, #588]	@ (80029f4 <update_ahrs+0x2d8>)
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fb34 	bl	8000e14 <__aeabi_fmul>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	if(!((accx_ == 0) && (accy_ == 0) && ( accz_ == 0))) {
 80027b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d108      	bne.n	80027cc <update_ahrs+0xb0>
 80027ba:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d104      	bne.n	80027cc <update_ahrs+0xb0>
 80027c2:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8249 	beq.w	8002c5e <update_ahrs+0x542>
		norm = invSqrt_(accx_ * accx_ + accy_ * accy_ + accz_ * accz_);
 80027cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80027d0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80027d4:	fb03 f202 	mul.w	r2, r3, r2
 80027d8:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80027dc:	f9b7 10a0 	ldrsh.w	r1, [r7, #160]	@ 0xa0
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	441a      	add	r2, r3
 80027e6:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 80027ea:	f9b7 10a4 	ldrsh.w	r1, [r7, #164]	@ 0xa4
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fab9 	bl	8000d6c <__aeabi_i2f>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fe79 	bl	80034f4 <invSqrt_>
 8002802:	67f8      	str	r0, [r7, #124]	@ 0x7c
		acc_x = (float)accx_ * norm;
 8002804:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe faaf 	bl	8000d6c <__aeabi_i2f>
 800280e:	4603      	mov	r3, r0
 8002810:	4619      	mov	r1, r3
 8002812:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002814:	f7fe fafe 	bl	8000e14 <__aeabi_fmul>
 8002818:	4603      	mov	r3, r0
 800281a:	67bb      	str	r3, [r7, #120]	@ 0x78
		acc_y = (float)accy_ * norm;
 800281c:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe faa3 	bl	8000d6c <__aeabi_i2f>
 8002826:	4603      	mov	r3, r0
 8002828:	4619      	mov	r1, r3
 800282a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800282c:	f7fe faf2 	bl	8000e14 <__aeabi_fmul>
 8002830:	4603      	mov	r3, r0
 8002832:	677b      	str	r3, [r7, #116]	@ 0x74
		acc_z = (float)accz_ * norm;
 8002834:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fa97 	bl	8000d6c <__aeabi_i2f>
 800283e:	4603      	mov	r3, r0
 8002840:	4619      	mov	r1, r3
 8002842:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002844:	f7fe fae6 	bl	8000e14 <__aeabi_fmul>
 8002848:	4603      	mov	r3, r0
 800284a:	673b      	str	r3, [r7, #112]	@ 0x70

		if(first_loop){
 800284c:	4b6a      	ldr	r3, [pc, #424]	@ (80029f8 <update_ahrs+0x2dc>)
 800284e:	f993 3000 	ldrsb.w	r3, [r3]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <update_ahrs+0x152>
			dcm[0][2] = acc_x;
 8002856:	4a69      	ldr	r2, [pc, #420]	@ (80029fc <update_ahrs+0x2e0>)
 8002858:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800285a:	6093      	str	r3, [r2, #8]
			dcm[1][2] = acc_y;
 800285c:	4a67      	ldr	r2, [pc, #412]	@ (80029fc <update_ahrs+0x2e0>)
 800285e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002860:	6153      	str	r3, [r2, #20]
			dcm[2][2] = acc_z;
 8002862:	4a66      	ldr	r2, [pc, #408]	@ (80029fc <update_ahrs+0x2e0>)
 8002864:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002866:	6213      	str	r3, [r2, #32]
			first_loop = 0;
 8002868:	4b63      	ldr	r3, [pc, #396]	@ (80029f8 <update_ahrs+0x2dc>)
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
		}

        if(USE_MAG){
			norm = invSqrt_(magx * magx + magy * magy + magz * magz);
 800286e:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 8002872:	f9b7 20a8 	ldrsh.w	r2, [r7, #168]	@ 0xa8
 8002876:	fb03 f202 	mul.w	r2, r3, r2
 800287a:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 800287e:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	441a      	add	r2, r3
 8002888:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800288c:	f9b7 10b0 	ldrsh.w	r1, [r7, #176]	@ 0xb0
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fa68 	bl	8000d6c <__aeabi_i2f>
 800289c:	4603      	mov	r3, r0
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fe28 	bl	80034f4 <invSqrt_>
 80028a4:	67f8      	str	r0, [r7, #124]	@ 0x7c
			mx = magx * norm;
 80028a6:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fa5e 	bl	8000d6c <__aeabi_i2f>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4619      	mov	r1, r3
 80028b4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80028b6:	f7fe faad 	bl	8000e14 <__aeabi_fmul>
 80028ba:	4603      	mov	r3, r0
 80028bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
			my = magy * norm;
 80028be:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fa52 	bl	8000d6c <__aeabi_i2f>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4619      	mov	r1, r3
 80028cc:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80028ce:	f7fe faa1 	bl	8000e14 <__aeabi_fmul>
 80028d2:	4603      	mov	r3, r0
 80028d4:	66bb      	str	r3, [r7, #104]	@ 0x68
			mz = magz * norm;
 80028d6:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fa46 	bl	8000d6c <__aeabi_i2f>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4619      	mov	r1, r3
 80028e4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80028e6:	f7fe fa95 	bl	8000e14 <__aeabi_fmul>
 80028ea:	4603      	mov	r3, r0
 80028ec:	667b      	str	r3, [r7, #100]	@ 0x64

			hx = mx * dcm[0][0] + my * dcm[1][0] + mz * dcm[2][0];
 80028ee:	4b43      	ldr	r3, [pc, #268]	@ (80029fc <update_ahrs+0x2e0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe fa8d 	bl	8000e14 <__aeabi_fmul>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461c      	mov	r4, r3
 80028fe:	4b3f      	ldr	r3, [pc, #252]	@ (80029fc <update_ahrs+0x2e0>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002904:	4618      	mov	r0, r3
 8002906:	f7fe fa85 	bl	8000e14 <__aeabi_fmul>
 800290a:	4603      	mov	r3, r0
 800290c:	4619      	mov	r1, r3
 800290e:	4620      	mov	r0, r4
 8002910:	f7fe f978 	bl	8000c04 <__addsf3>
 8002914:	4603      	mov	r3, r0
 8002916:	461c      	mov	r4, r3
 8002918:	4b38      	ldr	r3, [pc, #224]	@ (80029fc <update_ahrs+0x2e0>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fa78 	bl	8000e14 <__aeabi_fmul>
 8002924:	4603      	mov	r3, r0
 8002926:	4619      	mov	r1, r3
 8002928:	4620      	mov	r0, r4
 800292a:	f7fe f96b 	bl	8000c04 <__addsf3>
 800292e:	4603      	mov	r3, r0
 8002930:	663b      	str	r3, [r7, #96]	@ 0x60
			hy = mx * dcm[0][1] + my * dcm[1][1] + mz * dcm[2][1];
 8002932:	4b32      	ldr	r3, [pc, #200]	@ (80029fc <update_ahrs+0x2e0>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fa6b 	bl	8000e14 <__aeabi_fmul>
 800293e:	4603      	mov	r3, r0
 8002940:	461c      	mov	r4, r3
 8002942:	4b2e      	ldr	r3, [pc, #184]	@ (80029fc <update_ahrs+0x2e0>)
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fa63 	bl	8000e14 <__aeabi_fmul>
 800294e:	4603      	mov	r3, r0
 8002950:	4619      	mov	r1, r3
 8002952:	4620      	mov	r0, r4
 8002954:	f7fe f956 	bl	8000c04 <__addsf3>
 8002958:	4603      	mov	r3, r0
 800295a:	461c      	mov	r4, r3
 800295c:	4b27      	ldr	r3, [pc, #156]	@ (80029fc <update_ahrs+0x2e0>)
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe fa56 	bl	8000e14 <__aeabi_fmul>
 8002968:	4603      	mov	r3, r0
 800296a:	4619      	mov	r1, r3
 800296c:	4620      	mov	r0, r4
 800296e:	f7fe f949 	bl	8000c04 <__addsf3>
 8002972:	4603      	mov	r3, r0
 8002974:	65fb      	str	r3, [r7, #92]	@ 0x5c
			bz = mx * dcm[0][2] + my * dcm[1][2] + mz * dcm[2][2];
 8002976:	4b21      	ldr	r3, [pc, #132]	@ (80029fc <update_ahrs+0x2e0>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fa49 	bl	8000e14 <__aeabi_fmul>
 8002982:	4603      	mov	r3, r0
 8002984:	461c      	mov	r4, r3
 8002986:	4b1d      	ldr	r3, [pc, #116]	@ (80029fc <update_ahrs+0x2e0>)
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fa41 	bl	8000e14 <__aeabi_fmul>
 8002992:	4603      	mov	r3, r0
 8002994:	4619      	mov	r1, r3
 8002996:	4620      	mov	r0, r4
 8002998:	f7fe f934 	bl	8000c04 <__addsf3>
 800299c:	4603      	mov	r3, r0
 800299e:	461c      	mov	r4, r3
 80029a0:	4b16      	ldr	r3, [pc, #88]	@ (80029fc <update_ahrs+0x2e0>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fa34 	bl	8000e14 <__aeabi_fmul>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4619      	mov	r1, r3
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7fe f927 	bl	8000c04 <__addsf3>
 80029b6:	4603      	mov	r3, r0
 80029b8:	65bb      	str	r3, [r7, #88]	@ 0x58

			bx = sqrtf(hx * hx + hy * hy);
 80029ba:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80029bc:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80029be:	f7fe fa29 	bl	8000e14 <__aeabi_fmul>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461c      	mov	r4, r3
 80029c6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80029c8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80029ca:	f7fe fa23 	bl	8000e14 <__aeabi_fmul>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4619      	mov	r1, r3
 80029d2:	4620      	mov	r0, r4
 80029d4:	f7fe f916 	bl	8000c04 <__addsf3>
 80029d8:	4603      	mov	r3, r0
 80029da:	4618      	mov	r0, r3
 80029dc:	f010 f986 	bl	8012cec <sqrtf>
 80029e0:	6578      	str	r0, [r7, #84]	@ 0x54

			wx = bx * dcm[0][0] + bz * dcm[0][2];
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <update_ahrs+0x2e0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe fa13 	bl	8000e14 <__aeabi_fmul>
 80029ee:	e007      	b.n	8002a00 <update_ahrs+0x2e4>
 80029f0:	20000018 	.word	0x20000018
 80029f4:	3c8efa35 	.word	0x3c8efa35
 80029f8:	20000024 	.word	0x20000024
 80029fc:	200004f8 	.word	0x200004f8
 8002a00:	4603      	mov	r3, r0
 8002a02:	461c      	mov	r4, r3
 8002a04:	4b6f      	ldr	r3, [pc, #444]	@ (8002bc4 <update_ahrs+0x4a8>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fa02 	bl	8000e14 <__aeabi_fmul>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4619      	mov	r1, r3
 8002a14:	4620      	mov	r0, r4
 8002a16:	f7fe f8f5 	bl	8000c04 <__addsf3>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	653b      	str	r3, [r7, #80]	@ 0x50
			wy = bx * dcm[1][0] + bz * dcm[1][2];
 8002a1e:	4b69      	ldr	r3, [pc, #420]	@ (8002bc4 <update_ahrs+0x4a8>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe f9f5 	bl	8000e14 <__aeabi_fmul>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461c      	mov	r4, r3
 8002a2e:	4b65      	ldr	r3, [pc, #404]	@ (8002bc4 <update_ahrs+0x4a8>)
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe f9ed 	bl	8000e14 <__aeabi_fmul>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7fe f8e0 	bl	8000c04 <__addsf3>
 8002a44:	4603      	mov	r3, r0
 8002a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
			emz = mx * wy - my * wx;
 8002a48:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002a4a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002a4c:	f7fe f9e2 	bl	8000e14 <__aeabi_fmul>
 8002a50:	4603      	mov	r3, r0
 8002a52:	461c      	mov	r4, r3
 8002a54:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002a56:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002a58:	f7fe f9dc 	bl	8000e14 <__aeabi_fmul>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4620      	mov	r0, r4
 8002a62:	f7fe f8cd 	bl	8000c00 <__aeabi_fsub>
 8002a66:	4603      	mov	r3, r0
 8002a68:	64bb      	str	r3, [r7, #72]	@ 0x48
		}
		else{
			emz = 0.0f;
		}

		vx = dcm[0][2];
 8002a6a:	4b56      	ldr	r3, [pc, #344]	@ (8002bc4 <update_ahrs+0x4a8>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	647b      	str	r3, [r7, #68]	@ 0x44
		vy = dcm[1][2];
 8002a70:	4b54      	ldr	r3, [pc, #336]	@ (8002bc4 <update_ahrs+0x4a8>)
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	643b      	str	r3, [r7, #64]	@ 0x40
		vz = dcm[2][2];
 8002a76:	4b53      	ldr	r3, [pc, #332]	@ (8002bc4 <update_ahrs+0x4a8>)
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c

		ex = acc_y * vz - acc_z * vy;
 8002a7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a7e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002a80:	f7fe f9c8 	bl	8000e14 <__aeabi_fmul>
 8002a84:	4603      	mov	r3, r0
 8002a86:	461c      	mov	r4, r3
 8002a88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a8a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002a8c:	f7fe f9c2 	bl	8000e14 <__aeabi_fmul>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4619      	mov	r1, r3
 8002a94:	4620      	mov	r0, r4
 8002a96:	f7fe f8b3 	bl	8000c00 <__aeabi_fsub>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
		ey = acc_z * vx - acc_x * vz;
 8002a9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002aa0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002aa2:	f7fe f9b7 	bl	8000e14 <__aeabi_fmul>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	461c      	mov	r4, r3
 8002aaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002aac:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002aae:	f7fe f9b1 	bl	8000e14 <__aeabi_fmul>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f7fe f8a2 	bl	8000c00 <__aeabi_fsub>
 8002abc:	4603      	mov	r3, r0
 8002abe:	637b      	str	r3, [r7, #52]	@ 0x34
		ez = acc_x * vy - acc_y * vx;
 8002ac0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ac2:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002ac4:	f7fe f9a6 	bl	8000e14 <__aeabi_fmul>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461c      	mov	r4, r3
 8002acc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002ace:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002ad0:	f7fe f9a0 	bl	8000e14 <__aeabi_fmul>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7fe f891 	bl	8000c00 <__aeabi_fsub>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	633b      	str	r3, [r7, #48]	@ 0x30

		if( Ki_imu  > 0.0f) {
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fb4e 	bl	800118c <__aeabi_fcmpgt>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d06e      	beq.n	8002bd4 <update_ahrs+0x4b8>
			integralFBx +=  Ki_imu  * ex * dt;
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe f989 	bl	8000e14 <__aeabi_fmul>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe f983 	bl	8000e14 <__aeabi_fmul>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc8 <update_ahrs+0x4ac>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4619      	mov	r1, r3
 8002b18:	4610      	mov	r0, r2
 8002b1a:	f7fe f873 	bl	8000c04 <__addsf3>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b29      	ldr	r3, [pc, #164]	@ (8002bc8 <update_ahrs+0x4ac>)
 8002b24:	601a      	str	r2, [r3, #0]
			integralFBy +=  Ki_imu  * ey * dt;
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe f971 	bl	8000e14 <__aeabi_fmul>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe f96b 	bl	8000e14 <__aeabi_fmul>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b22      	ldr	r3, [pc, #136]	@ (8002bcc <update_ahrs+0x4b0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4619      	mov	r1, r3
 8002b48:	4610      	mov	r0, r2
 8002b4a:	f7fe f85b 	bl	8000c04 <__addsf3>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b1e      	ldr	r3, [pc, #120]	@ (8002bcc <update_ahrs+0x4b0>)
 8002b54:	601a      	str	r2, [r3, #0]
			integralFBz +=  Ki_imu  * ez * dt;
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe f959 	bl	8000e14 <__aeabi_fmul>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe f953 	bl	8000e14 <__aeabi_fmul>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b17      	ldr	r3, [pc, #92]	@ (8002bd0 <update_ahrs+0x4b4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4619      	mov	r1, r3
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f7fe f843 	bl	8000c04 <__addsf3>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b13      	ldr	r3, [pc, #76]	@ (8002bd0 <update_ahrs+0x4b4>)
 8002b84:	601a      	str	r2, [r3, #0]
			gx += integralFBx;
 8002b86:	4b10      	ldr	r3, [pc, #64]	@ (8002bc8 <update_ahrs+0x4ac>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002b90:	f7fe f838 	bl	8000c04 <__addsf3>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			gy += integralFBy;
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bcc <update_ahrs+0x4b0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8002ba4:	f7fe f82e 	bl	8000c04 <__addsf3>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			gz += integralFBz;
 8002bae:	4b08      	ldr	r3, [pc, #32]	@ (8002bd0 <update_ahrs+0x4b4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002bb8:	f7fe f824 	bl	8000c04 <__addsf3>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002bc2:	e013      	b.n	8002bec <update_ahrs+0x4d0>
 8002bc4:	200004f8 	.word	0x200004f8
 8002bc8:	200004e0 	.word	0x200004e0
 8002bcc:	200004e4 	.word	0x200004e4
 8002bd0:	200004e8 	.word	0x200004e8
		} else {
			integralFBx = 0.0f;
 8002bd4:	4ba4      	ldr	r3, [pc, #656]	@ (8002e68 <update_ahrs+0x74c>)
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8002bdc:	4ba3      	ldr	r3, [pc, #652]	@ (8002e6c <update_ahrs+0x750>)
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8002be4:	4ba2      	ldr	r3, [pc, #648]	@ (8002e70 <update_ahrs+0x754>)
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
		}

		gx += Kp_imu * ex;
 8002bec:	4ba1      	ldr	r3, [pc, #644]	@ (8002e74 <update_ahrs+0x758>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe f90e 	bl	8000e14 <__aeabi_fmul>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002c00:	f7fe f800 	bl	8000c04 <__addsf3>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		gy += Kp_imu * ey;
 8002c0a:	4b9a      	ldr	r3, [pc, #616]	@ (8002e74 <update_ahrs+0x758>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe f8ff 	bl	8000e14 <__aeabi_fmul>
 8002c16:	4603      	mov	r3, r0
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8002c1e:	f7fd fff1 	bl	8000c04 <__addsf3>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		gz += Kp_imu * ez + emz * Kp_mag;
 8002c28:	4b92      	ldr	r3, [pc, #584]	@ (8002e74 <update_ahrs+0x758>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe f8f0 	bl	8000e14 <__aeabi_fmul>
 8002c34:	4603      	mov	r3, r0
 8002c36:	461c      	mov	r4, r3
 8002c38:	4b8f      	ldr	r3, [pc, #572]	@ (8002e78 <update_ahrs+0x75c>)
 8002c3a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe f8e9 	bl	8000e14 <__aeabi_fmul>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4619      	mov	r1, r3
 8002c46:	4620      	mov	r0, r4
 8002c48:	f7fd ffdc 	bl	8000c04 <__addsf3>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002c54:	f7fd ffd6 	bl	8000c04 <__addsf3>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	}

	gx *= (0.5f * dt);
 8002c5e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002c62:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8002c66:	f7fe f8d5 	bl	8000e14 <__aeabi_fmul>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002c72:	f7fe f8cf 	bl	8000e14 <__aeabi_fmul>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	gy *= (0.5f * dt);
 8002c7c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002c80:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8002c84:	f7fe f8c6 	bl	8000e14 <__aeabi_fmul>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8002c90:	f7fe f8c0 	bl	8000e14 <__aeabi_fmul>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	gz *= (0.5f * dt);
 8002c9a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002c9e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8002ca2:	f7fe f8b7 	bl	8000e14 <__aeabi_fmul>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002cae:	f7fe f8b1 	bl	8000e14 <__aeabi_fmul>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	q0 += (-q1 * gx - q2 * gy - q3 * gz);
 8002cb8:	4b70      	ldr	r3, [pc, #448]	@ (8002e7c <update_ahrs+0x760>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002cc0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe f8a5 	bl	8000e14 <__aeabi_fmul>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	461c      	mov	r4, r3
 8002cce:	4b6c      	ldr	r3, [pc, #432]	@ (8002e80 <update_ahrs+0x764>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe f89c 	bl	8000e14 <__aeabi_fmul>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f7fd ff8d 	bl	8000c00 <__aeabi_fsub>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	461c      	mov	r4, r3
 8002cea:	4b66      	ldr	r3, [pc, #408]	@ (8002e84 <update_ahrs+0x768>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe f88e 	bl	8000e14 <__aeabi_fmul>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f7fd ff7f 	bl	8000c00 <__aeabi_fsub>
 8002d02:	4603      	mov	r3, r0
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b60      	ldr	r3, [pc, #384]	@ (8002e88 <update_ahrs+0x76c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	f7fd ff79 	bl	8000c04 <__addsf3>
 8002d12:	4603      	mov	r3, r0
 8002d14:	461a      	mov	r2, r3
 8002d16:	4b5c      	ldr	r3, [pc, #368]	@ (8002e88 <update_ahrs+0x76c>)
 8002d18:	601a      	str	r2, [r3, #0]
	q1 += ( q0 * gx + q2 * gz - q3 * gy);
 8002d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e88 <update_ahrs+0x76c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe f876 	bl	8000e14 <__aeabi_fmul>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461c      	mov	r4, r3
 8002d2c:	4b54      	ldr	r3, [pc, #336]	@ (8002e80 <update_ahrs+0x764>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe f86d 	bl	8000e14 <__aeabi_fmul>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f7fd ff60 	bl	8000c04 <__addsf3>
 8002d44:	4603      	mov	r3, r0
 8002d46:	461c      	mov	r4, r3
 8002d48:	4b4e      	ldr	r3, [pc, #312]	@ (8002e84 <update_ahrs+0x768>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe f85f 	bl	8000e14 <__aeabi_fmul>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7fd ff50 	bl	8000c00 <__aeabi_fsub>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b45      	ldr	r3, [pc, #276]	@ (8002e7c <update_ahrs+0x760>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f7fd ff4a 	bl	8000c04 <__addsf3>
 8002d70:	4603      	mov	r3, r0
 8002d72:	461a      	mov	r2, r3
 8002d74:	4b41      	ldr	r3, [pc, #260]	@ (8002e7c <update_ahrs+0x760>)
 8002d76:	601a      	str	r2, [r3, #0]
	q2 += ( q0 * gy - q1 * gz + q3 * gx);
 8002d78:	4b43      	ldr	r3, [pc, #268]	@ (8002e88 <update_ahrs+0x76c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe f847 	bl	8000e14 <__aeabi_fmul>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461c      	mov	r4, r3
 8002d8a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e7c <update_ahrs+0x760>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe f83e 	bl	8000e14 <__aeabi_fmul>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f7fd ff2f 	bl	8000c00 <__aeabi_fsub>
 8002da2:	4603      	mov	r3, r0
 8002da4:	461c      	mov	r4, r3
 8002da6:	4b37      	ldr	r3, [pc, #220]	@ (8002e84 <update_ahrs+0x768>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe f830 	bl	8000e14 <__aeabi_fmul>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4619      	mov	r1, r3
 8002db8:	4620      	mov	r0, r4
 8002dba:	f7fd ff23 	bl	8000c04 <__addsf3>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002e80 <update_ahrs+0x764>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f7fd ff1b 	bl	8000c04 <__addsf3>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e80 <update_ahrs+0x764>)
 8002dd4:	601a      	str	r2, [r3, #0]
	q3 += ( q0 * gz + q1 * gy - q2 * gx);
 8002dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8002e88 <update_ahrs+0x76c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe f818 	bl	8000e14 <__aeabi_fmul>
 8002de4:	4603      	mov	r3, r0
 8002de6:	461c      	mov	r4, r3
 8002de8:	4b24      	ldr	r3, [pc, #144]	@ (8002e7c <update_ahrs+0x760>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe f80f 	bl	8000e14 <__aeabi_fmul>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f7fd ff02 	bl	8000c04 <__addsf3>
 8002e00:	4603      	mov	r3, r0
 8002e02:	461c      	mov	r4, r3
 8002e04:	4b1e      	ldr	r3, [pc, #120]	@ (8002e80 <update_ahrs+0x764>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe f801 	bl	8000e14 <__aeabi_fmul>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4619      	mov	r1, r3
 8002e16:	4620      	mov	r0, r4
 8002e18:	f7fd fef2 	bl	8000c00 <__aeabi_fsub>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b18      	ldr	r3, [pc, #96]	@ (8002e84 <update_ahrs+0x768>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f7fd feec 	bl	8000c04 <__addsf3>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b14      	ldr	r3, [pc, #80]	@ (8002e84 <update_ahrs+0x768>)
 8002e32:	601a      	str	r2, [r3, #0]

	norm = invSqrt_(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002e34:	4b14      	ldr	r3, [pc, #80]	@ (8002e88 <update_ahrs+0x76c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a13      	ldr	r2, [pc, #76]	@ (8002e88 <update_ahrs+0x76c>)
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd ffe8 	bl	8000e14 <__aeabi_fmul>
 8002e44:	4603      	mov	r3, r0
 8002e46:	461c      	mov	r4, r3
 8002e48:	4b0c      	ldr	r3, [pc, #48]	@ (8002e7c <update_ahrs+0x760>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e7c <update_ahrs+0x760>)
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd ffde 	bl	8000e14 <__aeabi_fmul>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7fd fed1 	bl	8000c04 <__addsf3>
 8002e62:	4603      	mov	r3, r0
 8002e64:	461c      	mov	r4, r3
 8002e66:	e011      	b.n	8002e8c <update_ahrs+0x770>
 8002e68:	200004e0 	.word	0x200004e0
 8002e6c:	200004e4 	.word	0x200004e4
 8002e70:	200004e8 	.word	0x200004e8
 8002e74:	20000010 	.word	0x20000010
 8002e78:	40a00000 	.word	0x40a00000
 8002e7c:	200004ec 	.word	0x200004ec
 8002e80:	200004f0 	.word	0x200004f0
 8002e84:	200004f4 	.word	0x200004f4
 8002e88:	20000014 	.word	0x20000014
 8002e8c:	4b94      	ldr	r3, [pc, #592]	@ (80030e0 <update_ahrs+0x9c4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a93      	ldr	r2, [pc, #588]	@ (80030e0 <update_ahrs+0x9c4>)
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd ffbc 	bl	8000e14 <__aeabi_fmul>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	f7fd feaf 	bl	8000c04 <__addsf3>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	461c      	mov	r4, r3
 8002eaa:	4b8e      	ldr	r3, [pc, #568]	@ (80030e4 <update_ahrs+0x9c8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a8d      	ldr	r2, [pc, #564]	@ (80030e4 <update_ahrs+0x9c8>)
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd ffad 	bl	8000e14 <__aeabi_fmul>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f7fd fea0 	bl	8000c04 <__addsf3>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fb14 	bl	80034f4 <invSqrt_>
 8002ecc:	67f8      	str	r0, [r7, #124]	@ 0x7c
	q0 *= norm;
 8002ece:	4b86      	ldr	r3, [pc, #536]	@ (80030e8 <update_ahrs+0x9cc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd ff9d 	bl	8000e14 <__aeabi_fmul>
 8002eda:	4603      	mov	r3, r0
 8002edc:	461a      	mov	r2, r3
 8002ede:	4b82      	ldr	r3, [pc, #520]	@ (80030e8 <update_ahrs+0x9cc>)
 8002ee0:	601a      	str	r2, [r3, #0]
	q1 *= norm;
 8002ee2:	4b82      	ldr	r3, [pc, #520]	@ (80030ec <update_ahrs+0x9d0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd ff93 	bl	8000e14 <__aeabi_fmul>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4b7e      	ldr	r3, [pc, #504]	@ (80030ec <update_ahrs+0x9d0>)
 8002ef4:	601a      	str	r2, [r3, #0]
	q2 *= norm;
 8002ef6:	4b7a      	ldr	r3, [pc, #488]	@ (80030e0 <update_ahrs+0x9c4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd ff89 	bl	8000e14 <__aeabi_fmul>
 8002f02:	4603      	mov	r3, r0
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b76      	ldr	r3, [pc, #472]	@ (80030e0 <update_ahrs+0x9c4>)
 8002f08:	601a      	str	r2, [r3, #0]
	q3 *= norm;
 8002f0a:	4b76      	ldr	r3, [pc, #472]	@ (80030e4 <update_ahrs+0x9c8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd ff7f 	bl	8000e14 <__aeabi_fmul>
 8002f16:	4603      	mov	r3, r0
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b72      	ldr	r3, [pc, #456]	@ (80030e4 <update_ahrs+0x9c8>)
 8002f1c:	601a      	str	r2, [r3, #0]
	
	float q0q1 = q0*q1;
 8002f1e:	4b72      	ldr	r3, [pc, #456]	@ (80030e8 <update_ahrs+0x9cc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a72      	ldr	r2, [pc, #456]	@ (80030ec <update_ahrs+0x9d0>)
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd ff73 	bl	8000e14 <__aeabi_fmul>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float q0q2 = q0*q2;
 8002f32:	4b6d      	ldr	r3, [pc, #436]	@ (80030e8 <update_ahrs+0x9cc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6a      	ldr	r2, [pc, #424]	@ (80030e0 <update_ahrs+0x9c4>)
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd ff69 	bl	8000e14 <__aeabi_fmul>
 8002f42:	4603      	mov	r3, r0
 8002f44:	62bb      	str	r3, [r7, #40]	@ 0x28
	float q0q3 = q0*q3;
 8002f46:	4b68      	ldr	r3, [pc, #416]	@ (80030e8 <update_ahrs+0x9cc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a66      	ldr	r2, [pc, #408]	@ (80030e4 <update_ahrs+0x9c8>)
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd ff5f 	bl	8000e14 <__aeabi_fmul>
 8002f56:	4603      	mov	r3, r0
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
	float q1q1 = q1*q1;
 8002f5a:	4b64      	ldr	r3, [pc, #400]	@ (80030ec <update_ahrs+0x9d0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a63      	ldr	r2, [pc, #396]	@ (80030ec <update_ahrs+0x9d0>)
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd ff55 	bl	8000e14 <__aeabi_fmul>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	623b      	str	r3, [r7, #32]
	float q1q2 = q1*q2;
 8002f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80030ec <update_ahrs+0x9d0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a5b      	ldr	r2, [pc, #364]	@ (80030e0 <update_ahrs+0x9c4>)
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fd ff4b 	bl	8000e14 <__aeabi_fmul>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	61fb      	str	r3, [r7, #28]
	float q1q3 = q1*q3;
 8002f82:	4b5a      	ldr	r3, [pc, #360]	@ (80030ec <update_ahrs+0x9d0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a57      	ldr	r2, [pc, #348]	@ (80030e4 <update_ahrs+0x9c8>)
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd ff41 	bl	8000e14 <__aeabi_fmul>
 8002f92:	4603      	mov	r3, r0
 8002f94:	61bb      	str	r3, [r7, #24]
	float q2q2 = q2*q2;
 8002f96:	4b52      	ldr	r3, [pc, #328]	@ (80030e0 <update_ahrs+0x9c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a51      	ldr	r2, [pc, #324]	@ (80030e0 <update_ahrs+0x9c4>)
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd ff37 	bl	8000e14 <__aeabi_fmul>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	617b      	str	r3, [r7, #20]
	float q2q3 = q2*q3;
 8002faa:	4b4d      	ldr	r3, [pc, #308]	@ (80030e0 <update_ahrs+0x9c4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a4d      	ldr	r2, [pc, #308]	@ (80030e4 <update_ahrs+0x9c8>)
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd ff2d 	bl	8000e14 <__aeabi_fmul>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	613b      	str	r3, [r7, #16]
	float q3q3 = q3*q3;
 8002fbe:	4b49      	ldr	r3, [pc, #292]	@ (80030e4 <update_ahrs+0x9c8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a48      	ldr	r2, [pc, #288]	@ (80030e4 <update_ahrs+0x9c8>)
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fd ff23 	bl	8000e14 <__aeabi_fmul>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	60fb      	str	r3, [r7, #12]

	// Quaternion to Rotation matrix
	dcm[0][0] = 2.0f*(0.5f - q2q2  - q3q3);
 8002fd2:	6979      	ldr	r1, [r7, #20]
 8002fd4:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8002fd8:	f7fd fe12 	bl	8000c00 <__aeabi_fsub>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	68f9      	ldr	r1, [r7, #12]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fe0d 	bl	8000c00 <__aeabi_fsub>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fe0a 	bl	8000c04 <__addsf3>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80030f0 <update_ahrs+0x9d4>)
 8002ff6:	601a      	str	r2, [r3, #0]
	dcm[1][0] = 2.0f*(q1q2 - q0q3);
 8002ff8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ffa:	69f8      	ldr	r0, [r7, #28]
 8002ffc:	f7fd fe00 	bl	8000c00 <__aeabi_fsub>
 8003000:	4603      	mov	r3, r0
 8003002:	4619      	mov	r1, r3
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd fdfd 	bl	8000c04 <__addsf3>
 800300a:	4603      	mov	r3, r0
 800300c:	461a      	mov	r2, r3
 800300e:	4b38      	ldr	r3, [pc, #224]	@ (80030f0 <update_ahrs+0x9d4>)
 8003010:	60da      	str	r2, [r3, #12]
	dcm[2][0] = 2.0f*(q1q3 + q0q2);
 8003012:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003014:	69b8      	ldr	r0, [r7, #24]
 8003016:	f7fd fdf5 	bl	8000c04 <__addsf3>
 800301a:	4603      	mov	r3, r0
 800301c:	4619      	mov	r1, r3
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd fdf0 	bl	8000c04 <__addsf3>
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	4b31      	ldr	r3, [pc, #196]	@ (80030f0 <update_ahrs+0x9d4>)
 800302a:	619a      	str	r2, [r3, #24]
	dcm[0][1] = 2.0f*(q1q2 + q0q3);
 800302c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800302e:	69f8      	ldr	r0, [r7, #28]
 8003030:	f7fd fde8 	bl	8000c04 <__addsf3>
 8003034:	4603      	mov	r3, r0
 8003036:	4619      	mov	r1, r3
 8003038:	4618      	mov	r0, r3
 800303a:	f7fd fde3 	bl	8000c04 <__addsf3>
 800303e:	4603      	mov	r3, r0
 8003040:	461a      	mov	r2, r3
 8003042:	4b2b      	ldr	r3, [pc, #172]	@ (80030f0 <update_ahrs+0x9d4>)
 8003044:	605a      	str	r2, [r3, #4]
	dcm[1][1] = 2.0f*(0.5f - q1q1 - q3q3);
 8003046:	6a39      	ldr	r1, [r7, #32]
 8003048:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800304c:	f7fd fdd8 	bl	8000c00 <__aeabi_fsub>
 8003050:	4603      	mov	r3, r0
 8003052:	68f9      	ldr	r1, [r7, #12]
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd fdd3 	bl	8000c00 <__aeabi_fsub>
 800305a:	4603      	mov	r3, r0
 800305c:	4619      	mov	r1, r3
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd fdd0 	bl	8000c04 <__addsf3>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	4b21      	ldr	r3, [pc, #132]	@ (80030f0 <update_ahrs+0x9d4>)
 800306a:	611a      	str	r2, [r3, #16]
	dcm[2][1] = 2.0f*(q2q3 - q0q1);
 800306c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800306e:	6938      	ldr	r0, [r7, #16]
 8003070:	f7fd fdc6 	bl	8000c00 <__aeabi_fsub>
 8003074:	4603      	mov	r3, r0
 8003076:	4619      	mov	r1, r3
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd fdc3 	bl	8000c04 <__addsf3>
 800307e:	4603      	mov	r3, r0
 8003080:	461a      	mov	r2, r3
 8003082:	4b1b      	ldr	r3, [pc, #108]	@ (80030f0 <update_ahrs+0x9d4>)
 8003084:	61da      	str	r2, [r3, #28]
	dcm[0][2] = 2.0f*(q1q3 - q0q2);
 8003086:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003088:	69b8      	ldr	r0, [r7, #24]
 800308a:	f7fd fdb9 	bl	8000c00 <__aeabi_fsub>
 800308e:	4603      	mov	r3, r0
 8003090:	4619      	mov	r1, r3
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd fdb6 	bl	8000c04 <__addsf3>
 8003098:	4603      	mov	r3, r0
 800309a:	461a      	mov	r2, r3
 800309c:	4b14      	ldr	r3, [pc, #80]	@ (80030f0 <update_ahrs+0x9d4>)
 800309e:	609a      	str	r2, [r3, #8]
	dcm[1][2] = 2.0f*(q2q3 + q0q1);
 80030a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030a2:	6938      	ldr	r0, [r7, #16]
 80030a4:	f7fd fdae 	bl	8000c04 <__addsf3>
 80030a8:	4603      	mov	r3, r0
 80030aa:	4619      	mov	r1, r3
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd fda9 	bl	8000c04 <__addsf3>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b0e      	ldr	r3, [pc, #56]	@ (80030f0 <update_ahrs+0x9d4>)
 80030b8:	615a      	str	r2, [r3, #20]
	dcm[2][2] = 2.0f*(0.5f - q1q1 - q2q2);
 80030ba:	6a39      	ldr	r1, [r7, #32]
 80030bc:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80030c0:	f7fd fd9e 	bl	8000c00 <__aeabi_fsub>
 80030c4:	4603      	mov	r3, r0
 80030c6:	6979      	ldr	r1, [r7, #20]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fd99 	bl	8000c00 <__aeabi_fsub>
 80030ce:	4603      	mov	r3, r0
 80030d0:	4619      	mov	r1, r3
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fd96 	bl	8000c04 <__addsf3>
 80030d8:	4603      	mov	r3, r0
 80030da:	461a      	mov	r2, r3
 80030dc:	e00a      	b.n	80030f4 <update_ahrs+0x9d8>
 80030de:	bf00      	nop
 80030e0:	200004f0 	.word	0x200004f0
 80030e4:	200004f4 	.word	0x200004f4
 80030e8:	20000014 	.word	0x20000014
 80030ec:	200004ec 	.word	0x200004ec
 80030f0:	200004f8 	.word	0x200004f8
 80030f4:	4b4c      	ldr	r3, [pc, #304]	@ (8003228 <update_ahrs+0xb0c>)
 80030f6:	621a      	str	r2, [r3, #32]
    AHRS.roll_rate  = (P + R*cosx*tany + Q*sinx*tany)*DEG;
    AHRS.pitch_rate = (Q*cosx - R*sinx)*DEG;
    AHRS.yaw_rate   = (R*cosx/cosy + Q*sinx/cosy)*DEG;
    */

	AHRS.pitch = -atan2_approx(-dcm[0][2],sqrtf(1 - dcm[0][2]*dcm[0][2]))*DEG;
 80030f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003228 <update_ahrs+0xb0c>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8003100:	4b49      	ldr	r3, [pc, #292]	@ (8003228 <update_ahrs+0xb0c>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a48      	ldr	r2, [pc, #288]	@ (8003228 <update_ahrs+0xb0c>)
 8003106:	6892      	ldr	r2, [r2, #8]
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd fe82 	bl	8000e14 <__aeabi_fmul>
 8003110:	4603      	mov	r3, r0
 8003112:	4619      	mov	r1, r3
 8003114:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003118:	f7fd fd72 	bl	8000c00 <__aeabi_fsub>
 800311c:	4603      	mov	r3, r0
 800311e:	4618      	mov	r0, r3
 8003120:	f00f fde4 	bl	8012cec <sqrtf>
 8003124:	4603      	mov	r3, r0
 8003126:	4619      	mov	r1, r3
 8003128:	4620      	mov	r0, r4
 800312a:	f000 f923 	bl	8003374 <atan2_approx>
 800312e:	4603      	mov	r3, r0
 8003130:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003134:	493d      	ldr	r1, [pc, #244]	@ (800322c <update_ahrs+0xb10>)
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd fe6c 	bl	8000e14 <__aeabi_fmul>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	4b3b      	ldr	r3, [pc, #236]	@ (8003230 <update_ahrs+0xb14>)
 8003142:	605a      	str	r2, [r3, #4]
	AHRS.roll = -atan2_approx(-dcm[1][2],dcm[2][2])*DEG;
 8003144:	4b38      	ldr	r3, [pc, #224]	@ (8003228 <update_ahrs+0xb0c>)
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800314c:	4a36      	ldr	r2, [pc, #216]	@ (8003228 <update_ahrs+0xb0c>)
 800314e:	6a12      	ldr	r2, [r2, #32]
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f90e 	bl	8003374 <atan2_approx>
 8003158:	4603      	mov	r3, r0
 800315a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800315e:	4933      	ldr	r1, [pc, #204]	@ (800322c <update_ahrs+0xb10>)
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd fe57 	bl	8000e14 <__aeabi_fmul>
 8003166:	4603      	mov	r3, r0
 8003168:	461a      	mov	r2, r3
 800316a:	4b31      	ldr	r3, [pc, #196]	@ (8003230 <update_ahrs+0xb14>)
 800316c:	601a      	str	r2, [r3, #0]
	float yaw_ = -atan2_approx(dcm[0][1],dcm[0][0])*DEG;
 800316e:	4b2e      	ldr	r3, [pc, #184]	@ (8003228 <update_ahrs+0xb0c>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4a2d      	ldr	r2, [pc, #180]	@ (8003228 <update_ahrs+0xb0c>)
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f8fb 	bl	8003374 <atan2_approx>
 800317e:	4603      	mov	r3, r0
 8003180:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003184:	4929      	ldr	r1, [pc, #164]	@ (800322c <update_ahrs+0xb10>)
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd fe44 	bl	8000e14 <__aeabi_fmul>
 800318c:	4603      	mov	r3, r0
 800318e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	if(yaw_ < 0){
 8003192:	f04f 0100 	mov.w	r1, #0
 8003196:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800319a:	f7fd ffd9 	bl	8001150 <__aeabi_fcmplt>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <update_ahrs+0xa98>
		 yaw_ = 360 + yaw_;
 80031a4:	4923      	ldr	r1, [pc, #140]	@ (8003234 <update_ahrs+0xb18>)
 80031a6:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80031aa:	f7fd fd2b 	bl	8000c04 <__addsf3>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	}
	AHRS.yaw =  yaw_;
 80031b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003230 <update_ahrs+0xb14>)
 80031b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031ba:	6093      	str	r3, [r2, #8]
	AHRS.roll_rate  = gx_/config.gyr_lsb;
 80031bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fd fdd3 	bl	8000d6c <__aeabi_i2f>
 80031c6:	4602      	mov	r2, r0
 80031c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003238 <update_ahrs+0xb1c>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4619      	mov	r1, r3
 80031ce:	4610      	mov	r0, r2
 80031d0:	f7fd fed4 	bl	8000f7c <__aeabi_fdiv>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b15      	ldr	r3, [pc, #84]	@ (8003230 <update_ahrs+0xb14>)
 80031da:	60da      	str	r2, [r3, #12]
	AHRS.pitch_rate = -gy_/config.gyr_lsb;
 80031dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80031e0:	425b      	negs	r3, r3
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd fdc2 	bl	8000d6c <__aeabi_i2f>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b13      	ldr	r3, [pc, #76]	@ (8003238 <update_ahrs+0xb1c>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f7fd fec3 	bl	8000f7c <__aeabi_fdiv>
 80031f6:	4603      	mov	r3, r0
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003230 <update_ahrs+0xb14>)
 80031fc:	611a      	str	r2, [r3, #16]
	AHRS.yaw_rate   = -gz_/config.gyr_lsb;
 80031fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003202:	425b      	negs	r3, r3
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd fdb1 	bl	8000d6c <__aeabi_i2f>
 800320a:	4602      	mov	r2, r0
 800320c:	4b0a      	ldr	r3, [pc, #40]	@ (8003238 <update_ahrs+0xb1c>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4619      	mov	r1, r3
 8003212:	4610      	mov	r0, r2
 8003214:	f7fd feb2 	bl	8000f7c <__aeabi_fdiv>
 8003218:	4603      	mov	r3, r0
 800321a:	461a      	mov	r2, r3
 800321c:	4b04      	ldr	r3, [pc, #16]	@ (8003230 <update_ahrs+0xb14>)
 800321e:	615a      	str	r2, [r3, #20]

}
 8003220:	bf00      	nop
 8003222:	3794      	adds	r7, #148	@ 0x94
 8003224:	46bd      	mov	sp, r7
 8003226:	bd90      	pop	{r4, r7, pc}
 8003228:	200004f8 	.word	0x200004f8
 800322c:	42652ee0 	.word	0x42652ee0
 8003230:	200004c8 	.word	0x200004c8
 8003234:	43b40000 	.word	0x43b40000
 8003238:	20000018 	.word	0x20000018

0800323c <sin_approx>:
#define sinPolyCoef5  8.333017292e-3f                                          // Double:  8.333017291562218127986291618761571373087e-3
#define sinPolyCoef7 -1.980661520e-4f                                          // Double: -1.980661520135080504411629636078917643846e-4
#define sinPolyCoef9  2.600054768e-6f                                          // Double:  2.600054767890361277123254766503271638682e-6
#endif
float sin_approx(float x)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
    int32_t xint = x;
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7fd ffc1 	bl	80011cc <__aeabi_f2iz>
 800324a:	4603      	mov	r3, r0
 800324c:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f113 0f20 	cmn.w	r3, #32
 8003254:	db02      	blt.n	800325c <sin_approx+0x20>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b20      	cmp	r3, #32
 800325a:	dd08      	ble.n	800326e <sin_approx+0x32>
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e074      	b.n	800334c <sin_approx+0x110>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 8003262:	493c      	ldr	r1, [pc, #240]	@ (8003354 <sin_approx+0x118>)
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7fd fccb 	bl	8000c00 <__aeabi_fsub>
 800326a:	4603      	mov	r3, r0
 800326c:	607b      	str	r3, [r7, #4]
 800326e:	493a      	ldr	r1, [pc, #232]	@ (8003358 <sin_approx+0x11c>)
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7fd ff8b 	bl	800118c <__aeabi_fcmpgt>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f2      	bne.n	8003262 <sin_approx+0x26>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 800327c:	e005      	b.n	800328a <sin_approx+0x4e>
 800327e:	4935      	ldr	r1, [pc, #212]	@ (8003354 <sin_approx+0x118>)
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fd fcbf 	bl	8000c04 <__addsf3>
 8003286:	4603      	mov	r3, r0
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	4934      	ldr	r1, [pc, #208]	@ (800335c <sin_approx+0x120>)
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7fd ff5f 	bl	8001150 <__aeabi_fcmplt>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f2      	bne.n	800327e <sin_approx+0x42>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 8003298:	4931      	ldr	r1, [pc, #196]	@ (8003360 <sin_approx+0x124>)
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd ff76 	bl	800118c <__aeabi_fcmpgt>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00b      	beq.n	80032be <sin_approx+0x82>
 80032a6:	492e      	ldr	r1, [pc, #184]	@ (8003360 <sin_approx+0x124>)
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7fd fca9 	bl	8000c00 <__aeabi_fsub>
 80032ae:	4603      	mov	r3, r0
 80032b0:	4619      	mov	r1, r3
 80032b2:	482b      	ldr	r0, [pc, #172]	@ (8003360 <sin_approx+0x124>)
 80032b4:	f7fd fca4 	bl	8000c00 <__aeabi_fsub>
 80032b8:	4603      	mov	r3, r0
 80032ba:	607b      	str	r3, [r7, #4]
 80032bc:	e011      	b.n	80032e2 <sin_approx+0xa6>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 80032be:	4929      	ldr	r1, [pc, #164]	@ (8003364 <sin_approx+0x128>)
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7fd ff45 	bl	8001150 <__aeabi_fcmplt>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <sin_approx+0xa6>
 80032cc:	4924      	ldr	r1, [pc, #144]	@ (8003360 <sin_approx+0x124>)
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fd fc98 	bl	8000c04 <__addsf3>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4619      	mov	r1, r3
 80032d8:	4822      	ldr	r0, [pc, #136]	@ (8003364 <sin_approx+0x128>)
 80032da:	f7fd fc91 	bl	8000c00 <__aeabi_fsub>
 80032de:	4603      	mov	r3, r0
 80032e0:	607b      	str	r3, [r7, #4]
    float x2 = x * x;
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7fd fd95 	bl	8000e14 <__aeabi_fmul>
 80032ea:	4603      	mov	r3, r0
 80032ec:	60bb      	str	r3, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7fd fd8f 	bl	8000e14 <__aeabi_fmul>
 80032f6:	4603      	mov	r3, r0
 80032f8:	461c      	mov	r4, r3
 80032fa:	f04f 0100 	mov.w	r1, #0
 80032fe:	68b8      	ldr	r0, [r7, #8]
 8003300:	f7fd fd88 	bl	8000e14 <__aeabi_fmul>
 8003304:	4603      	mov	r3, r0
 8003306:	4918      	ldr	r1, [pc, #96]	@ (8003368 <sin_approx+0x12c>)
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd fc79 	bl	8000c00 <__aeabi_fsub>
 800330e:	4603      	mov	r3, r0
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd fd7e 	bl	8000e14 <__aeabi_fmul>
 8003318:	4603      	mov	r3, r0
 800331a:	4914      	ldr	r1, [pc, #80]	@ (800336c <sin_approx+0x130>)
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd fc71 	bl	8000c04 <__addsf3>
 8003322:	4603      	mov	r3, r0
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd fd74 	bl	8000e14 <__aeabi_fmul>
 800332c:	4603      	mov	r3, r0
 800332e:	4910      	ldr	r1, [pc, #64]	@ (8003370 <sin_approx+0x134>)
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd fc65 	bl	8000c00 <__aeabi_fsub>
 8003336:	4603      	mov	r3, r0
 8003338:	4619      	mov	r1, r3
 800333a:	4620      	mov	r0, r4
 800333c:	f7fd fd6a 	bl	8000e14 <__aeabi_fmul>
 8003340:	4603      	mov	r3, r0
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd fc5d 	bl	8000c04 <__addsf3>
 800334a:	4603      	mov	r3, r0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	bd90      	pop	{r4, r7, pc}
 8003354:	40c90fdb 	.word	0x40c90fdb
 8003358:	40490fdb 	.word	0x40490fdb
 800335c:	c0490fdb 	.word	0xc0490fdb
 8003360:	3fc90fdb 	.word	0x3fc90fdb
 8003364:	bfc90fdb 	.word	0xbfc90fdb
 8003368:	3941e792 	.word	0x3941e792
 800336c:	3c083097 	.word	0x3c083097
 8003370:	3e2aa815 	.word	0x3e2aa815

08003374 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b08b      	sub	sp, #44	@ 0x2c
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003384:	623b      	str	r3, [r7, #32]
    absY = fabsf(y);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800338c:	61fb      	str	r3, [r7, #28]
    res  = MAX(absX, absY);
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	6979      	ldr	r1, [r7, #20]
 8003398:	69b8      	ldr	r0, [r7, #24]
 800339a:	f7fd fef7 	bl	800118c <__aeabi_fcmpgt>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <atan2_approx+0x34>
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	e000      	b.n	80033aa <atan2_approx+0x36>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
    if (res) res = MIN(absX, absY) / res;
 80033ac:	f04f 0100 	mov.w	r1, #0
 80033b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033b2:	f7fd fec3 	bl	800113c <__aeabi_fcmpeq>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d114      	bne.n	80033e6 <atan2_approx+0x72>
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68f9      	ldr	r1, [r7, #12]
 80033c6:	6938      	ldr	r0, [r7, #16]
 80033c8:	f7fd fec2 	bl	8001150 <__aeabi_fcmplt>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <atan2_approx+0x62>
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	e000      	b.n	80033d8 <atan2_approx+0x64>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd fdce 	bl	8000f7c <__aeabi_fdiv>
 80033e0:	4603      	mov	r3, r0
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033e4:	e002      	b.n	80033ec <atan2_approx+0x78>
    else res = 0.0f;
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 80033ec:	4938      	ldr	r1, [pc, #224]	@ (80034d0 <atan2_approx+0x15c>)
 80033ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033f0:	f7fd fd10 	bl	8000e14 <__aeabi_fmul>
 80033f4:	4603      	mov	r3, r0
 80033f6:	4937      	ldr	r1, [pc, #220]	@ (80034d4 <atan2_approx+0x160>)
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd fc01 	bl	8000c00 <__aeabi_fsub>
 80033fe:	4603      	mov	r3, r0
 8003400:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd fd06 	bl	8000e14 <__aeabi_fmul>
 8003408:	4603      	mov	r3, r0
 800340a:	4933      	ldr	r1, [pc, #204]	@ (80034d8 <atan2_approx+0x164>)
 800340c:	4618      	mov	r0, r3
 800340e:	f7fd fbf7 	bl	8000c00 <__aeabi_fsub>
 8003412:	4603      	mov	r3, r0
 8003414:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd fcfc 	bl	8000e14 <__aeabi_fmul>
 800341c:	4603      	mov	r3, r0
 800341e:	492f      	ldr	r1, [pc, #188]	@ (80034dc <atan2_approx+0x168>)
 8003420:	4618      	mov	r0, r3
 8003422:	f7fd fbed 	bl	8000c00 <__aeabi_fsub>
 8003426:	4603      	mov	r3, r0
 8003428:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fcf2 	bl	8000e14 <__aeabi_fmul>
 8003430:	4603      	mov	r3, r0
 8003432:	492b      	ldr	r1, [pc, #172]	@ (80034e0 <atan2_approx+0x16c>)
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd fbe3 	bl	8000c00 <__aeabi_fsub>
 800343a:	4603      	mov	r3, r0
 800343c:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8003440:	4928      	ldr	r1, [pc, #160]	@ (80034e4 <atan2_approx+0x170>)
 8003442:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003444:	f7fd fce6 	bl	8000e14 <__aeabi_fmul>
 8003448:	4603      	mov	r3, r0
 800344a:	4927      	ldr	r1, [pc, #156]	@ (80034e8 <atan2_approx+0x174>)
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd fbd9 	bl	8000c04 <__addsf3>
 8003452:	4603      	mov	r3, r0
 8003454:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd fcdc 	bl	8000e14 <__aeabi_fmul>
 800345c:	4603      	mov	r3, r0
 800345e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd fbce 	bl	8000c04 <__addsf3>
 8003468:	4603      	mov	r3, r0
 800346a:	4619      	mov	r1, r3
 800346c:	4620      	mov	r0, r4
 800346e:	f7fd fd85 	bl	8000f7c <__aeabi_fdiv>
 8003472:	4603      	mov	r3, r0
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8003476:	6a39      	ldr	r1, [r7, #32]
 8003478:	69f8      	ldr	r0, [r7, #28]
 800347a:	f7fd fe87 	bl	800118c <__aeabi_fcmpgt>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <atan2_approx+0x11c>
 8003484:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003486:	4819      	ldr	r0, [pc, #100]	@ (80034ec <atan2_approx+0x178>)
 8003488:	f7fd fbba 	bl	8000c00 <__aeabi_fsub>
 800348c:	4603      	mov	r3, r0
 800348e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (x < 0) res = M_PIf - res;
 8003490:	f04f 0100 	mov.w	r1, #0
 8003494:	6838      	ldr	r0, [r7, #0]
 8003496:	f7fd fe5b 	bl	8001150 <__aeabi_fcmplt>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <atan2_approx+0x138>
 80034a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034a2:	4813      	ldr	r0, [pc, #76]	@ (80034f0 <atan2_approx+0x17c>)
 80034a4:	f7fd fbac 	bl	8000c00 <__aeabi_fsub>
 80034a8:	4603      	mov	r3, r0
 80034aa:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) res = -res;
 80034ac:	f04f 0100 	mov.w	r1, #0
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7fd fe4d 	bl	8001150 <__aeabi_fcmplt>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <atan2_approx+0x150>
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034be:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24
    return res;
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	372c      	adds	r7, #44	@ 0x2c
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd90      	pop	{r4, r7, pc}
 80034ce:	bf00      	nop
 80034d0:	3d4e0939 	.word	0x3d4e0939
 80034d4:	3e9eb5e3 	.word	0x3e9eb5e3
 80034d8:	3e16fa88 	.word	0x3e16fa88
 80034dc:	3f7ffe45 	.word	0x3f7ffe45
 80034e0:	34a8dfa7 	.word	0x34a8dfa7
 80034e4:	3f24fb99 	.word	0x3f24fb99
 80034e8:	3e16a269 	.word	0x3e16a269
 80034ec:	3fc90fdb 	.word	0x3fc90fdb
 80034f0:	40490fdb 	.word	0x40490fdb

080034f4 <invSqrt_>:
    return (num << 12) / den;
}


float invSqrt_(float x)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 80034fc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7fd fc87 	bl	8000e14 <__aeabi_fmul>
 8003506:	4603      	mov	r3, r0
 8003508:	617b      	str	r3, [r7, #20]
	float y = x;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800350e:	f107 0310 	add.w	r3, r7, #16
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	105a      	asrs	r2, r3, #1
 800351a:	4b13      	ldr	r3, [pc, #76]	@ (8003568 <invSqrt_+0x74>)
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8003520:	f107 030c 	add.w	r3, r7, #12
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	6979      	ldr	r1, [r7, #20]
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fc71 	bl	8000e14 <__aeabi_fmul>
 8003532:	4603      	mov	r3, r0
 8003534:	461a      	mov	r2, r3
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4619      	mov	r1, r3
 800353a:	4610      	mov	r0, r2
 800353c:	f7fd fc6a 	bl	8000e14 <__aeabi_fmul>
 8003540:	4603      	mov	r3, r0
 8003542:	4619      	mov	r1, r3
 8003544:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8003548:	f7fd fb5a 	bl	8000c00 <__aeabi_fsub>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4619      	mov	r1, r3
 8003554:	4610      	mov	r0, r2
 8003556:	f7fd fc5d 	bl	8000e14 <__aeabi_fmul>
 800355a:	4603      	mov	r3, r0
 800355c:	613b      	str	r3, [r7, #16]
	//y = y * (1.5f - (halfx * y * y));
	return y;
 800355e:	693b      	ldr	r3, [r7, #16]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	5f3759df 	.word	0x5f3759df

0800356c <constrainf>:
    else
        return amt;
}

static inline float constrainf(float amt, float low, float high)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f7fd fde8 	bl	8001150 <__aeabi_fcmplt>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <constrainf+0x1e>
        return low;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	e009      	b.n	800359e <constrainf+0x32>
    else if (amt > high)
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7fd fdfd 	bl	800118c <__aeabi_fcmpgt>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <constrainf+0x30>
        return high;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	e000      	b.n	800359e <constrainf+0x32>
    else
        return amt;
 800359c:	68fb      	ldr	r3, [r7, #12]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <pid_init>:
#include "string.h"

#define usTosec(x)    (x *(1e-06f))
#define MAX_WAIT_TIME 500000

void pid_init(pid_t  *pid_in,float kp, float ki, float kd, float f_cut_D, float maxI){
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
 80035b2:	603b      	str	r3, [r7, #0]
  memset(pid_in,0,sizeof(pid_t));
 80035b4:	2224      	movs	r2, #36	@ 0x24
 80035b6:	2100      	movs	r1, #0
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f00f fb21 	bl	8012c00 <memset>
  pid_in->kp = kp;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	601a      	str	r2, [r3, #0]
  pid_in->ki = ki;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	605a      	str	r2, [r3, #4]
  pid_in->kd = kd;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	609a      	str	r2, [r3, #8]
  pid_in->f_cut_D = f_cut_D;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	61da      	str	r2, [r3, #28]
  pid_in->I_range = maxI;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	619a      	str	r2, [r3, #24]
  pid_in->last_input = 0;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	611a      	str	r2, [r3, #16]
  pid_in->D_filted = 0;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	615a      	str	r2, [r3, #20]
  pid_in->init = 1;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2020 	strb.w	r2, [r3, #32]
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <pid_calculate>:

float pid_calculate(pid_t *pid_in,float input, float setpoint,float dt){
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b08b      	sub	sp, #44	@ 0x2c
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
   if(pid_in->init){
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d009      	beq.n	8003628 <pid_calculate+0x2c>
       pid_in->last_input = input;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	611a      	str	r2, [r3, #16]
       pid_in->init = 0;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2020 	strb.w	r2, [r3, #32]
       return 0.0f;
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e09e      	b.n	8003766 <pid_calculate+0x16a>
   }

   float error = setpoint - input;
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fd fae8 	bl	8000c00 <__aeabi_fsub>
 8003630:	4603      	mov	r3, r0
 8003632:	623b      	str	r3, [r7, #32]
   float output = error*pid_in->kp;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4619      	mov	r1, r3
 800363a:	6a38      	ldr	r0, [r7, #32]
 800363c:	f7fd fbea 	bl	8000e14 <__aeabi_fmul>
 8003640:	4603      	mov	r3, r0
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24

   if(pid_in->ki > 0){
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f04f 0100 	mov.w	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f7fd fd9d 	bl	800118c <__aeabi_fcmpgt>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d02b      	beq.n	80036b0 <pid_calculate+0xb4>
      pid_in->i_term += error *pid_in->ki *dt;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	68dc      	ldr	r4, [r3, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	6a39      	ldr	r1, [r7, #32]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fd fbd6 	bl	8000e14 <__aeabi_fmul>
 8003668:	4603      	mov	r3, r0
 800366a:	6839      	ldr	r1, [r7, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7fd fbd1 	bl	8000e14 <__aeabi_fmul>
 8003672:	4603      	mov	r3, r0
 8003674:	4619      	mov	r1, r3
 8003676:	4620      	mov	r0, r4
 8003678:	f7fd fac4 	bl	8000c04 <__addsf3>
 800367c:	4603      	mov	r3, r0
 800367e:	461a      	mov	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	60da      	str	r2, [r3, #12]
      pid_in->i_term = constrainf(pid_in->i_term,-pid_in->I_range,pid_in->I_range);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	68d8      	ldr	r0, [r3, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	461a      	mov	r2, r3
 8003696:	f7ff ff69 	bl	800356c <constrainf>
 800369a:	4602      	mov	r2, r0
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	60da      	str	r2, [r3, #12]
      output += pid_in->i_term;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4619      	mov	r1, r3
 80036a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036a8:	f7fd faac 	bl	8000c04 <__addsf3>
 80036ac:	4603      	mov	r3, r0
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   if(pid_in->kd > 0){
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f04f 0100 	mov.w	r1, #0
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fd fd67 	bl	800118c <__aeabi_fcmpgt>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d04f      	beq.n	8003764 <pid_calculate+0x168>
        // low pass filter
        float RC = 1.0f / (2 *M_PIf *pid_in->f_cut_D);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	4929      	ldr	r1, [pc, #164]	@ (8003770 <pid_calculate+0x174>)
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fd fba2 	bl	8000e14 <__aeabi_fmul>
 80036d0:	4603      	mov	r3, r0
 80036d2:	4619      	mov	r1, r3
 80036d4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80036d8:	f7fd fc50 	bl	8000f7c <__aeabi_fdiv>
 80036dc:	4603      	mov	r3, r0
 80036de:	61fb      	str	r3, [r7, #28]
        float gain_lpf = dt/(RC + dt);
 80036e0:	6839      	ldr	r1, [r7, #0]
 80036e2:	69f8      	ldr	r0, [r7, #28]
 80036e4:	f7fd fa8e 	bl	8000c04 <__addsf3>
 80036e8:	4603      	mov	r3, r0
 80036ea:	4619      	mov	r1, r3
 80036ec:	6838      	ldr	r0, [r7, #0]
 80036ee:	f7fd fc45 	bl	8000f7c <__aeabi_fdiv>
 80036f2:	4603      	mov	r3, r0
 80036f4:	61bb      	str	r3, [r7, #24]
        float delta =  (input - pid_in->last_input)*pid_in->kd;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	4619      	mov	r1, r3
 80036fc:	68b8      	ldr	r0, [r7, #8]
 80036fe:	f7fd fa7f 	bl	8000c00 <__aeabi_fsub>
 8003702:	4603      	mov	r3, r0
 8003704:	461a      	mov	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	4619      	mov	r1, r3
 800370c:	4610      	mov	r0, r2
 800370e:	f7fd fb81 	bl	8000e14 <__aeabi_fmul>
 8003712:	4603      	mov	r3, r0
 8003714:	617b      	str	r3, [r7, #20]
        pid_in->last_input = input;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	611a      	str	r2, [r3, #16]
        delta /= dt;
 800371c:	6839      	ldr	r1, [r7, #0]
 800371e:	6978      	ldr	r0, [r7, #20]
 8003720:	f7fd fc2c 	bl	8000f7c <__aeabi_fdiv>
 8003724:	4603      	mov	r3, r0
 8003726:	617b      	str	r3, [r7, #20]
        pid_in->D_filted += gain_lpf*(delta - pid_in->D_filted);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	695c      	ldr	r4, [r3, #20]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	4619      	mov	r1, r3
 8003732:	6978      	ldr	r0, [r7, #20]
 8003734:	f7fd fa64 	bl	8000c00 <__aeabi_fsub>
 8003738:	4603      	mov	r3, r0
 800373a:	69b9      	ldr	r1, [r7, #24]
 800373c:	4618      	mov	r0, r3
 800373e:	f7fd fb69 	bl	8000e14 <__aeabi_fmul>
 8003742:	4603      	mov	r3, r0
 8003744:	4619      	mov	r1, r3
 8003746:	4620      	mov	r0, r4
 8003748:	f7fd fa5c 	bl	8000c04 <__addsf3>
 800374c:	4603      	mov	r3, r0
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	615a      	str	r2, [r3, #20]
        output -= pid_in->D_filted;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	4619      	mov	r1, r3
 800375a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800375c:	f7fd fa50 	bl	8000c00 <__aeabi_fsub>
 8003760:	4603      	mov	r3, r0
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   return output;
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003766:	4618      	mov	r0, r3
 8003768:	372c      	adds	r7, #44	@ 0x2c
 800376a:	46bd      	mov	sp, r7
 800376c:	bd90      	pop	{r4, r7, pc}
 800376e:	bf00      	nop
 8003770:	40c90fdb 	.word	0x40c90fdb

08003774 <constrain>:
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	429a      	cmp	r2, r3
 8003786:	da01      	bge.n	800378c <constrain+0x18>
        return low;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	e006      	b.n	800379a <constrain+0x26>
    else if (amt > high)
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	429a      	cmp	r2, r3
 8003792:	dd01      	ble.n	8003798 <constrain+0x24>
        return high;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	e000      	b.n	800379a <constrain+0x26>
        return amt;
 8003798:	68fb      	ldr	r3, [r7, #12]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr

080037a4 <initPWM>:
uint8_t pwm_lock_status;

/*
 * init pwm 
 */
void initPWM(TIM_HandleTypeDef *htim){
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
	htimm = htim;
 80037ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003820 <initPWM+0x7c>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6013      	str	r3, [r2, #0]
	pr_status = 1;
 80037b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003824 <initPWM+0x80>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	701a      	strb	r2, [r3, #0]
	pwm_lock_status = 0;
 80037b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003828 <initPWM+0x84>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
	pwm_last_update_ms= 0;
 80037be:	4b1b      	ldr	r3, [pc, #108]	@ (800382c <initPWM+0x88>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch1);
 80037c4:	2100      	movs	r1, #0
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f006 fdf8 	bl	800a3bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch2);
 80037cc:	2104      	movs	r1, #4
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f006 fdf4 	bl	800a3bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch3);
 80037d4:	2108      	movs	r1, #8
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f006 fdf0 	bl	800a3bc <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim,ch4);
	__HAL_TIM_SetAutoreload(htimm,PWM_RELOAD_AFFTER);
 80037dc:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <initPWM+0x7c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80037e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80037e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003820 <initPWM+0x7c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f242 7210 	movw	r2, #10000	@ 0x2710
 80037f0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SetCompare (htimm,ch1,1000);
 80037f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003820 <initPWM+0x7c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037fc:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare (htimm,ch2,1500);
 80037fe:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <initPWM+0x7c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003808:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare (htimm,ch3,1500);
 800380a:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <initPWM+0x7c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003814:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000528 	.word	0x20000528
 8003824:	20000530 	.word	0x20000530
 8003828:	20000531 	.word	0x20000531
 800382c:	2000052c 	.word	0x2000052c

08003830 <writePwm>:


void writePwm(uint32_t Channel,int16_t dulty,int8_t invert)
{     if( invert){
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
 800383c:	4613      	mov	r3, r2
 800383e:	707b      	strb	r3, [r7, #1]
 8003840:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <writePwm+0x2c>
	    dulty -= 1000;
 8003848:	887b      	ldrh	r3, [r7, #2]
 800384a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800384e:	b29b      	uxth	r3, r3
 8003850:	807b      	strh	r3, [r7, #2]
	    dulty  = 2000 - dulty; 
 8003852:	887b      	ldrh	r3, [r7, #2]
 8003854:	f5c3 63fa 	rsb	r3, r3, #2000	@ 0x7d0
 8003858:	b29b      	uxth	r3, r3
 800385a:	807b      	strh	r3, [r7, #2]
      }
	  dulty = constrain(dulty,1000,2000);
 800385c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003860:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003864:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff ff83 	bl	8003774 <constrain>
 800386e:	4603      	mov	r3, r0
 8003870:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <writePwm+0x56>
 8003878:	4b12      	ldr	r3, [pc, #72]	@ (80038c4 <writePwm+0x94>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003882:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003884:	e019      	b.n	80038ba <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b04      	cmp	r3, #4
 800388a:	d106      	bne.n	800389a <writePwm+0x6a>
 800388c:	4b0d      	ldr	r3, [pc, #52]	@ (80038c4 <writePwm+0x94>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003896:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003898:	e00f      	b.n	80038ba <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b08      	cmp	r3, #8
 800389e:	d106      	bne.n	80038ae <writePwm+0x7e>
 80038a0:	4b08      	ldr	r3, [pc, #32]	@ (80038c4 <writePwm+0x94>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038aa:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80038ac:	e005      	b.n	80038ba <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 80038ae:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <writePwm+0x94>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038b8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000528 	.word	0x20000528

080038c8 <write_pwm_ctrl>:

void write_pwm_ctrl(uint16_t throtlle,uint16_t servoL,uint16_t servoR){
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	80fb      	strh	r3, [r7, #6]
 80038d2:	460b      	mov	r3, r1
 80038d4:	80bb      	strh	r3, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	807b      	strh	r3, [r7, #2]
      if(pr_status || pwm_lock_status){
 80038da:	4b17      	ldr	r3, [pc, #92]	@ (8003938 <write_pwm_ctrl+0x70>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d103      	bne.n	80038ea <write_pwm_ctrl+0x22>
 80038e2:	4b16      	ldr	r3, [pc, #88]	@ (800393c <write_pwm_ctrl+0x74>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <write_pwm_ctrl+0x34>
           pwm_last_update_ms = HAL_GetTick();
 80038ea:	f002 fae7 	bl	8005ebc <HAL_GetTick>
 80038ee:	4603      	mov	r3, r0
 80038f0:	4a13      	ldr	r2, [pc, #76]	@ (8003940 <write_pwm_ctrl+0x78>)
 80038f2:	6013      	str	r3, [r2, #0]
		   pr_status = 0;
 80038f4:	4b10      	ldr	r3, [pc, #64]	@ (8003938 <write_pwm_ctrl+0x70>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	701a      	strb	r2, [r3, #0]
		   return;
 80038fa:	e019      	b.n	8003930 <write_pwm_ctrl+0x68>
	  }
	 writePwm(TIM_CHANNEL_1,throtlle,INVERT);
 80038fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003900:	2201      	movs	r2, #1
 8003902:	4619      	mov	r1, r3
 8003904:	2000      	movs	r0, #0
 8003906:	f7ff ff93 	bl	8003830 <writePwm>
     writePwm(TIM_CHANNEL_2,servoL,INVERT);
 800390a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	4619      	mov	r1, r3
 8003912:	2004      	movs	r0, #4
 8003914:	f7ff ff8c 	bl	8003830 <writePwm>
     writePwm(TIM_CHANNEL_3,servoR,NOT_INVERT);
 8003918:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800391c:	2200      	movs	r2, #0
 800391e:	4619      	mov	r1, r3
 8003920:	2008      	movs	r0, #8
 8003922:	f7ff ff85 	bl	8003830 <writePwm>
	pwm_last_update_ms = HAL_GetTick();
 8003926:	f002 fac9 	bl	8005ebc <HAL_GetTick>
 800392a:	4603      	mov	r3, r0
 800392c:	4a04      	ldr	r2, [pc, #16]	@ (8003940 <write_pwm_ctrl+0x78>)
 800392e:	6013      	str	r3, [r2, #0]
}
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000530 	.word	0x20000530
 800393c:	20000531 	.word	0x20000531
 8003940:	2000052c 	.word	0x2000052c

08003944 <timer_start>:
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}

void timer_start(TIM_HandleTypeDef *htimz){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	htimmz = htimz;
 800394c:	4a05      	ldr	r2, [pc, #20]	@ (8003964 <timer_start+0x20>)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htimmz);
 8003952:	4b04      	ldr	r3, [pc, #16]	@ (8003964 <timer_start+0x20>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f006 fc78 	bl	800a24c <HAL_TIM_Base_Start_IT>
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000534 	.word	0x20000534

08003968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800396e:	4b0c      	ldr	r3, [pc, #48]	@ (80039a0 <MX_DMA_Init+0x38>)
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	4a0b      	ldr	r2, [pc, #44]	@ (80039a0 <MX_DMA_Init+0x38>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	6153      	str	r3, [r2, #20]
 800397a:	4b09      	ldr	r3, [pc, #36]	@ (80039a0 <MX_DMA_Init+0x38>)
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	607b      	str	r3, [r7, #4]
 8003984:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8003986:	2200      	movs	r2, #0
 8003988:	2105      	movs	r1, #5
 800398a:	200e      	movs	r0, #14
 800398c:	f002 fb79 	bl	8006082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003990:	200e      	movs	r0, #14
 8003992:	f002 fb92 	bl	80060ba <HAL_NVIC_EnableIRQ>

}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000

080039a4 <HAL_UART_RxCpltCallback>:
#include "../flight/plane.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
    if(huart == ibus_uart_port())
 80039ac:	f7fd fc7c 	bl	80012a8 <ibus_uart_port>
 80039b0:	4602      	mov	r2, r0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d102      	bne.n	80039be <HAL_UART_RxCpltCallback+0x1a>
	{
		ibus_calback();
 80039b8:	f7fd fc80 	bl	80012bc <ibus_calback>
    }
    else if(huart == gps_uart_port()){
        gps_callback();
    }
}
 80039bc:	e007      	b.n	80039ce <HAL_UART_RxCpltCallback+0x2a>
    else if(huart == gps_uart_port()){
 80039be:	f7fe fc11 	bl	80021e4 <gps_uart_port>
 80039c2:	4602      	mov	r2, r0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_UART_RxCpltCallback+0x2a>
        gps_callback();
 80039ca:	f7fe fc15 	bl	80021f8 <gps_callback>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
    if(huart == &huart1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a04      	ldr	r2, [pc, #16]	@ (80039f4 <HAL_UART_TxCpltCallback+0x1c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d101      	bne.n	80039ec <HAL_UART_TxCpltCallback+0x14>
	{
		mavlink_tx_cpl_callback();
 80039e8:	f002 fa34 	bl	8005e54 <mavlink_tx_cpl_callback>
    }
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	200009dc 	.word	0x200009dc

080039f8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4a06      	ldr	r2, [pc, #24]	@ (8003a20 <vApplicationGetIdleTaskMemory+0x28>)
 8003a08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4a05      	ldr	r2, [pc, #20]	@ (8003a24 <vApplicationGetIdleTaskMemory+0x2c>)
 8003a0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2280      	movs	r2, #128	@ 0x80
 8003a14:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	20000550 	.word	0x20000550
 8003a24:	200005a4 	.word	0x200005a4

08003a28 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003a28:	b5b0      	push	{r4, r5, r7, lr}
 8003a2a:	b0a4      	sub	sp, #144	@ 0x90
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	 timer_start(&htim7);
 8003a2e:	4832      	ldr	r0, [pc, #200]	@ (8003af8 <MX_FREERTOS_Init+0xd0>)
 8003a30:	f7ff ff88 	bl	8003944 <timer_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, ahrs_task, osPriorityHigh, 0, 128);
 8003a34:	4b31      	ldr	r3, [pc, #196]	@ (8003afc <MX_FREERTOS_Init+0xd4>)
 8003a36:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8003a3a:	461d      	mov	r5, r3
 8003a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8003a48:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f00c fb99 	bl	8010186 <osThreadCreate>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4a2a      	ldr	r2, [pc, #168]	@ (8003b00 <MX_FREERTOS_Init+0xd8>)
 8003a58:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, blackbox, osPriorityLow, 0, 512);
 8003a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b04 <MX_FREERTOS_Init+0xdc>)
 8003a5c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8003a60:	461d      	mov	r5, r3
 8003a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8003a6e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f00c fb86 	bl	8010186 <osThreadCreate>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	4a22      	ldr	r2, [pc, #136]	@ (8003b08 <MX_FREERTOS_Init+0xe0>)
 8003a7e:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, led_indicate, osPriorityLow, 0, 128);
 8003a80:	4b22      	ldr	r3, [pc, #136]	@ (8003b0c <MX_FREERTOS_Init+0xe4>)
 8003a82:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8003a86:	461d      	mov	r5, r3
 8003a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8003a94:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f00c fb73 	bl	8010186 <osThreadCreate>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b10 <MX_FREERTOS_Init+0xe8>)
 8003aa4:	6013      	str	r3, [r2, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, read_sensor, osPriorityRealtime, 0, 128);
 8003aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b14 <MX_FREERTOS_Init+0xec>)
 8003aa8:	f107 0420 	add.w	r4, r7, #32
 8003aac:	461d      	mov	r5, r3
 8003aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ab2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ab6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 8003aba:	f107 0320 	add.w	r3, r7, #32
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f00c fb60 	bl	8010186 <osThreadCreate>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	4a13      	ldr	r2, [pc, #76]	@ (8003b18 <MX_FREERTOS_Init+0xf0>)
 8003aca:	6013      	str	r3, [r2, #0]

  /* definition and creation of task5 */
  osThreadDef(task5, mavlinkOSD, osPriorityNormal, 0, 128);
 8003acc:	4b13      	ldr	r3, [pc, #76]	@ (8003b1c <MX_FREERTOS_Init+0xf4>)
 8003ace:	1d3c      	adds	r4, r7, #4
 8003ad0:	461d      	mov	r5, r3
 8003ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ad6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ada:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task5Handle = osThreadCreate(osThread(task5), NULL);
 8003ade:	1d3b      	adds	r3, r7, #4
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f00c fb4f 	bl	8010186 <osThreadCreate>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	4a0d      	ldr	r2, [pc, #52]	@ (8003b20 <MX_FREERTOS_Init+0xf8>)
 8003aec:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003aee:	bf00      	nop
 8003af0:	3790      	adds	r7, #144	@ 0x90
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bdb0      	pop	{r4, r5, r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000994 	.word	0x20000994
 8003afc:	08012fe8 	.word	0x08012fe8
 8003b00:	2000053c 	.word	0x2000053c
 8003b04:	0801300c 	.word	0x0801300c
 8003b08:	20000540 	.word	0x20000540
 8003b0c:	08013030 	.word	0x08013030
 8003b10:	20000544 	.word	0x20000544
 8003b14:	08013054 	.word	0x08013054
 8003b18:	20000548 	.word	0x20000548
 8003b1c:	08013078 	.word	0x08013078
 8003b20:	2000054c 	.word	0x2000054c

08003b24 <ahrs_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ahrs_task */
void ahrs_task(void const * argument)
{
 8003b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b28:	b08c      	sub	sp, #48	@ 0x30
 8003b2a:	af06      	add	r7, sp, #24
 8003b2c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ahrs_task */
	ibus_init(&huart2);
 8003b2e:	483f      	ldr	r0, [pc, #252]	@ (8003c2c <ahrs_task+0x108>)
 8003b30:	f7fd fb92 	bl	8001258 <ibus_init>
	gps_init(&huart3,57600);
 8003b34:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8003b38:	483d      	ldr	r0, [pc, #244]	@ (8003c30 <ahrs_task+0x10c>)
 8003b3a:	f7fe fae7 	bl	800210c <gps_init>
	attitude_ctrl_init();
 8003b3e:	f001 fc19 	bl	8005374 <attitude_ctrl_init>
	initPWM(&htim3);
 8003b42:	483c      	ldr	r0, [pc, #240]	@ (8003c34 <ahrs_task+0x110>)
 8003b44:	f7ff fe2e 	bl	80037a4 <initPWM>
	//ms5611_init(&hi2c2);
	last_call = micros();
 8003b48:	4b3b      	ldr	r3, [pc, #236]	@ (8003c38 <ahrs_task+0x114>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b50:	4b3a      	ldr	r3, [pc, #232]	@ (8003c3c <ahrs_task+0x118>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4413      	add	r3, r2
 8003b56:	4a3a      	ldr	r2, [pc, #232]	@ (8003c40 <ahrs_task+0x11c>)
 8003b58:	6013      	str	r3, [r2, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10; // 100 hz loop
 8003b5a:	230a      	movs	r3, #10
 8003b5c:	613b      	str	r3, [r7, #16]
	xLastWakeTime = xTaskGetTickCount();
 8003b5e:	f00d fe23 	bl	80117a8 <xTaskGetTickCount>
 8003b62:	4603      	mov	r3, r0
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug

    float dt = (micros() - last_call)*(1e-6f);
 8003b66:	4b34      	ldr	r3, [pc, #208]	@ (8003c38 <ahrs_task+0x114>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b6e:	4b33      	ldr	r3, [pc, #204]	@ (8003c3c <ahrs_task+0x118>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	441a      	add	r2, r3
 8003b74:	4b32      	ldr	r3, [pc, #200]	@ (8003c40 <ahrs_task+0x11c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd f8f2 	bl	8000d64 <__aeabi_ui2f>
 8003b80:	4603      	mov	r3, r0
 8003b82:	4930      	ldr	r1, [pc, #192]	@ (8003c44 <ahrs_task+0x120>)
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fd f945 	bl	8000e14 <__aeabi_fmul>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	617b      	str	r3, [r7, #20]
    last_call = micros();
 8003b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8003c38 <ahrs_task+0x114>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b96:	4b29      	ldr	r3, [pc, #164]	@ (8003c3c <ahrs_task+0x118>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	4a28      	ldr	r2, [pc, #160]	@ (8003c40 <ahrs_task+0x11c>)
 8003b9e:	6013      	str	r3, [r2, #0]
    if(dt < 0)
 8003ba0:	f04f 0100 	mov.w	r1, #0
 8003ba4:	6978      	ldr	r0, [r7, #20]
 8003ba6:	f7fd fad3 	bl	8001150 <__aeabi_fcmplt>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <ahrs_task+0x92>
		dt = 0;
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
	//timer_calculate_boottime();
    //ms5611_start();
    ibusFrameComplete();
 8003bb6:	f7fd fbdd 	bl	8001374 <ibusFrameComplete>
    update_ahrs(gyro_imu[0],gyro_imu[1],gyro_imu[2],acc_imu[0],acc_imu[1],acc_imu[2],mag_raw[0],mag_raw[1],mag_raw[2],dt);
 8003bba:	4b23      	ldr	r3, [pc, #140]	@ (8003c48 <ahrs_task+0x124>)
 8003bbc:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003bc0:	4b21      	ldr	r3, [pc, #132]	@ (8003c48 <ahrs_task+0x124>)
 8003bc2:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8003bc6:	4b20      	ldr	r3, [pc, #128]	@ (8003c48 <ahrs_task+0x124>)
 8003bc8:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8003bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8003c4c <ahrs_task+0x128>)
 8003bce:	f9b3 8000 	ldrsh.w	r8, [r3]
 8003bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c4c <ahrs_task+0x128>)
 8003bd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c4c <ahrs_task+0x128>)
 8003bda:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8003bde:	491c      	ldr	r1, [pc, #112]	@ (8003c50 <ahrs_task+0x12c>)
 8003be0:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003be4:	481a      	ldr	r0, [pc, #104]	@ (8003c50 <ahrs_task+0x12c>)
 8003be6:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8003bea:	4c19      	ldr	r4, [pc, #100]	@ (8003c50 <ahrs_task+0x12c>)
 8003bec:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 8003bf0:	697d      	ldr	r5, [r7, #20]
 8003bf2:	9505      	str	r5, [sp, #20]
 8003bf4:	9404      	str	r4, [sp, #16]
 8003bf6:	9003      	str	r0, [sp, #12]
 8003bf8:	9102      	str	r1, [sp, #8]
 8003bfa:	9201      	str	r2, [sp, #4]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	4643      	mov	r3, r8
 8003c00:	4672      	mov	r2, lr
 8003c02:	4661      	mov	r1, ip
 8003c04:	4630      	mov	r0, r6
 8003c06:	f7fe fd89 	bl	800271c <update_ahrs>
    //attitude_ctrl(dt);
	rate_stabilize(dt);
 8003c0a:	6978      	ldr	r0, [r7, #20]
 8003c0c:	f001 fc28 	bl	8005460 <rate_stabilize>
    }else{
    	 vTaskResume(task2Handle);
    }
 */
    //vTaskSuspend(NULL);
    vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8003c10:	f107 030c 	add.w	r3, r7, #12
 8003c14:	6939      	ldr	r1, [r7, #16]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f00d fc02 	bl	8011420 <vTaskDelayUntil>
    stack_task_ahrs = uxTaskGetStackHighWaterMark( NULL );
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	f00e f89d 	bl	8011d5c <uxTaskGetStackHighWaterMark>
 8003c22:	4603      	mov	r3, r0
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	4b0b      	ldr	r3, [pc, #44]	@ (8003c54 <ahrs_task+0x130>)
 8003c28:	801a      	strh	r2, [r3, #0]
  {
 8003c2a:	e79c      	b.n	8003b66 <ahrs_task+0x42>
 8003c2c:	20000a24 	.word	0x20000a24
 8003c30:	20000a6c 	.word	0x20000a6c
 8003c34:	2000094c 	.word	0x2000094c
 8003c38:	20000534 	.word	0x20000534
 8003c3c:	20000538 	.word	0x20000538
 8003c40:	200007c8 	.word	0x200007c8
 8003c44:	358637bd 	.word	0x358637bd
 8003c48:	200007b0 	.word	0x200007b0
 8003c4c:	200007b8 	.word	0x200007b8
 8003c50:	200007c0 	.word	0x200007c0
 8003c54:	200007a4 	.word	0x200007a4

08003c58 <blackbox>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blackbox */
void blackbox(void const * argument)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blackbox */

	//vTaskSuspend(NULL);
	black_box_init();
 8003c60:	f7fd fda2 	bl	80017a8 <black_box_init>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;  // 25 ms
 8003c64:	2332      	movs	r3, #50	@ 0x32
 8003c66:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 8003c68:	f00d fd9e 	bl	80117a8 <xTaskGetTickCount>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	uint32_t current_time = micros();
 8003c70:	4b66      	ldr	r3, [pc, #408]	@ (8003e0c <blackbox+0x1b4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c78:	4b65      	ldr	r3, [pc, #404]	@ (8003e10 <blackbox+0x1b8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
    if(black_box_reset){
 8003c80:	4b64      	ldr	r3, [pc, #400]	@ (8003e14 <blackbox+0x1bc>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <blackbox+0x3c>
    	black_box_pack_str("----new data-----\n");
 8003c88:	4863      	ldr	r0, [pc, #396]	@ (8003e18 <blackbox+0x1c0>)
 8003c8a:	f7fd fe4d 	bl	8001928 <black_box_pack_str>
    	black_box_reset = FALSE;
 8003c8e:	4b61      	ldr	r3, [pc, #388]	@ (8003e14 <blackbox+0x1bc>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
    }
	black_box_pack_int((int)AHRS.roll*100);
 8003c94:	4b61      	ldr	r3, [pc, #388]	@ (8003e1c <blackbox+0x1c4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fd fa97 	bl	80011cc <__aeabi_f2iz>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2264      	movs	r2, #100	@ 0x64
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fd fda6 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003cac:	2020      	movs	r0, #32
 8003cae:	f7fd fe73 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)roll_desired*100);
 8003cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8003e20 <blackbox+0x1c8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fd fa88 	bl	80011cc <__aeabi_f2iz>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2264      	movs	r2, #100	@ 0x64
 8003cc0:	fb02 f303 	mul.w	r3, r2, r3
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fd fd97 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003cca:	2020      	movs	r0, #32
 8003ccc:	f7fd fe64 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)AHRS.pitch*100);
 8003cd0:	4b52      	ldr	r3, [pc, #328]	@ (8003e1c <blackbox+0x1c4>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fd fa79 	bl	80011cc <__aeabi_f2iz>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2264      	movs	r2, #100	@ 0x64
 8003cde:	fb02 f303 	mul.w	r3, r2, r3
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fd fd88 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003ce8:	2020      	movs	r0, #32
 8003cea:	f7fd fe55 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)pitch_desired*100);
 8003cee:	4b4d      	ldr	r3, [pc, #308]	@ (8003e24 <blackbox+0x1cc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd fa6a 	bl	80011cc <__aeabi_f2iz>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2264      	movs	r2, #100	@ 0x64
 8003cfc:	fb02 f303 	mul.w	r3, r2, r3
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fd fd79 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003d06:	2020      	movs	r0, #32
 8003d08:	f7fd fe46 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)pitch_desired*100);
 8003d0c:	4b45      	ldr	r3, [pc, #276]	@ (8003e24 <blackbox+0x1cc>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fd fa5b 	bl	80011cc <__aeabi_f2iz>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2264      	movs	r2, #100	@ 0x64
 8003d1a:	fb02 f303 	mul.w	r3, r2, r3
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fd fd6a 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003d24:	2020      	movs	r0, #32
 8003d26:	f7fd fe37 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)pitch_desired*100);
 8003d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e24 <blackbox+0x1cc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd fa4c 	bl	80011cc <__aeabi_f2iz>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2264      	movs	r2, #100	@ 0x64
 8003d38:	fb02 f303 	mul.w	r3, r2, r3
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fd fd5b 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003d42:	2020      	movs	r0, #32
 8003d44:	f7fd fe28 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)pitch_desired*100);
 8003d48:	4b36      	ldr	r3, [pc, #216]	@ (8003e24 <blackbox+0x1cc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fd fa3d 	bl	80011cc <__aeabi_f2iz>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2264      	movs	r2, #100	@ 0x64
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fd fd4c 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003d60:	2020      	movs	r0, #32
 8003d62:	f7fd fe19 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)pitch_desired*100);
 8003d66:	4b2f      	ldr	r3, [pc, #188]	@ (8003e24 <blackbox+0x1cc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd fa2e 	bl	80011cc <__aeabi_f2iz>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2264      	movs	r2, #100	@ 0x64
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fd fd3d 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003d7e:	2020      	movs	r0, #32
 8003d80:	f7fd fe0a 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)pitch_desired*100);
 8003d84:	4b27      	ldr	r3, [pc, #156]	@ (8003e24 <blackbox+0x1cc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fd fa1f 	bl	80011cc <__aeabi_f2iz>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2264      	movs	r2, #100	@ 0x64
 8003d92:	fb02 f303 	mul.w	r3, r2, r3
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd fd2e 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003d9c:	2020      	movs	r0, #32
 8003d9e:	f7fd fdfb 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)(ab_speed_filted*10));
 8003da2:	4b21      	ldr	r3, [pc, #132]	@ (8003e28 <blackbox+0x1d0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4921      	ldr	r1, [pc, #132]	@ (8003e2c <blackbox+0x1d4>)
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fd f833 	bl	8000e14 <__aeabi_fmul>
 8003dae:	4603      	mov	r3, r0
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fd fa0b 	bl	80011cc <__aeabi_f2iz>
 8003db6:	4603      	mov	r3, r0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fd fd1d 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char('\n');
 8003dbe:	200a      	movs	r0, #10
 8003dc0:	f7fd fdea 	bl	8001998 <black_box_pack_char>
	black_box_load();
 8003dc4:	f7fd fe02 	bl	80019cc <black_box_load>

	write_time = micros() - current_time;
 8003dc8:	4b10      	ldr	r3, [pc, #64]	@ (8003e0c <blackbox+0x1b4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e10 <blackbox+0x1b8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	441a      	add	r2, r3
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	4a15      	ldr	r2, [pc, #84]	@ (8003e30 <blackbox+0x1d8>)
 8003ddc:	6013      	str	r3, [r2, #0]
	if(write_time > 10){
 8003dde:	4b14      	ldr	r3, [pc, #80]	@ (8003e30 <blackbox+0x1d8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b0a      	cmp	r3, #10
 8003de4:	d903      	bls.n	8003dee <blackbox+0x196>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003de6:	2120      	movs	r1, #32
 8003de8:	4812      	ldr	r0, [pc, #72]	@ (8003e34 <blackbox+0x1dc>)
 8003dea:	f002 ffbc 	bl	8006d66 <HAL_GPIO_TogglePin>
	}

	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8003dee:	f107 030c 	add.w	r3, r7, #12
 8003df2:	6979      	ldr	r1, [r7, #20]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f00d fb13 	bl	8011420 <vTaskDelayUntil>
    stack_task_blackbox = uxTaskGetStackHighWaterMark( NULL );
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f00d ffae 	bl	8011d5c <uxTaskGetStackHighWaterMark>
 8003e00:	4603      	mov	r3, r0
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	4b0c      	ldr	r3, [pc, #48]	@ (8003e38 <blackbox+0x1e0>)
 8003e06:	801a      	strh	r2, [r3, #0]
  {
 8003e08:	e732      	b.n	8003c70 <blackbox+0x18>
 8003e0a:	bf00      	nop
 8003e0c:	20000534 	.word	0x20000534
 8003e10:	20000538 	.word	0x20000538
 8003e14:	200007cc 	.word	0x200007cc
 8003e18:	08013094 	.word	0x08013094
 8003e1c:	200004c8 	.word	0x200004c8
 8003e20:	20000af8 	.word	0x20000af8
 8003e24:	20000afc 	.word	0x20000afc
 8003e28:	20000bdc 	.word	0x20000bdc
 8003e2c:	41200000 	.word	0x41200000
 8003e30:	200007d0 	.word	0x200007d0
 8003e34:	40010800 	.word	0x40010800
 8003e38:	200007ac 	.word	0x200007ac

08003e3c <led_indicate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_indicate */
void led_indicate(void const * argument)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	}
	*/
	if(_gps.fix > 1){
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	}
	stack_task_led = uxTaskGetStackHighWaterMark( NULL );
 8003e44:	2000      	movs	r0, #0
 8003e46:	f00d ff89 	bl	8011d5c <uxTaskGetStackHighWaterMark>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	4b05      	ldr	r3, [pc, #20]	@ (8003e64 <led_indicate+0x28>)
 8003e50:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003e52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e56:	4804      	ldr	r0, [pc, #16]	@ (8003e68 <led_indicate+0x2c>)
 8003e58:	f002 ff85 	bl	8006d66 <HAL_GPIO_TogglePin>
    osDelay(100);
 8003e5c:	2064      	movs	r0, #100	@ 0x64
 8003e5e:	f00c f9de 	bl	801021e <osDelay>
	if(_gps.fix > 1){
 8003e62:	e7ef      	b.n	8003e44 <led_indicate+0x8>
 8003e64:	200007a6 	.word	0x200007a6
 8003e68:	40011000 	.word	0x40011000
 8003e6c:	00000000 	.word	0x00000000

08003e70 <read_sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_sensor */
void read_sensor(void const * argument)
{
 8003e70:	b5b0      	push	{r4, r5, r7, lr}
 8003e72:	b08e      	sub	sp, #56	@ 0x38
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_sensor */
  /* Infinite loop */
	int16_t gyso_offset[3] = {0,0,0};
 8003e78:	2300      	movs	r3, #0
 8003e7a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003e80:	2300      	movs	r3, #0
 8003e82:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	axis3_t raw;
	uint8_t sample_count = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t gyro_add[3] = {0,0,0};
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
	uint8_t first_loop = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	compassInit();
 8003e9c:	f7fd fe30 	bl	8001b00 <compassInit>
	mpu6050_init(&hi2c2);
 8003ea0:	488f      	ldr	r0, [pc, #572]	@ (80040e0 <read_sensor+0x270>)
 8003ea2:	f7fd fb4d 	bl	8001540 <mpu6050_init>
	HAL_Delay(2000);
 8003ea6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003eaa:	f002 f811 	bl	8005ed0 <HAL_Delay>
	imu_calibrate(&gyso_offset[0],&gyso_offset[1],&gyso_offset[2]);
 8003eae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003eb2:	1d1a      	adds	r2, r3, #4
 8003eb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003eb8:	1c99      	adds	r1, r3, #2
 8003eba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe fbc4 	bl	800264c <imu_calibrate>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2;
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	633b      	str	r3, [r7, #48]	@ 0x30
	xLastWakeTime = xTaskGetTickCount();
 8003ec8:	f00d fc6e 	bl	80117a8 <xTaskGetTickCount>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	613b      	str	r3, [r7, #16]

	for(;;)
	{
		mpu6050_gyro_get_raw(&raw);
 8003ed0:	f107 0320 	add.w	r3, r7, #32
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd fb85 	bl	80015e4 <mpu6050_gyro_get_raw>
		gyro_add[0] += (raw.x - gyso_offset[0]);
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8003ee6:	1acb      	subs	r3, r1, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
		gyro_add[1] += (raw.y - gyso_offset[1]);
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8003ef8:	1acb      	subs	r3, r1, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
		gyro_add[2] += (raw.z - gyso_offset[2]);
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003f04:	4619      	mov	r1, r3
 8003f06:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003f0a:	1acb      	subs	r3, r1, r3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	61fb      	str	r3, [r7, #28]
		sample_count ++;
 8003f10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003f14:	3301      	adds	r3, #1
 8003f16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if(sample_count >= 5){
 8003f1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d937      	bls.n	8003f92 <read_sensor+0x122>
		   axis3_t mag;
		   compass_get(&mag);
 8003f22:	f107 0308 	add.w	r3, r7, #8
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fd fe26 	bl	8001b78 <compass_get>
		   mag_raw[0] = mag.x;
 8003f2c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003f30:	4b6c      	ldr	r3, [pc, #432]	@ (80040e4 <read_sensor+0x274>)
 8003f32:	801a      	strh	r2, [r3, #0]
		   mag_raw[1] = mag.y;
 8003f34:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003f38:	4b6a      	ldr	r3, [pc, #424]	@ (80040e4 <read_sensor+0x274>)
 8003f3a:	805a      	strh	r2, [r3, #2]
		   mag_raw[2] = mag.z;
 8003f3c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003f40:	4b68      	ldr	r3, [pc, #416]	@ (80040e4 <read_sensor+0x274>)
 8003f42:	809a      	strh	r2, [r3, #4]

		   gyro_imu[0] = (int16_t)(gyro_add[0]/5);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	4a68      	ldr	r2, [pc, #416]	@ (80040e8 <read_sensor+0x278>)
 8003f48:	fb82 1203 	smull	r1, r2, r2, r3
 8003f4c:	1052      	asrs	r2, r2, #1
 8003f4e:	17db      	asrs	r3, r3, #31
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	b21a      	sxth	r2, r3
 8003f54:	4b65      	ldr	r3, [pc, #404]	@ (80040ec <read_sensor+0x27c>)
 8003f56:	801a      	strh	r2, [r3, #0]
		   gyro_imu[1] = (int16_t)(gyro_add[1]/5);
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	4a63      	ldr	r2, [pc, #396]	@ (80040e8 <read_sensor+0x278>)
 8003f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8003f60:	1052      	asrs	r2, r2, #1
 8003f62:	17db      	asrs	r3, r3, #31
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	b21a      	sxth	r2, r3
 8003f68:	4b60      	ldr	r3, [pc, #384]	@ (80040ec <read_sensor+0x27c>)
 8003f6a:	805a      	strh	r2, [r3, #2]
		   gyro_imu[2] = (int16_t)(gyro_add[2]/5);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	4a5e      	ldr	r2, [pc, #376]	@ (80040e8 <read_sensor+0x278>)
 8003f70:	fb82 1203 	smull	r1, r2, r2, r3
 8003f74:	1052      	asrs	r2, r2, #1
 8003f76:	17db      	asrs	r3, r3, #31
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	b21a      	sxth	r2, r3
 8003f7c:	4b5b      	ldr	r3, [pc, #364]	@ (80040ec <read_sensor+0x27c>)
 8003f7e:	809a      	strh	r2, [r3, #4]
		   gyro_add[0] = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
		   gyro_add[1] = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]
		   gyro_add[2] = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61fb      	str	r3, [r7, #28]
		   sample_count = 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		   //vTaskResume(task1Handle);
		}

		raw.x = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	843b      	strh	r3, [r7, #32]
		raw.y = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	847b      	strh	r3, [r7, #34]	@ 0x22
		raw.z = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	84bb      	strh	r3, [r7, #36]	@ 0x24

		mpu6050_acc_get_raw(&raw);
 8003f9e:	f107 0320 	add.w	r3, r7, #32
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fd fb5a 	bl	800165c <mpu6050_acc_get_raw>
		if(first_loop){
 8003fa8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00e      	beq.n	8003fce <read_sensor+0x15e>
			acc_imu[0] = raw.x;
 8003fb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003fb4:	4b4e      	ldr	r3, [pc, #312]	@ (80040f0 <read_sensor+0x280>)
 8003fb6:	801a      	strh	r2, [r3, #0]
			acc_imu[1] = raw.y;
 8003fb8:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8003fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80040f0 <read_sensor+0x280>)
 8003fbe:	805a      	strh	r2, [r3, #2]
			acc_imu[2] = raw.z;
 8003fc0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8003fc4:	4b4a      	ldr	r3, [pc, #296]	@ (80040f0 <read_sensor+0x280>)
 8003fc6:	809a      	strh	r2, [r3, #4]
			first_loop = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		}
		// low pass filter
		acc_imu[0] += 0.1*(raw.x - acc_imu[0]);
 8003fce:	4b48      	ldr	r3, [pc, #288]	@ (80040f0 <read_sensor+0x280>)
 8003fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fc fa7d 	bl	80004d4 <__aeabi_i2d>
 8003fda:	4604      	mov	r4, r0
 8003fdc:	460d      	mov	r5, r1
 8003fde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b42      	ldr	r3, [pc, #264]	@ (80040f0 <read_sensor+0x280>)
 8003fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fc fa71 	bl	80004d4 <__aeabi_i2d>
 8003ff2:	a339      	add	r3, pc, #228	@ (adr r3, 80040d8 <read_sensor+0x268>)
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f7fc fad6 	bl	80005a8 <__aeabi_dmul>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4620      	mov	r0, r4
 8004002:	4629      	mov	r1, r5
 8004004:	f7fc f91a 	bl	800023c <__adddf3>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4610      	mov	r0, r2
 800400e:	4619      	mov	r1, r3
 8004010:	f7fc fd7a 	bl	8000b08 <__aeabi_d2iz>
 8004014:	4603      	mov	r3, r0
 8004016:	b21a      	sxth	r2, r3
 8004018:	4b35      	ldr	r3, [pc, #212]	@ (80040f0 <read_sensor+0x280>)
 800401a:	801a      	strh	r2, [r3, #0]
		acc_imu[1] += 0.1*(raw.y - acc_imu[1]);
 800401c:	4b34      	ldr	r3, [pc, #208]	@ (80040f0 <read_sensor+0x280>)
 800401e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fc fa56 	bl	80004d4 <__aeabi_i2d>
 8004028:	4604      	mov	r4, r0
 800402a:	460d      	mov	r5, r1
 800402c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004030:	461a      	mov	r2, r3
 8004032:	4b2f      	ldr	r3, [pc, #188]	@ (80040f0 <read_sensor+0x280>)
 8004034:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	4618      	mov	r0, r3
 800403c:	f7fc fa4a 	bl	80004d4 <__aeabi_i2d>
 8004040:	a325      	add	r3, pc, #148	@ (adr r3, 80040d8 <read_sensor+0x268>)
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f7fc faaf 	bl	80005a8 <__aeabi_dmul>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4620      	mov	r0, r4
 8004050:	4629      	mov	r1, r5
 8004052:	f7fc f8f3 	bl	800023c <__adddf3>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	f7fc fd53 	bl	8000b08 <__aeabi_d2iz>
 8004062:	4603      	mov	r3, r0
 8004064:	b21a      	sxth	r2, r3
 8004066:	4b22      	ldr	r3, [pc, #136]	@ (80040f0 <read_sensor+0x280>)
 8004068:	805a      	strh	r2, [r3, #2]
		acc_imu[2] += 0.1*(raw.z - acc_imu[2]);
 800406a:	4b21      	ldr	r3, [pc, #132]	@ (80040f0 <read_sensor+0x280>)
 800406c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004070:	4618      	mov	r0, r3
 8004072:	f7fc fa2f 	bl	80004d4 <__aeabi_i2d>
 8004076:	4604      	mov	r4, r0
 8004078:	460d      	mov	r5, r1
 800407a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800407e:	461a      	mov	r2, r3
 8004080:	4b1b      	ldr	r3, [pc, #108]	@ (80040f0 <read_sensor+0x280>)
 8004082:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	4618      	mov	r0, r3
 800408a:	f7fc fa23 	bl	80004d4 <__aeabi_i2d>
 800408e:	a312      	add	r3, pc, #72	@ (adr r3, 80040d8 <read_sensor+0x268>)
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f7fc fa88 	bl	80005a8 <__aeabi_dmul>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4620      	mov	r0, r4
 800409e:	4629      	mov	r1, r5
 80040a0:	f7fc f8cc 	bl	800023c <__adddf3>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4610      	mov	r0, r2
 80040aa:	4619      	mov	r1, r3
 80040ac:	f7fc fd2c 	bl	8000b08 <__aeabi_d2iz>
 80040b0:	4603      	mov	r3, r0
 80040b2:	b21a      	sxth	r2, r3
 80040b4:	4b0e      	ldr	r3, [pc, #56]	@ (80040f0 <read_sensor+0x280>)
 80040b6:	809a      	strh	r2, [r3, #4]
	    stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 80040b8:	2000      	movs	r0, #0
 80040ba:	f00d fe4f 	bl	8011d5c <uxTaskGetStackHighWaterMark>
 80040be:	4603      	mov	r3, r0
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	4b0c      	ldr	r3, [pc, #48]	@ (80040f4 <read_sensor+0x284>)
 80040c4:	801a      	strh	r2, [r3, #0]
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80040c6:	f107 0310 	add.w	r3, r7, #16
 80040ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040cc:	4618      	mov	r0, r3
 80040ce:	f00d f9a7 	bl	8011420 <vTaskDelayUntil>
		mpu6050_gyro_get_raw(&raw);
 80040d2:	e6fd      	b.n	8003ed0 <read_sensor+0x60>
 80040d4:	f3af 8000 	nop.w
 80040d8:	9999999a 	.word	0x9999999a
 80040dc:	3fb99999 	.word	0x3fb99999
 80040e0:	20000828 	.word	0x20000828
 80040e4:	200007c0 	.word	0x200007c0
 80040e8:	66666667 	.word	0x66666667
 80040ec:	200007b0 	.word	0x200007b0
 80040f0:	200007b8 	.word	0x200007b8
 80040f4:	200007a8 	.word	0x200007a8

080040f8 <mavlinkOSD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mavlinkOSD */
void mavlinkOSD(void const * argument)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mavlinkOSD */
	mavlinkInit(1,1,&huart1,57600);
 8004100:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8004104:	4a0f      	ldr	r2, [pc, #60]	@ (8004144 <mavlinkOSD+0x4c>)
 8004106:	2101      	movs	r1, #1
 8004108:	2001      	movs	r0, #1
 800410a:	f001 fd51 	bl	8005bb0 <mavlinkInit>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;  // 25 ms
 800410e:	2332      	movs	r3, #50	@ 0x32
 8004110:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8004112:	f00d fb49 	bl	80117a8 <xTaskGetTickCount>
 8004116:	4603      	mov	r3, r0
 8004118:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800411a:	2110      	movs	r1, #16
 800411c:	480a      	ldr	r0, [pc, #40]	@ (8004148 <mavlinkOSD+0x50>)
 800411e:	f002 fe22 	bl	8006d66 <HAL_GPIO_TogglePin>
	mavlink_osd();
 8004122:	f001 fd7b 	bl	8005c1c <mavlink_osd>
	//mavlink_send_heartbeat();
	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8004126:	f107 0308 	add.w	r3, r7, #8
 800412a:	68f9      	ldr	r1, [r7, #12]
 800412c:	4618      	mov	r0, r3
 800412e:	f00d f977 	bl	8011420 <vTaskDelayUntil>
    stack_task_mavOSD = uxTaskGetStackHighWaterMark( NULL );
 8004132:	2000      	movs	r0, #0
 8004134:	f00d fe12 	bl	8011d5c <uxTaskGetStackHighWaterMark>
 8004138:	4603      	mov	r3, r0
 800413a:	b29a      	uxth	r2, r3
 800413c:	4b03      	ldr	r3, [pc, #12]	@ (800414c <mavlinkOSD+0x54>)
 800413e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8004140:	bf00      	nop
 8004142:	e7ea      	b.n	800411a <mavlinkOSD+0x22>
 8004144:	200009dc 	.word	0x200009dc
 8004148:	40010800 	.word	0x40010800
 800414c:	200007aa 	.word	0x200007aa

08004150 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004156:	f107 0310 	add.w	r3, r7, #16
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	605a      	str	r2, [r3, #4]
 8004160:	609a      	str	r2, [r3, #8]
 8004162:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004164:	4b46      	ldr	r3, [pc, #280]	@ (8004280 <MX_GPIO_Init+0x130>)
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	4a45      	ldr	r2, [pc, #276]	@ (8004280 <MX_GPIO_Init+0x130>)
 800416a:	f043 0310 	orr.w	r3, r3, #16
 800416e:	6193      	str	r3, [r2, #24]
 8004170:	4b43      	ldr	r3, [pc, #268]	@ (8004280 <MX_GPIO_Init+0x130>)
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800417c:	4b40      	ldr	r3, [pc, #256]	@ (8004280 <MX_GPIO_Init+0x130>)
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	4a3f      	ldr	r2, [pc, #252]	@ (8004280 <MX_GPIO_Init+0x130>)
 8004182:	f043 0304 	orr.w	r3, r3, #4
 8004186:	6193      	str	r3, [r2, #24]
 8004188:	4b3d      	ldr	r3, [pc, #244]	@ (8004280 <MX_GPIO_Init+0x130>)
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004194:	4b3a      	ldr	r3, [pc, #232]	@ (8004280 <MX_GPIO_Init+0x130>)
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	4a39      	ldr	r2, [pc, #228]	@ (8004280 <MX_GPIO_Init+0x130>)
 800419a:	f043 0308 	orr.w	r3, r3, #8
 800419e:	6193      	str	r3, [r2, #24]
 80041a0:	4b37      	ldr	r3, [pc, #220]	@ (8004280 <MX_GPIO_Init+0x130>)
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80041ac:	4b34      	ldr	r3, [pc, #208]	@ (8004280 <MX_GPIO_Init+0x130>)
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	4a33      	ldr	r2, [pc, #204]	@ (8004280 <MX_GPIO_Init+0x130>)
 80041b2:	f043 0320 	orr.w	r3, r3, #32
 80041b6:	6193      	str	r3, [r2, #24]
 80041b8:	4b31      	ldr	r3, [pc, #196]	@ (8004280 <MX_GPIO_Init+0x130>)
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80041c4:	2200      	movs	r2, #0
 80041c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80041ca:	482e      	ldr	r0, [pc, #184]	@ (8004284 <MX_GPIO_Init+0x134>)
 80041cc:	f002 fdb3 	bl	8006d36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80041d0:	2200      	movs	r2, #0
 80041d2:	2130      	movs	r1, #48	@ 0x30
 80041d4:	482c      	ldr	r0, [pc, #176]	@ (8004288 <MX_GPIO_Init+0x138>)
 80041d6:	f002 fdae 	bl	8006d36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80041da:	2200      	movs	r2, #0
 80041dc:	21c0      	movs	r1, #192	@ 0xc0
 80041de:	482b      	ldr	r0, [pc, #172]	@ (800428c <MX_GPIO_Init+0x13c>)
 80041e0:	f002 fda9 	bl	8006d36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80041e4:	2200      	movs	r2, #0
 80041e6:	2118      	movs	r1, #24
 80041e8:	4829      	ldr	r0, [pc, #164]	@ (8004290 <MX_GPIO_Init+0x140>)
 80041ea:	f002 fda4 	bl	8006d36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80041ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041f4:	2301      	movs	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041fc:	2302      	movs	r3, #2
 80041fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004200:	f107 0310 	add.w	r3, r7, #16
 8004204:	4619      	mov	r1, r3
 8004206:	481f      	ldr	r0, [pc, #124]	@ (8004284 <MX_GPIO_Init+0x134>)
 8004208:	f002 fbea 	bl	80069e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800420c:	2330      	movs	r3, #48	@ 0x30
 800420e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004210:	2301      	movs	r3, #1
 8004212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004214:	2300      	movs	r3, #0
 8004216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004218:	2302      	movs	r3, #2
 800421a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800421c:	f107 0310 	add.w	r3, r7, #16
 8004220:	4619      	mov	r1, r3
 8004222:	4819      	ldr	r0, [pc, #100]	@ (8004288 <MX_GPIO_Init+0x138>)
 8004224:	f002 fbdc 	bl	80069e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004228:	23c0      	movs	r3, #192	@ 0xc0
 800422a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800422c:	2301      	movs	r3, #1
 800422e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004230:	2300      	movs	r3, #0
 8004232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004234:	2302      	movs	r3, #2
 8004236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004238:	f107 0310 	add.w	r3, r7, #16
 800423c:	4619      	mov	r1, r3
 800423e:	4813      	ldr	r0, [pc, #76]	@ (800428c <MX_GPIO_Init+0x13c>)
 8004240:	f002 fbce 	bl	80069e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004244:	2318      	movs	r3, #24
 8004246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004248:	2301      	movs	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424c:	2300      	movs	r3, #0
 800424e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004250:	2302      	movs	r3, #2
 8004252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004254:	f107 0310 	add.w	r3, r7, #16
 8004258:	4619      	mov	r1, r3
 800425a:	480d      	ldr	r0, [pc, #52]	@ (8004290 <MX_GPIO_Init+0x140>)
 800425c:	f002 fbc0 	bl	80069e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004260:	2320      	movs	r3, #32
 8004262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004268:	2302      	movs	r3, #2
 800426a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800426c:	f107 0310 	add.w	r3, r7, #16
 8004270:	4619      	mov	r1, r3
 8004272:	4807      	ldr	r0, [pc, #28]	@ (8004290 <MX_GPIO_Init+0x140>)
 8004274:	f002 fbb4 	bl	80069e0 <HAL_GPIO_Init>

}
 8004278:	bf00      	nop
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40021000 	.word	0x40021000
 8004284:	40011000 	.word	0x40011000
 8004288:	40010800 	.word	0x40010800
 800428c:	40011400 	.word	0x40011400
 8004290:	40010c00 	.word	0x40010c00

08004294 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004298:	4b12      	ldr	r3, [pc, #72]	@ (80042e4 <MX_I2C1_Init+0x50>)
 800429a:	4a13      	ldr	r2, [pc, #76]	@ (80042e8 <MX_I2C1_Init+0x54>)
 800429c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800429e:	4b11      	ldr	r3, [pc, #68]	@ (80042e4 <MX_I2C1_Init+0x50>)
 80042a0:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <MX_I2C1_Init+0x58>)
 80042a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80042a4:	4b0f      	ldr	r3, [pc, #60]	@ (80042e4 <MX_I2C1_Init+0x50>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80042aa:	4b0e      	ldr	r3, [pc, #56]	@ (80042e4 <MX_I2C1_Init+0x50>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042b0:	4b0c      	ldr	r3, [pc, #48]	@ (80042e4 <MX_I2C1_Init+0x50>)
 80042b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80042b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042b8:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <MX_I2C1_Init+0x50>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80042be:	4b09      	ldr	r3, [pc, #36]	@ (80042e4 <MX_I2C1_Init+0x50>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042c4:	4b07      	ldr	r3, [pc, #28]	@ (80042e4 <MX_I2C1_Init+0x50>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042ca:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <MX_I2C1_Init+0x50>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80042d0:	4804      	ldr	r0, [pc, #16]	@ (80042e4 <MX_I2C1_Init+0x50>)
 80042d2:	f002 fd61 	bl	8006d98 <HAL_I2C_Init>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80042dc:	f000 f92a 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80042e0:	bf00      	nop
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	200007d4 	.word	0x200007d4
 80042e8:	40005400 	.word	0x40005400
 80042ec:	00061a80 	.word	0x00061a80

080042f0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80042f4:	4b12      	ldr	r3, [pc, #72]	@ (8004340 <MX_I2C2_Init+0x50>)
 80042f6:	4a13      	ldr	r2, [pc, #76]	@ (8004344 <MX_I2C2_Init+0x54>)
 80042f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80042fa:	4b11      	ldr	r3, [pc, #68]	@ (8004340 <MX_I2C2_Init+0x50>)
 80042fc:	4a12      	ldr	r2, [pc, #72]	@ (8004348 <MX_I2C2_Init+0x58>)
 80042fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004300:	4b0f      	ldr	r3, [pc, #60]	@ (8004340 <MX_I2C2_Init+0x50>)
 8004302:	2200      	movs	r2, #0
 8004304:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004306:	4b0e      	ldr	r3, [pc, #56]	@ (8004340 <MX_I2C2_Init+0x50>)
 8004308:	2200      	movs	r2, #0
 800430a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800430c:	4b0c      	ldr	r3, [pc, #48]	@ (8004340 <MX_I2C2_Init+0x50>)
 800430e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004312:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004314:	4b0a      	ldr	r3, [pc, #40]	@ (8004340 <MX_I2C2_Init+0x50>)
 8004316:	2200      	movs	r2, #0
 8004318:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800431a:	4b09      	ldr	r3, [pc, #36]	@ (8004340 <MX_I2C2_Init+0x50>)
 800431c:	2200      	movs	r2, #0
 800431e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004320:	4b07      	ldr	r3, [pc, #28]	@ (8004340 <MX_I2C2_Init+0x50>)
 8004322:	2200      	movs	r2, #0
 8004324:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004326:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <MX_I2C2_Init+0x50>)
 8004328:	2200      	movs	r2, #0
 800432a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800432c:	4804      	ldr	r0, [pc, #16]	@ (8004340 <MX_I2C2_Init+0x50>)
 800432e:	f002 fd33 	bl	8006d98 <HAL_I2C_Init>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004338:	f000 f8fc 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800433c:	bf00      	nop
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000828 	.word	0x20000828
 8004344:	40005800 	.word	0x40005800
 8004348:	00061a80 	.word	0x00061a80

0800434c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08a      	sub	sp, #40	@ 0x28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004354:	f107 0318 	add.w	r3, r7, #24
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	605a      	str	r2, [r3, #4]
 800435e:	609a      	str	r2, [r3, #8]
 8004360:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a2b      	ldr	r2, [pc, #172]	@ (8004414 <HAL_I2C_MspInit+0xc8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d124      	bne.n	80043b6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800436c:	4b2a      	ldr	r3, [pc, #168]	@ (8004418 <HAL_I2C_MspInit+0xcc>)
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	4a29      	ldr	r2, [pc, #164]	@ (8004418 <HAL_I2C_MspInit+0xcc>)
 8004372:	f043 0308 	orr.w	r3, r3, #8
 8004376:	6193      	str	r3, [r2, #24]
 8004378:	4b27      	ldr	r3, [pc, #156]	@ (8004418 <HAL_I2C_MspInit+0xcc>)
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004384:	23c0      	movs	r3, #192	@ 0xc0
 8004386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004388:	2312      	movs	r3, #18
 800438a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800438c:	2303      	movs	r3, #3
 800438e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004390:	f107 0318 	add.w	r3, r7, #24
 8004394:	4619      	mov	r1, r3
 8004396:	4821      	ldr	r0, [pc, #132]	@ (800441c <HAL_I2C_MspInit+0xd0>)
 8004398:	f002 fb22 	bl	80069e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800439c:	4b1e      	ldr	r3, [pc, #120]	@ (8004418 <HAL_I2C_MspInit+0xcc>)
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004418 <HAL_I2C_MspInit+0xcc>)
 80043a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80043a6:	61d3      	str	r3, [r2, #28]
 80043a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004418 <HAL_I2C_MspInit+0xcc>)
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80043b4:	e029      	b.n	800440a <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a19      	ldr	r2, [pc, #100]	@ (8004420 <HAL_I2C_MspInit+0xd4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d124      	bne.n	800440a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043c0:	4b15      	ldr	r3, [pc, #84]	@ (8004418 <HAL_I2C_MspInit+0xcc>)
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	4a14      	ldr	r2, [pc, #80]	@ (8004418 <HAL_I2C_MspInit+0xcc>)
 80043c6:	f043 0308 	orr.w	r3, r3, #8
 80043ca:	6193      	str	r3, [r2, #24]
 80043cc:	4b12      	ldr	r3, [pc, #72]	@ (8004418 <HAL_I2C_MspInit+0xcc>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80043d8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80043dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043de:	2312      	movs	r3, #18
 80043e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043e2:	2303      	movs	r3, #3
 80043e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043e6:	f107 0318 	add.w	r3, r7, #24
 80043ea:	4619      	mov	r1, r3
 80043ec:	480b      	ldr	r0, [pc, #44]	@ (800441c <HAL_I2C_MspInit+0xd0>)
 80043ee:	f002 faf7 	bl	80069e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80043f2:	4b09      	ldr	r3, [pc, #36]	@ (8004418 <HAL_I2C_MspInit+0xcc>)
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	4a08      	ldr	r2, [pc, #32]	@ (8004418 <HAL_I2C_MspInit+0xcc>)
 80043f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043fc:	61d3      	str	r3, [r2, #28]
 80043fe:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <HAL_I2C_MspInit+0xcc>)
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	68bb      	ldr	r3, [r7, #8]
}
 800440a:	bf00      	nop
 800440c:	3728      	adds	r7, #40	@ 0x28
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40005400 	.word	0x40005400
 8004418:	40021000 	.word	0x40021000
 800441c:	40010c00 	.word	0x40010c00
 8004420:	40005800 	.word	0x40005800

08004424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004428:	f001 fd20 	bl	8005e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800442c:	f000 f81c 	bl	8004468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004430:	f7ff fe8e 	bl	8004150 <MX_GPIO_Init>
  MX_DMA_Init();
 8004434:	f7ff fa98 	bl	8003968 <MX_DMA_Init>
  MX_I2C1_Init();
 8004438:	f7ff ff2c 	bl	8004294 <MX_I2C1_Init>
  MX_I2C2_Init();
 800443c:	f7ff ff58 	bl	80042f0 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8004440:	f000 f87e 	bl	8004540 <MX_SDIO_SD_Init>
  MX_TIM7_Init();
 8004444:	f000 fad4 	bl	80049f0 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8004448:	f000 fb96 	bl	8004b78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800444c:	f000 fbbe 	bl	8004bcc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004450:	f000 fbe6 	bl	8004c20 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8004454:	f000 fa40 	bl	80048d8 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004458:	f008 fb56 	bl	800cb08 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800445c:	f7ff fae4 	bl	8003a28 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004460:	f00b fe8a 	bl	8010178 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <main+0x40>

08004468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b090      	sub	sp, #64	@ 0x40
 800446c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800446e:	f107 0318 	add.w	r3, r7, #24
 8004472:	2228      	movs	r2, #40	@ 0x28
 8004474:	2100      	movs	r1, #0
 8004476:	4618      	mov	r0, r3
 8004478:	f00e fbc2 	bl	8012c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800447c:	1d3b      	adds	r3, r7, #4
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	605a      	str	r2, [r3, #4]
 8004484:	609a      	str	r2, [r3, #8]
 8004486:	60da      	str	r2, [r3, #12]
 8004488:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800448a:	2301      	movs	r3, #1
 800448c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800448e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004492:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004494:	2300      	movs	r3, #0
 8004496:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004498:	2301      	movs	r3, #1
 800449a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800449c:	2302      	movs	r3, #2
 800449e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80044a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80044a6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80044aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044ac:	f107 0318 	add.w	r3, r7, #24
 80044b0:	4618      	mov	r0, r3
 80044b2:	f004 fab3 	bl	8008a1c <HAL_RCC_OscConfig>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80044bc:	f000 f83a 	bl	8004534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044c0:	230f      	movs	r3, #15
 80044c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044c4:	2302      	movs	r3, #2
 80044c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80044cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80044d6:	1d3b      	adds	r3, r7, #4
 80044d8:	2102      	movs	r1, #2
 80044da:	4618      	mov	r0, r3
 80044dc:	f004 fd20 	bl	8008f20 <HAL_RCC_ClockConfig>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80044e6:	f000 f825 	bl	8004534 <Error_Handler>
  }
}
 80044ea:	bf00      	nop
 80044ec:	3740      	adds	r7, #64	@ 0x40
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004504:	d102      	bne.n	800450c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8004506:	f001 fcc7 	bl	8005e98 <HAL_IncTick>
  else if(htim->Instance == TIM7){
	  TIMER_CALLBACK();
  }

  /* USER CODE END Callback 1 */
}
 800450a:	e00b      	b.n	8004524 <HAL_TIM_PeriodElapsedCallback+0x30>
  else if(htim->Instance == TIM7){
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a06      	ldr	r2, [pc, #24]	@ (800452c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d106      	bne.n	8004524 <HAL_TIM_PeriodElapsedCallback+0x30>
	  TIMER_CALLBACK();
 8004516:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800451e:	33ff      	adds	r3, #255	@ 0xff
 8004520:	4a03      	ldr	r2, [pc, #12]	@ (8004530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004522:	6013      	str	r3, [r2, #0]
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40001400 	.word	0x40001400
 8004530:	20000538 	.word	0x20000538

08004534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004538:	b672      	cpsid	i
}
 800453a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800453c:	bf00      	nop
 800453e:	e7fd      	b.n	800453c <Error_Handler+0x8>

08004540 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004544:	4b0d      	ldr	r3, [pc, #52]	@ (800457c <MX_SDIO_SD_Init+0x3c>)
 8004546:	4a0e      	ldr	r2, [pc, #56]	@ (8004580 <MX_SDIO_SD_Init+0x40>)
 8004548:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800454a:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <MX_SDIO_SD_Init+0x3c>)
 800454c:	2200      	movs	r2, #0
 800454e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004550:	4b0a      	ldr	r3, [pc, #40]	@ (800457c <MX_SDIO_SD_Init+0x3c>)
 8004552:	2200      	movs	r2, #0
 8004554:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004556:	4b09      	ldr	r3, [pc, #36]	@ (800457c <MX_SDIO_SD_Init+0x3c>)
 8004558:	2200      	movs	r2, #0
 800455a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800455c:	4b07      	ldr	r3, [pc, #28]	@ (800457c <MX_SDIO_SD_Init+0x3c>)
 800455e:	2200      	movs	r2, #0
 8004560:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004562:	4b06      	ldr	r3, [pc, #24]	@ (800457c <MX_SDIO_SD_Init+0x3c>)
 8004564:	2200      	movs	r2, #0
 8004566:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 255;
 8004568:	4b04      	ldr	r3, [pc, #16]	@ (800457c <MX_SDIO_SD_Init+0x3c>)
 800456a:	22ff      	movs	r2, #255	@ 0xff
 800456c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.ClockDiv = 100;
 800456e:	4b03      	ldr	r3, [pc, #12]	@ (800457c <MX_SDIO_SD_Init+0x3c>)
 8004570:	2264      	movs	r2, #100	@ 0x64
 8004572:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 2 */

}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr
 800457c:	2000087c 	.word	0x2000087c
 8004580:	40018000 	.word	0x40018000

08004584 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	@ 0x28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800458c:	f107 0318 	add.w	r3, r7, #24
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	60da      	str	r2, [r3, #12]
  if(sdHandle->Instance==SDIO)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a22      	ldr	r2, [pc, #136]	@ (8004628 <HAL_SD_MspInit+0xa4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d13c      	bne.n	800461e <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80045a4:	4b21      	ldr	r3, [pc, #132]	@ (800462c <HAL_SD_MspInit+0xa8>)
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	4a20      	ldr	r2, [pc, #128]	@ (800462c <HAL_SD_MspInit+0xa8>)
 80045aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045ae:	6153      	str	r3, [r2, #20]
 80045b0:	4b1e      	ldr	r3, [pc, #120]	@ (800462c <HAL_SD_MspInit+0xa8>)
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045bc:	4b1b      	ldr	r3, [pc, #108]	@ (800462c <HAL_SD_MspInit+0xa8>)
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	4a1a      	ldr	r2, [pc, #104]	@ (800462c <HAL_SD_MspInit+0xa8>)
 80045c2:	f043 0310 	orr.w	r3, r3, #16
 80045c6:	6193      	str	r3, [r2, #24]
 80045c8:	4b18      	ldr	r3, [pc, #96]	@ (800462c <HAL_SD_MspInit+0xa8>)
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045d4:	4b15      	ldr	r3, [pc, #84]	@ (800462c <HAL_SD_MspInit+0xa8>)
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	4a14      	ldr	r2, [pc, #80]	@ (800462c <HAL_SD_MspInit+0xa8>)
 80045da:	f043 0320 	orr.w	r3, r3, #32
 80045de:	6193      	str	r3, [r2, #24]
 80045e0:	4b12      	ldr	r3, [pc, #72]	@ (800462c <HAL_SD_MspInit+0xa8>)
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80045ec:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80045f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f2:	2302      	movs	r3, #2
 80045f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045f6:	2303      	movs	r3, #3
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045fa:	f107 0318 	add.w	r3, r7, #24
 80045fe:	4619      	mov	r1, r3
 8004600:	480b      	ldr	r0, [pc, #44]	@ (8004630 <HAL_SD_MspInit+0xac>)
 8004602:	f002 f9ed 	bl	80069e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004606:	2304      	movs	r3, #4
 8004608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460a:	2302      	movs	r3, #2
 800460c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800460e:	2303      	movs	r3, #3
 8004610:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004612:	f107 0318 	add.w	r3, r7, #24
 8004616:	4619      	mov	r1, r3
 8004618:	4806      	ldr	r0, [pc, #24]	@ (8004634 <HAL_SD_MspInit+0xb0>)
 800461a:	f002 f9e1 	bl	80069e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800461e:	bf00      	nop
 8004620:	3728      	adds	r7, #40	@ 0x28
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40018000 	.word	0x40018000
 800462c:	40021000 	.word	0x40021000
 8004630:	40011000 	.word	0x40011000
 8004634:	40011400 	.word	0x40011400

08004638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800463e:	4b18      	ldr	r3, [pc, #96]	@ (80046a0 <HAL_MspInit+0x68>)
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	4a17      	ldr	r2, [pc, #92]	@ (80046a0 <HAL_MspInit+0x68>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	6193      	str	r3, [r2, #24]
 800464a:	4b15      	ldr	r3, [pc, #84]	@ (80046a0 <HAL_MspInit+0x68>)
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	60bb      	str	r3, [r7, #8]
 8004654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004656:	4b12      	ldr	r3, [pc, #72]	@ (80046a0 <HAL_MspInit+0x68>)
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	4a11      	ldr	r2, [pc, #68]	@ (80046a0 <HAL_MspInit+0x68>)
 800465c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004660:	61d3      	str	r3, [r2, #28]
 8004662:	4b0f      	ldr	r3, [pc, #60]	@ (80046a0 <HAL_MspInit+0x68>)
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800466e:	2200      	movs	r2, #0
 8004670:	210f      	movs	r1, #15
 8004672:	f06f 0001 	mvn.w	r0, #1
 8004676:	f001 fd04 	bl	8006082 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800467a:	4b0a      	ldr	r3, [pc, #40]	@ (80046a4 <HAL_MspInit+0x6c>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	4a04      	ldr	r2, [pc, #16]	@ (80046a4 <HAL_MspInit+0x6c>)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40010000 	.word	0x40010000

080046a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08e      	sub	sp, #56	@ 0x38
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80046be:	4b34      	ldr	r3, [pc, #208]	@ (8004790 <HAL_InitTick+0xe8>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	4a33      	ldr	r2, [pc, #204]	@ (8004790 <HAL_InitTick+0xe8>)
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	61d3      	str	r3, [r2, #28]
 80046ca:	4b31      	ldr	r3, [pc, #196]	@ (8004790 <HAL_InitTick+0xe8>)
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80046d6:	f107 0210 	add.w	r2, r7, #16
 80046da:	f107 0314 	add.w	r3, r7, #20
 80046de:	4611      	mov	r1, r2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f004 fd8d 	bl	8009200 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80046ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80046f0:	f004 fd5e 	bl	80091b0 <HAL_RCC_GetPCLK1Freq>
 80046f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80046f6:	e004      	b.n	8004702 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80046f8:	f004 fd5a 	bl	80091b0 <HAL_RCC_GetPCLK1Freq>
 80046fc:	4603      	mov	r3, r0
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004704:	4a23      	ldr	r2, [pc, #140]	@ (8004794 <HAL_InitTick+0xec>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	0c9b      	lsrs	r3, r3, #18
 800470c:	3b01      	subs	r3, #1
 800470e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004710:	4b21      	ldr	r3, [pc, #132]	@ (8004798 <HAL_InitTick+0xf0>)
 8004712:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004716:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8004718:	4b1f      	ldr	r3, [pc, #124]	@ (8004798 <HAL_InitTick+0xf0>)
 800471a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800471e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8004720:	4a1d      	ldr	r2, [pc, #116]	@ (8004798 <HAL_InitTick+0xf0>)
 8004722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004724:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8004726:	4b1c      	ldr	r3, [pc, #112]	@ (8004798 <HAL_InitTick+0xf0>)
 8004728:	2200      	movs	r2, #0
 800472a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800472c:	4b1a      	ldr	r3, [pc, #104]	@ (8004798 <HAL_InitTick+0xf0>)
 800472e:	2200      	movs	r2, #0
 8004730:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004732:	4b19      	ldr	r3, [pc, #100]	@ (8004798 <HAL_InitTick+0xf0>)
 8004734:	2200      	movs	r2, #0
 8004736:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8004738:	4817      	ldr	r0, [pc, #92]	@ (8004798 <HAL_InitTick+0xf0>)
 800473a:	f005 fd37 	bl	800a1ac <HAL_TIM_Base_Init>
 800473e:	4603      	mov	r3, r0
 8004740:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004744:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004748:	2b00      	cmp	r3, #0
 800474a:	d11b      	bne.n	8004784 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800474c:	4812      	ldr	r0, [pc, #72]	@ (8004798 <HAL_InitTick+0xf0>)
 800474e:	f005 fd7d 	bl	800a24c <HAL_TIM_Base_Start_IT>
 8004752:	4603      	mov	r3, r0
 8004754:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004758:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800475c:	2b00      	cmp	r3, #0
 800475e:	d111      	bne.n	8004784 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004760:	201c      	movs	r0, #28
 8004762:	f001 fcaa 	bl	80060ba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b0f      	cmp	r3, #15
 800476a:	d808      	bhi.n	800477e <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800476c:	2200      	movs	r2, #0
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	201c      	movs	r0, #28
 8004772:	f001 fc86 	bl	8006082 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004776:	4a09      	ldr	r2, [pc, #36]	@ (800479c <HAL_InitTick+0xf4>)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	e002      	b.n	8004784 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004784:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004788:	4618      	mov	r0, r3
 800478a:	3738      	adds	r7, #56	@ 0x38
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40021000 	.word	0x40021000
 8004794:	431bde83 	.word	0x431bde83
 8004798:	20000900 	.word	0x20000900
 800479c:	20000038 	.word	0x20000038

080047a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80047a4:	bf00      	nop
 80047a6:	e7fd      	b.n	80047a4 <NMI_Handler+0x4>

080047a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047ac:	bf00      	nop
 80047ae:	e7fd      	b.n	80047ac <HardFault_Handler+0x4>

080047b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047b4:	bf00      	nop
 80047b6:	e7fd      	b.n	80047b4 <MemManage_Handler+0x4>

080047b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047bc:	bf00      	nop
 80047be:	e7fd      	b.n	80047bc <BusFault_Handler+0x4>

080047c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047c4:	bf00      	nop
 80047c6:	e7fd      	b.n	80047c4 <UsageFault_Handler+0x4>

080047c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80047d8:	4802      	ldr	r0, [pc, #8]	@ (80047e4 <DMA1_Channel4_IRQHandler+0x10>)
 80047da:	f001 fe97 	bl	800650c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80047de:	bf00      	nop
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000ab4 	.word	0x20000ab4

080047e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80047ec:	4802      	ldr	r0, [pc, #8]	@ (80047f8 <TIM2_IRQHandler+0x10>)
 80047ee:	f005 fe9f 	bl	800a530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80047f2:	bf00      	nop
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000900 	.word	0x20000900

080047fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004800:	4802      	ldr	r0, [pc, #8]	@ (800480c <TIM3_IRQHandler+0x10>)
 8004802:	f005 fe95 	bl	800a530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004806:	bf00      	nop
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	2000094c 	.word	0x2000094c

08004810 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004814:	4802      	ldr	r0, [pc, #8]	@ (8004820 <USART1_IRQHandler+0x10>)
 8004816:	f006 fe07 	bl	800b428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800481a:	bf00      	nop
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	200009dc 	.word	0x200009dc

08004824 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004828:	4802      	ldr	r0, [pc, #8]	@ (8004834 <USART2_IRQHandler+0x10>)
 800482a:	f006 fdfd 	bl	800b428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800482e:	bf00      	nop
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20000a24 	.word	0x20000a24

08004838 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800483c:	4802      	ldr	r0, [pc, #8]	@ (8004848 <USART3_IRQHandler+0x10>)
 800483e:	f006 fdf3 	bl	800b428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004842:	bf00      	nop
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000a6c 	.word	0x20000a6c

0800484c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004850:	4802      	ldr	r0, [pc, #8]	@ (800485c <TIM7_IRQHandler+0x10>)
 8004852:	f005 fe6d 	bl	800a530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004856:	bf00      	nop
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000994 	.word	0x20000994

08004860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004868:	4a14      	ldr	r2, [pc, #80]	@ (80048bc <_sbrk+0x5c>)
 800486a:	4b15      	ldr	r3, [pc, #84]	@ (80048c0 <_sbrk+0x60>)
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004874:	4b13      	ldr	r3, [pc, #76]	@ (80048c4 <_sbrk+0x64>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d102      	bne.n	8004882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800487c:	4b11      	ldr	r3, [pc, #68]	@ (80048c4 <_sbrk+0x64>)
 800487e:	4a12      	ldr	r2, [pc, #72]	@ (80048c8 <_sbrk+0x68>)
 8004880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004882:	4b10      	ldr	r3, [pc, #64]	@ (80048c4 <_sbrk+0x64>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4413      	add	r3, r2
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	429a      	cmp	r2, r3
 800488e:	d207      	bcs.n	80048a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004890:	f00e f9ce 	bl	8012c30 <__errno>
 8004894:	4603      	mov	r3, r0
 8004896:	220c      	movs	r2, #12
 8004898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800489a:	f04f 33ff 	mov.w	r3, #4294967295
 800489e:	e009      	b.n	80048b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048a0:	4b08      	ldr	r3, [pc, #32]	@ (80048c4 <_sbrk+0x64>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048a6:	4b07      	ldr	r3, [pc, #28]	@ (80048c4 <_sbrk+0x64>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	4a05      	ldr	r2, [pc, #20]	@ (80048c4 <_sbrk+0x64>)
 80048b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048b2:	68fb      	ldr	r3, [r7, #12]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	2000c000 	.word	0x2000c000
 80048c0:	00004000 	.word	0x00004000
 80048c4:	20000948 	.word	0x20000948
 80048c8:	20002d70 	.word	0x20002d70

080048cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048d0:	bf00      	nop
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08e      	sub	sp, #56	@ 0x38
 80048dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	605a      	str	r2, [r3, #4]
 80048e8:	609a      	str	r2, [r3, #8]
 80048ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048ec:	f107 0320 	add.w	r3, r7, #32
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048f6:	1d3b      	adds	r3, r7, #4
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	609a      	str	r2, [r3, #8]
 8004900:	60da      	str	r2, [r3, #12]
 8004902:	611a      	str	r2, [r3, #16]
 8004904:	615a      	str	r2, [r3, #20]
 8004906:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004908:	4b37      	ldr	r3, [pc, #220]	@ (80049e8 <MX_TIM3_Init+0x110>)
 800490a:	4a38      	ldr	r2, [pc, #224]	@ (80049ec <MX_TIM3_Init+0x114>)
 800490c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800490e:	4b36      	ldr	r3, [pc, #216]	@ (80049e8 <MX_TIM3_Init+0x110>)
 8004910:	2247      	movs	r2, #71	@ 0x47
 8004912:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004914:	4b34      	ldr	r3, [pc, #208]	@ (80049e8 <MX_TIM3_Init+0x110>)
 8004916:	2200      	movs	r2, #0
 8004918:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800491a:	4b33      	ldr	r3, [pc, #204]	@ (80049e8 <MX_TIM3_Init+0x110>)
 800491c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004920:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004922:	4b31      	ldr	r3, [pc, #196]	@ (80049e8 <MX_TIM3_Init+0x110>)
 8004924:	2200      	movs	r2, #0
 8004926:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004928:	4b2f      	ldr	r3, [pc, #188]	@ (80049e8 <MX_TIM3_Init+0x110>)
 800492a:	2280      	movs	r2, #128	@ 0x80
 800492c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800492e:	482e      	ldr	r0, [pc, #184]	@ (80049e8 <MX_TIM3_Init+0x110>)
 8004930:	f005 fc3c 	bl	800a1ac <HAL_TIM_Base_Init>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800493a:	f7ff fdfb 	bl	8004534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800493e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004942:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004944:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004948:	4619      	mov	r1, r3
 800494a:	4827      	ldr	r0, [pc, #156]	@ (80049e8 <MX_TIM3_Init+0x110>)
 800494c:	f005 ffba 	bl	800a8c4 <HAL_TIM_ConfigClockSource>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004956:	f7ff fded 	bl	8004534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800495a:	4823      	ldr	r0, [pc, #140]	@ (80049e8 <MX_TIM3_Init+0x110>)
 800495c:	f005 fcd6 	bl	800a30c <HAL_TIM_PWM_Init>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004966:	f7ff fde5 	bl	8004534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800496a:	2300      	movs	r3, #0
 800496c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800496e:	2300      	movs	r3, #0
 8004970:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004972:	f107 0320 	add.w	r3, r7, #32
 8004976:	4619      	mov	r1, r3
 8004978:	481b      	ldr	r0, [pc, #108]	@ (80049e8 <MX_TIM3_Init+0x110>)
 800497a:	f006 fb6f 	bl	800b05c <HAL_TIMEx_MasterConfigSynchronization>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004984:	f7ff fdd6 	bl	8004534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004988:	2360      	movs	r3, #96	@ 0x60
 800498a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004998:	1d3b      	adds	r3, r7, #4
 800499a:	2200      	movs	r2, #0
 800499c:	4619      	mov	r1, r3
 800499e:	4812      	ldr	r0, [pc, #72]	@ (80049e8 <MX_TIM3_Init+0x110>)
 80049a0:	f005 fece 	bl	800a740 <HAL_TIM_PWM_ConfigChannel>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80049aa:	f7ff fdc3 	bl	8004534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80049ae:	1d3b      	adds	r3, r7, #4
 80049b0:	2204      	movs	r2, #4
 80049b2:	4619      	mov	r1, r3
 80049b4:	480c      	ldr	r0, [pc, #48]	@ (80049e8 <MX_TIM3_Init+0x110>)
 80049b6:	f005 fec3 	bl	800a740 <HAL_TIM_PWM_ConfigChannel>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80049c0:	f7ff fdb8 	bl	8004534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80049c4:	1d3b      	adds	r3, r7, #4
 80049c6:	2208      	movs	r2, #8
 80049c8:	4619      	mov	r1, r3
 80049ca:	4807      	ldr	r0, [pc, #28]	@ (80049e8 <MX_TIM3_Init+0x110>)
 80049cc:	f005 feb8 	bl	800a740 <HAL_TIM_PWM_ConfigChannel>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80049d6:	f7ff fdad 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80049da:	4803      	ldr	r0, [pc, #12]	@ (80049e8 <MX_TIM3_Init+0x110>)
 80049dc:	f000 f880 	bl	8004ae0 <HAL_TIM_MspPostInit>

}
 80049e0:	bf00      	nop
 80049e2:	3738      	adds	r7, #56	@ 0x38
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	2000094c 	.word	0x2000094c
 80049ec:	40000400 	.word	0x40000400

080049f0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049f6:	463b      	mov	r3, r7
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80049fe:	4b15      	ldr	r3, [pc, #84]	@ (8004a54 <MX_TIM7_Init+0x64>)
 8004a00:	4a15      	ldr	r2, [pc, #84]	@ (8004a58 <MX_TIM7_Init+0x68>)
 8004a02:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8004a04:	4b13      	ldr	r3, [pc, #76]	@ (8004a54 <MX_TIM7_Init+0x64>)
 8004a06:	2247      	movs	r2, #71	@ 0x47
 8004a08:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a0a:	4b12      	ldr	r3, [pc, #72]	@ (8004a54 <MX_TIM7_Init+0x64>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8004a10:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <MX_TIM7_Init+0x64>)
 8004a12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a16:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a18:	4b0e      	ldr	r3, [pc, #56]	@ (8004a54 <MX_TIM7_Init+0x64>)
 8004a1a:	2280      	movs	r2, #128	@ 0x80
 8004a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004a1e:	480d      	ldr	r0, [pc, #52]	@ (8004a54 <MX_TIM7_Init+0x64>)
 8004a20:	f005 fbc4 	bl	800a1ac <HAL_TIM_Base_Init>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004a2a:	f7ff fd83 	bl	8004534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004a36:	463b      	mov	r3, r7
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4806      	ldr	r0, [pc, #24]	@ (8004a54 <MX_TIM7_Init+0x64>)
 8004a3c:	f006 fb0e 	bl	800b05c <HAL_TIMEx_MasterConfigSynchronization>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8004a46:	f7ff fd75 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004a4a:	bf00      	nop
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000994 	.word	0x20000994
 8004a58:	40001400 	.word	0x40001400

08004a5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1a      	ldr	r2, [pc, #104]	@ (8004ad4 <HAL_TIM_Base_MspInit+0x78>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d114      	bne.n	8004a98 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad8 <HAL_TIM_Base_MspInit+0x7c>)
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	4a19      	ldr	r2, [pc, #100]	@ (8004ad8 <HAL_TIM_Base_MspInit+0x7c>)
 8004a74:	f043 0302 	orr.w	r3, r3, #2
 8004a78:	61d3      	str	r3, [r2, #28]
 8004a7a:	4b17      	ldr	r3, [pc, #92]	@ (8004ad8 <HAL_TIM_Base_MspInit+0x7c>)
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004a86:	2200      	movs	r2, #0
 8004a88:	2105      	movs	r1, #5
 8004a8a:	201d      	movs	r0, #29
 8004a8c:	f001 faf9 	bl	8006082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a90:	201d      	movs	r0, #29
 8004a92:	f001 fb12 	bl	80060ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004a96:	e018      	b.n	8004aca <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8004adc <HAL_TIM_Base_MspInit+0x80>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d113      	bne.n	8004aca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad8 <HAL_TIM_Base_MspInit+0x7c>)
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8004ad8 <HAL_TIM_Base_MspInit+0x7c>)
 8004aa8:	f043 0320 	orr.w	r3, r3, #32
 8004aac:	61d3      	str	r3, [r2, #28]
 8004aae:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad8 <HAL_TIM_Base_MspInit+0x7c>)
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	60bb      	str	r3, [r7, #8]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8004aba:	2200      	movs	r2, #0
 8004abc:	2105      	movs	r1, #5
 8004abe:	2037      	movs	r0, #55	@ 0x37
 8004ac0:	f001 fadf 	bl	8006082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004ac4:	2037      	movs	r0, #55	@ 0x37
 8004ac6:	f001 faf8 	bl	80060ba <HAL_NVIC_EnableIRQ>
}
 8004aca:	bf00      	nop
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40000400 	.word	0x40000400
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	40001400 	.word	0x40001400

08004ae0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae8:	f107 0310 	add.w	r3, r7, #16
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	605a      	str	r2, [r3, #4]
 8004af2:	609a      	str	r2, [r3, #8]
 8004af4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1b      	ldr	r2, [pc, #108]	@ (8004b68 <HAL_TIM_MspPostInit+0x88>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d12f      	bne.n	8004b60 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b00:	4b1a      	ldr	r3, [pc, #104]	@ (8004b6c <HAL_TIM_MspPostInit+0x8c>)
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	4a19      	ldr	r2, [pc, #100]	@ (8004b6c <HAL_TIM_MspPostInit+0x8c>)
 8004b06:	f043 0304 	orr.w	r3, r3, #4
 8004b0a:	6193      	str	r3, [r2, #24]
 8004b0c:	4b17      	ldr	r3, [pc, #92]	@ (8004b6c <HAL_TIM_MspPostInit+0x8c>)
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b18:	4b14      	ldr	r3, [pc, #80]	@ (8004b6c <HAL_TIM_MspPostInit+0x8c>)
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	4a13      	ldr	r2, [pc, #76]	@ (8004b6c <HAL_TIM_MspPostInit+0x8c>)
 8004b1e:	f043 0308 	orr.w	r3, r3, #8
 8004b22:	6193      	str	r3, [r2, #24]
 8004b24:	4b11      	ldr	r3, [pc, #68]	@ (8004b6c <HAL_TIM_MspPostInit+0x8c>)
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b30:	23c0      	movs	r3, #192	@ 0xc0
 8004b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b34:	2302      	movs	r3, #2
 8004b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3c:	f107 0310 	add.w	r3, r7, #16
 8004b40:	4619      	mov	r1, r3
 8004b42:	480b      	ldr	r0, [pc, #44]	@ (8004b70 <HAL_TIM_MspPostInit+0x90>)
 8004b44:	f001 ff4c 	bl	80069e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b50:	2302      	movs	r3, #2
 8004b52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b54:	f107 0310 	add.w	r3, r7, #16
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4806      	ldr	r0, [pc, #24]	@ (8004b74 <HAL_TIM_MspPostInit+0x94>)
 8004b5c:	f001 ff40 	bl	80069e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004b60:	bf00      	nop
 8004b62:	3720      	adds	r7, #32
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40000400 	.word	0x40000400
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40010800 	.word	0x40010800
 8004b74:	40010c00 	.word	0x40010c00

08004b78 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004b7c:	4b11      	ldr	r3, [pc, #68]	@ (8004bc4 <MX_USART1_UART_Init+0x4c>)
 8004b7e:	4a12      	ldr	r2, [pc, #72]	@ (8004bc8 <MX_USART1_UART_Init+0x50>)
 8004b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004b82:	4b10      	ldr	r3, [pc, #64]	@ (8004bc4 <MX_USART1_UART_Init+0x4c>)
 8004b84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8004bc4 <MX_USART1_UART_Init+0x4c>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004b90:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc4 <MX_USART1_UART_Init+0x4c>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004b96:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <MX_USART1_UART_Init+0x4c>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004b9c:	4b09      	ldr	r3, [pc, #36]	@ (8004bc4 <MX_USART1_UART_Init+0x4c>)
 8004b9e:	220c      	movs	r2, #12
 8004ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ba2:	4b08      	ldr	r3, [pc, #32]	@ (8004bc4 <MX_USART1_UART_Init+0x4c>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ba8:	4b06      	ldr	r3, [pc, #24]	@ (8004bc4 <MX_USART1_UART_Init+0x4c>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004bae:	4805      	ldr	r0, [pc, #20]	@ (8004bc4 <MX_USART1_UART_Init+0x4c>)
 8004bb0:	f006 fad2 	bl	800b158 <HAL_UART_Init>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004bba:	f7ff fcbb 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004bbe:	bf00      	nop
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	200009dc 	.word	0x200009dc
 8004bc8:	40013800 	.word	0x40013800

08004bcc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004bd0:	4b11      	ldr	r3, [pc, #68]	@ (8004c18 <MX_USART2_UART_Init+0x4c>)
 8004bd2:	4a12      	ldr	r2, [pc, #72]	@ (8004c1c <MX_USART2_UART_Init+0x50>)
 8004bd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004bd6:	4b10      	ldr	r3, [pc, #64]	@ (8004c18 <MX_USART2_UART_Init+0x4c>)
 8004bd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004bdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004bde:	4b0e      	ldr	r3, [pc, #56]	@ (8004c18 <MX_USART2_UART_Init+0x4c>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004be4:	4b0c      	ldr	r3, [pc, #48]	@ (8004c18 <MX_USART2_UART_Init+0x4c>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004bea:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <MX_USART2_UART_Init+0x4c>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004bf0:	4b09      	ldr	r3, [pc, #36]	@ (8004c18 <MX_USART2_UART_Init+0x4c>)
 8004bf2:	220c      	movs	r2, #12
 8004bf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bf6:	4b08      	ldr	r3, [pc, #32]	@ (8004c18 <MX_USART2_UART_Init+0x4c>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bfc:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <MX_USART2_UART_Init+0x4c>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c02:	4805      	ldr	r0, [pc, #20]	@ (8004c18 <MX_USART2_UART_Init+0x4c>)
 8004c04:	f006 faa8 	bl	800b158 <HAL_UART_Init>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004c0e:	f7ff fc91 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c12:	bf00      	nop
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000a24 	.word	0x20000a24
 8004c1c:	40004400 	.word	0x40004400

08004c20 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004c24:	4b11      	ldr	r3, [pc, #68]	@ (8004c6c <MX_USART3_UART_Init+0x4c>)
 8004c26:	4a12      	ldr	r2, [pc, #72]	@ (8004c70 <MX_USART3_UART_Init+0x50>)
 8004c28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004c2a:	4b10      	ldr	r3, [pc, #64]	@ (8004c6c <MX_USART3_UART_Init+0x4c>)
 8004c2c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004c30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004c32:	4b0e      	ldr	r3, [pc, #56]	@ (8004c6c <MX_USART3_UART_Init+0x4c>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004c38:	4b0c      	ldr	r3, [pc, #48]	@ (8004c6c <MX_USART3_UART_Init+0x4c>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c6c <MX_USART3_UART_Init+0x4c>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004c44:	4b09      	ldr	r3, [pc, #36]	@ (8004c6c <MX_USART3_UART_Init+0x4c>)
 8004c46:	220c      	movs	r2, #12
 8004c48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c4a:	4b08      	ldr	r3, [pc, #32]	@ (8004c6c <MX_USART3_UART_Init+0x4c>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c50:	4b06      	ldr	r3, [pc, #24]	@ (8004c6c <MX_USART3_UART_Init+0x4c>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004c56:	4805      	ldr	r0, [pc, #20]	@ (8004c6c <MX_USART3_UART_Init+0x4c>)
 8004c58:	f006 fa7e 	bl	800b158 <HAL_UART_Init>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004c62:	f7ff fc67 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004c66:	bf00      	nop
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000a6c 	.word	0x20000a6c
 8004c70:	40004800 	.word	0x40004800

08004c74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08e      	sub	sp, #56	@ 0x38
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	609a      	str	r2, [r3, #8]
 8004c88:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a7c      	ldr	r2, [pc, #496]	@ (8004e80 <HAL_UART_MspInit+0x20c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d161      	bne.n	8004d58 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c94:	4b7b      	ldr	r3, [pc, #492]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	4a7a      	ldr	r2, [pc, #488]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004c9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c9e:	6193      	str	r3, [r2, #24]
 8004ca0:	4b78      	ldr	r3, [pc, #480]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ca8:	623b      	str	r3, [r7, #32]
 8004caa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cac:	4b75      	ldr	r3, [pc, #468]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	4a74      	ldr	r2, [pc, #464]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004cb2:	f043 0304 	orr.w	r3, r3, #4
 8004cb6:	6193      	str	r3, [r2, #24]
 8004cb8:	4b72      	ldr	r3, [pc, #456]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004cc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	486b      	ldr	r0, [pc, #428]	@ (8004e88 <HAL_UART_MspInit+0x214>)
 8004cda:	f001 fe81 	bl	80069e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004cde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4865      	ldr	r0, [pc, #404]	@ (8004e88 <HAL_UART_MspInit+0x214>)
 8004cf4:	f001 fe74 	bl	80069e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004cf8:	4b64      	ldr	r3, [pc, #400]	@ (8004e8c <HAL_UART_MspInit+0x218>)
 8004cfa:	4a65      	ldr	r2, [pc, #404]	@ (8004e90 <HAL_UART_MspInit+0x21c>)
 8004cfc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cfe:	4b63      	ldr	r3, [pc, #396]	@ (8004e8c <HAL_UART_MspInit+0x218>)
 8004d00:	2210      	movs	r2, #16
 8004d02:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d04:	4b61      	ldr	r3, [pc, #388]	@ (8004e8c <HAL_UART_MspInit+0x218>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d0a:	4b60      	ldr	r3, [pc, #384]	@ (8004e8c <HAL_UART_MspInit+0x218>)
 8004d0c:	2280      	movs	r2, #128	@ 0x80
 8004d0e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d10:	4b5e      	ldr	r3, [pc, #376]	@ (8004e8c <HAL_UART_MspInit+0x218>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d16:	4b5d      	ldr	r3, [pc, #372]	@ (8004e8c <HAL_UART_MspInit+0x218>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004d1c:	4b5b      	ldr	r3, [pc, #364]	@ (8004e8c <HAL_UART_MspInit+0x218>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004d22:	4b5a      	ldr	r3, [pc, #360]	@ (8004e8c <HAL_UART_MspInit+0x218>)
 8004d24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004d2a:	4858      	ldr	r0, [pc, #352]	@ (8004e8c <HAL_UART_MspInit+0x218>)
 8004d2c:	f001 f9d4 	bl	80060d8 <HAL_DMA_Init>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8004d36:	f7ff fbfd 	bl	8004534 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a53      	ldr	r2, [pc, #332]	@ (8004e8c <HAL_UART_MspInit+0x218>)
 8004d3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d40:	4a52      	ldr	r2, [pc, #328]	@ (8004e8c <HAL_UART_MspInit+0x218>)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004d46:	2200      	movs	r2, #0
 8004d48:	2105      	movs	r1, #5
 8004d4a:	2025      	movs	r0, #37	@ 0x25
 8004d4c:	f001 f999 	bl	8006082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004d50:	2025      	movs	r0, #37	@ 0x25
 8004d52:	f001 f9b2 	bl	80060ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004d56:	e08e      	b.n	8004e76 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART2)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a4d      	ldr	r2, [pc, #308]	@ (8004e94 <HAL_UART_MspInit+0x220>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d138      	bne.n	8004dd4 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d62:	4b48      	ldr	r3, [pc, #288]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	4a47      	ldr	r2, [pc, #284]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d6c:	61d3      	str	r3, [r2, #28]
 8004d6e:	4b45      	ldr	r3, [pc, #276]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d7a:	4b42      	ldr	r3, [pc, #264]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	4a41      	ldr	r2, [pc, #260]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004d80:	f043 0304 	orr.w	r3, r3, #4
 8004d84:	6193      	str	r3, [r2, #24]
 8004d86:	4b3f      	ldr	r3, [pc, #252]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004d92:	2304      	movs	r3, #4
 8004d94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d96:	2302      	movs	r3, #2
 8004d98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004da2:	4619      	mov	r1, r3
 8004da4:	4838      	ldr	r0, [pc, #224]	@ (8004e88 <HAL_UART_MspInit+0x214>)
 8004da6:	f001 fe1b 	bl	80069e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004daa:	2308      	movs	r3, #8
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dae:	2300      	movs	r3, #0
 8004db0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4832      	ldr	r0, [pc, #200]	@ (8004e88 <HAL_UART_MspInit+0x214>)
 8004dbe:	f001 fe0f 	bl	80069e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2105      	movs	r1, #5
 8004dc6:	2026      	movs	r0, #38	@ 0x26
 8004dc8:	f001 f95b 	bl	8006082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004dcc:	2026      	movs	r0, #38	@ 0x26
 8004dce:	f001 f974 	bl	80060ba <HAL_NVIC_EnableIRQ>
}
 8004dd2:	e050      	b.n	8004e76 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART3)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8004e98 <HAL_UART_MspInit+0x224>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d14b      	bne.n	8004e76 <HAL_UART_MspInit+0x202>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004dde:	4b29      	ldr	r3, [pc, #164]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	4a28      	ldr	r2, [pc, #160]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004de8:	61d3      	str	r3, [r2, #28]
 8004dea:	4b26      	ldr	r3, [pc, #152]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004df6:	4b23      	ldr	r3, [pc, #140]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	4a22      	ldr	r2, [pc, #136]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004dfc:	f043 0320 	orr.w	r3, r3, #32
 8004e00:	6193      	str	r3, [r2, #24]
 8004e02:	4b20      	ldr	r3, [pc, #128]	@ (8004e84 <HAL_UART_MspInit+0x210>)
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004e0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e14:	2302      	movs	r3, #2
 8004e16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e20:	4619      	mov	r1, r3
 8004e22:	481e      	ldr	r0, [pc, #120]	@ (8004e9c <HAL_UART_MspInit+0x228>)
 8004e24:	f001 fddc 	bl	80069e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4817      	ldr	r0, [pc, #92]	@ (8004e9c <HAL_UART_MspInit+0x228>)
 8004e3e:	f001 fdcf 	bl	80069e0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 8004e42:	4b17      	ldr	r3, [pc, #92]	@ (8004ea0 <HAL_UART_MspInit+0x22c>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e4a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e52:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e5a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8004e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e60:	4a0f      	ldr	r2, [pc, #60]	@ (8004ea0 <HAL_UART_MspInit+0x22c>)
 8004e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e64:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004e66:	2200      	movs	r2, #0
 8004e68:	2105      	movs	r1, #5
 8004e6a:	2027      	movs	r0, #39	@ 0x27
 8004e6c:	f001 f909 	bl	8006082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004e70:	2027      	movs	r0, #39	@ 0x27
 8004e72:	f001 f922 	bl	80060ba <HAL_NVIC_EnableIRQ>
}
 8004e76:	bf00      	nop
 8004e78:	3738      	adds	r7, #56	@ 0x38
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40013800 	.word	0x40013800
 8004e84:	40021000 	.word	0x40021000
 8004e88:	40010800 	.word	0x40010800
 8004e8c:	20000ab4 	.word	0x20000ab4
 8004e90:	40020044 	.word	0x40020044
 8004e94:	40004400 	.word	0x40004400
 8004e98:	40004800 	.word	0x40004800
 8004e9c:	40011400 	.word	0x40011400
 8004ea0:	40010000 	.word	0x40010000

08004ea4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ea4:	f7ff fd12 	bl	80048cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ea8:	480b      	ldr	r0, [pc, #44]	@ (8004ed8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004eaa:	490c      	ldr	r1, [pc, #48]	@ (8004edc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004eac:	4a0c      	ldr	r2, [pc, #48]	@ (8004ee0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004eb0:	e002      	b.n	8004eb8 <LoopCopyDataInit>

08004eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eb6:	3304      	adds	r3, #4

08004eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ebc:	d3f9      	bcc.n	8004eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ebe:	4a09      	ldr	r2, [pc, #36]	@ (8004ee4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004ec0:	4c09      	ldr	r4, [pc, #36]	@ (8004ee8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ec4:	e001      	b.n	8004eca <LoopFillZerobss>

08004ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ec8:	3204      	adds	r2, #4

08004eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ecc:	d3fb      	bcc.n	8004ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ece:	f00d feb5 	bl	8012c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ed2:	f7ff faa7 	bl	8004424 <main>
  bx lr
 8004ed6:	4770      	bx	lr
  ldr r0, =_sdata
 8004ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004edc:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8004ee0:	08013754 	.word	0x08013754
  ldr r2, =_sbss
 8004ee4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8004ee8:	20002d6c 	.word	0x20002d6c

08004eec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004eec:	e7fe      	b.n	8004eec <ADC1_2_IRQHandler>
	...

08004ef0 <AT24Cxx_get_max_addr>:
#include <stdio.h>

#include "AT24Cxx_stm32_hal.h"

uint16_t AT24Cxx_get_max_addr ( AT24Cxx_device_t* dev )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	791b      	ldrb	r3, [r3, #4]
 8004efc:	2b05      	cmp	r3, #5
 8004efe:	d820      	bhi.n	8004f42 <AT24Cxx_get_max_addr+0x52>
 8004f00:	a201      	add	r2, pc, #4	@ (adr r2, 8004f08 <AT24Cxx_get_max_addr+0x18>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f21 	.word	0x08004f21
 8004f0c:	08004f25 	.word	0x08004f25
 8004f10:	08004f2b 	.word	0x08004f2b
 8004f14:	08004f31 	.word	0x08004f31
 8004f18:	08004f37 	.word	0x08004f37
 8004f1c:	08004f3d 	.word	0x08004f3d
	case AT24C01:
		return AT24C01_MAX_ADDR;
 8004f20:	237f      	movs	r3, #127	@ 0x7f
 8004f22:	e00f      	b.n	8004f44 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C32:
		return AT24C32_MAX_ADDR;
 8004f24:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8004f28:	e00c      	b.n	8004f44 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C64:
		return AT24C64_MAX_ADDR;
 8004f2a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8004f2e:	e009      	b.n	8004f44 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C128:
		return AT24C128_MAX_ADDR;
 8004f30:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8004f34:	e006      	b.n	8004f44 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C256:
		return AT24C256_MAX_ADDR;
 8004f36:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8004f3a:	e003      	b.n	8004f44 <AT24Cxx_get_max_addr+0x54>
		break;
		//not supported yet, will overflow
	case AT24C512:
		return AT24C512_MAX_ADDR;
 8004f3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f40:	e000      	b.n	8004f44 <AT24Cxx_get_max_addr+0x54>
		break;
	default:
		return 0;
 8004f42:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop

08004f50 <AT24Cxx_get_pg_size>:

uint16_t AT24Cxx_get_pg_size ( AT24Cxx_device_t* dev )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	791b      	ldrb	r3, [r3, #4]
 8004f5c:	2b05      	cmp	r3, #5
 8004f5e:	d81b      	bhi.n	8004f98 <AT24Cxx_get_pg_size+0x48>
 8004f60:	a201      	add	r2, pc, #4	@ (adr r2, 8004f68 <AT24Cxx_get_pg_size+0x18>)
 8004f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f66:	bf00      	nop
 8004f68:	08004f81 	.word	0x08004f81
 8004f6c:	08004f85 	.word	0x08004f85
 8004f70:	08004f89 	.word	0x08004f89
 8004f74:	08004f8d 	.word	0x08004f8d
 8004f78:	08004f91 	.word	0x08004f91
 8004f7c:	08004f95 	.word	0x08004f95
	case AT24C01:
		return AT24C01_PG_SIZE;
 8004f80:	2308      	movs	r3, #8
 8004f82:	e00a      	b.n	8004f9a <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C32:
		return AT24C32_PG_SIZE;
 8004f84:	2320      	movs	r3, #32
 8004f86:	e008      	b.n	8004f9a <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C64:
		return AT24C64_PG_SIZE;
 8004f88:	2320      	movs	r3, #32
 8004f8a:	e006      	b.n	8004f9a <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C128:
		return AT24C128_PG_SIZE;
 8004f8c:	2340      	movs	r3, #64	@ 0x40
 8004f8e:	e004      	b.n	8004f9a <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C256:
		return AT24C256_PG_SIZE;
 8004f90:	2340      	movs	r3, #64	@ 0x40
 8004f92:	e002      	b.n	8004f9a <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C512:
		//not supported yet, will overflow
		return AT24C512_PG_SIZE;
 8004f94:	2380      	movs	r3, #128	@ 0x80
 8004f96:	e000      	b.n	8004f9a <AT24Cxx_get_pg_size+0x4a>
		break;
	default:
		return 0;
 8004f98:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <AT24Cxx_init>:

AT24Cxx_ERR_TypeDef AT24Cxx_init( AT24Cxx_devices_t* devices, 
	uint8_t init_dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	460b      	mov	r3, r1
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	72fb      	strb	r3, [r7, #11]
	//adds first device to AT32Cxx_devices array
	//further devices should be added by calling AT24Cxx_add_dev()
	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 8004fb2:	2114      	movs	r1, #20
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	f00d fd59 	bl	8012a6c <calloc>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	613b      	str	r3, [r7, #16]
	if ( at == NULL )
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d102      	bne.n	8004fca <AT24Cxx_init+0x26>
		return at_init_err;
 8004fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc8:	e028      	b.n	800501c <AT24Cxx_init+0x78>

	for(uint8_t i = 0; i < 8; i++)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	75fb      	strb	r3, [r7, #23]
 8004fce:	e007      	b.n	8004fe0 <AT24Cxx_init+0x3c>
			devices->devices[i] = 0x00;
 8004fd0:	7dfa      	ldrb	r2, [r7, #23]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < 8; i++)
 8004fda:	7dfb      	ldrb	r3, [r7, #23]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	75fb      	strb	r3, [r7, #23]
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
 8004fe2:	2b07      	cmp	r3, #7
 8004fe4:	d9f4      	bls.n	8004fd0 <AT24Cxx_init+0x2c>

	at->dev_addr = init_dev_addr;
 8004fe6:	7afb      	ldrb	r3, [r7, #11]
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	60da      	str	r2, [r3, #12]
	at->prev_dev = NULL;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2205      	movs	r2, #5
 8004ffe:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2201      	movs	r2, #1
 800500a:	721a      	strb	r2, [r3, #8]
	devices->dev_count = 1;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[0] = at;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	601a      	str	r2, [r3, #0]

	return at_ok;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <AT24Cxx_add_dev>:

AT24Cxx_ERR_TypeDef AT24Cxx_add_dev( AT24Cxx_devices_t* devices, 
	uint8_t dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	460b      	mov	r3, r1
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	72fb      	strb	r3, [r7, #11]
	if(devices->dev_count == 0 || devices->dev_count > 8)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d004      	beq.n	8005046 <AT24Cxx_add_dev+0x22>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005042:	2b08      	cmp	r3, #8
 8005044:	d902      	bls.n	800504c <AT24Cxx_add_dev+0x28>
		return at_add_dev_err;
 8005046:	f06f 0301 	mvn.w	r3, #1
 800504a:	e03e      	b.n	80050ca <AT24Cxx_add_dev+0xa6>

	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 800504c:	2114      	movs	r1, #20
 800504e:	2001      	movs	r0, #1
 8005050:	f00d fd0c 	bl	8012a6c <calloc>
 8005054:	4603      	mov	r3, r0
 8005056:	617b      	str	r3, [r7, #20]
	if ( at == NULL )
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <AT24Cxx_add_dev+0x40>
		return at_add_dev_err;
 800505e:	f06f 0301 	mvn.w	r3, #1
 8005062:	e032      	b.n	80050ca <AT24Cxx_add_dev+0xa6>

	at->dev_addr = dev_addr;
 8005064:	7afb      	ldrb	r3, [r7, #11]
 8005066:	b29a      	uxth	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2200      	movs	r2, #0
 8005070:	60da      	str	r2, [r3, #12]
	at->prev_dev = devices->devices[devices->dev_count-1];
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005078:	1e5a      	subs	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2205      	movs	r2, #5
 8005088:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2201      	movs	r2, #1
 8005094:	721a      	strb	r2, [r3, #8]
	devices->dev_count++;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800509c:	3301      	adds	r3, #1
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[devices->dev_count-1] = at;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050ac:	1e5a      	subs	r2, r3, #1
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6979      	ldr	r1, [r7, #20]
 80050b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//update previous device's next device
	devices->devices[devices->dev_count-2]->next_dev = at;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050bc:	1e9a      	subs	r2, r3, #2
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	60da      	str	r2, [r3, #12]
	return at_ok;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <AT24Cxx_write_byte_buffer>:
	return at_w_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_write_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 80050d2:	b5b0      	push	{r4, r5, r7, lr}
 80050d4:	b08a      	sub	sp, #40	@ 0x28
 80050d6:	af04      	add	r7, sp, #16
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	4611      	mov	r1, r2
 80050de:	461a      	mov	r2, r3
 80050e0:	460b      	mov	r3, r1
 80050e2:	80fb      	strh	r3, [r7, #6]
 80050e4:	4613      	mov	r3, r2
 80050e6:	80bb      	strh	r3, [r7, #4]
	//TODO checks

	uint8_t page_size = AT24Cxx_get_pg_size(dev);
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff ff31 	bl	8004f50 <AT24Cxx_get_pg_size>
 80050ee:	4603      	mov	r3, r0
 80050f0:	75bb      	strb	r3, [r7, #22]

	uint8_t page_remaining = page_size - mem_addr % page_size;
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	7dba      	ldrb	r2, [r7, #22]
 80050f6:	fb93 f1f2 	sdiv	r1, r3, r2
 80050fa:	fb01 f202 	mul.w	r2, r1, r2
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	b2db      	uxtb	r3, r3
 8005102:	7dba      	ldrb	r2, [r7, #22]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	757b      	strb	r3, [r7, #21]

	uint8_t page_writes = (buf_length - page_remaining) / page_size;
 8005108:	88ba      	ldrh	r2, [r7, #4]
 800510a:	7d7b      	ldrb	r3, [r7, #21]
 800510c:	1ad2      	subs	r2, r2, r3
 800510e:	7dbb      	ldrb	r3, [r7, #22]
 8005110:	fb92 f3f3 	sdiv	r3, r2, r3
 8005114:	753b      	strb	r3, [r7, #20]
	uint8_t remainder_writes = (buf_length - page_remaining) % page_size;
 8005116:	88ba      	ldrh	r2, [r7, #4]
 8005118:	7d7b      	ldrb	r3, [r7, #21]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	7dba      	ldrb	r2, [r7, #22]
 800511e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005122:	fb01 f202 	mul.w	r2, r1, r2
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	74fb      	strb	r3, [r7, #19]

	//finish first page
	if((mem_addr + page_remaining) > 0x00 &&
 800512a:	88fa      	ldrh	r2, [r7, #6]
 800512c:	7d7b      	ldrb	r3, [r7, #21]
 800512e:	4413      	add	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	dd23      	ble.n	800517c <AT24Cxx_write_byte_buffer+0xaa>
		(mem_addr + page_remaining) < AT24Cxx_get_max_addr(dev)){
 8005134:	88fa      	ldrh	r2, [r7, #6]
 8005136:	7d7b      	ldrb	r3, [r7, #21]
 8005138:	18d4      	adds	r4, r2, r3
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff fed8 	bl	8004ef0 <AT24Cxx_get_max_addr>
 8005140:	4603      	mov	r3, r0
	if((mem_addr + page_remaining) > 0x00 &&
 8005142:	429c      	cmp	r4, r3
 8005144:	da1a      	bge.n	800517c <AT24Cxx_write_byte_buffer+0xaa>

		while(HAL_I2C_Mem_Write(dev->dev_port,
 8005146:	bf00      	nop
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	88db      	ldrh	r3, [r3, #6]
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	b21b      	sxth	r3, r3
 8005154:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005158:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Write(dev->dev_port,
 800515a:	b299      	uxth	r1, r3
 800515c:	7d7b      	ldrb	r3, [r7, #21]
 800515e:	b29b      	uxth	r3, r3
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8005166:	9402      	str	r4, [sp, #8]
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	2310      	movs	r3, #16
 8005170:	f002 fac0 	bl	80076f4 <HAL_I2C_Mem_Write>
 8005174:	4603      	mov	r3, r0
				(uint16_t) mem_addr,
				I2C_MEMADD_SIZE_16BIT,
				data_buf,
				page_remaining,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e6      	bne.n	8005148 <AT24Cxx_write_byte_buffer+0x76>
	if((mem_addr + page_remaining) > 0x00 &&
 800517a:	e002      	b.n	8005182 <AT24Cxx_write_byte_buffer+0xb0>
	}else return at_w_bytes_err;
 800517c:	f06f 0304 	mvn.w	r3, #4
 8005180:	e0a5      	b.n	80052ce <AT24Cxx_write_byte_buffer+0x1fc>

	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8005182:	2300      	movs	r3, #0
 8005184:	75fb      	strb	r3, [r7, #23]
 8005186:	e04e      	b.n	8005226 <AT24Cxx_write_byte_buffer+0x154>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	7d7b      	ldrb	r3, [r7, #21]
 800518c:	441a      	add	r2, r3
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	7db9      	ldrb	r1, [r7, #22]
 8005192:	fb01 f303 	mul.w	r3, r1, r3
 8005196:	4413      	add	r3, r2
 8005198:	2b00      	cmp	r3, #0
 800519a:	dd3e      	ble.n	800521a <AT24Cxx_write_byte_buffer+0x148>
			(mem_addr + page_remaining + (current_page * page_size)) < AT24Cxx_get_max_addr(dev)){
 800519c:	88fa      	ldrh	r2, [r7, #6]
 800519e:	7d7b      	ldrb	r3, [r7, #21]
 80051a0:	441a      	add	r2, r3
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
 80051a4:	7db9      	ldrb	r1, [r7, #22]
 80051a6:	fb01 f303 	mul.w	r3, r1, r3
 80051aa:	18d4      	adds	r4, r2, r3
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7ff fe9f 	bl	8004ef0 <AT24Cxx_get_max_addr>
 80051b2:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 80051b4:	429c      	cmp	r4, r3
 80051b6:	da30      	bge.n	800521a <AT24Cxx_write_byte_buffer+0x148>

				while(HAL_I2C_Mem_Write(dev->dev_port,
 80051b8:	bf00      	nop
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6818      	ldr	r0, [r3, #0]
					AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	88db      	ldrh	r3, [r3, #6]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	b21b      	sxth	r3, r3
 80051c6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80051ca:	b21b      	sxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 80051cc:	b29c      	uxth	r4, r3
					(uint16_t) mem_addr + page_remaining + (current_page * page_size),
 80051ce:	7d7b      	ldrb	r3, [r7, #21]
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	4413      	add	r3, r2
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	7db9      	ldrb	r1, [r7, #22]
 80051de:	b289      	uxth	r1, r1
 80051e0:	fb01 f303 	mul.w	r3, r1, r3
 80051e4:	b29b      	uxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 80051e6:	4413      	add	r3, r2
 80051e8:	b29d      	uxth	r5, r3
					I2C_MEMADD_SIZE_16BIT,
					data_buf + page_remaining + (current_page * page_size),
 80051ea:	7d7b      	ldrb	r3, [r7, #21]
 80051ec:	7dfa      	ldrb	r2, [r7, #23]
 80051ee:	7db9      	ldrb	r1, [r7, #22]
 80051f0:	fb01 f202 	mul.w	r2, r1, r2
 80051f4:	4413      	add	r3, r2
				while(HAL_I2C_Mem_Write(dev->dev_port,
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	4413      	add	r3, r2
 80051fa:	7dba      	ldrb	r2, [r7, #22]
 80051fc:	b292      	uxth	r2, r2
 80051fe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005202:	9102      	str	r1, [sp, #8]
 8005204:	9201      	str	r2, [sp, #4]
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	2310      	movs	r3, #16
 800520a:	462a      	mov	r2, r5
 800520c:	4621      	mov	r1, r4
 800520e:	f002 fa71 	bl	80076f4 <HAL_I2C_Mem_Write>
 8005212:	4603      	mov	r3, r0
					page_size,
					AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1d0      	bne.n	80051ba <AT24Cxx_write_byte_buffer+0xe8>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8005218:	e002      	b.n	8005220 <AT24Cxx_write_byte_buffer+0x14e>
		}else return at_w_bytes_err;
 800521a:	f06f 0304 	mvn.w	r3, #4
 800521e:	e056      	b.n	80052ce <AT24Cxx_write_byte_buffer+0x1fc>
	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	3301      	adds	r3, #1
 8005224:	75fb      	strb	r3, [r7, #23]
 8005226:	7dfa      	ldrb	r2, [r7, #23]
 8005228:	7d3b      	ldrb	r3, [r7, #20]
 800522a:	429a      	cmp	r2, r3
 800522c:	d3ac      	bcc.n	8005188 <AT24Cxx_write_byte_buffer+0xb6>
	}

	if(remainder_writes){
 800522e:	7cfb      	ldrb	r3, [r7, #19]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d04b      	beq.n	80052cc <AT24Cxx_write_byte_buffer+0x1fa>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8005234:	88fa      	ldrh	r2, [r7, #6]
 8005236:	7d7b      	ldrb	r3, [r7, #21]
 8005238:	441a      	add	r2, r3
 800523a:	7d3b      	ldrb	r3, [r7, #20]
 800523c:	7db9      	ldrb	r1, [r7, #22]
 800523e:	fb01 f303 	mul.w	r3, r1, r3
 8005242:	4413      	add	r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	dd3e      	ble.n	80052c6 <AT24Cxx_write_byte_buffer+0x1f4>
			(mem_addr + page_remaining + (page_writes * page_size)) < AT24Cxx_get_max_addr(dev)){
 8005248:	88fa      	ldrh	r2, [r7, #6]
 800524a:	7d7b      	ldrb	r3, [r7, #21]
 800524c:	441a      	add	r2, r3
 800524e:	7d3b      	ldrb	r3, [r7, #20]
 8005250:	7db9      	ldrb	r1, [r7, #22]
 8005252:	fb01 f303 	mul.w	r3, r1, r3
 8005256:	18d4      	adds	r4, r2, r3
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff fe49 	bl	8004ef0 <AT24Cxx_get_max_addr>
 800525e:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8005260:	429c      	cmp	r4, r3
 8005262:	da30      	bge.n	80052c6 <AT24Cxx_write_byte_buffer+0x1f4>

			while(HAL_I2C_Mem_Write(dev->dev_port,
 8005264:	bf00      	nop
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	88db      	ldrh	r3, [r3, #6]
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	b21b      	sxth	r3, r3
 8005272:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005276:	b21b      	sxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8005278:	b29c      	uxth	r4, r3
				(uint16_t) mem_addr + page_remaining + (page_writes * page_size),
 800527a:	7d7b      	ldrb	r3, [r7, #21]
 800527c:	b29a      	uxth	r2, r3
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	4413      	add	r3, r2
 8005282:	b29a      	uxth	r2, r3
 8005284:	7d3b      	ldrb	r3, [r7, #20]
 8005286:	b29b      	uxth	r3, r3
 8005288:	7db9      	ldrb	r1, [r7, #22]
 800528a:	b289      	uxth	r1, r1
 800528c:	fb01 f303 	mul.w	r3, r1, r3
 8005290:	b29b      	uxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8005292:	4413      	add	r3, r2
 8005294:	b29d      	uxth	r5, r3
				I2C_MEMADD_SIZE_16BIT,
				data_buf + page_remaining + (page_writes * page_size),
 8005296:	7d7b      	ldrb	r3, [r7, #21]
 8005298:	7d3a      	ldrb	r2, [r7, #20]
 800529a:	7db9      	ldrb	r1, [r7, #22]
 800529c:	fb01 f202 	mul.w	r2, r1, r2
 80052a0:	4413      	add	r3, r2
			while(HAL_I2C_Mem_Write(dev->dev_port,
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	4413      	add	r3, r2
 80052a6:	7cfa      	ldrb	r2, [r7, #19]
 80052a8:	b292      	uxth	r2, r2
 80052aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80052ae:	9102      	str	r1, [sp, #8]
 80052b0:	9201      	str	r2, [sp, #4]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	2310      	movs	r3, #16
 80052b6:	462a      	mov	r2, r5
 80052b8:	4621      	mov	r1, r4
 80052ba:	f002 fa1b 	bl	80076f4 <HAL_I2C_Mem_Write>
 80052be:	4603      	mov	r3, r0
				remainder_writes,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1d0      	bne.n	8005266 <AT24Cxx_write_byte_buffer+0x194>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 80052c4:	e002      	b.n	80052cc <AT24Cxx_write_byte_buffer+0x1fa>
		}else return at_w_bytes_err;
 80052c6:	f06f 0304 	mvn.w	r3, #4
 80052ca:	e000      	b.n	80052ce <AT24Cxx_write_byte_buffer+0x1fc>
	}

	return at_ok;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bdb0      	pop	{r4, r5, r7, pc}

080052d6 <AT24Cxx_read_byte_buffer>:
	return at_r_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_read_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b088      	sub	sp, #32
 80052da:	af04      	add	r7, sp, #16
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	4611      	mov	r1, r2
 80052e2:	461a      	mov	r2, r3
 80052e4:	460b      	mov	r3, r1
 80052e6:	80fb      	strh	r3, [r7, #6]
 80052e8:	4613      	mov	r3, r2
 80052ea:	80bb      	strh	r3, [r7, #4]
	if(mem_addr > 0x00 && mem_addr < AT24Cxx_get_max_addr(dev)){
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d022      	beq.n	8005338 <AT24Cxx_read_byte_buffer+0x62>
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f7ff fdfc 	bl	8004ef0 <AT24Cxx_get_max_addr>
 80052f8:	4603      	mov	r3, r0
 80052fa:	461a      	mov	r2, r3
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	4293      	cmp	r3, r2
 8005300:	d21a      	bcs.n	8005338 <AT24Cxx_read_byte_buffer+0x62>
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8005302:	bf00      	nop
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_R | (dev->dev_addr << 1) ,
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	88db      	ldrh	r3, [r3, #6]
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	b21b      	sxth	r3, r3
 8005310:	f043 03a1 	orr.w	r3, r3, #161	@ 0xa1
 8005314:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8005316:	b299      	uxth	r1, r3
 8005318:	88fa      	ldrh	r2, [r7, #6]
 800531a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800531e:	9302      	str	r3, [sp, #8]
 8005320:	88bb      	ldrh	r3, [r7, #4]
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	2310      	movs	r3, #16
 800532a:	f002 fadd 	bl	80078e8 <HAL_I2C_Mem_Read>
 800532e:	4603      	mov	r3, r0
				(uint16_t) mem_addr, I2C_MEMADD_SIZE_16BIT, data_buf, buf_length,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e7      	bne.n	8005304 <AT24Cxx_read_byte_buffer+0x2e>
		return at_ok;
 8005334:	2300      	movs	r3, #0
 8005336:	e001      	b.n	800533c <AT24Cxx_read_byte_buffer+0x66>
	}
	return at_r_bytes_err;
 8005338:	f06f 0306 	mvn.w	r3, #6
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static int constrain(int amt, int low, int high)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	429a      	cmp	r2, r3
 8005356:	da01      	bge.n	800535c <constrain+0x18>
        return low;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	e006      	b.n	800536a <constrain+0x26>
    else if (amt > high)
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	429a      	cmp	r2, r3
 8005362:	dd01      	ble.n	8005368 <constrain+0x24>
        return high;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	e000      	b.n	800536a <constrain+0x26>
    else
        return amt;
 8005368:	68fb      	ldr	r3, [r7, #12]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr

08005374 <attitude_ctrl_init>:

float ab_speed_filted;

float v_estimate;

void attitude_ctrl_init(){
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af02      	add	r7, sp, #8

   speed_filter_reset = TRUE;
 800537a:	4b2d      	ldr	r3, [pc, #180]	@ (8005430 <attitude_ctrl_init+0xbc>)
 800537c:	2201      	movs	r2, #1
 800537e:	701a      	strb	r2, [r3, #0]
   ab_speed_filted = 0.0f;
 8005380:	4b2c      	ldr	r3, [pc, #176]	@ (8005434 <attitude_ctrl_init+0xc0>)
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
   // init pid 
   pid_init(&roll_angle_pid,4,0,0,F_CUT_OFF,100);
 8005388:	4b2b      	ldr	r3, [pc, #172]	@ (8005438 <attitude_ctrl_init+0xc4>)
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800539e:	4827      	ldr	r0, [pc, #156]	@ (800543c <attitude_ctrl_init+0xc8>)
 80053a0:	f7fe f901 	bl	80035a6 <pid_init>
   pid_init(&roll_rate_pid,5,2.5,0,F_CUT_OFF,300);
 80053a4:	4b26      	ldr	r3, [pc, #152]	@ (8005440 <attitude_ctrl_init+0xcc>)
 80053a6:	9301      	str	r3, [sp, #4]
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	4a24      	ldr	r2, [pc, #144]	@ (8005444 <attitude_ctrl_init+0xd0>)
 80053b4:	4924      	ldr	r1, [pc, #144]	@ (8005448 <attitude_ctrl_init+0xd4>)
 80053b6:	4825      	ldr	r0, [pc, #148]	@ (800544c <attitude_ctrl_init+0xd8>)
 80053b8:	f7fe f8f5 	bl	80035a6 <pid_init>

   pid_init(&pitch_angle_pid,4,0,0,F_CUT_OFF,100);
 80053bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005438 <attitude_ctrl_init+0xc4>)
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80053d2:	481f      	ldr	r0, [pc, #124]	@ (8005450 <attitude_ctrl_init+0xdc>)
 80053d4:	f7fe f8e7 	bl	80035a6 <pid_init>
   pid_init(&pitch_rate_pid,5,2.5,0,F_CUT_OFF,300);
 80053d8:	4b19      	ldr	r3, [pc, #100]	@ (8005440 <attitude_ctrl_init+0xcc>)
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	f04f 0300 	mov.w	r3, #0
 80053e6:	4a17      	ldr	r2, [pc, #92]	@ (8005444 <attitude_ctrl_init+0xd0>)
 80053e8:	4917      	ldr	r1, [pc, #92]	@ (8005448 <attitude_ctrl_init+0xd4>)
 80053ea:	481a      	ldr	r0, [pc, #104]	@ (8005454 <attitude_ctrl_init+0xe0>)
 80053ec:	f7fe f8db 	bl	80035a6 <pid_init>

   // rate 
   pid_init(&roll_rate_t,4,0,0,F_CUT_OFF,300);
 80053f0:	4b13      	ldr	r3, [pc, #76]	@ (8005440 <attitude_ctrl_init+0xcc>)
 80053f2:	9301      	str	r3, [sp, #4]
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8005406:	4814      	ldr	r0, [pc, #80]	@ (8005458 <attitude_ctrl_init+0xe4>)
 8005408:	f7fe f8cd 	bl	80035a6 <pid_init>
   pid_init(&pitch_rate_t,4,0,0,F_CUT_OFF,300);
 800540c:	4b0c      	ldr	r3, [pc, #48]	@ (8005440 <attitude_ctrl_init+0xcc>)
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	f04f 0300 	mov.w	r3, #0
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8005422:	480e      	ldr	r0, [pc, #56]	@ (800545c <attitude_ctrl_init+0xe8>)
 8005424:	f7fe f8bf 	bl	80035a6 <pid_init>

}
 8005428:	bf00      	nop
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000b00 	.word	0x20000b00
 8005434:	20000bdc 	.word	0x20000bdc
 8005438:	42c80000 	.word	0x42c80000
 800543c:	20000b4c 	.word	0x20000b4c
 8005440:	43960000 	.word	0x43960000
 8005444:	40200000 	.word	0x40200000
 8005448:	40a00000 	.word	0x40a00000
 800544c:	20000b04 	.word	0x20000b04
 8005450:	20000b70 	.word	0x20000b70
 8005454:	20000b28 	.word	0x20000b28
 8005458:	20000b94 	.word	0x20000b94
 800545c:	20000bb8 	.word	0x20000bb8

08005460 <rate_stabilize>:
        //pitch axis
        float p_angle_pid =  pid_calculate(&pitch_angle_pid,pitch_measurement,pitch_desired + pitch_trim,dt);
        float p_rate_pid  = -pid_calculate(&pitch_rate_pid,-pitch_rate_measurement,p_angle_pid,dt);
*/

void rate_stabilize(float dt){
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b08f      	sub	sp, #60	@ 0x3c
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
    uint16_t servoL;
    uint16_t servoR;

    v_estimate = dynamic_speed_esitmate(dt);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f8e1 	bl	8005630 <dynamic_speed_esitmate>
 800546e:	4603      	mov	r3, r0
 8005470:	4a67      	ldr	r2, [pc, #412]	@ (8005610 <rate_stabilize+0x1b0>)
 8005472:	6013      	str	r3, [r2, #0]

    if(ibusChannelData[CH5] > CHANNEL_HIGH ){
 8005474:	4b67      	ldr	r3, [pc, #412]	@ (8005614 <rate_stabilize+0x1b4>)
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 800547c:	4293      	cmp	r3, r2
 800547e:	f240 8088 	bls.w	8005592 <rate_stabilize+0x132>
        float roll_rate_measurement = AHRS.roll_rate;
 8005482:	4b65      	ldr	r3, [pc, #404]	@ (8005618 <rate_stabilize+0x1b8>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	62bb      	str	r3, [r7, #40]	@ 0x28
        float pitch_rate_measurement = AHRS.pitch_rate;
 8005488:	4b63      	ldr	r3, [pc, #396]	@ (8005618 <rate_stabilize+0x1b8>)
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	627b      	str	r3, [r7, #36]	@ 0x24

        float roll_rate_desired = ((int)ibusChannelData[0] - 1500)*0.5f;
 800548e:	4b61      	ldr	r3, [pc, #388]	@ (8005614 <rate_stabilize+0x1b4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005496:	4618      	mov	r0, r3
 8005498:	f7fb fc68 	bl	8000d6c <__aeabi_i2f>
 800549c:	4603      	mov	r3, r0
 800549e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fb fcb6 	bl	8000e14 <__aeabi_fmul>
 80054a8:	4603      	mov	r3, r0
 80054aa:	623b      	str	r3, [r7, #32]
        float pitch_rate_desired = ((int)ibusChannelData[1] - 1500)*-0.5f;
 80054ac:	4b59      	ldr	r3, [pc, #356]	@ (8005614 <rate_stabilize+0x1b4>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fb fc59 	bl	8000d6c <__aeabi_i2f>
 80054ba:	4603      	mov	r3, r0
 80054bc:	f04f 413f 	mov.w	r1, #3204448256	@ 0xbf000000
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fb fca7 	bl	8000e14 <__aeabi_fmul>
 80054c6:	4603      	mov	r3, r0
 80054c8:	61fb      	str	r3, [r7, #28]

        // pid scale with velocity
        float pid_velo_scale = 1.0/(1 + sq(v_estimate)*0.0035f);
 80054ca:	4b51      	ldr	r3, [pc, #324]	@ (8005610 <rate_stabilize+0x1b0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a50      	ldr	r2, [pc, #320]	@ (8005610 <rate_stabilize+0x1b0>)
 80054d0:	6812      	ldr	r2, [r2, #0]
 80054d2:	4611      	mov	r1, r2
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fb fc9d 	bl	8000e14 <__aeabi_fmul>
 80054da:	4603      	mov	r3, r0
 80054dc:	494f      	ldr	r1, [pc, #316]	@ (800561c <rate_stabilize+0x1bc>)
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fb fc98 	bl	8000e14 <__aeabi_fmul>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fb fb8a 	bl	8000c04 <__addsf3>
 80054f0:	4603      	mov	r3, r0
 80054f2:	4619      	mov	r1, r3
 80054f4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80054f8:	f7fb fd40 	bl	8000f7c <__aeabi_fdiv>
 80054fc:	4603      	mov	r3, r0
 80054fe:	61bb      	str	r3, [r7, #24]

        float r_rate  =  pid_calculate(&roll_rate_t, roll_rate_measurement,roll_rate_desired,dt);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a3a      	ldr	r2, [r7, #32]
 8005504:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005506:	4846      	ldr	r0, [pc, #280]	@ (8005620 <rate_stabilize+0x1c0>)
 8005508:	f7fe f878 	bl	80035fc <pid_calculate>
 800550c:	6178      	str	r0, [r7, #20]
        float p_rate  =  pid_calculate(&pitch_rate_t, pitch_rate_measurement,pitch_rate_desired,dt);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005514:	4843      	ldr	r0, [pc, #268]	@ (8005624 <rate_stabilize+0x1c4>)
 8005516:	f7fe f871 	bl	80035fc <pid_calculate>
 800551a:	6138      	str	r0, [r7, #16]
        
        r_rate *= pid_velo_scale;
 800551c:	69b9      	ldr	r1, [r7, #24]
 800551e:	6978      	ldr	r0, [r7, #20]
 8005520:	f7fb fc78 	bl	8000e14 <__aeabi_fmul>
 8005524:	4603      	mov	r3, r0
 8005526:	617b      	str	r3, [r7, #20]
        p_rate *= pid_velo_scale;
 8005528:	69b9      	ldr	r1, [r7, #24]
 800552a:	6938      	ldr	r0, [r7, #16]
 800552c:	f7fb fc72 	bl	8000e14 <__aeabi_fmul>
 8005530:	4603      	mov	r3, r0
 8005532:	613b      	str	r3, [r7, #16]

        int s1 = 1500 - ibusChannelData[CH2];
 8005534:	4b37      	ldr	r3, [pc, #220]	@ (8005614 <rate_stabilize+0x1b4>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 800553c:	3304      	adds	r3, #4
 800553e:	60fb      	str	r3, [r7, #12]

        servoL = 1500 - r_rate + s1;// - pitch_pid_filted;
 8005540:	6979      	ldr	r1, [r7, #20]
 8005542:	4839      	ldr	r0, [pc, #228]	@ (8005628 <rate_stabilize+0x1c8>)
 8005544:	f7fb fb5c 	bl	8000c00 <__aeabi_fsub>
 8005548:	4603      	mov	r3, r0
 800554a:	461c      	mov	r4, r3
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f7fb fc0d 	bl	8000d6c <__aeabi_i2f>
 8005552:	4603      	mov	r3, r0
 8005554:	4619      	mov	r1, r3
 8005556:	4620      	mov	r0, r4
 8005558:	f7fb fb54 	bl	8000c04 <__addsf3>
 800555c:	4603      	mov	r3, r0
 800555e:	4618      	mov	r0, r3
 8005560:	f7fb fe5a 	bl	8001218 <__aeabi_f2uiz>
 8005564:	4603      	mov	r3, r0
 8005566:	86fb      	strh	r3, [r7, #54]	@ 0x36
        servoR = 1500 + r_rate + s1;// - pitch_pid_filted;
 8005568:	492f      	ldr	r1, [pc, #188]	@ (8005628 <rate_stabilize+0x1c8>)
 800556a:	6978      	ldr	r0, [r7, #20]
 800556c:	f7fb fb4a 	bl	8000c04 <__addsf3>
 8005570:	4603      	mov	r3, r0
 8005572:	461c      	mov	r4, r3
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f7fb fbf9 	bl	8000d6c <__aeabi_i2f>
 800557a:	4603      	mov	r3, r0
 800557c:	4619      	mov	r1, r3
 800557e:	4620      	mov	r0, r4
 8005580:	f7fb fb40 	bl	8000c04 <__addsf3>
 8005584:	4603      	mov	r3, r0
 8005586:	4618      	mov	r0, r3
 8005588:	f7fb fe46 	bl	8001218 <__aeabi_f2uiz>
 800558c:	4603      	mov	r3, r0
 800558e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005590:	e01d      	b.n	80055ce <rate_stabilize+0x16e>
        
     }else{
        int s1 = 1500 - ibusChannelData[CH1];
 8005592:	4b20      	ldr	r3, [pc, #128]	@ (8005614 <rate_stabilize+0x1b4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 800559a:	3304      	adds	r3, #4
 800559c:	633b      	str	r3, [r7, #48]	@ 0x30
        int s2 = 1500 - ibusChannelData[CH2];
 800559e:	4b1d      	ldr	r3, [pc, #116]	@ (8005614 <rate_stabilize+0x1b4>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 80055a6:	3304      	adds	r3, #4
 80055a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            
        servoL = 1500 + s1 + s2;
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	4413      	add	r3, r2
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80055ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        servoR = 1500 - s1 + s2;
 80055bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055be:	b29a      	uxth	r2, r3
 80055c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80055cc:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }

    servoL = constrain(servoL,SERVO_MIN_PWM,SERVO_MAX_PWM);
 80055ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055d0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80055d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff feb3 	bl	8005344 <constrain>
 80055de:	4603      	mov	r3, r0
 80055e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    servoR = constrain(servoR,SERVO_MIN_PWM,SERVO_MAX_PWM);
 80055e2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80055e4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80055e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff fea9 	bl	8005344 <constrain>
 80055f2:	4603      	mov	r3, r0
 80055f4:	86bb      	strh	r3, [r7, #52]	@ 0x34

    write_pwm_ctrl(ibusChannelData[CH3],servoL,servoR);
 80055f6:	4b07      	ldr	r3, [pc, #28]	@ (8005614 <rate_stabilize+0x1b4>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80055fe:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe f961 	bl	80038c8 <write_pwm_ctrl>

}
 8005606:	bf00      	nop
 8005608:	373c      	adds	r7, #60	@ 0x3c
 800560a:	46bd      	mov	sp, r7
 800560c:	bd90      	pop	{r4, r7, pc}
 800560e:	bf00      	nop
 8005610:	20000be0 	.word	0x20000be0
 8005614:	200000d0 	.word	0x200000d0
 8005618:	200004c8 	.word	0x200004c8
 800561c:	3b656042 	.word	0x3b656042
 8005620:	20000b94 	.word	0x20000b94
 8005624:	20000bb8 	.word	0x20000bb8
 8005628:	44bb8000 	.word	0x44bb8000
 800562c:	00000000 	.word	0x00000000

08005630 <dynamic_speed_esitmate>:
static float Cd = 0.01;
static float weigh = 0.8; // kg

static float velocity = 0;

float dynamic_speed_esitmate(float dt){
 8005630:	b5b0      	push	{r4, r5, r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
    float Thrust = (float)(ibusChannelData[CH3] - 1000) * 0.009;
 8005638:	4b41      	ldr	r3, [pc, #260]	@ (8005740 <dynamic_speed_esitmate+0x110>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8005640:	4618      	mov	r0, r3
 8005642:	f7fb fb8f 	bl	8000d64 <__aeabi_ui2f>
 8005646:	4603      	mov	r3, r0
 8005648:	4618      	mov	r0, r3
 800564a:	f7fa ff55 	bl	80004f8 <__aeabi_f2d>
 800564e:	a33a      	add	r3, pc, #232	@ (adr r3, 8005738 <dynamic_speed_esitmate+0x108>)
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f7fa ffa8 	bl	80005a8 <__aeabi_dmul>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4610      	mov	r0, r2
 800565e:	4619      	mov	r1, r3
 8005660:	f7fb fa7a 	bl	8000b58 <__aeabi_d2f>
 8005664:	4603      	mov	r3, r0
 8005666:	60fb      	str	r3, [r7, #12]
    float acc = (Thrust - sign(velocity)*sq(velocity)*Cd + weigh * gravity * sin_approx(AHRS.pitch*RAD))/weigh;
 8005668:	4b36      	ldr	r3, [pc, #216]	@ (8005744 <dynamic_speed_esitmate+0x114>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f04f 0100 	mov.w	r1, #0
 8005670:	4618      	mov	r0, r3
 8005672:	f7fb fd8b 	bl	800118c <__aeabi_fcmpgt>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <dynamic_speed_esitmate+0x52>
 800567c:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
 8005680:	e000      	b.n	8005684 <dynamic_speed_esitmate+0x54>
 8005682:	4c31      	ldr	r4, [pc, #196]	@ (8005748 <dynamic_speed_esitmate+0x118>)
 8005684:	4b2f      	ldr	r3, [pc, #188]	@ (8005744 <dynamic_speed_esitmate+0x114>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a2e      	ldr	r2, [pc, #184]	@ (8005744 <dynamic_speed_esitmate+0x114>)
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	4611      	mov	r1, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f7fb fbc0 	bl	8000e14 <__aeabi_fmul>
 8005694:	4603      	mov	r3, r0
 8005696:	4619      	mov	r1, r3
 8005698:	4620      	mov	r0, r4
 800569a:	f7fb fbbb 	bl	8000e14 <__aeabi_fmul>
 800569e:	4603      	mov	r3, r0
 80056a0:	461a      	mov	r2, r3
 80056a2:	4b2a      	ldr	r3, [pc, #168]	@ (800574c <dynamic_speed_esitmate+0x11c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4619      	mov	r1, r3
 80056a8:	4610      	mov	r0, r2
 80056aa:	f7fb fbb3 	bl	8000e14 <__aeabi_fmul>
 80056ae:	4603      	mov	r3, r0
 80056b0:	4619      	mov	r1, r3
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7fb faa4 	bl	8000c00 <__aeabi_fsub>
 80056b8:	4603      	mov	r3, r0
 80056ba:	461c      	mov	r4, r3
 80056bc:	4b24      	ldr	r3, [pc, #144]	@ (8005750 <dynamic_speed_esitmate+0x120>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a24      	ldr	r2, [pc, #144]	@ (8005754 <dynamic_speed_esitmate+0x124>)
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	4611      	mov	r1, r2
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fb fba4 	bl	8000e14 <__aeabi_fmul>
 80056cc:	4603      	mov	r3, r0
 80056ce:	461d      	mov	r5, r3
 80056d0:	4b21      	ldr	r3, [pc, #132]	@ (8005758 <dynamic_speed_esitmate+0x128>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	4921      	ldr	r1, [pc, #132]	@ (800575c <dynamic_speed_esitmate+0x12c>)
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fb fb9c 	bl	8000e14 <__aeabi_fmul>
 80056dc:	4603      	mov	r3, r0
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fd fdac 	bl	800323c <sin_approx>
 80056e4:	4603      	mov	r3, r0
 80056e6:	4619      	mov	r1, r3
 80056e8:	4628      	mov	r0, r5
 80056ea:	f7fb fb93 	bl	8000e14 <__aeabi_fmul>
 80056ee:	4603      	mov	r3, r0
 80056f0:	4619      	mov	r1, r3
 80056f2:	4620      	mov	r0, r4
 80056f4:	f7fb fa86 	bl	8000c04 <__addsf3>
 80056f8:	4603      	mov	r3, r0
 80056fa:	461a      	mov	r2, r3
 80056fc:	4b14      	ldr	r3, [pc, #80]	@ (8005750 <dynamic_speed_esitmate+0x120>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f7fb fc3a 	bl	8000f7c <__aeabi_fdiv>
 8005708:	4603      	mov	r3, r0
 800570a:	60bb      	str	r3, [r7, #8]
    velocity += acc*dt;
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	68b8      	ldr	r0, [r7, #8]
 8005710:	f7fb fb80 	bl	8000e14 <__aeabi_fmul>
 8005714:	4603      	mov	r3, r0
 8005716:	461a      	mov	r2, r3
 8005718:	4b0a      	ldr	r3, [pc, #40]	@ (8005744 <dynamic_speed_esitmate+0x114>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4619      	mov	r1, r3
 800571e:	4610      	mov	r0, r2
 8005720:	f7fb fa70 	bl	8000c04 <__addsf3>
 8005724:	4603      	mov	r3, r0
 8005726:	461a      	mov	r2, r3
 8005728:	4b06      	ldr	r3, [pc, #24]	@ (8005744 <dynamic_speed_esitmate+0x114>)
 800572a:	601a      	str	r2, [r3, #0]
    return velocity;
 800572c:	4b05      	ldr	r3, [pc, #20]	@ (8005744 <dynamic_speed_esitmate+0x114>)
 800572e:	681b      	ldr	r3, [r3, #0]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bdb0      	pop	{r4, r5, r7, pc}
 8005738:	8d4fdf3b 	.word	0x8d4fdf3b
 800573c:	3f826e97 	.word	0x3f826e97
 8005740:	200000d0 	.word	0x200000d0
 8005744:	20000be4 	.word	0x20000be4
 8005748:	bf800000 	.word	0xbf800000
 800574c:	20000030 	.word	0x20000030
 8005750:	20000034 	.word	0x20000034
 8005754:	2000002c 	.word	0x2000002c
 8005758:	200004c8 	.word	0x200004c8
 800575c:	3c8efa35 	.word	0x3c8efa35

08005760 <mapI>:
}


#define Feq2Sec(F) (1.0f/F)

static int32_t mapI(int val, int min_in,int max_in,int min_out, int max_out){
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
   int out = (val - min_in)*(max_out - min_out)/(max_in - min_in);
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	6a39      	ldr	r1, [r7, #32]
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	1a8a      	subs	r2, r1, r2
 800577a:	fb03 f202 	mul.w	r2, r3, r2
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	1acb      	subs	r3, r1, r3
 8005784:	fb92 f3f3 	sdiv	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]
}
 800578a:	bf00      	nop
 800578c:	4618      	mov	r0, r3
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr

08005796 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8005796:	b480      	push	{r7}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	4603      	mov	r3, r0
 800579e:	6039      	str	r1, [r7, #0]
 80057a0:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	4053      	eors	r3, r2
 80057ac:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	b25a      	sxtb	r2, r3
 80057b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057b8:	4053      	eors	r3, r2
 80057ba:	b25b      	sxtb	r3, r3
 80057bc:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	0a1b      	lsrs	r3, r3, #8
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	b21a      	sxth	r2, r3
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	b21b      	sxth	r3, r3
 80057ce:	4053      	eors	r3, r2
 80057d0:	b21a      	sxth	r2, r3
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	b21b      	sxth	r3, r3
 80057d8:	4053      	eors	r3, r2
 80057da:	b21a      	sxth	r2, r3
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	091b      	lsrs	r3, r3, #4
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	b21b      	sxth	r3, r3
 80057e4:	4053      	eors	r3, r2
 80057e6:	b21b      	sxth	r3, r3
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	801a      	strh	r2, [r3, #0]
}
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr

080057f8 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005806:	801a      	strh	r2, [r3, #0]
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr

08005812 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 800581e:	f107 030e 	add.w	r3, r7, #14
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff ffe8 	bl	80057f8 <crc_init>
	while (length--) {
 8005828:	e009      	b.n	800583e <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	f107 020e 	add.w	r2, r7, #14
 8005836:	4611      	mov	r1, r2
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff ffac 	bl	8005796 <crc_accumulate>
	while (length--) {
 800583e:	887b      	ldrh	r3, [r7, #2]
 8005840:	1e5a      	subs	r2, r3, #1
 8005842:	807a      	strh	r2, [r7, #2]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f0      	bne.n	800582a <crc_calculate+0x18>
        }
        return crcTmp;
 8005848:	89fb      	ldrh	r3, [r7, #14]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b086      	sub	sp, #24
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	4613      	mov	r3, r2
 800585e:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	617b      	str	r3, [r7, #20]
	while (length--) {
 8005864:	e007      	b.n	8005876 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	617a      	str	r2, [r7, #20]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff ff90 	bl	8005796 <crc_accumulate>
	while (length--) {
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	1e5a      	subs	r2, r3, #1
 800587a:	80fa      	strh	r2, [r7, #6]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f2      	bne.n	8005866 <crc_accumulate_buffer+0x14>
        }
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	4603      	mov	r3, r0
 8005894:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8005896:	79fa      	ldrb	r2, [r7, #7]
 8005898:	4613      	mov	r3, r2
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4a03      	ldr	r2, [pc, #12]	@ (80058b0 <mavlink_get_channel_status+0x24>)
 80058a2:	4413      	add	r3, r2
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	20000dcc 	.word	0x20000dcc

080058b4 <mavlink_finalize_message_chan>:
						      uint8_t chan, uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
 80058b4:	b590      	push	{r4, r7, lr}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	4608      	mov	r0, r1
 80058be:	4611      	mov	r1, r2
 80058c0:	461a      	mov	r2, r3
 80058c2:	4603      	mov	r3, r0
 80058c4:	70fb      	strb	r3, [r7, #3]
 80058c6:	460b      	mov	r3, r1
 80058c8:	70bb      	strb	r3, [r7, #2]
 80058ca:	4613      	mov	r3, r2
 80058cc:	707b      	strb	r3, [r7, #1]
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	22fe      	movs	r2, #254	@ 0xfe
 80058d2:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	7e3a      	ldrb	r2, [r7, #24]
 80058d8:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	78fa      	ldrb	r2, [r7, #3]
 80058de:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	78ba      	ldrb	r2, [r7, #2]
 80058e4:	719a      	strb	r2, [r3, #6]
	// One sequence number per component
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 80058e6:	787b      	ldrb	r3, [r7, #1]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff ffcf 	bl	800588c <mavlink_get_channel_status>
 80058ee:	4603      	mov	r3, r0
 80058f0:	799a      	ldrb	r2, [r3, #6]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 80058f6:	787b      	ldrb	r3, [r7, #1]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff ffc7 	bl	800588c <mavlink_get_channel_status>
 80058fe:	4603      	mov	r3, r0
 8005900:	799c      	ldrb	r4, [r3, #6]
 8005902:	787b      	ldrb	r3, [r7, #1]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff ffc1 	bl	800588c <mavlink_get_channel_status>
 800590a:	4603      	mov	r3, r0
 800590c:	1c62      	adds	r2, r4, #1
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	719a      	strb	r2, [r3, #6]
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3303      	adds	r3, #3
 8005916:	2105      	movs	r1, #5
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff ff7a 	bl	8005812 <crc_calculate>
 800591e:	4603      	mov	r3, r0
 8005920:	461a      	mov	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f103 0108 	add.w	r1, r3, #8
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	78db      	ldrb	r3, [r3, #3]
 8005932:	461a      	mov	r2, r3
 8005934:	f7ff ff8d 	bl	8005852 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &msg->checksum);
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	7f3b      	ldrb	r3, [r7, #28]
 800593c:	4611      	mov	r1, r2
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff ff29 	bl	8005796 <crc_accumulate>
#endif
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	b299      	uxth	r1, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3308      	adds	r3, #8
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	78d2      	ldrb	r2, [r2, #3]
 8005952:	4413      	add	r3, r2
 8005954:	b2ca      	uxtb	r2, r1
 8005956:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	b29b      	uxth	r3, r3
 800595e:	0a1b      	lsrs	r3, r3, #8
 8005960:	b299      	uxth	r1, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f103 0208 	add.w	r2, r3, #8
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	78db      	ldrb	r3, [r3, #3]
 800596c:	3301      	adds	r3, #1
 800596e:	4413      	add	r3, r2
 8005970:	b2ca      	uxtb	r2, r1
 8005972:	701a      	strb	r2, [r3, #0]

	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 8005974:	7e3b      	ldrb	r3, [r7, #24]
 8005976:	b29b      	uxth	r3, r3
 8005978:	3308      	adds	r3, #8
 800597a:	b29b      	uxth	r3, r3
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	bd90      	pop	{r4, r7, pc}

08005984 <mavlink_finalize_message>:
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
#if MAVLINK_CRC_EXTRA
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t length, uint8_t crc_extra)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af02      	add	r7, sp, #8
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	4608      	mov	r0, r1
 800598e:	4611      	mov	r1, r2
 8005990:	461a      	mov	r2, r3
 8005992:	4603      	mov	r3, r0
 8005994:	70fb      	strb	r3, [r7, #3]
 8005996:	460b      	mov	r3, r1
 8005998:	70bb      	strb	r3, [r7, #2]
 800599a:	4613      	mov	r3, r2
 800599c:	707b      	strb	r3, [r7, #1]
	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
 800599e:	78ba      	ldrb	r2, [r7, #2]
 80059a0:	78f9      	ldrb	r1, [r7, #3]
 80059a2:	7c3b      	ldrb	r3, [r7, #16]
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	787b      	ldrb	r3, [r7, #1]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	2300      	movs	r3, #0
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7ff ff81 	bl	80058b4 <mavlink_finalize_message_chan>
 80059b2:	4603      	mov	r3, r0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	1c99      	adds	r1, r3, #2
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	78db      	ldrb	r3, [r3, #3]
 80059ce:	3306      	adds	r3, #6
 80059d0:	461a      	mov	r2, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f00d f958 	bl	8012c88 <memcpy>

	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	78db      	ldrb	r3, [r3, #3]
 80059dc:	3306      	adds	r3, #6
 80059de:	461a      	mov	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4413      	add	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	0a1b      	lsrs	r3, r3, #8
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3301      	adds	r3, #1
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	701a      	strb	r2, [r3, #0]

	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	78db      	ldrb	r3, [r3, #3]
 8005a08:	3308      	adds	r3, #8
 8005a0a:	b29b      	uxth	r3, r3
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <mavlink_msg_heartbeat_pack>:
 * @param system_status System status flag, see MAV_STATE ENUM
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	603a      	str	r2, [r7, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4603      	mov	r3, r0
 8005a20:	71fb      	strb	r3, [r7, #7]
 8005a22:	460b      	mov	r3, r1
 8005a24:	71bb      	strb	r3, [r7, #6]
 8005a26:	4613      	mov	r3, r2
 8005a28:	717b      	strb	r3, [r7, #5]
	_mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
	mavlink_heartbeat_t packet;
	packet.custom_mode = custom_mode;
 8005a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2c:	60fb      	str	r3, [r7, #12]
	packet.type = type;
 8005a2e:	797b      	ldrb	r3, [r7, #5]
 8005a30:	743b      	strb	r3, [r7, #16]
	packet.autopilot = autopilot;
 8005a32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a36:	747b      	strb	r3, [r7, #17]
	packet.base_mode = base_mode;
 8005a38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a3c:	74bb      	strb	r3, [r7, #18]
	packet.system_status = system_status;
 8005a3e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005a42:	74fb      	strb	r3, [r7, #19]
	packet.mavlink_version = 3;
 8005a44:	2303      	movs	r3, #3
 8005a46:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	f107 010c 	add.w	r1, r7, #12
 8005a50:	2209      	movs	r2, #9
 8005a52:	4618      	mov	r0, r3
 8005a54:	f00d f918 	bl	8012c88 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8005a5e:	79ba      	ldrb	r2, [r7, #6]
 8005a60:	79f9      	ldrb	r1, [r7, #7]
 8005a62:	2332      	movs	r3, #50	@ 0x32
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	2309      	movs	r3, #9
 8005a68:	6838      	ldr	r0, [r7, #0]
 8005a6a:	f7ff ff8b 	bl	8005984 <mavlink_finalize_message>
 8005a6e:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <mavlink_msg_attitude_pack>:
 * @param yawspeed Yaw angular speed (rad/s)
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_attitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08e      	sub	sp, #56	@ 0x38
 8005a7c:	af02      	add	r7, sp, #8
 8005a7e:	60ba      	str	r2, [r7, #8]
 8005a80:	607b      	str	r3, [r7, #4]
 8005a82:	4603      	mov	r3, r0
 8005a84:	73fb      	strb	r3, [r7, #15]
 8005a86:	460b      	mov	r3, r1
 8005a88:	73bb      	strb	r3, [r7, #14]
	_mav_put_float(buf, 24, yawspeed);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_ATTITUDE_LEN);
#else
	mavlink_attitude_t packet;
	packet.time_boot_ms = time_boot_ms;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	617b      	str	r3, [r7, #20]
	packet.roll = roll;
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a90:	61bb      	str	r3, [r7, #24]
	packet.pitch = pitch;
 8005a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a94:	61fb      	str	r3, [r7, #28]
	packet.yaw = yaw;
 8005a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a98:	623b      	str	r3, [r7, #32]
	packet.rollspeed = rollspeed;
 8005a9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a9c:	627b      	str	r3, [r7, #36]	@ 0x24
	packet.pitchspeed = pitchspeed;
 8005a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
	packet.yawspeed = yawspeed;
 8005aa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	f107 0114 	add.w	r1, r7, #20
 8005aae:	221c      	movs	r2, #28
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f00d f8e9 	bl	8012c88 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_ATTITUDE;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	221e      	movs	r2, #30
 8005aba:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
 8005abc:	7bba      	ldrb	r2, [r7, #14]
 8005abe:	7bf9      	ldrb	r1, [r7, #15]
 8005ac0:	2327      	movs	r3, #39	@ 0x27
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	231c      	movs	r3, #28
 8005ac6:	68b8      	ldr	r0, [r7, #8]
 8005ac8:	f7ff ff5c 	bl	8005984 <mavlink_finalize_message>
 8005acc:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3730      	adds	r7, #48	@ 0x30
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <mavlink_msg_rc_channels_raw_pack>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rc_channels_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b08c      	sub	sp, #48	@ 0x30
 8005ada:	af02      	add	r7, sp, #8
 8005adc:	60ba      	str	r2, [r7, #8]
 8005ade:	607b      	str	r3, [r7, #4]
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	73fb      	strb	r3, [r7, #15]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint8_t(buf, 21, rssi);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#else
	mavlink_rc_channels_raw_t packet;
	packet.time_boot_ms = time_boot_ms;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	613b      	str	r3, [r7, #16]
	packet.chan1_raw = chan1_raw;
 8005aec:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005aee:	82bb      	strh	r3, [r7, #20]
	packet.chan2_raw = chan2_raw;
 8005af0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005af2:	82fb      	strh	r3, [r7, #22]
	packet.chan3_raw = chan3_raw;
 8005af4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005af6:	833b      	strh	r3, [r7, #24]
	packet.chan4_raw = chan4_raw;
 8005af8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005afc:	837b      	strh	r3, [r7, #26]
	packet.chan5_raw = chan5_raw;
 8005afe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005b02:	83bb      	strh	r3, [r7, #28]
	packet.chan6_raw = chan6_raw;
 8005b04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005b08:	83fb      	strh	r3, [r7, #30]
	packet.chan7_raw = chan7_raw;
 8005b0a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005b0e:	843b      	strh	r3, [r7, #32]
	packet.chan8_raw = chan8_raw;
 8005b10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b14:	847b      	strh	r3, [r7, #34]	@ 0x22
	packet.port = port;
 8005b16:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005b1a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	packet.rssi = rssi;
 8005b1e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8005b22:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	3308      	adds	r3, #8
 8005b2a:	f107 0110 	add.w	r1, r7, #16
 8005b2e:	2216      	movs	r2, #22
 8005b30:	4618      	mov	r0, r3
 8005b32:	f00d f8a9 	bl	8012c88 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_RC_CHANNELS_RAW;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2223      	movs	r2, #35	@ 0x23
 8005b3a:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
 8005b3c:	7bba      	ldrb	r2, [r7, #14]
 8005b3e:	7bf9      	ldrb	r1, [r7, #15]
 8005b40:	23f4      	movs	r3, #244	@ 0xf4
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	2316      	movs	r3, #22
 8005b46:	68b8      	ldr	r0, [r7, #8]
 8005b48:	f7ff ff1c 	bl	8005984 <mavlink_finalize_message>
 8005b4c:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3728      	adds	r7, #40	@ 0x28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <mavlink_msg_vfr_hud_pack>:
 * @param climb Current climb rate in meters/second
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b08c      	sub	sp, #48	@ 0x30
 8005b5a:	af02      	add	r7, sp, #8
 8005b5c:	60ba      	str	r2, [r7, #8]
 8005b5e:	607b      	str	r3, [r7, #4]
 8005b60:	4603      	mov	r3, r0
 8005b62:	73fb      	strb	r3, [r7, #15]
 8005b64:	460b      	mov	r3, r1
 8005b66:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint16_t(buf, 18, throttle);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_VFR_HUD_LEN);
#else
	mavlink_vfr_hud_t packet;
	packet.airspeed = airspeed;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	617b      	str	r3, [r7, #20]
	packet.groundspeed = groundspeed;
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6e:	61bb      	str	r3, [r7, #24]
	packet.alt = alt;
 8005b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b72:	61fb      	str	r3, [r7, #28]
	packet.climb = climb;
 8005b74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b76:	623b      	str	r3, [r7, #32]
	packet.heading = heading;
 8005b78:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005b7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	packet.throttle = throttle;
 8005b7c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005b7e:	84fb      	strh	r3, [r7, #38]	@ 0x26

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	3308      	adds	r3, #8
 8005b84:	f107 0114 	add.w	r1, r7, #20
 8005b88:	2214      	movs	r2, #20
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f00d f87c 	bl	8012c88 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	224a      	movs	r2, #74	@ 0x4a
 8005b94:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 8005b96:	7bba      	ldrb	r2, [r7, #14]
 8005b98:	7bf9      	ldrb	r1, [r7, #15]
 8005b9a:	2314      	movs	r3, #20
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	2314      	movs	r3, #20
 8005ba0:	68b8      	ldr	r0, [r7, #8]
 8005ba2:	f7ff feef 	bl	8005984 <mavlink_finalize_message>
 8005ba6:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3728      	adds	r7, #40	@ 0x28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <mavlinkInit>:
static int isTxcpl;
uint32_t send_time_us;

extern float v_estimate;

void mavlinkInit(uint8_t syss_id, uint8_t comm_id,UART_HandleTypeDef *uartt,uint32_t baudrate){
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60ba      	str	r2, [r7, #8]
 8005bb8:	607b      	str	r3, [r7, #4]
 8005bba:	4603      	mov	r3, r0
 8005bbc:	73fb      	strb	r3, [r7, #15]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	73bb      	strb	r3, [r7, #14]
    isTxcpl = 1;
 8005bc2:	4b10      	ldr	r3, [pc, #64]	@ (8005c04 <mavlinkInit+0x54>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
    index_ =0;
 8005bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8005c08 <mavlinkInit+0x58>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	701a      	strb	r2, [r3, #0]
	sys_id  = syss_id;
 8005bce:	4a0f      	ldr	r2, [pc, #60]	@ (8005c0c <mavlinkInit+0x5c>)
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	7013      	strb	r3, [r2, #0]
    com_id  = comm_id;
 8005bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8005c10 <mavlinkInit+0x60>)
 8005bd6:	7bbb      	ldrb	r3, [r7, #14]
 8005bd8:	7013      	strb	r3, [r2, #0]
	uart = uartt;
 8005bda:	4a0e      	ldr	r2, [pc, #56]	@ (8005c14 <mavlinkInit+0x64>)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	6013      	str	r3, [r2, #0]
    uartt->Init.BaudRate = baudrate;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(uartt);
 8005be6:	68b8      	ldr	r0, [r7, #8]
 8005be8:	f005 fab6 	bl	800b158 <HAL_UART_Init>
	HAL_UART_Receive_IT(uart, &data,1);
 8005bec:	4b09      	ldr	r3, [pc, #36]	@ (8005c14 <mavlinkInit+0x64>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	4909      	ldr	r1, [pc, #36]	@ (8005c18 <mavlinkInit+0x68>)
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f005 fb82 	bl	800b2fe <HAL_UART_Receive_IT>
}
 8005bfa:	bf00      	nop
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000dc8 	.word	0x20000dc8
 8005c08:	20000cf9 	.word	0x20000cf9
 8005c0c:	20000cfa 	.word	0x20000cfa
 8005c10:	20000cfb 	.word	0x20000cfb
 8005c14:	20000cfc 	.word	0x20000cfc
 8005c18:	20000cf8 	.word	0x20000cf8

08005c1c <mavlink_osd>:
*   Attitude
*   GPS 
*   RC signal
*   heartbeat
*/
void mavlink_osd(){
 8005c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c1e:	b093      	sub	sp, #76	@ 0x4c
 8005c20:	af0a      	add	r7, sp, #40	@ 0x28
	static uint8_t count_ = 0;
	static uint8_t count2_ = 0;
	if(isTxcpl)
 8005c22:	4b7c      	ldr	r3, [pc, #496]	@ (8005e14 <mavlink_osd+0x1f8>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 80ef 	beq.w	8005e0a <mavlink_osd+0x1ee>
	{
		switch (count_)
 8005c2c:	4b7a      	ldr	r3, [pc, #488]	@ (8005e18 <mavlink_osd+0x1fc>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d071      	beq.n	8005d18 <mavlink_osd+0xfc>
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	f300 80d8 	bgt.w	8005dea <mavlink_osd+0x1ce>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <mavlink_osd+0x28>
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d02f      	beq.n	8005ca2 <mavlink_osd+0x86>
 8005c42:	e0d2      	b.n	8005dea <mavlink_osd+0x1ce>
		{
		// fast display
		case 0:  
			mavlink_msg_attitude_pack(sys_id,com_id,&msg,0,AHRS.roll*RAD,AHRS.pitch*RAD,0,0,0,0);
 8005c44:	4b75      	ldr	r3, [pc, #468]	@ (8005e1c <mavlink_osd+0x200>)
 8005c46:	781c      	ldrb	r4, [r3, #0]
 8005c48:	4b75      	ldr	r3, [pc, #468]	@ (8005e20 <mavlink_osd+0x204>)
 8005c4a:	781d      	ldrb	r5, [r3, #0]
 8005c4c:	4b75      	ldr	r3, [pc, #468]	@ (8005e24 <mavlink_osd+0x208>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4975      	ldr	r1, [pc, #468]	@ (8005e28 <mavlink_osd+0x20c>)
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fb f8de 	bl	8000e14 <__aeabi_fmul>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	461e      	mov	r6, r3
 8005c5c:	4b71      	ldr	r3, [pc, #452]	@ (8005e24 <mavlink_osd+0x208>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4971      	ldr	r1, [pc, #452]	@ (8005e28 <mavlink_osd+0x20c>)
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fb f8d6 	bl	8000e14 <__aeabi_fmul>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	9305      	str	r3, [sp, #20]
 8005c72:	f04f 0300 	mov.w	r3, #0
 8005c76:	9304      	str	r3, [sp, #16]
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	9303      	str	r3, [sp, #12]
 8005c7e:	f04f 0300 	mov.w	r3, #0
 8005c82:	9302      	str	r3, [sp, #8]
 8005c84:	9201      	str	r2, [sp, #4]
 8005c86:	9600      	str	r6, [sp, #0]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	4a68      	ldr	r2, [pc, #416]	@ (8005e2c <mavlink_osd+0x210>)
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f7ff fef2 	bl	8005a78 <mavlink_msg_attitude_pack>
			count_ ++;
 8005c94:	4b60      	ldr	r3, [pc, #384]	@ (8005e18 <mavlink_osd+0x1fc>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	4b5e      	ldr	r3, [pc, #376]	@ (8005e18 <mavlink_osd+0x1fc>)
 8005c9e:	701a      	strb	r2, [r3, #0]
			break;
 8005ca0:	e0a3      	b.n	8005dea <mavlink_osd+0x1ce>
		case 1:  
			float airspeed = 314;    // osd in km/h
 8005ca2:	4b63      	ldr	r3, [pc, #396]	@ (8005e30 <mavlink_osd+0x214>)
 8005ca4:	61bb      	str	r3, [r7, #24]
			float groundspeed = 57;  // osd in km/h
 8005ca6:	4b63      	ldr	r3, [pc, #396]	@ (8005e34 <mavlink_osd+0x218>)
 8005ca8:	617b      	str	r3, [r7, #20]
			uint16_t throttle = (ibusChannelData[CH3] - 1000)*0.1f;
 8005caa:	4b63      	ldr	r3, [pc, #396]	@ (8005e38 <mavlink_osd+0x21c>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fb f856 	bl	8000d64 <__aeabi_ui2f>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	4960      	ldr	r1, [pc, #384]	@ (8005e3c <mavlink_osd+0x220>)
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fb f8a9 	bl	8000e14 <__aeabi_fmul>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fb faa7 	bl	8001218 <__aeabi_f2uiz>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	827b      	strh	r3, [r7, #18]
			float alt = 333;
 8005cce:	4b5c      	ldr	r3, [pc, #368]	@ (8005e40 <mavlink_osd+0x224>)
 8005cd0:	60fb      	str	r3, [r7, #12]
			float climb = 5;
 8005cd2:	4b5c      	ldr	r3, [pc, #368]	@ (8005e44 <mavlink_osd+0x228>)
 8005cd4:	60bb      	str	r3, [r7, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 8005cd6:	4b51      	ldr	r3, [pc, #324]	@ (8005e1c <mavlink_osd+0x200>)
 8005cd8:	781c      	ldrb	r4, [r3, #0]
 8005cda:	4b51      	ldr	r3, [pc, #324]	@ (8005e20 <mavlink_osd+0x204>)
 8005cdc:	781d      	ldrb	r5, [r3, #0]
						airspeed, groundspeed,AHRS.yaw, throttle,alt, climb);
 8005cde:	4b51      	ldr	r3, [pc, #324]	@ (8005e24 <mavlink_osd+0x208>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fb fa72 	bl	80011cc <__aeabi_f2iz>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	b21b      	sxth	r3, r3
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	9204      	str	r2, [sp, #16]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	9203      	str	r2, [sp, #12]
 8005cf4:	8a7a      	ldrh	r2, [r7, #18]
 8005cf6:	9202      	str	r2, [sp, #8]
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	4a4a      	ldr	r2, [pc, #296]	@ (8005e2c <mavlink_osd+0x210>)
 8005d02:	4629      	mov	r1, r5
 8005d04:	4620      	mov	r0, r4
 8005d06:	f7ff ff26 	bl	8005b56 <mavlink_msg_vfr_hud_pack>
			count_ ++;
 8005d0a:	4b43      	ldr	r3, [pc, #268]	@ (8005e18 <mavlink_osd+0x1fc>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	4b41      	ldr	r3, [pc, #260]	@ (8005e18 <mavlink_osd+0x1fc>)
 8005d14:	701a      	strb	r2, [r3, #0]
			break;
 8005d16:	e068      	b.n	8005dea <mavlink_osd+0x1ce>
		case 2:
			switch (count2_)
 8005d18:	4b4b      	ldr	r3, [pc, #300]	@ (8005e48 <mavlink_osd+0x22c>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d046      	beq.n	8005dae <mavlink_osd+0x192>
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	dc5f      	bgt.n	8005de4 <mavlink_osd+0x1c8>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <mavlink_osd+0x112>
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d007      	beq.n	8005d3c <mavlink_osd+0x120>
 8005d2c:	e05a      	b.n	8005de4 <mavlink_osd+0x1c8>
			{
			case 0:
				//mavlink_msg_gps_raw_int_pack(sys_id,com_id,&msg,
				//						0, _gps.fix,_gps.position[0],_gps.position[1],1200,
				//						1 , 1 , 2200,0 ,abs(v_estimate));
				count2_ ++;
 8005d2e:	4b46      	ldr	r3, [pc, #280]	@ (8005e48 <mavlink_osd+0x22c>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	3301      	adds	r3, #1
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	4b44      	ldr	r3, [pc, #272]	@ (8005e48 <mavlink_osd+0x22c>)
 8005d38:	701a      	strb	r2, [r3, #0]

				break;
 8005d3a:	e053      	b.n	8005de4 <mavlink_osd+0x1c8>
			case 1:
			    uint8_t rssi = mapI(ibusChannelData[CH11],1000,2000,0,255);
 8005d3c:	4b3e      	ldr	r3, [pc, #248]	@ (8005e38 <mavlink_osd+0x21c>)
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d40:	4618      	mov	r0, r3
 8005d42:	23ff      	movs	r3, #255	@ 0xff
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	2300      	movs	r3, #0
 8005d48:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005d4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005d50:	f7ff fd06 	bl	8005760 <mapI>
 8005d54:	4603      	mov	r3, r0
 8005d56:	773b      	strb	r3, [r7, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8005d58:	4b30      	ldr	r3, [pc, #192]	@ (8005e1c <mavlink_osd+0x200>)
 8005d5a:	781c      	ldrb	r4, [r3, #0]
 8005d5c:	4b30      	ldr	r3, [pc, #192]	@ (8005e20 <mavlink_osd+0x204>)
 8005d5e:	781d      	ldrb	r5, [r3, #0]
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 8005d60:	4b35      	ldr	r3, [pc, #212]	@ (8005e38 <mavlink_osd+0x21c>)
 8005d62:	68db      	ldr	r3, [r3, #12]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8005d64:	b29b      	uxth	r3, r3
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 8005d66:	4a34      	ldr	r2, [pc, #208]	@ (8005e38 <mavlink_osd+0x21c>)
 8005d68:	6992      	ldr	r2, [r2, #24]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8005d6a:	b292      	uxth	r2, r2
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 8005d6c:	4932      	ldr	r1, [pc, #200]	@ (8005e38 <mavlink_osd+0x21c>)
 8005d6e:	69c9      	ldr	r1, [r1, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8005d70:	b289      	uxth	r1, r1
 8005d72:	7f38      	ldrb	r0, [r7, #28]
 8005d74:	9009      	str	r0, [sp, #36]	@ 0x24
 8005d76:	2000      	movs	r0, #0
 8005d78:	9008      	str	r0, [sp, #32]
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	9007      	str	r0, [sp, #28]
 8005d7e:	2000      	movs	r0, #0
 8005d80:	9006      	str	r0, [sp, #24]
 8005d82:	2000      	movs	r0, #0
 8005d84:	9005      	str	r0, [sp, #20]
 8005d86:	2000      	movs	r0, #0
 8005d88:	9004      	str	r0, [sp, #16]
 8005d8a:	9103      	str	r1, [sp, #12]
 8005d8c:	9202      	str	r2, [sp, #8]
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	2300      	movs	r3, #0
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	2300      	movs	r3, #0
 8005d96:	4a25      	ldr	r2, [pc, #148]	@ (8005e2c <mavlink_osd+0x210>)
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f7ff fe9b 	bl	8005ad6 <mavlink_msg_rc_channels_raw_pack>
						0,0,0,
						0,0,rssi);
				count2_ ++;
 8005da0:	4b29      	ldr	r3, [pc, #164]	@ (8005e48 <mavlink_osd+0x22c>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	3301      	adds	r3, #1
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	4b27      	ldr	r3, [pc, #156]	@ (8005e48 <mavlink_osd+0x22c>)
 8005daa:	701a      	strb	r2, [r3, #0]
				break;
 8005dac:	e01a      	b.n	8005de4 <mavlink_osd+0x1c8>
			case 2: // send heartbeat
				uint8_t type = MAV_TYPE_FIXED_WING;
 8005dae:	2301      	movs	r3, #1
 8005db0:	77fb      	strb	r3, [r7, #31]
				uint8_t autopilot = MAV_AUTOPILOT_GENERIC;
 8005db2:	2300      	movs	r3, #0
 8005db4:	77bb      	strb	r3, [r7, #30]
				uint8_t base_mode = MAV_MODE_FLAG_TEST_ENABLED;
 8005db6:	2302      	movs	r3, #2
 8005db8:	777b      	strb	r3, [r7, #29]
				mavlink_msg_heartbeat_pack(sys_id,com_id,&msg,type,autopilot,base_mode,base_mode, MAV_STATE_UNINIT);
 8005dba:	4b18      	ldr	r3, [pc, #96]	@ (8005e1c <mavlink_osd+0x200>)
 8005dbc:	7818      	ldrb	r0, [r3, #0]
 8005dbe:	4b18      	ldr	r3, [pc, #96]	@ (8005e20 <mavlink_osd+0x204>)
 8005dc0:	7819      	ldrb	r1, [r3, #0]
 8005dc2:	7f7b      	ldrb	r3, [r7, #29]
 8005dc4:	7ffa      	ldrb	r2, [r7, #31]
 8005dc6:	2400      	movs	r4, #0
 8005dc8:	9403      	str	r4, [sp, #12]
 8005dca:	9302      	str	r3, [sp, #8]
 8005dcc:	7f7b      	ldrb	r3, [r7, #29]
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	7fbb      	ldrb	r3, [r7, #30]
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	4a15      	ldr	r2, [pc, #84]	@ (8005e2c <mavlink_osd+0x210>)
 8005dd8:	f7ff fe1c 	bl	8005a14 <mavlink_msg_heartbeat_pack>
				count2_ = 0;
 8005ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8005e48 <mavlink_osd+0x22c>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	701a      	strb	r2, [r3, #0]
				break;
 8005de2:	bf00      	nop
				                                     0,q,0,0,0,thrust);
		        count2_ = 0;
				break;
			*/
			}
			count_ = 0;
 8005de4:	4b0c      	ldr	r3, [pc, #48]	@ (8005e18 <mavlink_osd+0x1fc>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	701a      	strb	r2, [r3, #0]
		}
		uint16_t len_data = mavlink_msg_to_send_buffer(buffer__,&msg);
 8005dea:	4910      	ldr	r1, [pc, #64]	@ (8005e2c <mavlink_osd+0x210>)
 8005dec:	4817      	ldr	r0, [pc, #92]	@ (8005e4c <mavlink_osd+0x230>)
 8005dee:	f7ff fde5 	bl	80059bc <mavlink_msg_to_send_buffer>
 8005df2:	4603      	mov	r3, r0
 8005df4:	80fb      	strh	r3, [r7, #6]
	    HAL_UART_Transmit_DMA(uart,buffer__,len_data);
 8005df6:	4b16      	ldr	r3, [pc, #88]	@ (8005e50 <mavlink_osd+0x234>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	88fa      	ldrh	r2, [r7, #6]
 8005dfc:	4913      	ldr	r1, [pc, #76]	@ (8005e4c <mavlink_osd+0x230>)
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f005 faa2 	bl	800b348 <HAL_UART_Transmit_DMA>
	    isTxcpl = 0;
 8005e04:	4b03      	ldr	r3, [pc, #12]	@ (8005e14 <mavlink_osd+0x1f8>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]
	}
}
 8005e0a:	bf00      	nop
 8005e0c:	3724      	adds	r7, #36	@ 0x24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000dc8 	.word	0x20000dc8
 8005e18:	20000dfc 	.word	0x20000dfc
 8005e1c:	20000cfa 	.word	0x20000cfa
 8005e20:	20000cfb 	.word	0x20000cfb
 8005e24:	200004c8 	.word	0x200004c8
 8005e28:	3c8efa35 	.word	0x3c8efa35
 8005e2c:	20000be8 	.word	0x20000be8
 8005e30:	439d0000 	.word	0x439d0000
 8005e34:	42640000 	.word	0x42640000
 8005e38:	200000d0 	.word	0x200000d0
 8005e3c:	3dcccccd 	.word	0x3dcccccd
 8005e40:	43a68000 	.word	0x43a68000
 8005e44:	40a00000 	.word	0x40a00000
 8005e48:	20000dfd 	.word	0x20000dfd
 8005e4c:	20000d00 	.word	0x20000d00
 8005e50:	20000cfc 	.word	0x20000cfc

08005e54 <mavlink_tx_cpl_callback>:
/*
 * 
 */
uint32_t temp;
void mavlink_tx_cpl_callback()
{   
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
	//send_time_us = millis() - temp;
	//temp = millis();
	isTxcpl = 1;
 8005e58:	4b03      	ldr	r3, [pc, #12]	@ (8005e68 <mavlink_tx_cpl_callback+0x14>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
}
 8005e5e:	bf00      	nop
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	20000dc8 	.word	0x20000dc8

08005e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e70:	4b08      	ldr	r3, [pc, #32]	@ (8005e94 <HAL_Init+0x28>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a07      	ldr	r2, [pc, #28]	@ (8005e94 <HAL_Init+0x28>)
 8005e76:	f043 0310 	orr.w	r3, r3, #16
 8005e7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e7c:	2003      	movs	r0, #3
 8005e7e:	f000 f8f5 	bl	800606c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e82:	200f      	movs	r0, #15
 8005e84:	f7fe fc10 	bl	80046a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e88:	f7fe fbd6 	bl	8004638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40022000 	.word	0x40022000

08005e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e9c:	4b05      	ldr	r3, [pc, #20]	@ (8005eb4 <HAL_IncTick+0x1c>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4b05      	ldr	r3, [pc, #20]	@ (8005eb8 <HAL_IncTick+0x20>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	4a03      	ldr	r2, [pc, #12]	@ (8005eb8 <HAL_IncTick+0x20>)
 8005eaa:	6013      	str	r3, [r2, #0]
}
 8005eac:	bf00      	nop
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bc80      	pop	{r7}
 8005eb2:	4770      	bx	lr
 8005eb4:	2000003c 	.word	0x2000003c
 8005eb8:	20000e00 	.word	0x20000e00

08005ebc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8005ec0:	4b02      	ldr	r3, [pc, #8]	@ (8005ecc <HAL_GetTick+0x10>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr
 8005ecc:	20000e00 	.word	0x20000e00

08005ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ed8:	f7ff fff0 	bl	8005ebc <HAL_GetTick>
 8005edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee8:	d005      	beq.n	8005ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005eea:	4b0a      	ldr	r3, [pc, #40]	@ (8005f14 <HAL_Delay+0x44>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ef6:	bf00      	nop
 8005ef8:	f7ff ffe0 	bl	8005ebc <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d8f7      	bhi.n	8005ef8 <HAL_Delay+0x28>
  {
  }
}
 8005f08:	bf00      	nop
 8005f0a:	bf00      	nop
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	2000003c 	.word	0x2000003c

08005f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f28:	4b0c      	ldr	r3, [pc, #48]	@ (8005f5c <__NVIC_SetPriorityGrouping+0x44>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f34:	4013      	ands	r3, r2
 8005f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f4a:	4a04      	ldr	r2, [pc, #16]	@ (8005f5c <__NVIC_SetPriorityGrouping+0x44>)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	60d3      	str	r3, [r2, #12]
}
 8005f50:	bf00      	nop
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	e000ed00 	.word	0xe000ed00

08005f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f64:	4b04      	ldr	r3, [pc, #16]	@ (8005f78 <__NVIC_GetPriorityGrouping+0x18>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	0a1b      	lsrs	r3, r3, #8
 8005f6a:	f003 0307 	and.w	r3, r3, #7
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	e000ed00 	.word	0xe000ed00

08005f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	db0b      	blt.n	8005fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	f003 021f 	and.w	r2, r3, #31
 8005f94:	4906      	ldr	r1, [pc, #24]	@ (8005fb0 <__NVIC_EnableIRQ+0x34>)
 8005f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	2001      	movs	r0, #1
 8005f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8005fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr
 8005fb0:	e000e100 	.word	0xe000e100

08005fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	6039      	str	r1, [r7, #0]
 8005fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	db0a      	blt.n	8005fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	490c      	ldr	r1, [pc, #48]	@ (8006000 <__NVIC_SetPriority+0x4c>)
 8005fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd2:	0112      	lsls	r2, r2, #4
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fdc:	e00a      	b.n	8005ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	4908      	ldr	r1, [pc, #32]	@ (8006004 <__NVIC_SetPriority+0x50>)
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	3b04      	subs	r3, #4
 8005fec:	0112      	lsls	r2, r2, #4
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	761a      	strb	r2, [r3, #24]
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bc80      	pop	{r7}
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	e000e100 	.word	0xe000e100
 8006004:	e000ed00 	.word	0xe000ed00

08006008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006008:	b480      	push	{r7}
 800600a:	b089      	sub	sp, #36	@ 0x24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f1c3 0307 	rsb	r3, r3, #7
 8006022:	2b04      	cmp	r3, #4
 8006024:	bf28      	it	cs
 8006026:	2304      	movcs	r3, #4
 8006028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	3304      	adds	r3, #4
 800602e:	2b06      	cmp	r3, #6
 8006030:	d902      	bls.n	8006038 <NVIC_EncodePriority+0x30>
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	3b03      	subs	r3, #3
 8006036:	e000      	b.n	800603a <NVIC_EncodePriority+0x32>
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800603c:	f04f 32ff 	mov.w	r2, #4294967295
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	fa02 f303 	lsl.w	r3, r2, r3
 8006046:	43da      	mvns	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	401a      	ands	r2, r3
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006050:	f04f 31ff 	mov.w	r1, #4294967295
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	fa01 f303 	lsl.w	r3, r1, r3
 800605a:	43d9      	mvns	r1, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006060:	4313      	orrs	r3, r2
         );
}
 8006062:	4618      	mov	r0, r3
 8006064:	3724      	adds	r7, #36	@ 0x24
 8006066:	46bd      	mov	sp, r7
 8006068:	bc80      	pop	{r7}
 800606a:	4770      	bx	lr

0800606c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7ff ff4f 	bl	8005f18 <__NVIC_SetPriorityGrouping>
}
 800607a:	bf00      	nop
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006082:	b580      	push	{r7, lr}
 8006084:	b086      	sub	sp, #24
 8006086:	af00      	add	r7, sp, #0
 8006088:	4603      	mov	r3, r0
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	607a      	str	r2, [r7, #4]
 800608e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006094:	f7ff ff64 	bl	8005f60 <__NVIC_GetPriorityGrouping>
 8006098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	6978      	ldr	r0, [r7, #20]
 80060a0:	f7ff ffb2 	bl	8006008 <NVIC_EncodePriority>
 80060a4:	4602      	mov	r2, r0
 80060a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060aa:	4611      	mov	r1, r2
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff ff81 	bl	8005fb4 <__NVIC_SetPriority>
}
 80060b2:	bf00      	nop
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	4603      	mov	r3, r0
 80060c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff ff57 	bl	8005f7c <__NVIC_EnableIRQ>
}
 80060ce:	bf00      	nop
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e059      	b.n	80061a2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	4b2d      	ldr	r3, [pc, #180]	@ (80061ac <HAL_DMA_Init+0xd4>)
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d80f      	bhi.n	800611a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	4b2b      	ldr	r3, [pc, #172]	@ (80061b0 <HAL_DMA_Init+0xd8>)
 8006102:	4413      	add	r3, r2
 8006104:	4a2b      	ldr	r2, [pc, #172]	@ (80061b4 <HAL_DMA_Init+0xdc>)
 8006106:	fba2 2303 	umull	r2, r3, r2, r3
 800610a:	091b      	lsrs	r3, r3, #4
 800610c:	009a      	lsls	r2, r3, #2
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a28      	ldr	r2, [pc, #160]	@ (80061b8 <HAL_DMA_Init+0xe0>)
 8006116:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006118:	e00e      	b.n	8006138 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	4b26      	ldr	r3, [pc, #152]	@ (80061bc <HAL_DMA_Init+0xe4>)
 8006122:	4413      	add	r3, r2
 8006124:	4a23      	ldr	r2, [pc, #140]	@ (80061b4 <HAL_DMA_Init+0xdc>)
 8006126:	fba2 2303 	umull	r2, r3, r2, r3
 800612a:	091b      	lsrs	r3, r3, #4
 800612c:	009a      	lsls	r2, r3, #2
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a22      	ldr	r2, [pc, #136]	@ (80061c0 <HAL_DMA_Init+0xe8>)
 8006136:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800614e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006152:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800615c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006168:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006174:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr
 80061ac:	40020407 	.word	0x40020407
 80061b0:	bffdfff8 	.word	0xbffdfff8
 80061b4:	cccccccd 	.word	0xcccccccd
 80061b8:	40020000 	.word	0x40020000
 80061bc:	bffdfbf8 	.word	0xbffdfbf8
 80061c0:	40020400 	.word	0x40020400

080061c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_DMA_Start_IT+0x20>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e04b      	b.n	800627c <HAL_DMA_Start_IT+0xb8>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d13a      	bne.n	800626e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0201 	bic.w	r2, r2, #1
 8006214:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 fbb1 	bl	8006984 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d008      	beq.n	800623c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 020e 	orr.w	r2, r2, #14
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	e00f      	b.n	800625c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0204 	bic.w	r2, r2, #4
 800624a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 020a 	orr.w	r2, r2, #10
 800625a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	e005      	b.n	800627a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006276:	2302      	movs	r3, #2
 8006278:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800627a:	7dfb      	ldrb	r3, [r7, #23]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d008      	beq.n	80062ae <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2204      	movs	r2, #4
 80062a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e020      	b.n	80062f0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 020e 	bic.w	r2, r2, #14
 80062bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0201 	bic.w	r2, r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d6:	2101      	movs	r1, #1
 80062d8:	fa01 f202 	lsl.w	r2, r1, r2
 80062dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr
	...

080062fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d005      	beq.n	8006320 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2204      	movs	r2, #4
 8006318:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
 800631e:	e0d6      	b.n	80064ce <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 020e 	bic.w	r2, r2, #14
 800632e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0201 	bic.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	461a      	mov	r2, r3
 8006346:	4b64      	ldr	r3, [pc, #400]	@ (80064d8 <HAL_DMA_Abort_IT+0x1dc>)
 8006348:	429a      	cmp	r2, r3
 800634a:	d958      	bls.n	80063fe <HAL_DMA_Abort_IT+0x102>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a62      	ldr	r2, [pc, #392]	@ (80064dc <HAL_DMA_Abort_IT+0x1e0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d04f      	beq.n	80063f6 <HAL_DMA_Abort_IT+0xfa>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a61      	ldr	r2, [pc, #388]	@ (80064e0 <HAL_DMA_Abort_IT+0x1e4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d048      	beq.n	80063f2 <HAL_DMA_Abort_IT+0xf6>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a5f      	ldr	r2, [pc, #380]	@ (80064e4 <HAL_DMA_Abort_IT+0x1e8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d040      	beq.n	80063ec <HAL_DMA_Abort_IT+0xf0>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a5e      	ldr	r2, [pc, #376]	@ (80064e8 <HAL_DMA_Abort_IT+0x1ec>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d038      	beq.n	80063e6 <HAL_DMA_Abort_IT+0xea>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a5c      	ldr	r2, [pc, #368]	@ (80064ec <HAL_DMA_Abort_IT+0x1f0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d030      	beq.n	80063e0 <HAL_DMA_Abort_IT+0xe4>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a5b      	ldr	r2, [pc, #364]	@ (80064f0 <HAL_DMA_Abort_IT+0x1f4>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d028      	beq.n	80063da <HAL_DMA_Abort_IT+0xde>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a52      	ldr	r2, [pc, #328]	@ (80064d8 <HAL_DMA_Abort_IT+0x1dc>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d020      	beq.n	80063d4 <HAL_DMA_Abort_IT+0xd8>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a57      	ldr	r2, [pc, #348]	@ (80064f4 <HAL_DMA_Abort_IT+0x1f8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d019      	beq.n	80063d0 <HAL_DMA_Abort_IT+0xd4>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a55      	ldr	r2, [pc, #340]	@ (80064f8 <HAL_DMA_Abort_IT+0x1fc>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d012      	beq.n	80063cc <HAL_DMA_Abort_IT+0xd0>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a54      	ldr	r2, [pc, #336]	@ (80064fc <HAL_DMA_Abort_IT+0x200>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00a      	beq.n	80063c6 <HAL_DMA_Abort_IT+0xca>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a52      	ldr	r2, [pc, #328]	@ (8006500 <HAL_DMA_Abort_IT+0x204>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d102      	bne.n	80063c0 <HAL_DMA_Abort_IT+0xc4>
 80063ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80063be:	e01b      	b.n	80063f8 <HAL_DMA_Abort_IT+0xfc>
 80063c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80063c4:	e018      	b.n	80063f8 <HAL_DMA_Abort_IT+0xfc>
 80063c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80063ca:	e015      	b.n	80063f8 <HAL_DMA_Abort_IT+0xfc>
 80063cc:	2310      	movs	r3, #16
 80063ce:	e013      	b.n	80063f8 <HAL_DMA_Abort_IT+0xfc>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e011      	b.n	80063f8 <HAL_DMA_Abort_IT+0xfc>
 80063d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063d8:	e00e      	b.n	80063f8 <HAL_DMA_Abort_IT+0xfc>
 80063da:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80063de:	e00b      	b.n	80063f8 <HAL_DMA_Abort_IT+0xfc>
 80063e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80063e4:	e008      	b.n	80063f8 <HAL_DMA_Abort_IT+0xfc>
 80063e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80063ea:	e005      	b.n	80063f8 <HAL_DMA_Abort_IT+0xfc>
 80063ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80063f0:	e002      	b.n	80063f8 <HAL_DMA_Abort_IT+0xfc>
 80063f2:	2310      	movs	r3, #16
 80063f4:	e000      	b.n	80063f8 <HAL_DMA_Abort_IT+0xfc>
 80063f6:	2301      	movs	r3, #1
 80063f8:	4a42      	ldr	r2, [pc, #264]	@ (8006504 <HAL_DMA_Abort_IT+0x208>)
 80063fa:	6053      	str	r3, [r2, #4]
 80063fc:	e057      	b.n	80064ae <HAL_DMA_Abort_IT+0x1b2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a36      	ldr	r2, [pc, #216]	@ (80064dc <HAL_DMA_Abort_IT+0x1e0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d04f      	beq.n	80064a8 <HAL_DMA_Abort_IT+0x1ac>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a34      	ldr	r2, [pc, #208]	@ (80064e0 <HAL_DMA_Abort_IT+0x1e4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d048      	beq.n	80064a4 <HAL_DMA_Abort_IT+0x1a8>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a33      	ldr	r2, [pc, #204]	@ (80064e4 <HAL_DMA_Abort_IT+0x1e8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d040      	beq.n	800649e <HAL_DMA_Abort_IT+0x1a2>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a31      	ldr	r2, [pc, #196]	@ (80064e8 <HAL_DMA_Abort_IT+0x1ec>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d038      	beq.n	8006498 <HAL_DMA_Abort_IT+0x19c>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a30      	ldr	r2, [pc, #192]	@ (80064ec <HAL_DMA_Abort_IT+0x1f0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d030      	beq.n	8006492 <HAL_DMA_Abort_IT+0x196>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a2e      	ldr	r2, [pc, #184]	@ (80064f0 <HAL_DMA_Abort_IT+0x1f4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d028      	beq.n	800648c <HAL_DMA_Abort_IT+0x190>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a26      	ldr	r2, [pc, #152]	@ (80064d8 <HAL_DMA_Abort_IT+0x1dc>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d020      	beq.n	8006486 <HAL_DMA_Abort_IT+0x18a>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a2a      	ldr	r2, [pc, #168]	@ (80064f4 <HAL_DMA_Abort_IT+0x1f8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d019      	beq.n	8006482 <HAL_DMA_Abort_IT+0x186>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a29      	ldr	r2, [pc, #164]	@ (80064f8 <HAL_DMA_Abort_IT+0x1fc>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d012      	beq.n	800647e <HAL_DMA_Abort_IT+0x182>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a27      	ldr	r2, [pc, #156]	@ (80064fc <HAL_DMA_Abort_IT+0x200>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d00a      	beq.n	8006478 <HAL_DMA_Abort_IT+0x17c>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a26      	ldr	r2, [pc, #152]	@ (8006500 <HAL_DMA_Abort_IT+0x204>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d102      	bne.n	8006472 <HAL_DMA_Abort_IT+0x176>
 800646c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006470:	e01b      	b.n	80064aa <HAL_DMA_Abort_IT+0x1ae>
 8006472:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006476:	e018      	b.n	80064aa <HAL_DMA_Abort_IT+0x1ae>
 8006478:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800647c:	e015      	b.n	80064aa <HAL_DMA_Abort_IT+0x1ae>
 800647e:	2310      	movs	r3, #16
 8006480:	e013      	b.n	80064aa <HAL_DMA_Abort_IT+0x1ae>
 8006482:	2301      	movs	r3, #1
 8006484:	e011      	b.n	80064aa <HAL_DMA_Abort_IT+0x1ae>
 8006486:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800648a:	e00e      	b.n	80064aa <HAL_DMA_Abort_IT+0x1ae>
 800648c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006490:	e00b      	b.n	80064aa <HAL_DMA_Abort_IT+0x1ae>
 8006492:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006496:	e008      	b.n	80064aa <HAL_DMA_Abort_IT+0x1ae>
 8006498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800649c:	e005      	b.n	80064aa <HAL_DMA_Abort_IT+0x1ae>
 800649e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80064a2:	e002      	b.n	80064aa <HAL_DMA_Abort_IT+0x1ae>
 80064a4:	2310      	movs	r3, #16
 80064a6:	e000      	b.n	80064aa <HAL_DMA_Abort_IT+0x1ae>
 80064a8:	2301      	movs	r3, #1
 80064aa:	4a17      	ldr	r2, [pc, #92]	@ (8006508 <HAL_DMA_Abort_IT+0x20c>)
 80064ac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	4798      	blx	r3
    } 
  }
  return status;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40020080 	.word	0x40020080
 80064dc:	40020008 	.word	0x40020008
 80064e0:	4002001c 	.word	0x4002001c
 80064e4:	40020030 	.word	0x40020030
 80064e8:	40020044 	.word	0x40020044
 80064ec:	40020058 	.word	0x40020058
 80064f0:	4002006c 	.word	0x4002006c
 80064f4:	40020408 	.word	0x40020408
 80064f8:	4002041c 	.word	0x4002041c
 80064fc:	40020430 	.word	0x40020430
 8006500:	40020444 	.word	0x40020444
 8006504:	40020400 	.word	0x40020400
 8006508:	40020000 	.word	0x40020000

0800650c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006528:	2204      	movs	r2, #4
 800652a:	409a      	lsls	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4013      	ands	r3, r2
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 80f1 	beq.w	8006718 <HAL_DMA_IRQHandler+0x20c>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 80eb 	beq.w	8006718 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b00      	cmp	r3, #0
 800654e:	d107      	bne.n	8006560 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0204 	bic.w	r2, r2, #4
 800655e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	461a      	mov	r2, r3
 8006566:	4b5f      	ldr	r3, [pc, #380]	@ (80066e4 <HAL_DMA_IRQHandler+0x1d8>)
 8006568:	429a      	cmp	r2, r3
 800656a:	d958      	bls.n	800661e <HAL_DMA_IRQHandler+0x112>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a5d      	ldr	r2, [pc, #372]	@ (80066e8 <HAL_DMA_IRQHandler+0x1dc>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d04f      	beq.n	8006616 <HAL_DMA_IRQHandler+0x10a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a5c      	ldr	r2, [pc, #368]	@ (80066ec <HAL_DMA_IRQHandler+0x1e0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d048      	beq.n	8006612 <HAL_DMA_IRQHandler+0x106>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a5a      	ldr	r2, [pc, #360]	@ (80066f0 <HAL_DMA_IRQHandler+0x1e4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d040      	beq.n	800660c <HAL_DMA_IRQHandler+0x100>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a59      	ldr	r2, [pc, #356]	@ (80066f4 <HAL_DMA_IRQHandler+0x1e8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d038      	beq.n	8006606 <HAL_DMA_IRQHandler+0xfa>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a57      	ldr	r2, [pc, #348]	@ (80066f8 <HAL_DMA_IRQHandler+0x1ec>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d030      	beq.n	8006600 <HAL_DMA_IRQHandler+0xf4>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a56      	ldr	r2, [pc, #344]	@ (80066fc <HAL_DMA_IRQHandler+0x1f0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d028      	beq.n	80065fa <HAL_DMA_IRQHandler+0xee>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a4d      	ldr	r2, [pc, #308]	@ (80066e4 <HAL_DMA_IRQHandler+0x1d8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d020      	beq.n	80065f4 <HAL_DMA_IRQHandler+0xe8>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a52      	ldr	r2, [pc, #328]	@ (8006700 <HAL_DMA_IRQHandler+0x1f4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d019      	beq.n	80065f0 <HAL_DMA_IRQHandler+0xe4>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a50      	ldr	r2, [pc, #320]	@ (8006704 <HAL_DMA_IRQHandler+0x1f8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d012      	beq.n	80065ec <HAL_DMA_IRQHandler+0xe0>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a4f      	ldr	r2, [pc, #316]	@ (8006708 <HAL_DMA_IRQHandler+0x1fc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00a      	beq.n	80065e6 <HAL_DMA_IRQHandler+0xda>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a4d      	ldr	r2, [pc, #308]	@ (800670c <HAL_DMA_IRQHandler+0x200>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d102      	bne.n	80065e0 <HAL_DMA_IRQHandler+0xd4>
 80065da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80065de:	e01b      	b.n	8006618 <HAL_DMA_IRQHandler+0x10c>
 80065e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80065e4:	e018      	b.n	8006618 <HAL_DMA_IRQHandler+0x10c>
 80065e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065ea:	e015      	b.n	8006618 <HAL_DMA_IRQHandler+0x10c>
 80065ec:	2340      	movs	r3, #64	@ 0x40
 80065ee:	e013      	b.n	8006618 <HAL_DMA_IRQHandler+0x10c>
 80065f0:	2304      	movs	r3, #4
 80065f2:	e011      	b.n	8006618 <HAL_DMA_IRQHandler+0x10c>
 80065f4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80065f8:	e00e      	b.n	8006618 <HAL_DMA_IRQHandler+0x10c>
 80065fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80065fe:	e00b      	b.n	8006618 <HAL_DMA_IRQHandler+0x10c>
 8006600:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006604:	e008      	b.n	8006618 <HAL_DMA_IRQHandler+0x10c>
 8006606:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800660a:	e005      	b.n	8006618 <HAL_DMA_IRQHandler+0x10c>
 800660c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006610:	e002      	b.n	8006618 <HAL_DMA_IRQHandler+0x10c>
 8006612:	2340      	movs	r3, #64	@ 0x40
 8006614:	e000      	b.n	8006618 <HAL_DMA_IRQHandler+0x10c>
 8006616:	2304      	movs	r3, #4
 8006618:	4a3d      	ldr	r2, [pc, #244]	@ (8006710 <HAL_DMA_IRQHandler+0x204>)
 800661a:	6053      	str	r3, [r2, #4]
 800661c:	e057      	b.n	80066ce <HAL_DMA_IRQHandler+0x1c2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a31      	ldr	r2, [pc, #196]	@ (80066e8 <HAL_DMA_IRQHandler+0x1dc>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d04f      	beq.n	80066c8 <HAL_DMA_IRQHandler+0x1bc>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a2f      	ldr	r2, [pc, #188]	@ (80066ec <HAL_DMA_IRQHandler+0x1e0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d048      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x1b8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a2e      	ldr	r2, [pc, #184]	@ (80066f0 <HAL_DMA_IRQHandler+0x1e4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d040      	beq.n	80066be <HAL_DMA_IRQHandler+0x1b2>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a2c      	ldr	r2, [pc, #176]	@ (80066f4 <HAL_DMA_IRQHandler+0x1e8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d038      	beq.n	80066b8 <HAL_DMA_IRQHandler+0x1ac>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a2b      	ldr	r2, [pc, #172]	@ (80066f8 <HAL_DMA_IRQHandler+0x1ec>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d030      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x1a6>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a29      	ldr	r2, [pc, #164]	@ (80066fc <HAL_DMA_IRQHandler+0x1f0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d028      	beq.n	80066ac <HAL_DMA_IRQHandler+0x1a0>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a21      	ldr	r2, [pc, #132]	@ (80066e4 <HAL_DMA_IRQHandler+0x1d8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d020      	beq.n	80066a6 <HAL_DMA_IRQHandler+0x19a>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a25      	ldr	r2, [pc, #148]	@ (8006700 <HAL_DMA_IRQHandler+0x1f4>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d019      	beq.n	80066a2 <HAL_DMA_IRQHandler+0x196>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a24      	ldr	r2, [pc, #144]	@ (8006704 <HAL_DMA_IRQHandler+0x1f8>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d012      	beq.n	800669e <HAL_DMA_IRQHandler+0x192>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a22      	ldr	r2, [pc, #136]	@ (8006708 <HAL_DMA_IRQHandler+0x1fc>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00a      	beq.n	8006698 <HAL_DMA_IRQHandler+0x18c>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a21      	ldr	r2, [pc, #132]	@ (800670c <HAL_DMA_IRQHandler+0x200>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d102      	bne.n	8006692 <HAL_DMA_IRQHandler+0x186>
 800668c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006690:	e01b      	b.n	80066ca <HAL_DMA_IRQHandler+0x1be>
 8006692:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006696:	e018      	b.n	80066ca <HAL_DMA_IRQHandler+0x1be>
 8006698:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800669c:	e015      	b.n	80066ca <HAL_DMA_IRQHandler+0x1be>
 800669e:	2340      	movs	r3, #64	@ 0x40
 80066a0:	e013      	b.n	80066ca <HAL_DMA_IRQHandler+0x1be>
 80066a2:	2304      	movs	r3, #4
 80066a4:	e011      	b.n	80066ca <HAL_DMA_IRQHandler+0x1be>
 80066a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80066aa:	e00e      	b.n	80066ca <HAL_DMA_IRQHandler+0x1be>
 80066ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80066b0:	e00b      	b.n	80066ca <HAL_DMA_IRQHandler+0x1be>
 80066b2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80066b6:	e008      	b.n	80066ca <HAL_DMA_IRQHandler+0x1be>
 80066b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80066bc:	e005      	b.n	80066ca <HAL_DMA_IRQHandler+0x1be>
 80066be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066c2:	e002      	b.n	80066ca <HAL_DMA_IRQHandler+0x1be>
 80066c4:	2340      	movs	r3, #64	@ 0x40
 80066c6:	e000      	b.n	80066ca <HAL_DMA_IRQHandler+0x1be>
 80066c8:	2304      	movs	r3, #4
 80066ca:	4a12      	ldr	r2, [pc, #72]	@ (8006714 <HAL_DMA_IRQHandler+0x208>)
 80066cc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 8136 	beq.w	8006944 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80066e0:	e130      	b.n	8006944 <HAL_DMA_IRQHandler+0x438>
 80066e2:	bf00      	nop
 80066e4:	40020080 	.word	0x40020080
 80066e8:	40020008 	.word	0x40020008
 80066ec:	4002001c 	.word	0x4002001c
 80066f0:	40020030 	.word	0x40020030
 80066f4:	40020044 	.word	0x40020044
 80066f8:	40020058 	.word	0x40020058
 80066fc:	4002006c 	.word	0x4002006c
 8006700:	40020408 	.word	0x40020408
 8006704:	4002041c 	.word	0x4002041c
 8006708:	40020430 	.word	0x40020430
 800670c:	40020444 	.word	0x40020444
 8006710:	40020400 	.word	0x40020400
 8006714:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671c:	2202      	movs	r2, #2
 800671e:	409a      	lsls	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4013      	ands	r3, r2
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 80dd 	beq.w	80068e4 <HAL_DMA_IRQHandler+0x3d8>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 80d7 	beq.w	80068e4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10b      	bne.n	800675c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 020a 	bic.w	r2, r2, #10
 8006752:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	461a      	mov	r2, r3
 8006762:	4b7b      	ldr	r3, [pc, #492]	@ (8006950 <HAL_DMA_IRQHandler+0x444>)
 8006764:	429a      	cmp	r2, r3
 8006766:	d958      	bls.n	800681a <HAL_DMA_IRQHandler+0x30e>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a79      	ldr	r2, [pc, #484]	@ (8006954 <HAL_DMA_IRQHandler+0x448>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d04f      	beq.n	8006812 <HAL_DMA_IRQHandler+0x306>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a78      	ldr	r2, [pc, #480]	@ (8006958 <HAL_DMA_IRQHandler+0x44c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d048      	beq.n	800680e <HAL_DMA_IRQHandler+0x302>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a76      	ldr	r2, [pc, #472]	@ (800695c <HAL_DMA_IRQHandler+0x450>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d040      	beq.n	8006808 <HAL_DMA_IRQHandler+0x2fc>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a75      	ldr	r2, [pc, #468]	@ (8006960 <HAL_DMA_IRQHandler+0x454>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d038      	beq.n	8006802 <HAL_DMA_IRQHandler+0x2f6>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a73      	ldr	r2, [pc, #460]	@ (8006964 <HAL_DMA_IRQHandler+0x458>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d030      	beq.n	80067fc <HAL_DMA_IRQHandler+0x2f0>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a72      	ldr	r2, [pc, #456]	@ (8006968 <HAL_DMA_IRQHandler+0x45c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d028      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x2ea>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a69      	ldr	r2, [pc, #420]	@ (8006950 <HAL_DMA_IRQHandler+0x444>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d020      	beq.n	80067f0 <HAL_DMA_IRQHandler+0x2e4>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a6e      	ldr	r2, [pc, #440]	@ (800696c <HAL_DMA_IRQHandler+0x460>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d019      	beq.n	80067ec <HAL_DMA_IRQHandler+0x2e0>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a6c      	ldr	r2, [pc, #432]	@ (8006970 <HAL_DMA_IRQHandler+0x464>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d012      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x2dc>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a6b      	ldr	r2, [pc, #428]	@ (8006974 <HAL_DMA_IRQHandler+0x468>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d00a      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x2d6>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a69      	ldr	r2, [pc, #420]	@ (8006978 <HAL_DMA_IRQHandler+0x46c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d102      	bne.n	80067dc <HAL_DMA_IRQHandler+0x2d0>
 80067d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80067da:	e01b      	b.n	8006814 <HAL_DMA_IRQHandler+0x308>
 80067dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80067e0:	e018      	b.n	8006814 <HAL_DMA_IRQHandler+0x308>
 80067e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067e6:	e015      	b.n	8006814 <HAL_DMA_IRQHandler+0x308>
 80067e8:	2320      	movs	r3, #32
 80067ea:	e013      	b.n	8006814 <HAL_DMA_IRQHandler+0x308>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e011      	b.n	8006814 <HAL_DMA_IRQHandler+0x308>
 80067f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067f4:	e00e      	b.n	8006814 <HAL_DMA_IRQHandler+0x308>
 80067f6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80067fa:	e00b      	b.n	8006814 <HAL_DMA_IRQHandler+0x308>
 80067fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006800:	e008      	b.n	8006814 <HAL_DMA_IRQHandler+0x308>
 8006802:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006806:	e005      	b.n	8006814 <HAL_DMA_IRQHandler+0x308>
 8006808:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800680c:	e002      	b.n	8006814 <HAL_DMA_IRQHandler+0x308>
 800680e:	2320      	movs	r3, #32
 8006810:	e000      	b.n	8006814 <HAL_DMA_IRQHandler+0x308>
 8006812:	2302      	movs	r3, #2
 8006814:	4a59      	ldr	r2, [pc, #356]	@ (800697c <HAL_DMA_IRQHandler+0x470>)
 8006816:	6053      	str	r3, [r2, #4]
 8006818:	e057      	b.n	80068ca <HAL_DMA_IRQHandler+0x3be>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a4d      	ldr	r2, [pc, #308]	@ (8006954 <HAL_DMA_IRQHandler+0x448>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d04f      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x3b8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a4b      	ldr	r2, [pc, #300]	@ (8006958 <HAL_DMA_IRQHandler+0x44c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d048      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x3b4>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a4a      	ldr	r2, [pc, #296]	@ (800695c <HAL_DMA_IRQHandler+0x450>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d040      	beq.n	80068ba <HAL_DMA_IRQHandler+0x3ae>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a48      	ldr	r2, [pc, #288]	@ (8006960 <HAL_DMA_IRQHandler+0x454>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d038      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x3a8>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a47      	ldr	r2, [pc, #284]	@ (8006964 <HAL_DMA_IRQHandler+0x458>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d030      	beq.n	80068ae <HAL_DMA_IRQHandler+0x3a2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a45      	ldr	r2, [pc, #276]	@ (8006968 <HAL_DMA_IRQHandler+0x45c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d028      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x39c>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a3d      	ldr	r2, [pc, #244]	@ (8006950 <HAL_DMA_IRQHandler+0x444>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d020      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x396>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a41      	ldr	r2, [pc, #260]	@ (800696c <HAL_DMA_IRQHandler+0x460>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d019      	beq.n	800689e <HAL_DMA_IRQHandler+0x392>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a40      	ldr	r2, [pc, #256]	@ (8006970 <HAL_DMA_IRQHandler+0x464>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d012      	beq.n	800689a <HAL_DMA_IRQHandler+0x38e>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a3e      	ldr	r2, [pc, #248]	@ (8006974 <HAL_DMA_IRQHandler+0x468>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00a      	beq.n	8006894 <HAL_DMA_IRQHandler+0x388>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a3d      	ldr	r2, [pc, #244]	@ (8006978 <HAL_DMA_IRQHandler+0x46c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d102      	bne.n	800688e <HAL_DMA_IRQHandler+0x382>
 8006888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800688c:	e01b      	b.n	80068c6 <HAL_DMA_IRQHandler+0x3ba>
 800688e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006892:	e018      	b.n	80068c6 <HAL_DMA_IRQHandler+0x3ba>
 8006894:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006898:	e015      	b.n	80068c6 <HAL_DMA_IRQHandler+0x3ba>
 800689a:	2320      	movs	r3, #32
 800689c:	e013      	b.n	80068c6 <HAL_DMA_IRQHandler+0x3ba>
 800689e:	2302      	movs	r3, #2
 80068a0:	e011      	b.n	80068c6 <HAL_DMA_IRQHandler+0x3ba>
 80068a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80068a6:	e00e      	b.n	80068c6 <HAL_DMA_IRQHandler+0x3ba>
 80068a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80068ac:	e00b      	b.n	80068c6 <HAL_DMA_IRQHandler+0x3ba>
 80068ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80068b2:	e008      	b.n	80068c6 <HAL_DMA_IRQHandler+0x3ba>
 80068b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80068b8:	e005      	b.n	80068c6 <HAL_DMA_IRQHandler+0x3ba>
 80068ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068be:	e002      	b.n	80068c6 <HAL_DMA_IRQHandler+0x3ba>
 80068c0:	2320      	movs	r3, #32
 80068c2:	e000      	b.n	80068c6 <HAL_DMA_IRQHandler+0x3ba>
 80068c4:	2302      	movs	r3, #2
 80068c6:	4a2e      	ldr	r2, [pc, #184]	@ (8006980 <HAL_DMA_IRQHandler+0x474>)
 80068c8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d034      	beq.n	8006944 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80068e2:	e02f      	b.n	8006944 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e8:	2208      	movs	r2, #8
 80068ea:	409a      	lsls	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4013      	ands	r3, r2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d028      	beq.n	8006946 <HAL_DMA_IRQHandler+0x43a>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d023      	beq.n	8006946 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 020e 	bic.w	r2, r2, #14
 800690c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006916:	2101      	movs	r1, #1
 8006918:	fa01 f202 	lsl.w	r2, r1, r2
 800691c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006938:	2b00      	cmp	r3, #0
 800693a:	d004      	beq.n	8006946 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	4798      	blx	r3
    }
  }
  return;
 8006944:	bf00      	nop
 8006946:	bf00      	nop
}
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40020080 	.word	0x40020080
 8006954:	40020008 	.word	0x40020008
 8006958:	4002001c 	.word	0x4002001c
 800695c:	40020030 	.word	0x40020030
 8006960:	40020044 	.word	0x40020044
 8006964:	40020058 	.word	0x40020058
 8006968:	4002006c 	.word	0x4002006c
 800696c:	40020408 	.word	0x40020408
 8006970:	4002041c 	.word	0x4002041c
 8006974:	40020430 	.word	0x40020430
 8006978:	40020444 	.word	0x40020444
 800697c:	40020400 	.word	0x40020400
 8006980:	40020000 	.word	0x40020000

08006984 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800699a:	2101      	movs	r1, #1
 800699c:	fa01 f202 	lsl.w	r2, r1, r2
 80069a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	2b10      	cmp	r3, #16
 80069b0:	d108      	bne.n	80069c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80069c2:	e007      	b.n	80069d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	60da      	str	r2, [r3, #12]
}
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr
	...

080069e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b08b      	sub	sp, #44	@ 0x2c
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069ea:	2300      	movs	r3, #0
 80069ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80069ee:	2300      	movs	r3, #0
 80069f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069f2:	e179      	b.n	8006ce8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80069f4:	2201      	movs	r2, #1
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	fa02 f303 	lsl.w	r3, r2, r3
 80069fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	4013      	ands	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	f040 8168 	bne.w	8006ce2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	4a96      	ldr	r2, [pc, #600]	@ (8006c70 <HAL_GPIO_Init+0x290>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d05e      	beq.n	8006ada <HAL_GPIO_Init+0xfa>
 8006a1c:	4a94      	ldr	r2, [pc, #592]	@ (8006c70 <HAL_GPIO_Init+0x290>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d875      	bhi.n	8006b0e <HAL_GPIO_Init+0x12e>
 8006a22:	4a94      	ldr	r2, [pc, #592]	@ (8006c74 <HAL_GPIO_Init+0x294>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d058      	beq.n	8006ada <HAL_GPIO_Init+0xfa>
 8006a28:	4a92      	ldr	r2, [pc, #584]	@ (8006c74 <HAL_GPIO_Init+0x294>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d86f      	bhi.n	8006b0e <HAL_GPIO_Init+0x12e>
 8006a2e:	4a92      	ldr	r2, [pc, #584]	@ (8006c78 <HAL_GPIO_Init+0x298>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d052      	beq.n	8006ada <HAL_GPIO_Init+0xfa>
 8006a34:	4a90      	ldr	r2, [pc, #576]	@ (8006c78 <HAL_GPIO_Init+0x298>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d869      	bhi.n	8006b0e <HAL_GPIO_Init+0x12e>
 8006a3a:	4a90      	ldr	r2, [pc, #576]	@ (8006c7c <HAL_GPIO_Init+0x29c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d04c      	beq.n	8006ada <HAL_GPIO_Init+0xfa>
 8006a40:	4a8e      	ldr	r2, [pc, #568]	@ (8006c7c <HAL_GPIO_Init+0x29c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d863      	bhi.n	8006b0e <HAL_GPIO_Init+0x12e>
 8006a46:	4a8e      	ldr	r2, [pc, #568]	@ (8006c80 <HAL_GPIO_Init+0x2a0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d046      	beq.n	8006ada <HAL_GPIO_Init+0xfa>
 8006a4c:	4a8c      	ldr	r2, [pc, #560]	@ (8006c80 <HAL_GPIO_Init+0x2a0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d85d      	bhi.n	8006b0e <HAL_GPIO_Init+0x12e>
 8006a52:	2b12      	cmp	r3, #18
 8006a54:	d82a      	bhi.n	8006aac <HAL_GPIO_Init+0xcc>
 8006a56:	2b12      	cmp	r3, #18
 8006a58:	d859      	bhi.n	8006b0e <HAL_GPIO_Init+0x12e>
 8006a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a60 <HAL_GPIO_Init+0x80>)
 8006a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a60:	08006adb 	.word	0x08006adb
 8006a64:	08006ab5 	.word	0x08006ab5
 8006a68:	08006ac7 	.word	0x08006ac7
 8006a6c:	08006b09 	.word	0x08006b09
 8006a70:	08006b0f 	.word	0x08006b0f
 8006a74:	08006b0f 	.word	0x08006b0f
 8006a78:	08006b0f 	.word	0x08006b0f
 8006a7c:	08006b0f 	.word	0x08006b0f
 8006a80:	08006b0f 	.word	0x08006b0f
 8006a84:	08006b0f 	.word	0x08006b0f
 8006a88:	08006b0f 	.word	0x08006b0f
 8006a8c:	08006b0f 	.word	0x08006b0f
 8006a90:	08006b0f 	.word	0x08006b0f
 8006a94:	08006b0f 	.word	0x08006b0f
 8006a98:	08006b0f 	.word	0x08006b0f
 8006a9c:	08006b0f 	.word	0x08006b0f
 8006aa0:	08006b0f 	.word	0x08006b0f
 8006aa4:	08006abd 	.word	0x08006abd
 8006aa8:	08006ad1 	.word	0x08006ad1
 8006aac:	4a75      	ldr	r2, [pc, #468]	@ (8006c84 <HAL_GPIO_Init+0x2a4>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d013      	beq.n	8006ada <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006ab2:	e02c      	b.n	8006b0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	623b      	str	r3, [r7, #32]
          break;
 8006aba:	e029      	b.n	8006b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	623b      	str	r3, [r7, #32]
          break;
 8006ac4:	e024      	b.n	8006b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	3308      	adds	r3, #8
 8006acc:	623b      	str	r3, [r7, #32]
          break;
 8006ace:	e01f      	b.n	8006b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	623b      	str	r3, [r7, #32]
          break;
 8006ad8:	e01a      	b.n	8006b10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d102      	bne.n	8006ae8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006ae2:	2304      	movs	r3, #4
 8006ae4:	623b      	str	r3, [r7, #32]
          break;
 8006ae6:	e013      	b.n	8006b10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d105      	bne.n	8006afc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006af0:	2308      	movs	r3, #8
 8006af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	69fa      	ldr	r2, [r7, #28]
 8006af8:	611a      	str	r2, [r3, #16]
          break;
 8006afa:	e009      	b.n	8006b10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006afc:	2308      	movs	r3, #8
 8006afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	615a      	str	r2, [r3, #20]
          break;
 8006b06:	e003      	b.n	8006b10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	623b      	str	r3, [r7, #32]
          break;
 8006b0c:	e000      	b.n	8006b10 <HAL_GPIO_Init+0x130>
          break;
 8006b0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	2bff      	cmp	r3, #255	@ 0xff
 8006b14:	d801      	bhi.n	8006b1a <HAL_GPIO_Init+0x13a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	e001      	b.n	8006b1e <HAL_GPIO_Init+0x13e>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	2bff      	cmp	r3, #255	@ 0xff
 8006b24:	d802      	bhi.n	8006b2c <HAL_GPIO_Init+0x14c>
 8006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	e002      	b.n	8006b32 <HAL_GPIO_Init+0x152>
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2e:	3b08      	subs	r3, #8
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	210f      	movs	r1, #15
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b40:	43db      	mvns	r3, r3
 8006b42:	401a      	ands	r2, r3
 8006b44:	6a39      	ldr	r1, [r7, #32]
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 80c1 	beq.w	8006ce2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006b60:	4b49      	ldr	r3, [pc, #292]	@ (8006c88 <HAL_GPIO_Init+0x2a8>)
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	4a48      	ldr	r2, [pc, #288]	@ (8006c88 <HAL_GPIO_Init+0x2a8>)
 8006b66:	f043 0301 	orr.w	r3, r3, #1
 8006b6a:	6193      	str	r3, [r2, #24]
 8006b6c:	4b46      	ldr	r3, [pc, #280]	@ (8006c88 <HAL_GPIO_Init+0x2a8>)
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006b78:	4a44      	ldr	r2, [pc, #272]	@ (8006c8c <HAL_GPIO_Init+0x2ac>)
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7c:	089b      	lsrs	r3, r3, #2
 8006b7e:	3302      	adds	r3, #2
 8006b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b88:	f003 0303 	and.w	r3, r3, #3
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	220f      	movs	r2, #15
 8006b90:	fa02 f303 	lsl.w	r3, r2, r3
 8006b94:	43db      	mvns	r3, r3
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a3c      	ldr	r2, [pc, #240]	@ (8006c90 <HAL_GPIO_Init+0x2b0>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d01f      	beq.n	8006be4 <HAL_GPIO_Init+0x204>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a3b      	ldr	r2, [pc, #236]	@ (8006c94 <HAL_GPIO_Init+0x2b4>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d019      	beq.n	8006be0 <HAL_GPIO_Init+0x200>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a3a      	ldr	r2, [pc, #232]	@ (8006c98 <HAL_GPIO_Init+0x2b8>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d013      	beq.n	8006bdc <HAL_GPIO_Init+0x1fc>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a39      	ldr	r2, [pc, #228]	@ (8006c9c <HAL_GPIO_Init+0x2bc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00d      	beq.n	8006bd8 <HAL_GPIO_Init+0x1f8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a38      	ldr	r2, [pc, #224]	@ (8006ca0 <HAL_GPIO_Init+0x2c0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d007      	beq.n	8006bd4 <HAL_GPIO_Init+0x1f4>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a37      	ldr	r2, [pc, #220]	@ (8006ca4 <HAL_GPIO_Init+0x2c4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d101      	bne.n	8006bd0 <HAL_GPIO_Init+0x1f0>
 8006bcc:	2305      	movs	r3, #5
 8006bce:	e00a      	b.n	8006be6 <HAL_GPIO_Init+0x206>
 8006bd0:	2306      	movs	r3, #6
 8006bd2:	e008      	b.n	8006be6 <HAL_GPIO_Init+0x206>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	e006      	b.n	8006be6 <HAL_GPIO_Init+0x206>
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e004      	b.n	8006be6 <HAL_GPIO_Init+0x206>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e002      	b.n	8006be6 <HAL_GPIO_Init+0x206>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <HAL_GPIO_Init+0x206>
 8006be4:	2300      	movs	r3, #0
 8006be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be8:	f002 0203 	and.w	r2, r2, #3
 8006bec:	0092      	lsls	r2, r2, #2
 8006bee:	4093      	lsls	r3, r2
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006bf6:	4925      	ldr	r1, [pc, #148]	@ (8006c8c <HAL_GPIO_Init+0x2ac>)
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	089b      	lsrs	r3, r3, #2
 8006bfc:	3302      	adds	r3, #2
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d006      	beq.n	8006c1e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006c10:	4b25      	ldr	r3, [pc, #148]	@ (8006ca8 <HAL_GPIO_Init+0x2c8>)
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	4924      	ldr	r1, [pc, #144]	@ (8006ca8 <HAL_GPIO_Init+0x2c8>)
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	608b      	str	r3, [r1, #8]
 8006c1c:	e006      	b.n	8006c2c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006c1e:	4b22      	ldr	r3, [pc, #136]	@ (8006ca8 <HAL_GPIO_Init+0x2c8>)
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	43db      	mvns	r3, r3
 8006c26:	4920      	ldr	r1, [pc, #128]	@ (8006ca8 <HAL_GPIO_Init+0x2c8>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d006      	beq.n	8006c46 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006c38:	4b1b      	ldr	r3, [pc, #108]	@ (8006ca8 <HAL_GPIO_Init+0x2c8>)
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	491a      	ldr	r1, [pc, #104]	@ (8006ca8 <HAL_GPIO_Init+0x2c8>)
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60cb      	str	r3, [r1, #12]
 8006c44:	e006      	b.n	8006c54 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006c46:	4b18      	ldr	r3, [pc, #96]	@ (8006ca8 <HAL_GPIO_Init+0x2c8>)
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	43db      	mvns	r3, r3
 8006c4e:	4916      	ldr	r1, [pc, #88]	@ (8006ca8 <HAL_GPIO_Init+0x2c8>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d025      	beq.n	8006cac <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006c60:	4b11      	ldr	r3, [pc, #68]	@ (8006ca8 <HAL_GPIO_Init+0x2c8>)
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	4910      	ldr	r1, [pc, #64]	@ (8006ca8 <HAL_GPIO_Init+0x2c8>)
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	604b      	str	r3, [r1, #4]
 8006c6c:	e025      	b.n	8006cba <HAL_GPIO_Init+0x2da>
 8006c6e:	bf00      	nop
 8006c70:	10320000 	.word	0x10320000
 8006c74:	10310000 	.word	0x10310000
 8006c78:	10220000 	.word	0x10220000
 8006c7c:	10210000 	.word	0x10210000
 8006c80:	10120000 	.word	0x10120000
 8006c84:	10110000 	.word	0x10110000
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	40010000 	.word	0x40010000
 8006c90:	40010800 	.word	0x40010800
 8006c94:	40010c00 	.word	0x40010c00
 8006c98:	40011000 	.word	0x40011000
 8006c9c:	40011400 	.word	0x40011400
 8006ca0:	40011800 	.word	0x40011800
 8006ca4:	40011c00 	.word	0x40011c00
 8006ca8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006cac:	4b15      	ldr	r3, [pc, #84]	@ (8006d04 <HAL_GPIO_Init+0x324>)
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	43db      	mvns	r3, r3
 8006cb4:	4913      	ldr	r1, [pc, #76]	@ (8006d04 <HAL_GPIO_Init+0x324>)
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d006      	beq.n	8006cd4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d04 <HAL_GPIO_Init+0x324>)
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	490e      	ldr	r1, [pc, #56]	@ (8006d04 <HAL_GPIO_Init+0x324>)
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	600b      	str	r3, [r1, #0]
 8006cd2:	e006      	b.n	8006ce2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006d04 <HAL_GPIO_Init+0x324>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	43db      	mvns	r3, r3
 8006cdc:	4909      	ldr	r1, [pc, #36]	@ (8006d04 <HAL_GPIO_Init+0x324>)
 8006cde:	4013      	ands	r3, r2
 8006ce0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cee:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f47f ae7e 	bne.w	80069f4 <HAL_GPIO_Init+0x14>
  }
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	372c      	adds	r7, #44	@ 0x2c
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bc80      	pop	{r7}
 8006d02:	4770      	bx	lr
 8006d04:	40010400 	.word	0x40010400

08006d08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	460b      	mov	r3, r1
 8006d12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	887b      	ldrh	r3, [r7, #2]
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d20:	2301      	movs	r3, #1
 8006d22:	73fb      	strb	r3, [r7, #15]
 8006d24:	e001      	b.n	8006d2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr

08006d36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	807b      	strh	r3, [r7, #2]
 8006d42:	4613      	mov	r3, r2
 8006d44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d46:	787b      	ldrb	r3, [r7, #1]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d4c:	887a      	ldrh	r2, [r7, #2]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006d52:	e003      	b.n	8006d5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006d54:	887b      	ldrh	r3, [r7, #2]
 8006d56:	041a      	lsls	r2, r3, #16
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	611a      	str	r2, [r3, #16]
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc80      	pop	{r7}
 8006d64:	4770      	bx	lr

08006d66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006d78:	887a      	ldrh	r2, [r7, #2]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	041a      	lsls	r2, r3, #16
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	43d9      	mvns	r1, r3
 8006d84:	887b      	ldrh	r3, [r7, #2]
 8006d86:	400b      	ands	r3, r1
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	611a      	str	r2, [r3, #16]
}
 8006d8e:	bf00      	nop
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bc80      	pop	{r7}
 8006d96:	4770      	bx	lr

08006d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e12b      	b.n	8007002 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d106      	bne.n	8006dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fd fac4 	bl	800434c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2224      	movs	r2, #36	@ 0x24
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0201 	bic.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006dea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006dfc:	f002 f9d8 	bl	80091b0 <HAL_RCC_GetPCLK1Freq>
 8006e00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	4a81      	ldr	r2, [pc, #516]	@ (800700c <HAL_I2C_Init+0x274>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d807      	bhi.n	8006e1c <HAL_I2C_Init+0x84>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4a80      	ldr	r2, [pc, #512]	@ (8007010 <HAL_I2C_Init+0x278>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	bf94      	ite	ls
 8006e14:	2301      	movls	r3, #1
 8006e16:	2300      	movhi	r3, #0
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	e006      	b.n	8006e2a <HAL_I2C_Init+0x92>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4a7d      	ldr	r2, [pc, #500]	@ (8007014 <HAL_I2C_Init+0x27c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	bf94      	ite	ls
 8006e24:	2301      	movls	r3, #1
 8006e26:	2300      	movhi	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e0e7      	b.n	8007002 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4a78      	ldr	r2, [pc, #480]	@ (8007018 <HAL_I2C_Init+0x280>)
 8006e36:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3a:	0c9b      	lsrs	r3, r3, #18
 8006e3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	4a6a      	ldr	r2, [pc, #424]	@ (800700c <HAL_I2C_Init+0x274>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d802      	bhi.n	8006e6c <HAL_I2C_Init+0xd4>
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	e009      	b.n	8006e80 <HAL_I2C_Init+0xe8>
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006e72:	fb02 f303 	mul.w	r3, r2, r3
 8006e76:	4a69      	ldr	r2, [pc, #420]	@ (800701c <HAL_I2C_Init+0x284>)
 8006e78:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7c:	099b      	lsrs	r3, r3, #6
 8006e7e:	3301      	adds	r3, #1
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6812      	ldr	r2, [r2, #0]
 8006e84:	430b      	orrs	r3, r1
 8006e86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006e92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	495c      	ldr	r1, [pc, #368]	@ (800700c <HAL_I2C_Init+0x274>)
 8006e9c:	428b      	cmp	r3, r1
 8006e9e:	d819      	bhi.n	8006ed4 <HAL_I2C_Init+0x13c>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	1e59      	subs	r1, r3, #1
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eae:	1c59      	adds	r1, r3, #1
 8006eb0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006eb4:	400b      	ands	r3, r1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <HAL_I2C_Init+0x138>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	1e59      	subs	r1, r3, #1
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ec8:	3301      	adds	r3, #1
 8006eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ece:	e051      	b.n	8006f74 <HAL_I2C_Init+0x1dc>
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	e04f      	b.n	8006f74 <HAL_I2C_Init+0x1dc>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d111      	bne.n	8006f00 <HAL_I2C_Init+0x168>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	1e58      	subs	r0, r3, #1
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6859      	ldr	r1, [r3, #4]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	440b      	add	r3, r1
 8006eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8006eee:	3301      	adds	r3, #1
 8006ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	bf0c      	ite	eq
 8006ef8:	2301      	moveq	r3, #1
 8006efa:	2300      	movne	r3, #0
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	e012      	b.n	8006f26 <HAL_I2C_Init+0x18e>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	1e58      	subs	r0, r3, #1
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6859      	ldr	r1, [r3, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	440b      	add	r3, r1
 8006f0e:	0099      	lsls	r1, r3, #2
 8006f10:	440b      	add	r3, r1
 8006f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f16:	3301      	adds	r3, #1
 8006f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	bf0c      	ite	eq
 8006f20:	2301      	moveq	r3, #1
 8006f22:	2300      	movne	r3, #0
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <HAL_I2C_Init+0x196>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e022      	b.n	8006f74 <HAL_I2C_Init+0x1dc>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10e      	bne.n	8006f54 <HAL_I2C_Init+0x1bc>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	1e58      	subs	r0, r3, #1
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6859      	ldr	r1, [r3, #4]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	440b      	add	r3, r1
 8006f44:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f48:	3301      	adds	r3, #1
 8006f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f52:	e00f      	b.n	8006f74 <HAL_I2C_Init+0x1dc>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	1e58      	subs	r0, r3, #1
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6859      	ldr	r1, [r3, #4]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	0099      	lsls	r1, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f74:	6879      	ldr	r1, [r7, #4]
 8006f76:	6809      	ldr	r1, [r1, #0]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	69da      	ldr	r2, [r3, #28]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006fa2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	6911      	ldr	r1, [r2, #16]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	68d2      	ldr	r2, [r2, #12]
 8006fae:	4311      	orrs	r1, r2
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6812      	ldr	r2, [r2, #0]
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	695a      	ldr	r2, [r3, #20]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0201 	orr.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	000186a0 	.word	0x000186a0
 8007010:	001e847f 	.word	0x001e847f
 8007014:	003d08ff 	.word	0x003d08ff
 8007018:	431bde83 	.word	0x431bde83
 800701c:	10624dd3 	.word	0x10624dd3

08007020 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af02      	add	r7, sp, #8
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	607a      	str	r2, [r7, #4]
 800702a:	461a      	mov	r2, r3
 800702c:	460b      	mov	r3, r1
 800702e:	817b      	strh	r3, [r7, #10]
 8007030:	4613      	mov	r3, r2
 8007032:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007034:	f7fe ff42 	bl	8005ebc <HAL_GetTick>
 8007038:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b20      	cmp	r3, #32
 8007044:	f040 80e0 	bne.w	8007208 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	2319      	movs	r3, #25
 800704e:	2201      	movs	r2, #1
 8007050:	4970      	ldr	r1, [pc, #448]	@ (8007214 <HAL_I2C_Master_Transmit+0x1f4>)
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f001 faac 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800705e:	2302      	movs	r3, #2
 8007060:	e0d3      	b.n	800720a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007068:	2b01      	cmp	r3, #1
 800706a:	d101      	bne.n	8007070 <HAL_I2C_Master_Transmit+0x50>
 800706c:	2302      	movs	r3, #2
 800706e:	e0cc      	b.n	800720a <HAL_I2C_Master_Transmit+0x1ea>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b01      	cmp	r3, #1
 8007084:	d007      	beq.n	8007096 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f042 0201 	orr.w	r2, r2, #1
 8007094:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2221      	movs	r2, #33	@ 0x21
 80070aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2210      	movs	r2, #16
 80070b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	893a      	ldrh	r2, [r7, #8]
 80070c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	4a50      	ldr	r2, [pc, #320]	@ (8007218 <HAL_I2C_Master_Transmit+0x1f8>)
 80070d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80070d8:	8979      	ldrh	r1, [r7, #10]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	6a3a      	ldr	r2, [r7, #32]
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 ff98 	bl	8008014 <I2C_MasterRequestWrite>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e08d      	b.n	800720a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070ee:	2300      	movs	r3, #0
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	613b      	str	r3, [r7, #16]
 8007102:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007104:	e066      	b.n	80071d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	6a39      	ldr	r1, [r7, #32]
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f001 fb6a 	bl	80087e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00d      	beq.n	8007132 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711a:	2b04      	cmp	r3, #4
 800711c:	d107      	bne.n	800712e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800712c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e06b      	b.n	800720a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007136:	781a      	ldrb	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800714c:	b29b      	uxth	r3, r3
 800714e:	3b01      	subs	r3, #1
 8007150:	b29a      	uxth	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800715a:	3b01      	subs	r3, #1
 800715c:	b29a      	uxth	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	f003 0304 	and.w	r3, r3, #4
 800716c:	2b04      	cmp	r3, #4
 800716e:	d11b      	bne.n	80071a8 <HAL_I2C_Master_Transmit+0x188>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007174:	2b00      	cmp	r3, #0
 8007176:	d017      	beq.n	80071a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800717c:	781a      	ldrb	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007188:	1c5a      	adds	r2, r3, #1
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007192:	b29b      	uxth	r3, r3
 8007194:	3b01      	subs	r3, #1
 8007196:	b29a      	uxth	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	6a39      	ldr	r1, [r7, #32]
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f001 fb61 	bl	8008874 <I2C_WaitOnBTFFlagUntilTimeout>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00d      	beq.n	80071d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d107      	bne.n	80071d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e01a      	b.n	800720a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d194      	bne.n	8007106 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	e000      	b.n	800720a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007208:	2302      	movs	r3, #2
  }
}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	00100002 	.word	0x00100002
 8007218:	ffff0000 	.word	0xffff0000

0800721c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08c      	sub	sp, #48	@ 0x30
 8007220:	af02      	add	r7, sp, #8
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	607a      	str	r2, [r7, #4]
 8007226:	461a      	mov	r2, r3
 8007228:	460b      	mov	r3, r1
 800722a:	817b      	strh	r3, [r7, #10]
 800722c:	4613      	mov	r3, r2
 800722e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007234:	f7fe fe42 	bl	8005ebc <HAL_GetTick>
 8007238:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b20      	cmp	r3, #32
 8007244:	f040 824b 	bne.w	80076de <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	2319      	movs	r3, #25
 800724e:	2201      	movs	r2, #1
 8007250:	497f      	ldr	r1, [pc, #508]	@ (8007450 <HAL_I2C_Master_Receive+0x234>)
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f001 f9ac 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800725e:	2302      	movs	r3, #2
 8007260:	e23e      	b.n	80076e0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <HAL_I2C_Master_Receive+0x54>
 800726c:	2302      	movs	r3, #2
 800726e:	e237      	b.n	80076e0 <HAL_I2C_Master_Receive+0x4c4>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b01      	cmp	r3, #1
 8007284:	d007      	beq.n	8007296 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f042 0201 	orr.w	r2, r2, #1
 8007294:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2222      	movs	r2, #34	@ 0x22
 80072aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2210      	movs	r2, #16
 80072b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	893a      	ldrh	r2, [r7, #8]
 80072c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4a5f      	ldr	r2, [pc, #380]	@ (8007454 <HAL_I2C_Master_Receive+0x238>)
 80072d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80072d8:	8979      	ldrh	r1, [r7, #10]
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 ff1a 	bl	8008118 <I2C_MasterRequestRead>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e1f8      	b.n	80076e0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d113      	bne.n	800731e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072f6:	2300      	movs	r3, #0
 80072f8:	61fb      	str	r3, [r7, #28]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	61fb      	str	r3, [r7, #28]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	61fb      	str	r3, [r7, #28]
 800730a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	e1cc      	b.n	80076b8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007322:	2b01      	cmp	r3, #1
 8007324:	d11e      	bne.n	8007364 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007334:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007336:	b672      	cpsid	i
}
 8007338:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800733a:	2300      	movs	r3, #0
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	61bb      	str	r3, [r7, #24]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	61bb      	str	r3, [r7, #24]
 800734e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800735e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007360:	b662      	cpsie	i
}
 8007362:	e035      	b.n	80073d0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007368:	2b02      	cmp	r3, #2
 800736a:	d11e      	bne.n	80073aa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800737a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800737c:	b672      	cpsid	i
}
 800737e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007380:	2300      	movs	r3, #0
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80073a6:	b662      	cpsie	i
}
 80073a8:	e012      	b.n	80073d0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ba:	2300      	movs	r3, #0
 80073bc:	613b      	str	r3, [r7, #16]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	613b      	str	r3, [r7, #16]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	613b      	str	r3, [r7, #16]
 80073ce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80073d0:	e172      	b.n	80076b8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	f200 811f 	bhi.w	800761a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d123      	bne.n	800742c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f001 fa8b 	bl	8008904 <I2C_WaitOnRXNEFlagUntilTimeout>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e173      	b.n	80076e0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	691a      	ldr	r2, [r3, #16]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007414:	3b01      	subs	r3, #1
 8007416:	b29a      	uxth	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007420:	b29b      	uxth	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	b29a      	uxth	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800742a:	e145      	b.n	80076b8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007430:	2b02      	cmp	r3, #2
 8007432:	d152      	bne.n	80074da <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743a:	2200      	movs	r2, #0
 800743c:	4906      	ldr	r1, [pc, #24]	@ (8007458 <HAL_I2C_Master_Receive+0x23c>)
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f001 f8b6 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d008      	beq.n	800745c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e148      	b.n	80076e0 <HAL_I2C_Master_Receive+0x4c4>
 800744e:	bf00      	nop
 8007450:	00100002 	.word	0x00100002
 8007454:	ffff0000 	.word	0xffff0000
 8007458:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800745c:	b672      	cpsid	i
}
 800745e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800746e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691a      	ldr	r2, [r3, #16]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800748c:	3b01      	subs	r3, #1
 800748e:	b29a      	uxth	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007498:	b29b      	uxth	r3, r3
 800749a:	3b01      	subs	r3, #1
 800749c:	b29a      	uxth	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80074a2:	b662      	cpsie	i
}
 80074a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	691a      	ldr	r2, [r3, #16]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b0:	b2d2      	uxtb	r2, r2
 80074b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074c2:	3b01      	subs	r3, #1
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	3b01      	subs	r3, #1
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80074d8:	e0ee      	b.n	80076b8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	2200      	movs	r2, #0
 80074e2:	4981      	ldr	r1, [pc, #516]	@ (80076e8 <HAL_I2C_Master_Receive+0x4cc>)
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f001 f863 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e0f5      	b.n	80076e0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007502:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007504:	b672      	cpsid	i
}
 8007506:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	691a      	ldr	r2, [r3, #16]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007512:	b2d2      	uxtb	r2, r2
 8007514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007524:	3b01      	subs	r3, #1
 8007526:	b29a      	uxth	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800753a:	4b6c      	ldr	r3, [pc, #432]	@ (80076ec <HAL_I2C_Master_Receive+0x4d0>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	08db      	lsrs	r3, r3, #3
 8007540:	4a6b      	ldr	r2, [pc, #428]	@ (80076f0 <HAL_I2C_Master_Receive+0x4d4>)
 8007542:	fba2 2303 	umull	r2, r3, r2, r3
 8007546:	0a1a      	lsrs	r2, r3, #8
 8007548:	4613      	mov	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	00da      	lsls	r2, r3, #3
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	3b01      	subs	r3, #1
 8007558:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d118      	bne.n	8007592 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2220      	movs	r2, #32
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757a:	f043 0220 	orr.w	r2, r3, #32
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007582:	b662      	cpsie	i
}
 8007584:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e0a6      	b.n	80076e0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	f003 0304 	and.w	r3, r3, #4
 800759c:	2b04      	cmp	r3, #4
 800759e:	d1d9      	bne.n	8007554 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	691a      	ldr	r2, [r3, #16]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ba:	b2d2      	uxtb	r2, r2
 80075bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075d8:	b29b      	uxth	r3, r3
 80075da:	3b01      	subs	r3, #1
 80075dc:	b29a      	uxth	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80075e2:	b662      	cpsie	i
}
 80075e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	691a      	ldr	r2, [r3, #16]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007602:	3b01      	subs	r3, #1
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800760e:	b29b      	uxth	r3, r3
 8007610:	3b01      	subs	r3, #1
 8007612:	b29a      	uxth	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007618:	e04e      	b.n	80076b8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800761a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800761c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f001 f970 	bl	8008904 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e058      	b.n	80076e0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	691a      	ldr	r2, [r3, #16]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007638:	b2d2      	uxtb	r2, r2
 800763a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800764a:	3b01      	subs	r3, #1
 800764c:	b29a      	uxth	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007656:	b29b      	uxth	r3, r3
 8007658:	3b01      	subs	r3, #1
 800765a:	b29a      	uxth	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	f003 0304 	and.w	r3, r3, #4
 800766a:	2b04      	cmp	r3, #4
 800766c:	d124      	bne.n	80076b8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007672:	2b03      	cmp	r3, #3
 8007674:	d107      	bne.n	8007686 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007684:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691a      	ldr	r2, [r3, #16]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007690:	b2d2      	uxtb	r2, r2
 8007692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f47f ae88 	bne.w	80073d2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	e000      	b.n	80076e0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80076de:	2302      	movs	r3, #2
  }
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3728      	adds	r7, #40	@ 0x28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	00010004 	.word	0x00010004
 80076ec:	20000028 	.word	0x20000028
 80076f0:	14f8b589 	.word	0x14f8b589

080076f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af02      	add	r7, sp, #8
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	4608      	mov	r0, r1
 80076fe:	4611      	mov	r1, r2
 8007700:	461a      	mov	r2, r3
 8007702:	4603      	mov	r3, r0
 8007704:	817b      	strh	r3, [r7, #10]
 8007706:	460b      	mov	r3, r1
 8007708:	813b      	strh	r3, [r7, #8]
 800770a:	4613      	mov	r3, r2
 800770c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800770e:	f7fe fbd5 	bl	8005ebc <HAL_GetTick>
 8007712:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b20      	cmp	r3, #32
 800771e:	f040 80d9 	bne.w	80078d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	2319      	movs	r3, #25
 8007728:	2201      	movs	r2, #1
 800772a:	496d      	ldr	r1, [pc, #436]	@ (80078e0 <HAL_I2C_Mem_Write+0x1ec>)
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 ff3f 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007738:	2302      	movs	r3, #2
 800773a:	e0cc      	b.n	80078d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <HAL_I2C_Mem_Write+0x56>
 8007746:	2302      	movs	r3, #2
 8007748:	e0c5      	b.n	80078d6 <HAL_I2C_Mem_Write+0x1e2>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b01      	cmp	r3, #1
 800775e:	d007      	beq.n	8007770 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0201 	orr.w	r2, r2, #1
 800776e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800777e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2221      	movs	r2, #33	@ 0x21
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2240      	movs	r2, #64	@ 0x40
 800778c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6a3a      	ldr	r2, [r7, #32]
 800779a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80077a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4a4d      	ldr	r2, [pc, #308]	@ (80078e4 <HAL_I2C_Mem_Write+0x1f0>)
 80077b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077b2:	88f8      	ldrh	r0, [r7, #6]
 80077b4:	893a      	ldrh	r2, [r7, #8]
 80077b6:	8979      	ldrh	r1, [r7, #10]
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	9301      	str	r3, [sp, #4]
 80077bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	4603      	mov	r3, r0
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 fd76 	bl	80082b4 <I2C_RequestMemoryWrite>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d052      	beq.n	8007874 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e081      	b.n	80078d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f001 f804 	bl	80087e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00d      	beq.n	80077fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	d107      	bne.n	80077fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e06b      	b.n	80078d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007802:	781a      	ldrb	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007818:	3b01      	subs	r3, #1
 800781a:	b29a      	uxth	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b04      	cmp	r3, #4
 800783a:	d11b      	bne.n	8007874 <HAL_I2C_Mem_Write+0x180>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007840:	2b00      	cmp	r3, #0
 8007842:	d017      	beq.n	8007874 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007848:	781a      	ldrb	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007854:	1c5a      	adds	r2, r3, #1
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800785e:	3b01      	subs	r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800786a:	b29b      	uxth	r3, r3
 800786c:	3b01      	subs	r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1aa      	bne.n	80077d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 fff7 	bl	8008874 <I2C_WaitOnBTFFlagUntilTimeout>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00d      	beq.n	80078a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007890:	2b04      	cmp	r3, #4
 8007892:	d107      	bne.n	80078a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e016      	b.n	80078d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	e000      	b.n	80078d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80078d4:	2302      	movs	r3, #2
  }
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	00100002 	.word	0x00100002
 80078e4:	ffff0000 	.word	0xffff0000

080078e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08c      	sub	sp, #48	@ 0x30
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	4608      	mov	r0, r1
 80078f2:	4611      	mov	r1, r2
 80078f4:	461a      	mov	r2, r3
 80078f6:	4603      	mov	r3, r0
 80078f8:	817b      	strh	r3, [r7, #10]
 80078fa:	460b      	mov	r3, r1
 80078fc:	813b      	strh	r3, [r7, #8]
 80078fe:	4613      	mov	r3, r2
 8007900:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007906:	f7fe fad9 	bl	8005ebc <HAL_GetTick>
 800790a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b20      	cmp	r3, #32
 8007916:	f040 8244 	bne.w	8007da2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	2319      	movs	r3, #25
 8007920:	2201      	movs	r2, #1
 8007922:	4982      	ldr	r1, [pc, #520]	@ (8007b2c <HAL_I2C_Mem_Read+0x244>)
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 fe43 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007930:	2302      	movs	r3, #2
 8007932:	e237      	b.n	8007da4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800793a:	2b01      	cmp	r3, #1
 800793c:	d101      	bne.n	8007942 <HAL_I2C_Mem_Read+0x5a>
 800793e:	2302      	movs	r3, #2
 8007940:	e230      	b.n	8007da4 <HAL_I2C_Mem_Read+0x4bc>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b01      	cmp	r3, #1
 8007956:	d007      	beq.n	8007968 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f042 0201 	orr.w	r2, r2, #1
 8007966:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007976:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2222      	movs	r2, #34	@ 0x22
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2240      	movs	r2, #64	@ 0x40
 8007984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007992:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007998:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800799e:	b29a      	uxth	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4a62      	ldr	r2, [pc, #392]	@ (8007b30 <HAL_I2C_Mem_Read+0x248>)
 80079a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80079aa:	88f8      	ldrh	r0, [r7, #6]
 80079ac:	893a      	ldrh	r2, [r7, #8]
 80079ae:	8979      	ldrh	r1, [r7, #10]
 80079b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	4603      	mov	r3, r0
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 fd10 	bl	80083e0 <I2C_RequestMemoryRead>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e1ec      	b.n	8007da4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d113      	bne.n	80079fa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079d2:	2300      	movs	r3, #0
 80079d4:	61fb      	str	r3, [r7, #28]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	61fb      	str	r3, [r7, #28]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	61fb      	str	r3, [r7, #28]
 80079e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	e1c0      	b.n	8007d7c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d11e      	bne.n	8007a40 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007a12:	b672      	cpsid	i
}
 8007a14:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a16:	2300      	movs	r3, #0
 8007a18:	61bb      	str	r3, [r7, #24]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	61bb      	str	r3, [r7, #24]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	61bb      	str	r3, [r7, #24]
 8007a2a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007a3c:	b662      	cpsie	i
}
 8007a3e:	e035      	b.n	8007aac <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d11e      	bne.n	8007a86 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007a58:	b672      	cpsid	i
}
 8007a5a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	617b      	str	r3, [r7, #20]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007a82:	b662      	cpsie	i
}
 8007a84:	e012      	b.n	8007aac <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007a94:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a96:	2300      	movs	r3, #0
 8007a98:	613b      	str	r3, [r7, #16]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	613b      	str	r3, [r7, #16]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	613b      	str	r3, [r7, #16]
 8007aaa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007aac:	e166      	b.n	8007d7c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	f200 811f 	bhi.w	8007cf6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d123      	bne.n	8007b08 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ac2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 ff1d 	bl	8008904 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e167      	b.n	8007da4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	691a      	ldr	r2, [r3, #16]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ade:	b2d2      	uxtb	r2, r2
 8007ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007b06:	e139      	b.n	8007d7c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d152      	bne.n	8007bb6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b16:	2200      	movs	r2, #0
 8007b18:	4906      	ldr	r1, [pc, #24]	@ (8007b34 <HAL_I2C_Mem_Read+0x24c>)
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 fd48 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d008      	beq.n	8007b38 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e13c      	b.n	8007da4 <HAL_I2C_Mem_Read+0x4bc>
 8007b2a:	bf00      	nop
 8007b2c:	00100002 	.word	0x00100002
 8007b30:	ffff0000 	.word	0xffff0000
 8007b34:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007b38:	b672      	cpsid	i
}
 8007b3a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	691a      	ldr	r2, [r3, #16]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b56:	b2d2      	uxtb	r2, r2
 8007b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007b7e:	b662      	cpsie	i
}
 8007b80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	691a      	ldr	r2, [r3, #16]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8c:	b2d2      	uxtb	r2, r2
 8007b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	3b01      	subs	r3, #1
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007bb4:	e0e2      	b.n	8007d7c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	497b      	ldr	r1, [pc, #492]	@ (8007dac <HAL_I2C_Mem_Read+0x4c4>)
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 fcf5 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e0e9      	b.n	8007da4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007be0:	b672      	cpsid	i
}
 8007be2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691a      	ldr	r2, [r3, #16]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007c16:	4b66      	ldr	r3, [pc, #408]	@ (8007db0 <HAL_I2C_Mem_Read+0x4c8>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	08db      	lsrs	r3, r3, #3
 8007c1c:	4a65      	ldr	r2, [pc, #404]	@ (8007db4 <HAL_I2C_Mem_Read+0x4cc>)
 8007c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c22:	0a1a      	lsrs	r2, r3, #8
 8007c24:	4613      	mov	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	00da      	lsls	r2, r3, #3
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d118      	bne.n	8007c6e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c56:	f043 0220 	orr.w	r2, r3, #32
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007c5e:	b662      	cpsie	i
}
 8007c60:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e09a      	b.n	8007da4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d1d9      	bne.n	8007c30 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	691a      	ldr	r2, [r3, #16]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c96:	b2d2      	uxtb	r2, r2
 8007c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9e:	1c5a      	adds	r2, r3, #1
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007cbe:	b662      	cpsie	i
}
 8007cc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	691a      	ldr	r2, [r3, #16]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ccc:	b2d2      	uxtb	r2, r2
 8007cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd4:	1c5a      	adds	r2, r3, #1
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	3b01      	subs	r3, #1
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007cf4:	e042      	b.n	8007d7c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cf8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 fe02 	bl	8008904 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e04c      	b.n	8007da4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	691a      	ldr	r2, [r3, #16]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d14:	b2d2      	uxtb	r2, r2
 8007d16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d26:	3b01      	subs	r3, #1
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	3b01      	subs	r3, #1
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d118      	bne.n	8007d7c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	691a      	ldr	r2, [r3, #16]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d54:	b2d2      	uxtb	r2, r2
 8007d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d66:	3b01      	subs	r3, #1
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	3b01      	subs	r3, #1
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f47f ae94 	bne.w	8007aae <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2220      	movs	r2, #32
 8007d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	e000      	b.n	8007da4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8007da2:	2302      	movs	r3, #2
  }
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3728      	adds	r7, #40	@ 0x28
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	00010004 	.word	0x00010004
 8007db0:	20000028 	.word	0x20000028
 8007db4:	14f8b589 	.word	0x14f8b589

08007db8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08a      	sub	sp, #40	@ 0x28
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	603b      	str	r3, [r7, #0]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007dc8:	f7fe f878 	bl	8005ebc <HAL_GetTick>
 8007dcc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b20      	cmp	r3, #32
 8007ddc:	f040 8111 	bne.w	8008002 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	2319      	movs	r3, #25
 8007de6:	2201      	movs	r2, #1
 8007de8:	4988      	ldr	r1, [pc, #544]	@ (800800c <HAL_I2C_IsDeviceReady+0x254>)
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 fbe0 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007df6:	2302      	movs	r3, #2
 8007df8:	e104      	b.n	8008004 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d101      	bne.n	8007e08 <HAL_I2C_IsDeviceReady+0x50>
 8007e04:	2302      	movs	r3, #2
 8007e06:	e0fd      	b.n	8008004 <HAL_I2C_IsDeviceReady+0x24c>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d007      	beq.n	8007e2e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f042 0201 	orr.w	r2, r2, #1
 8007e2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2224      	movs	r2, #36	@ 0x24
 8007e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4a70      	ldr	r2, [pc, #448]	@ (8008010 <HAL_I2C_IsDeviceReady+0x258>)
 8007e50:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e60:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 fb9e 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00d      	beq.n	8007e96 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e88:	d103      	bne.n	8007e92 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e90:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e0b6      	b.n	8008004 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e96:	897b      	ldrh	r3, [r7, #10]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007ea4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007ea6:	f7fe f809 	bl	8005ebc <HAL_GetTick>
 8007eaa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	bf0c      	ite	eq
 8007eba:	2301      	moveq	r3, #1
 8007ebc:	2300      	movne	r3, #0
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ed0:	bf0c      	ite	eq
 8007ed2:	2301      	moveq	r3, #1
 8007ed4:	2300      	movne	r3, #0
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007eda:	e025      	b.n	8007f28 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007edc:	f7fd ffee 	bl	8005ebc <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d302      	bcc.n	8007ef2 <HAL_I2C_IsDeviceReady+0x13a>
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d103      	bne.n	8007efa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	22a0      	movs	r2, #160	@ 0xa0
 8007ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	bf0c      	ite	eq
 8007f08:	2301      	moveq	r3, #1
 8007f0a:	2300      	movne	r3, #0
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f1e:	bf0c      	ite	eq
 8007f20:	2301      	moveq	r3, #1
 8007f22:	2300      	movne	r3, #0
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2ba0      	cmp	r3, #160	@ 0xa0
 8007f32:	d005      	beq.n	8007f40 <HAL_I2C_IsDeviceReady+0x188>
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d102      	bne.n	8007f40 <HAL_I2C_IsDeviceReady+0x188>
 8007f3a:	7dbb      	ldrb	r3, [r7, #22]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0cd      	beq.n	8007edc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d129      	bne.n	8007faa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f64:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f66:	2300      	movs	r3, #0
 8007f68:	613b      	str	r3, [r7, #16]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	695b      	ldr	r3, [r3, #20]
 8007f70:	613b      	str	r3, [r7, #16]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	613b      	str	r3, [r7, #16]
 8007f7a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	2319      	movs	r3, #25
 8007f82:	2201      	movs	r2, #1
 8007f84:	4921      	ldr	r1, [pc, #132]	@ (800800c <HAL_I2C_IsDeviceReady+0x254>)
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 fb12 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e036      	b.n	8008004 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	e02c      	b.n	8008004 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fb8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007fc2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	2319      	movs	r3, #25
 8007fca:	2201      	movs	r2, #1
 8007fcc:	490f      	ldr	r1, [pc, #60]	@ (800800c <HAL_I2C_IsDeviceReady+0x254>)
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 faee 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e012      	b.n	8008004 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	f4ff af32 	bcc.w	8007e52 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e000      	b.n	8008004 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008002:	2302      	movs	r3, #2
  }
}
 8008004:	4618      	mov	r0, r3
 8008006:	3720      	adds	r7, #32
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	00100002 	.word	0x00100002
 8008010:	ffff0000 	.word	0xffff0000

08008014 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b088      	sub	sp, #32
 8008018:	af02      	add	r7, sp, #8
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	607a      	str	r2, [r7, #4]
 800801e:	603b      	str	r3, [r7, #0]
 8008020:	460b      	mov	r3, r1
 8008022:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008028:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2b08      	cmp	r3, #8
 800802e:	d006      	beq.n	800803e <I2C_MasterRequestWrite+0x2a>
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d003      	beq.n	800803e <I2C_MasterRequestWrite+0x2a>
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800803c:	d108      	bne.n	8008050 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	e00b      	b.n	8008068 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008054:	2b12      	cmp	r3, #18
 8008056:	d107      	bne.n	8008068 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008066:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 fa9b 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00d      	beq.n	800809c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800808a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800808e:	d103      	bne.n	8008098 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008096:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e035      	b.n	8008108 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080a4:	d108      	bne.n	80080b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80080a6:	897b      	ldrh	r3, [r7, #10]
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	461a      	mov	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80080b4:	611a      	str	r2, [r3, #16]
 80080b6:	e01b      	b.n	80080f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80080b8:	897b      	ldrh	r3, [r7, #10]
 80080ba:	11db      	asrs	r3, r3, #7
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	f003 0306 	and.w	r3, r3, #6
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	f063 030f 	orn	r3, r3, #15
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	490e      	ldr	r1, [pc, #56]	@ (8008110 <I2C_MasterRequestWrite+0xfc>)
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 fae4 	bl	80086a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e010      	b.n	8008108 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80080e6:	897b      	ldrh	r3, [r7, #10]
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	4907      	ldr	r1, [pc, #28]	@ (8008114 <I2C_MasterRequestWrite+0x100>)
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 fad4 	bl	80086a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e000      	b.n	8008108 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	00010008 	.word	0x00010008
 8008114:	00010002 	.word	0x00010002

08008118 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b088      	sub	sp, #32
 800811c:	af02      	add	r7, sp, #8
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	607a      	str	r2, [r7, #4]
 8008122:	603b      	str	r3, [r7, #0]
 8008124:	460b      	mov	r3, r1
 8008126:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800813c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	2b08      	cmp	r3, #8
 8008142:	d006      	beq.n	8008152 <I2C_MasterRequestRead+0x3a>
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d003      	beq.n	8008152 <I2C_MasterRequestRead+0x3a>
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008150:	d108      	bne.n	8008164 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	e00b      	b.n	800817c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008168:	2b11      	cmp	r3, #17
 800816a:	d107      	bne.n	800817c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800817a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 fa11 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00d      	beq.n	80081b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800819e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081a2:	d103      	bne.n	80081ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e079      	b.n	80082a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081b8:	d108      	bne.n	80081cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80081ba:	897b      	ldrh	r3, [r7, #10]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	f043 0301 	orr.w	r3, r3, #1
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	611a      	str	r2, [r3, #16]
 80081ca:	e05f      	b.n	800828c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80081cc:	897b      	ldrh	r3, [r7, #10]
 80081ce:	11db      	asrs	r3, r3, #7
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	f003 0306 	and.w	r3, r3, #6
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	f063 030f 	orn	r3, r3, #15
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	4930      	ldr	r1, [pc, #192]	@ (80082ac <I2C_MasterRequestRead+0x194>)
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 fa5a 	bl	80086a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e054      	b.n	80082a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80081fa:	897b      	ldrh	r3, [r7, #10]
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	4929      	ldr	r1, [pc, #164]	@ (80082b0 <I2C_MasterRequestRead+0x198>)
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 fa4a 	bl	80086a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e044      	b.n	80082a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800821a:	2300      	movs	r3, #0
 800821c:	613b      	str	r3, [r7, #16]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	613b      	str	r3, [r7, #16]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	613b      	str	r3, [r7, #16]
 800822e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800823e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f000 f9af 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00d      	beq.n	8008274 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008266:	d103      	bne.n	8008270 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800826e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e017      	b.n	80082a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008274:	897b      	ldrh	r3, [r7, #10]
 8008276:	11db      	asrs	r3, r3, #7
 8008278:	b2db      	uxtb	r3, r3
 800827a:	f003 0306 	and.w	r3, r3, #6
 800827e:	b2db      	uxtb	r3, r3
 8008280:	f063 030e 	orn	r3, r3, #14
 8008284:	b2da      	uxtb	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	4907      	ldr	r1, [pc, #28]	@ (80082b0 <I2C_MasterRequestRead+0x198>)
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 fa06 	bl	80086a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e000      	b.n	80082a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	00010008 	.word	0x00010008
 80082b0:	00010002 	.word	0x00010002

080082b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af02      	add	r7, sp, #8
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	4608      	mov	r0, r1
 80082be:	4611      	mov	r1, r2
 80082c0:	461a      	mov	r2, r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	817b      	strh	r3, [r7, #10]
 80082c6:	460b      	mov	r3, r1
 80082c8:	813b      	strh	r3, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 f960 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00d      	beq.n	8008312 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008304:	d103      	bne.n	800830e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800830c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e05f      	b.n	80083d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008312:	897b      	ldrh	r3, [r7, #10]
 8008314:	b2db      	uxtb	r3, r3
 8008316:	461a      	mov	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008320:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008324:	6a3a      	ldr	r2, [r7, #32]
 8008326:	492d      	ldr	r1, [pc, #180]	@ (80083dc <I2C_RequestMemoryWrite+0x128>)
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 f9bb 	bl	80086a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e04c      	b.n	80083d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008338:	2300      	movs	r3, #0
 800833a:	617b      	str	r3, [r7, #20]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	617b      	str	r3, [r7, #20]
 800834c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800834e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008350:	6a39      	ldr	r1, [r7, #32]
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 fa46 	bl	80087e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00d      	beq.n	800837a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008362:	2b04      	cmp	r3, #4
 8008364:	d107      	bne.n	8008376 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008374:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e02b      	b.n	80083d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800837a:	88fb      	ldrh	r3, [r7, #6]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d105      	bne.n	800838c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008380:	893b      	ldrh	r3, [r7, #8]
 8008382:	b2da      	uxtb	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	611a      	str	r2, [r3, #16]
 800838a:	e021      	b.n	80083d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800838c:	893b      	ldrh	r3, [r7, #8]
 800838e:	0a1b      	lsrs	r3, r3, #8
 8008390:	b29b      	uxth	r3, r3
 8008392:	b2da      	uxtb	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800839a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800839c:	6a39      	ldr	r1, [r7, #32]
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f000 fa20 	bl	80087e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00d      	beq.n	80083c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d107      	bne.n	80083c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e005      	b.n	80083d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083c6:	893b      	ldrh	r3, [r7, #8]
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3718      	adds	r7, #24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	00010002 	.word	0x00010002

080083e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b088      	sub	sp, #32
 80083e4:	af02      	add	r7, sp, #8
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	4608      	mov	r0, r1
 80083ea:	4611      	mov	r1, r2
 80083ec:	461a      	mov	r2, r3
 80083ee:	4603      	mov	r3, r0
 80083f0:	817b      	strh	r3, [r7, #10]
 80083f2:	460b      	mov	r3, r1
 80083f4:	813b      	strh	r3, [r7, #8]
 80083f6:	4613      	mov	r3, r2
 80083f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008408:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008418:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800841a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	2200      	movs	r2, #0
 8008422:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 f8c2 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00d      	beq.n	800844e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800843c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008440:	d103      	bne.n	800844a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008448:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e0aa      	b.n	80085a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800844e:	897b      	ldrh	r3, [r7, #10]
 8008450:	b2db      	uxtb	r3, r3
 8008452:	461a      	mov	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800845c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800845e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008460:	6a3a      	ldr	r2, [r7, #32]
 8008462:	4952      	ldr	r1, [pc, #328]	@ (80085ac <I2C_RequestMemoryRead+0x1cc>)
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 f91d 	bl	80086a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e097      	b.n	80085a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008474:	2300      	movs	r3, #0
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	617b      	str	r3, [r7, #20]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	617b      	str	r3, [r7, #20]
 8008488:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800848a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800848c:	6a39      	ldr	r1, [r7, #32]
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 f9a8 	bl	80087e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00d      	beq.n	80084b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d107      	bne.n	80084b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e076      	b.n	80085a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084b6:	88fb      	ldrh	r3, [r7, #6]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d105      	bne.n	80084c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084bc:	893b      	ldrh	r3, [r7, #8]
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	611a      	str	r2, [r3, #16]
 80084c6:	e021      	b.n	800850c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80084c8:	893b      	ldrh	r3, [r7, #8]
 80084ca:	0a1b      	lsrs	r3, r3, #8
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084d8:	6a39      	ldr	r1, [r7, #32]
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 f982 	bl	80087e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00d      	beq.n	8008502 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	d107      	bne.n	80084fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e050      	b.n	80085a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008502:	893b      	ldrh	r3, [r7, #8]
 8008504:	b2da      	uxtb	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800850c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800850e:	6a39      	ldr	r1, [r7, #32]
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 f967 	bl	80087e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00d      	beq.n	8008538 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008520:	2b04      	cmp	r3, #4
 8008522:	d107      	bne.n	8008534 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008532:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e035      	b.n	80085a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008546:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	2200      	movs	r2, #0
 8008550:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 f82b 	bl	80085b0 <I2C_WaitOnFlagUntilTimeout>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00d      	beq.n	800857c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800856a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800856e:	d103      	bne.n	8008578 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008576:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e013      	b.n	80085a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800857c:	897b      	ldrh	r3, [r7, #10]
 800857e:	b2db      	uxtb	r3, r3
 8008580:	f043 0301 	orr.w	r3, r3, #1
 8008584:	b2da      	uxtb	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800858c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858e:	6a3a      	ldr	r2, [r7, #32]
 8008590:	4906      	ldr	r1, [pc, #24]	@ (80085ac <I2C_RequestMemoryRead+0x1cc>)
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 f886 	bl	80086a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e000      	b.n	80085a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3718      	adds	r7, #24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	00010002 	.word	0x00010002

080085b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	4613      	mov	r3, r2
 80085be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085c0:	e048      	b.n	8008654 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c8:	d044      	beq.n	8008654 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ca:	f7fd fc77 	bl	8005ebc <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d302      	bcc.n	80085e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d139      	bne.n	8008654 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	0c1b      	lsrs	r3, r3, #16
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d10d      	bne.n	8008606 <I2C_WaitOnFlagUntilTimeout+0x56>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	43da      	mvns	r2, r3
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	4013      	ands	r3, r2
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bf0c      	ite	eq
 80085fc:	2301      	moveq	r3, #1
 80085fe:	2300      	movne	r3, #0
 8008600:	b2db      	uxtb	r3, r3
 8008602:	461a      	mov	r2, r3
 8008604:	e00c      	b.n	8008620 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	43da      	mvns	r2, r3
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	4013      	ands	r3, r2
 8008612:	b29b      	uxth	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	bf0c      	ite	eq
 8008618:	2301      	moveq	r3, #1
 800861a:	2300      	movne	r3, #0
 800861c:	b2db      	uxtb	r3, r3
 800861e:	461a      	mov	r2, r3
 8008620:	79fb      	ldrb	r3, [r7, #7]
 8008622:	429a      	cmp	r2, r3
 8008624:	d116      	bne.n	8008654 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2220      	movs	r2, #32
 8008630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008640:	f043 0220 	orr.w	r2, r3, #32
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e023      	b.n	800869c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	0c1b      	lsrs	r3, r3, #16
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b01      	cmp	r3, #1
 800865c:	d10d      	bne.n	800867a <I2C_WaitOnFlagUntilTimeout+0xca>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	43da      	mvns	r2, r3
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	4013      	ands	r3, r2
 800866a:	b29b      	uxth	r3, r3
 800866c:	2b00      	cmp	r3, #0
 800866e:	bf0c      	ite	eq
 8008670:	2301      	moveq	r3, #1
 8008672:	2300      	movne	r3, #0
 8008674:	b2db      	uxtb	r3, r3
 8008676:	461a      	mov	r2, r3
 8008678:	e00c      	b.n	8008694 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	43da      	mvns	r2, r3
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	4013      	ands	r3, r2
 8008686:	b29b      	uxth	r3, r3
 8008688:	2b00      	cmp	r3, #0
 800868a:	bf0c      	ite	eq
 800868c:	2301      	moveq	r3, #1
 800868e:	2300      	movne	r3, #0
 8008690:	b2db      	uxtb	r3, r3
 8008692:	461a      	mov	r2, r3
 8008694:	79fb      	ldrb	r3, [r7, #7]
 8008696:	429a      	cmp	r2, r3
 8008698:	d093      	beq.n	80085c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80086b2:	e071      	b.n	8008798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086c2:	d123      	bne.n	800870c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80086dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2220      	movs	r2, #32
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f8:	f043 0204 	orr.w	r2, r3, #4
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e067      	b.n	80087dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008712:	d041      	beq.n	8008798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008714:	f7fd fbd2 	bl	8005ebc <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	429a      	cmp	r2, r3
 8008722:	d302      	bcc.n	800872a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d136      	bne.n	8008798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	0c1b      	lsrs	r3, r3, #16
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b01      	cmp	r3, #1
 8008732:	d10c      	bne.n	800874e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	43da      	mvns	r2, r3
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	4013      	ands	r3, r2
 8008740:	b29b      	uxth	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	bf14      	ite	ne
 8008746:	2301      	movne	r3, #1
 8008748:	2300      	moveq	r3, #0
 800874a:	b2db      	uxtb	r3, r3
 800874c:	e00b      	b.n	8008766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	699b      	ldr	r3, [r3, #24]
 8008754:	43da      	mvns	r2, r3
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	4013      	ands	r3, r2
 800875a:	b29b      	uxth	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	bf14      	ite	ne
 8008760:	2301      	movne	r3, #1
 8008762:	2300      	moveq	r3, #0
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d016      	beq.n	8008798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2220      	movs	r2, #32
 8008774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008784:	f043 0220 	orr.w	r2, r3, #32
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e021      	b.n	80087dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	0c1b      	lsrs	r3, r3, #16
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d10c      	bne.n	80087bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	695b      	ldr	r3, [r3, #20]
 80087a8:	43da      	mvns	r2, r3
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	4013      	ands	r3, r2
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	bf14      	ite	ne
 80087b4:	2301      	movne	r3, #1
 80087b6:	2300      	moveq	r3, #0
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	e00b      	b.n	80087d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	43da      	mvns	r2, r3
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	4013      	ands	r3, r2
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	bf14      	ite	ne
 80087ce:	2301      	movne	r3, #1
 80087d0:	2300      	moveq	r3, #0
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f47f af6d 	bne.w	80086b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80087f0:	e034      	b.n	800885c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f000 f8e3 	bl	80089be <I2C_IsAcknowledgeFailed>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e034      	b.n	800886c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008808:	d028      	beq.n	800885c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800880a:	f7fd fb57 	bl	8005ebc <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	429a      	cmp	r2, r3
 8008818:	d302      	bcc.n	8008820 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d11d      	bne.n	800885c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800882a:	2b80      	cmp	r3, #128	@ 0x80
 800882c:	d016      	beq.n	800885c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2220      	movs	r2, #32
 8008838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008848:	f043 0220 	orr.w	r2, r3, #32
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e007      	b.n	800886c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008866:	2b80      	cmp	r3, #128	@ 0x80
 8008868:	d1c3      	bne.n	80087f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008880:	e034      	b.n	80088ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 f89b 	bl	80089be <I2C_IsAcknowledgeFailed>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e034      	b.n	80088fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008898:	d028      	beq.n	80088ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800889a:	f7fd fb0f 	bl	8005ebc <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d302      	bcc.n	80088b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d11d      	bne.n	80088ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	f003 0304 	and.w	r3, r3, #4
 80088ba:	2b04      	cmp	r3, #4
 80088bc:	d016      	beq.n	80088ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2220      	movs	r2, #32
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d8:	f043 0220 	orr.w	r2, r3, #32
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e007      	b.n	80088fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	f003 0304 	and.w	r3, r3, #4
 80088f6:	2b04      	cmp	r3, #4
 80088f8:	d1c3      	bne.n	8008882 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008910:	e049      	b.n	80089a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	f003 0310 	and.w	r3, r3, #16
 800891c:	2b10      	cmp	r3, #16
 800891e:	d119      	bne.n	8008954 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f06f 0210 	mvn.w	r2, #16
 8008928:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2220      	movs	r2, #32
 8008934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e030      	b.n	80089b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008954:	f7fd fab2 	bl	8005ebc <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	429a      	cmp	r2, r3
 8008962:	d302      	bcc.n	800896a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d11d      	bne.n	80089a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008974:	2b40      	cmp	r3, #64	@ 0x40
 8008976:	d016      	beq.n	80089a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2220      	movs	r2, #32
 8008982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008992:	f043 0220 	orr.w	r2, r3, #32
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e007      	b.n	80089b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089b0:	2b40      	cmp	r3, #64	@ 0x40
 80089b2:	d1ae      	bne.n	8008912 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80089be:	b480      	push	{r7}
 80089c0:	b083      	sub	sp, #12
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089d4:	d11b      	bne.n	8008a0e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80089de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2220      	movs	r2, #32
 80089ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fa:	f043 0204 	orr.w	r2, r3, #4
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bc80      	pop	{r7}
 8008a18:	4770      	bx	lr
	...

08008a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e272      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 8087 	beq.w	8008b4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a3c:	4b92      	ldr	r3, [pc, #584]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f003 030c 	and.w	r3, r3, #12
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d00c      	beq.n	8008a62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008a48:	4b8f      	ldr	r3, [pc, #572]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f003 030c 	and.w	r3, r3, #12
 8008a50:	2b08      	cmp	r3, #8
 8008a52:	d112      	bne.n	8008a7a <HAL_RCC_OscConfig+0x5e>
 8008a54:	4b8c      	ldr	r3, [pc, #560]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a60:	d10b      	bne.n	8008a7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a62:	4b89      	ldr	r3, [pc, #548]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d06c      	beq.n	8008b48 <HAL_RCC_OscConfig+0x12c>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d168      	bne.n	8008b48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e24c      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a82:	d106      	bne.n	8008a92 <HAL_RCC_OscConfig+0x76>
 8008a84:	4b80      	ldr	r3, [pc, #512]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a7f      	ldr	r2, [pc, #508]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a8e:	6013      	str	r3, [r2, #0]
 8008a90:	e02e      	b.n	8008af0 <HAL_RCC_OscConfig+0xd4>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10c      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x98>
 8008a9a:	4b7b      	ldr	r3, [pc, #492]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a7a      	ldr	r2, [pc, #488]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008aa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	4b78      	ldr	r3, [pc, #480]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a77      	ldr	r2, [pc, #476]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008aac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ab0:	6013      	str	r3, [r2, #0]
 8008ab2:	e01d      	b.n	8008af0 <HAL_RCC_OscConfig+0xd4>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008abc:	d10c      	bne.n	8008ad8 <HAL_RCC_OscConfig+0xbc>
 8008abe:	4b72      	ldr	r3, [pc, #456]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a71      	ldr	r2, [pc, #452]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008ac4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	4b6f      	ldr	r3, [pc, #444]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a6e      	ldr	r2, [pc, #440]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	e00b      	b.n	8008af0 <HAL_RCC_OscConfig+0xd4>
 8008ad8:	4b6b      	ldr	r3, [pc, #428]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a6a      	ldr	r2, [pc, #424]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	4b68      	ldr	r3, [pc, #416]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a67      	ldr	r2, [pc, #412]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008aee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d013      	beq.n	8008b20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008af8:	f7fd f9e0 	bl	8005ebc <HAL_GetTick>
 8008afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008afe:	e008      	b.n	8008b12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b00:	f7fd f9dc 	bl	8005ebc <HAL_GetTick>
 8008b04:	4602      	mov	r2, r0
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	2b64      	cmp	r3, #100	@ 0x64
 8008b0c:	d901      	bls.n	8008b12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e200      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b12:	4b5d      	ldr	r3, [pc, #372]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d0f0      	beq.n	8008b00 <HAL_RCC_OscConfig+0xe4>
 8008b1e:	e014      	b.n	8008b4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b20:	f7fd f9cc 	bl	8005ebc <HAL_GetTick>
 8008b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b26:	e008      	b.n	8008b3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b28:	f7fd f9c8 	bl	8005ebc <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b64      	cmp	r3, #100	@ 0x64
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e1ec      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b3a:	4b53      	ldr	r3, [pc, #332]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1f0      	bne.n	8008b28 <HAL_RCC_OscConfig+0x10c>
 8008b46:	e000      	b.n	8008b4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d063      	beq.n	8008c1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b56:	4b4c      	ldr	r3, [pc, #304]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f003 030c 	and.w	r3, r3, #12
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00b      	beq.n	8008b7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008b62:	4b49      	ldr	r3, [pc, #292]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f003 030c 	and.w	r3, r3, #12
 8008b6a:	2b08      	cmp	r3, #8
 8008b6c:	d11c      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x18c>
 8008b6e:	4b46      	ldr	r3, [pc, #280]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d116      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b7a:	4b43      	ldr	r3, [pc, #268]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 0302 	and.w	r3, r3, #2
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d005      	beq.n	8008b92 <HAL_RCC_OscConfig+0x176>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d001      	beq.n	8008b92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e1c0      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b92:	4b3d      	ldr	r3, [pc, #244]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	00db      	lsls	r3, r3, #3
 8008ba0:	4939      	ldr	r1, [pc, #228]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ba6:	e03a      	b.n	8008c1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d020      	beq.n	8008bf2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bb0:	4b36      	ldr	r3, [pc, #216]	@ (8008c8c <HAL_RCC_OscConfig+0x270>)
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bb6:	f7fd f981 	bl	8005ebc <HAL_GetTick>
 8008bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bbc:	e008      	b.n	8008bd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bbe:	f7fd f97d 	bl	8005ebc <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d901      	bls.n	8008bd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e1a1      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0f0      	beq.n	8008bbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	00db      	lsls	r3, r3, #3
 8008bea:	4927      	ldr	r1, [pc, #156]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	600b      	str	r3, [r1, #0]
 8008bf0:	e015      	b.n	8008c1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bf2:	4b26      	ldr	r3, [pc, #152]	@ (8008c8c <HAL_RCC_OscConfig+0x270>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bf8:	f7fd f960 	bl	8005ebc <HAL_GetTick>
 8008bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bfe:	e008      	b.n	8008c12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c00:	f7fd f95c 	bl	8005ebc <HAL_GetTick>
 8008c04:	4602      	mov	r2, r0
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d901      	bls.n	8008c12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e180      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c12:	4b1d      	ldr	r3, [pc, #116]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0302 	and.w	r3, r3, #2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1f0      	bne.n	8008c00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0308 	and.w	r3, r3, #8
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d03a      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d019      	beq.n	8008c66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c32:	4b17      	ldr	r3, [pc, #92]	@ (8008c90 <HAL_RCC_OscConfig+0x274>)
 8008c34:	2201      	movs	r2, #1
 8008c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c38:	f7fd f940 	bl	8005ebc <HAL_GetTick>
 8008c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c3e:	e008      	b.n	8008c52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c40:	f7fd f93c 	bl	8005ebc <HAL_GetTick>
 8008c44:	4602      	mov	r2, r0
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d901      	bls.n	8008c52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e160      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c52:	4b0d      	ldr	r3, [pc, #52]	@ (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c56:	f003 0302 	and.w	r3, r3, #2
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d0f0      	beq.n	8008c40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008c5e:	2001      	movs	r0, #1
 8008c60:	f000 fafe 	bl	8009260 <RCC_Delay>
 8008c64:	e01c      	b.n	8008ca0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c66:	4b0a      	ldr	r3, [pc, #40]	@ (8008c90 <HAL_RCC_OscConfig+0x274>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c6c:	f7fd f926 	bl	8005ebc <HAL_GetTick>
 8008c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c72:	e00f      	b.n	8008c94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c74:	f7fd f922 	bl	8005ebc <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d908      	bls.n	8008c94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e146      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
 8008c86:	bf00      	nop
 8008c88:	40021000 	.word	0x40021000
 8008c8c:	42420000 	.word	0x42420000
 8008c90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c94:	4b92      	ldr	r3, [pc, #584]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c98:	f003 0302 	and.w	r3, r3, #2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e9      	bne.n	8008c74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0304 	and.w	r3, r3, #4
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f000 80a6 	beq.w	8008dfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cb2:	4b8b      	ldr	r3, [pc, #556]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10d      	bne.n	8008cda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cbe:	4b88      	ldr	r3, [pc, #544]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	4a87      	ldr	r2, [pc, #540]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cc8:	61d3      	str	r3, [r2, #28]
 8008cca:	4b85      	ldr	r3, [pc, #532]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cd2:	60bb      	str	r3, [r7, #8]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cda:	4b82      	ldr	r3, [pc, #520]	@ (8008ee4 <HAL_RCC_OscConfig+0x4c8>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d118      	bne.n	8008d18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ce6:	4b7f      	ldr	r3, [pc, #508]	@ (8008ee4 <HAL_RCC_OscConfig+0x4c8>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a7e      	ldr	r2, [pc, #504]	@ (8008ee4 <HAL_RCC_OscConfig+0x4c8>)
 8008cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cf2:	f7fd f8e3 	bl	8005ebc <HAL_GetTick>
 8008cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cf8:	e008      	b.n	8008d0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cfa:	f7fd f8df 	bl	8005ebc <HAL_GetTick>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	2b64      	cmp	r3, #100	@ 0x64
 8008d06:	d901      	bls.n	8008d0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e103      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d0c:	4b75      	ldr	r3, [pc, #468]	@ (8008ee4 <HAL_RCC_OscConfig+0x4c8>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0f0      	beq.n	8008cfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d106      	bne.n	8008d2e <HAL_RCC_OscConfig+0x312>
 8008d20:	4b6f      	ldr	r3, [pc, #444]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d22:	6a1b      	ldr	r3, [r3, #32]
 8008d24:	4a6e      	ldr	r2, [pc, #440]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d26:	f043 0301 	orr.w	r3, r3, #1
 8008d2a:	6213      	str	r3, [r2, #32]
 8008d2c:	e02d      	b.n	8008d8a <HAL_RCC_OscConfig+0x36e>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10c      	bne.n	8008d50 <HAL_RCC_OscConfig+0x334>
 8008d36:	4b6a      	ldr	r3, [pc, #424]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	4a69      	ldr	r2, [pc, #420]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d3c:	f023 0301 	bic.w	r3, r3, #1
 8008d40:	6213      	str	r3, [r2, #32]
 8008d42:	4b67      	ldr	r3, [pc, #412]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	4a66      	ldr	r2, [pc, #408]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d48:	f023 0304 	bic.w	r3, r3, #4
 8008d4c:	6213      	str	r3, [r2, #32]
 8008d4e:	e01c      	b.n	8008d8a <HAL_RCC_OscConfig+0x36e>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	2b05      	cmp	r3, #5
 8008d56:	d10c      	bne.n	8008d72 <HAL_RCC_OscConfig+0x356>
 8008d58:	4b61      	ldr	r3, [pc, #388]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d5a:	6a1b      	ldr	r3, [r3, #32]
 8008d5c:	4a60      	ldr	r2, [pc, #384]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d5e:	f043 0304 	orr.w	r3, r3, #4
 8008d62:	6213      	str	r3, [r2, #32]
 8008d64:	4b5e      	ldr	r3, [pc, #376]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d66:	6a1b      	ldr	r3, [r3, #32]
 8008d68:	4a5d      	ldr	r2, [pc, #372]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d6a:	f043 0301 	orr.w	r3, r3, #1
 8008d6e:	6213      	str	r3, [r2, #32]
 8008d70:	e00b      	b.n	8008d8a <HAL_RCC_OscConfig+0x36e>
 8008d72:	4b5b      	ldr	r3, [pc, #364]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	4a5a      	ldr	r2, [pc, #360]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d78:	f023 0301 	bic.w	r3, r3, #1
 8008d7c:	6213      	str	r3, [r2, #32]
 8008d7e:	4b58      	ldr	r3, [pc, #352]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	4a57      	ldr	r2, [pc, #348]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d84:	f023 0304 	bic.w	r3, r3, #4
 8008d88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d015      	beq.n	8008dbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d92:	f7fd f893 	bl	8005ebc <HAL_GetTick>
 8008d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d98:	e00a      	b.n	8008db0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d9a:	f7fd f88f 	bl	8005ebc <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d901      	bls.n	8008db0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e0b1      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008db0:	4b4b      	ldr	r3, [pc, #300]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008db2:	6a1b      	ldr	r3, [r3, #32]
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d0ee      	beq.n	8008d9a <HAL_RCC_OscConfig+0x37e>
 8008dbc:	e014      	b.n	8008de8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dbe:	f7fd f87d 	bl	8005ebc <HAL_GetTick>
 8008dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dc4:	e00a      	b.n	8008ddc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dc6:	f7fd f879 	bl	8005ebc <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d901      	bls.n	8008ddc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e09b      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ddc:	4b40      	ldr	r3, [pc, #256]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	f003 0302 	and.w	r3, r3, #2
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1ee      	bne.n	8008dc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008de8:	7dfb      	ldrb	r3, [r7, #23]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d105      	bne.n	8008dfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dee:	4b3c      	ldr	r3, [pc, #240]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	4a3b      	ldr	r2, [pc, #236]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008df4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008df8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 8087 	beq.w	8008f12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e04:	4b36      	ldr	r3, [pc, #216]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f003 030c 	and.w	r3, r3, #12
 8008e0c:	2b08      	cmp	r3, #8
 8008e0e:	d061      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d146      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e18:	4b33      	ldr	r3, [pc, #204]	@ (8008ee8 <HAL_RCC_OscConfig+0x4cc>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e1e:	f7fd f84d 	bl	8005ebc <HAL_GetTick>
 8008e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e24:	e008      	b.n	8008e38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e26:	f7fd f849 	bl	8005ebc <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d901      	bls.n	8008e38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e06d      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e38:	4b29      	ldr	r3, [pc, #164]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1f0      	bne.n	8008e26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a1b      	ldr	r3, [r3, #32]
 8008e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e4c:	d108      	bne.n	8008e60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008e4e:	4b24      	ldr	r3, [pc, #144]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	4921      	ldr	r1, [pc, #132]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e60:	4b1f      	ldr	r3, [pc, #124]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a19      	ldr	r1, [r3, #32]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e70:	430b      	orrs	r3, r1
 8008e72:	491b      	ldr	r1, [pc, #108]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008e74:	4313      	orrs	r3, r2
 8008e76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e78:	4b1b      	ldr	r3, [pc, #108]	@ (8008ee8 <HAL_RCC_OscConfig+0x4cc>)
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e7e:	f7fd f81d 	bl	8005ebc <HAL_GetTick>
 8008e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008e84:	e008      	b.n	8008e98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e86:	f7fd f819 	bl	8005ebc <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d901      	bls.n	8008e98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e03d      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008e98:	4b11      	ldr	r3, [pc, #68]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0f0      	beq.n	8008e86 <HAL_RCC_OscConfig+0x46a>
 8008ea4:	e035      	b.n	8008f12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ea6:	4b10      	ldr	r3, [pc, #64]	@ (8008ee8 <HAL_RCC_OscConfig+0x4cc>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eac:	f7fd f806 	bl	8005ebc <HAL_GetTick>
 8008eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008eb2:	e008      	b.n	8008ec6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eb4:	f7fd f802 	bl	8005ebc <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d901      	bls.n	8008ec6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e026      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ec6:	4b06      	ldr	r3, [pc, #24]	@ (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1f0      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x498>
 8008ed2:	e01e      	b.n	8008f12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	69db      	ldr	r3, [r3, #28]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d107      	bne.n	8008eec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e019      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
 8008ee0:	40021000 	.word	0x40021000
 8008ee4:	40007000 	.word	0x40007000
 8008ee8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008eec:	4b0b      	ldr	r3, [pc, #44]	@ (8008f1c <HAL_RCC_OscConfig+0x500>)
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d106      	bne.n	8008f0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d001      	beq.n	8008f12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e000      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	40021000 	.word	0x40021000

08008f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e0d0      	b.n	80090d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f34:	4b6a      	ldr	r3, [pc, #424]	@ (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0307 	and.w	r3, r3, #7
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d910      	bls.n	8008f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f42:	4b67      	ldr	r3, [pc, #412]	@ (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f023 0207 	bic.w	r2, r3, #7
 8008f4a:	4965      	ldr	r1, [pc, #404]	@ (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f52:	4b63      	ldr	r3, [pc, #396]	@ (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0307 	and.w	r3, r3, #7
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d001      	beq.n	8008f64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e0b8      	b.n	80090d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d020      	beq.n	8008fb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0304 	and.w	r3, r3, #4
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d005      	beq.n	8008f88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f7c:	4b59      	ldr	r3, [pc, #356]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	4a58      	ldr	r2, [pc, #352]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008f86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0308 	and.w	r3, r3, #8
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d005      	beq.n	8008fa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f94:	4b53      	ldr	r3, [pc, #332]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	4a52      	ldr	r2, [pc, #328]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f9a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008f9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fa0:	4b50      	ldr	r3, [pc, #320]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	494d      	ldr	r1, [pc, #308]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d040      	beq.n	8009040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d107      	bne.n	8008fd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fc6:	4b47      	ldr	r3, [pc, #284]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d115      	bne.n	8008ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e07f      	b.n	80090d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d107      	bne.n	8008fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fde:	4b41      	ldr	r3, [pc, #260]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d109      	bne.n	8008ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e073      	b.n	80090d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fee:	4b3d      	ldr	r3, [pc, #244]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0302 	and.w	r3, r3, #2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e06b      	b.n	80090d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ffe:	4b39      	ldr	r3, [pc, #228]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f023 0203 	bic.w	r2, r3, #3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	4936      	ldr	r1, [pc, #216]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 800900c:	4313      	orrs	r3, r2
 800900e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009010:	f7fc ff54 	bl	8005ebc <HAL_GetTick>
 8009014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009016:	e00a      	b.n	800902e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009018:	f7fc ff50 	bl	8005ebc <HAL_GetTick>
 800901c:	4602      	mov	r2, r0
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009026:	4293      	cmp	r3, r2
 8009028:	d901      	bls.n	800902e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e053      	b.n	80090d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800902e:	4b2d      	ldr	r3, [pc, #180]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f003 020c 	and.w	r2, r3, #12
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	429a      	cmp	r2, r3
 800903e:	d1eb      	bne.n	8009018 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009040:	4b27      	ldr	r3, [pc, #156]	@ (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0307 	and.w	r3, r3, #7
 8009048:	683a      	ldr	r2, [r7, #0]
 800904a:	429a      	cmp	r2, r3
 800904c:	d210      	bcs.n	8009070 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800904e:	4b24      	ldr	r3, [pc, #144]	@ (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f023 0207 	bic.w	r2, r3, #7
 8009056:	4922      	ldr	r1, [pc, #136]	@ (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	4313      	orrs	r3, r2
 800905c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800905e:	4b20      	ldr	r3, [pc, #128]	@ (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	429a      	cmp	r2, r3
 800906a:	d001      	beq.n	8009070 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e032      	b.n	80090d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0304 	and.w	r3, r3, #4
 8009078:	2b00      	cmp	r3, #0
 800907a:	d008      	beq.n	800908e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800907c:	4b19      	ldr	r3, [pc, #100]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	4916      	ldr	r1, [pc, #88]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 800908a:	4313      	orrs	r3, r2
 800908c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0308 	and.w	r3, r3, #8
 8009096:	2b00      	cmp	r3, #0
 8009098:	d009      	beq.n	80090ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800909a:	4b12      	ldr	r3, [pc, #72]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	490e      	ldr	r1, [pc, #56]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80090ae:	f000 f821 	bl	80090f4 <HAL_RCC_GetSysClockFreq>
 80090b2:	4602      	mov	r2, r0
 80090b4:	4b0b      	ldr	r3, [pc, #44]	@ (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	091b      	lsrs	r3, r3, #4
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	490a      	ldr	r1, [pc, #40]	@ (80090e8 <HAL_RCC_ClockConfig+0x1c8>)
 80090c0:	5ccb      	ldrb	r3, [r1, r3]
 80090c2:	fa22 f303 	lsr.w	r3, r2, r3
 80090c6:	4a09      	ldr	r2, [pc, #36]	@ (80090ec <HAL_RCC_ClockConfig+0x1cc>)
 80090c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80090ca:	4b09      	ldr	r3, [pc, #36]	@ (80090f0 <HAL_RCC_ClockConfig+0x1d0>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fb faea 	bl	80046a8 <HAL_InitTick>

  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	40022000 	.word	0x40022000
 80090e4:	40021000 	.word	0x40021000
 80090e8:	080131bc 	.word	0x080131bc
 80090ec:	20000028 	.word	0x20000028
 80090f0:	20000038 	.word	0x20000038

080090f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60fb      	str	r3, [r7, #12]
 80090fe:	2300      	movs	r3, #0
 8009100:	60bb      	str	r3, [r7, #8]
 8009102:	2300      	movs	r3, #0
 8009104:	617b      	str	r3, [r7, #20]
 8009106:	2300      	movs	r3, #0
 8009108:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800910a:	2300      	movs	r3, #0
 800910c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800910e:	4b1e      	ldr	r3, [pc, #120]	@ (8009188 <HAL_RCC_GetSysClockFreq+0x94>)
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f003 030c 	and.w	r3, r3, #12
 800911a:	2b04      	cmp	r3, #4
 800911c:	d002      	beq.n	8009124 <HAL_RCC_GetSysClockFreq+0x30>
 800911e:	2b08      	cmp	r3, #8
 8009120:	d003      	beq.n	800912a <HAL_RCC_GetSysClockFreq+0x36>
 8009122:	e027      	b.n	8009174 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009124:	4b19      	ldr	r3, [pc, #100]	@ (800918c <HAL_RCC_GetSysClockFreq+0x98>)
 8009126:	613b      	str	r3, [r7, #16]
      break;
 8009128:	e027      	b.n	800917a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	0c9b      	lsrs	r3, r3, #18
 800912e:	f003 030f 	and.w	r3, r3, #15
 8009132:	4a17      	ldr	r2, [pc, #92]	@ (8009190 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009134:	5cd3      	ldrb	r3, [r2, r3]
 8009136:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d010      	beq.n	8009164 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009142:	4b11      	ldr	r3, [pc, #68]	@ (8009188 <HAL_RCC_GetSysClockFreq+0x94>)
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	0c5b      	lsrs	r3, r3, #17
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	4a11      	ldr	r2, [pc, #68]	@ (8009194 <HAL_RCC_GetSysClockFreq+0xa0>)
 800914e:	5cd3      	ldrb	r3, [r2, r3]
 8009150:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a0d      	ldr	r2, [pc, #52]	@ (800918c <HAL_RCC_GetSysClockFreq+0x98>)
 8009156:	fb03 f202 	mul.w	r2, r3, r2
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	e004      	b.n	800916e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a0c      	ldr	r2, [pc, #48]	@ (8009198 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009168:	fb02 f303 	mul.w	r3, r2, r3
 800916c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	613b      	str	r3, [r7, #16]
      break;
 8009172:	e002      	b.n	800917a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009174:	4b05      	ldr	r3, [pc, #20]	@ (800918c <HAL_RCC_GetSysClockFreq+0x98>)
 8009176:	613b      	str	r3, [r7, #16]
      break;
 8009178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800917a:	693b      	ldr	r3, [r7, #16]
}
 800917c:	4618      	mov	r0, r3
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	bc80      	pop	{r7}
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	40021000 	.word	0x40021000
 800918c:	007a1200 	.word	0x007a1200
 8009190:	080131d4 	.word	0x080131d4
 8009194:	080131e4 	.word	0x080131e4
 8009198:	003d0900 	.word	0x003d0900

0800919c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091a0:	4b02      	ldr	r3, [pc, #8]	@ (80091ac <HAL_RCC_GetHCLKFreq+0x10>)
 80091a2:	681b      	ldr	r3, [r3, #0]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bc80      	pop	{r7}
 80091aa:	4770      	bx	lr
 80091ac:	20000028 	.word	0x20000028

080091b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80091b4:	f7ff fff2 	bl	800919c <HAL_RCC_GetHCLKFreq>
 80091b8:	4602      	mov	r2, r0
 80091ba:	4b05      	ldr	r3, [pc, #20]	@ (80091d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	0a1b      	lsrs	r3, r3, #8
 80091c0:	f003 0307 	and.w	r3, r3, #7
 80091c4:	4903      	ldr	r1, [pc, #12]	@ (80091d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091c6:	5ccb      	ldrb	r3, [r1, r3]
 80091c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	40021000 	.word	0x40021000
 80091d4:	080131cc 	.word	0x080131cc

080091d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80091dc:	f7ff ffde 	bl	800919c <HAL_RCC_GetHCLKFreq>
 80091e0:	4602      	mov	r2, r0
 80091e2:	4b05      	ldr	r3, [pc, #20]	@ (80091f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	0adb      	lsrs	r3, r3, #11
 80091e8:	f003 0307 	and.w	r3, r3, #7
 80091ec:	4903      	ldr	r1, [pc, #12]	@ (80091fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80091ee:	5ccb      	ldrb	r3, [r1, r3]
 80091f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	40021000 	.word	0x40021000
 80091fc:	080131cc 	.word	0x080131cc

08009200 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	220f      	movs	r2, #15
 800920e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009210:	4b11      	ldr	r3, [pc, #68]	@ (8009258 <HAL_RCC_GetClockConfig+0x58>)
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f003 0203 	and.w	r2, r3, #3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800921c:	4b0e      	ldr	r3, [pc, #56]	@ (8009258 <HAL_RCC_GetClockConfig+0x58>)
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009228:	4b0b      	ldr	r3, [pc, #44]	@ (8009258 <HAL_RCC_GetClockConfig+0x58>)
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009234:	4b08      	ldr	r3, [pc, #32]	@ (8009258 <HAL_RCC_GetClockConfig+0x58>)
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	08db      	lsrs	r3, r3, #3
 800923a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009242:	4b06      	ldr	r3, [pc, #24]	@ (800925c <HAL_RCC_GetClockConfig+0x5c>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0207 	and.w	r2, r3, #7
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800924e:	bf00      	nop
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	bc80      	pop	{r7}
 8009256:	4770      	bx	lr
 8009258:	40021000 	.word	0x40021000
 800925c:	40022000 	.word	0x40022000

08009260 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009268:	4b0a      	ldr	r3, [pc, #40]	@ (8009294 <RCC_Delay+0x34>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a0a      	ldr	r2, [pc, #40]	@ (8009298 <RCC_Delay+0x38>)
 800926e:	fba2 2303 	umull	r2, r3, r2, r3
 8009272:	0a5b      	lsrs	r3, r3, #9
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	fb02 f303 	mul.w	r3, r2, r3
 800927a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800927c:	bf00      	nop
  }
  while (Delay --);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	1e5a      	subs	r2, r3, #1
 8009282:	60fa      	str	r2, [r7, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1f9      	bne.n	800927c <RCC_Delay+0x1c>
}
 8009288:	bf00      	nop
 800928a:	bf00      	nop
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	bc80      	pop	{r7}
 8009292:	4770      	bx	lr
 8009294:	20000028 	.word	0x20000028
 8009298:	10624dd3 	.word	0x10624dd3

0800929c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e022      	b.n	80092f4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d105      	bne.n	80092c6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7fb f95f 	bl	8004584 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2203      	movs	r2, #3
 80092ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f814 	bl	80092fc <HAL_SD_InitCard>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d001      	beq.n	80092de <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e00a      	b.n	80092f4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80092fc:	b5b0      	push	{r4, r5, r7, lr}
 80092fe:	b08e      	sub	sp, #56	@ 0x38
 8009300:	af04      	add	r7, sp, #16
 8009302:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009304:	2300      	movs	r3, #0
 8009306:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009308:	2300      	movs	r3, #0
 800930a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800930c:	2300      	movs	r3, #0
 800930e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009310:	2300      	movs	r3, #0
 8009312:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009314:	2300      	movs	r3, #0
 8009316:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009318:	2376      	movs	r3, #118	@ 0x76
 800931a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681d      	ldr	r5, [r3, #0]
 8009320:	466c      	mov	r4, sp
 8009322:	f107 0314 	add.w	r3, r7, #20
 8009326:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800932a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800932e:	f107 0308 	add.w	r3, r7, #8
 8009332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009334:	4628      	mov	r0, r5
 8009336:	f002 fec3 	bl	800c0c0 <SDIO_Init>
 800933a:	4603      	mov	r3, r0
 800933c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8009340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e04f      	b.n	80093ec <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800934c:	4b29      	ldr	r3, [pc, #164]	@ (80093f4 <HAL_SD_InitCard+0xf8>)
 800934e:	2200      	movs	r2, #0
 8009350:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4618      	mov	r0, r3
 8009358:	f002 fef8 	bl	800c14c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800935c:	4b25      	ldr	r3, [pc, #148]	@ (80093f4 <HAL_SD_InitCard+0xf8>)
 800935e:	2201      	movs	r2, #1
 8009360:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009362:	2002      	movs	r0, #2
 8009364:	f7fc fdb4 	bl	8005ed0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fe69 	bl	800a040 <SD_PowerON>
 800936e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00b      	beq.n	800938e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009382:	6a3b      	ldr	r3, [r7, #32]
 8009384:	431a      	orrs	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e02e      	b.n	80093ec <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fd87 	bl	8009ea2 <SD_InitCard>
 8009394:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00b      	beq.n	80093b4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	431a      	orrs	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e01b      	b.n	80093ec <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80093bc:	4618      	mov	r0, r3
 80093be:	f002 ff51 	bl	800c264 <SDMMC_CmdBlockLength>
 80093c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00f      	beq.n	80093ea <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a0a      	ldr	r2, [pc, #40]	@ (80093f8 <HAL_SD_InitCard+0xfc>)
 80093d0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	431a      	orrs	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2201      	movs	r2, #1
 80093e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e000      	b.n	80093ec <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3728      	adds	r7, #40	@ 0x28
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bdb0      	pop	{r4, r5, r7, pc}
 80093f4:	423000a0 	.word	0x423000a0
 80093f8:	004005ff 	.word	0x004005ff

080093fc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b092      	sub	sp, #72	@ 0x48
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
 8009408:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800940a:	f7fc fd57 	bl	8005ebc <HAL_GetTick>
 800940e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d107      	bne.n	800942e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009422:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e1bd      	b.n	80097aa <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2b01      	cmp	r3, #1
 8009438:	f040 81b0 	bne.w	800979c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009442:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	441a      	add	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800944c:	429a      	cmp	r2, r3
 800944e:	d907      	bls.n	8009460 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009454:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e1a4      	b.n	80097aa <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2203      	movs	r2, #3
 8009464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2200      	movs	r2, #0
 800946e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009474:	2b01      	cmp	r3, #1
 8009476:	d002      	beq.n	800947e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800947a:	025b      	lsls	r3, r3, #9
 800947c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800947e:	f04f 33ff 	mov.w	r3, #4294967295
 8009482:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	025b      	lsls	r3, r3, #9
 8009488:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800948a:	2390      	movs	r3, #144	@ 0x90
 800948c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800948e:	2302      	movs	r3, #2
 8009490:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009492:	2300      	movs	r3, #0
 8009494:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009496:	2301      	movs	r3, #1
 8009498:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f107 0214 	add.w	r2, r7, #20
 80094a2:	4611      	mov	r1, r2
 80094a4:	4618      	mov	r0, r3
 80094a6:	f002 feb2 	bl	800c20e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d90a      	bls.n	80094c6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2202      	movs	r2, #2
 80094b4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80094bc:	4618      	mov	r0, r3
 80094be:	f002 ff15 	bl	800c2ec <SDMMC_CmdReadMultiBlock>
 80094c2:	6478      	str	r0, [r7, #68]	@ 0x44
 80094c4:	e009      	b.n	80094da <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2201      	movs	r2, #1
 80094ca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80094d2:	4618      	mov	r0, r3
 80094d4:	f002 fee8 	bl	800c2a8 <SDMMC_CmdReadSingleBlock>
 80094d8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80094da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d012      	beq.n	8009506 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a7a      	ldr	r2, [pc, #488]	@ (80096d0 <HAL_SD_ReadBlocks+0x2d4>)
 80094e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094ee:	431a      	orrs	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e151      	b.n	80097aa <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800950a:	e061      	b.n	80095d0 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009512:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009516:	2b00      	cmp	r3, #0
 8009518:	d03c      	beq.n	8009594 <HAL_SD_ReadBlocks+0x198>
 800951a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d039      	beq.n	8009594 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009520:	2300      	movs	r3, #0
 8009522:	643b      	str	r3, [r7, #64]	@ 0x40
 8009524:	e033      	b.n	800958e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4618      	mov	r0, r3
 800952c:	f002 fdf2 	bl	800c114 <SDIO_ReadFIFO>
 8009530:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009534:	b2da      	uxtb	r2, r3
 8009536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009538:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800953a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800953c:	3301      	adds	r3, #1
 800953e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009542:	3b01      	subs	r3, #1
 8009544:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009548:	0a1b      	lsrs	r3, r3, #8
 800954a:	b2da      	uxtb	r2, r3
 800954c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800954e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009552:	3301      	adds	r3, #1
 8009554:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009558:	3b01      	subs	r3, #1
 800955a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800955c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800955e:	0c1b      	lsrs	r3, r3, #16
 8009560:	b2da      	uxtb	r2, r3
 8009562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009564:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009568:	3301      	adds	r3, #1
 800956a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800956c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800956e:	3b01      	subs	r3, #1
 8009570:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009574:	0e1b      	lsrs	r3, r3, #24
 8009576:	b2da      	uxtb	r2, r3
 8009578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800957c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957e:	3301      	adds	r3, #1
 8009580:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009584:	3b01      	subs	r3, #1
 8009586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8009588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800958a:	3301      	adds	r3, #1
 800958c:	643b      	str	r3, [r7, #64]	@ 0x40
 800958e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009590:	2b07      	cmp	r3, #7
 8009592:	d9c8      	bls.n	8009526 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009594:	f7fc fc92 	bl	8005ebc <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d902      	bls.n	80095aa <HAL_SD_ReadBlocks+0x1ae>
 80095a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d112      	bne.n	80095d0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a48      	ldr	r2, [pc, #288]	@ (80096d0 <HAL_SD_ReadBlocks+0x2d4>)
 80095b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e0ec      	b.n	80097aa <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095d6:	f240 332a 	movw	r3, #810	@ 0x32a
 80095da:	4013      	ands	r3, r2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d095      	beq.n	800950c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d022      	beq.n	8009634 <HAL_SD_ReadBlocks+0x238>
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d91f      	bls.n	8009634 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d01b      	beq.n	8009634 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4618      	mov	r0, r3
 8009602:	f002 fed9 	bl	800c3b8 <SDMMC_CmdStopTransfer>
 8009606:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800960a:	2b00      	cmp	r3, #0
 800960c:	d012      	beq.n	8009634 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a2f      	ldr	r2, [pc, #188]	@ (80096d0 <HAL_SD_ReadBlocks+0x2d4>)
 8009614:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800961a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800961c:	431a      	orrs	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e0ba      	b.n	80097aa <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800963a:	f003 0308 	and.w	r3, r3, #8
 800963e:	2b00      	cmp	r3, #0
 8009640:	d012      	beq.n	8009668 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a22      	ldr	r2, [pc, #136]	@ (80096d0 <HAL_SD_ReadBlocks+0x2d4>)
 8009648:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800964e:	f043 0208 	orr.w	r2, r3, #8
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e0a0      	b.n	80097aa <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800966e:	f003 0302 	and.w	r3, r3, #2
 8009672:	2b00      	cmp	r3, #0
 8009674:	d012      	beq.n	800969c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a15      	ldr	r2, [pc, #84]	@ (80096d0 <HAL_SD_ReadBlocks+0x2d4>)
 800967c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009682:	f043 0202 	orr.w	r2, r3, #2
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e086      	b.n	80097aa <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096a2:	f003 0320 	and.w	r3, r3, #32
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d063      	beq.n	8009772 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a08      	ldr	r2, [pc, #32]	@ (80096d0 <HAL_SD_ReadBlocks+0x2d4>)
 80096b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b6:	f043 0220 	orr.w	r2, r3, #32
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e06c      	b.n	80097aa <HAL_SD_ReadBlocks+0x3ae>
 80096d0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4618      	mov	r0, r3
 80096da:	f002 fd1b 	bl	800c114 <SDIO_ReadFIFO>
 80096de:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80096e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80096e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ea:	3301      	adds	r3, #1
 80096ec:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80096ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096f0:	3b01      	subs	r3, #1
 80096f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80096f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f6:	0a1b      	lsrs	r3, r3, #8
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096fc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80096fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009700:	3301      	adds	r3, #1
 8009702:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009706:	3b01      	subs	r3, #1
 8009708:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800970a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970c:	0c1b      	lsrs	r3, r3, #16
 800970e:	b2da      	uxtb	r2, r3
 8009710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009712:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009716:	3301      	adds	r3, #1
 8009718:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800971a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800971c:	3b01      	subs	r3, #1
 800971e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009722:	0e1b      	lsrs	r3, r3, #24
 8009724:	b2da      	uxtb	r2, r3
 8009726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009728:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800972a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800972c:	3301      	adds	r3, #1
 800972e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009732:	3b01      	subs	r3, #1
 8009734:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009736:	f7fc fbc1 	bl	8005ebc <HAL_GetTick>
 800973a:	4602      	mov	r2, r0
 800973c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009742:	429a      	cmp	r2, r3
 8009744:	d902      	bls.n	800974c <HAL_SD_ReadBlocks+0x350>
 8009746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009748:	2b00      	cmp	r3, #0
 800974a:	d112      	bne.n	8009772 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a18      	ldr	r2, [pc, #96]	@ (80097b4 <HAL_SD_ReadBlocks+0x3b8>)
 8009752:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009758:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e01b      	b.n	80097aa <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009778:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d002      	beq.n	8009786 <HAL_SD_ReadBlocks+0x38a>
 8009780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1a6      	bne.n	80096d4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800978e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	e006      	b.n	80097aa <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
  }
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3748      	adds	r7, #72	@ 0x48
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	004005ff 	.word	0x004005ff

080097b8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b092      	sub	sp, #72	@ 0x48
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80097c6:	f7fc fb79 	bl	8005ebc <HAL_GetTick>
 80097ca:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d107      	bne.n	80097ea <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e166      	b.n	8009ab8 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	f040 8159 	bne.w	8009aaa <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80097fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	441a      	add	r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009808:	429a      	cmp	r2, r3
 800980a:	d907      	bls.n	800981c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009810:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e14d      	b.n	8009ab8 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2203      	movs	r2, #3
 8009820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2200      	movs	r2, #0
 800982a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009830:	2b01      	cmp	r3, #1
 8009832:	d002      	beq.n	800983a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009836:	025b      	lsls	r3, r3, #9
 8009838:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800983a:	f04f 33ff 	mov.w	r3, #4294967295
 800983e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	025b      	lsls	r3, r3, #9
 8009844:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009846:	2390      	movs	r3, #144	@ 0x90
 8009848:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800984a:	2300      	movs	r3, #0
 800984c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800984e:	2300      	movs	r3, #0
 8009850:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009852:	2301      	movs	r3, #1
 8009854:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f107 0218 	add.w	r2, r7, #24
 800985e:	4611      	mov	r1, r2
 8009860:	4618      	mov	r0, r3
 8009862:	f002 fcd4 	bl	800c20e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d90a      	bls.n	8009882 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2220      	movs	r2, #32
 8009870:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009878:	4618      	mov	r0, r3
 800987a:	f002 fd7b 	bl	800c374 <SDMMC_CmdWriteMultiBlock>
 800987e:	6478      	str	r0, [r7, #68]	@ 0x44
 8009880:	e009      	b.n	8009896 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2210      	movs	r2, #16
 8009886:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800988e:	4618      	mov	r0, r3
 8009890:	f002 fd4e 	bl	800c330 <SDMMC_CmdWriteSingleBlock>
 8009894:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009898:	2b00      	cmp	r3, #0
 800989a:	d012      	beq.n	80098c2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a87      	ldr	r2, [pc, #540]	@ (8009ac0 <HAL_SD_WriteBlocks+0x308>)
 80098a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098aa:	431a      	orrs	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e0fa      	b.n	8009ab8 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80098c6:	e065      	b.n	8009994 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d040      	beq.n	8009958 <HAL_SD_WriteBlocks+0x1a0>
 80098d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d03d      	beq.n	8009958 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80098dc:	2300      	movs	r3, #0
 80098de:	643b      	str	r3, [r7, #64]	@ 0x40
 80098e0:	e037      	b.n	8009952 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80098e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80098e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ea:	3301      	adds	r3, #1
 80098ec:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80098ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098f0:	3b01      	subs	r3, #1
 80098f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80098f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	021a      	lsls	r2, r3, #8
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009902:	3301      	adds	r3, #1
 8009904:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009908:	3b01      	subs	r3, #1
 800990a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800990c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	041a      	lsls	r2, r3, #16
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	4313      	orrs	r3, r2
 8009916:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800991a:	3301      	adds	r3, #1
 800991c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800991e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009920:	3b01      	subs	r3, #1
 8009922:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	061a      	lsls	r2, r3, #24
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	4313      	orrs	r3, r2
 800992e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009932:	3301      	adds	r3, #1
 8009934:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009938:	3b01      	subs	r3, #1
 800993a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f107 0214 	add.w	r2, r7, #20
 8009944:	4611      	mov	r1, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f002 fbf0 	bl	800c12c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800994c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800994e:	3301      	adds	r3, #1
 8009950:	643b      	str	r3, [r7, #64]	@ 0x40
 8009952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009954:	2b07      	cmp	r3, #7
 8009956:	d9c4      	bls.n	80098e2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009958:	f7fc fab0 	bl	8005ebc <HAL_GetTick>
 800995c:	4602      	mov	r2, r0
 800995e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009964:	429a      	cmp	r2, r3
 8009966:	d902      	bls.n	800996e <HAL_SD_WriteBlocks+0x1b6>
 8009968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800996a:	2b00      	cmp	r3, #0
 800996c:	d112      	bne.n	8009994 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a53      	ldr	r2, [pc, #332]	@ (8009ac0 <HAL_SD_WriteBlocks+0x308>)
 8009974:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800997a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800997c:	431a      	orrs	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8009990:	2303      	movs	r3, #3
 8009992:	e091      	b.n	8009ab8 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800999a:	f240 331a 	movw	r3, #794	@ 0x31a
 800999e:	4013      	ands	r3, r2
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d091      	beq.n	80098c8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d022      	beq.n	80099f8 <HAL_SD_WriteBlocks+0x240>
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d91f      	bls.n	80099f8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099bc:	2b03      	cmp	r3, #3
 80099be:	d01b      	beq.n	80099f8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f002 fcf7 	bl	800c3b8 <SDMMC_CmdStopTransfer>
 80099ca:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80099cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d012      	beq.n	80099f8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a3a      	ldr	r2, [pc, #232]	@ (8009ac0 <HAL_SD_WriteBlocks+0x308>)
 80099d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099e0:	431a      	orrs	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e05f      	b.n	8009ab8 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099fe:	f003 0308 	and.w	r3, r3, #8
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d012      	beq.n	8009a2c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a2d      	ldr	r2, [pc, #180]	@ (8009ac0 <HAL_SD_WriteBlocks+0x308>)
 8009a0c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a12:	f043 0208 	orr.w	r2, r3, #8
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2200      	movs	r2, #0
 8009a26:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e045      	b.n	8009ab8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a32:	f003 0302 	and.w	r3, r3, #2
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d012      	beq.n	8009a60 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a20      	ldr	r2, [pc, #128]	@ (8009ac0 <HAL_SD_WriteBlocks+0x308>)
 8009a40:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a46:	f043 0202 	orr.w	r2, r3, #2
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e02b      	b.n	8009ab8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a66:	f003 0310 	and.w	r3, r3, #16
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d012      	beq.n	8009a94 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a13      	ldr	r2, [pc, #76]	@ (8009ac0 <HAL_SD_WriteBlocks+0x308>)
 8009a74:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a7a:	f043 0210 	orr.w	r2, r3, #16
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	e011      	b.n	8009ab8 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009a9c:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	e006      	b.n	8009ab8 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
  }
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3748      	adds	r7, #72	@ 0x48
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	004005ff 	.word	0x004005ff

08009ac4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ad2:	0f9b      	lsrs	r3, r3, #30
 8009ad4:	b2da      	uxtb	r2, r3
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ade:	0e9b      	lsrs	r3, r3, #26
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	f003 030f 	and.w	r3, r3, #15
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009af0:	0e1b      	lsrs	r3, r3, #24
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	f003 0303 	and.w	r3, r3, #3
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b02:	0c1b      	lsrs	r3, r3, #16
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b0e:	0a1b      	lsrs	r3, r3, #8
 8009b10:	b2da      	uxtb	r2, r3
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b24:	0d1b      	lsrs	r3, r3, #20
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b30:	0c1b      	lsrs	r3, r3, #16
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	f003 030f 	and.w	r3, r3, #15
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b42:	0bdb      	lsrs	r3, r3, #15
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b54:	0b9b      	lsrs	r3, r3, #14
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b66:	0b5b      	lsrs	r3, r3, #13
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	b2da      	uxtb	r2, r3
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b78:	0b1b      	lsrs	r3, r3, #12
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	f003 0301 	and.w	r3, r3, #1
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d163      	bne.n	8009c5c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b98:	009a      	lsls	r2, r3, #2
 8009b9a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009ba4:	0f92      	lsrs	r2, r2, #30
 8009ba6:	431a      	orrs	r2, r3
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bb0:	0edb      	lsrs	r3, r3, #27
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 0307 	and.w	r3, r3, #7
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bc2:	0e1b      	lsrs	r3, r3, #24
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bd4:	0d5b      	lsrs	r3, r3, #21
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	f003 0307 	and.w	r3, r3, #7
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009be6:	0c9b      	lsrs	r3, r3, #18
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	f003 0307 	and.w	r3, r3, #7
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bf8:	0bdb      	lsrs	r3, r3, #15
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	f003 0307 	and.w	r3, r3, #7
 8009c00:	b2da      	uxtb	r2, r3
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	1c5a      	adds	r2, r3, #1
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	7e1b      	ldrb	r3, [r3, #24]
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	f003 0307 	and.w	r3, r3, #7
 8009c1a:	3302      	adds	r3, #2
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009c26:	fb03 f202 	mul.w	r2, r3, r2
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	7a1b      	ldrb	r3, [r3, #8]
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	f003 030f 	and.w	r3, r3, #15
 8009c38:	2201      	movs	r2, #1
 8009c3a:	409a      	lsls	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009c48:	0a52      	lsrs	r2, r2, #9
 8009c4a:	fb03 f202 	mul.w	r2, r3, r2
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c58:	661a      	str	r2, [r3, #96]	@ 0x60
 8009c5a:	e031      	b.n	8009cc0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d11d      	bne.n	8009ca0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c68:	041b      	lsls	r3, r3, #16
 8009c6a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c72:	0c1b      	lsrs	r3, r3, #16
 8009c74:	431a      	orrs	r2, r3
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	029a      	lsls	r2, r3, #10
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c94:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	661a      	str	r2, [r3, #96]	@ 0x60
 8009c9e:	e00f      	b.n	8009cc0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a58      	ldr	r2, [pc, #352]	@ (8009e08 <HAL_SD_GetCardCSD+0x344>)
 8009ca6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e09d      	b.n	8009dfc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cc4:	0b9b      	lsrs	r3, r3, #14
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	b2da      	uxtb	r2, r3
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cd6:	09db      	lsrs	r3, r3, #7
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cf8:	0fdb      	lsrs	r3, r3, #31
 8009cfa:	b2da      	uxtb	r2, r3
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d04:	0f5b      	lsrs	r3, r3, #29
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	f003 0303 	and.w	r3, r3, #3
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d16:	0e9b      	lsrs	r3, r3, #26
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	f003 0307 	and.w	r3, r3, #7
 8009d1e:	b2da      	uxtb	r2, r3
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d28:	0d9b      	lsrs	r3, r3, #22
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	f003 030f 	and.w	r3, r3, #15
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d3a:	0d5b      	lsrs	r3, r3, #21
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	f003 0301 	and.w	r3, r3, #1
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d56:	0c1b      	lsrs	r3, r3, #16
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d6a:	0bdb      	lsrs	r3, r3, #15
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	f003 0301 	and.w	r3, r3, #1
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d7e:	0b9b      	lsrs	r3, r3, #14
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	f003 0301 	and.w	r3, r3, #1
 8009d86:	b2da      	uxtb	r2, r3
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d92:	0b5b      	lsrs	r3, r3, #13
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009da6:	0b1b      	lsrs	r3, r3, #12
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	f003 0301 	and.w	r3, r3, #1
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dba:	0a9b      	lsrs	r3, r3, #10
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	f003 0303 	and.w	r3, r3, #3
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dce:	0a1b      	lsrs	r3, r3, #8
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	f003 0303 	and.w	r3, r3, #3
 8009dd6:	b2da      	uxtb	r2, r3
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009de2:	085b      	lsrs	r3, r3, #1
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bc80      	pop	{r7}
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	004005ff 	.word	0x004005ff

08009e0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bc80      	pop	{r7}
 8009e60:	4770      	bx	lr

08009e62 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b086      	sub	sp, #24
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009e6e:	f107 030c 	add.w	r3, r7, #12
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f971 	bl	800a15c <SD_SendStatus>
 8009e7a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d005      	beq.n	8009e8e <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	431a      	orrs	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	0a5b      	lsrs	r3, r3, #9
 8009e92:	f003 030f 	and.w	r3, r3, #15
 8009e96:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009e98:	693b      	ldr	r3, [r7, #16]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3718      	adds	r7, #24
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ea2:	b5b0      	push	{r4, r5, r7, lr}
 8009ea4:	b094      	sub	sp, #80	@ 0x50
 8009ea6:	af04      	add	r7, sp, #16
 8009ea8:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f002 f957 	bl	800c166 <SDIO_GetPowerState>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d102      	bne.n	8009ec4 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ebe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009ec2:	e0b8      	b.n	800a036 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ec8:	2b03      	cmp	r3, #3
 8009eca:	d02f      	beq.n	8009f2c <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f002 fb38 	bl	800c546 <SDMMC_CmdSendCID>
 8009ed6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <SD_InitCard+0x40>
    {
      return errorstate;
 8009ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ee0:	e0a9      	b.n	800a036 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f002 f97e 	bl	800c1ea <SDIO_GetResponse>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2104      	movs	r1, #4
 8009efa:	4618      	mov	r0, r3
 8009efc:	f002 f975 	bl	800c1ea <SDIO_GetResponse>
 8009f00:	4602      	mov	r2, r0
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2108      	movs	r1, #8
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f002 f96c 	bl	800c1ea <SDIO_GetResponse>
 8009f12:	4602      	mov	r2, r0
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	210c      	movs	r1, #12
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f002 f963 	bl	800c1ea <SDIO_GetResponse>
 8009f24:	4602      	mov	r2, r0
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f30:	2b03      	cmp	r3, #3
 8009f32:	d00d      	beq.n	8009f50 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f107 020e 	add.w	r2, r7, #14
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f002 fb3e 	bl	800c5c0 <SDMMC_CmdSetRelAdd>
 8009f44:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <SD_InitCard+0xae>
    {
      return errorstate;
 8009f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f4e:	e072      	b.n	800a036 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f54:	2b03      	cmp	r3, #3
 8009f56:	d036      	beq.n	8009fc6 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009f58:	89fb      	ldrh	r3, [r7, #14]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f68:	041b      	lsls	r3, r3, #16
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	f002 fb08 	bl	800c582 <SDMMC_CmdSendCSD>
 8009f72:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <SD_InitCard+0xdc>
    {
      return errorstate;
 8009f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f7c:	e05b      	b.n	800a036 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2100      	movs	r1, #0
 8009f84:	4618      	mov	r0, r3
 8009f86:	f002 f930 	bl	800c1ea <SDIO_GetResponse>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2104      	movs	r1, #4
 8009f96:	4618      	mov	r0, r3
 8009f98:	f002 f927 	bl	800c1ea <SDIO_GetResponse>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2108      	movs	r1, #8
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f002 f91e 	bl	800c1ea <SDIO_GetResponse>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	210c      	movs	r1, #12
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f002 f915 	bl	800c1ea <SDIO_GetResponse>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2104      	movs	r1, #4
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f002 f90c 	bl	800c1ea <SDIO_GetResponse>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	0d1a      	lsrs	r2, r3, #20
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009fda:	f107 0310 	add.w	r3, r7, #16
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f7ff fd6f 	bl	8009ac4 <HAL_SD_GetCardCSD>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009ff0:	e021      	b.n	800a036 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6819      	ldr	r1, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ffa:	041b      	lsls	r3, r3, #16
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	461c      	mov	r4, r3
 800a000:	4615      	mov	r5, r2
 800a002:	4622      	mov	r2, r4
 800a004:	462b      	mov	r3, r5
 800a006:	4608      	mov	r0, r1
 800a008:	f002 f9f8 	bl	800c3fc <SDMMC_CmdSelDesel>
 800a00c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <SD_InitCard+0x176>
  {
    return errorstate;
 800a014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a016:	e00e      	b.n	800a036 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681d      	ldr	r5, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	466c      	mov	r4, sp
 800a020:	f103 0210 	add.w	r2, r3, #16
 800a024:	ca07      	ldmia	r2, {r0, r1, r2}
 800a026:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a02a:	3304      	adds	r3, #4
 800a02c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a02e:	4628      	mov	r0, r5
 800a030:	f002 f846 	bl	800c0c0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3740      	adds	r7, #64	@ 0x40
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a040 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a04c:	2300      	movs	r3, #0
 800a04e:	617b      	str	r3, [r7, #20]
 800a050:	2300      	movs	r3, #0
 800a052:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4618      	mov	r0, r3
 800a05a:	f002 f9f2 	bl	800c442 <SDMMC_CmdGoIdleState>
 800a05e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <SD_PowerON+0x2a>
  {
    return errorstate;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	e072      	b.n	800a150 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4618      	mov	r0, r3
 800a070:	f002 fa05 	bl	800c47e <SDMMC_CmdOperCond>
 800a074:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00d      	beq.n	800a098 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4618      	mov	r0, r3
 800a088:	f002 f9db 	bl	800c442 <SDMMC_CmdGoIdleState>
 800a08c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d004      	beq.n	800a09e <SD_PowerON+0x5e>
    {
      return errorstate;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	e05b      	b.n	800a150 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d137      	bne.n	800a116 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f002 fa05 	bl	800c4bc <SDMMC_CmdAppCommand>
 800a0b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d02d      	beq.n	800a116 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a0be:	e047      	b.n	800a150 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f002 f9f8 	bl	800c4bc <SDMMC_CmdAppCommand>
 800a0cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <SD_PowerON+0x98>
    {
      return errorstate;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	e03b      	b.n	800a150 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	491e      	ldr	r1, [pc, #120]	@ (800a158 <SD_PowerON+0x118>)
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f002 fa0e 	bl	800c500 <SDMMC_CmdAppOperCommand>
 800a0e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0ec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a0f0:	e02e      	b.n	800a150 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f002 f876 	bl	800c1ea <SDIO_GetResponse>
 800a0fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	0fdb      	lsrs	r3, r3, #31
 800a104:	2b01      	cmp	r3, #1
 800a106:	d101      	bne.n	800a10c <SD_PowerON+0xcc>
 800a108:	2301      	movs	r3, #1
 800a10a:	e000      	b.n	800a10e <SD_PowerON+0xce>
 800a10c:	2300      	movs	r3, #0
 800a10e:	613b      	str	r3, [r7, #16]

    count++;
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	3301      	adds	r3, #1
 800a114:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d802      	bhi.n	800a126 <SD_PowerON+0xe6>
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d0cc      	beq.n	800a0c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d902      	bls.n	800a136 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a130:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a134:	e00c      	b.n	800a150 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d003      	beq.n	800a148 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	645a      	str	r2, [r3, #68]	@ 0x44
 800a146:	e002      	b.n	800a14e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3718      	adds	r7, #24
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	c1100000 	.word	0xc1100000

0800a15c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d102      	bne.n	800a172 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a16c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a170:	e018      	b.n	800a1a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a17a:	041b      	lsls	r3, r3, #16
 800a17c:	4619      	mov	r1, r3
 800a17e:	4610      	mov	r0, r2
 800a180:	f002 fa3f 	bl	800c602 <SDMMC_CmdSendStatus>
 800a184:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	e009      	b.n	800a1a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2100      	movs	r1, #0
 800a196:	4618      	mov	r0, r3
 800a198:	f002 f827 	bl	800c1ea <SDIO_GetResponse>
 800a19c:	4602      	mov	r2, r0
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e041      	b.n	800a242 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d106      	bne.n	800a1d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7fa fc42 	bl	8004a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	f000 fc56 	bl	800aa9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
	...

0800a24c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d001      	beq.n	800a264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e044      	b.n	800a2ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2202      	movs	r2, #2
 800a268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68da      	ldr	r2, [r3, #12]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f042 0201 	orr.w	r2, r2, #1
 800a27a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a1d      	ldr	r2, [pc, #116]	@ (800a2f8 <HAL_TIM_Base_Start_IT+0xac>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d018      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x6c>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a1c      	ldr	r2, [pc, #112]	@ (800a2fc <HAL_TIM_Base_Start_IT+0xb0>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d013      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x6c>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a298:	d00e      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x6c>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a18      	ldr	r2, [pc, #96]	@ (800a300 <HAL_TIM_Base_Start_IT+0xb4>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d009      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x6c>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a16      	ldr	r2, [pc, #88]	@ (800a304 <HAL_TIM_Base_Start_IT+0xb8>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d004      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x6c>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a15      	ldr	r2, [pc, #84]	@ (800a308 <HAL_TIM_Base_Start_IT+0xbc>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d111      	bne.n	800a2dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	f003 0307 	and.w	r3, r3, #7
 800a2c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2b06      	cmp	r3, #6
 800a2c8:	d010      	beq.n	800a2ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f042 0201 	orr.w	r2, r2, #1
 800a2d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2da:	e007      	b.n	800a2ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f042 0201 	orr.w	r2, r2, #1
 800a2ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3714      	adds	r7, #20
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bc80      	pop	{r7}
 800a2f6:	4770      	bx	lr
 800a2f8:	40012c00 	.word	0x40012c00
 800a2fc:	40013400 	.word	0x40013400
 800a300:	40000400 	.word	0x40000400
 800a304:	40000800 	.word	0x40000800
 800a308:	40000c00 	.word	0x40000c00

0800a30c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d101      	bne.n	800a31e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e041      	b.n	800a3a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d106      	bne.n	800a338 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f839 	bl	800a3aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2202      	movs	r2, #2
 800a33c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	3304      	adds	r3, #4
 800a348:	4619      	mov	r1, r3
 800a34a:	4610      	mov	r0, r2
 800a34c:	f000 fba6 	bl	800aa9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a3b2:	bf00      	nop
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bc80      	pop	{r7}
 800a3ba:	4770      	bx	lr

0800a3bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d109      	bne.n	800a3e0 <HAL_TIM_PWM_Start+0x24>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	bf14      	ite	ne
 800a3d8:	2301      	movne	r3, #1
 800a3da:	2300      	moveq	r3, #0
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	e022      	b.n	800a426 <HAL_TIM_PWM_Start+0x6a>
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	2b04      	cmp	r3, #4
 800a3e4:	d109      	bne.n	800a3fa <HAL_TIM_PWM_Start+0x3e>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	bf14      	ite	ne
 800a3f2:	2301      	movne	r3, #1
 800a3f4:	2300      	moveq	r3, #0
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	e015      	b.n	800a426 <HAL_TIM_PWM_Start+0x6a>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b08      	cmp	r3, #8
 800a3fe:	d109      	bne.n	800a414 <HAL_TIM_PWM_Start+0x58>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b01      	cmp	r3, #1
 800a40a:	bf14      	ite	ne
 800a40c:	2301      	movne	r3, #1
 800a40e:	2300      	moveq	r3, #0
 800a410:	b2db      	uxtb	r3, r3
 800a412:	e008      	b.n	800a426 <HAL_TIM_PWM_Start+0x6a>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	bf14      	ite	ne
 800a420:	2301      	movne	r3, #1
 800a422:	2300      	moveq	r3, #0
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e072      	b.n	800a514 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d104      	bne.n	800a43e <HAL_TIM_PWM_Start+0x82>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2202      	movs	r2, #2
 800a438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a43c:	e013      	b.n	800a466 <HAL_TIM_PWM_Start+0xaa>
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	2b04      	cmp	r3, #4
 800a442:	d104      	bne.n	800a44e <HAL_TIM_PWM_Start+0x92>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2202      	movs	r2, #2
 800a448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a44c:	e00b      	b.n	800a466 <HAL_TIM_PWM_Start+0xaa>
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b08      	cmp	r3, #8
 800a452:	d104      	bne.n	800a45e <HAL_TIM_PWM_Start+0xa2>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2202      	movs	r2, #2
 800a458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a45c:	e003      	b.n	800a466 <HAL_TIM_PWM_Start+0xaa>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2202      	movs	r2, #2
 800a462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2201      	movs	r2, #1
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	4618      	mov	r0, r3
 800a470:	f000 fdd0 	bl	800b014 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a28      	ldr	r2, [pc, #160]	@ (800a51c <HAL_TIM_PWM_Start+0x160>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d004      	beq.n	800a488 <HAL_TIM_PWM_Start+0xcc>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a27      	ldr	r2, [pc, #156]	@ (800a520 <HAL_TIM_PWM_Start+0x164>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d101      	bne.n	800a48c <HAL_TIM_PWM_Start+0xd0>
 800a488:	2301      	movs	r3, #1
 800a48a:	e000      	b.n	800a48e <HAL_TIM_PWM_Start+0xd2>
 800a48c:	2300      	movs	r3, #0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d007      	beq.n	800a4a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a1d      	ldr	r2, [pc, #116]	@ (800a51c <HAL_TIM_PWM_Start+0x160>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d018      	beq.n	800a4de <HAL_TIM_PWM_Start+0x122>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a1b      	ldr	r2, [pc, #108]	@ (800a520 <HAL_TIM_PWM_Start+0x164>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d013      	beq.n	800a4de <HAL_TIM_PWM_Start+0x122>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4be:	d00e      	beq.n	800a4de <HAL_TIM_PWM_Start+0x122>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a17      	ldr	r2, [pc, #92]	@ (800a524 <HAL_TIM_PWM_Start+0x168>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d009      	beq.n	800a4de <HAL_TIM_PWM_Start+0x122>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a16      	ldr	r2, [pc, #88]	@ (800a528 <HAL_TIM_PWM_Start+0x16c>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d004      	beq.n	800a4de <HAL_TIM_PWM_Start+0x122>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a14      	ldr	r2, [pc, #80]	@ (800a52c <HAL_TIM_PWM_Start+0x170>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d111      	bne.n	800a502 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	f003 0307 	and.w	r3, r3, #7
 800a4e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2b06      	cmp	r3, #6
 800a4ee:	d010      	beq.n	800a512 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0201 	orr.w	r2, r2, #1
 800a4fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a500:	e007      	b.n	800a512 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f042 0201 	orr.w	r2, r2, #1
 800a510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	40012c00 	.word	0x40012c00
 800a520:	40013400 	.word	0x40013400
 800a524:	40000400 	.word	0x40000400
 800a528:	40000800 	.word	0x40000800
 800a52c:	40000c00 	.word	0x40000c00

0800a530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	f003 0302 	and.w	r3, r3, #2
 800a542:	2b02      	cmp	r3, #2
 800a544:	d122      	bne.n	800a58c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	f003 0302 	and.w	r3, r3, #2
 800a550:	2b02      	cmp	r3, #2
 800a552:	d11b      	bne.n	800a58c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f06f 0202 	mvn.w	r2, #2
 800a55c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	699b      	ldr	r3, [r3, #24]
 800a56a:	f003 0303 	and.w	r3, r3, #3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d003      	beq.n	800a57a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fa76 	bl	800aa64 <HAL_TIM_IC_CaptureCallback>
 800a578:	e005      	b.n	800a586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fa69 	bl	800aa52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fa78 	bl	800aa76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	f003 0304 	and.w	r3, r3, #4
 800a596:	2b04      	cmp	r3, #4
 800a598:	d122      	bne.n	800a5e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	f003 0304 	and.w	r3, r3, #4
 800a5a4:	2b04      	cmp	r3, #4
 800a5a6:	d11b      	bne.n	800a5e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f06f 0204 	mvn.w	r2, #4
 800a5b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2202      	movs	r2, #2
 800a5b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	699b      	ldr	r3, [r3, #24]
 800a5be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d003      	beq.n	800a5ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fa4c 	bl	800aa64 <HAL_TIM_IC_CaptureCallback>
 800a5cc:	e005      	b.n	800a5da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fa3f 	bl	800aa52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fa4e 	bl	800aa76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	f003 0308 	and.w	r3, r3, #8
 800a5ea:	2b08      	cmp	r3, #8
 800a5ec:	d122      	bne.n	800a634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	f003 0308 	and.w	r3, r3, #8
 800a5f8:	2b08      	cmp	r3, #8
 800a5fa:	d11b      	bne.n	800a634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f06f 0208 	mvn.w	r2, #8
 800a604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2204      	movs	r2, #4
 800a60a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	69db      	ldr	r3, [r3, #28]
 800a612:	f003 0303 	and.w	r3, r3, #3
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fa22 	bl	800aa64 <HAL_TIM_IC_CaptureCallback>
 800a620:	e005      	b.n	800a62e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fa15 	bl	800aa52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fa24 	bl	800aa76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	f003 0310 	and.w	r3, r3, #16
 800a63e:	2b10      	cmp	r3, #16
 800a640:	d122      	bne.n	800a688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	f003 0310 	and.w	r3, r3, #16
 800a64c:	2b10      	cmp	r3, #16
 800a64e:	d11b      	bne.n	800a688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f06f 0210 	mvn.w	r2, #16
 800a658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2208      	movs	r2, #8
 800a65e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d003      	beq.n	800a676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f9f8 	bl	800aa64 <HAL_TIM_IC_CaptureCallback>
 800a674:	e005      	b.n	800a682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f9eb 	bl	800aa52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f9fa 	bl	800aa76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	2b01      	cmp	r3, #1
 800a694:	d10e      	bne.n	800a6b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	f003 0301 	and.w	r3, r3, #1
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d107      	bne.n	800a6b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f06f 0201 	mvn.w	r2, #1
 800a6ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7f9 ff20 	bl	80044f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6be:	2b80      	cmp	r3, #128	@ 0x80
 800a6c0:	d10e      	bne.n	800a6e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6cc:	2b80      	cmp	r3, #128	@ 0x80
 800a6ce:	d107      	bne.n	800a6e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a6d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fd33 	bl	800b146 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6ea:	2b40      	cmp	r3, #64	@ 0x40
 800a6ec:	d10e      	bne.n	800a70c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6f8:	2b40      	cmp	r3, #64	@ 0x40
 800a6fa:	d107      	bne.n	800a70c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 f9be 	bl	800aa88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	f003 0320 	and.w	r3, r3, #32
 800a716:	2b20      	cmp	r3, #32
 800a718:	d10e      	bne.n	800a738 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	f003 0320 	and.w	r3, r3, #32
 800a724:	2b20      	cmp	r3, #32
 800a726:	d107      	bne.n	800a738 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f06f 0220 	mvn.w	r2, #32
 800a730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 fcfe 	bl	800b134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a738:	bf00      	nop
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a756:	2b01      	cmp	r3, #1
 800a758:	d101      	bne.n	800a75e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a75a:	2302      	movs	r3, #2
 800a75c:	e0ae      	b.n	800a8bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2201      	movs	r2, #1
 800a762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b0c      	cmp	r3, #12
 800a76a:	f200 809f 	bhi.w	800a8ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a76e:	a201      	add	r2, pc, #4	@ (adr r2, 800a774 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a774:	0800a7a9 	.word	0x0800a7a9
 800a778:	0800a8ad 	.word	0x0800a8ad
 800a77c:	0800a8ad 	.word	0x0800a8ad
 800a780:	0800a8ad 	.word	0x0800a8ad
 800a784:	0800a7e9 	.word	0x0800a7e9
 800a788:	0800a8ad 	.word	0x0800a8ad
 800a78c:	0800a8ad 	.word	0x0800a8ad
 800a790:	0800a8ad 	.word	0x0800a8ad
 800a794:	0800a82b 	.word	0x0800a82b
 800a798:	0800a8ad 	.word	0x0800a8ad
 800a79c:	0800a8ad 	.word	0x0800a8ad
 800a7a0:	0800a8ad 	.word	0x0800a8ad
 800a7a4:	0800a86b 	.word	0x0800a86b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68b9      	ldr	r1, [r7, #8]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 f9ee 	bl	800ab90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	699a      	ldr	r2, [r3, #24]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f042 0208 	orr.w	r2, r2, #8
 800a7c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	699a      	ldr	r2, [r3, #24]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f022 0204 	bic.w	r2, r2, #4
 800a7d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	6999      	ldr	r1, [r3, #24]
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	691a      	ldr	r2, [r3, #16]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	430a      	orrs	r2, r1
 800a7e4:	619a      	str	r2, [r3, #24]
      break;
 800a7e6:	e064      	b.n	800a8b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68b9      	ldr	r1, [r7, #8]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 fa3e 	bl	800ac70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	699a      	ldr	r2, [r3, #24]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	699a      	ldr	r2, [r3, #24]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6999      	ldr	r1, [r3, #24]
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	021a      	lsls	r2, r3, #8
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	430a      	orrs	r2, r1
 800a826:	619a      	str	r2, [r3, #24]
      break;
 800a828:	e043      	b.n	800a8b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68b9      	ldr	r1, [r7, #8]
 800a830:	4618      	mov	r0, r3
 800a832:	f000 fa91 	bl	800ad58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	69da      	ldr	r2, [r3, #28]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f042 0208 	orr.w	r2, r2, #8
 800a844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	69da      	ldr	r2, [r3, #28]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f022 0204 	bic.w	r2, r2, #4
 800a854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	69d9      	ldr	r1, [r3, #28]
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	691a      	ldr	r2, [r3, #16]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	430a      	orrs	r2, r1
 800a866:	61da      	str	r2, [r3, #28]
      break;
 800a868:	e023      	b.n	800a8b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68b9      	ldr	r1, [r7, #8]
 800a870:	4618      	mov	r0, r3
 800a872:	f000 fae5 	bl	800ae40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	69da      	ldr	r2, [r3, #28]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	69da      	ldr	r2, [r3, #28]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	69d9      	ldr	r1, [r3, #28]
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	021a      	lsls	r2, r3, #8
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	430a      	orrs	r2, r1
 800a8a8:	61da      	str	r2, [r3, #28]
      break;
 800a8aa:	e002      	b.n	800a8b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a8b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a8ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3718      	adds	r7, #24
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d101      	bne.n	800a8e0 <HAL_TIM_ConfigClockSource+0x1c>
 800a8dc:	2302      	movs	r3, #2
 800a8de:	e0b4      	b.n	800aa4a <HAL_TIM_ConfigClockSource+0x186>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2202      	movs	r2, #2
 800a8ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a8fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a918:	d03e      	beq.n	800a998 <HAL_TIM_ConfigClockSource+0xd4>
 800a91a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a91e:	f200 8087 	bhi.w	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a926:	f000 8086 	beq.w	800aa36 <HAL_TIM_ConfigClockSource+0x172>
 800a92a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a92e:	d87f      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a930:	2b70      	cmp	r3, #112	@ 0x70
 800a932:	d01a      	beq.n	800a96a <HAL_TIM_ConfigClockSource+0xa6>
 800a934:	2b70      	cmp	r3, #112	@ 0x70
 800a936:	d87b      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a938:	2b60      	cmp	r3, #96	@ 0x60
 800a93a:	d050      	beq.n	800a9de <HAL_TIM_ConfigClockSource+0x11a>
 800a93c:	2b60      	cmp	r3, #96	@ 0x60
 800a93e:	d877      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a940:	2b50      	cmp	r3, #80	@ 0x50
 800a942:	d03c      	beq.n	800a9be <HAL_TIM_ConfigClockSource+0xfa>
 800a944:	2b50      	cmp	r3, #80	@ 0x50
 800a946:	d873      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a948:	2b40      	cmp	r3, #64	@ 0x40
 800a94a:	d058      	beq.n	800a9fe <HAL_TIM_ConfigClockSource+0x13a>
 800a94c:	2b40      	cmp	r3, #64	@ 0x40
 800a94e:	d86f      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a950:	2b30      	cmp	r3, #48	@ 0x30
 800a952:	d064      	beq.n	800aa1e <HAL_TIM_ConfigClockSource+0x15a>
 800a954:	2b30      	cmp	r3, #48	@ 0x30
 800a956:	d86b      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a958:	2b20      	cmp	r3, #32
 800a95a:	d060      	beq.n	800aa1e <HAL_TIM_ConfigClockSource+0x15a>
 800a95c:	2b20      	cmp	r3, #32
 800a95e:	d867      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a960:	2b00      	cmp	r3, #0
 800a962:	d05c      	beq.n	800aa1e <HAL_TIM_ConfigClockSource+0x15a>
 800a964:	2b10      	cmp	r3, #16
 800a966:	d05a      	beq.n	800aa1e <HAL_TIM_ConfigClockSource+0x15a>
 800a968:	e062      	b.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a97a:	f000 fb2c 	bl	800afd6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a98c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	609a      	str	r2, [r3, #8]
      break;
 800a996:	e04f      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9a8:	f000 fb15 	bl	800afd6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	689a      	ldr	r2, [r3, #8]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a9ba:	609a      	str	r2, [r3, #8]
      break;
 800a9bc:	e03c      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f000 fa8c 	bl	800aee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2150      	movs	r1, #80	@ 0x50
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 fae3 	bl	800afa2 <TIM_ITRx_SetConfig>
      break;
 800a9dc:	e02c      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	f000 faaa 	bl	800af44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2160      	movs	r1, #96	@ 0x60
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 fad3 	bl	800afa2 <TIM_ITRx_SetConfig>
      break;
 800a9fc:	e01c      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	f000 fa6c 	bl	800aee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2140      	movs	r1, #64	@ 0x40
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 fac3 	bl	800afa2 <TIM_ITRx_SetConfig>
      break;
 800aa1c:	e00c      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4619      	mov	r1, r3
 800aa28:	4610      	mov	r0, r2
 800aa2a:	f000 faba 	bl	800afa2 <TIM_ITRx_SetConfig>
      break;
 800aa2e:	e003      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	73fb      	strb	r3, [r7, #15]
      break;
 800aa34:	e000      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aa36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa52:	b480      	push	{r7}
 800aa54:	b083      	sub	sp, #12
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa5a:	bf00      	nop
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bc80      	pop	{r7}
 800aa62:	4770      	bx	lr

0800aa64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bc80      	pop	{r7}
 800aa74:	4770      	bx	lr

0800aa76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa76:	b480      	push	{r7}
 800aa78:	b083      	sub	sp, #12
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa7e:	bf00      	nop
 800aa80:	370c      	adds	r7, #12
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bc80      	pop	{r7}
 800aa86:	4770      	bx	lr

0800aa88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bc80      	pop	{r7}
 800aa98:	4770      	bx	lr
	...

0800aa9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a33      	ldr	r2, [pc, #204]	@ (800ab7c <TIM_Base_SetConfig+0xe0>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d013      	beq.n	800aadc <TIM_Base_SetConfig+0x40>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a32      	ldr	r2, [pc, #200]	@ (800ab80 <TIM_Base_SetConfig+0xe4>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d00f      	beq.n	800aadc <TIM_Base_SetConfig+0x40>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aac2:	d00b      	beq.n	800aadc <TIM_Base_SetConfig+0x40>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a2f      	ldr	r2, [pc, #188]	@ (800ab84 <TIM_Base_SetConfig+0xe8>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d007      	beq.n	800aadc <TIM_Base_SetConfig+0x40>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a2e      	ldr	r2, [pc, #184]	@ (800ab88 <TIM_Base_SetConfig+0xec>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d003      	beq.n	800aadc <TIM_Base_SetConfig+0x40>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a2d      	ldr	r2, [pc, #180]	@ (800ab8c <TIM_Base_SetConfig+0xf0>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d108      	bne.n	800aaee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a22      	ldr	r2, [pc, #136]	@ (800ab7c <TIM_Base_SetConfig+0xe0>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d013      	beq.n	800ab1e <TIM_Base_SetConfig+0x82>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a21      	ldr	r2, [pc, #132]	@ (800ab80 <TIM_Base_SetConfig+0xe4>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d00f      	beq.n	800ab1e <TIM_Base_SetConfig+0x82>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab04:	d00b      	beq.n	800ab1e <TIM_Base_SetConfig+0x82>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a1e      	ldr	r2, [pc, #120]	@ (800ab84 <TIM_Base_SetConfig+0xe8>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d007      	beq.n	800ab1e <TIM_Base_SetConfig+0x82>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a1d      	ldr	r2, [pc, #116]	@ (800ab88 <TIM_Base_SetConfig+0xec>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d003      	beq.n	800ab1e <TIM_Base_SetConfig+0x82>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a1c      	ldr	r2, [pc, #112]	@ (800ab8c <TIM_Base_SetConfig+0xf0>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d108      	bne.n	800ab30 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	695b      	ldr	r3, [r3, #20]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	689a      	ldr	r2, [r3, #8]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a09      	ldr	r2, [pc, #36]	@ (800ab7c <TIM_Base_SetConfig+0xe0>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d003      	beq.n	800ab64 <TIM_Base_SetConfig+0xc8>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a08      	ldr	r2, [pc, #32]	@ (800ab80 <TIM_Base_SetConfig+0xe4>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d103      	bne.n	800ab6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	691a      	ldr	r2, [r3, #16]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	615a      	str	r2, [r3, #20]
}
 800ab72:	bf00      	nop
 800ab74:	3714      	adds	r7, #20
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bc80      	pop	{r7}
 800ab7a:	4770      	bx	lr
 800ab7c:	40012c00 	.word	0x40012c00
 800ab80:	40013400 	.word	0x40013400
 800ab84:	40000400 	.word	0x40000400
 800ab88:	40000800 	.word	0x40000800
 800ab8c:	40000c00 	.word	0x40000c00

0800ab90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b087      	sub	sp, #28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a1b      	ldr	r3, [r3, #32]
 800ab9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a1b      	ldr	r3, [r3, #32]
 800aba4:	f023 0201 	bic.w	r2, r3, #1
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f023 0303 	bic.w	r3, r3, #3
 800abc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	4313      	orrs	r3, r2
 800abd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f023 0302 	bic.w	r3, r3, #2
 800abd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a20      	ldr	r2, [pc, #128]	@ (800ac68 <TIM_OC1_SetConfig+0xd8>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d003      	beq.n	800abf4 <TIM_OC1_SetConfig+0x64>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a1f      	ldr	r2, [pc, #124]	@ (800ac6c <TIM_OC1_SetConfig+0xdc>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d10c      	bne.n	800ac0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	f023 0308 	bic.w	r3, r3, #8
 800abfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	697a      	ldr	r2, [r7, #20]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	f023 0304 	bic.w	r3, r3, #4
 800ac0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a15      	ldr	r2, [pc, #84]	@ (800ac68 <TIM_OC1_SetConfig+0xd8>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d003      	beq.n	800ac1e <TIM_OC1_SetConfig+0x8e>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a14      	ldr	r2, [pc, #80]	@ (800ac6c <TIM_OC1_SetConfig+0xdc>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d111      	bne.n	800ac42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ac2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	695b      	ldr	r3, [r3, #20]
 800ac32:	693a      	ldr	r2, [r7, #16]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	699b      	ldr	r3, [r3, #24]
 800ac3c:	693a      	ldr	r2, [r7, #16]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	685a      	ldr	r2, [r3, #4]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	697a      	ldr	r2, [r7, #20]
 800ac5a:	621a      	str	r2, [r3, #32]
}
 800ac5c:	bf00      	nop
 800ac5e:	371c      	adds	r7, #28
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bc80      	pop	{r7}
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	40012c00 	.word	0x40012c00
 800ac6c:	40013400 	.word	0x40013400

0800ac70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b087      	sub	sp, #28
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a1b      	ldr	r3, [r3, #32]
 800ac84:	f023 0210 	bic.w	r2, r3, #16
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	021b      	lsls	r3, r3, #8
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	f023 0320 	bic.w	r3, r3, #32
 800acba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	011b      	lsls	r3, r3, #4
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a21      	ldr	r2, [pc, #132]	@ (800ad50 <TIM_OC2_SetConfig+0xe0>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d003      	beq.n	800acd8 <TIM_OC2_SetConfig+0x68>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4a20      	ldr	r2, [pc, #128]	@ (800ad54 <TIM_OC2_SetConfig+0xe4>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d10d      	bne.n	800acf4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	011b      	lsls	r3, r3, #4
 800ace6:	697a      	ldr	r2, [r7, #20]
 800ace8:	4313      	orrs	r3, r2
 800acea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a16      	ldr	r2, [pc, #88]	@ (800ad50 <TIM_OC2_SetConfig+0xe0>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d003      	beq.n	800ad04 <TIM_OC2_SetConfig+0x94>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a15      	ldr	r2, [pc, #84]	@ (800ad54 <TIM_OC2_SetConfig+0xe4>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d113      	bne.n	800ad2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ad0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ad12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	693a      	ldr	r2, [r7, #16]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	699b      	ldr	r3, [r3, #24]
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	693a      	ldr	r2, [r7, #16]
 800ad30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	685a      	ldr	r2, [r3, #4]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	621a      	str	r2, [r3, #32]
}
 800ad46:	bf00      	nop
 800ad48:	371c      	adds	r7, #28
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bc80      	pop	{r7}
 800ad4e:	4770      	bx	lr
 800ad50:	40012c00 	.word	0x40012c00
 800ad54:	40013400 	.word	0x40013400

0800ad58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b087      	sub	sp, #28
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a1b      	ldr	r3, [r3, #32]
 800ad66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a1b      	ldr	r3, [r3, #32]
 800ad6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	69db      	ldr	r3, [r3, #28]
 800ad7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f023 0303 	bic.w	r3, r3, #3
 800ad8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ada0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	021b      	lsls	r3, r3, #8
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	4313      	orrs	r3, r2
 800adac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4a21      	ldr	r2, [pc, #132]	@ (800ae38 <TIM_OC3_SetConfig+0xe0>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d003      	beq.n	800adbe <TIM_OC3_SetConfig+0x66>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	4a20      	ldr	r2, [pc, #128]	@ (800ae3c <TIM_OC3_SetConfig+0xe4>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d10d      	bne.n	800adda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800adc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	021b      	lsls	r3, r3, #8
 800adcc:	697a      	ldr	r2, [r7, #20]
 800adce:	4313      	orrs	r3, r2
 800add0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800add8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a16      	ldr	r2, [pc, #88]	@ (800ae38 <TIM_OC3_SetConfig+0xe0>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d003      	beq.n	800adea <TIM_OC3_SetConfig+0x92>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4a15      	ldr	r2, [pc, #84]	@ (800ae3c <TIM_OC3_SetConfig+0xe4>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d113      	bne.n	800ae12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800adf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800adf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	011b      	lsls	r3, r3, #4
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	699b      	ldr	r3, [r3, #24]
 800ae0a:	011b      	lsls	r3, r3, #4
 800ae0c:	693a      	ldr	r2, [r7, #16]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	685a      	ldr	r2, [r3, #4]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	697a      	ldr	r2, [r7, #20]
 800ae2a:	621a      	str	r2, [r3, #32]
}
 800ae2c:	bf00      	nop
 800ae2e:	371c      	adds	r7, #28
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bc80      	pop	{r7}
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	40012c00 	.word	0x40012c00
 800ae3c:	40013400 	.word	0x40013400

0800ae40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b087      	sub	sp, #28
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	69db      	ldr	r3, [r3, #28]
 800ae66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	021b      	lsls	r3, r3, #8
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	031b      	lsls	r3, r3, #12
 800ae92:	693a      	ldr	r2, [r7, #16]
 800ae94:	4313      	orrs	r3, r2
 800ae96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4a11      	ldr	r2, [pc, #68]	@ (800aee0 <TIM_OC4_SetConfig+0xa0>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d003      	beq.n	800aea8 <TIM_OC4_SetConfig+0x68>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a10      	ldr	r2, [pc, #64]	@ (800aee4 <TIM_OC4_SetConfig+0xa4>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d109      	bne.n	800aebc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aeae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	695b      	ldr	r3, [r3, #20]
 800aeb4:	019b      	lsls	r3, r3, #6
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	685a      	ldr	r2, [r3, #4]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	621a      	str	r2, [r3, #32]
}
 800aed6:	bf00      	nop
 800aed8:	371c      	adds	r7, #28
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bc80      	pop	{r7}
 800aede:	4770      	bx	lr
 800aee0:	40012c00 	.word	0x40012c00
 800aee4:	40013400 	.word	0x40013400

0800aee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6a1b      	ldr	r3, [r3, #32]
 800aef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	f023 0201 	bic.w	r2, r3, #1
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	699b      	ldr	r3, [r3, #24]
 800af0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800af12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	011b      	lsls	r3, r3, #4
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f023 030a 	bic.w	r3, r3, #10
 800af24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	621a      	str	r2, [r3, #32]
}
 800af3a:	bf00      	nop
 800af3c:	371c      	adds	r7, #28
 800af3e:	46bd      	mov	sp, r7
 800af40:	bc80      	pop	{r7}
 800af42:	4770      	bx	lr

0800af44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af44:	b480      	push	{r7}
 800af46:	b087      	sub	sp, #28
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6a1b      	ldr	r3, [r3, #32]
 800af54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	f023 0210 	bic.w	r2, r3, #16
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800af6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	031b      	lsls	r3, r3, #12
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	4313      	orrs	r3, r2
 800af78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800af80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	011b      	lsls	r3, r3, #4
 800af86:	697a      	ldr	r2, [r7, #20]
 800af88:	4313      	orrs	r3, r2
 800af8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	621a      	str	r2, [r3, #32]
}
 800af98:	bf00      	nop
 800af9a:	371c      	adds	r7, #28
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bc80      	pop	{r7}
 800afa0:	4770      	bx	lr

0800afa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800afa2:	b480      	push	{r7}
 800afa4:	b085      	sub	sp, #20
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	f043 0307 	orr.w	r3, r3, #7
 800afc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	609a      	str	r2, [r3, #8]
}
 800afcc:	bf00      	nop
 800afce:	3714      	adds	r7, #20
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bc80      	pop	{r7}
 800afd4:	4770      	bx	lr

0800afd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afd6:	b480      	push	{r7}
 800afd8:	b087      	sub	sp, #28
 800afda:	af00      	add	r7, sp, #0
 800afdc:	60f8      	str	r0, [r7, #12]
 800afde:	60b9      	str	r1, [r7, #8]
 800afe0:	607a      	str	r2, [r7, #4]
 800afe2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aff0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	021a      	lsls	r2, r3, #8
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	431a      	orrs	r2, r3
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	4313      	orrs	r3, r2
 800affe:	697a      	ldr	r2, [r7, #20]
 800b000:	4313      	orrs	r3, r2
 800b002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	609a      	str	r2, [r3, #8]
}
 800b00a:	bf00      	nop
 800b00c:	371c      	adds	r7, #28
 800b00e:	46bd      	mov	sp, r7
 800b010:	bc80      	pop	{r7}
 800b012:	4770      	bx	lr

0800b014 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b014:	b480      	push	{r7}
 800b016:	b087      	sub	sp, #28
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	f003 031f 	and.w	r3, r3, #31
 800b026:	2201      	movs	r2, #1
 800b028:	fa02 f303 	lsl.w	r3, r2, r3
 800b02c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6a1a      	ldr	r2, [r3, #32]
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	43db      	mvns	r3, r3
 800b036:	401a      	ands	r2, r3
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6a1a      	ldr	r2, [r3, #32]
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	f003 031f 	and.w	r3, r3, #31
 800b046:	6879      	ldr	r1, [r7, #4]
 800b048:	fa01 f303 	lsl.w	r3, r1, r3
 800b04c:	431a      	orrs	r2, r3
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	621a      	str	r2, [r3, #32]
}
 800b052:	bf00      	nop
 800b054:	371c      	adds	r7, #28
 800b056:	46bd      	mov	sp, r7
 800b058:	bc80      	pop	{r7}
 800b05a:	4770      	bx	lr

0800b05c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d101      	bne.n	800b074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b070:	2302      	movs	r3, #2
 800b072:	e050      	b.n	800b116 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2202      	movs	r2, #2
 800b080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b09a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a1b      	ldr	r2, [pc, #108]	@ (800b120 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d018      	beq.n	800b0ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a19      	ldr	r2, [pc, #100]	@ (800b124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d013      	beq.n	800b0ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0ca:	d00e      	beq.n	800b0ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a15      	ldr	r2, [pc, #84]	@ (800b128 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d009      	beq.n	800b0ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a14      	ldr	r2, [pc, #80]	@ (800b12c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d004      	beq.n	800b0ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a12      	ldr	r2, [pc, #72]	@ (800b130 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d10c      	bne.n	800b104 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	68ba      	ldr	r2, [r7, #8]
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3714      	adds	r7, #20
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bc80      	pop	{r7}
 800b11e:	4770      	bx	lr
 800b120:	40012c00 	.word	0x40012c00
 800b124:	40013400 	.word	0x40013400
 800b128:	40000400 	.word	0x40000400
 800b12c:	40000800 	.word	0x40000800
 800b130:	40000c00 	.word	0x40000c00

0800b134 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b13c:	bf00      	nop
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	bc80      	pop	{r7}
 800b144:	4770      	bx	lr

0800b146 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b146:	b480      	push	{r7}
 800b148:	b083      	sub	sp, #12
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b14e:	bf00      	nop
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	bc80      	pop	{r7}
 800b156:	4770      	bx	lr

0800b158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d101      	bne.n	800b16a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e042      	b.n	800b1f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	d106      	bne.n	800b184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7f9 fd78 	bl	8004c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2224      	movs	r2, #36	@ 0x24
 800b188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68da      	ldr	r2, [r3, #12]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b19a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 ff01 	bl	800bfa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	691a      	ldr	r2, [r3, #16]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b1b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	695a      	ldr	r2, [r3, #20]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b1c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68da      	ldr	r2, [r3, #12]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b1d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2220      	movs	r2, #32
 800b1dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2220      	movs	r2, #32
 800b1e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b08a      	sub	sp, #40	@ 0x28
 800b1fc:	af02      	add	r7, sp, #8
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	603b      	str	r3, [r7, #0]
 800b204:	4613      	mov	r3, r2
 800b206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b208:	2300      	movs	r3, #0
 800b20a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b20      	cmp	r3, #32
 800b216:	d16d      	bne.n	800b2f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d002      	beq.n	800b224 <HAL_UART_Transmit+0x2c>
 800b21e:	88fb      	ldrh	r3, [r7, #6]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d101      	bne.n	800b228 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b224:	2301      	movs	r3, #1
 800b226:	e066      	b.n	800b2f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2221      	movs	r2, #33	@ 0x21
 800b232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b236:	f7fa fe41 	bl	8005ebc <HAL_GetTick>
 800b23a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	88fa      	ldrh	r2, [r7, #6]
 800b240:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	88fa      	ldrh	r2, [r7, #6]
 800b246:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b250:	d108      	bne.n	800b264 <HAL_UART_Transmit+0x6c>
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d104      	bne.n	800b264 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b25a:	2300      	movs	r3, #0
 800b25c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	61bb      	str	r3, [r7, #24]
 800b262:	e003      	b.n	800b26c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b268:	2300      	movs	r3, #0
 800b26a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b26c:	e02a      	b.n	800b2c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	2200      	movs	r2, #0
 800b276:	2180      	movs	r1, #128	@ 0x80
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f000 fc29 	bl	800bad0 <UART_WaitOnFlagUntilTimeout>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d001      	beq.n	800b288 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800b284:	2303      	movs	r3, #3
 800b286:	e036      	b.n	800b2f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10b      	bne.n	800b2a6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	881b      	ldrh	r3, [r3, #0]
 800b292:	461a      	mov	r2, r3
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b29c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	3302      	adds	r3, #2
 800b2a2:	61bb      	str	r3, [r7, #24]
 800b2a4:	e007      	b.n	800b2b6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	781a      	ldrb	r2, [r3, #0]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1cf      	bne.n	800b26e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	9300      	str	r3, [sp, #0]
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	2140      	movs	r1, #64	@ 0x40
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f000 fbf9 	bl	800bad0 <UART_WaitOnFlagUntilTimeout>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d001      	beq.n	800b2e8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	e006      	b.n	800b2f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2220      	movs	r2, #32
 800b2ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	e000      	b.n	800b2f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800b2f4:	2302      	movs	r3, #2
  }
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3720      	adds	r7, #32
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b084      	sub	sp, #16
 800b302:	af00      	add	r7, sp, #0
 800b304:	60f8      	str	r0, [r7, #12]
 800b306:	60b9      	str	r1, [r7, #8]
 800b308:	4613      	mov	r3, r2
 800b30a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b20      	cmp	r3, #32
 800b316:	d112      	bne.n	800b33e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d002      	beq.n	800b324 <HAL_UART_Receive_IT+0x26>
 800b31e:	88fb      	ldrh	r3, [r7, #6]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	e00b      	b.n	800b340 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2200      	movs	r2, #0
 800b32c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b32e:	88fb      	ldrh	r3, [r7, #6]
 800b330:	461a      	mov	r2, r3
 800b332:	68b9      	ldr	r1, [r7, #8]
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f000 fc39 	bl	800bbac <UART_Start_Receive_IT>
 800b33a:	4603      	mov	r3, r0
 800b33c:	e000      	b.n	800b340 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b33e:	2302      	movs	r3, #2
  }
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b08c      	sub	sp, #48	@ 0x30
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	4613      	mov	r3, r2
 800b354:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	2b20      	cmp	r3, #32
 800b360:	d156      	bne.n	800b410 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <HAL_UART_Transmit_DMA+0x26>
 800b368:	88fb      	ldrh	r3, [r7, #6]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d101      	bne.n	800b372 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b36e:	2301      	movs	r3, #1
 800b370:	e04f      	b.n	800b412 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	88fa      	ldrh	r2, [r7, #6]
 800b37c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	88fa      	ldrh	r2, [r7, #6]
 800b382:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2200      	movs	r2, #0
 800b388:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2221      	movs	r2, #33	@ 0x21
 800b38e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b396:	4a21      	ldr	r2, [pc, #132]	@ (800b41c <HAL_UART_Transmit_DMA+0xd4>)
 800b398:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b39e:	4a20      	ldr	r2, [pc, #128]	@ (800b420 <HAL_UART_Transmit_DMA+0xd8>)
 800b3a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3a6:	4a1f      	ldr	r2, [pc, #124]	@ (800b424 <HAL_UART_Transmit_DMA+0xdc>)
 800b3a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800b3b2:	f107 0308 	add.w	r3, r7, #8
 800b3b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3be:	6819      	ldr	r1, [r3, #0]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3304      	adds	r3, #4
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	88fb      	ldrh	r3, [r7, #6]
 800b3ca:	f7fa fefb 	bl	80061c4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b3d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	3314      	adds	r3, #20
 800b3de:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e0:	69bb      	ldr	r3, [r7, #24]
 800b3e2:	e853 3f00 	ldrex	r3, [r3]
 800b3e6:	617b      	str	r3, [r7, #20]
   return(result);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	3314      	adds	r3, #20
 800b3f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3f8:	627a      	str	r2, [r7, #36]	@ 0x24
 800b3fa:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fc:	6a39      	ldr	r1, [r7, #32]
 800b3fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b400:	e841 2300 	strex	r3, r2, [r1]
 800b404:	61fb      	str	r3, [r7, #28]
   return(result);
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1e5      	bne.n	800b3d8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	e000      	b.n	800b412 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800b410:	2302      	movs	r3, #2
  }
}
 800b412:	4618      	mov	r0, r3
 800b414:	3730      	adds	r7, #48	@ 0x30
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	0800b987 	.word	0x0800b987
 800b420:	0800ba21 	.word	0x0800ba21
 800b424:	0800ba3d 	.word	0x0800ba3d

0800b428 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b0ba      	sub	sp, #232	@ 0xe8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b44e:	2300      	movs	r3, #0
 800b450:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b454:	2300      	movs	r3, #0
 800b456:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b45a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b45e:	f003 030f 	and.w	r3, r3, #15
 800b462:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d10f      	bne.n	800b48e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b472:	f003 0320 	and.w	r3, r3, #32
 800b476:	2b00      	cmp	r3, #0
 800b478:	d009      	beq.n	800b48e <HAL_UART_IRQHandler+0x66>
 800b47a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b47e:	f003 0320 	and.w	r3, r3, #32
 800b482:	2b00      	cmp	r3, #0
 800b484:	d003      	beq.n	800b48e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 fccd 	bl	800be26 <UART_Receive_IT>
      return;
 800b48c:	e25b      	b.n	800b946 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b48e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b492:	2b00      	cmp	r3, #0
 800b494:	f000 80de 	beq.w	800b654 <HAL_UART_IRQHandler+0x22c>
 800b498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b49c:	f003 0301 	and.w	r3, r3, #1
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d106      	bne.n	800b4b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f000 80d1 	beq.w	800b654 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b4b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4b6:	f003 0301 	and.w	r3, r3, #1
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00b      	beq.n	800b4d6 <HAL_UART_IRQHandler+0xae>
 800b4be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d005      	beq.n	800b4d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4ce:	f043 0201 	orr.w	r2, r3, #1
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4da:	f003 0304 	and.w	r3, r3, #4
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00b      	beq.n	800b4fa <HAL_UART_IRQHandler+0xd2>
 800b4e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4e6:	f003 0301 	and.w	r3, r3, #1
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d005      	beq.n	800b4fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4f2:	f043 0202 	orr.w	r2, r3, #2
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4fe:	f003 0302 	and.w	r3, r3, #2
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00b      	beq.n	800b51e <HAL_UART_IRQHandler+0xf6>
 800b506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d005      	beq.n	800b51e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b516:	f043 0204 	orr.w	r2, r3, #4
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b51e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b522:	f003 0308 	and.w	r3, r3, #8
 800b526:	2b00      	cmp	r3, #0
 800b528:	d011      	beq.n	800b54e <HAL_UART_IRQHandler+0x126>
 800b52a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b52e:	f003 0320 	and.w	r3, r3, #32
 800b532:	2b00      	cmp	r3, #0
 800b534:	d105      	bne.n	800b542 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b53a:	f003 0301 	and.w	r3, r3, #1
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d005      	beq.n	800b54e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b546:	f043 0208 	orr.w	r2, r3, #8
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b552:	2b00      	cmp	r3, #0
 800b554:	f000 81f2 	beq.w	800b93c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b55c:	f003 0320 	and.w	r3, r3, #32
 800b560:	2b00      	cmp	r3, #0
 800b562:	d008      	beq.n	800b576 <HAL_UART_IRQHandler+0x14e>
 800b564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b568:	f003 0320 	and.w	r3, r3, #32
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d002      	beq.n	800b576 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fc58 	bl	800be26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	695b      	ldr	r3, [r3, #20]
 800b57c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b580:	2b00      	cmp	r3, #0
 800b582:	bf14      	ite	ne
 800b584:	2301      	movne	r3, #1
 800b586:	2300      	moveq	r3, #0
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b592:	f003 0308 	and.w	r3, r3, #8
 800b596:	2b00      	cmp	r3, #0
 800b598:	d103      	bne.n	800b5a2 <HAL_UART_IRQHandler+0x17a>
 800b59a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d04f      	beq.n	800b642 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 fb62 	bl	800bc6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d041      	beq.n	800b63a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	3314      	adds	r3, #20
 800b5bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b5c4:	e853 3f00 	ldrex	r3, [r3]
 800b5c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b5cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b5d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	3314      	adds	r3, #20
 800b5de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b5e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b5e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b5ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b5f2:	e841 2300 	strex	r3, r2, [r1]
 800b5f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b5fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1d9      	bne.n	800b5b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b606:	2b00      	cmp	r3, #0
 800b608:	d013      	beq.n	800b632 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b60e:	4a7e      	ldr	r2, [pc, #504]	@ (800b808 <HAL_UART_IRQHandler+0x3e0>)
 800b610:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b616:	4618      	mov	r0, r3
 800b618:	f7fa fe70 	bl	80062fc <HAL_DMA_Abort_IT>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d016      	beq.n	800b650 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b62c:	4610      	mov	r0, r2
 800b62e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b630:	e00e      	b.n	800b650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 f993 	bl	800b95e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b638:	e00a      	b.n	800b650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f98f 	bl	800b95e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b640:	e006      	b.n	800b650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f98b 	bl	800b95e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b64e:	e175      	b.n	800b93c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b650:	bf00      	nop
    return;
 800b652:	e173      	b.n	800b93c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b658:	2b01      	cmp	r3, #1
 800b65a:	f040 814f 	bne.w	800b8fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b65e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b662:	f003 0310 	and.w	r3, r3, #16
 800b666:	2b00      	cmp	r3, #0
 800b668:	f000 8148 	beq.w	800b8fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b670:	f003 0310 	and.w	r3, r3, #16
 800b674:	2b00      	cmp	r3, #0
 800b676:	f000 8141 	beq.w	800b8fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b67a:	2300      	movs	r3, #0
 800b67c:	60bb      	str	r3, [r7, #8]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	60bb      	str	r3, [r7, #8]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	60bb      	str	r3, [r7, #8]
 800b68e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 80b6 	beq.w	800b80c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b6ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f000 8145 	beq.w	800b940 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b6ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	f080 813e 	bcs.w	800b940 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b6ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6d0:	699b      	ldr	r3, [r3, #24]
 800b6d2:	2b20      	cmp	r3, #32
 800b6d4:	f000 8088 	beq.w	800b7e8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	330c      	adds	r3, #12
 800b6de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b6e6:	e853 3f00 	ldrex	r3, [r3]
 800b6ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b6ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b6f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	330c      	adds	r3, #12
 800b700:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b704:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b708:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b710:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b714:	e841 2300 	strex	r3, r2, [r1]
 800b718:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b71c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1d9      	bne.n	800b6d8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	3314      	adds	r3, #20
 800b72a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b72e:	e853 3f00 	ldrex	r3, [r3]
 800b732:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b734:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b736:	f023 0301 	bic.w	r3, r3, #1
 800b73a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	3314      	adds	r3, #20
 800b744:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b748:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b74c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b750:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b754:	e841 2300 	strex	r3, r2, [r1]
 800b758:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b75a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d1e1      	bne.n	800b724 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3314      	adds	r3, #20
 800b766:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b768:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b76a:	e853 3f00 	ldrex	r3, [r3]
 800b76e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b770:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b772:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b776:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	3314      	adds	r3, #20
 800b780:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b784:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b786:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b788:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b78a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b78c:	e841 2300 	strex	r3, r2, [r1]
 800b790:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b792:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1e3      	bne.n	800b760 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2220      	movs	r2, #32
 800b79c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	330c      	adds	r3, #12
 800b7ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7b0:	e853 3f00 	ldrex	r3, [r3]
 800b7b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b7b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7b8:	f023 0310 	bic.w	r3, r3, #16
 800b7bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	330c      	adds	r3, #12
 800b7c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b7ca:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b7cc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b7d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b7d2:	e841 2300 	strex	r3, r2, [r1]
 800b7d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b7d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1e3      	bne.n	800b7a6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fa fd4e 	bl	8006284 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f8b6 	bl	800b970 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b804:	e09c      	b.n	800b940 <HAL_UART_IRQHandler+0x518>
 800b806:	bf00      	nop
 800b808:	0800bd31 	.word	0x0800bd31
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b814:	b29b      	uxth	r3, r3
 800b816:	1ad3      	subs	r3, r2, r3
 800b818:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b820:	b29b      	uxth	r3, r3
 800b822:	2b00      	cmp	r3, #0
 800b824:	f000 808e 	beq.w	800b944 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b828:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f000 8089 	beq.w	800b944 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	330c      	adds	r3, #12
 800b838:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83c:	e853 3f00 	ldrex	r3, [r3]
 800b840:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b844:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b848:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	330c      	adds	r3, #12
 800b852:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b856:	647a      	str	r2, [r7, #68]	@ 0x44
 800b858:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b85c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b85e:	e841 2300 	strex	r3, r2, [r1]
 800b862:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b866:	2b00      	cmp	r3, #0
 800b868:	d1e3      	bne.n	800b832 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	3314      	adds	r3, #20
 800b870:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b874:	e853 3f00 	ldrex	r3, [r3]
 800b878:	623b      	str	r3, [r7, #32]
   return(result);
 800b87a:	6a3b      	ldr	r3, [r7, #32]
 800b87c:	f023 0301 	bic.w	r3, r3, #1
 800b880:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	3314      	adds	r3, #20
 800b88a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b88e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b890:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b892:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b896:	e841 2300 	strex	r3, r2, [r1]
 800b89a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1e3      	bne.n	800b86a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2220      	movs	r2, #32
 800b8a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	330c      	adds	r3, #12
 800b8b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	e853 3f00 	ldrex	r3, [r3]
 800b8be:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f023 0310 	bic.w	r3, r3, #16
 800b8c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	330c      	adds	r3, #12
 800b8d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b8d4:	61fa      	str	r2, [r7, #28]
 800b8d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d8:	69b9      	ldr	r1, [r7, #24]
 800b8da:	69fa      	ldr	r2, [r7, #28]
 800b8dc:	e841 2300 	strex	r3, r2, [r1]
 800b8e0:	617b      	str	r3, [r7, #20]
   return(result);
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1e3      	bne.n	800b8b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2202      	movs	r2, #2
 800b8ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b8ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 f83b 	bl	800b970 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b8fa:	e023      	b.n	800b944 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b8fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b904:	2b00      	cmp	r3, #0
 800b906:	d009      	beq.n	800b91c <HAL_UART_IRQHandler+0x4f4>
 800b908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b90c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b910:	2b00      	cmp	r3, #0
 800b912:	d003      	beq.n	800b91c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 fa1f 	bl	800bd58 <UART_Transmit_IT>
    return;
 800b91a:	e014      	b.n	800b946 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00e      	beq.n	800b946 <HAL_UART_IRQHandler+0x51e>
 800b928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b92c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b930:	2b00      	cmp	r3, #0
 800b932:	d008      	beq.n	800b946 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 fa5e 	bl	800bdf6 <UART_EndTransmit_IT>
    return;
 800b93a:	e004      	b.n	800b946 <HAL_UART_IRQHandler+0x51e>
    return;
 800b93c:	bf00      	nop
 800b93e:	e002      	b.n	800b946 <HAL_UART_IRQHandler+0x51e>
      return;
 800b940:	bf00      	nop
 800b942:	e000      	b.n	800b946 <HAL_UART_IRQHandler+0x51e>
      return;
 800b944:	bf00      	nop
  }
}
 800b946:	37e8      	adds	r7, #232	@ 0xe8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b954:	bf00      	nop
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	bc80      	pop	{r7}
 800b95c:	4770      	bx	lr

0800b95e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b95e:	b480      	push	{r7}
 800b960:	b083      	sub	sp, #12
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b966:	bf00      	nop
 800b968:	370c      	adds	r7, #12
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bc80      	pop	{r7}
 800b96e:	4770      	bx	lr

0800b970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	460b      	mov	r3, r1
 800b97a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b97c:	bf00      	nop
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	bc80      	pop	{r7}
 800b984:	4770      	bx	lr

0800b986 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b986:	b580      	push	{r7, lr}
 800b988:	b090      	sub	sp, #64	@ 0x40
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 0320 	and.w	r3, r3, #32
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d137      	bne.n	800ba12 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b9a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b9a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	3314      	adds	r3, #20
 800b9ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b2:	e853 3f00 	ldrex	r3, [r3]
 800b9b6:	623b      	str	r3, [r7, #32]
   return(result);
 800b9b8:	6a3b      	ldr	r3, [r7, #32]
 800b9ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9be:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b9c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	3314      	adds	r3, #20
 800b9c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9c8:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9d0:	e841 2300 	strex	r3, r2, [r1]
 800b9d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1e5      	bne.n	800b9a8 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	330c      	adds	r3, #12
 800b9e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	e853 3f00 	ldrex	r3, [r3]
 800b9ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	330c      	adds	r3, #12
 800b9fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b9fc:	61fa      	str	r2, [r7, #28]
 800b9fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba00:	69b9      	ldr	r1, [r7, #24]
 800ba02:	69fa      	ldr	r2, [r7, #28]
 800ba04:	e841 2300 	strex	r3, r2, [r1]
 800ba08:	617b      	str	r3, [r7, #20]
   return(result);
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1e5      	bne.n	800b9dc <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba10:	e002      	b.n	800ba18 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ba12:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ba14:	f7f7 ffe0 	bl	80039d8 <HAL_UART_TxCpltCallback>
}
 800ba18:	bf00      	nop
 800ba1a:	3740      	adds	r7, #64	@ 0x40
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba2c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f7ff ff8c 	bl	800b94c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba34:	bf00      	nop
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ba44:	2300      	movs	r3, #0
 800ba46:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba4c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	695b      	ldr	r3, [r3, #20]
 800ba54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	bf14      	ite	ne
 800ba5c:	2301      	movne	r3, #1
 800ba5e:	2300      	moveq	r3, #0
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	2b21      	cmp	r3, #33	@ 0x21
 800ba6e:	d108      	bne.n	800ba82 <UART_DMAError+0x46>
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d005      	beq.n	800ba82 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800ba7c:	68b8      	ldr	r0, [r7, #8]
 800ba7e:	f000 f8ce 	bl	800bc1e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	695b      	ldr	r3, [r3, #20]
 800ba88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	bf14      	ite	ne
 800ba90:	2301      	movne	r3, #1
 800ba92:	2300      	moveq	r3, #0
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	2b22      	cmp	r3, #34	@ 0x22
 800baa2:	d108      	bne.n	800bab6 <UART_DMAError+0x7a>
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d005      	beq.n	800bab6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	2200      	movs	r2, #0
 800baae:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800bab0:	68b8      	ldr	r0, [r7, #8]
 800bab2:	f000 f8db 	bl	800bc6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baba:	f043 0210 	orr.w	r2, r3, #16
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bac2:	68b8      	ldr	r0, [r7, #8]
 800bac4:	f7ff ff4b 	bl	800b95e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bac8:	bf00      	nop
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b090      	sub	sp, #64	@ 0x40
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	603b      	str	r3, [r7, #0]
 800badc:	4613      	mov	r3, r2
 800bade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bae0:	e050      	b.n	800bb84 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae8:	d04c      	beq.n	800bb84 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800baea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800baec:	2b00      	cmp	r3, #0
 800baee:	d007      	beq.n	800bb00 <UART_WaitOnFlagUntilTimeout+0x30>
 800baf0:	f7fa f9e4 	bl	8005ebc <HAL_GetTick>
 800baf4:	4602      	mov	r2, r0
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d241      	bcs.n	800bb84 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	330c      	adds	r3, #12
 800bb06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0a:	e853 3f00 	ldrex	r3, [r3]
 800bb0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb12:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800bb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	330c      	adds	r3, #12
 800bb1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bb20:	637a      	str	r2, [r7, #52]	@ 0x34
 800bb22:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bb26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb28:	e841 2300 	strex	r3, r2, [r1]
 800bb2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bb2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d1e5      	bne.n	800bb00 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	3314      	adds	r3, #20
 800bb3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	e853 3f00 	ldrex	r3, [r3]
 800bb42:	613b      	str	r3, [r7, #16]
   return(result);
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	f023 0301 	bic.w	r3, r3, #1
 800bb4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	3314      	adds	r3, #20
 800bb52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb54:	623a      	str	r2, [r7, #32]
 800bb56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb58:	69f9      	ldr	r1, [r7, #28]
 800bb5a:	6a3a      	ldr	r2, [r7, #32]
 800bb5c:	e841 2300 	strex	r3, r2, [r1]
 800bb60:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1e5      	bne.n	800bb34 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2220      	movs	r2, #32
 800bb74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800bb80:	2303      	movs	r3, #3
 800bb82:	e00f      	b.n	800bba4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	4013      	ands	r3, r2
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	bf0c      	ite	eq
 800bb94:	2301      	moveq	r3, #1
 800bb96:	2300      	movne	r3, #0
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	79fb      	ldrb	r3, [r7, #7]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d09f      	beq.n	800bae2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3740      	adds	r7, #64	@ 0x40
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	88fa      	ldrh	r2, [r7, #6]
 800bbc4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	88fa      	ldrh	r2, [r7, #6]
 800bbca:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2222      	movs	r2, #34	@ 0x22
 800bbd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	691b      	ldr	r3, [r3, #16]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d007      	beq.n	800bbf2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68da      	ldr	r2, [r3, #12]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bbf0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	695a      	ldr	r2, [r3, #20]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f042 0201 	orr.w	r2, r2, #1
 800bc00:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68da      	ldr	r2, [r3, #12]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f042 0220 	orr.w	r2, r2, #32
 800bc10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3714      	adds	r7, #20
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bc80      	pop	{r7}
 800bc1c:	4770      	bx	lr

0800bc1e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bc1e:	b480      	push	{r7}
 800bc20:	b089      	sub	sp, #36	@ 0x24
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	330c      	adds	r3, #12
 800bc2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	e853 3f00 	ldrex	r3, [r3]
 800bc34:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bc3c:	61fb      	str	r3, [r7, #28]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	330c      	adds	r3, #12
 800bc44:	69fa      	ldr	r2, [r7, #28]
 800bc46:	61ba      	str	r2, [r7, #24]
 800bc48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4a:	6979      	ldr	r1, [r7, #20]
 800bc4c:	69ba      	ldr	r2, [r7, #24]
 800bc4e:	e841 2300 	strex	r3, r2, [r1]
 800bc52:	613b      	str	r3, [r7, #16]
   return(result);
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1e5      	bne.n	800bc26 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2220      	movs	r2, #32
 800bc5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800bc62:	bf00      	nop
 800bc64:	3724      	adds	r7, #36	@ 0x24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bc80      	pop	{r7}
 800bc6a:	4770      	bx	lr

0800bc6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b095      	sub	sp, #84	@ 0x54
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	330c      	adds	r3, #12
 800bc7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc7e:	e853 3f00 	ldrex	r3, [r3]
 800bc82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bc84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	330c      	adds	r3, #12
 800bc92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bc94:	643a      	str	r2, [r7, #64]	@ 0x40
 800bc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bc9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc9c:	e841 2300 	strex	r3, r2, [r1]
 800bca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1e5      	bne.n	800bc74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	3314      	adds	r3, #20
 800bcae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb0:	6a3b      	ldr	r3, [r7, #32]
 800bcb2:	e853 3f00 	ldrex	r3, [r3]
 800bcb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	f023 0301 	bic.w	r3, r3, #1
 800bcbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3314      	adds	r3, #20
 800bcc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bcc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bcca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bccc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bcce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcd0:	e841 2300 	strex	r3, r2, [r1]
 800bcd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1e5      	bne.n	800bca8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d119      	bne.n	800bd18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	330c      	adds	r3, #12
 800bcea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	e853 3f00 	ldrex	r3, [r3]
 800bcf2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	f023 0310 	bic.w	r3, r3, #16
 800bcfa:	647b      	str	r3, [r7, #68]	@ 0x44
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	330c      	adds	r3, #12
 800bd02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd04:	61ba      	str	r2, [r7, #24]
 800bd06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd08:	6979      	ldr	r1, [r7, #20]
 800bd0a:	69ba      	ldr	r2, [r7, #24]
 800bd0c:	e841 2300 	strex	r3, r2, [r1]
 800bd10:	613b      	str	r3, [r7, #16]
   return(result);
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1e5      	bne.n	800bce4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2220      	movs	r2, #32
 800bd1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bd26:	bf00      	nop
 800bd28:	3754      	adds	r7, #84	@ 0x54
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bc80      	pop	{r7}
 800bd2e:	4770      	bx	lr

0800bd30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2200      	movs	r2, #0
 800bd42:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2200      	movs	r2, #0
 800bd48:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f7ff fe07 	bl	800b95e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd50:	bf00      	nop
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	2b21      	cmp	r3, #33	@ 0x21
 800bd6a:	d13e      	bne.n	800bdea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd74:	d114      	bne.n	800bda0 <UART_Transmit_IT+0x48>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d110      	bne.n	800bda0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a1b      	ldr	r3, [r3, #32]
 800bd82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	881b      	ldrh	r3, [r3, #0]
 800bd88:	461a      	mov	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd92:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6a1b      	ldr	r3, [r3, #32]
 800bd98:	1c9a      	adds	r2, r3, #2
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	621a      	str	r2, [r3, #32]
 800bd9e:	e008      	b.n	800bdb2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6a1b      	ldr	r3, [r3, #32]
 800bda4:	1c59      	adds	r1, r3, #1
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	6211      	str	r1, [r2, #32]
 800bdaa:	781a      	ldrb	r2, [r3, #0]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10f      	bne.n	800bde6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68da      	ldr	r2, [r3, #12]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bdd4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68da      	ldr	r2, [r3, #12]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bde4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	e000      	b.n	800bdec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bdea:	2302      	movs	r3, #2
  }
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3714      	adds	r7, #20
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bc80      	pop	{r7}
 800bdf4:	4770      	bx	lr

0800bdf6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b082      	sub	sp, #8
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	68da      	ldr	r2, [r3, #12]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800be0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2220      	movs	r2, #32
 800be12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f7f7 fdde 	bl	80039d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b08c      	sub	sp, #48	@ 0x30
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800be34:	b2db      	uxtb	r3, r3
 800be36:	2b22      	cmp	r3, #34	@ 0x22
 800be38:	f040 80ae 	bne.w	800bf98 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be44:	d117      	bne.n	800be76 <UART_Receive_IT+0x50>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d113      	bne.n	800be76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800be4e:	2300      	movs	r3, #0
 800be50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be56:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	b29b      	uxth	r3, r3
 800be60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be64:	b29a      	uxth	r2, r3
 800be66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be6e:	1c9a      	adds	r2, r3, #2
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	629a      	str	r2, [r3, #40]	@ 0x28
 800be74:	e026      	b.n	800bec4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800be7c:	2300      	movs	r3, #0
 800be7e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be88:	d007      	beq.n	800be9a <UART_Receive_IT+0x74>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d10a      	bne.n	800bea8 <UART_Receive_IT+0x82>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	691b      	ldr	r3, [r3, #16]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d106      	bne.n	800bea8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea4:	701a      	strb	r2, [r3, #0]
 800bea6:	e008      	b.n	800beba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bebe:	1c5a      	adds	r2, r3, #1
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bec8:	b29b      	uxth	r3, r3
 800beca:	3b01      	subs	r3, #1
 800becc:	b29b      	uxth	r3, r3
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	4619      	mov	r1, r3
 800bed2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d15d      	bne.n	800bf94 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	68da      	ldr	r2, [r3, #12]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f022 0220 	bic.w	r2, r2, #32
 800bee6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68da      	ldr	r2, [r3, #12]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	695a      	ldr	r2, [r3, #20]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f022 0201 	bic.w	r2, r2, #1
 800bf06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2220      	movs	r2, #32
 800bf0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d135      	bne.n	800bf8a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	330c      	adds	r3, #12
 800bf2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	e853 3f00 	ldrex	r3, [r3]
 800bf32:	613b      	str	r3, [r7, #16]
   return(result);
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	f023 0310 	bic.w	r3, r3, #16
 800bf3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	330c      	adds	r3, #12
 800bf42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf44:	623a      	str	r2, [r7, #32]
 800bf46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf48:	69f9      	ldr	r1, [r7, #28]
 800bf4a:	6a3a      	ldr	r2, [r7, #32]
 800bf4c:	e841 2300 	strex	r3, r2, [r1]
 800bf50:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d1e5      	bne.n	800bf24 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 0310 	and.w	r3, r3, #16
 800bf62:	2b10      	cmp	r3, #16
 800bf64:	d10a      	bne.n	800bf7c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf66:	2300      	movs	r3, #0
 800bf68:	60fb      	str	r3, [r7, #12]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	60fb      	str	r3, [r7, #12]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	60fb      	str	r3, [r7, #12]
 800bf7a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bf80:	4619      	mov	r1, r3
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f7ff fcf4 	bl	800b970 <HAL_UARTEx_RxEventCallback>
 800bf88:	e002      	b.n	800bf90 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7f7 fd0a 	bl	80039a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	e002      	b.n	800bf9a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	e000      	b.n	800bf9a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bf98:	2302      	movs	r3, #2
  }
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3730      	adds	r7, #48	@ 0x30
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
	...

0800bfa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	691b      	ldr	r3, [r3, #16]
 800bfb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	68da      	ldr	r2, [r3, #12]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	689a      	ldr	r2, [r3, #8]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	431a      	orrs	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	695b      	ldr	r3, [r3, #20]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800bfde:	f023 030c 	bic.w	r3, r3, #12
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	6812      	ldr	r2, [r2, #0]
 800bfe6:	68b9      	ldr	r1, [r7, #8]
 800bfe8:	430b      	orrs	r3, r1
 800bfea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	695b      	ldr	r3, [r3, #20]
 800bff2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	699a      	ldr	r2, [r3, #24]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	430a      	orrs	r2, r1
 800c000:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a2c      	ldr	r2, [pc, #176]	@ (800c0b8 <UART_SetConfig+0x114>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d103      	bne.n	800c014 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c00c:	f7fd f8e4 	bl	80091d8 <HAL_RCC_GetPCLK2Freq>
 800c010:	60f8      	str	r0, [r7, #12]
 800c012:	e002      	b.n	800c01a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c014:	f7fd f8cc 	bl	80091b0 <HAL_RCC_GetPCLK1Freq>
 800c018:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	4613      	mov	r3, r2
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	4413      	add	r3, r2
 800c022:	009a      	lsls	r2, r3, #2
 800c024:	441a      	add	r2, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c030:	4a22      	ldr	r2, [pc, #136]	@ (800c0bc <UART_SetConfig+0x118>)
 800c032:	fba2 2303 	umull	r2, r3, r2, r3
 800c036:	095b      	lsrs	r3, r3, #5
 800c038:	0119      	lsls	r1, r3, #4
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	4613      	mov	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4413      	add	r3, r2
 800c042:	009a      	lsls	r2, r3, #2
 800c044:	441a      	add	r2, r3
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c050:	4b1a      	ldr	r3, [pc, #104]	@ (800c0bc <UART_SetConfig+0x118>)
 800c052:	fba3 0302 	umull	r0, r3, r3, r2
 800c056:	095b      	lsrs	r3, r3, #5
 800c058:	2064      	movs	r0, #100	@ 0x64
 800c05a:	fb00 f303 	mul.w	r3, r0, r3
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	011b      	lsls	r3, r3, #4
 800c062:	3332      	adds	r3, #50	@ 0x32
 800c064:	4a15      	ldr	r2, [pc, #84]	@ (800c0bc <UART_SetConfig+0x118>)
 800c066:	fba2 2303 	umull	r2, r3, r2, r3
 800c06a:	095b      	lsrs	r3, r3, #5
 800c06c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c070:	4419      	add	r1, r3
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	4613      	mov	r3, r2
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	4413      	add	r3, r2
 800c07a:	009a      	lsls	r2, r3, #2
 800c07c:	441a      	add	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	fbb2 f2f3 	udiv	r2, r2, r3
 800c088:	4b0c      	ldr	r3, [pc, #48]	@ (800c0bc <UART_SetConfig+0x118>)
 800c08a:	fba3 0302 	umull	r0, r3, r3, r2
 800c08e:	095b      	lsrs	r3, r3, #5
 800c090:	2064      	movs	r0, #100	@ 0x64
 800c092:	fb00 f303 	mul.w	r3, r0, r3
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	011b      	lsls	r3, r3, #4
 800c09a:	3332      	adds	r3, #50	@ 0x32
 800c09c:	4a07      	ldr	r2, [pc, #28]	@ (800c0bc <UART_SetConfig+0x118>)
 800c09e:	fba2 2303 	umull	r2, r3, r2, r3
 800c0a2:	095b      	lsrs	r3, r3, #5
 800c0a4:	f003 020f 	and.w	r2, r3, #15
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	440a      	add	r2, r1
 800c0ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c0b0:	bf00      	nop
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	40013800 	.word	0x40013800
 800c0bc:	51eb851f 	.word	0x51eb851f

0800c0c0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c0c0:	b084      	sub	sp, #16
 800c0c2:	b480      	push	{r7}
 800c0c4:	b085      	sub	sp, #20
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
 800c0ca:	f107 001c 	add.w	r0, r7, #28
 800c0ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c0d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c0da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800c0de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800c0e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800c0e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800c0ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800c0fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	431a      	orrs	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3714      	adds	r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bc80      	pop	{r7}
 800c110:	b004      	add	sp, #16
 800c112:	4770      	bx	lr

0800c114 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c122:	4618      	mov	r0, r3
 800c124:	370c      	adds	r7, #12
 800c126:	46bd      	mov	sp, r7
 800c128:	bc80      	pop	{r7}
 800c12a:	4770      	bx	lr

0800c12c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	370c      	adds	r7, #12
 800c146:	46bd      	mov	sp, r7
 800c148:	bc80      	pop	{r7}
 800c14a:	4770      	bx	lr

0800c14c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2203      	movs	r2, #3
 800c158:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	bc80      	pop	{r7}
 800c164:	4770      	bx	lr

0800c166 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c166:	b480      	push	{r7}
 800c168:	b083      	sub	sp, #12
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f003 0303 	and.w	r3, r3, #3
}
 800c176:	4618      	mov	r0, r3
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bc80      	pop	{r7}
 800c17e:	4770      	bx	lr

0800c180 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c180:	b480      	push	{r7}
 800c182:	b085      	sub	sp, #20
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c19e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c1a4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c1aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c1ba:	f023 030f 	bic.w	r3, r3, #15
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	431a      	orrs	r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c1c6:	2300      	movs	r3, #0
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3714      	adds	r7, #20
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bc80      	pop	{r7}
 800c1d0:	4770      	bx	lr

0800c1d2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c1d2:	b480      	push	{r7}
 800c1d4:	b083      	sub	sp, #12
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	b2db      	uxtb	r3, r3
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bc80      	pop	{r7}
 800c1e8:	4770      	bx	lr

0800c1ea <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c1ea:	b480      	push	{r7}
 800c1ec:	b085      	sub	sp, #20
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
 800c1f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	3314      	adds	r3, #20
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
}  
 800c204:	4618      	mov	r0, r3
 800c206:	3714      	adds	r7, #20
 800c208:	46bd      	mov	sp, r7
 800c20a:	bc80      	pop	{r7}
 800c20c:	4770      	bx	lr

0800c20e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c20e:	b480      	push	{r7}
 800c210:	b085      	sub	sp, #20
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
 800c216:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c218:	2300      	movs	r3, #0
 800c21a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	685a      	ldr	r2, [r3, #4]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c234:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c23a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c240:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	4313      	orrs	r3, r2
 800c246:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c24c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	431a      	orrs	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c258:	2300      	movs	r3, #0

}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3714      	adds	r7, #20
 800c25e:	46bd      	mov	sp, r7
 800c260:	bc80      	pop	{r7}
 800c262:	4770      	bx	lr

0800c264 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c272:	2310      	movs	r3, #16
 800c274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c276:	2340      	movs	r3, #64	@ 0x40
 800c278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c27a:	2300      	movs	r3, #0
 800c27c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c27e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c282:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c284:	f107 0308 	add.w	r3, r7, #8
 800c288:	4619      	mov	r1, r3
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f7ff ff78 	bl	800c180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c290:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c294:	2110      	movs	r1, #16
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f9d6 	bl	800c648 <SDMMC_GetCmdResp1>
 800c29c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c29e:	69fb      	ldr	r3, [r7, #28]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3720      	adds	r7, #32
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b088      	sub	sp, #32
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c2b6:	2311      	movs	r3, #17
 800c2b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c2ba:	2340      	movs	r3, #64	@ 0x40
 800c2bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c2c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c2c8:	f107 0308 	add.w	r3, r7, #8
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7ff ff56 	bl	800c180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c2d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2d8:	2111      	movs	r1, #17
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f9b4 	bl	800c648 <SDMMC_GetCmdResp1>
 800c2e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2e2:	69fb      	ldr	r3, [r7, #28]
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3720      	adds	r7, #32
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b088      	sub	sp, #32
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c2fa:	2312      	movs	r3, #18
 800c2fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c2fe:	2340      	movs	r3, #64	@ 0x40
 800c300:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c302:	2300      	movs	r3, #0
 800c304:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c30a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c30c:	f107 0308 	add.w	r3, r7, #8
 800c310:	4619      	mov	r1, r3
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f7ff ff34 	bl	800c180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c31c:	2112      	movs	r1, #18
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f992 	bl	800c648 <SDMMC_GetCmdResp1>
 800c324:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c326:	69fb      	ldr	r3, [r7, #28]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3720      	adds	r7, #32
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b088      	sub	sp, #32
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c33e:	2318      	movs	r3, #24
 800c340:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c342:	2340      	movs	r3, #64	@ 0x40
 800c344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c346:	2300      	movs	r3, #0
 800c348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c34a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c34e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c350:	f107 0308 	add.w	r3, r7, #8
 800c354:	4619      	mov	r1, r3
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7ff ff12 	bl	800c180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c35c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c360:	2118      	movs	r1, #24
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 f970 	bl	800c648 <SDMMC_GetCmdResp1>
 800c368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c36a:	69fb      	ldr	r3, [r7, #28]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3720      	adds	r7, #32
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b088      	sub	sp, #32
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c382:	2319      	movs	r3, #25
 800c384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c386:	2340      	movs	r3, #64	@ 0x40
 800c388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c38a:	2300      	movs	r3, #0
 800c38c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c38e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c392:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c394:	f107 0308 	add.w	r3, r7, #8
 800c398:	4619      	mov	r1, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7ff fef0 	bl	800c180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c3a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3a4:	2119      	movs	r1, #25
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 f94e 	bl	800c648 <SDMMC_GetCmdResp1>
 800c3ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3ae:	69fb      	ldr	r3, [r7, #28]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3720      	adds	r7, #32
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b088      	sub	sp, #32
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c3c4:	230c      	movs	r3, #12
 800c3c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c3c8:	2340      	movs	r3, #64	@ 0x40
 800c3ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c3d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c3d6:	f107 0308 	add.w	r3, r7, #8
 800c3da:	4619      	mov	r1, r3
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f7ff fecf 	bl	800c180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c3e2:	4a05      	ldr	r2, [pc, #20]	@ (800c3f8 <SDMMC_CmdStopTransfer+0x40>)
 800c3e4:	210c      	movs	r1, #12
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f92e 	bl	800c648 <SDMMC_GetCmdResp1>
 800c3ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3ee:	69fb      	ldr	r3, [r7, #28]
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3720      	adds	r7, #32
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	05f5e100 	.word	0x05f5e100

0800c3fc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b08a      	sub	sp, #40	@ 0x28
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c40c:	2307      	movs	r3, #7
 800c40e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c410:	2340      	movs	r3, #64	@ 0x40
 800c412:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c414:	2300      	movs	r3, #0
 800c416:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c418:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c41c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c41e:	f107 0310 	add.w	r3, r7, #16
 800c422:	4619      	mov	r1, r3
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f7ff feab 	bl	800c180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c42a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c42e:	2107      	movs	r1, #7
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	f000 f909 	bl	800c648 <SDMMC_GetCmdResp1>
 800c436:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800c438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3728      	adds	r7, #40	@ 0x28
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b088      	sub	sp, #32
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c44a:	2300      	movs	r3, #0
 800c44c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c44e:	2300      	movs	r3, #0
 800c450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c452:	2300      	movs	r3, #0
 800c454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c456:	2300      	movs	r3, #0
 800c458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c45a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c45e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c460:	f107 0308 	add.w	r3, r7, #8
 800c464:	4619      	mov	r1, r3
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f7ff fe8a 	bl	800c180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 fb21 	bl	800cab4 <SDMMC_GetCmdError>
 800c472:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c474:	69fb      	ldr	r3, [r7, #28]
}
 800c476:	4618      	mov	r0, r3
 800c478:	3720      	adds	r7, #32
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b088      	sub	sp, #32
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c486:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c48a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c48c:	2308      	movs	r3, #8
 800c48e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c490:	2340      	movs	r3, #64	@ 0x40
 800c492:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c494:	2300      	movs	r3, #0
 800c496:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c498:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c49c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c49e:	f107 0308 	add.w	r3, r7, #8
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f7ff fe6b 	bl	800c180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 fab4 	bl	800ca18 <SDMMC_GetCmdResp7>
 800c4b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4b2:	69fb      	ldr	r3, [r7, #28]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3720      	adds	r7, #32
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b088      	sub	sp, #32
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c4ca:	2337      	movs	r3, #55	@ 0x37
 800c4cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c4ce:	2340      	movs	r3, #64	@ 0x40
 800c4d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4dc:	f107 0308 	add.w	r3, r7, #8
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7ff fe4c 	bl	800c180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c4e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4ec:	2137      	movs	r1, #55	@ 0x37
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 f8aa 	bl	800c648 <SDMMC_GetCmdResp1>
 800c4f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4f6:	69fb      	ldr	r3, [r7, #28]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3720      	adds	r7, #32
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b088      	sub	sp, #32
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c510:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c514:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c516:	2329      	movs	r3, #41	@ 0x29
 800c518:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c51a:	2340      	movs	r3, #64	@ 0x40
 800c51c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c51e:	2300      	movs	r3, #0
 800c520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c522:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c526:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c528:	f107 0308 	add.w	r3, r7, #8
 800c52c:	4619      	mov	r1, r3
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f7ff fe26 	bl	800c180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 f9bd 	bl	800c8b4 <SDMMC_GetCmdResp3>
 800c53a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c53c:	69fb      	ldr	r3, [r7, #28]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3720      	adds	r7, #32
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b088      	sub	sp, #32
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c54e:	2300      	movs	r3, #0
 800c550:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c552:	2302      	movs	r3, #2
 800c554:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c556:	23c0      	movs	r3, #192	@ 0xc0
 800c558:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c55a:	2300      	movs	r3, #0
 800c55c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c55e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c562:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c564:	f107 0308 	add.w	r3, r7, #8
 800c568:	4619      	mov	r1, r3
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f7ff fe08 	bl	800c180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 f957 	bl	800c824 <SDMMC_GetCmdResp2>
 800c576:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c578:	69fb      	ldr	r3, [r7, #28]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3720      	adds	r7, #32
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b088      	sub	sp, #32
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
 800c58a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c590:	2309      	movs	r3, #9
 800c592:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c594:	23c0      	movs	r3, #192	@ 0xc0
 800c596:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c598:	2300      	movs	r3, #0
 800c59a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c59c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5a2:	f107 0308 	add.w	r3, r7, #8
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f7ff fde9 	bl	800c180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 f938 	bl	800c824 <SDMMC_GetCmdResp2>
 800c5b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5b6:	69fb      	ldr	r3, [r7, #28]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3720      	adds	r7, #32
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b088      	sub	sp, #32
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c5ce:	2303      	movs	r3, #3
 800c5d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5d2:	2340      	movs	r3, #64	@ 0x40
 800c5d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5e0:	f107 0308 	add.w	r3, r7, #8
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7ff fdca 	bl	800c180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c5ec:	683a      	ldr	r2, [r7, #0]
 800c5ee:	2103      	movs	r1, #3
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 f99b 	bl	800c92c <SDMMC_GetCmdResp6>
 800c5f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5f8:	69fb      	ldr	r3, [r7, #28]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3720      	adds	r7, #32
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b088      	sub	sp, #32
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c610:	230d      	movs	r3, #13
 800c612:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c614:	2340      	movs	r3, #64	@ 0x40
 800c616:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c618:	2300      	movs	r3, #0
 800c61a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c61c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c620:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c622:	f107 0308 	add.w	r3, r7, #8
 800c626:	4619      	mov	r1, r3
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7ff fda9 	bl	800c180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c62e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c632:	210d      	movs	r1, #13
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 f807 	bl	800c648 <SDMMC_GetCmdResp1>
 800c63a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c63c:	69fb      	ldr	r3, [r7, #28]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3720      	adds	r7, #32
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
	...

0800c648 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b088      	sub	sp, #32
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	460b      	mov	r3, r1
 800c652:	607a      	str	r2, [r7, #4]
 800c654:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c656:	4b70      	ldr	r3, [pc, #448]	@ (800c818 <SDMMC_GetCmdResp1+0x1d0>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a70      	ldr	r2, [pc, #448]	@ (800c81c <SDMMC_GetCmdResp1+0x1d4>)
 800c65c:	fba2 2303 	umull	r2, r3, r2, r3
 800c660:	0a5a      	lsrs	r2, r3, #9
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	fb02 f303 	mul.w	r3, r2, r3
 800c668:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	1e5a      	subs	r2, r3, #1
 800c66e:	61fa      	str	r2, [r7, #28]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d102      	bne.n	800c67a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c674:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c678:	e0c9      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c67e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c686:	2b00      	cmp	r3, #0
 800c688:	d0ef      	beq.n	800c66a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1ea      	bne.n	800c66a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c698:	f003 0304 	and.w	r3, r3, #4
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d004      	beq.n	800c6aa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2204      	movs	r2, #4
 800c6a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6a6:	2304      	movs	r3, #4
 800c6a8:	e0b1      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6ae:	f003 0301 	and.w	r3, r3, #1
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d004      	beq.n	800c6c0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e0a6      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	22c5      	movs	r2, #197	@ 0xc5
 800c6c4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f7ff fd83 	bl	800c1d2 <SDIO_GetCommandResponse>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	7afb      	ldrb	r3, [r7, #11]
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d001      	beq.n	800c6da <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e099      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c6da:	2100      	movs	r1, #0
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	f7ff fd84 	bl	800c1ea <SDIO_GetResponse>
 800c6e2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c6e4:	697a      	ldr	r2, [r7, #20]
 800c6e6:	4b4e      	ldr	r3, [pc, #312]	@ (800c820 <SDMMC_GetCmdResp1+0x1d8>)
 800c6e8:	4013      	ands	r3, r2
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d101      	bne.n	800c6f2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	e08d      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	da02      	bge.n	800c6fe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c6f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c6fc:	e087      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c704:	2b00      	cmp	r3, #0
 800c706:	d001      	beq.n	800c70c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c708:	2340      	movs	r3, #64	@ 0x40
 800c70a:	e080      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c712:	2b00      	cmp	r3, #0
 800c714:	d001      	beq.n	800c71a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c716:	2380      	movs	r3, #128	@ 0x80
 800c718:	e079      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c720:	2b00      	cmp	r3, #0
 800c722:	d002      	beq.n	800c72a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c724:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c728:	e071      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c730:	2b00      	cmp	r3, #0
 800c732:	d002      	beq.n	800c73a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c734:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c738:	e069      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c740:	2b00      	cmp	r3, #0
 800c742:	d002      	beq.n	800c74a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c744:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c748:	e061      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d002      	beq.n	800c75a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c754:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c758:	e059      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c760:	2b00      	cmp	r3, #0
 800c762:	d002      	beq.n	800c76a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c768:	e051      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c770:	2b00      	cmp	r3, #0
 800c772:	d002      	beq.n	800c77a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c774:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c778:	e049      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c780:	2b00      	cmp	r3, #0
 800c782:	d002      	beq.n	800c78a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c784:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c788:	e041      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c790:	2b00      	cmp	r3, #0
 800c792:	d002      	beq.n	800c79a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c794:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c798:	e039      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d002      	beq.n	800c7aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c7a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c7a8:	e031      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d002      	beq.n	800c7ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c7b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c7b8:	e029      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d002      	beq.n	800c7ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c7c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c7c8:	e021      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d002      	beq.n	800c7da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c7d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c7d8:	e019      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d002      	beq.n	800c7ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c7e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c7e8:	e011      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d002      	beq.n	800c7fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c7f4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c7f8:	e009      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f003 0308 	and.w	r3, r3, #8
 800c800:	2b00      	cmp	r3, #0
 800c802:	d002      	beq.n	800c80a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c804:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c808:	e001      	b.n	800c80e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c80a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3720      	adds	r7, #32
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	20000028 	.word	0x20000028
 800c81c:	10624dd3 	.word	0x10624dd3
 800c820:	fdffe008 	.word	0xfdffe008

0800c824 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c82c:	4b1f      	ldr	r3, [pc, #124]	@ (800c8ac <SDMMC_GetCmdResp2+0x88>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a1f      	ldr	r2, [pc, #124]	@ (800c8b0 <SDMMC_GetCmdResp2+0x8c>)
 800c832:	fba2 2303 	umull	r2, r3, r2, r3
 800c836:	0a5b      	lsrs	r3, r3, #9
 800c838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c83c:	fb02 f303 	mul.w	r3, r2, r3
 800c840:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	1e5a      	subs	r2, r3, #1
 800c846:	60fa      	str	r2, [r7, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d102      	bne.n	800c852 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c84c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c850:	e026      	b.n	800c8a0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c856:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d0ef      	beq.n	800c842 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d1ea      	bne.n	800c842 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c870:	f003 0304 	and.w	r3, r3, #4
 800c874:	2b00      	cmp	r3, #0
 800c876:	d004      	beq.n	800c882 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2204      	movs	r2, #4
 800c87c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c87e:	2304      	movs	r3, #4
 800c880:	e00e      	b.n	800c8a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d004      	beq.n	800c898 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2201      	movs	r2, #1
 800c892:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c894:	2301      	movs	r3, #1
 800c896:	e003      	b.n	800c8a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	22c5      	movs	r2, #197	@ 0xc5
 800c89c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3714      	adds	r7, #20
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bc80      	pop	{r7}
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	20000028 	.word	0x20000028
 800c8b0:	10624dd3 	.word	0x10624dd3

0800c8b4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8bc:	4b19      	ldr	r3, [pc, #100]	@ (800c924 <SDMMC_GetCmdResp3+0x70>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a19      	ldr	r2, [pc, #100]	@ (800c928 <SDMMC_GetCmdResp3+0x74>)
 800c8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8c6:	0a5b      	lsrs	r3, r3, #9
 800c8c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8cc:	fb02 f303 	mul.w	r3, r2, r3
 800c8d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	1e5a      	subs	r2, r3, #1
 800c8d6:	60fa      	str	r2, [r7, #12]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d102      	bne.n	800c8e2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c8dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c8e0:	e01b      	b.n	800c91a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d0ef      	beq.n	800c8d2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1ea      	bne.n	800c8d2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c900:	f003 0304 	and.w	r3, r3, #4
 800c904:	2b00      	cmp	r3, #0
 800c906:	d004      	beq.n	800c912 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2204      	movs	r2, #4
 800c90c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c90e:	2304      	movs	r3, #4
 800c910:	e003      	b.n	800c91a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	22c5      	movs	r2, #197	@ 0xc5
 800c916:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3714      	adds	r7, #20
 800c91e:	46bd      	mov	sp, r7
 800c920:	bc80      	pop	{r7}
 800c922:	4770      	bx	lr
 800c924:	20000028 	.word	0x20000028
 800c928:	10624dd3 	.word	0x10624dd3

0800c92c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b088      	sub	sp, #32
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	460b      	mov	r3, r1
 800c936:	607a      	str	r2, [r7, #4]
 800c938:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c93a:	4b35      	ldr	r3, [pc, #212]	@ (800ca10 <SDMMC_GetCmdResp6+0xe4>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a35      	ldr	r2, [pc, #212]	@ (800ca14 <SDMMC_GetCmdResp6+0xe8>)
 800c940:	fba2 2303 	umull	r2, r3, r2, r3
 800c944:	0a5b      	lsrs	r3, r3, #9
 800c946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c94a:	fb02 f303 	mul.w	r3, r2, r3
 800c94e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	1e5a      	subs	r2, r3, #1
 800c954:	61fa      	str	r2, [r7, #28]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d102      	bne.n	800c960 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c95a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c95e:	e052      	b.n	800ca06 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c964:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d0ef      	beq.n	800c950 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1ea      	bne.n	800c950 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c97e:	f003 0304 	and.w	r3, r3, #4
 800c982:	2b00      	cmp	r3, #0
 800c984:	d004      	beq.n	800c990 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2204      	movs	r2, #4
 800c98a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c98c:	2304      	movs	r3, #4
 800c98e:	e03a      	b.n	800ca06 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c994:	f003 0301 	and.w	r3, r3, #1
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d004      	beq.n	800c9a6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e02f      	b.n	800ca06 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c9a6:	68f8      	ldr	r0, [r7, #12]
 800c9a8:	f7ff fc13 	bl	800c1d2 <SDIO_GetCommandResponse>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	7afb      	ldrb	r3, [r7, #11]
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d001      	beq.n	800c9ba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e025      	b.n	800ca06 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	22c5      	movs	r2, #197	@ 0xc5
 800c9be:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f7ff fc11 	bl	800c1ea <SDIO_GetResponse>
 800c9c8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d106      	bne.n	800c9e2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	0c1b      	lsrs	r3, r3, #16
 800c9d8:	b29a      	uxth	r2, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	e011      	b.n	800ca06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d002      	beq.n	800c9f2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c9ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c9f0:	e009      	b.n	800ca06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d002      	beq.n	800ca02 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c9fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca00:	e001      	b.n	800ca06 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ca02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3720      	adds	r7, #32
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	20000028 	.word	0x20000028
 800ca14:	10624dd3 	.word	0x10624dd3

0800ca18 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca20:	4b22      	ldr	r3, [pc, #136]	@ (800caac <SDMMC_GetCmdResp7+0x94>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a22      	ldr	r2, [pc, #136]	@ (800cab0 <SDMMC_GetCmdResp7+0x98>)
 800ca26:	fba2 2303 	umull	r2, r3, r2, r3
 800ca2a:	0a5b      	lsrs	r3, r3, #9
 800ca2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca30:	fb02 f303 	mul.w	r3, r2, r3
 800ca34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	1e5a      	subs	r2, r3, #1
 800ca3a:	60fa      	str	r2, [r7, #12]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d102      	bne.n	800ca46 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca40:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ca44:	e02c      	b.n	800caa0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d0ef      	beq.n	800ca36 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1ea      	bne.n	800ca36 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca64:	f003 0304 	and.w	r3, r3, #4
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d004      	beq.n	800ca76 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2204      	movs	r2, #4
 800ca70:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca72:	2304      	movs	r3, #4
 800ca74:	e014      	b.n	800caa0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca7a:	f003 0301 	and.w	r3, r3, #1
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d004      	beq.n	800ca8c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2201      	movs	r2, #1
 800ca86:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e009      	b.n	800caa0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d002      	beq.n	800ca9e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2240      	movs	r2, #64	@ 0x40
 800ca9c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ca9e:	2300      	movs	r3, #0
  
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3714      	adds	r7, #20
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bc80      	pop	{r7}
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	20000028 	.word	0x20000028
 800cab0:	10624dd3 	.word	0x10624dd3

0800cab4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cabc:	4b10      	ldr	r3, [pc, #64]	@ (800cb00 <SDMMC_GetCmdError+0x4c>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a10      	ldr	r2, [pc, #64]	@ (800cb04 <SDMMC_GetCmdError+0x50>)
 800cac2:	fba2 2303 	umull	r2, r3, r2, r3
 800cac6:	0a5b      	lsrs	r3, r3, #9
 800cac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cacc:	fb02 f303 	mul.w	r3, r2, r3
 800cad0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	1e5a      	subs	r2, r3, #1
 800cad6:	60fa      	str	r2, [r7, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d102      	bne.n	800cae2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cadc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cae0:	e009      	b.n	800caf6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800caea:	2b00      	cmp	r3, #0
 800caec:	d0f1      	beq.n	800cad2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	22c5      	movs	r2, #197	@ 0xc5
 800caf2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bc80      	pop	{r7}
 800cafe:	4770      	bx	lr
 800cb00:	20000028 	.word	0x20000028
 800cb04:	10624dd3 	.word	0x10624dd3

0800cb08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cb0c:	4904      	ldr	r1, [pc, #16]	@ (800cb20 <MX_FATFS_Init+0x18>)
 800cb0e:	4805      	ldr	r0, [pc, #20]	@ (800cb24 <MX_FATFS_Init+0x1c>)
 800cb10:	f003 f958 	bl	800fdc4 <FATFS_LinkDriver>
 800cb14:	4603      	mov	r3, r0
 800cb16:	461a      	mov	r2, r3
 800cb18:	4b03      	ldr	r3, [pc, #12]	@ (800cb28 <MX_FATFS_Init+0x20>)
 800cb1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cb1c:	bf00      	nop
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	20000e08 	.word	0x20000e08
 800cb24:	08013278 	.word	0x08013278
 800cb28:	20000e04 	.word	0x20000e04

0800cb2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cb30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bc80      	pop	{r7}
 800cb38:	4770      	bx	lr
	...

0800cb3c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cb42:	2300      	movs	r3, #0
 800cb44:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cb46:	f000 f86b 	bl	800cc20 <BSP_SD_IsDetected>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d001      	beq.n	800cb54 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cb50:	2301      	movs	r3, #1
 800cb52:	e005      	b.n	800cb60 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cb54:	4804      	ldr	r0, [pc, #16]	@ (800cb68 <BSP_SD_Init+0x2c>)
 800cb56:	f7fc fba1 	bl	800929c <HAL_SD_Init>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800cb5e:	79fb      	ldrb	r3, [r7, #7]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	2000087c 	.word	0x2000087c

0800cb6c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b088      	sub	sp, #32
 800cb70:	af02      	add	r7, sp, #8
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	607a      	str	r2, [r7, #4]
 800cb78:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	9300      	str	r3, [sp, #0]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	68ba      	ldr	r2, [r7, #8]
 800cb86:	68f9      	ldr	r1, [r7, #12]
 800cb88:	4806      	ldr	r0, [pc, #24]	@ (800cba4 <BSP_SD_ReadBlocks+0x38>)
 800cb8a:	f7fc fc37 	bl	80093fc <HAL_SD_ReadBlocks>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d001      	beq.n	800cb98 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cb94:	2301      	movs	r3, #1
 800cb96:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb98:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3718      	adds	r7, #24
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	2000087c 	.word	0x2000087c

0800cba8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b088      	sub	sp, #32
 800cbac:	af02      	add	r7, sp, #8
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	607a      	str	r2, [r7, #4]
 800cbb4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	68f9      	ldr	r1, [r7, #12]
 800cbc4:	4806      	ldr	r0, [pc, #24]	@ (800cbe0 <BSP_SD_WriteBlocks+0x38>)
 800cbc6:	f7fc fdf7 	bl	80097b8 <HAL_SD_WriteBlocks>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d001      	beq.n	800cbd4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cbd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3718      	adds	r7, #24
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	2000087c 	.word	0x2000087c

0800cbe4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cbe8:	4805      	ldr	r0, [pc, #20]	@ (800cc00 <BSP_SD_GetCardState+0x1c>)
 800cbea:	f7fd f93a 	bl	8009e62 <HAL_SD_GetCardState>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b04      	cmp	r3, #4
 800cbf2:	bf14      	ite	ne
 800cbf4:	2301      	movne	r3, #1
 800cbf6:	2300      	moveq	r3, #0
 800cbf8:	b2db      	uxtb	r3, r3
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	2000087c 	.word	0x2000087c

0800cc04 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cc0c:	6879      	ldr	r1, [r7, #4]
 800cc0e:	4803      	ldr	r0, [pc, #12]	@ (800cc1c <BSP_SD_GetCardInfo+0x18>)
 800cc10:	f7fd f8fc 	bl	8009e0c <HAL_SD_GetCardInfo>
}
 800cc14:	bf00      	nop
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	2000087c 	.word	0x2000087c

0800cc20 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cc26:	2301      	movs	r3, #1
 800cc28:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800cc2a:	79fb      	ldrb	r3, [r7, #7]
 800cc2c:	b2db      	uxtb	r3, r3
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	370c      	adds	r7, #12
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bc80      	pop	{r7}
 800cc36:	4770      	bx	lr

0800cc38 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	4603      	mov	r3, r0
 800cc40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cc42:	79fb      	ldrb	r3, [r7, #7]
 800cc44:	4a08      	ldr	r2, [pc, #32]	@ (800cc68 <disk_status+0x30>)
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4413      	add	r3, r2
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	79fa      	ldrb	r2, [r7, #7]
 800cc50:	4905      	ldr	r1, [pc, #20]	@ (800cc68 <disk_status+0x30>)
 800cc52:	440a      	add	r2, r1
 800cc54:	7a12      	ldrb	r2, [r2, #8]
 800cc56:	4610      	mov	r0, r2
 800cc58:	4798      	blx	r3
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cc5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	2000128c 	.word	0x2000128c

0800cc6c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	4603      	mov	r3, r0
 800cc74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cc76:	2300      	movs	r3, #0
 800cc78:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800cc7a:	79fb      	ldrb	r3, [r7, #7]
 800cc7c:	4a0d      	ldr	r2, [pc, #52]	@ (800ccb4 <disk_initialize+0x48>)
 800cc7e:	5cd3      	ldrb	r3, [r2, r3]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d111      	bne.n	800cca8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800cc84:	79fb      	ldrb	r3, [r7, #7]
 800cc86:	4a0b      	ldr	r2, [pc, #44]	@ (800ccb4 <disk_initialize+0x48>)
 800cc88:	2101      	movs	r1, #1
 800cc8a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cc8c:	79fb      	ldrb	r3, [r7, #7]
 800cc8e:	4a09      	ldr	r2, [pc, #36]	@ (800ccb4 <disk_initialize+0x48>)
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	4413      	add	r3, r2
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	79fa      	ldrb	r2, [r7, #7]
 800cc9a:	4906      	ldr	r1, [pc, #24]	@ (800ccb4 <disk_initialize+0x48>)
 800cc9c:	440a      	add	r2, r1
 800cc9e:	7a12      	ldrb	r2, [r2, #8]
 800cca0:	4610      	mov	r0, r2
 800cca2:	4798      	blx	r3
 800cca4:	4603      	mov	r3, r0
 800cca6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3710      	adds	r7, #16
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	2000128c 	.word	0x2000128c

0800ccb8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ccb8:	b590      	push	{r4, r7, lr}
 800ccba:	b087      	sub	sp, #28
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60b9      	str	r1, [r7, #8]
 800ccc0:	607a      	str	r2, [r7, #4]
 800ccc2:	603b      	str	r3, [r7, #0]
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ccc8:	7bfb      	ldrb	r3, [r7, #15]
 800ccca:	4a0a      	ldr	r2, [pc, #40]	@ (800ccf4 <disk_read+0x3c>)
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	4413      	add	r3, r2
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	689c      	ldr	r4, [r3, #8]
 800ccd4:	7bfb      	ldrb	r3, [r7, #15]
 800ccd6:	4a07      	ldr	r2, [pc, #28]	@ (800ccf4 <disk_read+0x3c>)
 800ccd8:	4413      	add	r3, r2
 800ccda:	7a18      	ldrb	r0, [r3, #8]
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	68b9      	ldr	r1, [r7, #8]
 800cce2:	47a0      	blx	r4
 800cce4:	4603      	mov	r3, r0
 800cce6:	75fb      	strb	r3, [r7, #23]
  return res;
 800cce8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	371c      	adds	r7, #28
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd90      	pop	{r4, r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	2000128c 	.word	0x2000128c

0800ccf8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ccf8:	b590      	push	{r4, r7, lr}
 800ccfa:	b087      	sub	sp, #28
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60b9      	str	r1, [r7, #8]
 800cd00:	607a      	str	r2, [r7, #4]
 800cd02:	603b      	str	r3, [r7, #0]
 800cd04:	4603      	mov	r3, r0
 800cd06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cd08:	7bfb      	ldrb	r3, [r7, #15]
 800cd0a:	4a0a      	ldr	r2, [pc, #40]	@ (800cd34 <disk_write+0x3c>)
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	4413      	add	r3, r2
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	68dc      	ldr	r4, [r3, #12]
 800cd14:	7bfb      	ldrb	r3, [r7, #15]
 800cd16:	4a07      	ldr	r2, [pc, #28]	@ (800cd34 <disk_write+0x3c>)
 800cd18:	4413      	add	r3, r2
 800cd1a:	7a18      	ldrb	r0, [r3, #8]
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	68b9      	ldr	r1, [r7, #8]
 800cd22:	47a0      	blx	r4
 800cd24:	4603      	mov	r3, r0
 800cd26:	75fb      	strb	r3, [r7, #23]
  return res;
 800cd28:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	371c      	adds	r7, #28
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd90      	pop	{r4, r7, pc}
 800cd32:	bf00      	nop
 800cd34:	2000128c 	.word	0x2000128c

0800cd38 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	4603      	mov	r3, r0
 800cd40:	603a      	str	r2, [r7, #0]
 800cd42:	71fb      	strb	r3, [r7, #7]
 800cd44:	460b      	mov	r3, r1
 800cd46:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	4a09      	ldr	r2, [pc, #36]	@ (800cd70 <disk_ioctl+0x38>)
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	4413      	add	r3, r2
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	691b      	ldr	r3, [r3, #16]
 800cd54:	79fa      	ldrb	r2, [r7, #7]
 800cd56:	4906      	ldr	r1, [pc, #24]	@ (800cd70 <disk_ioctl+0x38>)
 800cd58:	440a      	add	r2, r1
 800cd5a:	7a10      	ldrb	r0, [r2, #8]
 800cd5c:	79b9      	ldrb	r1, [r7, #6]
 800cd5e:	683a      	ldr	r2, [r7, #0]
 800cd60:	4798      	blx	r3
 800cd62:	4603      	mov	r3, r0
 800cd64:	73fb      	strb	r3, [r7, #15]
  return res;
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	2000128c 	.word	0x2000128c

0800cd74 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cd74:	b480      	push	{r7}
 800cd76:	b087      	sub	sp, #28
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800cd88:	e007      	b.n	800cd9a <mem_cpy+0x26>
		*d++ = *s++;
 800cd8a:	693a      	ldr	r2, [r7, #16]
 800cd8c:	1c53      	adds	r3, r2, #1
 800cd8e:	613b      	str	r3, [r7, #16]
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	1c59      	adds	r1, r3, #1
 800cd94:	6179      	str	r1, [r7, #20]
 800cd96:	7812      	ldrb	r2, [r2, #0]
 800cd98:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	1e5a      	subs	r2, r3, #1
 800cd9e:	607a      	str	r2, [r7, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1f2      	bne.n	800cd8a <mem_cpy+0x16>
}
 800cda4:	bf00      	nop
 800cda6:	bf00      	nop
 800cda8:	371c      	adds	r7, #28
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bc80      	pop	{r7}
 800cdae:	4770      	bx	lr

0800cdb0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cdb0:	b480      	push	{r7}
 800cdb2:	b087      	sub	sp, #28
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800cdc0:	e005      	b.n	800cdce <mem_set+0x1e>
		*d++ = (BYTE)val;
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	1c5a      	adds	r2, r3, #1
 800cdc6:	617a      	str	r2, [r7, #20]
 800cdc8:	68ba      	ldr	r2, [r7, #8]
 800cdca:	b2d2      	uxtb	r2, r2
 800cdcc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	1e5a      	subs	r2, r3, #1
 800cdd2:	607a      	str	r2, [r7, #4]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d1f4      	bne.n	800cdc2 <mem_set+0x12>
}
 800cdd8:	bf00      	nop
 800cdda:	bf00      	nop
 800cddc:	371c      	adds	r7, #28
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bc80      	pop	{r7}
 800cde2:	4770      	bx	lr

0800cde4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800cde4:	b480      	push	{r7}
 800cde6:	b089      	sub	sp, #36	@ 0x24
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	60b9      	str	r1, [r7, #8]
 800cdee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	61fb      	str	r3, [r7, #28]
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800cdfc:	bf00      	nop
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	1e5a      	subs	r2, r3, #1
 800ce02:	607a      	str	r2, [r7, #4]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00d      	beq.n	800ce24 <mem_cmp+0x40>
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	1c5a      	adds	r2, r3, #1
 800ce0c:	61fa      	str	r2, [r7, #28]
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	4619      	mov	r1, r3
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	1c5a      	adds	r2, r3, #1
 800ce16:	61ba      	str	r2, [r7, #24]
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	1acb      	subs	r3, r1, r3
 800ce1c:	617b      	str	r3, [r7, #20]
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d0ec      	beq.n	800cdfe <mem_cmp+0x1a>
	return r;
 800ce24:	697b      	ldr	r3, [r7, #20]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3724      	adds	r7, #36	@ 0x24
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bc80      	pop	{r7}
 800ce2e:	4770      	bx	lr

0800ce30 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ce3a:	e002      	b.n	800ce42 <chk_chr+0x12>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	607b      	str	r3, [r7, #4]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d005      	beq.n	800ce56 <chk_chr+0x26>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	461a      	mov	r2, r3
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d1f2      	bne.n	800ce3c <chk_chr+0xc>
	return *str;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	781b      	ldrb	r3, [r3, #0]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	370c      	adds	r7, #12
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bc80      	pop	{r7}
 800ce62:	4770      	bx	lr

0800ce64 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800ce72:	4618      	mov	r0, r3
 800ce74:	f003 f938 	bl	80100e8 <ff_req_grant>
 800ce78:	4603      	mov	r3, r0
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b082      	sub	sp, #8
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d011      	beq.n	800ceb8 <unlock_fs+0x36>
 800ce94:	78fb      	ldrb	r3, [r7, #3]
 800ce96:	2b0c      	cmp	r3, #12
 800ce98:	d00e      	beq.n	800ceb8 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800ce9a:	78fb      	ldrb	r3, [r7, #3]
 800ce9c:	2b0b      	cmp	r3, #11
 800ce9e:	d00b      	beq.n	800ceb8 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800cea0:	78fb      	ldrb	r3, [r7, #3]
 800cea2:	2b09      	cmp	r3, #9
 800cea4:	d008      	beq.n	800ceb8 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800cea6:	78fb      	ldrb	r3, [r7, #3]
 800cea8:	2b0f      	cmp	r3, #15
 800ceaa:	d005      	beq.n	800ceb8 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f003 f92d 	bl	8010112 <ff_rel_grant>
	}
}
 800ceb8:	bf00      	nop
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ceca:	2300      	movs	r3, #0
 800cecc:	60bb      	str	r3, [r7, #8]
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	60fb      	str	r3, [r7, #12]
 800ced2:	e038      	b.n	800cf46 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800ced4:	492f      	ldr	r1, [pc, #188]	@ (800cf94 <chk_lock+0xd4>)
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	4613      	mov	r3, r2
 800ceda:	005b      	lsls	r3, r3, #1
 800cedc:	4413      	add	r3, r2
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	440b      	add	r3, r1
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d029      	beq.n	800cf3c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800cee8:	492a      	ldr	r1, [pc, #168]	@ (800cf94 <chk_lock+0xd4>)
 800ceea:	68fa      	ldr	r2, [r7, #12]
 800ceec:	4613      	mov	r3, r2
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	4413      	add	r3, r2
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	440b      	add	r3, r1
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d11e      	bne.n	800cf40 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800cf02:	4924      	ldr	r1, [pc, #144]	@ (800cf94 <chk_lock+0xd4>)
 800cf04:	68fa      	ldr	r2, [r7, #12]
 800cf06:	4613      	mov	r3, r2
 800cf08:	005b      	lsls	r3, r3, #1
 800cf0a:	4413      	add	r3, r2
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	440b      	add	r3, r1
 800cf10:	3304      	adds	r3, #4
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d110      	bne.n	800cf40 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800cf1e:	491d      	ldr	r1, [pc, #116]	@ (800cf94 <chk_lock+0xd4>)
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	4613      	mov	r3, r2
 800cf24:	005b      	lsls	r3, r3, #1
 800cf26:	4413      	add	r3, r2
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	440b      	add	r3, r1
 800cf2c:	3308      	adds	r3, #8
 800cf2e:	881a      	ldrh	r2, [r3, #0]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d102      	bne.n	800cf40 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800cf3a:	e007      	b.n	800cf4c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	3301      	adds	r3, #1
 800cf44:	60fb      	str	r3, [r7, #12]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d9c3      	bls.n	800ced4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2b02      	cmp	r3, #2
 800cf50:	d109      	bne.n	800cf66 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d102      	bne.n	800cf5e <chk_lock+0x9e>
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	2b02      	cmp	r3, #2
 800cf5c:	d101      	bne.n	800cf62 <chk_lock+0xa2>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	e013      	b.n	800cf8a <chk_lock+0xca>
 800cf62:	2312      	movs	r3, #18
 800cf64:	e011      	b.n	800cf8a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d10b      	bne.n	800cf84 <chk_lock+0xc4>
 800cf6c:	4909      	ldr	r1, [pc, #36]	@ (800cf94 <chk_lock+0xd4>)
 800cf6e:	68fa      	ldr	r2, [r7, #12]
 800cf70:	4613      	mov	r3, r2
 800cf72:	005b      	lsls	r3, r3, #1
 800cf74:	4413      	add	r3, r2
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	440b      	add	r3, r1
 800cf7a:	330a      	adds	r3, #10
 800cf7c:	881b      	ldrh	r3, [r3, #0]
 800cf7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf82:	d101      	bne.n	800cf88 <chk_lock+0xc8>
 800cf84:	2310      	movs	r3, #16
 800cf86:	e000      	b.n	800cf8a <chk_lock+0xca>
 800cf88:	2300      	movs	r3, #0
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3714      	adds	r7, #20
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bc80      	pop	{r7}
 800cf92:	4770      	bx	lr
 800cf94:	20001274 	.word	0x20001274

0800cf98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	607b      	str	r3, [r7, #4]
 800cfa2:	e002      	b.n	800cfaa <enq_lock+0x12>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	607b      	str	r3, [r7, #4]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d809      	bhi.n	800cfc4 <enq_lock+0x2c>
 800cfb0:	490a      	ldr	r1, [pc, #40]	@ (800cfdc <enq_lock+0x44>)
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	005b      	lsls	r3, r3, #1
 800cfb8:	4413      	add	r3, r2
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	440b      	add	r3, r1
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1ef      	bne.n	800cfa4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2b02      	cmp	r3, #2
 800cfc8:	bf14      	ite	ne
 800cfca:	2301      	movne	r3, #1
 800cfcc:	2300      	moveq	r3, #0
 800cfce:	b2db      	uxtb	r3, r3
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bc80      	pop	{r7}
 800cfd8:	4770      	bx	lr
 800cfda:	bf00      	nop
 800cfdc:	20001274 	.word	0x20001274

0800cfe0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cfea:	2300      	movs	r3, #0
 800cfec:	60fb      	str	r3, [r7, #12]
 800cfee:	e02b      	b.n	800d048 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800cff0:	4955      	ldr	r1, [pc, #340]	@ (800d148 <inc_lock+0x168>)
 800cff2:	68fa      	ldr	r2, [r7, #12]
 800cff4:	4613      	mov	r3, r2
 800cff6:	005b      	lsls	r3, r3, #1
 800cff8:	4413      	add	r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	440b      	add	r3, r1
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800d006:	429a      	cmp	r2, r3
 800d008:	d11b      	bne.n	800d042 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800d00a:	494f      	ldr	r1, [pc, #316]	@ (800d148 <inc_lock+0x168>)
 800d00c:	68fa      	ldr	r2, [r7, #12]
 800d00e:	4613      	mov	r3, r2
 800d010:	005b      	lsls	r3, r3, #1
 800d012:	4413      	add	r3, r2
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	440b      	add	r3, r1
 800d018:	3304      	adds	r3, #4
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 800d022:	429a      	cmp	r2, r3
 800d024:	d10d      	bne.n	800d042 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800d026:	4948      	ldr	r1, [pc, #288]	@ (800d148 <inc_lock+0x168>)
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	4613      	mov	r3, r2
 800d02c:	005b      	lsls	r3, r3, #1
 800d02e:	4413      	add	r3, r2
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	440b      	add	r3, r1
 800d034:	3308      	adds	r3, #8
 800d036:	881a      	ldrh	r2, [r3, #0]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 800d03e:	429a      	cmp	r2, r3
 800d040:	d006      	beq.n	800d050 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	3301      	adds	r3, #1
 800d046:	60fb      	str	r3, [r7, #12]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d9d0      	bls.n	800cff0 <inc_lock+0x10>
 800d04e:	e000      	b.n	800d052 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800d050:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2b02      	cmp	r3, #2
 800d056:	d145      	bne.n	800d0e4 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d058:	2300      	movs	r3, #0
 800d05a:	60fb      	str	r3, [r7, #12]
 800d05c:	e002      	b.n	800d064 <inc_lock+0x84>
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	3301      	adds	r3, #1
 800d062:	60fb      	str	r3, [r7, #12]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2b01      	cmp	r3, #1
 800d068:	d809      	bhi.n	800d07e <inc_lock+0x9e>
 800d06a:	4937      	ldr	r1, [pc, #220]	@ (800d148 <inc_lock+0x168>)
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	4613      	mov	r3, r2
 800d070:	005b      	lsls	r3, r3, #1
 800d072:	4413      	add	r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	440b      	add	r3, r1
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d1ef      	bne.n	800d05e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2b02      	cmp	r3, #2
 800d082:	d101      	bne.n	800d088 <inc_lock+0xa8>
 800d084:	2300      	movs	r3, #0
 800d086:	e05a      	b.n	800d13e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 800d08e:	482e      	ldr	r0, [pc, #184]	@ (800d148 <inc_lock+0x168>)
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	4613      	mov	r3, r2
 800d094:	005b      	lsls	r3, r3, #1
 800d096:	4413      	add	r3, r2
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	4403      	add	r3, r0
 800d09c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800d0a4:	4828      	ldr	r0, [pc, #160]	@ (800d148 <inc_lock+0x168>)
 800d0a6:	68fa      	ldr	r2, [r7, #12]
 800d0a8:	4613      	mov	r3, r2
 800d0aa:	005b      	lsls	r3, r3, #1
 800d0ac:	4413      	add	r3, r2
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	4403      	add	r3, r0
 800d0b2:	3304      	adds	r3, #4
 800d0b4:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 800d0bc:	4922      	ldr	r1, [pc, #136]	@ (800d148 <inc_lock+0x168>)
 800d0be:	68fa      	ldr	r2, [r7, #12]
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	005b      	lsls	r3, r3, #1
 800d0c4:	4413      	add	r3, r2
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	440b      	add	r3, r1
 800d0ca:	3308      	adds	r3, #8
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800d0d0:	491d      	ldr	r1, [pc, #116]	@ (800d148 <inc_lock+0x168>)
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	005b      	lsls	r3, r3, #1
 800d0d8:	4413      	add	r3, r2
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	440b      	add	r3, r1
 800d0de:	330a      	adds	r3, #10
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d00c      	beq.n	800d104 <inc_lock+0x124>
 800d0ea:	4917      	ldr	r1, [pc, #92]	@ (800d148 <inc_lock+0x168>)
 800d0ec:	68fa      	ldr	r2, [r7, #12]
 800d0ee:	4613      	mov	r3, r2
 800d0f0:	005b      	lsls	r3, r3, #1
 800d0f2:	4413      	add	r3, r2
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	440b      	add	r3, r1
 800d0f8:	330a      	adds	r3, #10
 800d0fa:	881b      	ldrh	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d001      	beq.n	800d104 <inc_lock+0x124>
 800d100:	2300      	movs	r3, #0
 800d102:	e01c      	b.n	800d13e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d10b      	bne.n	800d122 <inc_lock+0x142>
 800d10a:	490f      	ldr	r1, [pc, #60]	@ (800d148 <inc_lock+0x168>)
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	4613      	mov	r3, r2
 800d110:	005b      	lsls	r3, r3, #1
 800d112:	4413      	add	r3, r2
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	440b      	add	r3, r1
 800d118:	330a      	adds	r3, #10
 800d11a:	881b      	ldrh	r3, [r3, #0]
 800d11c:	3301      	adds	r3, #1
 800d11e:	b299      	uxth	r1, r3
 800d120:	e001      	b.n	800d126 <inc_lock+0x146>
 800d122:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d126:	4808      	ldr	r0, [pc, #32]	@ (800d148 <inc_lock+0x168>)
 800d128:	68fa      	ldr	r2, [r7, #12]
 800d12a:	4613      	mov	r3, r2
 800d12c:	005b      	lsls	r3, r3, #1
 800d12e:	4413      	add	r3, r2
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	4403      	add	r3, r0
 800d134:	330a      	adds	r3, #10
 800d136:	460a      	mov	r2, r1
 800d138:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	3301      	adds	r3, #1
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3714      	adds	r7, #20
 800d142:	46bd      	mov	sp, r7
 800d144:	bc80      	pop	{r7}
 800d146:	4770      	bx	lr
 800d148:	20001274 	.word	0x20001274

0800d14c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d154:	2300      	movs	r3, #0
 800d156:	60fb      	str	r3, [r7, #12]
 800d158:	e016      	b.n	800d188 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d15a:	4910      	ldr	r1, [pc, #64]	@ (800d19c <clear_lock+0x50>)
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	4613      	mov	r3, r2
 800d160:	005b      	lsls	r3, r3, #1
 800d162:	4413      	add	r3, r2
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	440b      	add	r3, r1
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d108      	bne.n	800d182 <clear_lock+0x36>
 800d170:	490a      	ldr	r1, [pc, #40]	@ (800d19c <clear_lock+0x50>)
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	4613      	mov	r3, r2
 800d176:	005b      	lsls	r3, r3, #1
 800d178:	4413      	add	r3, r2
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	440b      	add	r3, r1
 800d17e:	2200      	movs	r2, #0
 800d180:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	3301      	adds	r3, #1
 800d186:	60fb      	str	r3, [r7, #12]
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d9e5      	bls.n	800d15a <clear_lock+0xe>
	}
}
 800d18e:	bf00      	nop
 800d190:	bf00      	nop
 800d192:	3714      	adds	r7, #20
 800d194:	46bd      	mov	sp, r7
 800d196:	bc80      	pop	{r7}
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	20001274 	.word	0x20001274

0800d1a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b086      	sub	sp, #24
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d038      	beq.n	800d228 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800d1bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800d1c4:	6879      	ldr	r1, [r7, #4]
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	697a      	ldr	r2, [r7, #20]
 800d1ca:	f7ff fd95 	bl	800ccf8 <disk_write>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d002      	beq.n	800d1da <sync_window+0x3a>
			res = FR_DISK_ERR;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	73fb      	strb	r3, [r7, #15]
 800d1d8:	e026      	b.n	800d228 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800d1e8:	697a      	ldr	r2, [r7, #20]
 800d1ea:	1ad2      	subs	r2, r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d218      	bcs.n	800d228 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800d1fc:	613b      	str	r3, [r7, #16]
 800d1fe:	e010      	b.n	800d222 <sync_window+0x82>
					wsect += fs->fsize;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800d206:	697a      	ldr	r2, [r7, #20]
 800d208:	4413      	add	r3, r2
 800d20a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800d212:	6879      	ldr	r1, [r7, #4]
 800d214:	2301      	movs	r3, #1
 800d216:	697a      	ldr	r2, [r7, #20]
 800d218:	f7ff fd6e 	bl	800ccf8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	3b01      	subs	r3, #1
 800d220:	613b      	str	r3, [r7, #16]
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	2b01      	cmp	r3, #1
 800d226:	d8eb      	bhi.n	800d200 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800d228:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3718      	adds	r7, #24
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b084      	sub	sp, #16
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
 800d23a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d23c:	2300      	movs	r3, #0
 800d23e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d01b      	beq.n	800d284 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f7ff ffa7 	bl	800d1a0 <sync_window>
 800d252:	4603      	mov	r3, r0
 800d254:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d256:	7bfb      	ldrb	r3, [r7, #15]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d113      	bne.n	800d284 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800d262:	6879      	ldr	r1, [r7, #4]
 800d264:	2301      	movs	r3, #1
 800d266:	683a      	ldr	r2, [r7, #0]
 800d268:	f7ff fd26 	bl	800ccb8 <disk_read>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d004      	beq.n	800d27c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d272:	f04f 33ff 	mov.w	r3, #4294967295
 800d276:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d278:	2301      	movs	r3, #1
 800d27a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	683a      	ldr	r2, [r7, #0]
 800d280:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
		}
	}
	return res;
 800d284:	7bfb      	ldrb	r3, [r7, #15]
}
 800d286:	4618      	mov	r0, r3
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800d28e:	b580      	push	{r7, lr}
 800d290:	b084      	sub	sp, #16
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7ff ff82 	bl	800d1a0 <sync_window>
 800d29c:	4603      	mov	r3, r0
 800d29e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d2a0:	7bfb      	ldrb	r3, [r7, #15]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f040 809b 	bne.w	800d3de <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d2ae:	2b03      	cmp	r3, #3
 800d2b0:	f040 8088 	bne.w	800d3c4 <sync_fs+0x136>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	f040 8082 	bne.w	800d3c4 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7ff fd71 	bl	800cdb0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2255      	movs	r2, #85	@ 0x55
 800d2d2:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	22aa      	movs	r2, #170	@ 0xaa
 800d2da:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2252      	movs	r2, #82	@ 0x52
 800d2e2:	701a      	strb	r2, [r3, #0]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2252      	movs	r2, #82	@ 0x52
 800d2e8:	705a      	strb	r2, [r3, #1]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2261      	movs	r2, #97	@ 0x61
 800d2ee:	709a      	strb	r2, [r3, #2]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2241      	movs	r2, #65	@ 0x41
 800d2f4:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2272      	movs	r2, #114	@ 0x72
 800d2fa:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2272      	movs	r2, #114	@ 0x72
 800d302:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2241      	movs	r2, #65	@ 0x41
 800d30a:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2261      	movs	r2, #97	@ 0x61
 800d312:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d31c:	b2da      	uxtb	r2, r3
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	0a1b      	lsrs	r3, r3, #8
 800d32e:	b29b      	uxth	r3, r3
 800d330:	b2da      	uxtb	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d33e:	0c1b      	lsrs	r3, r3, #16
 800d340:	b2da      	uxtb	r2, r3
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d34e:	0e1b      	lsrs	r3, r3, #24
 800d350:	b2da      	uxtb	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	0a1b      	lsrs	r3, r3, #8
 800d370:	b29b      	uxth	r3, r3
 800d372:	b2da      	uxtb	r2, r3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d380:	0c1b      	lsrs	r3, r3, #16
 800d382:	b2da      	uxtb	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d390:	0e1b      	lsrs	r3, r3, #24
 800d392:	b2da      	uxtb	r2, r3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800d3a0:	1c5a      	adds	r2, r3, #1
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800d3ae:	6879      	ldr	r1, [r7, #4]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	f7ff fc9e 	bl	800ccf8 <disk_write>
			fs->fsi_flag = 0;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7ff fcb2 	bl	800cd38 <disk_ioctl>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d001      	beq.n	800d3de <sync_fs+0x150>
			res = FR_DISK_ERR;
 800d3da:	2301      	movs	r3, #1
 800d3dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	3b02      	subs	r3, #2
 800d3f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800d3fe:	3b02      	subs	r3, #2
 800d400:	683a      	ldr	r2, [r7, #0]
 800d402:	429a      	cmp	r2, r3
 800d404:	d301      	bcc.n	800d40a <clust2sect+0x22>
 800d406:	2300      	movs	r3, #0
 800d408:	e00a      	b.n	800d420 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800d410:	461a      	mov	r2, r3
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	fb03 f202 	mul.w	r2, r3, r2
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800d41e:	4413      	add	r3, r2
}
 800d420:	4618      	mov	r0, r3
 800d422:	370c      	adds	r7, #12
 800d424:	46bd      	mov	sp, r7
 800d426:	bc80      	pop	{r7}
 800d428:	4770      	bx	lr

0800d42a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b086      	sub	sp, #24
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	2b01      	cmp	r3, #1
 800d438:	d905      	bls.n	800d446 <get_fat+0x1c>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800d440:	683a      	ldr	r2, [r7, #0]
 800d442:	429a      	cmp	r2, r3
 800d444:	d302      	bcc.n	800d44c <get_fat+0x22>
		val = 1;	/* Internal error */
 800d446:	2301      	movs	r3, #1
 800d448:	617b      	str	r3, [r7, #20]
 800d44a:	e0a2      	b.n	800d592 <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d44c:	f04f 33ff 	mov.w	r3, #4294967295
 800d450:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d458:	2b03      	cmp	r3, #3
 800d45a:	d067      	beq.n	800d52c <get_fat+0x102>
 800d45c:	2b03      	cmp	r3, #3
 800d45e:	f300 808e 	bgt.w	800d57e <get_fat+0x154>
 800d462:	2b01      	cmp	r3, #1
 800d464:	d002      	beq.n	800d46c <get_fat+0x42>
 800d466:	2b02      	cmp	r3, #2
 800d468:	d03f      	beq.n	800d4ea <get_fat+0xc0>
 800d46a:	e088      	b.n	800d57e <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	085b      	lsrs	r3, r3, #1
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	4413      	add	r3, r2
 800d478:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	0a5b      	lsrs	r3, r3, #9
 800d484:	4413      	add	r3, r2
 800d486:	4619      	mov	r1, r3
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f7ff fed2 	bl	800d232 <move_window>
 800d48e:	4603      	mov	r3, r0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d177      	bne.n	800d584 <get_fat+0x15a>
			wc = fs->win.d8[bc++ % SS(fs)];
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	1c5a      	adds	r2, r3, #1
 800d498:	60fa      	str	r2, [r7, #12]
 800d49a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	5cd3      	ldrb	r3, [r2, r3]
 800d4a2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	0a5b      	lsrs	r3, r3, #9
 800d4ae:	4413      	add	r3, r2
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7ff febd 	bl	800d232 <move_window>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d164      	bne.n	800d588 <get_fat+0x15e>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	5cd3      	ldrb	r3, [r2, r3]
 800d4c8:	021b      	lsls	r3, r3, #8
 800d4ca:	68ba      	ldr	r2, [r7, #8]
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	f003 0301 	and.w	r3, r3, #1
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d002      	beq.n	800d4e0 <get_fat+0xb6>
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	091b      	lsrs	r3, r3, #4
 800d4de:	e002      	b.n	800d4e6 <get_fat+0xbc>
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d4e6:	617b      	str	r3, [r7, #20]
			break;
 800d4e8:	e053      	b.n	800d592 <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	0a1b      	lsrs	r3, r3, #8
 800d4f4:	4413      	add	r3, r2
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f7ff fe9a 	bl	800d232 <move_window>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d143      	bne.n	800d58c <get_fat+0x162>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	005b      	lsls	r3, r3, #1
 800d508:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	4413      	add	r3, r2
 800d510:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	3301      	adds	r3, #1
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	021b      	lsls	r3, r3, #8
 800d51a:	b21a      	sxth	r2, r3
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	b21b      	sxth	r3, r3
 800d522:	4313      	orrs	r3, r2
 800d524:	b21b      	sxth	r3, r3
 800d526:	b29b      	uxth	r3, r3
 800d528:	617b      	str	r3, [r7, #20]
			break;
 800d52a:	e032      	b.n	800d592 <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	09db      	lsrs	r3, r3, #7
 800d536:	4413      	add	r3, r2
 800d538:	4619      	mov	r1, r3
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f7ff fe79 	bl	800d232 <move_window>
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	d124      	bne.n	800d590 <get_fat+0x166>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	4413      	add	r3, r2
 800d552:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	3303      	adds	r3, #3
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	061a      	lsls	r2, r3, #24
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	3302      	adds	r3, #2
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	041b      	lsls	r3, r3, #16
 800d564:	431a      	orrs	r2, r3
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	3301      	adds	r3, #1
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	021b      	lsls	r3, r3, #8
 800d56e:	4313      	orrs	r3, r2
 800d570:	693a      	ldr	r2, [r7, #16]
 800d572:	7812      	ldrb	r2, [r2, #0]
 800d574:	4313      	orrs	r3, r2
 800d576:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d57a:	617b      	str	r3, [r7, #20]
			break;
 800d57c:	e009      	b.n	800d592 <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 800d57e:	2301      	movs	r3, #1
 800d580:	617b      	str	r3, [r7, #20]
 800d582:	e006      	b.n	800d592 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d584:	bf00      	nop
 800d586:	e004      	b.n	800d592 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d588:	bf00      	nop
 800d58a:	e002      	b.n	800d592 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d58c:	bf00      	nop
 800d58e:	e000      	b.n	800d592 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d590:	bf00      	nop
		}
	}

	return val;
 800d592:	697b      	ldr	r3, [r7, #20]
}
 800d594:	4618      	mov	r0, r3
 800d596:	3718      	adds	r7, #24
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b088      	sub	sp, #32
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d905      	bls.n	800d5ba <put_fat+0x1e>
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d302      	bcc.n	800d5c0 <put_fat+0x24>
		res = FR_INT_ERR;
 800d5ba:	2302      	movs	r3, #2
 800d5bc:	77fb      	strb	r3, [r7, #31]
 800d5be:	e0f6      	b.n	800d7ae <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d5c6:	2b03      	cmp	r3, #3
 800d5c8:	f000 809e 	beq.w	800d708 <put_fat+0x16c>
 800d5cc:	2b03      	cmp	r3, #3
 800d5ce:	f300 80e4 	bgt.w	800d79a <put_fat+0x1fe>
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d002      	beq.n	800d5dc <put_fat+0x40>
 800d5d6:	2b02      	cmp	r3, #2
 800d5d8:	d06f      	beq.n	800d6ba <put_fat+0x11e>
 800d5da:	e0de      	b.n	800d79a <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	617b      	str	r3, [r7, #20]
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	085b      	lsrs	r3, r3, #1
 800d5e4:	697a      	ldr	r2, [r7, #20]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	0a5b      	lsrs	r3, r3, #9
 800d5f4:	4413      	add	r3, r2
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	f7ff fe1a 	bl	800d232 <move_window>
 800d5fe:	4603      	mov	r3, r0
 800d600:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d602:	7ffb      	ldrb	r3, [r7, #31]
 800d604:	2b00      	cmp	r3, #0
 800d606:	f040 80cb 	bne.w	800d7a0 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	1c5a      	adds	r2, r3, #1
 800d60e:	617a      	str	r2, [r7, #20]
 800d610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d614:	68fa      	ldr	r2, [r7, #12]
 800d616:	4413      	add	r3, r2
 800d618:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	f003 0301 	and.w	r3, r3, #1
 800d620:	2b00      	cmp	r3, #0
 800d622:	d00d      	beq.n	800d640 <put_fat+0xa4>
 800d624:	69bb      	ldr	r3, [r7, #24]
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	b25b      	sxtb	r3, r3
 800d62a:	f003 030f 	and.w	r3, r3, #15
 800d62e:	b25a      	sxtb	r2, r3
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	b2db      	uxtb	r3, r3
 800d634:	011b      	lsls	r3, r3, #4
 800d636:	b25b      	sxtb	r3, r3
 800d638:	4313      	orrs	r3, r2
 800d63a:	b25b      	sxtb	r3, r3
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	e001      	b.n	800d644 <put_fat+0xa8>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	b2db      	uxtb	r3, r3
 800d644:	69ba      	ldr	r2, [r7, #24]
 800d646:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2201      	movs	r2, #1
 800d64c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	0a5b      	lsrs	r3, r3, #9
 800d65a:	4413      	add	r3, r2
 800d65c:	4619      	mov	r1, r3
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f7ff fde7 	bl	800d232 <move_window>
 800d664:	4603      	mov	r3, r0
 800d666:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d668:	7ffb      	ldrb	r3, [r7, #31]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	f040 809a 	bne.w	800d7a4 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	4413      	add	r3, r2
 800d67a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	f003 0301 	and.w	r3, r3, #1
 800d682:	2b00      	cmp	r3, #0
 800d684:	d003      	beq.n	800d68e <put_fat+0xf2>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	091b      	lsrs	r3, r3, #4
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	e00e      	b.n	800d6ac <put_fat+0x110>
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	b25b      	sxtb	r3, r3
 800d694:	f023 030f 	bic.w	r3, r3, #15
 800d698:	b25a      	sxtb	r2, r3
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	0a1b      	lsrs	r3, r3, #8
 800d69e:	b25b      	sxtb	r3, r3
 800d6a0:	f003 030f 	and.w	r3, r3, #15
 800d6a4:	b25b      	sxtb	r3, r3
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	b25b      	sxtb	r3, r3
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	69ba      	ldr	r2, [r7, #24]
 800d6ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800d6b8:	e079      	b.n	800d7ae <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	0a1b      	lsrs	r3, r3, #8
 800d6c4:	4413      	add	r3, r2
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f7ff fdb2 	bl	800d232 <move_window>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d6d2:	7ffb      	ldrb	r3, [r7, #31]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d167      	bne.n	800d7a8 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	005b      	lsls	r3, r3, #1
 800d6dc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d6e0:	68fa      	ldr	r2, [r7, #12]
 800d6e2:	4413      	add	r3, r2
 800d6e4:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	b2da      	uxtb	r2, r3
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	701a      	strb	r2, [r3, #0]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	0a1b      	lsrs	r3, r3, #8
 800d6f4:	b29a      	uxth	r2, r3
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	b2d2      	uxtb	r2, r2
 800d6fc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2201      	movs	r2, #1
 800d702:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800d706:	e052      	b.n	800d7ae <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	09db      	lsrs	r3, r3, #7
 800d712:	4413      	add	r3, r2
 800d714:	4619      	mov	r1, r3
 800d716:	68f8      	ldr	r0, [r7, #12]
 800d718:	f7ff fd8b 	bl	800d232 <move_window>
 800d71c:	4603      	mov	r3, r0
 800d71e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d720:	7ffb      	ldrb	r3, [r7, #31]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d142      	bne.n	800d7ac <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d72e:	68fa      	ldr	r2, [r7, #12]
 800d730:	4413      	add	r3, r2
 800d732:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800d734:	69bb      	ldr	r3, [r7, #24]
 800d736:	3303      	adds	r3, #3
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	061a      	lsls	r2, r3, #24
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	3302      	adds	r3, #2
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	041b      	lsls	r3, r3, #16
 800d744:	431a      	orrs	r2, r3
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	3301      	adds	r3, #1
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	021b      	lsls	r3, r3, #8
 800d74e:	4313      	orrs	r3, r2
 800d750:	69ba      	ldr	r2, [r7, #24]
 800d752:	7812      	ldrb	r2, [r2, #0]
 800d754:	4313      	orrs	r3, r2
 800d756:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	4313      	orrs	r3, r2
 800d75e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	b2da      	uxtb	r2, r3
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	701a      	strb	r2, [r3, #0]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	0a1b      	lsrs	r3, r3, #8
 800d76e:	b29a      	uxth	r2, r3
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	3301      	adds	r3, #1
 800d774:	b2d2      	uxtb	r2, r2
 800d776:	701a      	strb	r2, [r3, #0]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	0c1a      	lsrs	r2, r3, #16
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	3302      	adds	r3, #2
 800d780:	b2d2      	uxtb	r2, r2
 800d782:	701a      	strb	r2, [r3, #0]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	0e1a      	lsrs	r2, r3, #24
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	3303      	adds	r3, #3
 800d78c:	b2d2      	uxtb	r2, r2
 800d78e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2201      	movs	r2, #1
 800d794:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800d798:	e009      	b.n	800d7ae <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800d79a:	2302      	movs	r3, #2
 800d79c:	77fb      	strb	r3, [r7, #31]
 800d79e:	e006      	b.n	800d7ae <put_fat+0x212>
			if (res != FR_OK) break;
 800d7a0:	bf00      	nop
 800d7a2:	e004      	b.n	800d7ae <put_fat+0x212>
			if (res != FR_OK) break;
 800d7a4:	bf00      	nop
 800d7a6:	e002      	b.n	800d7ae <put_fat+0x212>
			if (res != FR_OK) break;
 800d7a8:	bf00      	nop
 800d7aa:	e000      	b.n	800d7ae <put_fat+0x212>
			if (res != FR_OK) break;
 800d7ac:	bf00      	nop
		}
	}

	return res;
 800d7ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3720      	adds	r7, #32
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d905      	bls.n	800d7d4 <remove_chain+0x1c>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800d7ce:	683a      	ldr	r2, [r7, #0]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d302      	bcc.n	800d7da <remove_chain+0x22>
		res = FR_INT_ERR;
 800d7d4:	2302      	movs	r3, #2
 800d7d6:	73fb      	strb	r3, [r7, #15]
 800d7d8:	e043      	b.n	800d862 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800d7de:	e036      	b.n	800d84e <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800d7e0:	6839      	ldr	r1, [r7, #0]
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f7ff fe21 	bl	800d42a <get_fat>
 800d7e8:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d035      	beq.n	800d85c <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d102      	bne.n	800d7fc <remove_chain+0x44>
 800d7f6:	2302      	movs	r3, #2
 800d7f8:	73fb      	strb	r3, [r7, #15]
 800d7fa:	e032      	b.n	800d862 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d802:	d102      	bne.n	800d80a <remove_chain+0x52>
 800d804:	2301      	movs	r3, #1
 800d806:	73fb      	strb	r3, [r7, #15]
 800d808:	e02b      	b.n	800d862 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800d80a:	2200      	movs	r2, #0
 800d80c:	6839      	ldr	r1, [r7, #0]
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7ff fec4 	bl	800d59c <put_fat>
 800d814:	4603      	mov	r3, r0
 800d816:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800d818:	7bfb      	ldrb	r3, [r7, #15]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d120      	bne.n	800d860 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d828:	d00f      	beq.n	800d84a <remove_chain+0x92>
				fs->free_clust++;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d830:	1c5a      	adds	r2, r3, #1
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				fs->fsi_flag |= 1;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800d83e:	f043 0301 	orr.w	r3, r3, #1
 800d842:	b2da      	uxtb	r2, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800d854:	683a      	ldr	r2, [r7, #0]
 800d856:	429a      	cmp	r2, r3
 800d858:	d3c2      	bcc.n	800d7e0 <remove_chain+0x28>
 800d85a:	e002      	b.n	800d862 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800d85c:	bf00      	nop
 800d85e:	e000      	b.n	800d862 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800d860:	bf00      	nop
		}
	}

	return res;
 800d862:	7bfb      	ldrb	r3, [r7, #15]
}
 800d864:	4618      	mov	r0, r3
 800d866:	3710      	adds	r7, #16
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b086      	sub	sp, #24
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d10f      	bne.n	800d89c <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d882:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d005      	beq.n	800d896 <create_chain+0x2a>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800d890:	693a      	ldr	r2, [r7, #16]
 800d892:	429a      	cmp	r2, r3
 800d894:	d31c      	bcc.n	800d8d0 <create_chain+0x64>
 800d896:	2301      	movs	r3, #1
 800d898:	613b      	str	r3, [r7, #16]
 800d89a:	e019      	b.n	800d8d0 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800d89c:	6839      	ldr	r1, [r7, #0]
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7ff fdc3 	bl	800d42a <get_fat>
 800d8a4:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d801      	bhi.n	800d8b0 <create_chain+0x44>
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	e076      	b.n	800d99e <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b6:	d101      	bne.n	800d8bc <create_chain+0x50>
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	e070      	b.n	800d99e <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800d8c2:	68ba      	ldr	r2, [r7, #8]
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d201      	bcs.n	800d8cc <create_chain+0x60>
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	e068      	b.n	800d99e <create_chain+0x132>
		scl = clst;
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800d8e0:	697a      	ldr	r2, [r7, #20]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d307      	bcc.n	800d8f6 <create_chain+0x8a>
			ncl = 2;
 800d8e6:	2302      	movs	r3, #2
 800d8e8:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800d8ea:	697a      	ldr	r2, [r7, #20]
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d901      	bls.n	800d8f6 <create_chain+0x8a>
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	e053      	b.n	800d99e <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800d8f6:	6979      	ldr	r1, [r7, #20]
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f7ff fd96 	bl	800d42a <get_fat>
 800d8fe:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00e      	beq.n	800d924 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90c:	d002      	beq.n	800d914 <create_chain+0xa8>
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	2b01      	cmp	r3, #1
 800d912:	d101      	bne.n	800d918 <create_chain+0xac>
			return cs;
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	e042      	b.n	800d99e <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800d918:	697a      	ldr	r2, [r7, #20]
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d1d9      	bne.n	800d8d4 <create_chain+0x68>
 800d920:	2300      	movs	r3, #0
 800d922:	e03c      	b.n	800d99e <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800d924:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800d926:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 800d92a:	6979      	ldr	r1, [r7, #20]
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f7ff fe35 	bl	800d59c <put_fat>
 800d932:	4603      	mov	r3, r0
 800d934:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800d936:	7bfb      	ldrb	r3, [r7, #15]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d109      	bne.n	800d950 <create_chain+0xe4>
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d006      	beq.n	800d950 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800d942:	697a      	ldr	r2, [r7, #20]
 800d944:	6839      	ldr	r1, [r7, #0]
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f7ff fe28 	bl	800d59c <put_fat>
 800d94c:	4603      	mov	r3, r0
 800d94e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800d950:	7bfb      	ldrb	r3, [r7, #15]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d11a      	bne.n	800d98c <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	697a      	ldr	r2, [r7, #20]
 800d95a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d968:	d018      	beq.n	800d99c <create_chain+0x130>
			fs->free_clust--;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d970:	1e5a      	subs	r2, r3, #1
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			fs->fsi_flag |= 1;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800d97e:	f043 0301 	orr.w	r3, r3, #1
 800d982:	b2da      	uxtb	r2, r3
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 800d98a:	e007      	b.n	800d99c <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800d98c:	7bfb      	ldrb	r3, [r7, #15]
 800d98e:	2b01      	cmp	r3, #1
 800d990:	d102      	bne.n	800d998 <create_chain+0x12c>
 800d992:	f04f 33ff 	mov.w	r3, #4294967295
 800d996:	e000      	b.n	800d99a <create_chain+0x12e>
 800d998:	2301      	movs	r3, #1
 800d99a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800d99c:	697b      	ldr	r3, [r7, #20]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3718      	adds	r7, #24
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}

0800d9a6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800d9a6:	b480      	push	{r7}
 800d9a8:	b087      	sub	sp, #28
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
 800d9ae:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800d9b6:	3304      	adds	r3, #4
 800d9b8:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	0a5b      	lsrs	r3, r3, #9
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800d9c4:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800d9c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	1d1a      	adds	r2, r3, #4
 800d9d2:	613a      	str	r2, [r7, #16]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d101      	bne.n	800d9e2 <clmt_clust+0x3c>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	e010      	b.n	800da04 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800d9e2:	697a      	ldr	r2, [r7, #20]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d307      	bcc.n	800d9fa <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800d9ea:	697a      	ldr	r2, [r7, #20]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	617b      	str	r3, [r7, #20]
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	3304      	adds	r3, #4
 800d9f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d9f8:	e7e9      	b.n	800d9ce <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800d9fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	681a      	ldr	r2, [r3, #0]
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	4413      	add	r3, r2
}
 800da04:	4618      	mov	r0, r3
 800da06:	371c      	adds	r7, #28
 800da08:	46bd      	mov	sp, r7
 800da0a:	bc80      	pop	{r7}
 800da0c:	4770      	bx	lr

0800da0e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800da0e:	b580      	push	{r7, lr}
 800da10:	b086      	sub	sp, #24
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
 800da16:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	b29a      	uxth	r2, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800da28:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d007      	beq.n	800da40 <dir_sdi+0x32>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800da36:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800da3a:	697a      	ldr	r2, [r7, #20]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d301      	bcc.n	800da44 <dir_sdi+0x36>
		return FR_INT_ERR;
 800da40:	2302      	movs	r3, #2
 800da42:	e074      	b.n	800db2e <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d10c      	bne.n	800da64 <dir_sdi+0x56>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800da50:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800da54:	2b03      	cmp	r3, #3
 800da56:	d105      	bne.n	800da64 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800da5e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800da62:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d111      	bne.n	800da8e <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800da70:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800da74:	461a      	mov	r2, r3
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	4293      	cmp	r3, r2
 800da7a:	d301      	bcc.n	800da80 <dir_sdi+0x72>
			return FR_INT_ERR;
 800da7c:	2302      	movs	r3, #2
 800da7e:	e056      	b.n	800db2e <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800da86:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800da8a:	613b      	str	r3, [r7, #16]
 800da8c:	e032      	b.n	800daf4 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800da94:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800da98:	011b      	lsls	r3, r3, #4
 800da9a:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800da9c:	e01e      	b.n	800dadc <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800daa4:	6979      	ldr	r1, [r7, #20]
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7ff fcbf 	bl	800d42a <get_fat>
 800daac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab4:	d101      	bne.n	800daba <dir_sdi+0xac>
 800dab6:	2301      	movs	r3, #1
 800dab8:	e039      	b.n	800db2e <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d907      	bls.n	800dad0 <dir_sdi+0xc2>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dac6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800daca:	697a      	ldr	r2, [r7, #20]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d301      	bcc.n	800dad4 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800dad0:	2302      	movs	r3, #2
 800dad2:	e02c      	b.n	800db2e <dir_sdi+0x120>
			idx -= ic;
 800dad4:	683a      	ldr	r2, [r7, #0]
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	1ad3      	subs	r3, r2, r3
 800dada:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800dadc:	683a      	ldr	r2, [r7, #0]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d2dc      	bcs.n	800da9e <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800daea:	6979      	ldr	r1, [r7, #20]
 800daec:	4618      	mov	r0, r3
 800daee:	f7ff fc7b 	bl	800d3e8 <clust2sect>
 800daf2:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	697a      	ldr	r2, [r7, #20]
 800daf8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d101      	bne.n	800db06 <dir_sdi+0xf8>
 800db02:	2302      	movs	r3, #2
 800db04:	e013      	b.n	800db2e <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	091a      	lsrs	r2, r3, #4
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	441a      	add	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800db1a:	461a      	mov	r2, r3
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	f003 030f 	and.w	r3, r3, #15
 800db22:	015b      	lsls	r3, r3, #5
 800db24:	441a      	add	r2, r3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3718      	adds	r7, #24
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}

0800db36 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800db36:	b590      	push	{r4, r7, lr}
 800db38:	b087      	sub	sp, #28
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
 800db3e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800db46:	3301      	adds	r3, #1
 800db48:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d004      	beq.n	800db5c <dir_next+0x26>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d101      	bne.n	800db60 <dir_next+0x2a>
		return FR_NO_FILE;
 800db5c:	2304      	movs	r3, #4
 800db5e:	e0dd      	b.n	800dd1c <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f003 030f 	and.w	r3, r3, #15
 800db66:	2b00      	cmp	r3, #0
 800db68:	f040 80c6 	bne.w	800dcf8 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800db72:	1c5a      	adds	r2, r3, #1
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800db80:	2b00      	cmp	r3, #0
 800db82:	d10b      	bne.n	800db9c <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800db8a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800db8e:	461a      	mov	r2, r3
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	4293      	cmp	r3, r2
 800db94:	f0c0 80b0 	bcc.w	800dcf8 <dir_next+0x1c2>
				return FR_NO_FILE;
 800db98:	2304      	movs	r3, #4
 800db9a:	e0bf      	b.n	800dd1c <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	091b      	lsrs	r3, r3, #4
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800dba6:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800dbaa:	3a01      	subs	r2, #1
 800dbac:	4013      	ands	r3, r2
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f040 80a2 	bne.w	800dcf8 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	4610      	mov	r0, r2
 800dbc4:	f7ff fc31 	bl	800d42a <get_fat>
 800dbc8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d801      	bhi.n	800dbd4 <dir_next+0x9e>
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	e0a3      	b.n	800dd1c <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbda:	d101      	bne.n	800dbe0 <dir_next+0xaa>
 800dbdc:	2301      	movs	r3, #1
 800dbde:	e09d      	b.n	800dd1c <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dbe6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800dbea:	697a      	ldr	r2, [r7, #20]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d374      	bcc.n	800dcda <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d101      	bne.n	800dbfa <dir_next+0xc4>
 800dbf6:	2304      	movs	r3, #4
 800dbf8:	e090      	b.n	800dd1c <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800dc06:	4619      	mov	r1, r3
 800dc08:	4610      	mov	r0, r2
 800dc0a:	f7ff fe2f 	bl	800d86c <create_chain>
 800dc0e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d101      	bne.n	800dc1a <dir_next+0xe4>
 800dc16:	2307      	movs	r3, #7
 800dc18:	e080      	b.n	800dd1c <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d101      	bne.n	800dc24 <dir_next+0xee>
 800dc20:	2302      	movs	r3, #2
 800dc22:	e07b      	b.n	800dd1c <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc2a:	d101      	bne.n	800dc30 <dir_next+0xfa>
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	e075      	b.n	800dd1c <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7ff fab2 	bl	800d1a0 <sync_window>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d001      	beq.n	800dc46 <dir_next+0x110>
 800dc42:	2301      	movs	r3, #1
 800dc44:	e06a      	b.n	800dd1c <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dc4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc50:	2100      	movs	r1, #0
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7ff f8ac 	bl	800cdb0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 800dc64:	6979      	ldr	r1, [r7, #20]
 800dc66:	4610      	mov	r0, r2
 800dc68:	f7ff fbbe 	bl	800d3e8 <clust2sect>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800dc72:	2300      	movs	r3, #0
 800dc74:	613b      	str	r3, [r7, #16]
 800dc76:	e01b      	b.n	800dcb0 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dc7e:	2201      	movs	r2, #1
 800dc80:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7ff fa88 	bl	800d1a0 <sync_window>
 800dc90:	4603      	mov	r3, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d001      	beq.n	800dc9a <dir_next+0x164>
 800dc96:	2301      	movs	r3, #1
 800dc98:	e040      	b.n	800dd1c <dir_next+0x1e6>
						dp->fs->winsect++;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dca0:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800dca4:	3201      	adds	r2, #1
 800dca6:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	3301      	adds	r3, #1
 800dcae:	613b      	str	r3, [r7, #16]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dcb6:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800dcba:	461a      	mov	r2, r3
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d3da      	bcc.n	800dc78 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dcc8:	f8d3 1230 	ldr.w	r1, [r3, #560]	@ 0x230
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dcd2:	693a      	ldr	r2, [r7, #16]
 800dcd4:	1a8a      	subs	r2, r1, r2
 800dcd6:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	697a      	ldr	r2, [r7, #20]
 800dcde:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dce8:	6979      	ldr	r1, [r7, #20]
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7ff fb7c 	bl	800d3e8 <clust2sect>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dd08:	461a      	mov	r2, r3
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f003 030f 	and.w	r3, r3, #15
 800dd10:	015b      	lsls	r3, r3, #5
 800dd12:	441a      	add	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	371c      	adds	r7, #28
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd90      	pop	{r4, r7, pc}

0800dd24 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800dd2e:	2100      	movs	r1, #0
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f7ff fe6c 	bl	800da0e <dir_sdi>
 800dd36:	4603      	mov	r3, r0
 800dd38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dd3a:	7bfb      	ldrb	r3, [r7, #15]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d131      	bne.n	800dda4 <dir_alloc+0x80>
		n = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800dd50:	4619      	mov	r1, r3
 800dd52:	4610      	mov	r0, r2
 800dd54:	f7ff fa6d 	bl	800d232 <move_window>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800dd5c:	7bfb      	ldrb	r3, [r7, #15]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d11f      	bne.n	800dda2 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	2be5      	cmp	r3, #229	@ 0xe5
 800dd6c:	d005      	beq.n	800dd7a <dir_alloc+0x56>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d107      	bne.n	800dd8a <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	60bb      	str	r3, [r7, #8]
 800dd80:	68ba      	ldr	r2, [r7, #8]
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d102      	bne.n	800dd8e <dir_alloc+0x6a>
 800dd88:	e00c      	b.n	800dda4 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800dd8e:	2101      	movs	r1, #1
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff fed0 	bl	800db36 <dir_next>
 800dd96:	4603      	mov	r3, r0
 800dd98:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800dd9a:	7bfb      	ldrb	r3, [r7, #15]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d0d1      	beq.n	800dd44 <dir_alloc+0x20>
 800dda0:	e000      	b.n	800dda4 <dir_alloc+0x80>
			if (res != FR_OK) break;
 800dda2:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dda4:	7bfb      	ldrb	r3, [r7, #15]
 800dda6:	2b04      	cmp	r3, #4
 800dda8:	d101      	bne.n	800ddae <dir_alloc+0x8a>
 800ddaa:	2307      	movs	r3, #7
 800ddac:	73fb      	strb	r3, [r7, #15]
	return res;
 800ddae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3710      	adds	r7, #16
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b085      	sub	sp, #20
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	331b      	adds	r3, #27
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	021b      	lsls	r3, r3, #8
 800ddca:	b21a      	sxth	r2, r3
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	331a      	adds	r3, #26
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	b21b      	sxth	r3, r3
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	b21b      	sxth	r3, r3
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800dde2:	2b03      	cmp	r3, #3
 800dde4:	d10f      	bne.n	800de06 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	3315      	adds	r3, #21
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	021b      	lsls	r3, r3, #8
 800ddee:	b21a      	sxth	r2, r3
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	3314      	adds	r3, #20
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	b21b      	sxth	r3, r3
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	b21b      	sxth	r3, r3
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	041b      	lsls	r3, r3, #16
 800de00:	68fa      	ldr	r2, [r7, #12]
 800de02:	4313      	orrs	r3, r2
 800de04:	60fb      	str	r3, [r7, #12]

	return cl;
 800de06:	68fb      	ldr	r3, [r7, #12]
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3714      	adds	r7, #20
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bc80      	pop	{r7}
 800de10:	4770      	bx	lr

0800de12 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800de12:	b480      	push	{r7}
 800de14:	b083      	sub	sp, #12
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	331a      	adds	r3, #26
 800de20:	683a      	ldr	r2, [r7, #0]
 800de22:	b2d2      	uxtb	r2, r2
 800de24:	701a      	strb	r2, [r3, #0]
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	b29b      	uxth	r3, r3
 800de2a:	0a1b      	lsrs	r3, r3, #8
 800de2c:	b29a      	uxth	r2, r3
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	331b      	adds	r3, #27
 800de32:	b2d2      	uxtb	r2, r2
 800de34:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	0c1a      	lsrs	r2, r3, #16
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	3314      	adds	r3, #20
 800de3e:	b2d2      	uxtb	r2, r2
 800de40:	701a      	strb	r2, [r3, #0]
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	0c1b      	lsrs	r3, r3, #16
 800de46:	b29b      	uxth	r3, r3
 800de48:	0a1b      	lsrs	r3, r3, #8
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	3315      	adds	r3, #21
 800de50:	b2d2      	uxtb	r2, r2
 800de52:	701a      	strb	r2, [r3, #0]
}
 800de54:	bf00      	nop
 800de56:	370c      	adds	r7, #12
 800de58:	46bd      	mov	sp, r7
 800de5a:	bc80      	pop	{r7}
 800de5c:	4770      	bx	lr
	...

0800de60 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b086      	sub	sp, #24
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de72:	1e5a      	subs	r2, r3, #1
 800de74:	4613      	mov	r3, r2
 800de76:	005b      	lsls	r3, r3, #1
 800de78:	4413      	add	r3, r2
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	4413      	add	r3, r2
 800de7e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800de80:	2300      	movs	r3, #0
 800de82:	613b      	str	r3, [r7, #16]
 800de84:	2301      	movs	r3, #1
 800de86:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800de88:	4a2b      	ldr	r2, [pc, #172]	@ (800df38 <cmp_lfn+0xd8>)
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	4413      	add	r3, r2
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	3301      	adds	r3, #1
 800de92:	683a      	ldr	r2, [r7, #0]
 800de94:	4413      	add	r3, r2
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	021b      	lsls	r3, r3, #8
 800de9a:	b21a      	sxth	r2, r3
 800de9c:	4926      	ldr	r1, [pc, #152]	@ (800df38 <cmp_lfn+0xd8>)
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	440b      	add	r3, r1
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	4619      	mov	r1, r3
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	440b      	add	r3, r1
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	b21b      	sxth	r3, r3
 800deae:	4313      	orrs	r3, r2
 800deb0:	b21b      	sxth	r3, r3
 800deb2:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800deb4:	89fb      	ldrh	r3, [r7, #14]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d019      	beq.n	800deee <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800deba:	89bb      	ldrh	r3, [r7, #12]
 800debc:	4618      	mov	r0, r3
 800debe:	f002 f8b9 	bl	8010034 <ff_wtoupper>
 800dec2:	4603      	mov	r3, r0
 800dec4:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	2bfe      	cmp	r3, #254	@ 0xfe
 800deca:	d80e      	bhi.n	800deea <cmp_lfn+0x8a>
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	1c5a      	adds	r2, r3, #1
 800ded0:	617a      	str	r2, [r7, #20]
 800ded2:	005b      	lsls	r3, r3, #1
 800ded4:	687a      	ldr	r2, [r7, #4]
 800ded6:	4413      	add	r3, r2
 800ded8:	881b      	ldrh	r3, [r3, #0]
 800deda:	4618      	mov	r0, r3
 800dedc:	f002 f8aa 	bl	8010034 <ff_wtoupper>
 800dee0:	4603      	mov	r3, r0
 800dee2:	461a      	mov	r2, r3
 800dee4:	89fb      	ldrh	r3, [r7, #14]
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d008      	beq.n	800defc <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800deea:	2300      	movs	r3, #0
 800deec:	e01f      	b.n	800df2e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800deee:	89bb      	ldrh	r3, [r7, #12]
 800def0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800def4:	4293      	cmp	r3, r2
 800def6:	d001      	beq.n	800defc <cmp_lfn+0x9c>
 800def8:	2300      	movs	r3, #0
 800defa:	e018      	b.n	800df2e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	3301      	adds	r3, #1
 800df00:	613b      	str	r3, [r7, #16]
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	2b0c      	cmp	r3, #12
 800df06:	d9bf      	bls.n	800de88 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00b      	beq.n	800df2c <cmp_lfn+0xcc>
 800df14:	89fb      	ldrh	r3, [r7, #14]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d008      	beq.n	800df2c <cmp_lfn+0xcc>
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	005b      	lsls	r3, r3, #1
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	4413      	add	r3, r2
 800df22:	881b      	ldrh	r3, [r3, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d001      	beq.n	800df2c <cmp_lfn+0xcc>
		return 0;
 800df28:	2300      	movs	r3, #0
 800df2a:	e000      	b.n	800df2e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800df2c:	2301      	movs	r3, #1
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3718      	adds	r7, #24
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	08013268 	.word	0x08013268

0800df3c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b089      	sub	sp, #36	@ 0x24
 800df40:	af00      	add	r7, sp, #0
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	4611      	mov	r1, r2
 800df48:	461a      	mov	r2, r3
 800df4a:	460b      	mov	r3, r1
 800df4c:	71fb      	strb	r3, [r7, #7]
 800df4e:	4613      	mov	r3, r2
 800df50:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	330d      	adds	r3, #13
 800df56:	79ba      	ldrb	r2, [r7, #6]
 800df58:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	330b      	adds	r3, #11
 800df5e:	220f      	movs	r2, #15
 800df60:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	330c      	adds	r3, #12
 800df66:	2200      	movs	r2, #0
 800df68:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	331a      	adds	r3, #26
 800df6e:	2200      	movs	r2, #0
 800df70:	701a      	strb	r2, [r3, #0]
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	331b      	adds	r3, #27
 800df76:	2200      	movs	r2, #0
 800df78:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800df7a:	79fb      	ldrb	r3, [r7, #7]
 800df7c:	1e5a      	subs	r2, r3, #1
 800df7e:	4613      	mov	r3, r2
 800df80:	005b      	lsls	r3, r3, #1
 800df82:	4413      	add	r3, r2
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	4413      	add	r3, r2
 800df88:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800df8a:	2300      	movs	r3, #0
 800df8c:	82fb      	strh	r3, [r7, #22]
 800df8e:	2300      	movs	r3, #0
 800df90:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800df92:	8afb      	ldrh	r3, [r7, #22]
 800df94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df98:	4293      	cmp	r3, r2
 800df9a:	d007      	beq.n	800dfac <fit_lfn+0x70>
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	1c5a      	adds	r2, r3, #1
 800dfa0:	61fa      	str	r2, [r7, #28]
 800dfa2:	005b      	lsls	r3, r3, #1
 800dfa4:	68fa      	ldr	r2, [r7, #12]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	881b      	ldrh	r3, [r3, #0]
 800dfaa:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800dfac:	4a1c      	ldr	r2, [pc, #112]	@ (800e020 <fit_lfn+0xe4>)
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	4413      	add	r3, r2
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	4413      	add	r3, r2
 800dfba:	8afa      	ldrh	r2, [r7, #22]
 800dfbc:	b2d2      	uxtb	r2, r2
 800dfbe:	701a      	strb	r2, [r3, #0]
 800dfc0:	8afb      	ldrh	r3, [r7, #22]
 800dfc2:	0a1b      	lsrs	r3, r3, #8
 800dfc4:	b299      	uxth	r1, r3
 800dfc6:	4a16      	ldr	r2, [pc, #88]	@ (800e020 <fit_lfn+0xe4>)
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	4413      	add	r3, r2
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	3301      	adds	r3, #1
 800dfd0:	68ba      	ldr	r2, [r7, #8]
 800dfd2:	4413      	add	r3, r2
 800dfd4:	b2ca      	uxtb	r2, r1
 800dfd6:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800dfd8:	8afb      	ldrh	r3, [r7, #22]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d102      	bne.n	800dfe4 <fit_lfn+0xa8>
 800dfde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dfe2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	61bb      	str	r3, [r7, #24]
 800dfea:	69bb      	ldr	r3, [r7, #24]
 800dfec:	2b0c      	cmp	r3, #12
 800dfee:	d9d0      	bls.n	800df92 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800dff0:	8afb      	ldrh	r3, [r7, #22]
 800dff2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d006      	beq.n	800e008 <fit_lfn+0xcc>
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	005b      	lsls	r3, r3, #1
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	4413      	add	r3, r2
 800e002:	881b      	ldrh	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d103      	bne.n	800e010 <fit_lfn+0xd4>
 800e008:	79fb      	ldrb	r3, [r7, #7]
 800e00a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e00e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	79fa      	ldrb	r2, [r7, #7]
 800e014:	701a      	strb	r2, [r3, #0]
}
 800e016:	bf00      	nop
 800e018:	3724      	adds	r7, #36	@ 0x24
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bc80      	pop	{r7}
 800e01e:	4770      	bx	lr
 800e020:	08013268 	.word	0x08013268

0800e024 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b08c      	sub	sp, #48	@ 0x30
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
 800e030:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e032:	220b      	movs	r2, #11
 800e034:	68b9      	ldr	r1, [r7, #8]
 800e036:	68f8      	ldr	r0, [r7, #12]
 800e038:	f7fe fe9c 	bl	800cd74 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	2b05      	cmp	r3, #5
 800e040:	d92b      	bls.n	800e09a <gen_numname+0x76>
		sr = seq;
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e046:	e022      	b.n	800e08e <gen_numname+0x6a>
			wc = *lfn++;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	1c9a      	adds	r2, r3, #2
 800e04c:	607a      	str	r2, [r7, #4]
 800e04e:	881b      	ldrh	r3, [r3, #0]
 800e050:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800e052:	2300      	movs	r3, #0
 800e054:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e056:	e017      	b.n	800e088 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	005a      	lsls	r2, r3, #1
 800e05c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e05e:	f003 0301 	and.w	r3, r3, #1
 800e062:	4413      	add	r3, r2
 800e064:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e066:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e068:	085b      	lsrs	r3, r3, #1
 800e06a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e072:	2b00      	cmp	r3, #0
 800e074:	d005      	beq.n	800e082 <gen_numname+0x5e>
 800e076:	69fb      	ldr	r3, [r7, #28]
 800e078:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800e07c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800e080:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e084:	3301      	adds	r3, #1
 800e086:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e08a:	2b0f      	cmp	r3, #15
 800e08c:	d9e4      	bls.n	800e058 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	881b      	ldrh	r3, [r3, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d1d8      	bne.n	800e048 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e09a:	2307      	movs	r3, #7
 800e09c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	f003 030f 	and.w	r3, r3, #15
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	3330      	adds	r3, #48	@ 0x30
 800e0aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800e0ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0b2:	2b39      	cmp	r3, #57	@ 0x39
 800e0b4:	d904      	bls.n	800e0c0 <gen_numname+0x9c>
 800e0b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0ba:	3307      	adds	r3, #7
 800e0bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800e0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c2:	1e5a      	subs	r2, r3, #1
 800e0c4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e0c6:	3330      	adds	r3, #48	@ 0x30
 800e0c8:	443b      	add	r3, r7
 800e0ca:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e0ce:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	091b      	lsrs	r3, r3, #4
 800e0d6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d1df      	bne.n	800e09e <gen_numname+0x7a>
	ns[i] = '~';
 800e0de:	f107 0214 	add.w	r2, r7, #20
 800e0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0e4:	4413      	add	r3, r2
 800e0e6:	227e      	movs	r2, #126	@ 0x7e
 800e0e8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0ee:	e002      	b.n	800e0f6 <gen_numname+0xd2>
 800e0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d205      	bcs.n	800e10a <gen_numname+0xe6>
 800e0fe:	68fa      	ldr	r2, [r7, #12]
 800e100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e102:	4413      	add	r3, r2
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	2b20      	cmp	r3, #32
 800e108:	d1f2      	bne.n	800e0f0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e10c:	2b07      	cmp	r3, #7
 800e10e:	d807      	bhi.n	800e120 <gen_numname+0xfc>
 800e110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e112:	1c5a      	adds	r2, r3, #1
 800e114:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e116:	3330      	adds	r3, #48	@ 0x30
 800e118:	443b      	add	r3, r7
 800e11a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e11e:	e000      	b.n	800e122 <gen_numname+0xfe>
 800e120:	2120      	movs	r1, #32
 800e122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e124:	1c5a      	adds	r2, r3, #1
 800e126:	627a      	str	r2, [r7, #36]	@ 0x24
 800e128:	68fa      	ldr	r2, [r7, #12]
 800e12a:	4413      	add	r3, r2
 800e12c:	460a      	mov	r2, r1
 800e12e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e132:	2b07      	cmp	r3, #7
 800e134:	d9e9      	bls.n	800e10a <gen_numname+0xe6>
}
 800e136:	bf00      	nop
 800e138:	bf00      	nop
 800e13a:	3730      	adds	r7, #48	@ 0x30
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e140:	b480      	push	{r7}
 800e142:	b085      	sub	sp, #20
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e148:	2300      	movs	r3, #0
 800e14a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e14c:	230b      	movs	r3, #11
 800e14e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800e150:	7bfb      	ldrb	r3, [r7, #15]
 800e152:	b2da      	uxtb	r2, r3
 800e154:	0852      	lsrs	r2, r2, #1
 800e156:	01db      	lsls	r3, r3, #7
 800e158:	4313      	orrs	r3, r2
 800e15a:	b2da      	uxtb	r2, r3
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	1c59      	adds	r1, r3, #1
 800e160:	6079      	str	r1, [r7, #4]
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	4413      	add	r3, r2
 800e166:	73fb      	strb	r3, [r7, #15]
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	3b01      	subs	r3, #1
 800e16c:	60bb      	str	r3, [r7, #8]
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d1ed      	bne.n	800e150 <sum_sfn+0x10>
	return sum;
 800e174:	7bfb      	ldrb	r3, [r7, #15]
}
 800e176:	4618      	mov	r0, r3
 800e178:	3714      	adds	r7, #20
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bc80      	pop	{r7}
 800e17e:	4770      	bx	lr

0800e180 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b086      	sub	sp, #24
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e188:	2100      	movs	r1, #0
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f7ff fc3f 	bl	800da0e <dir_sdi>
 800e190:	4603      	mov	r3, r0
 800e192:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e194:	7dfb      	ldrb	r3, [r7, #23]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d001      	beq.n	800e19e <dir_find+0x1e>
 800e19a:	7dfb      	ldrb	r3, [r7, #23]
 800e19c:	e0ac      	b.n	800e2f8 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800e19e:	23ff      	movs	r3, #255	@ 0xff
 800e1a0:	753b      	strb	r3, [r7, #20]
 800e1a2:	7d3b      	ldrb	r3, [r7, #20]
 800e1a4:	757b      	strb	r3, [r7, #21]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e1ac:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e1bc:	4619      	mov	r1, r3
 800e1be:	4610      	mov	r0, r2
 800e1c0:	f7ff f837 	bl	800d232 <move_window>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e1c8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	f040 808e 	bne.w	800e2ec <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e1d6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e1de:	7dbb      	ldrb	r3, [r7, #22]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d102      	bne.n	800e1ea <dir_find+0x6a>
 800e1e4:	2304      	movs	r3, #4
 800e1e6:	75fb      	strb	r3, [r7, #23]
 800e1e8:	e085      	b.n	800e2f6 <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	330b      	adds	r3, #11
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e1f4:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e1f6:	7dbb      	ldrb	r3, [r7, #22]
 800e1f8:	2be5      	cmp	r3, #229	@ 0xe5
 800e1fa:	d007      	beq.n	800e20c <dir_find+0x8c>
 800e1fc:	7bfb      	ldrb	r3, [r7, #15]
 800e1fe:	f003 0308 	and.w	r3, r3, #8
 800e202:	2b00      	cmp	r3, #0
 800e204:	d00a      	beq.n	800e21c <dir_find+0x9c>
 800e206:	7bfb      	ldrb	r3, [r7, #15]
 800e208:	2b0f      	cmp	r3, #15
 800e20a:	d007      	beq.n	800e21c <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800e20c:	23ff      	movs	r3, #255	@ 0xff
 800e20e:	757b      	strb	r3, [r7, #21]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e216:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
 800e21a:	e05c      	b.n	800e2d6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e21c:	7bfb      	ldrb	r3, [r7, #15]
 800e21e:	2b0f      	cmp	r3, #15
 800e220:	d133      	bne.n	800e28a <dir_find+0x10a>
				if (dp->lfn) {
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d054      	beq.n	800e2d6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e22c:	7dbb      	ldrb	r3, [r7, #22]
 800e22e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e232:	2b00      	cmp	r3, #0
 800e234:	d00e      	beq.n	800e254 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	7b5b      	ldrb	r3, [r3, #13]
 800e23a:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800e23c:	7dbb      	ldrb	r3, [r7, #22]
 800e23e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e242:	75bb      	strb	r3, [r7, #22]
 800e244:	7dbb      	ldrb	r3, [r7, #22]
 800e246:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800e254:	7dba      	ldrb	r2, [r7, #22]
 800e256:	7d7b      	ldrb	r3, [r7, #21]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d113      	bne.n	800e284 <dir_find+0x104>
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	330d      	adds	r3, #13
 800e260:	781b      	ldrb	r3, [r3, #0]
 800e262:	7d3a      	ldrb	r2, [r7, #20]
 800e264:	429a      	cmp	r2, r3
 800e266:	d10d      	bne.n	800e284 <dir_find+0x104>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800e26e:	6939      	ldr	r1, [r7, #16]
 800e270:	4618      	mov	r0, r3
 800e272:	f7ff fdf5 	bl	800de60 <cmp_lfn>
 800e276:	4603      	mov	r3, r0
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d003      	beq.n	800e284 <dir_find+0x104>
 800e27c:	7d7b      	ldrb	r3, [r7, #21]
 800e27e:	3b01      	subs	r3, #1
 800e280:	b2db      	uxtb	r3, r3
 800e282:	e000      	b.n	800e286 <dir_find+0x106>
 800e284:	23ff      	movs	r3, #255	@ 0xff
 800e286:	757b      	strb	r3, [r7, #21]
 800e288:	e025      	b.n	800e2d6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800e28a:	7d7b      	ldrb	r3, [r7, #21]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d107      	bne.n	800e2a0 <dir_find+0x120>
 800e290:	6938      	ldr	r0, [r7, #16]
 800e292:	f7ff ff55 	bl	800e140 <sum_sfn>
 800e296:	4603      	mov	r3, r0
 800e298:	461a      	mov	r2, r3
 800e29a:	7d3b      	ldrb	r3, [r7, #20]
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d027      	beq.n	800e2f0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e2a6:	330b      	adds	r3, #11
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	f003 0301 	and.w	r3, r3, #1
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d10a      	bne.n	800e2c8 <dir_find+0x148>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e2b8:	220b      	movs	r2, #11
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	6938      	ldr	r0, [r7, #16]
 800e2be:	f7fe fd91 	bl	800cde4 <mem_cmp>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d015      	beq.n	800e2f4 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800e2c8:	23ff      	movs	r3, #255	@ 0xff
 800e2ca:	757b      	strb	r3, [r7, #21]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e2d2:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800e2d6:	2100      	movs	r1, #0
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f7ff fc2c 	bl	800db36 <dir_next>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e2e2:	7dfb      	ldrb	r3, [r7, #23]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f43f af63 	beq.w	800e1b0 <dir_find+0x30>
 800e2ea:	e004      	b.n	800e2f6 <dir_find+0x176>
		if (res != FR_OK) break;
 800e2ec:	bf00      	nop
 800e2ee:	e002      	b.n	800e2f6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800e2f0:	bf00      	nop
 800e2f2:	e000      	b.n	800e2f6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800e2f4:	bf00      	nop

	return res;
 800e2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3718      	adds	r7, #24
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b08c      	sub	sp, #48	@ 0x30
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e30e:	623b      	str	r3, [r7, #32]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800e316:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800e318:	f107 030c 	add.w	r3, r7, #12
 800e31c:	220c      	movs	r2, #12
 800e31e:	6a39      	ldr	r1, [r7, #32]
 800e320:	4618      	mov	r0, r3
 800e322:	f7fe fd27 	bl	800cd74 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e326:	7dfb      	ldrb	r3, [r7, #23]
 800e328:	f003 0301 	and.w	r3, r3, #1
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d037      	beq.n	800e3a0 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800e330:	6a3b      	ldr	r3, [r7, #32]
 800e332:	330b      	adds	r3, #11
 800e334:	2200      	movs	r2, #0
 800e336:	701a      	strb	r2, [r3, #0]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2200      	movs	r2, #0
 800e33c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		for (n = 1; n < 100; n++) {
 800e340:	2301      	movs	r3, #1
 800e342:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e344:	e013      	b.n	800e36e <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800e346:	f107 010c 	add.w	r1, r7, #12
 800e34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e34c:	69fa      	ldr	r2, [r7, #28]
 800e34e:	6a38      	ldr	r0, [r7, #32]
 800e350:	f7ff fe68 	bl	800e024 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f7ff ff13 	bl	800e180 <dir_find>
 800e35a:	4603      	mov	r3, r0
 800e35c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800e360:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e364:	2b00      	cmp	r3, #0
 800e366:	d106      	bne.n	800e376 <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 800e368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e36a:	3301      	adds	r3, #1
 800e36c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e370:	2b63      	cmp	r3, #99	@ 0x63
 800e372:	d9e8      	bls.n	800e346 <dir_register+0x46>
 800e374:	e000      	b.n	800e378 <dir_register+0x78>
			if (res != FR_OK) break;
 800e376:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e37a:	2b64      	cmp	r3, #100	@ 0x64
 800e37c:	d101      	bne.n	800e382 <dir_register+0x82>
 800e37e:	2307      	movs	r3, #7
 800e380:	e0c5      	b.n	800e50e <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e382:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e386:	2b04      	cmp	r3, #4
 800e388:	d002      	beq.n	800e390 <dir_register+0x90>
 800e38a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e38e:	e0be      	b.n	800e50e <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800e390:	6a3b      	ldr	r3, [r7, #32]
 800e392:	330b      	adds	r3, #11
 800e394:	7dfa      	ldrb	r2, [r7, #23]
 800e396:	701a      	strb	r2, [r3, #0]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	69fa      	ldr	r2, [r7, #28]
 800e39c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800e3a0:	7dfb      	ldrb	r3, [r7, #23]
 800e3a2:	f003 0302 	and.w	r3, r3, #2
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d014      	beq.n	800e3d4 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e3ae:	e002      	b.n	800e3b6 <dir_register+0xb6>
 800e3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3b8:	005b      	lsls	r3, r3, #1
 800e3ba:	69fa      	ldr	r2, [r7, #28]
 800e3bc:	4413      	add	r3, r2
 800e3be:	881b      	ldrh	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d1f5      	bne.n	800e3b0 <dir_register+0xb0>
		nent = (n + 25) / 13;
 800e3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3c6:	3319      	adds	r3, #25
 800e3c8:	4a53      	ldr	r2, [pc, #332]	@ (800e518 <dir_register+0x218>)
 800e3ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e3ce:	089b      	lsrs	r3, r3, #2
 800e3d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3d2:	e001      	b.n	800e3d8 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e3d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f7ff fca2 	bl	800dd24 <dir_alloc>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e3e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d153      	bne.n	800e496 <dir_register+0x196>
 800e3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f0:	3b01      	subs	r3, #1
 800e3f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d04d      	beq.n	800e496 <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800e400:	461a      	mov	r2, r3
 800e402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e404:	1ad3      	subs	r3, r2, r3
 800e406:	4619      	mov	r1, r3
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7ff fb00 	bl	800da0e <dir_sdi>
 800e40e:	4603      	mov	r3, r0
 800e410:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e414:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d13c      	bne.n	800e496 <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e422:	4618      	mov	r0, r3
 800e424:	f7ff fe8c 	bl	800e140 <sum_sfn>
 800e428:	4603      	mov	r3, r0
 800e42a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e438:	4619      	mov	r1, r3
 800e43a:	4610      	mov	r0, r2
 800e43c:	f7fe fef9 	bl	800d232 <move_window>
 800e440:	4603      	mov	r3, r0
 800e442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800e446:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d122      	bne.n	800e494 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 1214 	ldr.w	r1, [r3, #532]	@ 0x214
 800e45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e45c:	b2da      	uxtb	r2, r3
 800e45e:	7efb      	ldrb	r3, [r7, #27]
 800e460:	f7ff fd6c 	bl	800df3c <fit_lfn>
				dp->fs->wflag = 1;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e46a:	2201      	movs	r2, #1
 800e46c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = dir_next(dp, 0);	/* Next entry */
 800e470:	2100      	movs	r1, #0
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f7ff fb5f 	bl	800db36 <dir_next>
 800e478:	4603      	mov	r3, r0
 800e47a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800e47e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e482:	2b00      	cmp	r3, #0
 800e484:	d107      	bne.n	800e496 <dir_register+0x196>
 800e486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e488:	3b01      	subs	r3, #1
 800e48a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d1cc      	bne.n	800e42c <dir_register+0x12c>
 800e492:	e000      	b.n	800e496 <dir_register+0x196>
				if (res != FR_OK) break;
 800e494:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800e496:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d135      	bne.n	800e50a <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	4610      	mov	r0, r2
 800e4ae:	f7fe fec0 	bl	800d232 <move_window>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e4b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d124      	bne.n	800e50a <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e4c6:	2220      	movs	r2, #32
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fe fc70 	bl	800cdb0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e4dc:	220b      	movs	r2, #11
 800e4de:	4619      	mov	r1, r3
 800e4e0:	f7fe fc48 	bl	800cd74 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e4ea:	330b      	adds	r3, #11
 800e4ec:	781a      	ldrb	r2, [r3, #0]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e4f4:	330c      	adds	r3, #12
 800e4f6:	f002 0218 	and.w	r2, r2, #24
 800e4fa:	b2d2      	uxtb	r2, r2
 800e4fc:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e504:	2201      	movs	r2, #1
 800e506:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 800e50a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3730      	adds	r7, #48	@ 0x30
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	4ec4ec4f 	.word	0x4ec4ec4f

0800e51c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b08a      	sub	sp, #40	@ 0x28
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	613b      	str	r3, [r7, #16]
 800e52c:	e002      	b.n	800e534 <create_name+0x18>
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	3301      	adds	r3, #1
 800e532:	613b      	str	r3, [r7, #16]
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	2b2f      	cmp	r3, #47	@ 0x2f
 800e53a:	d0f8      	beq.n	800e52e <create_name+0x12>
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	2b5c      	cmp	r3, #92	@ 0x5c
 800e542:	d0f4      	beq.n	800e52e <create_name+0x12>
	lfn = dp->lfn;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800e54a:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800e54c:	2300      	movs	r3, #0
 800e54e:	617b      	str	r3, [r7, #20]
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	1c5a      	adds	r2, r3, #1
 800e558:	61ba      	str	r2, [r7, #24]
 800e55a:	693a      	ldr	r2, [r7, #16]
 800e55c:	4413      	add	r3, r2
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800e562:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e564:	2b1f      	cmp	r3, #31
 800e566:	d92f      	bls.n	800e5c8 <create_name+0xac>
 800e568:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e56a:	2b2f      	cmp	r3, #47	@ 0x2f
 800e56c:	d02c      	beq.n	800e5c8 <create_name+0xac>
 800e56e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e570:	2b5c      	cmp	r3, #92	@ 0x5c
 800e572:	d029      	beq.n	800e5c8 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	2bfe      	cmp	r3, #254	@ 0xfe
 800e578:	d901      	bls.n	800e57e <create_name+0x62>
			return FR_INVALID_NAME;
 800e57a:	2306      	movs	r3, #6
 800e57c:	e182      	b.n	800e884 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e57e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e580:	b2db      	uxtb	r3, r3
 800e582:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e584:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e586:	2101      	movs	r1, #1
 800e588:	4618      	mov	r0, r3
 800e58a:	f001 fd19 	bl	800ffc0 <ff_convert>
 800e58e:	4603      	mov	r3, r0
 800e590:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e592:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e594:	2b00      	cmp	r3, #0
 800e596:	d101      	bne.n	800e59c <create_name+0x80>
 800e598:	2306      	movs	r3, #6
 800e59a:	e173      	b.n	800e884 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800e59c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e59e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e5a0:	d809      	bhi.n	800e5b6 <create_name+0x9a>
 800e5a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	488e      	ldr	r0, [pc, #568]	@ (800e7e0 <create_name+0x2c4>)
 800e5a8:	f7fe fc42 	bl	800ce30 <chk_chr>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d001      	beq.n	800e5b6 <create_name+0x9a>
			return FR_INVALID_NAME;
 800e5b2:	2306      	movs	r3, #6
 800e5b4:	e166      	b.n	800e884 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	1c5a      	adds	r2, r3, #1
 800e5ba:	617a      	str	r2, [r7, #20]
 800e5bc:	005b      	lsls	r3, r3, #1
 800e5be:	68fa      	ldr	r2, [r7, #12]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e5c4:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e5c6:	e7c5      	b.n	800e554 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e5c8:	693a      	ldr	r2, [r7, #16]
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	441a      	add	r2, r3
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800e5d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5d4:	2b1f      	cmp	r3, #31
 800e5d6:	d801      	bhi.n	800e5dc <create_name+0xc0>
 800e5d8:	2304      	movs	r3, #4
 800e5da:	e000      	b.n	800e5de <create_name+0xc2>
 800e5dc:	2300      	movs	r3, #0
 800e5de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800e5e2:	e011      	b.n	800e608 <create_name+0xec>
		w = lfn[di - 1];
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e5ea:	3b01      	subs	r3, #1
 800e5ec:	005b      	lsls	r3, r3, #1
 800e5ee:	68fa      	ldr	r2, [r7, #12]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	881b      	ldrh	r3, [r3, #0]
 800e5f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800e5f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5f8:	2b20      	cmp	r3, #32
 800e5fa:	d002      	beq.n	800e602 <create_name+0xe6>
 800e5fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5fe:	2b2e      	cmp	r3, #46	@ 0x2e
 800e600:	d106      	bne.n	800e610 <create_name+0xf4>
		di--;
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	3b01      	subs	r3, #1
 800e606:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d1ea      	bne.n	800e5e4 <create_name+0xc8>
 800e60e:	e000      	b.n	800e612 <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 800e610:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d101      	bne.n	800e61c <create_name+0x100>
 800e618:	2306      	movs	r3, #6
 800e61a:	e133      	b.n	800e884 <create_name+0x368>

	lfn[di] = 0;						/* LFN is created */
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	005b      	lsls	r3, r3, #1
 800e620:	68fa      	ldr	r2, [r7, #12]
 800e622:	4413      	add	r3, r2
 800e624:	2200      	movs	r2, #0
 800e626:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e62e:	220b      	movs	r2, #11
 800e630:	2120      	movs	r1, #32
 800e632:	4618      	mov	r0, r3
 800e634:	f7fe fbbc 	bl	800cdb0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e638:	2300      	movs	r3, #0
 800e63a:	61bb      	str	r3, [r7, #24]
 800e63c:	e002      	b.n	800e644 <create_name+0x128>
 800e63e:	69bb      	ldr	r3, [r7, #24]
 800e640:	3301      	adds	r3, #1
 800e642:	61bb      	str	r3, [r7, #24]
 800e644:	69bb      	ldr	r3, [r7, #24]
 800e646:	005b      	lsls	r3, r3, #1
 800e648:	68fa      	ldr	r2, [r7, #12]
 800e64a:	4413      	add	r3, r2
 800e64c:	881b      	ldrh	r3, [r3, #0]
 800e64e:	2b20      	cmp	r3, #32
 800e650:	d0f5      	beq.n	800e63e <create_name+0x122>
 800e652:	69bb      	ldr	r3, [r7, #24]
 800e654:	005b      	lsls	r3, r3, #1
 800e656:	68fa      	ldr	r2, [r7, #12]
 800e658:	4413      	add	r3, r2
 800e65a:	881b      	ldrh	r3, [r3, #0]
 800e65c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e65e:	d0ee      	beq.n	800e63e <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d009      	beq.n	800e67a <create_name+0x15e>
 800e666:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e66a:	f043 0303 	orr.w	r3, r3, #3
 800e66e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e672:	e002      	b.n	800e67a <create_name+0x15e>
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	3b01      	subs	r3, #1
 800e678:	617b      	str	r3, [r7, #20]
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d009      	beq.n	800e694 <create_name+0x178>
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e686:	3b01      	subs	r3, #1
 800e688:	005b      	lsls	r3, r3, #1
 800e68a:	68fa      	ldr	r2, [r7, #12]
 800e68c:	4413      	add	r3, r2
 800e68e:	881b      	ldrh	r3, [r3, #0]
 800e690:	2b2e      	cmp	r3, #46	@ 0x2e
 800e692:	d1ef      	bne.n	800e674 <create_name+0x158>

	b = i = 0; ni = 8;
 800e694:	2300      	movs	r3, #0
 800e696:	623b      	str	r3, [r7, #32]
 800e698:	2300      	movs	r3, #0
 800e69a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e69e:	2308      	movs	r3, #8
 800e6a0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e6a2:	69bb      	ldr	r3, [r7, #24]
 800e6a4:	1c5a      	adds	r2, r3, #1
 800e6a6:	61ba      	str	r2, [r7, #24]
 800e6a8:	005b      	lsls	r3, r3, #1
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	881b      	ldrh	r3, [r3, #0]
 800e6b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e6b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f000 8090 	beq.w	800e7da <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e6ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6bc:	2b20      	cmp	r3, #32
 800e6be:	d006      	beq.n	800e6ce <create_name+0x1b2>
 800e6c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6c4:	d10a      	bne.n	800e6dc <create_name+0x1c0>
 800e6c6:	69ba      	ldr	r2, [r7, #24]
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d006      	beq.n	800e6dc <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 800e6ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6d2:	f043 0303 	orr.w	r3, r3, #3
 800e6d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e6da:	e07d      	b.n	800e7d8 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e6dc:	6a3a      	ldr	r2, [r7, #32]
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d203      	bcs.n	800e6ec <create_name+0x1d0>
 800e6e4:	69ba      	ldr	r2, [r7, #24]
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d123      	bne.n	800e734 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 800e6ec:	69fb      	ldr	r3, [r7, #28]
 800e6ee:	2b0b      	cmp	r3, #11
 800e6f0:	d106      	bne.n	800e700 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 800e6f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6f6:	f043 0303 	orr.w	r3, r3, #3
 800e6fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e6fe:	e076      	b.n	800e7ee <create_name+0x2d2>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e700:	69ba      	ldr	r2, [r7, #24]
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	429a      	cmp	r2, r3
 800e706:	d005      	beq.n	800e714 <create_name+0x1f8>
 800e708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e70c:	f043 0303 	orr.w	r3, r3, #3
 800e710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800e714:	69ba      	ldr	r2, [r7, #24]
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	429a      	cmp	r2, r3
 800e71a:	d867      	bhi.n	800e7ec <create_name+0x2d0>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	61bb      	str	r3, [r7, #24]
 800e720:	2308      	movs	r3, #8
 800e722:	623b      	str	r3, [r7, #32]
 800e724:	230b      	movs	r3, #11
 800e726:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e728:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e732:	e051      	b.n	800e7d8 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e734:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e736:	2b7f      	cmp	r3, #127	@ 0x7f
 800e738:	d914      	bls.n	800e764 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e73a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e73c:	2100      	movs	r1, #0
 800e73e:	4618      	mov	r0, r3
 800e740:	f001 fc3e 	bl	800ffc0 <ff_convert>
 800e744:	4603      	mov	r3, r0
 800e746:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e748:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d004      	beq.n	800e758 <create_name+0x23c>
 800e74e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e750:	3b80      	subs	r3, #128	@ 0x80
 800e752:	4a24      	ldr	r2, [pc, #144]	@ (800e7e4 <create_name+0x2c8>)
 800e754:	5cd3      	ldrb	r3, [r2, r3]
 800e756:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e75c:	f043 0302 	orr.w	r3, r3, #2
 800e760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e764:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e766:	2b00      	cmp	r3, #0
 800e768:	d007      	beq.n	800e77a <create_name+0x25e>
 800e76a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e76c:	4619      	mov	r1, r3
 800e76e:	481e      	ldr	r0, [pc, #120]	@ (800e7e8 <create_name+0x2cc>)
 800e770:	f7fe fb5e 	bl	800ce30 <chk_chr>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d008      	beq.n	800e78c <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e77a:	235f      	movs	r3, #95	@ 0x5f
 800e77c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e77e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e782:	f043 0303 	orr.w	r3, r3, #3
 800e786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e78a:	e01b      	b.n	800e7c4 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e78c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e78e:	2b40      	cmp	r3, #64	@ 0x40
 800e790:	d909      	bls.n	800e7a6 <create_name+0x28a>
 800e792:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e794:	2b5a      	cmp	r3, #90	@ 0x5a
 800e796:	d806      	bhi.n	800e7a6 <create_name+0x28a>
					b |= 2;
 800e798:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e79c:	f043 0302 	orr.w	r3, r3, #2
 800e7a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e7a4:	e00e      	b.n	800e7c4 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e7a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7a8:	2b60      	cmp	r3, #96	@ 0x60
 800e7aa:	d90b      	bls.n	800e7c4 <create_name+0x2a8>
 800e7ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7ae:	2b7a      	cmp	r3, #122	@ 0x7a
 800e7b0:	d808      	bhi.n	800e7c4 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 800e7b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e7b6:	f043 0301 	orr.w	r3, r3, #1
 800e7ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e7be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7c0:	3b20      	subs	r3, #32
 800e7c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800e7ca:	6a3b      	ldr	r3, [r7, #32]
 800e7cc:	1c59      	adds	r1, r3, #1
 800e7ce:	6239      	str	r1, [r7, #32]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e7d4:	b2d2      	uxtb	r2, r2
 800e7d6:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800e7d8:	e763      	b.n	800e6a2 <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 800e7da:	bf00      	nop
 800e7dc:	e007      	b.n	800e7ee <create_name+0x2d2>
 800e7de:	bf00      	nop
 800e7e0:	080130a8 	.word	0x080130a8
 800e7e4:	080131e8 	.word	0x080131e8
 800e7e8:	080130b4 	.word	0x080130b4
			if (si > di) break;			/* No extension */
 800e7ec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	2be5      	cmp	r3, #229	@ 0xe5
 800e7f8:	d104      	bne.n	800e804 <create_name+0x2e8>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e800:	2205      	movs	r2, #5
 800e802:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	2b08      	cmp	r3, #8
 800e808:	d104      	bne.n	800e814 <create_name+0x2f8>
 800e80a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800e814:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e818:	f003 030c 	and.w	r3, r3, #12
 800e81c:	2b0c      	cmp	r3, #12
 800e81e:	d005      	beq.n	800e82c <create_name+0x310>
 800e820:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e824:	f003 0303 	and.w	r3, r3, #3
 800e828:	2b03      	cmp	r3, #3
 800e82a:	d105      	bne.n	800e838 <create_name+0x31c>
		cf |= NS_LFN;
 800e82c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e830:	f043 0302 	orr.w	r3, r3, #2
 800e834:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e83c:	f003 0302 	and.w	r3, r3, #2
 800e840:	2b00      	cmp	r3, #0
 800e842:	d117      	bne.n	800e874 <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e844:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e848:	f003 0303 	and.w	r3, r3, #3
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d105      	bne.n	800e85c <create_name+0x340>
 800e850:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e854:	f043 0310 	orr.w	r3, r3, #16
 800e858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e85c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e860:	f003 030c 	and.w	r3, r3, #12
 800e864:	2b04      	cmp	r3, #4
 800e866:	d105      	bne.n	800e874 <create_name+0x358>
 800e868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e86c:	f043 0308 	orr.w	r3, r3, #8
 800e870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e87a:	330b      	adds	r3, #11
 800e87c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e880:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e882:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800e884:	4618      	mov	r0, r3
 800e886:	3728      	adds	r7, #40	@ 0x28
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	2b2f      	cmp	r3, #47	@ 0x2f
 800e89c:	d003      	beq.n	800e8a6 <follow_path+0x1a>
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	2b5c      	cmp	r3, #92	@ 0x5c
 800e8a4:	d102      	bne.n	800e8ac <follow_path+0x20>
		path++;
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	2b1f      	cmp	r3, #31
 800e8ba:	d80a      	bhi.n	800e8d2 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800e8bc:	2100      	movs	r1, #0
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f7ff f8a5 	bl	800da0e <dir_sdi>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800e8d0:	e045      	b.n	800e95e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e8d2:	463b      	mov	r3, r7
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f7ff fe20 	bl	800e51c <create_name>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800e8e0:	7bfb      	ldrb	r3, [r7, #15]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d136      	bne.n	800e954 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f7ff fc4a 	bl	800e180 <dir_find>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e8f6:	7adb      	ldrb	r3, [r3, #11]
 800e8f8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800e8fa:	7bfb      	ldrb	r3, [r7, #15]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00a      	beq.n	800e916 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e900:	7bfb      	ldrb	r3, [r7, #15]
 800e902:	2b04      	cmp	r3, #4
 800e904:	d128      	bne.n	800e958 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e906:	7bbb      	ldrb	r3, [r7, #14]
 800e908:	f003 0304 	and.w	r3, r3, #4
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d123      	bne.n	800e958 <follow_path+0xcc>
 800e910:	2305      	movs	r3, #5
 800e912:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800e914:	e020      	b.n	800e958 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e916:	7bbb      	ldrb	r3, [r7, #14]
 800e918:	f003 0304 	and.w	r3, r3, #4
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d11d      	bne.n	800e95c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e926:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	330b      	adds	r3, #11
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	f003 0310 	and.w	r3, r3, #16
 800e932:	2b00      	cmp	r3, #0
 800e934:	d102      	bne.n	800e93c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800e936:	2305      	movs	r3, #5
 800e938:	73fb      	strb	r3, [r7, #15]
 800e93a:	e010      	b.n	800e95e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e942:	68b9      	ldr	r1, [r7, #8]
 800e944:	4618      	mov	r0, r3
 800e946:	f7ff fa37 	bl	800ddb8 <ld_clust>
 800e94a:	4602      	mov	r2, r0
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e952:	e7be      	b.n	800e8d2 <follow_path+0x46>
			if (res != FR_OK) break;
 800e954:	bf00      	nop
 800e956:	e002      	b.n	800e95e <follow_path+0xd2>
				break;
 800e958:	bf00      	nop
 800e95a:	e000      	b.n	800e95e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e95c:	bf00      	nop
		}
	}

	return res;
 800e95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e960:	4618      	mov	r0, r3
 800e962:	3710      	adds	r7, #16
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e968:	b480      	push	{r7}
 800e96a:	b087      	sub	sp, #28
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e970:	f04f 33ff 	mov.w	r3, #4294967295
 800e974:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d031      	beq.n	800e9e2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	617b      	str	r3, [r7, #20]
 800e984:	e002      	b.n	800e98c <get_ldnumber+0x24>
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	3301      	adds	r3, #1
 800e98a:	617b      	str	r3, [r7, #20]
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	2b1f      	cmp	r3, #31
 800e992:	d903      	bls.n	800e99c <get_ldnumber+0x34>
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	2b3a      	cmp	r3, #58	@ 0x3a
 800e99a:	d1f4      	bne.n	800e986 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	2b3a      	cmp	r3, #58	@ 0x3a
 800e9a2:	d11c      	bne.n	800e9de <get_ldnumber+0x76>
			tp = *path;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	1c5a      	adds	r2, r3, #1
 800e9ae:	60fa      	str	r2, [r7, #12]
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	3b30      	subs	r3, #48	@ 0x30
 800e9b4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	2b09      	cmp	r3, #9
 800e9ba:	d80e      	bhi.n	800e9da <get_ldnumber+0x72>
 800e9bc:	68fa      	ldr	r2, [r7, #12]
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d10a      	bne.n	800e9da <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d107      	bne.n	800e9da <get_ldnumber+0x72>
					vol = (int)i;
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	617b      	str	r3, [r7, #20]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	697a      	ldr	r2, [r7, #20]
 800e9d8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	e002      	b.n	800e9e4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e9de:	2300      	movs	r3, #0
 800e9e0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e9e2:	693b      	ldr	r3, [r7, #16]
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	371c      	adds	r7, #28
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bc80      	pop	{r7}
 800e9ec:	4770      	bx	lr
	...

0800e9f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b082      	sub	sp, #8
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f04f 32ff 	mov.w	r2, #4294967295
 800ea08:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800ea0c:	6839      	ldr	r1, [r7, #0]
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f7fe fc0f 	bl	800d232 <move_window>
 800ea14:	4603      	mov	r3, r0
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d001      	beq.n	800ea1e <check_fs+0x2e>
		return 3;
 800ea1a:	2303      	movs	r3, #3
 800ea1c:	e04a      	b.n	800eab4 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ea24:	3301      	adds	r3, #1
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	021b      	lsls	r3, r3, #8
 800ea2a:	b21a      	sxth	r2, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800ea32:	b21b      	sxth	r3, r3
 800ea34:	4313      	orrs	r3, r2
 800ea36:	b21b      	sxth	r3, r3
 800ea38:	4a20      	ldr	r2, [pc, #128]	@ (800eabc <check_fs+0xcc>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d001      	beq.n	800ea42 <check_fs+0x52>
		return 2;
 800ea3e:	2302      	movs	r3, #2
 800ea40:	e038      	b.n	800eab4 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	3336      	adds	r3, #54	@ 0x36
 800ea46:	3303      	adds	r3, #3
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	061a      	lsls	r2, r3, #24
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	3336      	adds	r3, #54	@ 0x36
 800ea50:	3302      	adds	r3, #2
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	041b      	lsls	r3, r3, #16
 800ea56:	431a      	orrs	r2, r3
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	3336      	adds	r3, #54	@ 0x36
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	021b      	lsls	r3, r3, #8
 800ea62:	4313      	orrs	r3, r2
 800ea64:	687a      	ldr	r2, [r7, #4]
 800ea66:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 800ea6a:	4313      	orrs	r3, r2
 800ea6c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ea70:	4a13      	ldr	r2, [pc, #76]	@ (800eac0 <check_fs+0xd0>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d101      	bne.n	800ea7a <check_fs+0x8a>
		return 0;
 800ea76:	2300      	movs	r3, #0
 800ea78:	e01c      	b.n	800eab4 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	3352      	adds	r3, #82	@ 0x52
 800ea7e:	3303      	adds	r3, #3
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	061a      	lsls	r2, r3, #24
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	3352      	adds	r3, #82	@ 0x52
 800ea88:	3302      	adds	r3, #2
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	041b      	lsls	r3, r3, #16
 800ea8e:	431a      	orrs	r2, r3
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	3352      	adds	r3, #82	@ 0x52
 800ea94:	3301      	adds	r3, #1
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	021b      	lsls	r3, r3, #8
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	687a      	ldr	r2, [r7, #4]
 800ea9e:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800eaa2:	4313      	orrs	r3, r2
 800eaa4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800eaa8:	4a05      	ldr	r2, [pc, #20]	@ (800eac0 <check_fs+0xd0>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d101      	bne.n	800eab2 <check_fs+0xc2>
		return 0;
 800eaae:	2300      	movs	r3, #0
 800eab0:	e000      	b.n	800eab4 <check_fs+0xc4>

	return 1;
 800eab2:	2301      	movs	r3, #1
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3708      	adds	r7, #8
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}
 800eabc:	ffffaa55 	.word	0xffffaa55
 800eac0:	00544146 	.word	0x00544146

0800eac4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b096      	sub	sp, #88	@ 0x58
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	4613      	mov	r3, r2
 800ead0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2200      	movs	r2, #0
 800ead6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ead8:	68b8      	ldr	r0, [r7, #8]
 800eada:	f7ff ff45 	bl	800e968 <get_ldnumber>
 800eade:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	da01      	bge.n	800eaea <find_volume+0x26>
 800eae6:	230b      	movs	r3, #11
 800eae8:	e2b0      	b.n	800f04c <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800eaea:	4aa1      	ldr	r2, [pc, #644]	@ (800ed70 <find_volume+0x2ac>)
 800eaec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eaee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaf2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800eaf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d101      	bne.n	800eafe <find_volume+0x3a>
 800eafa:	230c      	movs	r3, #12
 800eafc:	e2a6      	b.n	800f04c <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 800eafe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800eb00:	f7fe f9b0 	bl	800ce64 <lock_fs>
 800eb04:	4603      	mov	r3, r0
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d101      	bne.n	800eb0e <find_volume+0x4a>
 800eb0a:	230f      	movs	r3, #15
 800eb0c:	e29e      	b.n	800f04c <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb12:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800eb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb16:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d01b      	beq.n	800eb56 <find_volume+0x92>
		stat = disk_status(fs->drv);
 800eb1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb20:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7fe f887 	bl	800cc38 <disk_status>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800eb30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb34:	f003 0301 	and.w	r3, r3, #1
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d10c      	bne.n	800eb56 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800eb3c:	79fb      	ldrb	r3, [r7, #7]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d007      	beq.n	800eb52 <find_volume+0x8e>
 800eb42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb46:	f003 0304 	and.w	r3, r3, #4
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d001      	beq.n	800eb52 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 800eb4e:	230a      	movs	r3, #10
 800eb50:	e27c      	b.n	800f04c <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 800eb52:	2300      	movs	r3, #0
 800eb54:	e27a      	b.n	800f04c <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800eb56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800eb5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb60:	b2da      	uxtb	r2, r3
 800eb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb64:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800eb68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb6a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7fe f87c 	bl	800cc6c <disk_initialize>
 800eb74:	4603      	mov	r3, r0
 800eb76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800eb7a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb7e:	f003 0301 	and.w	r3, r3, #1
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d001      	beq.n	800eb8a <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eb86:	2303      	movs	r3, #3
 800eb88:	e260      	b.n	800f04c <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800eb8a:	79fb      	ldrb	r3, [r7, #7]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d007      	beq.n	800eba0 <find_volume+0xdc>
 800eb90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb94:	f003 0304 	and.w	r3, r3, #4
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d001      	beq.n	800eba0 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800eb9c:	230a      	movs	r3, #10
 800eb9e:	e255      	b.n	800f04c <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800eba0:	2300      	movs	r3, #0
 800eba2:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800eba4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eba6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800eba8:	f7ff ff22 	bl	800e9f0 <check_fs>
 800ebac:	4603      	mov	r3, r0
 800ebae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800ebb2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d153      	bne.n	800ec62 <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800ebba:	2300      	movs	r3, #0
 800ebbc:	643b      	str	r3, [r7, #64]	@ 0x40
 800ebbe:	e028      	b.n	800ec12 <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800ebc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ebc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebc4:	011b      	lsls	r3, r3, #4
 800ebc6:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ebca:	4413      	add	r3, r2
 800ebcc:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800ebce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebd0:	3304      	adds	r3, #4
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d012      	beq.n	800ebfe <find_volume+0x13a>
 800ebd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebda:	330b      	adds	r3, #11
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	061a      	lsls	r2, r3, #24
 800ebe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebe2:	330a      	adds	r3, #10
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	041b      	lsls	r3, r3, #16
 800ebe8:	431a      	orrs	r2, r3
 800ebea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebec:	3309      	adds	r3, #9
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	021b      	lsls	r3, r3, #8
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebf6:	3208      	adds	r2, #8
 800ebf8:	7812      	ldrb	r2, [r2, #0]
 800ebfa:	431a      	orrs	r2, r3
 800ebfc:	e000      	b.n	800ec00 <find_volume+0x13c>
 800ebfe:	2200      	movs	r2, #0
 800ec00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	3358      	adds	r3, #88	@ 0x58
 800ec06:	443b      	add	r3, r7
 800ec08:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800ec0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec0e:	3301      	adds	r3, #1
 800ec10:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec14:	2b03      	cmp	r3, #3
 800ec16:	d9d3      	bls.n	800ebc0 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800ec18:	2300      	movs	r3, #0
 800ec1a:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ec1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d002      	beq.n	800ec28 <find_volume+0x164>
 800ec22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec24:	3b01      	subs	r3, #1
 800ec26:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800ec28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec2a:	009b      	lsls	r3, r3, #2
 800ec2c:	3358      	adds	r3, #88	@ 0x58
 800ec2e:	443b      	add	r3, r7
 800ec30:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ec34:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800ec36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d005      	beq.n	800ec48 <find_volume+0x184>
 800ec3c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ec3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ec40:	f7ff fed6 	bl	800e9f0 <check_fs>
 800ec44:	4603      	mov	r3, r0
 800ec46:	e000      	b.n	800ec4a <find_volume+0x186>
 800ec48:	2302      	movs	r3, #2
 800ec4a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800ec4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d005      	beq.n	800ec62 <find_volume+0x19e>
 800ec56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec58:	3301      	adds	r3, #1
 800ec5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec5e:	2b03      	cmp	r3, #3
 800ec60:	d9e2      	bls.n	800ec28 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ec62:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ec66:	2b03      	cmp	r3, #3
 800ec68:	d101      	bne.n	800ec6e <find_volume+0x1aa>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	e1ee      	b.n	800f04c <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800ec6e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d001      	beq.n	800ec7a <find_volume+0x1b6>
 800ec76:	230d      	movs	r3, #13
 800ec78:	e1e8      	b.n	800f04c <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ec7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec7c:	7b1b      	ldrb	r3, [r3, #12]
 800ec7e:	021b      	lsls	r3, r3, #8
 800ec80:	b21a      	sxth	r2, r3
 800ec82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec84:	7adb      	ldrb	r3, [r3, #11]
 800ec86:	b21b      	sxth	r3, r3
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	b21b      	sxth	r3, r3
 800ec8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec90:	d001      	beq.n	800ec96 <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 800ec92:	230d      	movs	r3, #13
 800ec94:	e1da      	b.n	800f04c <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800ec96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec98:	7ddb      	ldrb	r3, [r3, #23]
 800ec9a:	021b      	lsls	r3, r3, #8
 800ec9c:	b21a      	sxth	r2, r3
 800ec9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eca0:	7d9b      	ldrb	r3, [r3, #22]
 800eca2:	b21b      	sxth	r3, r3
 800eca4:	4313      	orrs	r3, r2
 800eca6:	b21b      	sxth	r3, r3
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800ecac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d112      	bne.n	800ecd8 <find_volume+0x214>
 800ecb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecb4:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800ecb8:	061a      	lsls	r2, r3, #24
 800ecba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecbc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800ecc0:	041b      	lsls	r3, r3, #16
 800ecc2:	431a      	orrs	r2, r3
 800ecc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecc6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ecca:	021b      	lsls	r3, r3, #8
 800eccc:	4313      	orrs	r3, r2
 800ecce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ecd0:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800ecd4:	4313      	orrs	r3, r2
 800ecd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 800ecd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ecdc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800ece0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ece2:	7c1a      	ldrb	r2, [r3, #16]
 800ece4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ece6:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800ecea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecec:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d006      	beq.n	800ed02 <find_volume+0x23e>
 800ecf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecf6:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800ecfa:	2b02      	cmp	r3, #2
 800ecfc:	d001      	beq.n	800ed02 <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 800ecfe:	230d      	movs	r3, #13
 800ed00:	e1a4      	b.n	800f04c <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800ed02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed04:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800ed08:	461a      	mov	r2, r3
 800ed0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed0c:	fb02 f303 	mul.w	r3, r2, r3
 800ed10:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800ed12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed14:	7b5a      	ldrb	r2, [r3, #13]
 800ed16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed18:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800ed1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed1e:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00a      	beq.n	800ed3c <find_volume+0x278>
 800ed26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed28:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed30:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800ed34:	3b01      	subs	r3, #1
 800ed36:	4013      	ands	r3, r2
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d001      	beq.n	800ed40 <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 800ed3c:	230d      	movs	r3, #13
 800ed3e:	e185      	b.n	800f04c <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800ed40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed42:	7c9b      	ldrb	r3, [r3, #18]
 800ed44:	021b      	lsls	r3, r3, #8
 800ed46:	b21a      	sxth	r2, r3
 800ed48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed4a:	7c5b      	ldrb	r3, [r3, #17]
 800ed4c:	b21b      	sxth	r3, r3
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	b21b      	sxth	r3, r3
 800ed52:	b29a      	uxth	r2, r3
 800ed54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed56:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800ed5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed5c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800ed60:	f003 030f 	and.w	r3, r3, #15
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d004      	beq.n	800ed74 <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 800ed6a:	230d      	movs	r3, #13
 800ed6c:	e16e      	b.n	800f04c <find_volume+0x588>
 800ed6e:	bf00      	nop
 800ed70:	2000126c 	.word	0x2000126c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800ed74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed76:	7d1b      	ldrb	r3, [r3, #20]
 800ed78:	021b      	lsls	r3, r3, #8
 800ed7a:	b21a      	sxth	r2, r3
 800ed7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed7e:	7cdb      	ldrb	r3, [r3, #19]
 800ed80:	b21b      	sxth	r3, r3
 800ed82:	4313      	orrs	r3, r2
 800ed84:	b21b      	sxth	r3, r3
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800ed8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d112      	bne.n	800edb6 <find_volume+0x2f2>
 800ed90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed92:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800ed96:	061a      	lsls	r2, r3, #24
 800ed98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed9a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800ed9e:	041b      	lsls	r3, r3, #16
 800eda0:	431a      	orrs	r2, r3
 800eda2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eda4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800eda8:	021b      	lsls	r3, r3, #8
 800edaa:	4313      	orrs	r3, r2
 800edac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800edae:	f892 2020 	ldrb.w	r2, [r2, #32]
 800edb2:	4313      	orrs	r3, r2
 800edb4:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800edb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edb8:	7bdb      	ldrb	r3, [r3, #15]
 800edba:	021b      	lsls	r3, r3, #8
 800edbc:	b21a      	sxth	r2, r3
 800edbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edc0:	7b9b      	ldrb	r3, [r3, #14]
 800edc2:	b21b      	sxth	r3, r3
 800edc4:	4313      	orrs	r3, r2
 800edc6:	b21b      	sxth	r3, r3
 800edc8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800edca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d101      	bne.n	800edd4 <find_volume+0x310>
 800edd0:	230d      	movs	r3, #13
 800edd2:	e13b      	b.n	800f04c <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800edd4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800edd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800edd8:	4413      	add	r3, r2
 800edda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eddc:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 800ede0:	0912      	lsrs	r2, r2, #4
 800ede2:	b292      	uxth	r2, r2
 800ede4:	4413      	add	r3, r2
 800ede6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ede8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800edea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edec:	429a      	cmp	r2, r3
 800edee:	d201      	bcs.n	800edf4 <find_volume+0x330>
 800edf0:	230d      	movs	r3, #13
 800edf2:	e12b      	b.n	800f04c <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800edf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800edf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edf8:	1ad3      	subs	r3, r2, r3
 800edfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800edfc:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800ee00:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee04:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800ee06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d101      	bne.n	800ee10 <find_volume+0x34c>
 800ee0c:	230d      	movs	r3, #13
 800ee0e:	e11d      	b.n	800f04c <find_volume+0x588>
	fmt = FS_FAT12;
 800ee10:	2301      	movs	r3, #1
 800ee12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800ee16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee18:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	d902      	bls.n	800ee26 <find_volume+0x362>
 800ee20:	2302      	movs	r3, #2
 800ee22:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800ee26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee28:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ee2c:	4293      	cmp	r3, r2
 800ee2e:	d902      	bls.n	800ee36 <find_volume+0x372>
 800ee30:	2303      	movs	r3, #3
 800ee32:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800ee36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee38:	1c9a      	adds	r2, r3, #2
 800ee3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee3c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
	fs->volbase = bsect;								/* Volume start sector */
 800ee40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee42:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee44:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800ee48:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ee4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee4c:	441a      	add	r2, r3
 800ee4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee50:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 800ee54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee58:	441a      	add	r2, r3
 800ee5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee5c:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (fmt == FS_FAT32) {
 800ee60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ee64:	2b03      	cmp	r3, #3
 800ee66:	d121      	bne.n	800eeac <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800ee68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee6a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d001      	beq.n	800ee76 <find_volume+0x3b2>
 800ee72:	230d      	movs	r3, #13
 800ee74:	e0ea      	b.n	800f04c <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800ee76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee78:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ee7c:	061a      	lsls	r2, r3, #24
 800ee7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee80:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800ee84:	041b      	lsls	r3, r3, #16
 800ee86:	431a      	orrs	r2, r3
 800ee88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ee8e:	021b      	lsls	r3, r3, #8
 800ee90:	4313      	orrs	r3, r2
 800ee92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ee94:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 800ee98:	431a      	orrs	r2, r3
 800ee9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee9c:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800eea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800eea6:	009b      	lsls	r3, r3, #2
 800eea8:	647b      	str	r3, [r7, #68]	@ 0x44
 800eeaa:	e025      	b.n	800eef8 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800eeac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeae:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d101      	bne.n	800eeba <find_volume+0x3f6>
 800eeb6:	230d      	movs	r3, #13
 800eeb8:	e0c8      	b.n	800f04c <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800eeba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eebc:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800eec0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eec2:	441a      	add	r2, r3
 800eec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eec6:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eeca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800eece:	2b02      	cmp	r3, #2
 800eed0:	d104      	bne.n	800eedc <find_volume+0x418>
 800eed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eed4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800eed8:	005b      	lsls	r3, r3, #1
 800eeda:	e00c      	b.n	800eef6 <find_volume+0x432>
 800eedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eede:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800eee2:	4613      	mov	r3, r2
 800eee4:	005b      	lsls	r3, r3, #1
 800eee6:	4413      	add	r3, r2
 800eee8:	085a      	lsrs	r2, r3, #1
 800eeea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeec:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800eef0:	f003 0301 	and.w	r3, r3, #1
 800eef4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800eef6:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800eef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eefa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800eefe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef00:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800ef04:	0a5b      	lsrs	r3, r3, #9
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d201      	bcs.n	800ef0e <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 800ef0a:	230d      	movs	r3, #13
 800ef0c:	e09e      	b.n	800f04c <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800ef0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef10:	f04f 32ff 	mov.w	r2, #4294967295
 800ef14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800ef18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800ef1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef20:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800ef24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef26:	2280      	movs	r2, #128	@ 0x80
 800ef28:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800ef2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ef30:	2b03      	cmp	r3, #3
 800ef32:	d177      	bne.n	800f024 <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800ef34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef36:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ef3a:	021b      	lsls	r3, r3, #8
 800ef3c:	b21a      	sxth	r2, r3
 800ef3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef44:	b21b      	sxth	r3, r3
 800ef46:	4313      	orrs	r3, r2
 800ef48:	b21b      	sxth	r3, r3
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d16a      	bne.n	800f024 <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 800ef4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef50:	3301      	adds	r3, #1
 800ef52:	4619      	mov	r1, r3
 800ef54:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ef56:	f7fe f96c 	bl	800d232 <move_window>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d161      	bne.n	800f024 <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 800ef60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef62:	2200      	movs	r2, #0
 800ef64:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ef68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef6a:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 800ef6e:	021b      	lsls	r3, r3, #8
 800ef70:	b21a      	sxth	r2, r3
 800ef72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef74:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800ef78:	b21b      	sxth	r3, r3
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	b21b      	sxth	r3, r3
 800ef7e:	4a35      	ldr	r2, [pc, #212]	@ (800f054 <find_volume+0x590>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d14f      	bne.n	800f024 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800ef84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef86:	78db      	ldrb	r3, [r3, #3]
 800ef88:	061a      	lsls	r2, r3, #24
 800ef8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef8c:	789b      	ldrb	r3, [r3, #2]
 800ef8e:	041b      	lsls	r3, r3, #16
 800ef90:	431a      	orrs	r2, r3
 800ef92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef94:	785b      	ldrb	r3, [r3, #1]
 800ef96:	021b      	lsls	r3, r3, #8
 800ef98:	4313      	orrs	r3, r2
 800ef9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef9c:	7812      	ldrb	r2, [r2, #0]
 800ef9e:	4313      	orrs	r3, r2
 800efa0:	4a2d      	ldr	r2, [pc, #180]	@ (800f058 <find_volume+0x594>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d13e      	bne.n	800f024 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800efa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efa8:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 800efac:	061a      	lsls	r2, r3, #24
 800efae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efb0:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 800efb4:	041b      	lsls	r3, r3, #16
 800efb6:	431a      	orrs	r2, r3
 800efb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efba:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 800efbe:	021b      	lsls	r3, r3, #8
 800efc0:	4313      	orrs	r3, r2
 800efc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800efc4:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 800efc8:	4313      	orrs	r3, r2
 800efca:	4a24      	ldr	r2, [pc, #144]	@ (800f05c <find_volume+0x598>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d129      	bne.n	800f024 <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800efd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efd2:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800efd6:	061a      	lsls	r2, r3, #24
 800efd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efda:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 800efde:	041b      	lsls	r3, r3, #16
 800efe0:	431a      	orrs	r2, r3
 800efe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efe4:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 800efe8:	021b      	lsls	r3, r3, #8
 800efea:	4313      	orrs	r3, r2
 800efec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800efee:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800eff2:	431a      	orrs	r2, r3
 800eff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eff6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800effa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800effc:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800f000:	061a      	lsls	r2, r3, #24
 800f002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f004:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 800f008:	041b      	lsls	r3, r3, #16
 800f00a:	431a      	orrs	r2, r3
 800f00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f00e:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800f012:	021b      	lsls	r3, r3, #8
 800f014:	4313      	orrs	r3, r2
 800f016:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f018:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 800f01c:	431a      	orrs	r2, r3
 800f01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f020:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800f024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f026:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f02a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800f02e:	4b0c      	ldr	r3, [pc, #48]	@ (800f060 <find_volume+0x59c>)
 800f030:	881b      	ldrh	r3, [r3, #0]
 800f032:	3301      	adds	r3, #1
 800f034:	b29a      	uxth	r2, r3
 800f036:	4b0a      	ldr	r3, [pc, #40]	@ (800f060 <find_volume+0x59c>)
 800f038:	801a      	strh	r2, [r3, #0]
 800f03a:	4b09      	ldr	r3, [pc, #36]	@ (800f060 <find_volume+0x59c>)
 800f03c:	881a      	ldrh	r2, [r3, #0]
 800f03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f040:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800f044:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f046:	f7fe f881 	bl	800d14c <clear_lock>
#endif

	return FR_OK;
 800f04a:	2300      	movs	r3, #0
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3758      	adds	r7, #88	@ 0x58
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}
 800f054:	ffffaa55 	.word	0xffffaa55
 800f058:	41615252 	.word	0x41615252
 800f05c:	61417272 	.word	0x61417272
 800f060:	20001270 	.word	0x20001270

0800f064 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b084      	sub	sp, #16
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d022      	beq.n	800f0bc <validate+0x58>
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d01d      	beq.n	800f0bc <validate+0x58>
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f086:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d016      	beq.n	800f0bc <validate+0x58>
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f094:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d10c      	bne.n	800f0bc <validate+0x58>
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f0a8:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7fd fdc3 	bl	800cc38 <disk_status>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	f003 0301 	and.w	r3, r3, #1
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d001      	beq.n	800f0c0 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800f0bc:	2309      	movs	r3, #9
 800f0be:	e00b      	b.n	800f0d8 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7fd fecc 	bl	800ce64 <lock_fs>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d101      	bne.n	800f0d6 <validate+0x72>
 800f0d2:	230f      	movs	r3, #15
 800f0d4:	e000      	b.n	800f0d8 <validate+0x74>

	return FR_OK;
 800f0d6:	2300      	movs	r3, #0
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3710      	adds	r7, #16
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b088      	sub	sp, #32
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	60b9      	str	r1, [r7, #8]
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800f0f2:	f107 0310 	add.w	r3, r7, #16
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7ff fc36 	bl	800e968 <get_ldnumber>
 800f0fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f0fe:	69fb      	ldr	r3, [r7, #28]
 800f100:	2b00      	cmp	r3, #0
 800f102:	da01      	bge.n	800f108 <f_mount+0x28>
 800f104:	230b      	movs	r3, #11
 800f106:	e04c      	b.n	800f1a2 <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f108:	4a28      	ldr	r2, [pc, #160]	@ (800f1ac <f_mount+0xcc>)
 800f10a:	69fb      	ldr	r3, [r7, #28]
 800f10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f110:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f112:	69bb      	ldr	r3, [r7, #24]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d011      	beq.n	800f13c <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 800f118:	69b8      	ldr	r0, [r7, #24]
 800f11a:	f7fe f817 	bl	800d14c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f11e:	69bb      	ldr	r3, [r7, #24]
 800f120:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800f124:	4618      	mov	r0, r3
 800f126:	f000 ffd3 	bl	80100d0 <ff_del_syncobj>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d101      	bne.n	800f134 <f_mount+0x54>
 800f130:	2302      	movs	r3, #2
 800f132:	e036      	b.n	800f1a2 <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f134:	69bb      	ldr	r3, [r7, #24]
 800f136:	2200      	movs	r2, #0
 800f138:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d011      	beq.n	800f166 <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2200      	movs	r2, #0
 800f146:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	b2da      	uxtb	r2, r3
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 800f154:	4619      	mov	r1, r3
 800f156:	4610      	mov	r0, r2
 800f158:	f000 ff9a 	bl	8010090 <ff_cre_syncobj>
 800f15c:	4603      	mov	r3, r0
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d101      	bne.n	800f166 <f_mount+0x86>
 800f162:	2302      	movs	r3, #2
 800f164:	e01d      	b.n	800f1a2 <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f166:	68fa      	ldr	r2, [r7, #12]
 800f168:	4910      	ldr	r1, [pc, #64]	@ (800f1ac <f_mount+0xcc>)
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d002      	beq.n	800f17c <f_mount+0x9c>
 800f176:	79fb      	ldrb	r3, [r7, #7]
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d001      	beq.n	800f180 <f_mount+0xa0>
 800f17c:	2300      	movs	r3, #0
 800f17e:	e010      	b.n	800f1a2 <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800f180:	f107 0108 	add.w	r1, r7, #8
 800f184:	f107 030c 	add.w	r3, r7, #12
 800f188:	2200      	movs	r2, #0
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7ff fc9a 	bl	800eac4 <find_volume>
 800f190:	4603      	mov	r3, r0
 800f192:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	7dfa      	ldrb	r2, [r7, #23]
 800f198:	4611      	mov	r1, r2
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fd fe71 	bl	800ce82 <unlock_fs>
 800f1a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3720      	adds	r7, #32
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	2000126c 	.word	0x2000126c

0800f1b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f1bc:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f1c0:	6018      	str	r0, [r3, #0]
 800f1c2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f1c6:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 800f1ca:	6019      	str	r1, [r3, #0]
 800f1cc:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f1d0:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f1d4:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800f1d6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f1da:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d101      	bne.n	800f1e8 <f_open+0x38>
 800f1e4:	2309      	movs	r3, #9
 800f1e6:	e267      	b.n	800f6b8 <f_open+0x508>
	fp->fs = 0;			/* Clear file object */
 800f1e8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f1ec:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800f1f8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f1fc:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f200:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800f204:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 800f208:	7812      	ldrb	r2, [r2, #0]
 800f20a:	f002 021f 	and.w	r2, r2, #31
 800f20e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800f210:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f214:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	f023 0301 	bic.w	r3, r3, #1
 800f21e:	b2da      	uxtb	r2, r3
 800f220:	f107 0108 	add.w	r1, r7, #8
 800f224:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f228:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7ff fc49 	bl	800eac4 <find_volume>
 800f232:	4603      	mov	r3, r0
 800f234:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800f238:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f040 822d 	bne.w	800f69c <f_open+0x4ec>
		INIT_BUF(dj);
 800f242:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f246:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f24a:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 800f24e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 800f252:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f256:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f25a:	f107 0214 	add.w	r2, r7, #20
 800f25e:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 800f262:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f266:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f270:	4611      	mov	r1, r2
 800f272:	4618      	mov	r0, r3
 800f274:	f7ff fb0a 	bl	800e88c <follow_path>
 800f278:	4603      	mov	r3, r0
 800f27a:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
		dir = dj.dir;
 800f27e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f282:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f286:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f28a:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f28e:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f292:	2b00      	cmp	r3, #0
 800f294:	d11b      	bne.n	800f2ce <f_open+0x11e>
			if (!dir)	/* Default directory itself */
 800f296:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d103      	bne.n	800f2a6 <f_open+0xf6>
				res = FR_INVALID_NAME;
 800f29e:	2306      	movs	r3, #6
 800f2a0:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800f2a4:	e013      	b.n	800f2ce <f_open+0x11e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f2a6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f2aa:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	bf8c      	ite	hi
 800f2b4:	2301      	movhi	r3, #1
 800f2b6:	2300      	movls	r3, #0
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f2c0:	4611      	mov	r1, r2
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7fd fdfc 	bl	800cec0 <chk_lock>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f2ce:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f2d2:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	f003 031c 	and.w	r3, r3, #28
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f000 80e6 	beq.w	800f4ae <f_open+0x2fe>
			if (res != FR_OK) {					/* No file, create new */
 800f2e2:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d027      	beq.n	800f33a <f_open+0x18a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800f2ea:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f2ee:	2b04      	cmp	r3, #4
 800f2f0:	d10e      	bne.n	800f310 <f_open+0x160>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f2f2:	f7fd fe51 	bl	800cf98 <enq_lock>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d006      	beq.n	800f30a <f_open+0x15a>
 800f2fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f300:	4618      	mov	r0, r3
 800f302:	f7fe fffd 	bl	800e300 <dir_register>
 800f306:	4603      	mov	r3, r0
 800f308:	e000      	b.n	800f30c <f_open+0x15c>
 800f30a:	2312      	movs	r3, #18
 800f30c:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f310:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f314:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f318:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800f31c:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 800f320:	7812      	ldrb	r2, [r2, #0]
 800f322:	f042 0208 	orr.w	r2, r2, #8
 800f326:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800f328:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f32c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f330:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f334:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
 800f338:	e017      	b.n	800f36a <f_open+0x1ba>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f33a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f33e:	330b      	adds	r3, #11
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	f003 0311 	and.w	r3, r3, #17
 800f346:	2b00      	cmp	r3, #0
 800f348:	d003      	beq.n	800f352 <f_open+0x1a2>
					res = FR_DENIED;
 800f34a:	2307      	movs	r3, #7
 800f34c:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800f350:	e00b      	b.n	800f36a <f_open+0x1ba>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800f352:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f356:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	f003 0304 	and.w	r3, r3, #4
 800f360:	2b00      	cmp	r3, #0
 800f362:	d002      	beq.n	800f36a <f_open+0x1ba>
						res = FR_EXIST;
 800f364:	2308      	movs	r3, #8
 800f366:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f36a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f36e:	2b00      	cmp	r3, #0
 800f370:	f040 80c1 	bne.w	800f4f6 <f_open+0x346>
 800f374:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f378:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f37c:	781b      	ldrb	r3, [r3, #0]
 800f37e:	f003 0308 	and.w	r3, r3, #8
 800f382:	2b00      	cmp	r3, #0
 800f384:	f000 80b7 	beq.w	800f4f6 <f_open+0x346>
				dw = GET_FATTIME();				/* Created time */
 800f388:	f7fd fbd0 	bl	800cb2c <get_fattime>
 800f38c:	f8c7 044c 	str.w	r0, [r7, #1100]	@ 0x44c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800f390:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f394:	330e      	adds	r3, #14
 800f396:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 800f39a:	b2d2      	uxtb	r2, r2
 800f39c:	701a      	strb	r2, [r3, #0]
 800f39e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	0a1b      	lsrs	r3, r3, #8
 800f3a6:	b29a      	uxth	r2, r3
 800f3a8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f3ac:	330f      	adds	r3, #15
 800f3ae:	b2d2      	uxtb	r2, r2
 800f3b0:	701a      	strb	r2, [r3, #0]
 800f3b2:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800f3b6:	0c1a      	lsrs	r2, r3, #16
 800f3b8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f3bc:	3310      	adds	r3, #16
 800f3be:	b2d2      	uxtb	r2, r2
 800f3c0:	701a      	strb	r2, [r3, #0]
 800f3c2:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800f3c6:	0e1a      	lsrs	r2, r3, #24
 800f3c8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f3cc:	3311      	adds	r3, #17
 800f3ce:	b2d2      	uxtb	r2, r2
 800f3d0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800f3d2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f3d6:	330b      	adds	r3, #11
 800f3d8:	2200      	movs	r2, #0
 800f3da:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800f3dc:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f3e0:	331c      	adds	r3, #28
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	701a      	strb	r2, [r3, #0]
 800f3e6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f3ea:	331d      	adds	r3, #29
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	701a      	strb	r2, [r3, #0]
 800f3f0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f3f4:	331e      	adds	r3, #30
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	701a      	strb	r2, [r3, #0]
 800f3fa:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f3fe:	331f      	adds	r3, #31
 800f400:	2200      	movs	r2, #0
 800f402:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800f404:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f408:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f40c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f410:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 800f414:	4618      	mov	r0, r3
 800f416:	f7fe fccf 	bl	800ddb8 <ld_clust>
 800f41a:	f8c7 0448 	str.w	r0, [r7, #1096]	@ 0x448
				st_clust(dir, 0);				/* cluster = 0 */
 800f41e:	2100      	movs	r1, #0
 800f420:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 800f424:	f7fe fcf5 	bl	800de12 <st_clust>
				dj.fs->wflag = 1;
 800f428:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f42c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f430:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f434:	2201      	movs	r2, #1
 800f436:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800f43a:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d059      	beq.n	800f4f6 <f_open+0x346>
					dw = dj.fs->winsect;
 800f442:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f446:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f44a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f44e:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800f452:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
					res = remove_chain(dj.fs, cl);
 800f456:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f45a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f45e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f462:	f8d7 1448 	ldr.w	r1, [r7, #1096]	@ 0x448
 800f466:	4618      	mov	r0, r3
 800f468:	f7fe f9a6 	bl	800d7b8 <remove_chain>
 800f46c:	4603      	mov	r3, r0
 800f46e:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
					if (res == FR_OK) {
 800f472:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f476:	2b00      	cmp	r3, #0
 800f478:	d13d      	bne.n	800f4f6 <f_open+0x346>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800f47a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f47e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f482:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f486:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 800f48a:	3a01      	subs	r2, #1
 800f48c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
						res = move_window(dj.fs, dw);
 800f490:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f494:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f498:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f49c:	f8d7 144c 	ldr.w	r1, [r7, #1100]	@ 0x44c
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7fd fec6 	bl	800d232 <move_window>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800f4ac:	e023      	b.n	800f4f6 <f_open+0x346>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800f4ae:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d11f      	bne.n	800f4f6 <f_open+0x346>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800f4b6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f4ba:	330b      	adds	r3, #11
 800f4bc:	781b      	ldrb	r3, [r3, #0]
 800f4be:	f003 0310 	and.w	r3, r3, #16
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d003      	beq.n	800f4ce <f_open+0x31e>
					res = FR_NO_FILE;
 800f4c6:	2304      	movs	r3, #4
 800f4c8:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800f4cc:	e013      	b.n	800f4f6 <f_open+0x346>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800f4ce:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f4d2:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	f003 0302 	and.w	r3, r3, #2
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d00a      	beq.n	800f4f6 <f_open+0x346>
 800f4e0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f4e4:	330b      	adds	r3, #11
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	f003 0301 	and.w	r3, r3, #1
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d002      	beq.n	800f4f6 <f_open+0x346>
						res = FR_DENIED;
 800f4f0:	2307      	movs	r3, #7
 800f4f2:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
		}
		if (res == FR_OK) {
 800f4f6:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d151      	bne.n	800f5a2 <f_open+0x3f2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f4fe:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f502:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	f003 0308 	and.w	r3, r3, #8
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d00b      	beq.n	800f528 <f_open+0x378>
				mode |= FA__WRITTEN;
 800f510:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f514:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f518:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800f51c:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 800f520:	7812      	ldrb	r2, [r2, #0]
 800f522:	f042 0220 	orr.w	r2, r2, #32
 800f526:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800f528:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f52c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f530:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f534:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800f538:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f53c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 800f546:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f54a:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 800f554:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f558:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f55c:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	2b01      	cmp	r3, #1
 800f564:	bf8c      	ite	hi
 800f566:	2301      	movhi	r3, #1
 800f568:	2300      	movls	r3, #0
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	461a      	mov	r2, r3
 800f56e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f572:	4611      	mov	r1, r2
 800f574:	4618      	mov	r0, r3
 800f576:	f7fd fd33 	bl	800cfe0 <inc_lock>
 800f57a:	4602      	mov	r2, r0
 800f57c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f580:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800f58a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f58e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d102      	bne.n	800f5a2 <f_open+0x3f2>
 800f59c:	2302      	movs	r3, #2
 800f59e:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800f5a2:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d178      	bne.n	800f69c <f_open+0x4ec>
			fp->flag = mode;					/* File access mode */
 800f5aa:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f5ae:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800f5b8:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 800f5bc:	7812      	ldrb	r2, [r2, #0]
 800f5be:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 800f5c2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f5c6:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800f5d2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f5d6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f5da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f5de:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7fe fbe8 	bl	800ddb8 <ld_clust>
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f5ee:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800f5f8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f5fc:	331f      	adds	r3, #31
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	061a      	lsls	r2, r3, #24
 800f602:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f606:	331e      	adds	r3, #30
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	041b      	lsls	r3, r3, #16
 800f60c:	431a      	orrs	r2, r3
 800f60e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f612:	331d      	adds	r3, #29
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	021b      	lsls	r3, r3, #8
 800f618:	4313      	orrs	r3, r2
 800f61a:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 800f61e:	321c      	adds	r2, #28
 800f620:	7812      	ldrb	r2, [r2, #0]
 800f622:	431a      	orrs	r2, r3
 800f624:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f628:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 800f632:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f636:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	2200      	movs	r2, #0
 800f63e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 800f642:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f646:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	2200      	movs	r2, #0
 800f64e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800f652:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f656:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	2200      	movs	r2, #0
 800f65e:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800f662:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f666:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f66a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f66e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f672:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 800f67c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f680:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f68a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800f68e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f692:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800f69c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f6a0:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f6a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f6a8:	f897 2457 	ldrb.w	r2, [r7, #1111]	@ 0x457
 800f6ac:	4611      	mov	r1, r2
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7fd fbe7 	bl	800ce82 <unlock_fs>
 800f6b4:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f507 678b 	add.w	r7, r7, #1112	@ 0x458
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}

0800f6c2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f6c2:	b580      	push	{r7, lr}
 800f6c4:	b08a      	sub	sp, #40	@ 0x28
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	60f8      	str	r0, [r7, #12]
 800f6ca:	60b9      	str	r1, [r7, #8]
 800f6cc:	607a      	str	r2, [r7, #4]
 800f6ce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800f6da:	68f8      	ldr	r0, [r7, #12]
 800f6dc:	f7ff fcc2 	bl	800f064 <validate>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800f6e4:	7dfb      	ldrb	r3, [r7, #23]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d009      	beq.n	800f6fe <f_write+0x3c>
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f6f0:	7dfa      	ldrb	r2, [r7, #23]
 800f6f2:	4611      	mov	r1, r2
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7fd fbc4 	bl	800ce82 <unlock_fs>
 800f6fa:	7dfb      	ldrb	r3, [r7, #23]
 800f6fc:	e1d4      	b.n	800faa8 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00d      	beq.n	800f724 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 800f714:	4619      	mov	r1, r3
 800f716:	4610      	mov	r0, r2
 800f718:	f7fd fbb3 	bl	800ce82 <unlock_fs>
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 800f722:	e1c1      	b.n	800faa8 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800f72a:	f003 0302 	and.w	r3, r3, #2
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d108      	bne.n	800f744 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f738:	2107      	movs	r1, #7
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fd fba1 	bl	800ce82 <unlock_fs>
 800f740:	2307      	movs	r3, #7
 800f742:	e1b1      	b.n	800faa8 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	441a      	add	r2, r3
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800f754:	429a      	cmp	r2, r3
 800f756:	f080 8182 	bcs.w	800fa5e <f_write+0x39c>
 800f75a:	2300      	movs	r3, #0
 800f75c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800f75e:	e17e      	b.n	800fa5e <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800f766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	f040 813e 	bne.w	800f9ec <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800f776:	0a5b      	lsrs	r3, r3, #9
 800f778:	b2da      	uxtb	r2, r3
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f780:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f784:	3b01      	subs	r3, #1
 800f786:	b2db      	uxtb	r3, r3
 800f788:	4013      	ands	r3, r2
 800f78a:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800f78c:	7dbb      	ldrb	r3, [r7, #22]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d15f      	bne.n	800f852 <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d10f      	bne.n	800f7bc <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f7a2:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800f7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d121      	bne.n	800f7ee <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f7b0:	2100      	movs	r1, #0
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7fe f85a 	bl	800d86c <create_chain>
 800f7b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800f7ba:	e018      	b.n	800f7ee <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d008      	beq.n	800f7d8 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	68f8      	ldr	r0, [r7, #12]
 800f7d0:	f7fe f8e9 	bl	800d9a6 <clmt_clust>
 800f7d4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f7d6:	e00a      	b.n	800f7ee <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	4610      	mov	r0, r2
 800f7e8:	f7fe f840 	bl	800d86c <create_chain>
 800f7ec:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	f000 8139 	beq.w	800fa68 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800f7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f8:	2b01      	cmp	r3, #1
 800f7fa:	d10c      	bne.n	800f816 <f_write+0x154>
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	2202      	movs	r2, #2
 800f800:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f80a:	2102      	movs	r1, #2
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7fd fb38 	bl	800ce82 <unlock_fs>
 800f812:	2302      	movs	r3, #2
 800f814:	e148      	b.n	800faa8 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800f816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f81c:	d10c      	bne.n	800f838 <f_write+0x176>
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2201      	movs	r2, #1
 800f822:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f82c:	2101      	movs	r1, #1
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fd fb27 	bl	800ce82 <unlock_fs>
 800f834:	2301      	movs	r3, #1
 800f836:	e137      	b.n	800faa8 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f83c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f846:	2b00      	cmp	r3, #0
 800f848:	d103      	bne.n	800f852 <f_write+0x190>
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f84e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800f858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d024      	beq.n	800f8aa <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f866:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800f86a:	68f9      	ldr	r1, [r7, #12]
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800f872:	2301      	movs	r3, #1
 800f874:	f7fd fa40 	bl	800ccf8 <disk_write>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d00c      	beq.n	800f898 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2201      	movs	r2, #1
 800f882:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f88c:	2101      	movs	r1, #1
 800f88e:	4618      	mov	r0, r3
 800f890:	f7fd faf7 	bl	800ce82 <unlock_fs>
 800f894:	2301      	movs	r3, #1
 800f896:	e107      	b.n	800faa8 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800f89e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f8a2:	b2da      	uxtb	r2, r3
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	4610      	mov	r0, r2
 800f8ba:	f7fd fd95 	bl	800d3e8 <clust2sect>
 800f8be:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d10c      	bne.n	800f8e0 <f_write+0x21e>
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2202      	movs	r2, #2
 800f8ca:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f8d4:	2102      	movs	r1, #2
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7fd fad3 	bl	800ce82 <unlock_fs>
 800f8dc:	2302      	movs	r3, #2
 800f8de:	e0e3      	b.n	800faa8 <f_write+0x3e6>
			sect += csect;
 800f8e0:	7dbb      	ldrb	r3, [r7, #22]
 800f8e2:	693a      	ldr	r2, [r7, #16]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	0a5b      	lsrs	r3, r3, #9
 800f8ec:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f8ee:	69fb      	ldr	r3, [r7, #28]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d04f      	beq.n	800f994 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800f8f4:	7dba      	ldrb	r2, [r7, #22]
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	4413      	add	r3, r2
 800f8fa:	68fa      	ldr	r2, [r7, #12]
 800f8fc:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800f900:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800f904:	4293      	cmp	r3, r2
 800f906:	d908      	bls.n	800f91a <f_write+0x258>
					cc = fp->fs->csize - csect;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f90e:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f912:	461a      	mov	r2, r3
 800f914:	7dbb      	ldrb	r3, [r7, #22]
 800f916:	1ad3      	subs	r3, r2, r3
 800f918:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f920:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	693a      	ldr	r2, [r7, #16]
 800f928:	69b9      	ldr	r1, [r7, #24]
 800f92a:	f7fd f9e5 	bl	800ccf8 <disk_write>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d00c      	beq.n	800f94e <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2201      	movs	r2, #1
 800f938:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f942:	2101      	movs	r1, #1
 800f944:	4618      	mov	r0, r3
 800f946:	f7fd fa9c 	bl	800ce82 <unlock_fs>
 800f94a:	2301      	movs	r3, #1
 800f94c:	e0ac      	b.n	800faa8 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800f954:	693b      	ldr	r3, [r7, #16]
 800f956:	1ad3      	subs	r3, r2, r3
 800f958:	69fa      	ldr	r2, [r7, #28]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d916      	bls.n	800f98c <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800f95e:	68f8      	ldr	r0, [r7, #12]
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	1ad3      	subs	r3, r2, r3
 800f96a:	025b      	lsls	r3, r3, #9
 800f96c:	69ba      	ldr	r2, [r7, #24]
 800f96e:	4413      	add	r3, r2
 800f970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f974:	4619      	mov	r1, r3
 800f976:	f7fd f9fd 	bl	800cd74 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800f980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f984:	b2da      	uxtb	r2, r3
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800f98c:	69fb      	ldr	r3, [r7, #28]
 800f98e:	025b      	lsls	r3, r3, #9
 800f990:	623b      	str	r3, [r7, #32]
				continue;
 800f992:	e04e      	b.n	800fa32 <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f99a:	693a      	ldr	r2, [r7, #16]
 800f99c:	429a      	cmp	r2, r3
 800f99e:	d021      	beq.n	800f9e4 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d219      	bcs.n	800f9e4 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f9b6:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800f9ba:	68f9      	ldr	r1, [r7, #12]
 800f9bc:	2301      	movs	r3, #1
 800f9be:	693a      	ldr	r2, [r7, #16]
 800f9c0:	f7fd f97a 	bl	800ccb8 <disk_read>
 800f9c4:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d00c      	beq.n	800f9e4 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2201      	movs	r2, #1
 800f9ce:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f9d8:	2101      	movs	r1, #1
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fd fa51 	bl	800ce82 <unlock_fs>
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	e061      	b.n	800faa8 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	693a      	ldr	r2, [r7, #16]
 800f9e8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800f9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9f6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f9fa:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800f9fc:	6a3a      	ldr	r2, [r7, #32]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d901      	bls.n	800fa08 <f_write+0x346>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800fa0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa12:	68fa      	ldr	r2, [r7, #12]
 800fa14:	4413      	add	r3, r2
 800fa16:	6a3a      	ldr	r2, [r7, #32]
 800fa18:	69b9      	ldr	r1, [r7, #24]
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7fd f9aa 	bl	800cd74 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800fa26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa2a:	b2da      	uxtb	r2, r3
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800fa32:	69ba      	ldr	r2, [r7, #24]
 800fa34:	6a3b      	ldr	r3, [r7, #32]
 800fa36:	4413      	add	r3, r2
 800fa38:	61bb      	str	r3, [r7, #24]
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fa40:	6a3b      	ldr	r3, [r7, #32]
 800fa42:	441a      	add	r2, r3
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	6a3b      	ldr	r3, [r7, #32]
 800fa50:	441a      	add	r2, r3
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	601a      	str	r2, [r3, #0]
 800fa56:	687a      	ldr	r2, [r7, #4]
 800fa58:	6a3b      	ldr	r3, [r7, #32]
 800fa5a:	1ad3      	subs	r3, r2, r3
 800fa5c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	f47f ae7d 	bne.w	800f760 <f_write+0x9e>
 800fa66:	e000      	b.n	800fa6a <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fa68:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d905      	bls.n	800fa86 <f_write+0x3c4>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800fa8c:	f043 0320 	orr.w	r3, r3, #32
 800fa90:	b2da      	uxtb	r2, r3
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fa9e:	2100      	movs	r1, #0
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7fd f9ee 	bl	800ce82 <unlock_fs>
 800faa6:	2300      	movs	r3, #0
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3728      	adds	r7, #40	@ 0x28
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b086      	sub	sp, #24
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f7ff fad3 	bl	800f064 <validate>
 800fabe:	4603      	mov	r3, r0
 800fac0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fac2:	7dfb      	ldrb	r3, [r7, #23]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	f040 80af 	bne.w	800fc28 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800fad0:	f003 0320 	and.w	r3, r3, #32
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f000 80a7 	beq.w	800fc28 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800fae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d020      	beq.n	800fb2a <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800faee:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800faf2:	6879      	ldr	r1, [r7, #4]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800fafa:	2301      	movs	r3, #1
 800fafc:	f7fd f8fc 	bl	800ccf8 <disk_write>
 800fb00:	4603      	mov	r3, r0
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d008      	beq.n	800fb18 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fb0c:	2101      	movs	r1, #1
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7fd f9b7 	bl	800ce82 <unlock_fs>
 800fb14:	2301      	movs	r3, #1
 800fb16:	e090      	b.n	800fc3a <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800fb1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb22:	b2da      	uxtb	r2, r3
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800fb36:	4619      	mov	r1, r3
 800fb38:	4610      	mov	r0, r2
 800fb3a:	f7fd fb7a 	bl	800d232 <move_window>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800fb42:	7dfb      	ldrb	r3, [r7, #23]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d16f      	bne.n	800fc28 <f_sync+0x178>
				dir = fp->dir_ptr;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800fb4e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	330b      	adds	r3, #11
 800fb54:	781a      	ldrb	r2, [r3, #0]
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	330b      	adds	r3, #11
 800fb5a:	f042 0220 	orr.w	r2, r2, #32
 800fb5e:	b2d2      	uxtb	r2, r2
 800fb60:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	331c      	adds	r3, #28
 800fb6c:	b2d2      	uxtb	r2, r2
 800fb6e:	701a      	strb	r2, [r3, #0]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800fb76:	b29b      	uxth	r3, r3
 800fb78:	0a1b      	lsrs	r3, r3, #8
 800fb7a:	b29a      	uxth	r2, r3
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	331d      	adds	r3, #29
 800fb80:	b2d2      	uxtb	r2, r2
 800fb82:	701a      	strb	r2, [r3, #0]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800fb8a:	0c1a      	lsrs	r2, r3, #16
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	331e      	adds	r3, #30
 800fb90:	b2d2      	uxtb	r2, r2
 800fb92:	701a      	strb	r2, [r3, #0]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800fb9a:	0e1a      	lsrs	r2, r3, #24
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	331f      	adds	r3, #31
 800fba0:	b2d2      	uxtb	r2, r2
 800fba2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fbaa:	4619      	mov	r1, r3
 800fbac:	6938      	ldr	r0, [r7, #16]
 800fbae:	f7fe f930 	bl	800de12 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800fbb2:	f7fc ffbb 	bl	800cb2c <get_fattime>
 800fbb6:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	3316      	adds	r3, #22
 800fbbc:	68fa      	ldr	r2, [r7, #12]
 800fbbe:	b2d2      	uxtb	r2, r2
 800fbc0:	701a      	strb	r2, [r3, #0]
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	b29b      	uxth	r3, r3
 800fbc6:	0a1b      	lsrs	r3, r3, #8
 800fbc8:	b29a      	uxth	r2, r3
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	3317      	adds	r3, #23
 800fbce:	b2d2      	uxtb	r2, r2
 800fbd0:	701a      	strb	r2, [r3, #0]
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	0c1a      	lsrs	r2, r3, #16
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	3318      	adds	r3, #24
 800fbda:	b2d2      	uxtb	r2, r2
 800fbdc:	701a      	strb	r2, [r3, #0]
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	0e1a      	lsrs	r2, r3, #24
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	3319      	adds	r3, #25
 800fbe6:	b2d2      	uxtb	r2, r2
 800fbe8:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	3312      	adds	r3, #18
 800fbee:	2200      	movs	r2, #0
 800fbf0:	701a      	strb	r2, [r3, #0]
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	3313      	adds	r3, #19
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800fc00:	f023 0320 	bic.w	r3, r3, #32
 800fc04:	b2da      	uxtb	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fc12:	2201      	movs	r2, #1
 800fc14:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fd fb35 	bl	800d28e <sync_fs>
 800fc24:	4603      	mov	r3, r0
 800fc26:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fc2e:	7dfa      	ldrb	r2, [r7, #23]
 800fc30:	4611      	mov	r1, r2
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fd f925 	bl	800ce82 <unlock_fs>
 800fc38:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3718      	adds	r7, #24
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}

0800fc42 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800fc42:	b580      	push	{r7, lr}
 800fc44:	b084      	sub	sp, #16
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	6078      	str	r0, [r7, #4]
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800fc4e:	78fb      	ldrb	r3, [r7, #3]
 800fc50:	2b0a      	cmp	r3, #10
 800fc52:	d103      	bne.n	800fc5c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800fc54:	210d      	movs	r1, #13
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f7ff fff3 	bl	800fc42 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	db25      	blt.n	800fcb4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	1c5a      	adds	r2, r3, #1
 800fc6c:	60fa      	str	r2, [r7, #12]
 800fc6e:	687a      	ldr	r2, [r7, #4]
 800fc70:	4413      	add	r3, r2
 800fc72:	78fa      	ldrb	r2, [r7, #3]
 800fc74:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	2b3c      	cmp	r3, #60	@ 0x3c
 800fc7a:	dd12      	ble.n	800fca2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6818      	ldr	r0, [r3, #0]
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f103 010c 	add.w	r1, r3, #12
 800fc86:	68fa      	ldr	r2, [r7, #12]
 800fc88:	f107 0308 	add.w	r3, r7, #8
 800fc8c:	f7ff fd19 	bl	800f6c2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800fc90:	68ba      	ldr	r2, [r7, #8]
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d101      	bne.n	800fc9c <putc_bfd+0x5a>
 800fc98:	2300      	movs	r3, #0
 800fc9a:	e001      	b.n	800fca0 <putc_bfd+0x5e>
 800fc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800fca0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	68fa      	ldr	r2, [r7, #12]
 800fca6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	689b      	ldr	r3, [r3, #8]
 800fcac:	1c5a      	adds	r2, r3, #1
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	609a      	str	r2, [r3, #8]
 800fcb2:	e000      	b.n	800fcb6 <putc_bfd+0x74>
	if (i < 0) return;
 800fcb4:	bf00      	nop
}
 800fcb6:	3710      	adds	r7, #16
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800fcbc:	b590      	push	{r4, r7, lr}
 800fcbe:	b097      	sub	sp, #92	@ 0x5c
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800fcca:	2300      	movs	r3, #0
 800fccc:	613b      	str	r3, [r7, #16]
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800fcd2:	e009      	b.n	800fce8 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	1c5a      	adds	r2, r3, #1
 800fcd8:	607a      	str	r2, [r7, #4]
 800fcda:	781a      	ldrb	r2, [r3, #0]
 800fcdc:	f107 030c 	add.w	r3, r7, #12
 800fce0:	4611      	mov	r1, r2
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7ff ffad 	bl	800fc42 <putc_bfd>
	while (*str)			/* Put the string */
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d1f1      	bne.n	800fcd4 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	db15      	blt.n	800fd22 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800fcf6:	68f8      	ldr	r0, [r7, #12]
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	461c      	mov	r4, r3
 800fcfc:	f107 0208 	add.w	r2, r7, #8
 800fd00:	f107 030c 	add.w	r3, r7, #12
 800fd04:	f103 010c 	add.w	r1, r3, #12
 800fd08:	4613      	mov	r3, r2
 800fd0a:	4622      	mov	r2, r4
 800fd0c:	f7ff fcd9 	bl	800f6c2 <f_write>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d105      	bne.n	800fd22 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	68ba      	ldr	r2, [r7, #8]
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	d101      	bne.n	800fd22 <f_puts+0x66>
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	e001      	b.n	800fd26 <f_puts+0x6a>
	return EOF;
 800fd22:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	375c      	adds	r7, #92	@ 0x5c
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd90      	pop	{r4, r7, pc}
	...

0800fd30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fd30:	b480      	push	{r7}
 800fd32:	b087      	sub	sp, #28
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	60f8      	str	r0, [r7, #12]
 800fd38:	60b9      	str	r1, [r7, #8]
 800fd3a:	4613      	mov	r3, r2
 800fd3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fd3e:	2301      	movs	r3, #1
 800fd40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fd42:	2300      	movs	r3, #0
 800fd44:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800fd46:	4b1e      	ldr	r3, [pc, #120]	@ (800fdc0 <FATFS_LinkDriverEx+0x90>)
 800fd48:	7a5b      	ldrb	r3, [r3, #9]
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	2b01      	cmp	r3, #1
 800fd4e:	d831      	bhi.n	800fdb4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fd50:	4b1b      	ldr	r3, [pc, #108]	@ (800fdc0 <FATFS_LinkDriverEx+0x90>)
 800fd52:	7a5b      	ldrb	r3, [r3, #9]
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	461a      	mov	r2, r3
 800fd58:	4b19      	ldr	r3, [pc, #100]	@ (800fdc0 <FATFS_LinkDriverEx+0x90>)
 800fd5a:	2100      	movs	r1, #0
 800fd5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800fd5e:	4b18      	ldr	r3, [pc, #96]	@ (800fdc0 <FATFS_LinkDriverEx+0x90>)
 800fd60:	7a5b      	ldrb	r3, [r3, #9]
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	4a16      	ldr	r2, [pc, #88]	@ (800fdc0 <FATFS_LinkDriverEx+0x90>)
 800fd66:	009b      	lsls	r3, r3, #2
 800fd68:	4413      	add	r3, r2
 800fd6a:	68fa      	ldr	r2, [r7, #12]
 800fd6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800fd6e:	4b14      	ldr	r3, [pc, #80]	@ (800fdc0 <FATFS_LinkDriverEx+0x90>)
 800fd70:	7a5b      	ldrb	r3, [r3, #9]
 800fd72:	b2db      	uxtb	r3, r3
 800fd74:	461a      	mov	r2, r3
 800fd76:	4b12      	ldr	r3, [pc, #72]	@ (800fdc0 <FATFS_LinkDriverEx+0x90>)
 800fd78:	4413      	add	r3, r2
 800fd7a:	79fa      	ldrb	r2, [r7, #7]
 800fd7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fd7e:	4b10      	ldr	r3, [pc, #64]	@ (800fdc0 <FATFS_LinkDriverEx+0x90>)
 800fd80:	7a5b      	ldrb	r3, [r3, #9]
 800fd82:	b2db      	uxtb	r3, r3
 800fd84:	1c5a      	adds	r2, r3, #1
 800fd86:	b2d1      	uxtb	r1, r2
 800fd88:	4a0d      	ldr	r2, [pc, #52]	@ (800fdc0 <FATFS_LinkDriverEx+0x90>)
 800fd8a:	7251      	strb	r1, [r2, #9]
 800fd8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fd8e:	7dbb      	ldrb	r3, [r7, #22]
 800fd90:	3330      	adds	r3, #48	@ 0x30
 800fd92:	b2da      	uxtb	r2, r3
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	3301      	adds	r3, #1
 800fd9c:	223a      	movs	r2, #58	@ 0x3a
 800fd9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	3302      	adds	r3, #2
 800fda4:	222f      	movs	r2, #47	@ 0x2f
 800fda6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	3303      	adds	r3, #3
 800fdac:	2200      	movs	r2, #0
 800fdae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800fdb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	371c      	adds	r7, #28
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bc80      	pop	{r7}
 800fdbe:	4770      	bx	lr
 800fdc0:	2000128c 	.word	0x2000128c

0800fdc4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b082      	sub	sp, #8
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fdce:	2200      	movs	r2, #0
 800fdd0:	6839      	ldr	r1, [r7, #0]
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f7ff ffac 	bl	800fd30 <FATFS_LinkDriverEx>
 800fdd8:	4603      	mov	r3, r0
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3708      	adds	r7, #8
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
	...

0800fde4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	4603      	mov	r3, r0
 800fdec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fdee:	4b0b      	ldr	r3, [pc, #44]	@ (800fe1c <SD_initialize+0x38>)
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800fdf4:	f7fc fea2 	bl	800cb3c <BSP_SD_Init>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d107      	bne.n	800fe0e <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fdfe:	4b07      	ldr	r3, [pc, #28]	@ (800fe1c <SD_initialize+0x38>)
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	f023 0301 	bic.w	r3, r3, #1
 800fe08:	b2da      	uxtb	r2, r3
 800fe0a:	4b04      	ldr	r3, [pc, #16]	@ (800fe1c <SD_initialize+0x38>)
 800fe0c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fe0e:	4b03      	ldr	r3, [pc, #12]	@ (800fe1c <SD_initialize+0x38>)
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	b2db      	uxtb	r3, r3
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	2000003d 	.word	0x2000003d

0800fe20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	4603      	mov	r3, r0
 800fe28:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fe2a:	4b0b      	ldr	r3, [pc, #44]	@ (800fe58 <SD_status+0x38>)
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fe30:	f7fc fed8 	bl	800cbe4 <BSP_SD_GetCardState>
 800fe34:	4603      	mov	r3, r0
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d107      	bne.n	800fe4a <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fe3a:	4b07      	ldr	r3, [pc, #28]	@ (800fe58 <SD_status+0x38>)
 800fe3c:	781b      	ldrb	r3, [r3, #0]
 800fe3e:	b2db      	uxtb	r3, r3
 800fe40:	f023 0301 	bic.w	r3, r3, #1
 800fe44:	b2da      	uxtb	r2, r3
 800fe46:	4b04      	ldr	r3, [pc, #16]	@ (800fe58 <SD_status+0x38>)
 800fe48:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800fe4a:	4b03      	ldr	r3, [pc, #12]	@ (800fe58 <SD_status+0x38>)
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	b2db      	uxtb	r3, r3
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3708      	adds	r7, #8
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	2000003d 	.word	0x2000003d

0800fe5c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b086      	sub	sp, #24
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60b9      	str	r1, [r7, #8]
 800fe64:	607a      	str	r2, [r7, #4]
 800fe66:	603b      	str	r3, [r7, #0]
 800fe68:	4603      	mov	r3, r0
 800fe6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800fe70:	4b0f      	ldr	r3, [pc, #60]	@ (800feb0 <SD_read+0x54>)
 800fe72:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800fe74:	4b0f      	ldr	r3, [pc, #60]	@ (800feb4 <SD_read+0x58>)
 800fe76:	683a      	ldr	r2, [r7, #0]
 800fe78:	6879      	ldr	r1, [r7, #4]
 800fe7a:	68b8      	ldr	r0, [r7, #8]
 800fe7c:	f7fc fe76 	bl	800cb6c <BSP_SD_ReadBlocks>
 800fe80:	4603      	mov	r3, r0
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d10e      	bne.n	800fea4 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800fe86:	e006      	b.n	800fe96 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	1e5a      	subs	r2, r3, #1
 800fe8c:	613a      	str	r2, [r7, #16]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d101      	bne.n	800fe96 <SD_read+0x3a>
      {
        return RES_ERROR;
 800fe92:	2301      	movs	r3, #1
 800fe94:	e007      	b.n	800fea6 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800fe96:	f7fc fea5 	bl	800cbe4 <BSP_SD_GetCardState>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d1f3      	bne.n	800fe88 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800fea0:	2300      	movs	r3, #0
 800fea2:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800fea4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3718      	adds	r7, #24
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	000186a0 	.word	0x000186a0
 800feb4:	05f5e100 	.word	0x05f5e100

0800feb8 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b086      	sub	sp, #24
 800febc:	af00      	add	r7, sp, #0
 800febe:	60b9      	str	r1, [r7, #8]
 800fec0:	607a      	str	r2, [r7, #4]
 800fec2:	603b      	str	r3, [r7, #0]
 800fec4:	4603      	mov	r3, r0
 800fec6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fec8:	2301      	movs	r3, #1
 800feca:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800fecc:	4b0f      	ldr	r3, [pc, #60]	@ (800ff0c <SD_write+0x54>)
 800fece:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800fed0:	4b0f      	ldr	r3, [pc, #60]	@ (800ff10 <SD_write+0x58>)
 800fed2:	683a      	ldr	r2, [r7, #0]
 800fed4:	6879      	ldr	r1, [r7, #4]
 800fed6:	68b8      	ldr	r0, [r7, #8]
 800fed8:	f7fc fe66 	bl	800cba8 <BSP_SD_WriteBlocks>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d10e      	bne.n	800ff00 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800fee2:	e006      	b.n	800fef2 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	1e5a      	subs	r2, r3, #1
 800fee8:	613a      	str	r2, [r7, #16]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d101      	bne.n	800fef2 <SD_write+0x3a>
      {
        return RES_ERROR;
 800feee:	2301      	movs	r3, #1
 800fef0:	e007      	b.n	800ff02 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800fef2:	f7fc fe77 	bl	800cbe4 <BSP_SD_GetCardState>
 800fef6:	4603      	mov	r3, r0
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d1f3      	bne.n	800fee4 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800fefc:	2300      	movs	r3, #0
 800fefe:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800ff00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3718      	adds	r7, #24
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	000186a0 	.word	0x000186a0
 800ff10:	05f5e100 	.word	0x05f5e100

0800ff14 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b08c      	sub	sp, #48	@ 0x30
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	603a      	str	r2, [r7, #0]
 800ff1e:	71fb      	strb	r3, [r7, #7]
 800ff20:	460b      	mov	r3, r1
 800ff22:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ff24:	2301      	movs	r3, #1
 800ff26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ff2a:	4b24      	ldr	r3, [pc, #144]	@ (800ffbc <SD_ioctl+0xa8>)
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	b2db      	uxtb	r3, r3
 800ff30:	f003 0301 	and.w	r3, r3, #1
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d001      	beq.n	800ff3c <SD_ioctl+0x28>
 800ff38:	2303      	movs	r3, #3
 800ff3a:	e03b      	b.n	800ffb4 <SD_ioctl+0xa0>
  
  switch (cmd)
 800ff3c:	79bb      	ldrb	r3, [r7, #6]
 800ff3e:	2b03      	cmp	r3, #3
 800ff40:	d833      	bhi.n	800ffaa <SD_ioctl+0x96>
 800ff42:	a201      	add	r2, pc, #4	@ (adr r2, 800ff48 <SD_ioctl+0x34>)
 800ff44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff48:	0800ff59 	.word	0x0800ff59
 800ff4c:	0800ff61 	.word	0x0800ff61
 800ff50:	0800ff79 	.word	0x0800ff79
 800ff54:	0800ff93 	.word	0x0800ff93
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ff5e:	e027      	b.n	800ffb0 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff60:	f107 030c 	add.w	r3, r7, #12
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7fc fe4d 	bl	800cc04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ff6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ff70:	2300      	movs	r3, #0
 800ff72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ff76:	e01b      	b.n	800ffb0 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff78:	f107 030c 	add.w	r3, r7, #12
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7fc fe41 	bl	800cc04 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ff82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff84:	b29a      	uxth	r2, r3
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ff90:	e00e      	b.n	800ffb0 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff92:	f107 030c 	add.w	r3, r7, #12
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fc fe34 	bl	800cc04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800ff9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ffa8:	e002      	b.n	800ffb0 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800ffaa:	2304      	movs	r3, #4
 800ffac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 800ffb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3730      	adds	r7, #48	@ 0x30
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}
 800ffbc:	2000003d 	.word	0x2000003d

0800ffc0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b085      	sub	sp, #20
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	6039      	str	r1, [r7, #0]
 800ffca:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ffcc:	88fb      	ldrh	r3, [r7, #6]
 800ffce:	2b7f      	cmp	r3, #127	@ 0x7f
 800ffd0:	d802      	bhi.n	800ffd8 <ff_convert+0x18>
		c = chr;
 800ffd2:	88fb      	ldrh	r3, [r7, #6]
 800ffd4:	81fb      	strh	r3, [r7, #14]
 800ffd6:	e025      	b.n	8010024 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d00b      	beq.n	800fff6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ffde:	88fb      	ldrh	r3, [r7, #6]
 800ffe0:	2bff      	cmp	r3, #255	@ 0xff
 800ffe2:	d805      	bhi.n	800fff0 <ff_convert+0x30>
 800ffe4:	88fb      	ldrh	r3, [r7, #6]
 800ffe6:	3b80      	subs	r3, #128	@ 0x80
 800ffe8:	4a11      	ldr	r2, [pc, #68]	@ (8010030 <ff_convert+0x70>)
 800ffea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ffee:	e000      	b.n	800fff2 <ff_convert+0x32>
 800fff0:	2300      	movs	r3, #0
 800fff2:	81fb      	strh	r3, [r7, #14]
 800fff4:	e016      	b.n	8010024 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800fff6:	2300      	movs	r3, #0
 800fff8:	81fb      	strh	r3, [r7, #14]
 800fffa:	e009      	b.n	8010010 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fffc:	89fb      	ldrh	r3, [r7, #14]
 800fffe:	4a0c      	ldr	r2, [pc, #48]	@ (8010030 <ff_convert+0x70>)
 8010000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010004:	88fa      	ldrh	r2, [r7, #6]
 8010006:	429a      	cmp	r2, r3
 8010008:	d006      	beq.n	8010018 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801000a:	89fb      	ldrh	r3, [r7, #14]
 801000c:	3301      	adds	r3, #1
 801000e:	81fb      	strh	r3, [r7, #14]
 8010010:	89fb      	ldrh	r3, [r7, #14]
 8010012:	2b7f      	cmp	r3, #127	@ 0x7f
 8010014:	d9f2      	bls.n	800fffc <ff_convert+0x3c>
 8010016:	e000      	b.n	801001a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010018:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801001a:	89fb      	ldrh	r3, [r7, #14]
 801001c:	3380      	adds	r3, #128	@ 0x80
 801001e:	b29b      	uxth	r3, r3
 8010020:	b2db      	uxtb	r3, r3
 8010022:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010024:	89fb      	ldrh	r3, [r7, #14]
}
 8010026:	4618      	mov	r0, r3
 8010028:	3714      	adds	r7, #20
 801002a:	46bd      	mov	sp, r7
 801002c:	bc80      	pop	{r7}
 801002e:	4770      	bx	lr
 8010030:	0801328c 	.word	0x0801328c

08010034 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8010034:	b480      	push	{r7}
 8010036:	b085      	sub	sp, #20
 8010038:	af00      	add	r7, sp, #0
 801003a:	4603      	mov	r3, r0
 801003c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 801003e:	2300      	movs	r3, #0
 8010040:	60fb      	str	r3, [r7, #12]
 8010042:	e002      	b.n	801004a <ff_wtoupper+0x16>
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	3301      	adds	r3, #1
 8010048:	60fb      	str	r3, [r7, #12]
 801004a:	4a0f      	ldr	r2, [pc, #60]	@ (8010088 <ff_wtoupper+0x54>)
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d006      	beq.n	8010064 <ff_wtoupper+0x30>
 8010056:	4a0c      	ldr	r2, [pc, #48]	@ (8010088 <ff_wtoupper+0x54>)
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801005e:	88fa      	ldrh	r2, [r7, #6]
 8010060:	429a      	cmp	r2, r3
 8010062:	d1ef      	bne.n	8010044 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8010064:	4a08      	ldr	r2, [pc, #32]	@ (8010088 <ff_wtoupper+0x54>)
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d004      	beq.n	801007a <ff_wtoupper+0x46>
 8010070:	4a06      	ldr	r2, [pc, #24]	@ (801008c <ff_wtoupper+0x58>)
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010078:	e000      	b.n	801007c <ff_wtoupper+0x48>
 801007a:	88fb      	ldrh	r3, [r7, #6]
}
 801007c:	4618      	mov	r0, r3
 801007e:	3714      	adds	r7, #20
 8010080:	46bd      	mov	sp, r7
 8010082:	bc80      	pop	{r7}
 8010084:	4770      	bx	lr
 8010086:	bf00      	nop
 8010088:	0801338c 	.word	0x0801338c
 801008c:	0801356c 	.word	0x0801356c

08010090 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b086      	sub	sp, #24
 8010094:	af00      	add	r7, sp, #0
 8010096:	4603      	mov	r3, r0
 8010098:	6039      	str	r1, [r7, #0]
 801009a:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 801009c:	2300      	movs	r3, #0
 801009e:	60fb      	str	r3, [r7, #12]
 80100a0:	2300      	movs	r3, #0
 80100a2:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 80100a4:	f107 030c 	add.w	r3, r7, #12
 80100a8:	2101      	movs	r1, #1
 80100aa:	4618      	mov	r0, r3
 80100ac:	f000 f8cb 	bl	8010246 <osSemaphoreCreate>
 80100b0:	4602      	mov	r2, r0
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	bf14      	ite	ne
 80100be:	2301      	movne	r3, #1
 80100c0:	2300      	moveq	r3, #0
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	617b      	str	r3, [r7, #20]
  
  return ret;
 80100c6:	697b      	ldr	r3, [r7, #20]
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3718      	adds	r7, #24
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b082      	sub	sp, #8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 f96b 	bl	80103b4 <osSemaphoreDelete>
  return 1;
 80100de:	2301      	movs	r3, #1
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3708      	adds	r7, #8
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80100f0:	2300      	movs	r3, #0
 80100f2:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80100f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f000 f8d7 	bl	80102ac <osSemaphoreWait>
 80100fe:	4603      	mov	r3, r0
 8010100:	2b00      	cmp	r3, #0
 8010102:	d101      	bne.n	8010108 <ff_req_grant+0x20>
  {
    ret = 1;
 8010104:	2301      	movs	r3, #1
 8010106:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8010108:	68fb      	ldr	r3, [r7, #12]
}
 801010a:	4618      	mov	r0, r3
 801010c:	3710      	adds	r7, #16
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}

08010112 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010112:	b580      	push	{r7, lr}
 8010114:	b082      	sub	sp, #8
 8010116:	af00      	add	r7, sp, #0
 8010118:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f000 f914 	bl	8010348 <osSemaphoreRelease>
}
 8010120:	bf00      	nop
 8010122:	3708      	adds	r7, #8
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}

08010128 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010128:	b480      	push	{r7}
 801012a:	b085      	sub	sp, #20
 801012c:	af00      	add	r7, sp, #0
 801012e:	4603      	mov	r3, r0
 8010130:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010132:	2300      	movs	r3, #0
 8010134:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801013a:	2b84      	cmp	r3, #132	@ 0x84
 801013c:	d005      	beq.n	801014a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801013e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	4413      	add	r3, r2
 8010146:	3303      	adds	r3, #3
 8010148:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801014a:	68fb      	ldr	r3, [r7, #12]
}
 801014c:	4618      	mov	r0, r3
 801014e:	3714      	adds	r7, #20
 8010150:	46bd      	mov	sp, r7
 8010152:	bc80      	pop	{r7}
 8010154:	4770      	bx	lr

08010156 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010156:	b480      	push	{r7}
 8010158:	b083      	sub	sp, #12
 801015a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801015c:	f3ef 8305 	mrs	r3, IPSR
 8010160:	607b      	str	r3, [r7, #4]
  return(result);
 8010162:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010164:	2b00      	cmp	r3, #0
 8010166:	bf14      	ite	ne
 8010168:	2301      	movne	r3, #1
 801016a:	2300      	moveq	r3, #0
 801016c:	b2db      	uxtb	r3, r3
}
 801016e:	4618      	mov	r0, r3
 8010170:	370c      	adds	r7, #12
 8010172:	46bd      	mov	sp, r7
 8010174:	bc80      	pop	{r7}
 8010176:	4770      	bx	lr

08010178 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801017c:	f001 fa06 	bl	801158c <vTaskStartScheduler>
  
  return osOK;
 8010180:	2300      	movs	r3, #0
}
 8010182:	4618      	mov	r0, r3
 8010184:	bd80      	pop	{r7, pc}

08010186 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010186:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010188:	b089      	sub	sp, #36	@ 0x24
 801018a:	af04      	add	r7, sp, #16
 801018c:	6078      	str	r0, [r7, #4]
 801018e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	695b      	ldr	r3, [r3, #20]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d020      	beq.n	80101da <osThreadCreate+0x54>
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	699b      	ldr	r3, [r3, #24]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d01c      	beq.n	80101da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	685c      	ldr	r4, [r3, #4]
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	691e      	ldr	r6, [r3, #16]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7ff ffb8 	bl	8010128 <makeFreeRtosPriority>
 80101b8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	695b      	ldr	r3, [r3, #20]
 80101be:	687a      	ldr	r2, [r7, #4]
 80101c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80101c2:	9202      	str	r2, [sp, #8]
 80101c4:	9301      	str	r3, [sp, #4]
 80101c6:	9100      	str	r1, [sp, #0]
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	4632      	mov	r2, r6
 80101cc:	4629      	mov	r1, r5
 80101ce:	4620      	mov	r0, r4
 80101d0:	f000 ff90 	bl	80110f4 <xTaskCreateStatic>
 80101d4:	4603      	mov	r3, r0
 80101d6:	60fb      	str	r3, [r7, #12]
 80101d8:	e01c      	b.n	8010214 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	685c      	ldr	r4, [r3, #4]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80101e6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7ff ff9a 	bl	8010128 <makeFreeRtosPriority>
 80101f4:	4602      	mov	r2, r0
 80101f6:	f107 030c 	add.w	r3, r7, #12
 80101fa:	9301      	str	r3, [sp, #4]
 80101fc:	9200      	str	r2, [sp, #0]
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	4632      	mov	r2, r6
 8010202:	4629      	mov	r1, r5
 8010204:	4620      	mov	r0, r4
 8010206:	f000 ffd4 	bl	80111b2 <xTaskCreate>
 801020a:	4603      	mov	r3, r0
 801020c:	2b01      	cmp	r3, #1
 801020e:	d001      	beq.n	8010214 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010210:	2300      	movs	r3, #0
 8010212:	e000      	b.n	8010216 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010214:	68fb      	ldr	r3, [r7, #12]
}
 8010216:	4618      	mov	r0, r3
 8010218:	3714      	adds	r7, #20
 801021a:	46bd      	mov	sp, r7
 801021c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801021e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801021e:	b580      	push	{r7, lr}
 8010220:	b084      	sub	sp, #16
 8010222:	af00      	add	r7, sp, #0
 8010224:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d001      	beq.n	8010234 <osDelay+0x16>
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	e000      	b.n	8010236 <osDelay+0x18>
 8010234:	2301      	movs	r3, #1
 8010236:	4618      	mov	r0, r3
 8010238:	f001 f972 	bl	8011520 <vTaskDelay>
  
  return osOK;
 801023c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801023e:	4618      	mov	r0, r3
 8010240:	3710      	adds	r7, #16
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}

08010246 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010246:	b580      	push	{r7, lr}
 8010248:	b086      	sub	sp, #24
 801024a:	af02      	add	r7, sp, #8
 801024c:	6078      	str	r0, [r7, #4]
 801024e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d00f      	beq.n	8010278 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	2b01      	cmp	r3, #1
 801025c:	d10a      	bne.n	8010274 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	2203      	movs	r2, #3
 8010264:	9200      	str	r2, [sp, #0]
 8010266:	2200      	movs	r2, #0
 8010268:	2100      	movs	r1, #0
 801026a:	2001      	movs	r0, #1
 801026c:	f000 f9ce 	bl	801060c <xQueueGenericCreateStatic>
 8010270:	4603      	mov	r3, r0
 8010272:	e016      	b.n	80102a2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8010274:	2300      	movs	r3, #0
 8010276:	e014      	b.n	80102a2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	2b01      	cmp	r3, #1
 801027c:	d110      	bne.n	80102a0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 801027e:	2203      	movs	r2, #3
 8010280:	2100      	movs	r1, #0
 8010282:	2001      	movs	r0, #1
 8010284:	f000 fa3e 	bl	8010704 <xQueueGenericCreate>
 8010288:	60f8      	str	r0, [r7, #12]
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d005      	beq.n	801029c <osSemaphoreCreate+0x56>
 8010290:	2300      	movs	r3, #0
 8010292:	2200      	movs	r2, #0
 8010294:	2100      	movs	r1, #0
 8010296:	68f8      	ldr	r0, [r7, #12]
 8010298:	f000 fa92 	bl	80107c0 <xQueueGenericSend>
      return sema;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	e000      	b.n	80102a2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80102a0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80102a2:	4618      	mov	r0, r3
 80102a4:	3710      	adds	r7, #16
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
	...

080102ac <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b084      	sub	sp, #16
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
 80102b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80102b6:	2300      	movs	r3, #0
 80102b8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d101      	bne.n	80102c4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80102c0:	2380      	movs	r3, #128	@ 0x80
 80102c2:	e03a      	b.n	801033a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80102c4:	2300      	movs	r3, #0
 80102c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ce:	d103      	bne.n	80102d8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80102d0:	f04f 33ff 	mov.w	r3, #4294967295
 80102d4:	60fb      	str	r3, [r7, #12]
 80102d6:	e009      	b.n	80102ec <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d006      	beq.n	80102ec <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d101      	bne.n	80102ec <osSemaphoreWait+0x40>
      ticks = 1;
 80102e8:	2301      	movs	r3, #1
 80102ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80102ec:	f7ff ff33 	bl	8010156 <inHandlerMode>
 80102f0:	4603      	mov	r3, r0
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d017      	beq.n	8010326 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80102f6:	f107 0308 	add.w	r3, r7, #8
 80102fa:	461a      	mov	r2, r3
 80102fc:	2100      	movs	r1, #0
 80102fe:	6878      	ldr	r0, [r7, #4]
 8010300:	f000 fd00 	bl	8010d04 <xQueueReceiveFromISR>
 8010304:	4603      	mov	r3, r0
 8010306:	2b01      	cmp	r3, #1
 8010308:	d001      	beq.n	801030e <osSemaphoreWait+0x62>
      return osErrorOS;
 801030a:	23ff      	movs	r3, #255	@ 0xff
 801030c:	e015      	b.n	801033a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d011      	beq.n	8010338 <osSemaphoreWait+0x8c>
 8010314:	4b0b      	ldr	r3, [pc, #44]	@ (8010344 <osSemaphoreWait+0x98>)
 8010316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801031a:	601a      	str	r2, [r3, #0]
 801031c:	f3bf 8f4f 	dsb	sy
 8010320:	f3bf 8f6f 	isb	sy
 8010324:	e008      	b.n	8010338 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8010326:	68f9      	ldr	r1, [r7, #12]
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f000 fbdb 	bl	8010ae4 <xQueueSemaphoreTake>
 801032e:	4603      	mov	r3, r0
 8010330:	2b01      	cmp	r3, #1
 8010332:	d001      	beq.n	8010338 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8010334:	23ff      	movs	r3, #255	@ 0xff
 8010336:	e000      	b.n	801033a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8010338:	2300      	movs	r3, #0
}
 801033a:	4618      	mov	r0, r3
 801033c:	3710      	adds	r7, #16
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	e000ed04 	.word	0xe000ed04

08010348 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b084      	sub	sp, #16
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010350:	2300      	movs	r3, #0
 8010352:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010354:	2300      	movs	r3, #0
 8010356:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8010358:	f7ff fefd 	bl	8010156 <inHandlerMode>
 801035c:	4603      	mov	r3, r0
 801035e:	2b00      	cmp	r3, #0
 8010360:	d016      	beq.n	8010390 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010362:	f107 0308 	add.w	r3, r7, #8
 8010366:	4619      	mov	r1, r3
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f000 fb2b 	bl	80109c4 <xQueueGiveFromISR>
 801036e:	4603      	mov	r3, r0
 8010370:	2b01      	cmp	r3, #1
 8010372:	d001      	beq.n	8010378 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8010374:	23ff      	movs	r3, #255	@ 0xff
 8010376:	e017      	b.n	80103a8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d013      	beq.n	80103a6 <osSemaphoreRelease+0x5e>
 801037e:	4b0c      	ldr	r3, [pc, #48]	@ (80103b0 <osSemaphoreRelease+0x68>)
 8010380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010384:	601a      	str	r2, [r3, #0]
 8010386:	f3bf 8f4f 	dsb	sy
 801038a:	f3bf 8f6f 	isb	sy
 801038e:	e00a      	b.n	80103a6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8010390:	2300      	movs	r3, #0
 8010392:	2200      	movs	r2, #0
 8010394:	2100      	movs	r1, #0
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f000 fa12 	bl	80107c0 <xQueueGenericSend>
 801039c:	4603      	mov	r3, r0
 801039e:	2b01      	cmp	r3, #1
 80103a0:	d001      	beq.n	80103a6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80103a2:	23ff      	movs	r3, #255	@ 0xff
 80103a4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80103a6:	68fb      	ldr	r3, [r7, #12]
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3710      	adds	r7, #16
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	e000ed04 	.word	0xe000ed04

080103b4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80103bc:	f7ff fecb 	bl	8010156 <inHandlerMode>
 80103c0:	4603      	mov	r3, r0
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d001      	beq.n	80103ca <osSemaphoreDelete+0x16>
    return osErrorISR;
 80103c6:	2382      	movs	r3, #130	@ 0x82
 80103c8:	e003      	b.n	80103d2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f000 fd1c 	bl	8010e08 <vQueueDelete>

  return osOK; 
 80103d0:	2300      	movs	r3, #0
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3708      	adds	r7, #8
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80103da:	b480      	push	{r7}
 80103dc:	b083      	sub	sp, #12
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f103 0208 	add.w	r2, r3, #8
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f04f 32ff 	mov.w	r2, #4294967295
 80103f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f103 0208 	add.w	r2, r3, #8
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f103 0208 	add.w	r2, r3, #8
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2200      	movs	r2, #0
 801040c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801040e:	bf00      	nop
 8010410:	370c      	adds	r7, #12
 8010412:	46bd      	mov	sp, r7
 8010414:	bc80      	pop	{r7}
 8010416:	4770      	bx	lr

08010418 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010418:	b480      	push	{r7}
 801041a:	b083      	sub	sp, #12
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010426:	bf00      	nop
 8010428:	370c      	adds	r7, #12
 801042a:	46bd      	mov	sp, r7
 801042c:	bc80      	pop	{r7}
 801042e:	4770      	bx	lr

08010430 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010430:	b480      	push	{r7}
 8010432:	b085      	sub	sp, #20
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
 8010438:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	68fa      	ldr	r2, [r7, #12]
 8010444:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	689a      	ldr	r2, [r3, #8]
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	689b      	ldr	r3, [r3, #8]
 8010452:	683a      	ldr	r2, [r7, #0]
 8010454:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	683a      	ldr	r2, [r7, #0]
 801045a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	687a      	ldr	r2, [r7, #4]
 8010460:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	1c5a      	adds	r2, r3, #1
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	601a      	str	r2, [r3, #0]
}
 801046c:	bf00      	nop
 801046e:	3714      	adds	r7, #20
 8010470:	46bd      	mov	sp, r7
 8010472:	bc80      	pop	{r7}
 8010474:	4770      	bx	lr

08010476 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010476:	b480      	push	{r7}
 8010478:	b085      	sub	sp, #20
 801047a:	af00      	add	r7, sp, #0
 801047c:	6078      	str	r0, [r7, #4]
 801047e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	f1b3 3fff 	cmp.w	r3, #4294967295
 801048c:	d103      	bne.n	8010496 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	691b      	ldr	r3, [r3, #16]
 8010492:	60fb      	str	r3, [r7, #12]
 8010494:	e00c      	b.n	80104b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	3308      	adds	r3, #8
 801049a:	60fb      	str	r3, [r7, #12]
 801049c:	e002      	b.n	80104a4 <vListInsert+0x2e>
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	60fb      	str	r3, [r7, #12]
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	685b      	ldr	r3, [r3, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	68ba      	ldr	r2, [r7, #8]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d2f6      	bcs.n	801049e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	685a      	ldr	r2, [r3, #4]
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	683a      	ldr	r2, [r7, #0]
 80104be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	68fa      	ldr	r2, [r7, #12]
 80104c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	683a      	ldr	r2, [r7, #0]
 80104ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	687a      	ldr	r2, [r7, #4]
 80104d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	1c5a      	adds	r2, r3, #1
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	601a      	str	r2, [r3, #0]
}
 80104dc:	bf00      	nop
 80104de:	3714      	adds	r7, #20
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bc80      	pop	{r7}
 80104e4:	4770      	bx	lr

080104e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80104e6:	b480      	push	{r7}
 80104e8:	b085      	sub	sp, #20
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	691b      	ldr	r3, [r3, #16]
 80104f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	685b      	ldr	r3, [r3, #4]
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	6892      	ldr	r2, [r2, #8]
 80104fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	689b      	ldr	r3, [r3, #8]
 8010502:	687a      	ldr	r2, [r7, #4]
 8010504:	6852      	ldr	r2, [r2, #4]
 8010506:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	429a      	cmp	r2, r3
 8010510:	d103      	bne.n	801051a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	689a      	ldr	r2, [r3, #8]
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2200      	movs	r2, #0
 801051e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	1e5a      	subs	r2, r3, #1
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
}
 801052e:	4618      	mov	r0, r3
 8010530:	3714      	adds	r7, #20
 8010532:	46bd      	mov	sp, r7
 8010534:	bc80      	pop	{r7}
 8010536:	4770      	bx	lr

08010538 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d10b      	bne.n	8010564 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801054c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010550:	f383 8811 	msr	BASEPRI, r3
 8010554:	f3bf 8f6f 	isb	sy
 8010558:	f3bf 8f4f 	dsb	sy
 801055c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801055e:	bf00      	nop
 8010560:	bf00      	nop
 8010562:	e7fd      	b.n	8010560 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010564:	f001 ffa2 	bl	80124ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	681a      	ldr	r2, [r3, #0]
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010570:	68f9      	ldr	r1, [r7, #12]
 8010572:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010574:	fb01 f303 	mul.w	r3, r1, r3
 8010578:	441a      	add	r2, r3
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2200      	movs	r2, #0
 8010582:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681a      	ldr	r2, [r3, #0]
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010594:	3b01      	subs	r3, #1
 8010596:	68f9      	ldr	r1, [r7, #12]
 8010598:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801059a:	fb01 f303 	mul.w	r3, r1, r3
 801059e:	441a      	add	r2, r3
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	22ff      	movs	r2, #255	@ 0xff
 80105a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	22ff      	movs	r2, #255	@ 0xff
 80105b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d114      	bne.n	80105e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	691b      	ldr	r3, [r3, #16]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d01a      	beq.n	80105f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	3310      	adds	r3, #16
 80105c6:	4618      	mov	r0, r3
 80105c8:	f001 fa3c 	bl	8011a44 <xTaskRemoveFromEventList>
 80105cc:	4603      	mov	r3, r0
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d012      	beq.n	80105f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80105d2:	4b0d      	ldr	r3, [pc, #52]	@ (8010608 <xQueueGenericReset+0xd0>)
 80105d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105d8:	601a      	str	r2, [r3, #0]
 80105da:	f3bf 8f4f 	dsb	sy
 80105de:	f3bf 8f6f 	isb	sy
 80105e2:	e009      	b.n	80105f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	3310      	adds	r3, #16
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7ff fef6 	bl	80103da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	3324      	adds	r3, #36	@ 0x24
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7ff fef1 	bl	80103da <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80105f8:	f001 ff88 	bl	801250c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80105fc:	2301      	movs	r3, #1
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3710      	adds	r7, #16
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	e000ed04 	.word	0xe000ed04

0801060c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801060c:	b580      	push	{r7, lr}
 801060e:	b08e      	sub	sp, #56	@ 0x38
 8010610:	af02      	add	r7, sp, #8
 8010612:	60f8      	str	r0, [r7, #12]
 8010614:	60b9      	str	r1, [r7, #8]
 8010616:	607a      	str	r2, [r7, #4]
 8010618:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d10b      	bne.n	8010638 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8010620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010624:	f383 8811 	msr	BASEPRI, r3
 8010628:	f3bf 8f6f 	isb	sy
 801062c:	f3bf 8f4f 	dsb	sy
 8010630:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010632:	bf00      	nop
 8010634:	bf00      	nop
 8010636:	e7fd      	b.n	8010634 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d10b      	bne.n	8010656 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801063e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010642:	f383 8811 	msr	BASEPRI, r3
 8010646:	f3bf 8f6f 	isb	sy
 801064a:	f3bf 8f4f 	dsb	sy
 801064e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010650:	bf00      	nop
 8010652:	bf00      	nop
 8010654:	e7fd      	b.n	8010652 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d002      	beq.n	8010662 <xQueueGenericCreateStatic+0x56>
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d001      	beq.n	8010666 <xQueueGenericCreateStatic+0x5a>
 8010662:	2301      	movs	r3, #1
 8010664:	e000      	b.n	8010668 <xQueueGenericCreateStatic+0x5c>
 8010666:	2300      	movs	r3, #0
 8010668:	2b00      	cmp	r3, #0
 801066a:	d10b      	bne.n	8010684 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 801066c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010670:	f383 8811 	msr	BASEPRI, r3
 8010674:	f3bf 8f6f 	isb	sy
 8010678:	f3bf 8f4f 	dsb	sy
 801067c:	623b      	str	r3, [r7, #32]
}
 801067e:	bf00      	nop
 8010680:	bf00      	nop
 8010682:	e7fd      	b.n	8010680 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d102      	bne.n	8010690 <xQueueGenericCreateStatic+0x84>
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d101      	bne.n	8010694 <xQueueGenericCreateStatic+0x88>
 8010690:	2301      	movs	r3, #1
 8010692:	e000      	b.n	8010696 <xQueueGenericCreateStatic+0x8a>
 8010694:	2300      	movs	r3, #0
 8010696:	2b00      	cmp	r3, #0
 8010698:	d10b      	bne.n	80106b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801069a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801069e:	f383 8811 	msr	BASEPRI, r3
 80106a2:	f3bf 8f6f 	isb	sy
 80106a6:	f3bf 8f4f 	dsb	sy
 80106aa:	61fb      	str	r3, [r7, #28]
}
 80106ac:	bf00      	nop
 80106ae:	bf00      	nop
 80106b0:	e7fd      	b.n	80106ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80106b2:	2348      	movs	r3, #72	@ 0x48
 80106b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	2b48      	cmp	r3, #72	@ 0x48
 80106ba:	d00b      	beq.n	80106d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80106bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106c0:	f383 8811 	msr	BASEPRI, r3
 80106c4:	f3bf 8f6f 	isb	sy
 80106c8:	f3bf 8f4f 	dsb	sy
 80106cc:	61bb      	str	r3, [r7, #24]
}
 80106ce:	bf00      	nop
 80106d0:	bf00      	nop
 80106d2:	e7fd      	b.n	80106d0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80106d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d00d      	beq.n	80106fa <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80106de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106e0:	2201      	movs	r2, #1
 80106e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80106e6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80106ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ec:	9300      	str	r3, [sp, #0]
 80106ee:	4613      	mov	r3, r2
 80106f0:	687a      	ldr	r2, [r7, #4]
 80106f2:	68b9      	ldr	r1, [r7, #8]
 80106f4:	68f8      	ldr	r0, [r7, #12]
 80106f6:	f000 f844 	bl	8010782 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80106fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3730      	adds	r7, #48	@ 0x30
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010704:	b580      	push	{r7, lr}
 8010706:	b08a      	sub	sp, #40	@ 0x28
 8010708:	af02      	add	r7, sp, #8
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	60b9      	str	r1, [r7, #8]
 801070e:	4613      	mov	r3, r2
 8010710:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d10b      	bne.n	8010730 <xQueueGenericCreate+0x2c>
	__asm volatile
 8010718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801071c:	f383 8811 	msr	BASEPRI, r3
 8010720:	f3bf 8f6f 	isb	sy
 8010724:	f3bf 8f4f 	dsb	sy
 8010728:	613b      	str	r3, [r7, #16]
}
 801072a:	bf00      	nop
 801072c:	bf00      	nop
 801072e:	e7fd      	b.n	801072c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d102      	bne.n	801073c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010736:	2300      	movs	r3, #0
 8010738:	61fb      	str	r3, [r7, #28]
 801073a:	e004      	b.n	8010746 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	68ba      	ldr	r2, [r7, #8]
 8010740:	fb02 f303 	mul.w	r3, r2, r3
 8010744:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8010746:	69fb      	ldr	r3, [r7, #28]
 8010748:	3348      	adds	r3, #72	@ 0x48
 801074a:	4618      	mov	r0, r3
 801074c:	f001 ffb0 	bl	80126b0 <pvPortMalloc>
 8010750:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010752:	69bb      	ldr	r3, [r7, #24]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d00f      	beq.n	8010778 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8010758:	69bb      	ldr	r3, [r7, #24]
 801075a:	3348      	adds	r3, #72	@ 0x48
 801075c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801075e:	69bb      	ldr	r3, [r7, #24]
 8010760:	2200      	movs	r2, #0
 8010762:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010766:	79fa      	ldrb	r2, [r7, #7]
 8010768:	69bb      	ldr	r3, [r7, #24]
 801076a:	9300      	str	r3, [sp, #0]
 801076c:	4613      	mov	r3, r2
 801076e:	697a      	ldr	r2, [r7, #20]
 8010770:	68b9      	ldr	r1, [r7, #8]
 8010772:	68f8      	ldr	r0, [r7, #12]
 8010774:	f000 f805 	bl	8010782 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010778:	69bb      	ldr	r3, [r7, #24]
	}
 801077a:	4618      	mov	r0, r3
 801077c:	3720      	adds	r7, #32
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}

08010782 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010782:	b580      	push	{r7, lr}
 8010784:	b084      	sub	sp, #16
 8010786:	af00      	add	r7, sp, #0
 8010788:	60f8      	str	r0, [r7, #12]
 801078a:	60b9      	str	r1, [r7, #8]
 801078c:	607a      	str	r2, [r7, #4]
 801078e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d103      	bne.n	801079e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	69ba      	ldr	r2, [r7, #24]
 801079a:	601a      	str	r2, [r3, #0]
 801079c:	e002      	b.n	80107a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801079e:	69bb      	ldr	r3, [r7, #24]
 80107a0:	687a      	ldr	r2, [r7, #4]
 80107a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80107a4:	69bb      	ldr	r3, [r7, #24]
 80107a6:	68fa      	ldr	r2, [r7, #12]
 80107a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80107aa:	69bb      	ldr	r3, [r7, #24]
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80107b0:	2101      	movs	r1, #1
 80107b2:	69b8      	ldr	r0, [r7, #24]
 80107b4:	f7ff fec0 	bl	8010538 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80107b8:	bf00      	nop
 80107ba:	3710      	adds	r7, #16
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}

080107c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b08e      	sub	sp, #56	@ 0x38
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	60b9      	str	r1, [r7, #8]
 80107ca:	607a      	str	r2, [r7, #4]
 80107cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80107ce:	2300      	movs	r3, #0
 80107d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80107d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d10b      	bne.n	80107f4 <xQueueGenericSend+0x34>
	__asm volatile
 80107dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107e0:	f383 8811 	msr	BASEPRI, r3
 80107e4:	f3bf 8f6f 	isb	sy
 80107e8:	f3bf 8f4f 	dsb	sy
 80107ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80107ee:	bf00      	nop
 80107f0:	bf00      	nop
 80107f2:	e7fd      	b.n	80107f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d103      	bne.n	8010802 <xQueueGenericSend+0x42>
 80107fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d101      	bne.n	8010806 <xQueueGenericSend+0x46>
 8010802:	2301      	movs	r3, #1
 8010804:	e000      	b.n	8010808 <xQueueGenericSend+0x48>
 8010806:	2300      	movs	r3, #0
 8010808:	2b00      	cmp	r3, #0
 801080a:	d10b      	bne.n	8010824 <xQueueGenericSend+0x64>
	__asm volatile
 801080c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010810:	f383 8811 	msr	BASEPRI, r3
 8010814:	f3bf 8f6f 	isb	sy
 8010818:	f3bf 8f4f 	dsb	sy
 801081c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801081e:	bf00      	nop
 8010820:	bf00      	nop
 8010822:	e7fd      	b.n	8010820 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	2b02      	cmp	r3, #2
 8010828:	d103      	bne.n	8010832 <xQueueGenericSend+0x72>
 801082a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801082c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801082e:	2b01      	cmp	r3, #1
 8010830:	d101      	bne.n	8010836 <xQueueGenericSend+0x76>
 8010832:	2301      	movs	r3, #1
 8010834:	e000      	b.n	8010838 <xQueueGenericSend+0x78>
 8010836:	2300      	movs	r3, #0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d10b      	bne.n	8010854 <xQueueGenericSend+0x94>
	__asm volatile
 801083c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010840:	f383 8811 	msr	BASEPRI, r3
 8010844:	f3bf 8f6f 	isb	sy
 8010848:	f3bf 8f4f 	dsb	sy
 801084c:	623b      	str	r3, [r7, #32]
}
 801084e:	bf00      	nop
 8010850:	bf00      	nop
 8010852:	e7fd      	b.n	8010850 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010854:	f001 faf2 	bl	8011e3c <xTaskGetSchedulerState>
 8010858:	4603      	mov	r3, r0
 801085a:	2b00      	cmp	r3, #0
 801085c:	d102      	bne.n	8010864 <xQueueGenericSend+0xa4>
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d101      	bne.n	8010868 <xQueueGenericSend+0xa8>
 8010864:	2301      	movs	r3, #1
 8010866:	e000      	b.n	801086a <xQueueGenericSend+0xaa>
 8010868:	2300      	movs	r3, #0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d10b      	bne.n	8010886 <xQueueGenericSend+0xc6>
	__asm volatile
 801086e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010872:	f383 8811 	msr	BASEPRI, r3
 8010876:	f3bf 8f6f 	isb	sy
 801087a:	f3bf 8f4f 	dsb	sy
 801087e:	61fb      	str	r3, [r7, #28]
}
 8010880:	bf00      	nop
 8010882:	bf00      	nop
 8010884:	e7fd      	b.n	8010882 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010886:	f001 fe11 	bl	80124ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801088a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801088c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801088e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010892:	429a      	cmp	r2, r3
 8010894:	d302      	bcc.n	801089c <xQueueGenericSend+0xdc>
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	2b02      	cmp	r3, #2
 801089a:	d129      	bne.n	80108f0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801089c:	683a      	ldr	r2, [r7, #0]
 801089e:	68b9      	ldr	r1, [r7, #8]
 80108a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80108a2:	f000 faec 	bl	8010e7e <prvCopyDataToQueue>
 80108a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80108a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d010      	beq.n	80108d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80108b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108b2:	3324      	adds	r3, #36	@ 0x24
 80108b4:	4618      	mov	r0, r3
 80108b6:	f001 f8c5 	bl	8011a44 <xTaskRemoveFromEventList>
 80108ba:	4603      	mov	r3, r0
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d013      	beq.n	80108e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80108c0:	4b3f      	ldr	r3, [pc, #252]	@ (80109c0 <xQueueGenericSend+0x200>)
 80108c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108c6:	601a      	str	r2, [r3, #0]
 80108c8:	f3bf 8f4f 	dsb	sy
 80108cc:	f3bf 8f6f 	isb	sy
 80108d0:	e00a      	b.n	80108e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80108d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d007      	beq.n	80108e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80108d8:	4b39      	ldr	r3, [pc, #228]	@ (80109c0 <xQueueGenericSend+0x200>)
 80108da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108de:	601a      	str	r2, [r3, #0]
 80108e0:	f3bf 8f4f 	dsb	sy
 80108e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80108e8:	f001 fe10 	bl	801250c <vPortExitCritical>
				return pdPASS;
 80108ec:	2301      	movs	r3, #1
 80108ee:	e063      	b.n	80109b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d103      	bne.n	80108fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80108f6:	f001 fe09 	bl	801250c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80108fa:	2300      	movs	r3, #0
 80108fc:	e05c      	b.n	80109b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80108fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010900:	2b00      	cmp	r3, #0
 8010902:	d106      	bne.n	8010912 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010904:	f107 0314 	add.w	r3, r7, #20
 8010908:	4618      	mov	r0, r3
 801090a:	f001 f8ff 	bl	8011b0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801090e:	2301      	movs	r3, #1
 8010910:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010912:	f001 fdfb 	bl	801250c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010916:	f000 fe9b 	bl	8011650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801091a:	f001 fdc7 	bl	80124ac <vPortEnterCritical>
 801091e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010920:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010924:	b25b      	sxtb	r3, r3
 8010926:	f1b3 3fff 	cmp.w	r3, #4294967295
 801092a:	d103      	bne.n	8010934 <xQueueGenericSend+0x174>
 801092c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801092e:	2200      	movs	r2, #0
 8010930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010936:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801093a:	b25b      	sxtb	r3, r3
 801093c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010940:	d103      	bne.n	801094a <xQueueGenericSend+0x18a>
 8010942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010944:	2200      	movs	r2, #0
 8010946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801094a:	f001 fddf 	bl	801250c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801094e:	1d3a      	adds	r2, r7, #4
 8010950:	f107 0314 	add.w	r3, r7, #20
 8010954:	4611      	mov	r1, r2
 8010956:	4618      	mov	r0, r3
 8010958:	f001 f8ee 	bl	8011b38 <xTaskCheckForTimeOut>
 801095c:	4603      	mov	r3, r0
 801095e:	2b00      	cmp	r3, #0
 8010960:	d124      	bne.n	80109ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010962:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010964:	f000 fb83 	bl	801106e <prvIsQueueFull>
 8010968:	4603      	mov	r3, r0
 801096a:	2b00      	cmp	r3, #0
 801096c:	d018      	beq.n	80109a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801096e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010970:	3310      	adds	r3, #16
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	4611      	mov	r1, r2
 8010976:	4618      	mov	r0, r3
 8010978:	f001 f83e 	bl	80119f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801097c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801097e:	f000 fb0e 	bl	8010f9e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010982:	f000 fe73 	bl	801166c <xTaskResumeAll>
 8010986:	4603      	mov	r3, r0
 8010988:	2b00      	cmp	r3, #0
 801098a:	f47f af7c 	bne.w	8010886 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801098e:	4b0c      	ldr	r3, [pc, #48]	@ (80109c0 <xQueueGenericSend+0x200>)
 8010990:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010994:	601a      	str	r2, [r3, #0]
 8010996:	f3bf 8f4f 	dsb	sy
 801099a:	f3bf 8f6f 	isb	sy
 801099e:	e772      	b.n	8010886 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80109a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80109a2:	f000 fafc 	bl	8010f9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80109a6:	f000 fe61 	bl	801166c <xTaskResumeAll>
 80109aa:	e76c      	b.n	8010886 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80109ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80109ae:	f000 faf6 	bl	8010f9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80109b2:	f000 fe5b 	bl	801166c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80109b6:	2300      	movs	r3, #0
		}
	}
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3738      	adds	r7, #56	@ 0x38
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	e000ed04 	.word	0xe000ed04

080109c4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b08e      	sub	sp, #56	@ 0x38
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80109d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d10b      	bne.n	80109f0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80109d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109dc:	f383 8811 	msr	BASEPRI, r3
 80109e0:	f3bf 8f6f 	isb	sy
 80109e4:	f3bf 8f4f 	dsb	sy
 80109e8:	623b      	str	r3, [r7, #32]
}
 80109ea:	bf00      	nop
 80109ec:	bf00      	nop
 80109ee:	e7fd      	b.n	80109ec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80109f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d00b      	beq.n	8010a10 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80109f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109fc:	f383 8811 	msr	BASEPRI, r3
 8010a00:	f3bf 8f6f 	isb	sy
 8010a04:	f3bf 8f4f 	dsb	sy
 8010a08:	61fb      	str	r3, [r7, #28]
}
 8010a0a:	bf00      	nop
 8010a0c:	bf00      	nop
 8010a0e:	e7fd      	b.n	8010a0c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d103      	bne.n	8010a20 <xQueueGiveFromISR+0x5c>
 8010a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a1a:	685b      	ldr	r3, [r3, #4]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d101      	bne.n	8010a24 <xQueueGiveFromISR+0x60>
 8010a20:	2301      	movs	r3, #1
 8010a22:	e000      	b.n	8010a26 <xQueueGiveFromISR+0x62>
 8010a24:	2300      	movs	r3, #0
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d10b      	bne.n	8010a42 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8010a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a2e:	f383 8811 	msr	BASEPRI, r3
 8010a32:	f3bf 8f6f 	isb	sy
 8010a36:	f3bf 8f4f 	dsb	sy
 8010a3a:	61bb      	str	r3, [r7, #24]
}
 8010a3c:	bf00      	nop
 8010a3e:	bf00      	nop
 8010a40:	e7fd      	b.n	8010a3e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a42:	f001 fdf5 	bl	8012630 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010a46:	f3ef 8211 	mrs	r2, BASEPRI
 8010a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a4e:	f383 8811 	msr	BASEPRI, r3
 8010a52:	f3bf 8f6f 	isb	sy
 8010a56:	f3bf 8f4f 	dsb	sy
 8010a5a:	617a      	str	r2, [r7, #20]
 8010a5c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010a5e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a66:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	d22b      	bcs.n	8010aca <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a7e:	1c5a      	adds	r2, r3, #1
 8010a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a82:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010a84:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a8c:	d112      	bne.n	8010ab4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d016      	beq.n	8010ac4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a98:	3324      	adds	r3, #36	@ 0x24
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f000 ffd2 	bl	8011a44 <xTaskRemoveFromEventList>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d00e      	beq.n	8010ac4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d00b      	beq.n	8010ac4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	2201      	movs	r2, #1
 8010ab0:	601a      	str	r2, [r3, #0]
 8010ab2:	e007      	b.n	8010ac4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ab8:	3301      	adds	r3, #1
 8010aba:	b2db      	uxtb	r3, r3
 8010abc:	b25a      	sxtb	r2, r3
 8010abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ac8:	e001      	b.n	8010ace <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010aca:	2300      	movs	r3, #0
 8010acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ad0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010ad8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3738      	adds	r7, #56	@ 0x38
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}

08010ae4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b08e      	sub	sp, #56	@ 0x38
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010aee:	2300      	movs	r3, #0
 8010af0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010af6:	2300      	movs	r3, #0
 8010af8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d10b      	bne.n	8010b18 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8010b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b04:	f383 8811 	msr	BASEPRI, r3
 8010b08:	f3bf 8f6f 	isb	sy
 8010b0c:	f3bf 8f4f 	dsb	sy
 8010b10:	623b      	str	r3, [r7, #32]
}
 8010b12:	bf00      	nop
 8010b14:	bf00      	nop
 8010b16:	e7fd      	b.n	8010b14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d00b      	beq.n	8010b38 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8010b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b24:	f383 8811 	msr	BASEPRI, r3
 8010b28:	f3bf 8f6f 	isb	sy
 8010b2c:	f3bf 8f4f 	dsb	sy
 8010b30:	61fb      	str	r3, [r7, #28]
}
 8010b32:	bf00      	nop
 8010b34:	bf00      	nop
 8010b36:	e7fd      	b.n	8010b34 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b38:	f001 f980 	bl	8011e3c <xTaskGetSchedulerState>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d102      	bne.n	8010b48 <xQueueSemaphoreTake+0x64>
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d101      	bne.n	8010b4c <xQueueSemaphoreTake+0x68>
 8010b48:	2301      	movs	r3, #1
 8010b4a:	e000      	b.n	8010b4e <xQueueSemaphoreTake+0x6a>
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d10b      	bne.n	8010b6a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8010b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b56:	f383 8811 	msr	BASEPRI, r3
 8010b5a:	f3bf 8f6f 	isb	sy
 8010b5e:	f3bf 8f4f 	dsb	sy
 8010b62:	61bb      	str	r3, [r7, #24]
}
 8010b64:	bf00      	nop
 8010b66:	bf00      	nop
 8010b68:	e7fd      	b.n	8010b66 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b6a:	f001 fc9f 	bl	80124ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b72:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d024      	beq.n	8010bc4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b7c:	1e5a      	subs	r2, r3, #1
 8010b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b80:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d104      	bne.n	8010b94 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010b8a:	f001 fb25 	bl	80121d8 <pvTaskIncrementMutexHeldCount>
 8010b8e:	4602      	mov	r2, r0
 8010b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b92:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b96:	691b      	ldr	r3, [r3, #16]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d00f      	beq.n	8010bbc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b9e:	3310      	adds	r3, #16
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f000 ff4f 	bl	8011a44 <xTaskRemoveFromEventList>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d007      	beq.n	8010bbc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010bac:	4b54      	ldr	r3, [pc, #336]	@ (8010d00 <xQueueSemaphoreTake+0x21c>)
 8010bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bb2:	601a      	str	r2, [r3, #0]
 8010bb4:	f3bf 8f4f 	dsb	sy
 8010bb8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010bbc:	f001 fca6 	bl	801250c <vPortExitCritical>
				return pdPASS;
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	e098      	b.n	8010cf6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d112      	bne.n	8010bf0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d00b      	beq.n	8010be8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8010bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bd4:	f383 8811 	msr	BASEPRI, r3
 8010bd8:	f3bf 8f6f 	isb	sy
 8010bdc:	f3bf 8f4f 	dsb	sy
 8010be0:	617b      	str	r3, [r7, #20]
}
 8010be2:	bf00      	nop
 8010be4:	bf00      	nop
 8010be6:	e7fd      	b.n	8010be4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010be8:	f001 fc90 	bl	801250c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010bec:	2300      	movs	r3, #0
 8010bee:	e082      	b.n	8010cf6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d106      	bne.n	8010c04 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010bf6:	f107 030c 	add.w	r3, r7, #12
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f000 ff86 	bl	8011b0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010c00:	2301      	movs	r3, #1
 8010c02:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010c04:	f001 fc82 	bl	801250c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010c08:	f000 fd22 	bl	8011650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010c0c:	f001 fc4e 	bl	80124ac <vPortEnterCritical>
 8010c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010c16:	b25b      	sxtb	r3, r3
 8010c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c1c:	d103      	bne.n	8010c26 <xQueueSemaphoreTake+0x142>
 8010c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c20:	2200      	movs	r2, #0
 8010c22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010c2c:	b25b      	sxtb	r3, r3
 8010c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c32:	d103      	bne.n	8010c3c <xQueueSemaphoreTake+0x158>
 8010c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c36:	2200      	movs	r2, #0
 8010c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010c3c:	f001 fc66 	bl	801250c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c40:	463a      	mov	r2, r7
 8010c42:	f107 030c 	add.w	r3, r7, #12
 8010c46:	4611      	mov	r1, r2
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f000 ff75 	bl	8011b38 <xTaskCheckForTimeOut>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d132      	bne.n	8010cba <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010c56:	f000 f9f4 	bl	8011042 <prvIsQueueEmpty>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d026      	beq.n	8010cae <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d109      	bne.n	8010c7c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8010c68:	f001 fc20 	bl	80124ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	4618      	mov	r0, r3
 8010c72:	f001 f901 	bl	8011e78 <xTaskPriorityInherit>
 8010c76:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8010c78:	f001 fc48 	bl	801250c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c7e:	3324      	adds	r3, #36	@ 0x24
 8010c80:	683a      	ldr	r2, [r7, #0]
 8010c82:	4611      	mov	r1, r2
 8010c84:	4618      	mov	r0, r3
 8010c86:	f000 feb7 	bl	80119f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010c8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010c8c:	f000 f987 	bl	8010f9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010c90:	f000 fcec 	bl	801166c <xTaskResumeAll>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	f47f af67 	bne.w	8010b6a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8010c9c:	4b18      	ldr	r3, [pc, #96]	@ (8010d00 <xQueueSemaphoreTake+0x21c>)
 8010c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ca2:	601a      	str	r2, [r3, #0]
 8010ca4:	f3bf 8f4f 	dsb	sy
 8010ca8:	f3bf 8f6f 	isb	sy
 8010cac:	e75d      	b.n	8010b6a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010cae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010cb0:	f000 f975 	bl	8010f9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010cb4:	f000 fcda 	bl	801166c <xTaskResumeAll>
 8010cb8:	e757      	b.n	8010b6a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010cba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010cbc:	f000 f96f 	bl	8010f9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010cc0:	f000 fcd4 	bl	801166c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010cc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010cc6:	f000 f9bc 	bl	8011042 <prvIsQueueEmpty>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	f43f af4c 	beq.w	8010b6a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d00d      	beq.n	8010cf4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010cd8:	f001 fbe8 	bl	80124ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010cdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010cde:	f000 f8b7 	bl	8010e50 <prvGetDisinheritPriorityAfterTimeout>
 8010ce2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8010ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ce6:	685b      	ldr	r3, [r3, #4]
 8010ce8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010cea:	4618      	mov	r0, r3
 8010cec:	f001 f9d2 	bl	8012094 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010cf0:	f001 fc0c 	bl	801250c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010cf4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3738      	adds	r7, #56	@ 0x38
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	e000ed04 	.word	0xe000ed04

08010d04 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b08e      	sub	sp, #56	@ 0x38
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d10b      	bne.n	8010d32 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8010d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d1e:	f383 8811 	msr	BASEPRI, r3
 8010d22:	f3bf 8f6f 	isb	sy
 8010d26:	f3bf 8f4f 	dsb	sy
 8010d2a:	623b      	str	r3, [r7, #32]
}
 8010d2c:	bf00      	nop
 8010d2e:	bf00      	nop
 8010d30:	e7fd      	b.n	8010d2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d103      	bne.n	8010d40 <xQueueReceiveFromISR+0x3c>
 8010d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d101      	bne.n	8010d44 <xQueueReceiveFromISR+0x40>
 8010d40:	2301      	movs	r3, #1
 8010d42:	e000      	b.n	8010d46 <xQueueReceiveFromISR+0x42>
 8010d44:	2300      	movs	r3, #0
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d10b      	bne.n	8010d62 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8010d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d4e:	f383 8811 	msr	BASEPRI, r3
 8010d52:	f3bf 8f6f 	isb	sy
 8010d56:	f3bf 8f4f 	dsb	sy
 8010d5a:	61fb      	str	r3, [r7, #28]
}
 8010d5c:	bf00      	nop
 8010d5e:	bf00      	nop
 8010d60:	e7fd      	b.n	8010d5e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010d62:	f001 fc65 	bl	8012630 <vPortValidateInterruptPriority>
	__asm volatile
 8010d66:	f3ef 8211 	mrs	r2, BASEPRI
 8010d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d6e:	f383 8811 	msr	BASEPRI, r3
 8010d72:	f3bf 8f6f 	isb	sy
 8010d76:	f3bf 8f4f 	dsb	sy
 8010d7a:	61ba      	str	r2, [r7, #24]
 8010d7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010d7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d86:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d02f      	beq.n	8010dee <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010d98:	68b9      	ldr	r1, [r7, #8]
 8010d9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010d9c:	f000 f8d9 	bl	8010f52 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010da2:	1e5a      	subs	r2, r3, #1
 8010da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010da6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010da8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010db0:	d112      	bne.n	8010dd8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010db4:	691b      	ldr	r3, [r3, #16]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d016      	beq.n	8010de8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dbc:	3310      	adds	r3, #16
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f000 fe40 	bl	8011a44 <xTaskRemoveFromEventList>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d00e      	beq.n	8010de8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d00b      	beq.n	8010de8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	601a      	str	r2, [r3, #0]
 8010dd6:	e007      	b.n	8010de8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ddc:	3301      	adds	r3, #1
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	b25a      	sxtb	r2, r3
 8010de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8010de8:	2301      	movs	r3, #1
 8010dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8010dec:	e001      	b.n	8010df2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8010dee:	2300      	movs	r3, #0
 8010df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8010df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010df4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010df6:	693b      	ldr	r3, [r7, #16]
 8010df8:	f383 8811 	msr	BASEPRI, r3
}
 8010dfc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3738      	adds	r7, #56	@ 0x38
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d10b      	bne.n	8010e32 <vQueueDelete+0x2a>
	__asm volatile
 8010e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e1e:	f383 8811 	msr	BASEPRI, r3
 8010e22:	f3bf 8f6f 	isb	sy
 8010e26:	f3bf 8f4f 	dsb	sy
 8010e2a:	60bb      	str	r3, [r7, #8]
}
 8010e2c:	bf00      	nop
 8010e2e:	bf00      	nop
 8010e30:	e7fd      	b.n	8010e2e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010e32:	68f8      	ldr	r0, [r7, #12]
 8010e34:	f000 f934 	bl	80110a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d102      	bne.n	8010e48 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8010e42:	68f8      	ldr	r0, [r7, #12]
 8010e44:	f001 fcfc 	bl	8012840 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010e48:	bf00      	nop
 8010e4a:	3710      	adds	r7, #16
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010e50:	b480      	push	{r7}
 8010e52:	b085      	sub	sp, #20
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d006      	beq.n	8010e6e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	f1c3 0307 	rsb	r3, r3, #7
 8010e6a:	60fb      	str	r3, [r7, #12]
 8010e6c:	e001      	b.n	8010e72 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010e72:	68fb      	ldr	r3, [r7, #12]
	}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3714      	adds	r7, #20
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bc80      	pop	{r7}
 8010e7c:	4770      	bx	lr

08010e7e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010e7e:	b580      	push	{r7, lr}
 8010e80:	b086      	sub	sp, #24
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	60f8      	str	r0, [r7, #12]
 8010e86:	60b9      	str	r1, [r7, #8]
 8010e88:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e92:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d10d      	bne.n	8010eb8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d14d      	bne.n	8010f40 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f001 f86b 	bl	8011f84 <xTaskPriorityDisinherit>
 8010eae:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	605a      	str	r2, [r3, #4]
 8010eb6:	e043      	b.n	8010f40 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d119      	bne.n	8010ef2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	6898      	ldr	r0, [r3, #8]
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	68b9      	ldr	r1, [r7, #8]
 8010eca:	f001 fedd 	bl	8012c88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	689a      	ldr	r2, [r3, #8]
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ed6:	441a      	add	r2, r3
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	689a      	ldr	r2, [r3, #8]
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	685b      	ldr	r3, [r3, #4]
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	d32b      	bcc.n	8010f40 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	609a      	str	r2, [r3, #8]
 8010ef0:	e026      	b.n	8010f40 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	68d8      	ldr	r0, [r3, #12]
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010efa:	461a      	mov	r2, r3
 8010efc:	68b9      	ldr	r1, [r7, #8]
 8010efe:	f001 fec3 	bl	8012c88 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	68da      	ldr	r2, [r3, #12]
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f0a:	425b      	negs	r3, r3
 8010f0c:	441a      	add	r2, r3
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	68da      	ldr	r2, [r3, #12]
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d207      	bcs.n	8010f2e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	685a      	ldr	r2, [r3, #4]
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f26:	425b      	negs	r3, r3
 8010f28:	441a      	add	r2, r3
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2b02      	cmp	r3, #2
 8010f32:	d105      	bne.n	8010f40 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d002      	beq.n	8010f40 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	3b01      	subs	r3, #1
 8010f3e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	1c5a      	adds	r2, r3, #1
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010f48:	697b      	ldr	r3, [r7, #20]
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	3718      	adds	r7, #24
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}

08010f52 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010f52:	b580      	push	{r7, lr}
 8010f54:	b082      	sub	sp, #8
 8010f56:	af00      	add	r7, sp, #0
 8010f58:	6078      	str	r0, [r7, #4]
 8010f5a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d018      	beq.n	8010f96 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	68da      	ldr	r2, [r3, #12]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f6c:	441a      	add	r2, r3
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	68da      	ldr	r2, [r3, #12]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	685b      	ldr	r3, [r3, #4]
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	d303      	bcc.n	8010f86 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681a      	ldr	r2, [r3, #0]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	68d9      	ldr	r1, [r3, #12]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f8e:	461a      	mov	r2, r3
 8010f90:	6838      	ldr	r0, [r7, #0]
 8010f92:	f001 fe79 	bl	8012c88 <memcpy>
	}
}
 8010f96:	bf00      	nop
 8010f98:	3708      	adds	r7, #8
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}

08010f9e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b084      	sub	sp, #16
 8010fa2:	af00      	add	r7, sp, #0
 8010fa4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010fa6:	f001 fa81 	bl	80124ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010fb0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010fb2:	e011      	b.n	8010fd8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d012      	beq.n	8010fe2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	3324      	adds	r3, #36	@ 0x24
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f000 fd3f 	bl	8011a44 <xTaskRemoveFromEventList>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d001      	beq.n	8010fd0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010fcc:	f000 fe18 	bl	8011c00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010fd0:	7bfb      	ldrb	r3, [r7, #15]
 8010fd2:	3b01      	subs	r3, #1
 8010fd4:	b2db      	uxtb	r3, r3
 8010fd6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	dce9      	bgt.n	8010fb4 <prvUnlockQueue+0x16>
 8010fe0:	e000      	b.n	8010fe4 <prvUnlockQueue+0x46>
					break;
 8010fe2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	22ff      	movs	r2, #255	@ 0xff
 8010fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010fec:	f001 fa8e 	bl	801250c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010ff0:	f001 fa5c 	bl	80124ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010ffa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ffc:	e011      	b.n	8011022 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	691b      	ldr	r3, [r3, #16]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d012      	beq.n	801102c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	3310      	adds	r3, #16
 801100a:	4618      	mov	r0, r3
 801100c:	f000 fd1a 	bl	8011a44 <xTaskRemoveFromEventList>
 8011010:	4603      	mov	r3, r0
 8011012:	2b00      	cmp	r3, #0
 8011014:	d001      	beq.n	801101a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011016:	f000 fdf3 	bl	8011c00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801101a:	7bbb      	ldrb	r3, [r7, #14]
 801101c:	3b01      	subs	r3, #1
 801101e:	b2db      	uxtb	r3, r3
 8011020:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011026:	2b00      	cmp	r3, #0
 8011028:	dce9      	bgt.n	8010ffe <prvUnlockQueue+0x60>
 801102a:	e000      	b.n	801102e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801102c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	22ff      	movs	r2, #255	@ 0xff
 8011032:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011036:	f001 fa69 	bl	801250c <vPortExitCritical>
}
 801103a:	bf00      	nop
 801103c:	3710      	adds	r7, #16
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}

08011042 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011042:	b580      	push	{r7, lr}
 8011044:	b084      	sub	sp, #16
 8011046:	af00      	add	r7, sp, #0
 8011048:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801104a:	f001 fa2f 	bl	80124ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011052:	2b00      	cmp	r3, #0
 8011054:	d102      	bne.n	801105c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011056:	2301      	movs	r3, #1
 8011058:	60fb      	str	r3, [r7, #12]
 801105a:	e001      	b.n	8011060 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801105c:	2300      	movs	r3, #0
 801105e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011060:	f001 fa54 	bl	801250c <vPortExitCritical>

	return xReturn;
 8011064:	68fb      	ldr	r3, [r7, #12]
}
 8011066:	4618      	mov	r0, r3
 8011068:	3710      	adds	r7, #16
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}

0801106e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801106e:	b580      	push	{r7, lr}
 8011070:	b084      	sub	sp, #16
 8011072:	af00      	add	r7, sp, #0
 8011074:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011076:	f001 fa19 	bl	80124ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011082:	429a      	cmp	r2, r3
 8011084:	d102      	bne.n	801108c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011086:	2301      	movs	r3, #1
 8011088:	60fb      	str	r3, [r7, #12]
 801108a:	e001      	b.n	8011090 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801108c:	2300      	movs	r3, #0
 801108e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011090:	f001 fa3c 	bl	801250c <vPortExitCritical>

	return xReturn;
 8011094:	68fb      	ldr	r3, [r7, #12]
}
 8011096:	4618      	mov	r0, r3
 8011098:	3710      	adds	r7, #16
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}
	...

080110a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80110a0:	b480      	push	{r7}
 80110a2:	b085      	sub	sp, #20
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80110a8:	2300      	movs	r3, #0
 80110aa:	60fb      	str	r3, [r7, #12]
 80110ac:	e016      	b.n	80110dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80110ae:	4a10      	ldr	r2, [pc, #64]	@ (80110f0 <vQueueUnregisterQueue+0x50>)
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	00db      	lsls	r3, r3, #3
 80110b4:	4413      	add	r3, r2
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	687a      	ldr	r2, [r7, #4]
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d10b      	bne.n	80110d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80110be:	4a0c      	ldr	r2, [pc, #48]	@ (80110f0 <vQueueUnregisterQueue+0x50>)
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2100      	movs	r1, #0
 80110c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80110c8:	4a09      	ldr	r2, [pc, #36]	@ (80110f0 <vQueueUnregisterQueue+0x50>)
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	00db      	lsls	r3, r3, #3
 80110ce:	4413      	add	r3, r2
 80110d0:	2200      	movs	r2, #0
 80110d2:	605a      	str	r2, [r3, #4]
				break;
 80110d4:	e006      	b.n	80110e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	3301      	adds	r3, #1
 80110da:	60fb      	str	r3, [r7, #12]
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	2b07      	cmp	r3, #7
 80110e0:	d9e5      	bls.n	80110ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80110e2:	bf00      	nop
 80110e4:	bf00      	nop
 80110e6:	3714      	adds	r7, #20
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bc80      	pop	{r7}
 80110ec:	4770      	bx	lr
 80110ee:	bf00      	nop
 80110f0:	20001298 	.word	0x20001298

080110f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b08e      	sub	sp, #56	@ 0x38
 80110f8:	af04      	add	r7, sp, #16
 80110fa:	60f8      	str	r0, [r7, #12]
 80110fc:	60b9      	str	r1, [r7, #8]
 80110fe:	607a      	str	r2, [r7, #4]
 8011100:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011104:	2b00      	cmp	r3, #0
 8011106:	d10b      	bne.n	8011120 <xTaskCreateStatic+0x2c>
	__asm volatile
 8011108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801110c:	f383 8811 	msr	BASEPRI, r3
 8011110:	f3bf 8f6f 	isb	sy
 8011114:	f3bf 8f4f 	dsb	sy
 8011118:	623b      	str	r3, [r7, #32]
}
 801111a:	bf00      	nop
 801111c:	bf00      	nop
 801111e:	e7fd      	b.n	801111c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011122:	2b00      	cmp	r3, #0
 8011124:	d10b      	bne.n	801113e <xTaskCreateStatic+0x4a>
	__asm volatile
 8011126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801112a:	f383 8811 	msr	BASEPRI, r3
 801112e:	f3bf 8f6f 	isb	sy
 8011132:	f3bf 8f4f 	dsb	sy
 8011136:	61fb      	str	r3, [r7, #28]
}
 8011138:	bf00      	nop
 801113a:	bf00      	nop
 801113c:	e7fd      	b.n	801113a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801113e:	2354      	movs	r3, #84	@ 0x54
 8011140:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	2b54      	cmp	r3, #84	@ 0x54
 8011146:	d00b      	beq.n	8011160 <xTaskCreateStatic+0x6c>
	__asm volatile
 8011148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801114c:	f383 8811 	msr	BASEPRI, r3
 8011150:	f3bf 8f6f 	isb	sy
 8011154:	f3bf 8f4f 	dsb	sy
 8011158:	61bb      	str	r3, [r7, #24]
}
 801115a:	bf00      	nop
 801115c:	bf00      	nop
 801115e:	e7fd      	b.n	801115c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011162:	2b00      	cmp	r3, #0
 8011164:	d01e      	beq.n	80111a4 <xTaskCreateStatic+0xb0>
 8011166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011168:	2b00      	cmp	r3, #0
 801116a:	d01b      	beq.n	80111a4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801116c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801116e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011172:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011174:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011178:	2202      	movs	r2, #2
 801117a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801117e:	2300      	movs	r3, #0
 8011180:	9303      	str	r3, [sp, #12]
 8011182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011184:	9302      	str	r3, [sp, #8]
 8011186:	f107 0314 	add.w	r3, r7, #20
 801118a:	9301      	str	r3, [sp, #4]
 801118c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801118e:	9300      	str	r3, [sp, #0]
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	687a      	ldr	r2, [r7, #4]
 8011194:	68b9      	ldr	r1, [r7, #8]
 8011196:	68f8      	ldr	r0, [r7, #12]
 8011198:	f000 f850 	bl	801123c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801119c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801119e:	f000 f8d5 	bl	801134c <prvAddNewTaskToReadyList>
 80111a2:	e001      	b.n	80111a8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80111a4:	2300      	movs	r3, #0
 80111a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80111a8:	697b      	ldr	r3, [r7, #20]
	}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3728      	adds	r7, #40	@ 0x28
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80111b2:	b580      	push	{r7, lr}
 80111b4:	b08c      	sub	sp, #48	@ 0x30
 80111b6:	af04      	add	r7, sp, #16
 80111b8:	60f8      	str	r0, [r7, #12]
 80111ba:	60b9      	str	r1, [r7, #8]
 80111bc:	603b      	str	r3, [r7, #0]
 80111be:	4613      	mov	r3, r2
 80111c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80111c2:	88fb      	ldrh	r3, [r7, #6]
 80111c4:	009b      	lsls	r3, r3, #2
 80111c6:	4618      	mov	r0, r3
 80111c8:	f001 fa72 	bl	80126b0 <pvPortMalloc>
 80111cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d00e      	beq.n	80111f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80111d4:	2054      	movs	r0, #84	@ 0x54
 80111d6:	f001 fa6b 	bl	80126b0 <pvPortMalloc>
 80111da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80111dc:	69fb      	ldr	r3, [r7, #28]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d003      	beq.n	80111ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80111e2:	69fb      	ldr	r3, [r7, #28]
 80111e4:	697a      	ldr	r2, [r7, #20]
 80111e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80111e8:	e005      	b.n	80111f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80111ea:	6978      	ldr	r0, [r7, #20]
 80111ec:	f001 fb28 	bl	8012840 <vPortFree>
 80111f0:	e001      	b.n	80111f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80111f2:	2300      	movs	r3, #0
 80111f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80111f6:	69fb      	ldr	r3, [r7, #28]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d017      	beq.n	801122c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	2200      	movs	r2, #0
 8011200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011204:	88fa      	ldrh	r2, [r7, #6]
 8011206:	2300      	movs	r3, #0
 8011208:	9303      	str	r3, [sp, #12]
 801120a:	69fb      	ldr	r3, [r7, #28]
 801120c:	9302      	str	r3, [sp, #8]
 801120e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011210:	9301      	str	r3, [sp, #4]
 8011212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011214:	9300      	str	r3, [sp, #0]
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	68b9      	ldr	r1, [r7, #8]
 801121a:	68f8      	ldr	r0, [r7, #12]
 801121c:	f000 f80e 	bl	801123c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011220:	69f8      	ldr	r0, [r7, #28]
 8011222:	f000 f893 	bl	801134c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011226:	2301      	movs	r3, #1
 8011228:	61bb      	str	r3, [r7, #24]
 801122a:	e002      	b.n	8011232 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801122c:	f04f 33ff 	mov.w	r3, #4294967295
 8011230:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011232:	69bb      	ldr	r3, [r7, #24]
	}
 8011234:	4618      	mov	r0, r3
 8011236:	3720      	adds	r7, #32
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}

0801123c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b088      	sub	sp, #32
 8011240:	af00      	add	r7, sp, #0
 8011242:	60f8      	str	r0, [r7, #12]
 8011244:	60b9      	str	r1, [r7, #8]
 8011246:	607a      	str	r2, [r7, #4]
 8011248:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801124a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801124c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	009b      	lsls	r3, r3, #2
 8011252:	461a      	mov	r2, r3
 8011254:	21a5      	movs	r1, #165	@ 0xa5
 8011256:	f001 fcd3 	bl	8012c00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801125a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801125c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011264:	3b01      	subs	r3, #1
 8011266:	009b      	lsls	r3, r3, #2
 8011268:	4413      	add	r3, r2
 801126a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 801126c:	69bb      	ldr	r3, [r7, #24]
 801126e:	f023 0307 	bic.w	r3, r3, #7
 8011272:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011274:	69bb      	ldr	r3, [r7, #24]
 8011276:	f003 0307 	and.w	r3, r3, #7
 801127a:	2b00      	cmp	r3, #0
 801127c:	d00b      	beq.n	8011296 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801127e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011282:	f383 8811 	msr	BASEPRI, r3
 8011286:	f3bf 8f6f 	isb	sy
 801128a:	f3bf 8f4f 	dsb	sy
 801128e:	617b      	str	r3, [r7, #20]
}
 8011290:	bf00      	nop
 8011292:	bf00      	nop
 8011294:	e7fd      	b.n	8011292 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011296:	2300      	movs	r3, #0
 8011298:	61fb      	str	r3, [r7, #28]
 801129a:	e012      	b.n	80112c2 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801129c:	68ba      	ldr	r2, [r7, #8]
 801129e:	69fb      	ldr	r3, [r7, #28]
 80112a0:	4413      	add	r3, r2
 80112a2:	7819      	ldrb	r1, [r3, #0]
 80112a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112a6:	69fb      	ldr	r3, [r7, #28]
 80112a8:	4413      	add	r3, r2
 80112aa:	3334      	adds	r3, #52	@ 0x34
 80112ac:	460a      	mov	r2, r1
 80112ae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80112b0:	68ba      	ldr	r2, [r7, #8]
 80112b2:	69fb      	ldr	r3, [r7, #28]
 80112b4:	4413      	add	r3, r2
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d006      	beq.n	80112ca <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	3301      	adds	r3, #1
 80112c0:	61fb      	str	r3, [r7, #28]
 80112c2:	69fb      	ldr	r3, [r7, #28]
 80112c4:	2b0f      	cmp	r3, #15
 80112c6:	d9e9      	bls.n	801129c <prvInitialiseNewTask+0x60>
 80112c8:	e000      	b.n	80112cc <prvInitialiseNewTask+0x90>
		{
			break;
 80112ca:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80112cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112ce:	2200      	movs	r2, #0
 80112d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80112d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112d6:	2b06      	cmp	r3, #6
 80112d8:	d901      	bls.n	80112de <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80112da:	2306      	movs	r3, #6
 80112dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80112de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80112e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112e8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80112ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112ec:	2200      	movs	r2, #0
 80112ee:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80112f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112f2:	3304      	adds	r3, #4
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7ff f88f 	bl	8010418 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80112fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112fc:	3318      	adds	r3, #24
 80112fe:	4618      	mov	r0, r3
 8011300:	f7ff f88a 	bl	8010418 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011308:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801130a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801130c:	f1c3 0207 	rsb	r2, r3, #7
 8011310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011312:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011318:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801131a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801131c:	2200      	movs	r2, #0
 801131e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011322:	2200      	movs	r2, #0
 8011324:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011328:	683a      	ldr	r2, [r7, #0]
 801132a:	68f9      	ldr	r1, [r7, #12]
 801132c:	69b8      	ldr	r0, [r7, #24]
 801132e:	f000 ffcd 	bl	80122cc <pxPortInitialiseStack>
 8011332:	4602      	mov	r2, r0
 8011334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011336:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8011338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801133a:	2b00      	cmp	r3, #0
 801133c:	d002      	beq.n	8011344 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801133e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011342:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011344:	bf00      	nop
 8011346:	3720      	adds	r7, #32
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}

0801134c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b082      	sub	sp, #8
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011354:	f001 f8aa 	bl	80124ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011358:	4b2a      	ldr	r3, [pc, #168]	@ (8011404 <prvAddNewTaskToReadyList+0xb8>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	3301      	adds	r3, #1
 801135e:	4a29      	ldr	r2, [pc, #164]	@ (8011404 <prvAddNewTaskToReadyList+0xb8>)
 8011360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011362:	4b29      	ldr	r3, [pc, #164]	@ (8011408 <prvAddNewTaskToReadyList+0xbc>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d109      	bne.n	801137e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801136a:	4a27      	ldr	r2, [pc, #156]	@ (8011408 <prvAddNewTaskToReadyList+0xbc>)
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011370:	4b24      	ldr	r3, [pc, #144]	@ (8011404 <prvAddNewTaskToReadyList+0xb8>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2b01      	cmp	r3, #1
 8011376:	d110      	bne.n	801139a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011378:	f000 fc66 	bl	8011c48 <prvInitialiseTaskLists>
 801137c:	e00d      	b.n	801139a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801137e:	4b23      	ldr	r3, [pc, #140]	@ (801140c <prvAddNewTaskToReadyList+0xc0>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d109      	bne.n	801139a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011386:	4b20      	ldr	r3, [pc, #128]	@ (8011408 <prvAddNewTaskToReadyList+0xbc>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011390:	429a      	cmp	r2, r3
 8011392:	d802      	bhi.n	801139a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011394:	4a1c      	ldr	r2, [pc, #112]	@ (8011408 <prvAddNewTaskToReadyList+0xbc>)
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801139a:	4b1d      	ldr	r3, [pc, #116]	@ (8011410 <prvAddNewTaskToReadyList+0xc4>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	3301      	adds	r3, #1
 80113a0:	4a1b      	ldr	r2, [pc, #108]	@ (8011410 <prvAddNewTaskToReadyList+0xc4>)
 80113a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113a8:	2201      	movs	r2, #1
 80113aa:	409a      	lsls	r2, r3
 80113ac:	4b19      	ldr	r3, [pc, #100]	@ (8011414 <prvAddNewTaskToReadyList+0xc8>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	4313      	orrs	r3, r2
 80113b2:	4a18      	ldr	r2, [pc, #96]	@ (8011414 <prvAddNewTaskToReadyList+0xc8>)
 80113b4:	6013      	str	r3, [r2, #0]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113ba:	4613      	mov	r3, r2
 80113bc:	009b      	lsls	r3, r3, #2
 80113be:	4413      	add	r3, r2
 80113c0:	009b      	lsls	r3, r3, #2
 80113c2:	4a15      	ldr	r2, [pc, #84]	@ (8011418 <prvAddNewTaskToReadyList+0xcc>)
 80113c4:	441a      	add	r2, r3
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	3304      	adds	r3, #4
 80113ca:	4619      	mov	r1, r3
 80113cc:	4610      	mov	r0, r2
 80113ce:	f7ff f82f 	bl	8010430 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80113d2:	f001 f89b 	bl	801250c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80113d6:	4b0d      	ldr	r3, [pc, #52]	@ (801140c <prvAddNewTaskToReadyList+0xc0>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d00e      	beq.n	80113fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80113de:	4b0a      	ldr	r3, [pc, #40]	@ (8011408 <prvAddNewTaskToReadyList+0xbc>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d207      	bcs.n	80113fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80113ec:	4b0b      	ldr	r3, [pc, #44]	@ (801141c <prvAddNewTaskToReadyList+0xd0>)
 80113ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80113f2:	601a      	str	r2, [r3, #0]
 80113f4:	f3bf 8f4f 	dsb	sy
 80113f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113fc:	bf00      	nop
 80113fe:	3708      	adds	r7, #8
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}
 8011404:	200013d8 	.word	0x200013d8
 8011408:	200012d8 	.word	0x200012d8
 801140c:	200013e4 	.word	0x200013e4
 8011410:	200013f4 	.word	0x200013f4
 8011414:	200013e0 	.word	0x200013e0
 8011418:	200012dc 	.word	0x200012dc
 801141c:	e000ed04 	.word	0xe000ed04

08011420 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8011420:	b580      	push	{r7, lr}
 8011422:	b08a      	sub	sp, #40	@ 0x28
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
 8011428:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801142a:	2300      	movs	r3, #0
 801142c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d10b      	bne.n	801144c <vTaskDelayUntil+0x2c>
	__asm volatile
 8011434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011438:	f383 8811 	msr	BASEPRI, r3
 801143c:	f3bf 8f6f 	isb	sy
 8011440:	f3bf 8f4f 	dsb	sy
 8011444:	617b      	str	r3, [r7, #20]
}
 8011446:	bf00      	nop
 8011448:	bf00      	nop
 801144a:	e7fd      	b.n	8011448 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d10b      	bne.n	801146a <vTaskDelayUntil+0x4a>
	__asm volatile
 8011452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011456:	f383 8811 	msr	BASEPRI, r3
 801145a:	f3bf 8f6f 	isb	sy
 801145e:	f3bf 8f4f 	dsb	sy
 8011462:	613b      	str	r3, [r7, #16]
}
 8011464:	bf00      	nop
 8011466:	bf00      	nop
 8011468:	e7fd      	b.n	8011466 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 801146a:	4b2a      	ldr	r3, [pc, #168]	@ (8011514 <vTaskDelayUntil+0xf4>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d00b      	beq.n	801148a <vTaskDelayUntil+0x6a>
	__asm volatile
 8011472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011476:	f383 8811 	msr	BASEPRI, r3
 801147a:	f3bf 8f6f 	isb	sy
 801147e:	f3bf 8f4f 	dsb	sy
 8011482:	60fb      	str	r3, [r7, #12]
}
 8011484:	bf00      	nop
 8011486:	bf00      	nop
 8011488:	e7fd      	b.n	8011486 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 801148a:	f000 f8e1 	bl	8011650 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801148e:	4b22      	ldr	r3, [pc, #136]	@ (8011518 <vTaskDelayUntil+0xf8>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	683a      	ldr	r2, [r7, #0]
 801149a:	4413      	add	r3, r2
 801149c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	6a3a      	ldr	r2, [r7, #32]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d20b      	bcs.n	80114c0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	69fa      	ldr	r2, [r7, #28]
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d211      	bcs.n	80114d6 <vTaskDelayUntil+0xb6>
 80114b2:	69fa      	ldr	r2, [r7, #28]
 80114b4:	6a3b      	ldr	r3, [r7, #32]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d90d      	bls.n	80114d6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80114ba:	2301      	movs	r3, #1
 80114bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80114be:	e00a      	b.n	80114d6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	69fa      	ldr	r2, [r7, #28]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d303      	bcc.n	80114d2 <vTaskDelayUntil+0xb2>
 80114ca:	69fa      	ldr	r2, [r7, #28]
 80114cc:	6a3b      	ldr	r3, [r7, #32]
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d901      	bls.n	80114d6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80114d2:	2301      	movs	r3, #1
 80114d4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	69fa      	ldr	r2, [r7, #28]
 80114da:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80114dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d006      	beq.n	80114f0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80114e2:	69fa      	ldr	r2, [r7, #28]
 80114e4:	6a3b      	ldr	r3, [r7, #32]
 80114e6:	1ad3      	subs	r3, r2, r3
 80114e8:	2100      	movs	r1, #0
 80114ea:	4618      	mov	r0, r3
 80114ec:	f000 fe88 	bl	8012200 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80114f0:	f000 f8bc 	bl	801166c <xTaskResumeAll>
 80114f4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80114f6:	69bb      	ldr	r3, [r7, #24]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d107      	bne.n	801150c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80114fc:	4b07      	ldr	r3, [pc, #28]	@ (801151c <vTaskDelayUntil+0xfc>)
 80114fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011502:	601a      	str	r2, [r3, #0]
 8011504:	f3bf 8f4f 	dsb	sy
 8011508:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801150c:	bf00      	nop
 801150e:	3728      	adds	r7, #40	@ 0x28
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	20001400 	.word	0x20001400
 8011518:	200013dc 	.word	0x200013dc
 801151c:	e000ed04 	.word	0xe000ed04

08011520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011520:	b580      	push	{r7, lr}
 8011522:	b084      	sub	sp, #16
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011528:	2300      	movs	r3, #0
 801152a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d018      	beq.n	8011564 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011532:	4b14      	ldr	r3, [pc, #80]	@ (8011584 <vTaskDelay+0x64>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d00b      	beq.n	8011552 <vTaskDelay+0x32>
	__asm volatile
 801153a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801153e:	f383 8811 	msr	BASEPRI, r3
 8011542:	f3bf 8f6f 	isb	sy
 8011546:	f3bf 8f4f 	dsb	sy
 801154a:	60bb      	str	r3, [r7, #8]
}
 801154c:	bf00      	nop
 801154e:	bf00      	nop
 8011550:	e7fd      	b.n	801154e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011552:	f000 f87d 	bl	8011650 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011556:	2100      	movs	r1, #0
 8011558:	6878      	ldr	r0, [r7, #4]
 801155a:	f000 fe51 	bl	8012200 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801155e:	f000 f885 	bl	801166c <xTaskResumeAll>
 8011562:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d107      	bne.n	801157a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801156a:	4b07      	ldr	r3, [pc, #28]	@ (8011588 <vTaskDelay+0x68>)
 801156c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011570:	601a      	str	r2, [r3, #0]
 8011572:	f3bf 8f4f 	dsb	sy
 8011576:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801157a:	bf00      	nop
 801157c:	3710      	adds	r7, #16
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}
 8011582:	bf00      	nop
 8011584:	20001400 	.word	0x20001400
 8011588:	e000ed04 	.word	0xe000ed04

0801158c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b08a      	sub	sp, #40	@ 0x28
 8011590:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011592:	2300      	movs	r3, #0
 8011594:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011596:	2300      	movs	r3, #0
 8011598:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801159a:	463a      	mov	r2, r7
 801159c:	1d39      	adds	r1, r7, #4
 801159e:	f107 0308 	add.w	r3, r7, #8
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7f2 fa28 	bl	80039f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80115a8:	6839      	ldr	r1, [r7, #0]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	68ba      	ldr	r2, [r7, #8]
 80115ae:	9202      	str	r2, [sp, #8]
 80115b0:	9301      	str	r3, [sp, #4]
 80115b2:	2300      	movs	r3, #0
 80115b4:	9300      	str	r3, [sp, #0]
 80115b6:	2300      	movs	r3, #0
 80115b8:	460a      	mov	r2, r1
 80115ba:	491f      	ldr	r1, [pc, #124]	@ (8011638 <vTaskStartScheduler+0xac>)
 80115bc:	481f      	ldr	r0, [pc, #124]	@ (801163c <vTaskStartScheduler+0xb0>)
 80115be:	f7ff fd99 	bl	80110f4 <xTaskCreateStatic>
 80115c2:	4603      	mov	r3, r0
 80115c4:	4a1e      	ldr	r2, [pc, #120]	@ (8011640 <vTaskStartScheduler+0xb4>)
 80115c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80115c8:	4b1d      	ldr	r3, [pc, #116]	@ (8011640 <vTaskStartScheduler+0xb4>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d002      	beq.n	80115d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80115d0:	2301      	movs	r3, #1
 80115d2:	617b      	str	r3, [r7, #20]
 80115d4:	e001      	b.n	80115da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80115d6:	2300      	movs	r3, #0
 80115d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d116      	bne.n	801160e <vTaskStartScheduler+0x82>
	__asm volatile
 80115e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115e4:	f383 8811 	msr	BASEPRI, r3
 80115e8:	f3bf 8f6f 	isb	sy
 80115ec:	f3bf 8f4f 	dsb	sy
 80115f0:	613b      	str	r3, [r7, #16]
}
 80115f2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80115f4:	4b13      	ldr	r3, [pc, #76]	@ (8011644 <vTaskStartScheduler+0xb8>)
 80115f6:	f04f 32ff 	mov.w	r2, #4294967295
 80115fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80115fc:	4b12      	ldr	r3, [pc, #72]	@ (8011648 <vTaskStartScheduler+0xbc>)
 80115fe:	2201      	movs	r2, #1
 8011600:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011602:	4b12      	ldr	r3, [pc, #72]	@ (801164c <vTaskStartScheduler+0xc0>)
 8011604:	2200      	movs	r2, #0
 8011606:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011608:	f000 fede 	bl	80123c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801160c:	e00f      	b.n	801162e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011614:	d10b      	bne.n	801162e <vTaskStartScheduler+0xa2>
	__asm volatile
 8011616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801161a:	f383 8811 	msr	BASEPRI, r3
 801161e:	f3bf 8f6f 	isb	sy
 8011622:	f3bf 8f4f 	dsb	sy
 8011626:	60fb      	str	r3, [r7, #12]
}
 8011628:	bf00      	nop
 801162a:	bf00      	nop
 801162c:	e7fd      	b.n	801162a <vTaskStartScheduler+0x9e>
}
 801162e:	bf00      	nop
 8011630:	3718      	adds	r7, #24
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}
 8011636:	bf00      	nop
 8011638:	080130f0 	.word	0x080130f0
 801163c:	08011c19 	.word	0x08011c19
 8011640:	200013fc 	.word	0x200013fc
 8011644:	200013f8 	.word	0x200013f8
 8011648:	200013e4 	.word	0x200013e4
 801164c:	200013dc 	.word	0x200013dc

08011650 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011650:	b480      	push	{r7}
 8011652:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011654:	4b04      	ldr	r3, [pc, #16]	@ (8011668 <vTaskSuspendAll+0x18>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	3301      	adds	r3, #1
 801165a:	4a03      	ldr	r2, [pc, #12]	@ (8011668 <vTaskSuspendAll+0x18>)
 801165c:	6013      	str	r3, [r2, #0]
}
 801165e:	bf00      	nop
 8011660:	46bd      	mov	sp, r7
 8011662:	bc80      	pop	{r7}
 8011664:	4770      	bx	lr
 8011666:	bf00      	nop
 8011668:	20001400 	.word	0x20001400

0801166c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b084      	sub	sp, #16
 8011670:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011672:	2300      	movs	r3, #0
 8011674:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011676:	2300      	movs	r3, #0
 8011678:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801167a:	4b42      	ldr	r3, [pc, #264]	@ (8011784 <xTaskResumeAll+0x118>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d10b      	bne.n	801169a <xTaskResumeAll+0x2e>
	__asm volatile
 8011682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011686:	f383 8811 	msr	BASEPRI, r3
 801168a:	f3bf 8f6f 	isb	sy
 801168e:	f3bf 8f4f 	dsb	sy
 8011692:	603b      	str	r3, [r7, #0]
}
 8011694:	bf00      	nop
 8011696:	bf00      	nop
 8011698:	e7fd      	b.n	8011696 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801169a:	f000 ff07 	bl	80124ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801169e:	4b39      	ldr	r3, [pc, #228]	@ (8011784 <xTaskResumeAll+0x118>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	3b01      	subs	r3, #1
 80116a4:	4a37      	ldr	r2, [pc, #220]	@ (8011784 <xTaskResumeAll+0x118>)
 80116a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116a8:	4b36      	ldr	r3, [pc, #216]	@ (8011784 <xTaskResumeAll+0x118>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d161      	bne.n	8011774 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80116b0:	4b35      	ldr	r3, [pc, #212]	@ (8011788 <xTaskResumeAll+0x11c>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d05d      	beq.n	8011774 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80116b8:	e02e      	b.n	8011718 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80116ba:	4b34      	ldr	r3, [pc, #208]	@ (801178c <xTaskResumeAll+0x120>)
 80116bc:	68db      	ldr	r3, [r3, #12]
 80116be:	68db      	ldr	r3, [r3, #12]
 80116c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	3318      	adds	r3, #24
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fe ff0d 	bl	80104e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	3304      	adds	r3, #4
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7fe ff08 	bl	80104e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116da:	2201      	movs	r2, #1
 80116dc:	409a      	lsls	r2, r3
 80116de:	4b2c      	ldr	r3, [pc, #176]	@ (8011790 <xTaskResumeAll+0x124>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	4313      	orrs	r3, r2
 80116e4:	4a2a      	ldr	r2, [pc, #168]	@ (8011790 <xTaskResumeAll+0x124>)
 80116e6:	6013      	str	r3, [r2, #0]
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116ec:	4613      	mov	r3, r2
 80116ee:	009b      	lsls	r3, r3, #2
 80116f0:	4413      	add	r3, r2
 80116f2:	009b      	lsls	r3, r3, #2
 80116f4:	4a27      	ldr	r2, [pc, #156]	@ (8011794 <xTaskResumeAll+0x128>)
 80116f6:	441a      	add	r2, r3
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	3304      	adds	r3, #4
 80116fc:	4619      	mov	r1, r3
 80116fe:	4610      	mov	r0, r2
 8011700:	f7fe fe96 	bl	8010430 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011708:	4b23      	ldr	r3, [pc, #140]	@ (8011798 <xTaskResumeAll+0x12c>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801170e:	429a      	cmp	r2, r3
 8011710:	d302      	bcc.n	8011718 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011712:	4b22      	ldr	r3, [pc, #136]	@ (801179c <xTaskResumeAll+0x130>)
 8011714:	2201      	movs	r2, #1
 8011716:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011718:	4b1c      	ldr	r3, [pc, #112]	@ (801178c <xTaskResumeAll+0x120>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d1cc      	bne.n	80116ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d001      	beq.n	801172a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011726:	f000 fb65 	bl	8011df4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801172a:	4b1d      	ldr	r3, [pc, #116]	@ (80117a0 <xTaskResumeAll+0x134>)
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d010      	beq.n	8011758 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011736:	f000 f845 	bl	80117c4 <xTaskIncrementTick>
 801173a:	4603      	mov	r3, r0
 801173c:	2b00      	cmp	r3, #0
 801173e:	d002      	beq.n	8011746 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011740:	4b16      	ldr	r3, [pc, #88]	@ (801179c <xTaskResumeAll+0x130>)
 8011742:	2201      	movs	r2, #1
 8011744:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	3b01      	subs	r3, #1
 801174a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d1f1      	bne.n	8011736 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8011752:	4b13      	ldr	r3, [pc, #76]	@ (80117a0 <xTaskResumeAll+0x134>)
 8011754:	2200      	movs	r2, #0
 8011756:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011758:	4b10      	ldr	r3, [pc, #64]	@ (801179c <xTaskResumeAll+0x130>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d009      	beq.n	8011774 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011760:	2301      	movs	r3, #1
 8011762:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011764:	4b0f      	ldr	r3, [pc, #60]	@ (80117a4 <xTaskResumeAll+0x138>)
 8011766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801176a:	601a      	str	r2, [r3, #0]
 801176c:	f3bf 8f4f 	dsb	sy
 8011770:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011774:	f000 feca 	bl	801250c <vPortExitCritical>

	return xAlreadyYielded;
 8011778:	68bb      	ldr	r3, [r7, #8]
}
 801177a:	4618      	mov	r0, r3
 801177c:	3710      	adds	r7, #16
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}
 8011782:	bf00      	nop
 8011784:	20001400 	.word	0x20001400
 8011788:	200013d8 	.word	0x200013d8
 801178c:	20001398 	.word	0x20001398
 8011790:	200013e0 	.word	0x200013e0
 8011794:	200012dc 	.word	0x200012dc
 8011798:	200012d8 	.word	0x200012d8
 801179c:	200013ec 	.word	0x200013ec
 80117a0:	200013e8 	.word	0x200013e8
 80117a4:	e000ed04 	.word	0xe000ed04

080117a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80117a8:	b480      	push	{r7}
 80117aa:	b083      	sub	sp, #12
 80117ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80117ae:	4b04      	ldr	r3, [pc, #16]	@ (80117c0 <xTaskGetTickCount+0x18>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80117b4:	687b      	ldr	r3, [r7, #4]
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	370c      	adds	r7, #12
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bc80      	pop	{r7}
 80117be:	4770      	bx	lr
 80117c0:	200013dc 	.word	0x200013dc

080117c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b086      	sub	sp, #24
 80117c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80117ca:	2300      	movs	r3, #0
 80117cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80117ce:	4b51      	ldr	r3, [pc, #324]	@ (8011914 <xTaskIncrementTick+0x150>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	f040 808e 	bne.w	80118f4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80117d8:	4b4f      	ldr	r3, [pc, #316]	@ (8011918 <xTaskIncrementTick+0x154>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	3301      	adds	r3, #1
 80117de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80117e0:	4a4d      	ldr	r2, [pc, #308]	@ (8011918 <xTaskIncrementTick+0x154>)
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d121      	bne.n	8011830 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80117ec:	4b4b      	ldr	r3, [pc, #300]	@ (801191c <xTaskIncrementTick+0x158>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d00b      	beq.n	801180e <xTaskIncrementTick+0x4a>
	__asm volatile
 80117f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117fa:	f383 8811 	msr	BASEPRI, r3
 80117fe:	f3bf 8f6f 	isb	sy
 8011802:	f3bf 8f4f 	dsb	sy
 8011806:	603b      	str	r3, [r7, #0]
}
 8011808:	bf00      	nop
 801180a:	bf00      	nop
 801180c:	e7fd      	b.n	801180a <xTaskIncrementTick+0x46>
 801180e:	4b43      	ldr	r3, [pc, #268]	@ (801191c <xTaskIncrementTick+0x158>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	60fb      	str	r3, [r7, #12]
 8011814:	4b42      	ldr	r3, [pc, #264]	@ (8011920 <xTaskIncrementTick+0x15c>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	4a40      	ldr	r2, [pc, #256]	@ (801191c <xTaskIncrementTick+0x158>)
 801181a:	6013      	str	r3, [r2, #0]
 801181c:	4a40      	ldr	r2, [pc, #256]	@ (8011920 <xTaskIncrementTick+0x15c>)
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	6013      	str	r3, [r2, #0]
 8011822:	4b40      	ldr	r3, [pc, #256]	@ (8011924 <xTaskIncrementTick+0x160>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	3301      	adds	r3, #1
 8011828:	4a3e      	ldr	r2, [pc, #248]	@ (8011924 <xTaskIncrementTick+0x160>)
 801182a:	6013      	str	r3, [r2, #0]
 801182c:	f000 fae2 	bl	8011df4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011830:	4b3d      	ldr	r3, [pc, #244]	@ (8011928 <xTaskIncrementTick+0x164>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	693a      	ldr	r2, [r7, #16]
 8011836:	429a      	cmp	r2, r3
 8011838:	d34d      	bcc.n	80118d6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801183a:	4b38      	ldr	r3, [pc, #224]	@ (801191c <xTaskIncrementTick+0x158>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d101      	bne.n	8011848 <xTaskIncrementTick+0x84>
 8011844:	2301      	movs	r3, #1
 8011846:	e000      	b.n	801184a <xTaskIncrementTick+0x86>
 8011848:	2300      	movs	r3, #0
 801184a:	2b00      	cmp	r3, #0
 801184c:	d004      	beq.n	8011858 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801184e:	4b36      	ldr	r3, [pc, #216]	@ (8011928 <xTaskIncrementTick+0x164>)
 8011850:	f04f 32ff 	mov.w	r2, #4294967295
 8011854:	601a      	str	r2, [r3, #0]
					break;
 8011856:	e03e      	b.n	80118d6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011858:	4b30      	ldr	r3, [pc, #192]	@ (801191c <xTaskIncrementTick+0x158>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	68db      	ldr	r3, [r3, #12]
 801185e:	68db      	ldr	r3, [r3, #12]
 8011860:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011868:	693a      	ldr	r2, [r7, #16]
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	429a      	cmp	r2, r3
 801186e:	d203      	bcs.n	8011878 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011870:	4a2d      	ldr	r2, [pc, #180]	@ (8011928 <xTaskIncrementTick+0x164>)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6013      	str	r3, [r2, #0]
						break;
 8011876:	e02e      	b.n	80118d6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	3304      	adds	r3, #4
 801187c:	4618      	mov	r0, r3
 801187e:	f7fe fe32 	bl	80104e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011886:	2b00      	cmp	r3, #0
 8011888:	d004      	beq.n	8011894 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	3318      	adds	r3, #24
 801188e:	4618      	mov	r0, r3
 8011890:	f7fe fe29 	bl	80104e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011898:	2201      	movs	r2, #1
 801189a:	409a      	lsls	r2, r3
 801189c:	4b23      	ldr	r3, [pc, #140]	@ (801192c <xTaskIncrementTick+0x168>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	4313      	orrs	r3, r2
 80118a2:	4a22      	ldr	r2, [pc, #136]	@ (801192c <xTaskIncrementTick+0x168>)
 80118a4:	6013      	str	r3, [r2, #0]
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80118aa:	4613      	mov	r3, r2
 80118ac:	009b      	lsls	r3, r3, #2
 80118ae:	4413      	add	r3, r2
 80118b0:	009b      	lsls	r3, r3, #2
 80118b2:	4a1f      	ldr	r2, [pc, #124]	@ (8011930 <xTaskIncrementTick+0x16c>)
 80118b4:	441a      	add	r2, r3
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	3304      	adds	r3, #4
 80118ba:	4619      	mov	r1, r3
 80118bc:	4610      	mov	r0, r2
 80118be:	f7fe fdb7 	bl	8010430 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80118c6:	4b1b      	ldr	r3, [pc, #108]	@ (8011934 <xTaskIncrementTick+0x170>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118cc:	429a      	cmp	r2, r3
 80118ce:	d3b4      	bcc.n	801183a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80118d0:	2301      	movs	r3, #1
 80118d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118d4:	e7b1      	b.n	801183a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80118d6:	4b17      	ldr	r3, [pc, #92]	@ (8011934 <xTaskIncrementTick+0x170>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80118dc:	4914      	ldr	r1, [pc, #80]	@ (8011930 <xTaskIncrementTick+0x16c>)
 80118de:	4613      	mov	r3, r2
 80118e0:	009b      	lsls	r3, r3, #2
 80118e2:	4413      	add	r3, r2
 80118e4:	009b      	lsls	r3, r3, #2
 80118e6:	440b      	add	r3, r1
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	2b01      	cmp	r3, #1
 80118ec:	d907      	bls.n	80118fe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80118ee:	2301      	movs	r3, #1
 80118f0:	617b      	str	r3, [r7, #20]
 80118f2:	e004      	b.n	80118fe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80118f4:	4b10      	ldr	r3, [pc, #64]	@ (8011938 <xTaskIncrementTick+0x174>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	3301      	adds	r3, #1
 80118fa:	4a0f      	ldr	r2, [pc, #60]	@ (8011938 <xTaskIncrementTick+0x174>)
 80118fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80118fe:	4b0f      	ldr	r3, [pc, #60]	@ (801193c <xTaskIncrementTick+0x178>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d001      	beq.n	801190a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8011906:	2301      	movs	r3, #1
 8011908:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801190a:	697b      	ldr	r3, [r7, #20]
}
 801190c:	4618      	mov	r0, r3
 801190e:	3718      	adds	r7, #24
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}
 8011914:	20001400 	.word	0x20001400
 8011918:	200013dc 	.word	0x200013dc
 801191c:	20001390 	.word	0x20001390
 8011920:	20001394 	.word	0x20001394
 8011924:	200013f0 	.word	0x200013f0
 8011928:	200013f8 	.word	0x200013f8
 801192c:	200013e0 	.word	0x200013e0
 8011930:	200012dc 	.word	0x200012dc
 8011934:	200012d8 	.word	0x200012d8
 8011938:	200013e8 	.word	0x200013e8
 801193c:	200013ec 	.word	0x200013ec

08011940 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011940:	b480      	push	{r7}
 8011942:	b087      	sub	sp, #28
 8011944:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011946:	4b27      	ldr	r3, [pc, #156]	@ (80119e4 <vTaskSwitchContext+0xa4>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d003      	beq.n	8011956 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801194e:	4b26      	ldr	r3, [pc, #152]	@ (80119e8 <vTaskSwitchContext+0xa8>)
 8011950:	2201      	movs	r2, #1
 8011952:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011954:	e040      	b.n	80119d8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8011956:	4b24      	ldr	r3, [pc, #144]	@ (80119e8 <vTaskSwitchContext+0xa8>)
 8011958:	2200      	movs	r2, #0
 801195a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801195c:	4b23      	ldr	r3, [pc, #140]	@ (80119ec <vTaskSwitchContext+0xac>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	fab3 f383 	clz	r3, r3
 8011968:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801196a:	7afb      	ldrb	r3, [r7, #11]
 801196c:	f1c3 031f 	rsb	r3, r3, #31
 8011970:	617b      	str	r3, [r7, #20]
 8011972:	491f      	ldr	r1, [pc, #124]	@ (80119f0 <vTaskSwitchContext+0xb0>)
 8011974:	697a      	ldr	r2, [r7, #20]
 8011976:	4613      	mov	r3, r2
 8011978:	009b      	lsls	r3, r3, #2
 801197a:	4413      	add	r3, r2
 801197c:	009b      	lsls	r3, r3, #2
 801197e:	440b      	add	r3, r1
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d10b      	bne.n	801199e <vTaskSwitchContext+0x5e>
	__asm volatile
 8011986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801198a:	f383 8811 	msr	BASEPRI, r3
 801198e:	f3bf 8f6f 	isb	sy
 8011992:	f3bf 8f4f 	dsb	sy
 8011996:	607b      	str	r3, [r7, #4]
}
 8011998:	bf00      	nop
 801199a:	bf00      	nop
 801199c:	e7fd      	b.n	801199a <vTaskSwitchContext+0x5a>
 801199e:	697a      	ldr	r2, [r7, #20]
 80119a0:	4613      	mov	r3, r2
 80119a2:	009b      	lsls	r3, r3, #2
 80119a4:	4413      	add	r3, r2
 80119a6:	009b      	lsls	r3, r3, #2
 80119a8:	4a11      	ldr	r2, [pc, #68]	@ (80119f0 <vTaskSwitchContext+0xb0>)
 80119aa:	4413      	add	r3, r2
 80119ac:	613b      	str	r3, [r7, #16]
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	685b      	ldr	r3, [r3, #4]
 80119b2:	685a      	ldr	r2, [r3, #4]
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	605a      	str	r2, [r3, #4]
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	685a      	ldr	r2, [r3, #4]
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	3308      	adds	r3, #8
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d104      	bne.n	80119ce <vTaskSwitchContext+0x8e>
 80119c4:	693b      	ldr	r3, [r7, #16]
 80119c6:	685b      	ldr	r3, [r3, #4]
 80119c8:	685a      	ldr	r2, [r3, #4]
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	605a      	str	r2, [r3, #4]
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	68db      	ldr	r3, [r3, #12]
 80119d4:	4a07      	ldr	r2, [pc, #28]	@ (80119f4 <vTaskSwitchContext+0xb4>)
 80119d6:	6013      	str	r3, [r2, #0]
}
 80119d8:	bf00      	nop
 80119da:	371c      	adds	r7, #28
 80119dc:	46bd      	mov	sp, r7
 80119de:	bc80      	pop	{r7}
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop
 80119e4:	20001400 	.word	0x20001400
 80119e8:	200013ec 	.word	0x200013ec
 80119ec:	200013e0 	.word	0x200013e0
 80119f0:	200012dc 	.word	0x200012dc
 80119f4:	200012d8 	.word	0x200012d8

080119f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b084      	sub	sp, #16
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d10b      	bne.n	8011a20 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8011a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a0c:	f383 8811 	msr	BASEPRI, r3
 8011a10:	f3bf 8f6f 	isb	sy
 8011a14:	f3bf 8f4f 	dsb	sy
 8011a18:	60fb      	str	r3, [r7, #12]
}
 8011a1a:	bf00      	nop
 8011a1c:	bf00      	nop
 8011a1e:	e7fd      	b.n	8011a1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011a20:	4b07      	ldr	r3, [pc, #28]	@ (8011a40 <vTaskPlaceOnEventList+0x48>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	3318      	adds	r3, #24
 8011a26:	4619      	mov	r1, r3
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f7fe fd24 	bl	8010476 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011a2e:	2101      	movs	r1, #1
 8011a30:	6838      	ldr	r0, [r7, #0]
 8011a32:	f000 fbe5 	bl	8012200 <prvAddCurrentTaskToDelayedList>
}
 8011a36:	bf00      	nop
 8011a38:	3710      	adds	r7, #16
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}
 8011a3e:	bf00      	nop
 8011a40:	200012d8 	.word	0x200012d8

08011a44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b086      	sub	sp, #24
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	68db      	ldr	r3, [r3, #12]
 8011a50:	68db      	ldr	r3, [r3, #12]
 8011a52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d10b      	bne.n	8011a72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8011a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a5e:	f383 8811 	msr	BASEPRI, r3
 8011a62:	f3bf 8f6f 	isb	sy
 8011a66:	f3bf 8f4f 	dsb	sy
 8011a6a:	60fb      	str	r3, [r7, #12]
}
 8011a6c:	bf00      	nop
 8011a6e:	bf00      	nop
 8011a70:	e7fd      	b.n	8011a6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	3318      	adds	r3, #24
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7fe fd35 	bl	80104e6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8011af4 <xTaskRemoveFromEventList+0xb0>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d11c      	bne.n	8011abe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	3304      	adds	r3, #4
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f7fe fd2c 	bl	80104e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011a8e:	693b      	ldr	r3, [r7, #16]
 8011a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a92:	2201      	movs	r2, #1
 8011a94:	409a      	lsls	r2, r3
 8011a96:	4b18      	ldr	r3, [pc, #96]	@ (8011af8 <xTaskRemoveFromEventList+0xb4>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	4313      	orrs	r3, r2
 8011a9c:	4a16      	ldr	r2, [pc, #88]	@ (8011af8 <xTaskRemoveFromEventList+0xb4>)
 8011a9e:	6013      	str	r3, [r2, #0]
 8011aa0:	693b      	ldr	r3, [r7, #16]
 8011aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011aa4:	4613      	mov	r3, r2
 8011aa6:	009b      	lsls	r3, r3, #2
 8011aa8:	4413      	add	r3, r2
 8011aaa:	009b      	lsls	r3, r3, #2
 8011aac:	4a13      	ldr	r2, [pc, #76]	@ (8011afc <xTaskRemoveFromEventList+0xb8>)
 8011aae:	441a      	add	r2, r3
 8011ab0:	693b      	ldr	r3, [r7, #16]
 8011ab2:	3304      	adds	r3, #4
 8011ab4:	4619      	mov	r1, r3
 8011ab6:	4610      	mov	r0, r2
 8011ab8:	f7fe fcba 	bl	8010430 <vListInsertEnd>
 8011abc:	e005      	b.n	8011aca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011abe:	693b      	ldr	r3, [r7, #16]
 8011ac0:	3318      	adds	r3, #24
 8011ac2:	4619      	mov	r1, r3
 8011ac4:	480e      	ldr	r0, [pc, #56]	@ (8011b00 <xTaskRemoveFromEventList+0xbc>)
 8011ac6:	f7fe fcb3 	bl	8010430 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ace:	4b0d      	ldr	r3, [pc, #52]	@ (8011b04 <xTaskRemoveFromEventList+0xc0>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d905      	bls.n	8011ae4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011ad8:	2301      	movs	r3, #1
 8011ada:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011adc:	4b0a      	ldr	r3, [pc, #40]	@ (8011b08 <xTaskRemoveFromEventList+0xc4>)
 8011ade:	2201      	movs	r2, #1
 8011ae0:	601a      	str	r2, [r3, #0]
 8011ae2:	e001      	b.n	8011ae8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8011ae8:	697b      	ldr	r3, [r7, #20]
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3718      	adds	r7, #24
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}
 8011af2:	bf00      	nop
 8011af4:	20001400 	.word	0x20001400
 8011af8:	200013e0 	.word	0x200013e0
 8011afc:	200012dc 	.word	0x200012dc
 8011b00:	20001398 	.word	0x20001398
 8011b04:	200012d8 	.word	0x200012d8
 8011b08:	200013ec 	.word	0x200013ec

08011b0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b083      	sub	sp, #12
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011b14:	4b06      	ldr	r3, [pc, #24]	@ (8011b30 <vTaskInternalSetTimeOutState+0x24>)
 8011b16:	681a      	ldr	r2, [r3, #0]
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011b1c:	4b05      	ldr	r3, [pc, #20]	@ (8011b34 <vTaskInternalSetTimeOutState+0x28>)
 8011b1e:	681a      	ldr	r2, [r3, #0]
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	605a      	str	r2, [r3, #4]
}
 8011b24:	bf00      	nop
 8011b26:	370c      	adds	r7, #12
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bc80      	pop	{r7}
 8011b2c:	4770      	bx	lr
 8011b2e:	bf00      	nop
 8011b30:	200013f0 	.word	0x200013f0
 8011b34:	200013dc 	.word	0x200013dc

08011b38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b088      	sub	sp, #32
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d10b      	bne.n	8011b60 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b4c:	f383 8811 	msr	BASEPRI, r3
 8011b50:	f3bf 8f6f 	isb	sy
 8011b54:	f3bf 8f4f 	dsb	sy
 8011b58:	613b      	str	r3, [r7, #16]
}
 8011b5a:	bf00      	nop
 8011b5c:	bf00      	nop
 8011b5e:	e7fd      	b.n	8011b5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d10b      	bne.n	8011b7e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8011b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b6a:	f383 8811 	msr	BASEPRI, r3
 8011b6e:	f3bf 8f6f 	isb	sy
 8011b72:	f3bf 8f4f 	dsb	sy
 8011b76:	60fb      	str	r3, [r7, #12]
}
 8011b78:	bf00      	nop
 8011b7a:	bf00      	nop
 8011b7c:	e7fd      	b.n	8011b7a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011b7e:	f000 fc95 	bl	80124ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011b82:	4b1d      	ldr	r3, [pc, #116]	@ (8011bf8 <xTaskCheckForTimeOut+0xc0>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	685b      	ldr	r3, [r3, #4]
 8011b8c:	69ba      	ldr	r2, [r7, #24]
 8011b8e:	1ad3      	subs	r3, r2, r3
 8011b90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b9a:	d102      	bne.n	8011ba2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	61fb      	str	r3, [r7, #28]
 8011ba0:	e023      	b.n	8011bea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681a      	ldr	r2, [r3, #0]
 8011ba6:	4b15      	ldr	r3, [pc, #84]	@ (8011bfc <xTaskCheckForTimeOut+0xc4>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d007      	beq.n	8011bbe <xTaskCheckForTimeOut+0x86>
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	685b      	ldr	r3, [r3, #4]
 8011bb2:	69ba      	ldr	r2, [r7, #24]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d302      	bcc.n	8011bbe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011bb8:	2301      	movs	r3, #1
 8011bba:	61fb      	str	r3, [r7, #28]
 8011bbc:	e015      	b.n	8011bea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	697a      	ldr	r2, [r7, #20]
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d20b      	bcs.n	8011be0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	681a      	ldr	r2, [r3, #0]
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	1ad2      	subs	r2, r2, r3
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f7ff ff99 	bl	8011b0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	61fb      	str	r3, [r7, #28]
 8011bde:	e004      	b.n	8011bea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	2200      	movs	r2, #0
 8011be4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011be6:	2301      	movs	r3, #1
 8011be8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011bea:	f000 fc8f 	bl	801250c <vPortExitCritical>

	return xReturn;
 8011bee:	69fb      	ldr	r3, [r7, #28]
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3720      	adds	r7, #32
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}
 8011bf8:	200013dc 	.word	0x200013dc
 8011bfc:	200013f0 	.word	0x200013f0

08011c00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011c00:	b480      	push	{r7}
 8011c02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011c04:	4b03      	ldr	r3, [pc, #12]	@ (8011c14 <vTaskMissedYield+0x14>)
 8011c06:	2201      	movs	r2, #1
 8011c08:	601a      	str	r2, [r3, #0]
}
 8011c0a:	bf00      	nop
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bc80      	pop	{r7}
 8011c10:	4770      	bx	lr
 8011c12:	bf00      	nop
 8011c14:	200013ec 	.word	0x200013ec

08011c18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b082      	sub	sp, #8
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011c20:	f000 f852 	bl	8011cc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011c24:	4b06      	ldr	r3, [pc, #24]	@ (8011c40 <prvIdleTask+0x28>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	2b01      	cmp	r3, #1
 8011c2a:	d9f9      	bls.n	8011c20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011c2c:	4b05      	ldr	r3, [pc, #20]	@ (8011c44 <prvIdleTask+0x2c>)
 8011c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c32:	601a      	str	r2, [r3, #0]
 8011c34:	f3bf 8f4f 	dsb	sy
 8011c38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011c3c:	e7f0      	b.n	8011c20 <prvIdleTask+0x8>
 8011c3e:	bf00      	nop
 8011c40:	200012dc 	.word	0x200012dc
 8011c44:	e000ed04 	.word	0xe000ed04

08011c48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b082      	sub	sp, #8
 8011c4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011c4e:	2300      	movs	r3, #0
 8011c50:	607b      	str	r3, [r7, #4]
 8011c52:	e00c      	b.n	8011c6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011c54:	687a      	ldr	r2, [r7, #4]
 8011c56:	4613      	mov	r3, r2
 8011c58:	009b      	lsls	r3, r3, #2
 8011c5a:	4413      	add	r3, r2
 8011c5c:	009b      	lsls	r3, r3, #2
 8011c5e:	4a12      	ldr	r2, [pc, #72]	@ (8011ca8 <prvInitialiseTaskLists+0x60>)
 8011c60:	4413      	add	r3, r2
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7fe fbb9 	bl	80103da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	3301      	adds	r3, #1
 8011c6c:	607b      	str	r3, [r7, #4]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2b06      	cmp	r3, #6
 8011c72:	d9ef      	bls.n	8011c54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011c74:	480d      	ldr	r0, [pc, #52]	@ (8011cac <prvInitialiseTaskLists+0x64>)
 8011c76:	f7fe fbb0 	bl	80103da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011c7a:	480d      	ldr	r0, [pc, #52]	@ (8011cb0 <prvInitialiseTaskLists+0x68>)
 8011c7c:	f7fe fbad 	bl	80103da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011c80:	480c      	ldr	r0, [pc, #48]	@ (8011cb4 <prvInitialiseTaskLists+0x6c>)
 8011c82:	f7fe fbaa 	bl	80103da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011c86:	480c      	ldr	r0, [pc, #48]	@ (8011cb8 <prvInitialiseTaskLists+0x70>)
 8011c88:	f7fe fba7 	bl	80103da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011c8c:	480b      	ldr	r0, [pc, #44]	@ (8011cbc <prvInitialiseTaskLists+0x74>)
 8011c8e:	f7fe fba4 	bl	80103da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011c92:	4b0b      	ldr	r3, [pc, #44]	@ (8011cc0 <prvInitialiseTaskLists+0x78>)
 8011c94:	4a05      	ldr	r2, [pc, #20]	@ (8011cac <prvInitialiseTaskLists+0x64>)
 8011c96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011c98:	4b0a      	ldr	r3, [pc, #40]	@ (8011cc4 <prvInitialiseTaskLists+0x7c>)
 8011c9a:	4a05      	ldr	r2, [pc, #20]	@ (8011cb0 <prvInitialiseTaskLists+0x68>)
 8011c9c:	601a      	str	r2, [r3, #0]
}
 8011c9e:	bf00      	nop
 8011ca0:	3708      	adds	r7, #8
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}
 8011ca6:	bf00      	nop
 8011ca8:	200012dc 	.word	0x200012dc
 8011cac:	20001368 	.word	0x20001368
 8011cb0:	2000137c 	.word	0x2000137c
 8011cb4:	20001398 	.word	0x20001398
 8011cb8:	200013ac 	.word	0x200013ac
 8011cbc:	200013c4 	.word	0x200013c4
 8011cc0:	20001390 	.word	0x20001390
 8011cc4:	20001394 	.word	0x20001394

08011cc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b082      	sub	sp, #8
 8011ccc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011cce:	e019      	b.n	8011d04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011cd0:	f000 fbec 	bl	80124ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8011cd4:	4b10      	ldr	r3, [pc, #64]	@ (8011d18 <prvCheckTasksWaitingTermination+0x50>)
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	68db      	ldr	r3, [r3, #12]
 8011cda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	3304      	adds	r3, #4
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7fe fc00 	bl	80104e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8011d1c <prvCheckTasksWaitingTermination+0x54>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	3b01      	subs	r3, #1
 8011cec:	4a0b      	ldr	r2, [pc, #44]	@ (8011d1c <prvCheckTasksWaitingTermination+0x54>)
 8011cee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8011d20 <prvCheckTasksWaitingTermination+0x58>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	3b01      	subs	r3, #1
 8011cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8011d20 <prvCheckTasksWaitingTermination+0x58>)
 8011cf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011cfa:	f000 fc07 	bl	801250c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f000 f848 	bl	8011d94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d04:	4b06      	ldr	r3, [pc, #24]	@ (8011d20 <prvCheckTasksWaitingTermination+0x58>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d1e1      	bne.n	8011cd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011d0c:	bf00      	nop
 8011d0e:	bf00      	nop
 8011d10:	3708      	adds	r7, #8
 8011d12:	46bd      	mov	sp, r7
 8011d14:	bd80      	pop	{r7, pc}
 8011d16:	bf00      	nop
 8011d18:	200013ac 	.word	0x200013ac
 8011d1c:	200013d8 	.word	0x200013d8
 8011d20:	200013c0 	.word	0x200013c0

08011d24 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8011d24:	b480      	push	{r7}
 8011d26:	b085      	sub	sp, #20
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8011d30:	e005      	b.n	8011d3e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	3301      	adds	r3, #1
 8011d36:	607b      	str	r3, [r7, #4]
			ulCount++;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	3301      	adds	r3, #1
 8011d3c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	781b      	ldrb	r3, [r3, #0]
 8011d42:	2ba5      	cmp	r3, #165	@ 0xa5
 8011d44:	d0f5      	beq.n	8011d32 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	089b      	lsrs	r3, r3, #2
 8011d4a:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	b29b      	uxth	r3, r3
	}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3714      	adds	r7, #20
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bc80      	pop	{r7}
 8011d58:	4770      	bx	lr
	...

08011d5c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b086      	sub	sp, #24
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d102      	bne.n	8011d70 <uxTaskGetStackHighWaterMark+0x14>
 8011d6a:	4b09      	ldr	r3, [pc, #36]	@ (8011d90 <uxTaskGetStackHighWaterMark+0x34>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	e000      	b.n	8011d72 <uxTaskGetStackHighWaterMark+0x16>
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8011d74:	697b      	ldr	r3, [r7, #20]
 8011d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d78:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8011d7a:	6938      	ldr	r0, [r7, #16]
 8011d7c:	f7ff ffd2 	bl	8011d24 <prvTaskCheckFreeStackSpace>
 8011d80:	4603      	mov	r3, r0
 8011d82:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8011d84:	68fb      	ldr	r3, [r7, #12]
	}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3718      	adds	r7, #24
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	200012d8 	.word	0x200012d8

08011d94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b084      	sub	sp, #16
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d108      	bne.n	8011db8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011daa:	4618      	mov	r0, r3
 8011dac:	f000 fd48 	bl	8012840 <vPortFree>
				vPortFree( pxTCB );
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f000 fd45 	bl	8012840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011db6:	e019      	b.n	8011dec <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	d103      	bne.n	8011dca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f000 fd3c 	bl	8012840 <vPortFree>
	}
 8011dc8:	e010      	b.n	8011dec <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011dd0:	2b02      	cmp	r3, #2
 8011dd2:	d00b      	beq.n	8011dec <prvDeleteTCB+0x58>
	__asm volatile
 8011dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dd8:	f383 8811 	msr	BASEPRI, r3
 8011ddc:	f3bf 8f6f 	isb	sy
 8011de0:	f3bf 8f4f 	dsb	sy
 8011de4:	60fb      	str	r3, [r7, #12]
}
 8011de6:	bf00      	nop
 8011de8:	bf00      	nop
 8011dea:	e7fd      	b.n	8011de8 <prvDeleteTCB+0x54>
	}
 8011dec:	bf00      	nop
 8011dee:	3710      	adds	r7, #16
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011df4:	b480      	push	{r7}
 8011df6:	b083      	sub	sp, #12
 8011df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8011e34 <prvResetNextTaskUnblockTime+0x40>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d101      	bne.n	8011e08 <prvResetNextTaskUnblockTime+0x14>
 8011e04:	2301      	movs	r3, #1
 8011e06:	e000      	b.n	8011e0a <prvResetNextTaskUnblockTime+0x16>
 8011e08:	2300      	movs	r3, #0
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d004      	beq.n	8011e18 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8011e38 <prvResetNextTaskUnblockTime+0x44>)
 8011e10:	f04f 32ff 	mov.w	r2, #4294967295
 8011e14:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011e16:	e008      	b.n	8011e2a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011e18:	4b06      	ldr	r3, [pc, #24]	@ (8011e34 <prvResetNextTaskUnblockTime+0x40>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	68db      	ldr	r3, [r3, #12]
 8011e1e:	68db      	ldr	r3, [r3, #12]
 8011e20:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	4a04      	ldr	r2, [pc, #16]	@ (8011e38 <prvResetNextTaskUnblockTime+0x44>)
 8011e28:	6013      	str	r3, [r2, #0]
}
 8011e2a:	bf00      	nop
 8011e2c:	370c      	adds	r7, #12
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bc80      	pop	{r7}
 8011e32:	4770      	bx	lr
 8011e34:	20001390 	.word	0x20001390
 8011e38:	200013f8 	.word	0x200013f8

08011e3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b083      	sub	sp, #12
 8011e40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011e42:	4b0b      	ldr	r3, [pc, #44]	@ (8011e70 <xTaskGetSchedulerState+0x34>)
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d102      	bne.n	8011e50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	607b      	str	r3, [r7, #4]
 8011e4e:	e008      	b.n	8011e62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e50:	4b08      	ldr	r3, [pc, #32]	@ (8011e74 <xTaskGetSchedulerState+0x38>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d102      	bne.n	8011e5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011e58:	2302      	movs	r3, #2
 8011e5a:	607b      	str	r3, [r7, #4]
 8011e5c:	e001      	b.n	8011e62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011e62:	687b      	ldr	r3, [r7, #4]
	}
 8011e64:	4618      	mov	r0, r3
 8011e66:	370c      	adds	r7, #12
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bc80      	pop	{r7}
 8011e6c:	4770      	bx	lr
 8011e6e:	bf00      	nop
 8011e70:	200013e4 	.word	0x200013e4
 8011e74:	20001400 	.word	0x20001400

08011e78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b084      	sub	sp, #16
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011e84:	2300      	movs	r3, #0
 8011e86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d06e      	beq.n	8011f6c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e92:	4b39      	ldr	r3, [pc, #228]	@ (8011f78 <xTaskPriorityInherit+0x100>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d25e      	bcs.n	8011f5a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	699b      	ldr	r3, [r3, #24]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	db06      	blt.n	8011eb2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ea4:	4b34      	ldr	r3, [pc, #208]	@ (8011f78 <xTaskPriorityInherit+0x100>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011eaa:	f1c3 0207 	rsb	r2, r3, #7
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	6959      	ldr	r1, [r3, #20]
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011eba:	4613      	mov	r3, r2
 8011ebc:	009b      	lsls	r3, r3, #2
 8011ebe:	4413      	add	r3, r2
 8011ec0:	009b      	lsls	r3, r3, #2
 8011ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8011f7c <xTaskPriorityInherit+0x104>)
 8011ec4:	4413      	add	r3, r2
 8011ec6:	4299      	cmp	r1, r3
 8011ec8:	d101      	bne.n	8011ece <xTaskPriorityInherit+0x56>
 8011eca:	2301      	movs	r3, #1
 8011ecc:	e000      	b.n	8011ed0 <xTaskPriorityInherit+0x58>
 8011ece:	2300      	movs	r3, #0
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d03a      	beq.n	8011f4a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	3304      	adds	r3, #4
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7fe fb04 	bl	80104e6 <uxListRemove>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d115      	bne.n	8011f10 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ee8:	4924      	ldr	r1, [pc, #144]	@ (8011f7c <xTaskPriorityInherit+0x104>)
 8011eea:	4613      	mov	r3, r2
 8011eec:	009b      	lsls	r3, r3, #2
 8011eee:	4413      	add	r3, r2
 8011ef0:	009b      	lsls	r3, r3, #2
 8011ef2:	440b      	add	r3, r1
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d10a      	bne.n	8011f10 <xTaskPriorityInherit+0x98>
 8011efa:	68bb      	ldr	r3, [r7, #8]
 8011efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011efe:	2201      	movs	r2, #1
 8011f00:	fa02 f303 	lsl.w	r3, r2, r3
 8011f04:	43da      	mvns	r2, r3
 8011f06:	4b1e      	ldr	r3, [pc, #120]	@ (8011f80 <xTaskPriorityInherit+0x108>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	4013      	ands	r3, r2
 8011f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8011f80 <xTaskPriorityInherit+0x108>)
 8011f0e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011f10:	4b19      	ldr	r3, [pc, #100]	@ (8011f78 <xTaskPriorityInherit+0x100>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f1e:	2201      	movs	r2, #1
 8011f20:	409a      	lsls	r2, r3
 8011f22:	4b17      	ldr	r3, [pc, #92]	@ (8011f80 <xTaskPriorityInherit+0x108>)
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	4313      	orrs	r3, r2
 8011f28:	4a15      	ldr	r2, [pc, #84]	@ (8011f80 <xTaskPriorityInherit+0x108>)
 8011f2a:	6013      	str	r3, [r2, #0]
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f30:	4613      	mov	r3, r2
 8011f32:	009b      	lsls	r3, r3, #2
 8011f34:	4413      	add	r3, r2
 8011f36:	009b      	lsls	r3, r3, #2
 8011f38:	4a10      	ldr	r2, [pc, #64]	@ (8011f7c <xTaskPriorityInherit+0x104>)
 8011f3a:	441a      	add	r2, r3
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	3304      	adds	r3, #4
 8011f40:	4619      	mov	r1, r3
 8011f42:	4610      	mov	r0, r2
 8011f44:	f7fe fa74 	bl	8010430 <vListInsertEnd>
 8011f48:	e004      	b.n	8011f54 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8011f78 <xTaskPriorityInherit+0x100>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011f54:	2301      	movs	r3, #1
 8011f56:	60fb      	str	r3, [r7, #12]
 8011f58:	e008      	b.n	8011f6c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f5e:	4b06      	ldr	r3, [pc, #24]	@ (8011f78 <xTaskPriorityInherit+0x100>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d201      	bcs.n	8011f6c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011f68:	2301      	movs	r3, #1
 8011f6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
	}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3710      	adds	r7, #16
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
 8011f76:	bf00      	nop
 8011f78:	200012d8 	.word	0x200012d8
 8011f7c:	200012dc 	.word	0x200012dc
 8011f80:	200013e0 	.word	0x200013e0

08011f84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b086      	sub	sp, #24
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011f90:	2300      	movs	r3, #0
 8011f92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d070      	beq.n	801207c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8012088 <xTaskPriorityDisinherit+0x104>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	693a      	ldr	r2, [r7, #16]
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d00b      	beq.n	8011fbc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8011fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fa8:	f383 8811 	msr	BASEPRI, r3
 8011fac:	f3bf 8f6f 	isb	sy
 8011fb0:	f3bf 8f4f 	dsb	sy
 8011fb4:	60fb      	str	r3, [r7, #12]
}
 8011fb6:	bf00      	nop
 8011fb8:	bf00      	nop
 8011fba:	e7fd      	b.n	8011fb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011fbc:	693b      	ldr	r3, [r7, #16]
 8011fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d10b      	bne.n	8011fdc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fc8:	f383 8811 	msr	BASEPRI, r3
 8011fcc:	f3bf 8f6f 	isb	sy
 8011fd0:	f3bf 8f4f 	dsb	sy
 8011fd4:	60bb      	str	r3, [r7, #8]
}
 8011fd6:	bf00      	nop
 8011fd8:	bf00      	nop
 8011fda:	e7fd      	b.n	8011fd8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011fe0:	1e5a      	subs	r2, r3, #1
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011fe6:	693b      	ldr	r3, [r7, #16]
 8011fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d044      	beq.n	801207c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d140      	bne.n	801207c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	3304      	adds	r3, #4
 8011ffe:	4618      	mov	r0, r3
 8012000:	f7fe fa71 	bl	80104e6 <uxListRemove>
 8012004:	4603      	mov	r3, r0
 8012006:	2b00      	cmp	r3, #0
 8012008:	d115      	bne.n	8012036 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801200a:	693b      	ldr	r3, [r7, #16]
 801200c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801200e:	491f      	ldr	r1, [pc, #124]	@ (801208c <xTaskPriorityDisinherit+0x108>)
 8012010:	4613      	mov	r3, r2
 8012012:	009b      	lsls	r3, r3, #2
 8012014:	4413      	add	r3, r2
 8012016:	009b      	lsls	r3, r3, #2
 8012018:	440b      	add	r3, r1
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d10a      	bne.n	8012036 <xTaskPriorityDisinherit+0xb2>
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012024:	2201      	movs	r2, #1
 8012026:	fa02 f303 	lsl.w	r3, r2, r3
 801202a:	43da      	mvns	r2, r3
 801202c:	4b18      	ldr	r3, [pc, #96]	@ (8012090 <xTaskPriorityDisinherit+0x10c>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	4013      	ands	r3, r2
 8012032:	4a17      	ldr	r2, [pc, #92]	@ (8012090 <xTaskPriorityDisinherit+0x10c>)
 8012034:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801203a:	693b      	ldr	r3, [r7, #16]
 801203c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012042:	f1c3 0207 	rsb	r2, r3, #7
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801204a:	693b      	ldr	r3, [r7, #16]
 801204c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801204e:	2201      	movs	r2, #1
 8012050:	409a      	lsls	r2, r3
 8012052:	4b0f      	ldr	r3, [pc, #60]	@ (8012090 <xTaskPriorityDisinherit+0x10c>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	4313      	orrs	r3, r2
 8012058:	4a0d      	ldr	r2, [pc, #52]	@ (8012090 <xTaskPriorityDisinherit+0x10c>)
 801205a:	6013      	str	r3, [r2, #0]
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012060:	4613      	mov	r3, r2
 8012062:	009b      	lsls	r3, r3, #2
 8012064:	4413      	add	r3, r2
 8012066:	009b      	lsls	r3, r3, #2
 8012068:	4a08      	ldr	r2, [pc, #32]	@ (801208c <xTaskPriorityDisinherit+0x108>)
 801206a:	441a      	add	r2, r3
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	3304      	adds	r3, #4
 8012070:	4619      	mov	r1, r3
 8012072:	4610      	mov	r0, r2
 8012074:	f7fe f9dc 	bl	8010430 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012078:	2301      	movs	r3, #1
 801207a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801207c:	697b      	ldr	r3, [r7, #20]
	}
 801207e:	4618      	mov	r0, r3
 8012080:	3718      	adds	r7, #24
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}
 8012086:	bf00      	nop
 8012088:	200012d8 	.word	0x200012d8
 801208c:	200012dc 	.word	0x200012dc
 8012090:	200013e0 	.word	0x200013e0

08012094 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012094:	b580      	push	{r7, lr}
 8012096:	b088      	sub	sp, #32
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80120a2:	2301      	movs	r3, #1
 80120a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	f000 808a 	beq.w	80121c2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80120ae:	69bb      	ldr	r3, [r7, #24]
 80120b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d10b      	bne.n	80120ce <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80120b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120ba:	f383 8811 	msr	BASEPRI, r3
 80120be:	f3bf 8f6f 	isb	sy
 80120c2:	f3bf 8f4f 	dsb	sy
 80120c6:	60fb      	str	r3, [r7, #12]
}
 80120c8:	bf00      	nop
 80120ca:	bf00      	nop
 80120cc:	e7fd      	b.n	80120ca <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80120ce:	69bb      	ldr	r3, [r7, #24]
 80120d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80120d2:	683a      	ldr	r2, [r7, #0]
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d902      	bls.n	80120de <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	61fb      	str	r3, [r7, #28]
 80120dc:	e002      	b.n	80120e4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80120de:	69bb      	ldr	r3, [r7, #24]
 80120e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80120e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80120e4:	69bb      	ldr	r3, [r7, #24]
 80120e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120e8:	69fa      	ldr	r2, [r7, #28]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d069      	beq.n	80121c2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80120ee:	69bb      	ldr	r3, [r7, #24]
 80120f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80120f2:	697a      	ldr	r2, [r7, #20]
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d164      	bne.n	80121c2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80120f8:	4b34      	ldr	r3, [pc, #208]	@ (80121cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	69ba      	ldr	r2, [r7, #24]
 80120fe:	429a      	cmp	r2, r3
 8012100:	d10b      	bne.n	801211a <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8012102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012106:	f383 8811 	msr	BASEPRI, r3
 801210a:	f3bf 8f6f 	isb	sy
 801210e:	f3bf 8f4f 	dsb	sy
 8012112:	60bb      	str	r3, [r7, #8]
}
 8012114:	bf00      	nop
 8012116:	bf00      	nop
 8012118:	e7fd      	b.n	8012116 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801211a:	69bb      	ldr	r3, [r7, #24]
 801211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801211e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012120:	69bb      	ldr	r3, [r7, #24]
 8012122:	69fa      	ldr	r2, [r7, #28]
 8012124:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012126:	69bb      	ldr	r3, [r7, #24]
 8012128:	699b      	ldr	r3, [r3, #24]
 801212a:	2b00      	cmp	r3, #0
 801212c:	db04      	blt.n	8012138 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801212e:	69fb      	ldr	r3, [r7, #28]
 8012130:	f1c3 0207 	rsb	r2, r3, #7
 8012134:	69bb      	ldr	r3, [r7, #24]
 8012136:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012138:	69bb      	ldr	r3, [r7, #24]
 801213a:	6959      	ldr	r1, [r3, #20]
 801213c:	693a      	ldr	r2, [r7, #16]
 801213e:	4613      	mov	r3, r2
 8012140:	009b      	lsls	r3, r3, #2
 8012142:	4413      	add	r3, r2
 8012144:	009b      	lsls	r3, r3, #2
 8012146:	4a22      	ldr	r2, [pc, #136]	@ (80121d0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012148:	4413      	add	r3, r2
 801214a:	4299      	cmp	r1, r3
 801214c:	d101      	bne.n	8012152 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 801214e:	2301      	movs	r3, #1
 8012150:	e000      	b.n	8012154 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8012152:	2300      	movs	r3, #0
 8012154:	2b00      	cmp	r3, #0
 8012156:	d034      	beq.n	80121c2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012158:	69bb      	ldr	r3, [r7, #24]
 801215a:	3304      	adds	r3, #4
 801215c:	4618      	mov	r0, r3
 801215e:	f7fe f9c2 	bl	80104e6 <uxListRemove>
 8012162:	4603      	mov	r3, r0
 8012164:	2b00      	cmp	r3, #0
 8012166:	d115      	bne.n	8012194 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012168:	69bb      	ldr	r3, [r7, #24]
 801216a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801216c:	4918      	ldr	r1, [pc, #96]	@ (80121d0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801216e:	4613      	mov	r3, r2
 8012170:	009b      	lsls	r3, r3, #2
 8012172:	4413      	add	r3, r2
 8012174:	009b      	lsls	r3, r3, #2
 8012176:	440b      	add	r3, r1
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d10a      	bne.n	8012194 <vTaskPriorityDisinheritAfterTimeout+0x100>
 801217e:	69bb      	ldr	r3, [r7, #24]
 8012180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012182:	2201      	movs	r2, #1
 8012184:	fa02 f303 	lsl.w	r3, r2, r3
 8012188:	43da      	mvns	r2, r3
 801218a:	4b12      	ldr	r3, [pc, #72]	@ (80121d4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	4013      	ands	r3, r2
 8012190:	4a10      	ldr	r2, [pc, #64]	@ (80121d4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8012192:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012194:	69bb      	ldr	r3, [r7, #24]
 8012196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012198:	2201      	movs	r2, #1
 801219a:	409a      	lsls	r2, r3
 801219c:	4b0d      	ldr	r3, [pc, #52]	@ (80121d4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	4313      	orrs	r3, r2
 80121a2:	4a0c      	ldr	r2, [pc, #48]	@ (80121d4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80121a4:	6013      	str	r3, [r2, #0]
 80121a6:	69bb      	ldr	r3, [r7, #24]
 80121a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121aa:	4613      	mov	r3, r2
 80121ac:	009b      	lsls	r3, r3, #2
 80121ae:	4413      	add	r3, r2
 80121b0:	009b      	lsls	r3, r3, #2
 80121b2:	4a07      	ldr	r2, [pc, #28]	@ (80121d0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80121b4:	441a      	add	r2, r3
 80121b6:	69bb      	ldr	r3, [r7, #24]
 80121b8:	3304      	adds	r3, #4
 80121ba:	4619      	mov	r1, r3
 80121bc:	4610      	mov	r0, r2
 80121be:	f7fe f937 	bl	8010430 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80121c2:	bf00      	nop
 80121c4:	3720      	adds	r7, #32
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}
 80121ca:	bf00      	nop
 80121cc:	200012d8 	.word	0x200012d8
 80121d0:	200012dc 	.word	0x200012dc
 80121d4:	200013e0 	.word	0x200013e0

080121d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80121d8:	b480      	push	{r7}
 80121da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80121dc:	4b07      	ldr	r3, [pc, #28]	@ (80121fc <pvTaskIncrementMutexHeldCount+0x24>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d004      	beq.n	80121ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80121e4:	4b05      	ldr	r3, [pc, #20]	@ (80121fc <pvTaskIncrementMutexHeldCount+0x24>)
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80121ea:	3201      	adds	r2, #1
 80121ec:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80121ee:	4b03      	ldr	r3, [pc, #12]	@ (80121fc <pvTaskIncrementMutexHeldCount+0x24>)
 80121f0:	681b      	ldr	r3, [r3, #0]
	}
 80121f2:	4618      	mov	r0, r3
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bc80      	pop	{r7}
 80121f8:	4770      	bx	lr
 80121fa:	bf00      	nop
 80121fc:	200012d8 	.word	0x200012d8

08012200 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801220a:	4b29      	ldr	r3, [pc, #164]	@ (80122b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012210:	4b28      	ldr	r3, [pc, #160]	@ (80122b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	3304      	adds	r3, #4
 8012216:	4618      	mov	r0, r3
 8012218:	f7fe f965 	bl	80104e6 <uxListRemove>
 801221c:	4603      	mov	r3, r0
 801221e:	2b00      	cmp	r3, #0
 8012220:	d10b      	bne.n	801223a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8012222:	4b24      	ldr	r3, [pc, #144]	@ (80122b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012228:	2201      	movs	r2, #1
 801222a:	fa02 f303 	lsl.w	r3, r2, r3
 801222e:	43da      	mvns	r2, r3
 8012230:	4b21      	ldr	r3, [pc, #132]	@ (80122b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	4013      	ands	r3, r2
 8012236:	4a20      	ldr	r2, [pc, #128]	@ (80122b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012238:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012240:	d10a      	bne.n	8012258 <prvAddCurrentTaskToDelayedList+0x58>
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d007      	beq.n	8012258 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012248:	4b1a      	ldr	r3, [pc, #104]	@ (80122b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	3304      	adds	r3, #4
 801224e:	4619      	mov	r1, r3
 8012250:	481a      	ldr	r0, [pc, #104]	@ (80122bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8012252:	f7fe f8ed 	bl	8010430 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012256:	e026      	b.n	80122a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012258:	68fa      	ldr	r2, [r7, #12]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	4413      	add	r3, r2
 801225e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012260:	4b14      	ldr	r3, [pc, #80]	@ (80122b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	68ba      	ldr	r2, [r7, #8]
 8012266:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012268:	68ba      	ldr	r2, [r7, #8]
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	429a      	cmp	r2, r3
 801226e:	d209      	bcs.n	8012284 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012270:	4b13      	ldr	r3, [pc, #76]	@ (80122c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012272:	681a      	ldr	r2, [r3, #0]
 8012274:	4b0f      	ldr	r3, [pc, #60]	@ (80122b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	3304      	adds	r3, #4
 801227a:	4619      	mov	r1, r3
 801227c:	4610      	mov	r0, r2
 801227e:	f7fe f8fa 	bl	8010476 <vListInsert>
}
 8012282:	e010      	b.n	80122a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012284:	4b0f      	ldr	r3, [pc, #60]	@ (80122c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012286:	681a      	ldr	r2, [r3, #0]
 8012288:	4b0a      	ldr	r3, [pc, #40]	@ (80122b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	3304      	adds	r3, #4
 801228e:	4619      	mov	r1, r3
 8012290:	4610      	mov	r0, r2
 8012292:	f7fe f8f0 	bl	8010476 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012296:	4b0c      	ldr	r3, [pc, #48]	@ (80122c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	68ba      	ldr	r2, [r7, #8]
 801229c:	429a      	cmp	r2, r3
 801229e:	d202      	bcs.n	80122a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80122a0:	4a09      	ldr	r2, [pc, #36]	@ (80122c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	6013      	str	r3, [r2, #0]
}
 80122a6:	bf00      	nop
 80122a8:	3710      	adds	r7, #16
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}
 80122ae:	bf00      	nop
 80122b0:	200013dc 	.word	0x200013dc
 80122b4:	200012d8 	.word	0x200012d8
 80122b8:	200013e0 	.word	0x200013e0
 80122bc:	200013c4 	.word	0x200013c4
 80122c0:	20001394 	.word	0x20001394
 80122c4:	20001390 	.word	0x20001390
 80122c8:	200013f8 	.word	0x200013f8

080122cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80122cc:	b480      	push	{r7}
 80122ce:	b085      	sub	sp, #20
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	60f8      	str	r0, [r7, #12]
 80122d4:	60b9      	str	r1, [r7, #8]
 80122d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	3b04      	subs	r3, #4
 80122dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80122e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	3b04      	subs	r3, #4
 80122ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	f023 0201 	bic.w	r2, r3, #1
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	3b04      	subs	r3, #4
 80122fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80122fc:	4a08      	ldr	r2, [pc, #32]	@ (8012320 <pxPortInitialiseStack+0x54>)
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	3b14      	subs	r3, #20
 8012306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012308:	687a      	ldr	r2, [r7, #4]
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	3b20      	subs	r3, #32
 8012312:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012314:	68fb      	ldr	r3, [r7, #12]
}
 8012316:	4618      	mov	r0, r3
 8012318:	3714      	adds	r7, #20
 801231a:	46bd      	mov	sp, r7
 801231c:	bc80      	pop	{r7}
 801231e:	4770      	bx	lr
 8012320:	08012325 	.word	0x08012325

08012324 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012324:	b480      	push	{r7}
 8012326:	b085      	sub	sp, #20
 8012328:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801232a:	2300      	movs	r3, #0
 801232c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801232e:	4b12      	ldr	r3, [pc, #72]	@ (8012378 <prvTaskExitError+0x54>)
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012336:	d00b      	beq.n	8012350 <prvTaskExitError+0x2c>
	__asm volatile
 8012338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801233c:	f383 8811 	msr	BASEPRI, r3
 8012340:	f3bf 8f6f 	isb	sy
 8012344:	f3bf 8f4f 	dsb	sy
 8012348:	60fb      	str	r3, [r7, #12]
}
 801234a:	bf00      	nop
 801234c:	bf00      	nop
 801234e:	e7fd      	b.n	801234c <prvTaskExitError+0x28>
	__asm volatile
 8012350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012354:	f383 8811 	msr	BASEPRI, r3
 8012358:	f3bf 8f6f 	isb	sy
 801235c:	f3bf 8f4f 	dsb	sy
 8012360:	60bb      	str	r3, [r7, #8]
}
 8012362:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012364:	bf00      	nop
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d0fc      	beq.n	8012366 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801236c:	bf00      	nop
 801236e:	bf00      	nop
 8012370:	3714      	adds	r7, #20
 8012372:	46bd      	mov	sp, r7
 8012374:	bc80      	pop	{r7}
 8012376:	4770      	bx	lr
 8012378:	20000040 	.word	0x20000040
 801237c:	00000000 	.word	0x00000000

08012380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012380:	4b07      	ldr	r3, [pc, #28]	@ (80123a0 <pxCurrentTCBConst2>)
 8012382:	6819      	ldr	r1, [r3, #0]
 8012384:	6808      	ldr	r0, [r1, #0]
 8012386:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801238a:	f380 8809 	msr	PSP, r0
 801238e:	f3bf 8f6f 	isb	sy
 8012392:	f04f 0000 	mov.w	r0, #0
 8012396:	f380 8811 	msr	BASEPRI, r0
 801239a:	f04e 0e0d 	orr.w	lr, lr, #13
 801239e:	4770      	bx	lr

080123a0 <pxCurrentTCBConst2>:
 80123a0:	200012d8 	.word	0x200012d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80123a4:	bf00      	nop
 80123a6:	bf00      	nop

080123a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80123a8:	4806      	ldr	r0, [pc, #24]	@ (80123c4 <prvPortStartFirstTask+0x1c>)
 80123aa:	6800      	ldr	r0, [r0, #0]
 80123ac:	6800      	ldr	r0, [r0, #0]
 80123ae:	f380 8808 	msr	MSP, r0
 80123b2:	b662      	cpsie	i
 80123b4:	b661      	cpsie	f
 80123b6:	f3bf 8f4f 	dsb	sy
 80123ba:	f3bf 8f6f 	isb	sy
 80123be:	df00      	svc	0
 80123c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80123c2:	bf00      	nop
 80123c4:	e000ed08 	.word	0xe000ed08

080123c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b084      	sub	sp, #16
 80123cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80123ce:	4b32      	ldr	r3, [pc, #200]	@ (8012498 <xPortStartScheduler+0xd0>)
 80123d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	781b      	ldrb	r3, [r3, #0]
 80123d6:	b2db      	uxtb	r3, r3
 80123d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	22ff      	movs	r2, #255	@ 0xff
 80123de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	781b      	ldrb	r3, [r3, #0]
 80123e4:	b2db      	uxtb	r3, r3
 80123e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80123e8:	78fb      	ldrb	r3, [r7, #3]
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80123f0:	b2da      	uxtb	r2, r3
 80123f2:	4b2a      	ldr	r3, [pc, #168]	@ (801249c <xPortStartScheduler+0xd4>)
 80123f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80123f6:	4b2a      	ldr	r3, [pc, #168]	@ (80124a0 <xPortStartScheduler+0xd8>)
 80123f8:	2207      	movs	r2, #7
 80123fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80123fc:	e009      	b.n	8012412 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80123fe:	4b28      	ldr	r3, [pc, #160]	@ (80124a0 <xPortStartScheduler+0xd8>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	3b01      	subs	r3, #1
 8012404:	4a26      	ldr	r2, [pc, #152]	@ (80124a0 <xPortStartScheduler+0xd8>)
 8012406:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012408:	78fb      	ldrb	r3, [r7, #3]
 801240a:	b2db      	uxtb	r3, r3
 801240c:	005b      	lsls	r3, r3, #1
 801240e:	b2db      	uxtb	r3, r3
 8012410:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012412:	78fb      	ldrb	r3, [r7, #3]
 8012414:	b2db      	uxtb	r3, r3
 8012416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801241a:	2b80      	cmp	r3, #128	@ 0x80
 801241c:	d0ef      	beq.n	80123fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801241e:	4b20      	ldr	r3, [pc, #128]	@ (80124a0 <xPortStartScheduler+0xd8>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	f1c3 0307 	rsb	r3, r3, #7
 8012426:	2b04      	cmp	r3, #4
 8012428:	d00b      	beq.n	8012442 <xPortStartScheduler+0x7a>
	__asm volatile
 801242a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801242e:	f383 8811 	msr	BASEPRI, r3
 8012432:	f3bf 8f6f 	isb	sy
 8012436:	f3bf 8f4f 	dsb	sy
 801243a:	60bb      	str	r3, [r7, #8]
}
 801243c:	bf00      	nop
 801243e:	bf00      	nop
 8012440:	e7fd      	b.n	801243e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012442:	4b17      	ldr	r3, [pc, #92]	@ (80124a0 <xPortStartScheduler+0xd8>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	021b      	lsls	r3, r3, #8
 8012448:	4a15      	ldr	r2, [pc, #84]	@ (80124a0 <xPortStartScheduler+0xd8>)
 801244a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801244c:	4b14      	ldr	r3, [pc, #80]	@ (80124a0 <xPortStartScheduler+0xd8>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012454:	4a12      	ldr	r2, [pc, #72]	@ (80124a0 <xPortStartScheduler+0xd8>)
 8012456:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	b2da      	uxtb	r2, r3
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012460:	4b10      	ldr	r3, [pc, #64]	@ (80124a4 <xPortStartScheduler+0xdc>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	4a0f      	ldr	r2, [pc, #60]	@ (80124a4 <xPortStartScheduler+0xdc>)
 8012466:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801246a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801246c:	4b0d      	ldr	r3, [pc, #52]	@ (80124a4 <xPortStartScheduler+0xdc>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	4a0c      	ldr	r2, [pc, #48]	@ (80124a4 <xPortStartScheduler+0xdc>)
 8012472:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012476:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012478:	f000 f8b8 	bl	80125ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801247c:	4b0a      	ldr	r3, [pc, #40]	@ (80124a8 <xPortStartScheduler+0xe0>)
 801247e:	2200      	movs	r2, #0
 8012480:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012482:	f7ff ff91 	bl	80123a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012486:	f7ff fa5b 	bl	8011940 <vTaskSwitchContext>
	prvTaskExitError();
 801248a:	f7ff ff4b 	bl	8012324 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801248e:	2300      	movs	r3, #0
}
 8012490:	4618      	mov	r0, r3
 8012492:	3710      	adds	r7, #16
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}
 8012498:	e000e400 	.word	0xe000e400
 801249c:	20001404 	.word	0x20001404
 80124a0:	20001408 	.word	0x20001408
 80124a4:	e000ed20 	.word	0xe000ed20
 80124a8:	20000040 	.word	0x20000040

080124ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80124ac:	b480      	push	{r7}
 80124ae:	b083      	sub	sp, #12
 80124b0:	af00      	add	r7, sp, #0
	__asm volatile
 80124b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124b6:	f383 8811 	msr	BASEPRI, r3
 80124ba:	f3bf 8f6f 	isb	sy
 80124be:	f3bf 8f4f 	dsb	sy
 80124c2:	607b      	str	r3, [r7, #4]
}
 80124c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80124c6:	4b0f      	ldr	r3, [pc, #60]	@ (8012504 <vPortEnterCritical+0x58>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	3301      	adds	r3, #1
 80124cc:	4a0d      	ldr	r2, [pc, #52]	@ (8012504 <vPortEnterCritical+0x58>)
 80124ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80124d0:	4b0c      	ldr	r3, [pc, #48]	@ (8012504 <vPortEnterCritical+0x58>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	2b01      	cmp	r3, #1
 80124d6:	d110      	bne.n	80124fa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80124d8:	4b0b      	ldr	r3, [pc, #44]	@ (8012508 <vPortEnterCritical+0x5c>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	b2db      	uxtb	r3, r3
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d00b      	beq.n	80124fa <vPortEnterCritical+0x4e>
	__asm volatile
 80124e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124e6:	f383 8811 	msr	BASEPRI, r3
 80124ea:	f3bf 8f6f 	isb	sy
 80124ee:	f3bf 8f4f 	dsb	sy
 80124f2:	603b      	str	r3, [r7, #0]
}
 80124f4:	bf00      	nop
 80124f6:	bf00      	nop
 80124f8:	e7fd      	b.n	80124f6 <vPortEnterCritical+0x4a>
	}
}
 80124fa:	bf00      	nop
 80124fc:	370c      	adds	r7, #12
 80124fe:	46bd      	mov	sp, r7
 8012500:	bc80      	pop	{r7}
 8012502:	4770      	bx	lr
 8012504:	20000040 	.word	0x20000040
 8012508:	e000ed04 	.word	0xe000ed04

0801250c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801250c:	b480      	push	{r7}
 801250e:	b083      	sub	sp, #12
 8012510:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012512:	4b12      	ldr	r3, [pc, #72]	@ (801255c <vPortExitCritical+0x50>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d10b      	bne.n	8012532 <vPortExitCritical+0x26>
	__asm volatile
 801251a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801251e:	f383 8811 	msr	BASEPRI, r3
 8012522:	f3bf 8f6f 	isb	sy
 8012526:	f3bf 8f4f 	dsb	sy
 801252a:	607b      	str	r3, [r7, #4]
}
 801252c:	bf00      	nop
 801252e:	bf00      	nop
 8012530:	e7fd      	b.n	801252e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012532:	4b0a      	ldr	r3, [pc, #40]	@ (801255c <vPortExitCritical+0x50>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	3b01      	subs	r3, #1
 8012538:	4a08      	ldr	r2, [pc, #32]	@ (801255c <vPortExitCritical+0x50>)
 801253a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801253c:	4b07      	ldr	r3, [pc, #28]	@ (801255c <vPortExitCritical+0x50>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d105      	bne.n	8012550 <vPortExitCritical+0x44>
 8012544:	2300      	movs	r3, #0
 8012546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	f383 8811 	msr	BASEPRI, r3
}
 801254e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012550:	bf00      	nop
 8012552:	370c      	adds	r7, #12
 8012554:	46bd      	mov	sp, r7
 8012556:	bc80      	pop	{r7}
 8012558:	4770      	bx	lr
 801255a:	bf00      	nop
 801255c:	20000040 	.word	0x20000040

08012560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012560:	f3ef 8009 	mrs	r0, PSP
 8012564:	f3bf 8f6f 	isb	sy
 8012568:	4b0d      	ldr	r3, [pc, #52]	@ (80125a0 <pxCurrentTCBConst>)
 801256a:	681a      	ldr	r2, [r3, #0]
 801256c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012570:	6010      	str	r0, [r2, #0]
 8012572:	e92d 4008 	stmdb	sp!, {r3, lr}
 8012576:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801257a:	f380 8811 	msr	BASEPRI, r0
 801257e:	f7ff f9df 	bl	8011940 <vTaskSwitchContext>
 8012582:	f04f 0000 	mov.w	r0, #0
 8012586:	f380 8811 	msr	BASEPRI, r0
 801258a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801258e:	6819      	ldr	r1, [r3, #0]
 8012590:	6808      	ldr	r0, [r1, #0]
 8012592:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012596:	f380 8809 	msr	PSP, r0
 801259a:	f3bf 8f6f 	isb	sy
 801259e:	4770      	bx	lr

080125a0 <pxCurrentTCBConst>:
 80125a0:	200012d8 	.word	0x200012d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80125a4:	bf00      	nop
 80125a6:	bf00      	nop

080125a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b082      	sub	sp, #8
 80125ac:	af00      	add	r7, sp, #0
	__asm volatile
 80125ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125b2:	f383 8811 	msr	BASEPRI, r3
 80125b6:	f3bf 8f6f 	isb	sy
 80125ba:	f3bf 8f4f 	dsb	sy
 80125be:	607b      	str	r3, [r7, #4]
}
 80125c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80125c2:	f7ff f8ff 	bl	80117c4 <xTaskIncrementTick>
 80125c6:	4603      	mov	r3, r0
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d003      	beq.n	80125d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80125cc:	4b06      	ldr	r3, [pc, #24]	@ (80125e8 <SysTick_Handler+0x40>)
 80125ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80125d2:	601a      	str	r2, [r3, #0]
 80125d4:	2300      	movs	r3, #0
 80125d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	f383 8811 	msr	BASEPRI, r3
}
 80125de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80125e0:	bf00      	nop
 80125e2:	3708      	adds	r7, #8
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}
 80125e8:	e000ed04 	.word	0xe000ed04

080125ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80125ec:	b480      	push	{r7}
 80125ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80125f0:	4b0a      	ldr	r3, [pc, #40]	@ (801261c <vPortSetupTimerInterrupt+0x30>)
 80125f2:	2200      	movs	r2, #0
 80125f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80125f6:	4b0a      	ldr	r3, [pc, #40]	@ (8012620 <vPortSetupTimerInterrupt+0x34>)
 80125f8:	2200      	movs	r2, #0
 80125fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80125fc:	4b09      	ldr	r3, [pc, #36]	@ (8012624 <vPortSetupTimerInterrupt+0x38>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	4a09      	ldr	r2, [pc, #36]	@ (8012628 <vPortSetupTimerInterrupt+0x3c>)
 8012602:	fba2 2303 	umull	r2, r3, r2, r3
 8012606:	099b      	lsrs	r3, r3, #6
 8012608:	4a08      	ldr	r2, [pc, #32]	@ (801262c <vPortSetupTimerInterrupt+0x40>)
 801260a:	3b01      	subs	r3, #1
 801260c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801260e:	4b03      	ldr	r3, [pc, #12]	@ (801261c <vPortSetupTimerInterrupt+0x30>)
 8012610:	2207      	movs	r2, #7
 8012612:	601a      	str	r2, [r3, #0]
}
 8012614:	bf00      	nop
 8012616:	46bd      	mov	sp, r7
 8012618:	bc80      	pop	{r7}
 801261a:	4770      	bx	lr
 801261c:	e000e010 	.word	0xe000e010
 8012620:	e000e018 	.word	0xe000e018
 8012624:	20000028 	.word	0x20000028
 8012628:	10624dd3 	.word	0x10624dd3
 801262c:	e000e014 	.word	0xe000e014

08012630 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012630:	b480      	push	{r7}
 8012632:	b085      	sub	sp, #20
 8012634:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012636:	f3ef 8305 	mrs	r3, IPSR
 801263a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	2b0f      	cmp	r3, #15
 8012640:	d915      	bls.n	801266e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012642:	4a17      	ldr	r2, [pc, #92]	@ (80126a0 <vPortValidateInterruptPriority+0x70>)
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	4413      	add	r3, r2
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801264c:	4b15      	ldr	r3, [pc, #84]	@ (80126a4 <vPortValidateInterruptPriority+0x74>)
 801264e:	781b      	ldrb	r3, [r3, #0]
 8012650:	7afa      	ldrb	r2, [r7, #11]
 8012652:	429a      	cmp	r2, r3
 8012654:	d20b      	bcs.n	801266e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8012656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801265a:	f383 8811 	msr	BASEPRI, r3
 801265e:	f3bf 8f6f 	isb	sy
 8012662:	f3bf 8f4f 	dsb	sy
 8012666:	607b      	str	r3, [r7, #4]
}
 8012668:	bf00      	nop
 801266a:	bf00      	nop
 801266c:	e7fd      	b.n	801266a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801266e:	4b0e      	ldr	r3, [pc, #56]	@ (80126a8 <vPortValidateInterruptPriority+0x78>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012676:	4b0d      	ldr	r3, [pc, #52]	@ (80126ac <vPortValidateInterruptPriority+0x7c>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	429a      	cmp	r2, r3
 801267c:	d90b      	bls.n	8012696 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 801267e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012682:	f383 8811 	msr	BASEPRI, r3
 8012686:	f3bf 8f6f 	isb	sy
 801268a:	f3bf 8f4f 	dsb	sy
 801268e:	603b      	str	r3, [r7, #0]
}
 8012690:	bf00      	nop
 8012692:	bf00      	nop
 8012694:	e7fd      	b.n	8012692 <vPortValidateInterruptPriority+0x62>
	}
 8012696:	bf00      	nop
 8012698:	3714      	adds	r7, #20
 801269a:	46bd      	mov	sp, r7
 801269c:	bc80      	pop	{r7}
 801269e:	4770      	bx	lr
 80126a0:	e000e3f0 	.word	0xe000e3f0
 80126a4:	20001404 	.word	0x20001404
 80126a8:	e000ed0c 	.word	0xe000ed0c
 80126ac:	20001408 	.word	0x20001408

080126b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b08a      	sub	sp, #40	@ 0x28
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80126b8:	2300      	movs	r3, #0
 80126ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80126bc:	f7fe ffc8 	bl	8011650 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80126c0:	4b5a      	ldr	r3, [pc, #360]	@ (801282c <pvPortMalloc+0x17c>)
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d101      	bne.n	80126cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80126c8:	f000 f916 	bl	80128f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80126cc:	4b58      	ldr	r3, [pc, #352]	@ (8012830 <pvPortMalloc+0x180>)
 80126ce:	681a      	ldr	r2, [r3, #0]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	4013      	ands	r3, r2
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	f040 8090 	bne.w	80127fa <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d01e      	beq.n	801271e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80126e0:	2208      	movs	r2, #8
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	4413      	add	r3, r2
 80126e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	f003 0307 	and.w	r3, r3, #7
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d015      	beq.n	801271e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f023 0307 	bic.w	r3, r3, #7
 80126f8:	3308      	adds	r3, #8
 80126fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	f003 0307 	and.w	r3, r3, #7
 8012702:	2b00      	cmp	r3, #0
 8012704:	d00b      	beq.n	801271e <pvPortMalloc+0x6e>
	__asm volatile
 8012706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801270a:	f383 8811 	msr	BASEPRI, r3
 801270e:	f3bf 8f6f 	isb	sy
 8012712:	f3bf 8f4f 	dsb	sy
 8012716:	617b      	str	r3, [r7, #20]
}
 8012718:	bf00      	nop
 801271a:	bf00      	nop
 801271c:	e7fd      	b.n	801271a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d06a      	beq.n	80127fa <pvPortMalloc+0x14a>
 8012724:	4b43      	ldr	r3, [pc, #268]	@ (8012834 <pvPortMalloc+0x184>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	687a      	ldr	r2, [r7, #4]
 801272a:	429a      	cmp	r2, r3
 801272c:	d865      	bhi.n	80127fa <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801272e:	4b42      	ldr	r3, [pc, #264]	@ (8012838 <pvPortMalloc+0x188>)
 8012730:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012732:	4b41      	ldr	r3, [pc, #260]	@ (8012838 <pvPortMalloc+0x188>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012738:	e004      	b.n	8012744 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 801273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801273c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012746:	685b      	ldr	r3, [r3, #4]
 8012748:	687a      	ldr	r2, [r7, #4]
 801274a:	429a      	cmp	r2, r3
 801274c:	d903      	bls.n	8012756 <pvPortMalloc+0xa6>
 801274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d1f1      	bne.n	801273a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012756:	4b35      	ldr	r3, [pc, #212]	@ (801282c <pvPortMalloc+0x17c>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801275c:	429a      	cmp	r2, r3
 801275e:	d04c      	beq.n	80127fa <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012760:	6a3b      	ldr	r3, [r7, #32]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	2208      	movs	r2, #8
 8012766:	4413      	add	r3, r2
 8012768:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801276c:	681a      	ldr	r2, [r3, #0]
 801276e:	6a3b      	ldr	r3, [r7, #32]
 8012770:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012774:	685a      	ldr	r2, [r3, #4]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	1ad2      	subs	r2, r2, r3
 801277a:	2308      	movs	r3, #8
 801277c:	005b      	lsls	r3, r3, #1
 801277e:	429a      	cmp	r2, r3
 8012780:	d920      	bls.n	80127c4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	4413      	add	r3, r2
 8012788:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801278a:	69bb      	ldr	r3, [r7, #24]
 801278c:	f003 0307 	and.w	r3, r3, #7
 8012790:	2b00      	cmp	r3, #0
 8012792:	d00b      	beq.n	80127ac <pvPortMalloc+0xfc>
	__asm volatile
 8012794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012798:	f383 8811 	msr	BASEPRI, r3
 801279c:	f3bf 8f6f 	isb	sy
 80127a0:	f3bf 8f4f 	dsb	sy
 80127a4:	613b      	str	r3, [r7, #16]
}
 80127a6:	bf00      	nop
 80127a8:	bf00      	nop
 80127aa:	e7fd      	b.n	80127a8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80127ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ae:	685a      	ldr	r2, [r3, #4]
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	1ad2      	subs	r2, r2, r3
 80127b4:	69bb      	ldr	r3, [r7, #24]
 80127b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80127b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ba:	687a      	ldr	r2, [r7, #4]
 80127bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80127be:	69b8      	ldr	r0, [r7, #24]
 80127c0:	f000 f8fc 	bl	80129bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80127c4:	4b1b      	ldr	r3, [pc, #108]	@ (8012834 <pvPortMalloc+0x184>)
 80127c6:	681a      	ldr	r2, [r3, #0]
 80127c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ca:	685b      	ldr	r3, [r3, #4]
 80127cc:	1ad3      	subs	r3, r2, r3
 80127ce:	4a19      	ldr	r2, [pc, #100]	@ (8012834 <pvPortMalloc+0x184>)
 80127d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80127d2:	4b18      	ldr	r3, [pc, #96]	@ (8012834 <pvPortMalloc+0x184>)
 80127d4:	681a      	ldr	r2, [r3, #0]
 80127d6:	4b19      	ldr	r3, [pc, #100]	@ (801283c <pvPortMalloc+0x18c>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	429a      	cmp	r2, r3
 80127dc:	d203      	bcs.n	80127e6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80127de:	4b15      	ldr	r3, [pc, #84]	@ (8012834 <pvPortMalloc+0x184>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	4a16      	ldr	r2, [pc, #88]	@ (801283c <pvPortMalloc+0x18c>)
 80127e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80127e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127e8:	685a      	ldr	r2, [r3, #4]
 80127ea:	4b11      	ldr	r3, [pc, #68]	@ (8012830 <pvPortMalloc+0x180>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	431a      	orrs	r2, r3
 80127f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80127f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127f6:	2200      	movs	r2, #0
 80127f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80127fa:	f7fe ff37 	bl	801166c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80127fe:	69fb      	ldr	r3, [r7, #28]
 8012800:	f003 0307 	and.w	r3, r3, #7
 8012804:	2b00      	cmp	r3, #0
 8012806:	d00b      	beq.n	8012820 <pvPortMalloc+0x170>
	__asm volatile
 8012808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801280c:	f383 8811 	msr	BASEPRI, r3
 8012810:	f3bf 8f6f 	isb	sy
 8012814:	f3bf 8f4f 	dsb	sy
 8012818:	60fb      	str	r3, [r7, #12]
}
 801281a:	bf00      	nop
 801281c:	bf00      	nop
 801281e:	e7fd      	b.n	801281c <pvPortMalloc+0x16c>
	return pvReturn;
 8012820:	69fb      	ldr	r3, [r7, #28]
}
 8012822:	4618      	mov	r0, r3
 8012824:	3728      	adds	r7, #40	@ 0x28
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}
 801282a:	bf00      	nop
 801282c:	20002c14 	.word	0x20002c14
 8012830:	20002c20 	.word	0x20002c20
 8012834:	20002c18 	.word	0x20002c18
 8012838:	20002c0c 	.word	0x20002c0c
 801283c:	20002c1c 	.word	0x20002c1c

08012840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b086      	sub	sp, #24
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d04a      	beq.n	80128e8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012852:	2308      	movs	r3, #8
 8012854:	425b      	negs	r3, r3
 8012856:	697a      	ldr	r2, [r7, #20]
 8012858:	4413      	add	r3, r2
 801285a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	685a      	ldr	r2, [r3, #4]
 8012864:	4b22      	ldr	r3, [pc, #136]	@ (80128f0 <vPortFree+0xb0>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	4013      	ands	r3, r2
 801286a:	2b00      	cmp	r3, #0
 801286c:	d10b      	bne.n	8012886 <vPortFree+0x46>
	__asm volatile
 801286e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012872:	f383 8811 	msr	BASEPRI, r3
 8012876:	f3bf 8f6f 	isb	sy
 801287a:	f3bf 8f4f 	dsb	sy
 801287e:	60fb      	str	r3, [r7, #12]
}
 8012880:	bf00      	nop
 8012882:	bf00      	nop
 8012884:	e7fd      	b.n	8012882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012886:	693b      	ldr	r3, [r7, #16]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d00b      	beq.n	80128a6 <vPortFree+0x66>
	__asm volatile
 801288e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012892:	f383 8811 	msr	BASEPRI, r3
 8012896:	f3bf 8f6f 	isb	sy
 801289a:	f3bf 8f4f 	dsb	sy
 801289e:	60bb      	str	r3, [r7, #8]
}
 80128a0:	bf00      	nop
 80128a2:	bf00      	nop
 80128a4:	e7fd      	b.n	80128a2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	685a      	ldr	r2, [r3, #4]
 80128aa:	4b11      	ldr	r3, [pc, #68]	@ (80128f0 <vPortFree+0xb0>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	4013      	ands	r3, r2
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d019      	beq.n	80128e8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80128b4:	693b      	ldr	r3, [r7, #16]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d115      	bne.n	80128e8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	685a      	ldr	r2, [r3, #4]
 80128c0:	4b0b      	ldr	r3, [pc, #44]	@ (80128f0 <vPortFree+0xb0>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	43db      	mvns	r3, r3
 80128c6:	401a      	ands	r2, r3
 80128c8:	693b      	ldr	r3, [r7, #16]
 80128ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80128cc:	f7fe fec0 	bl	8011650 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80128d0:	693b      	ldr	r3, [r7, #16]
 80128d2:	685a      	ldr	r2, [r3, #4]
 80128d4:	4b07      	ldr	r3, [pc, #28]	@ (80128f4 <vPortFree+0xb4>)
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	4413      	add	r3, r2
 80128da:	4a06      	ldr	r2, [pc, #24]	@ (80128f4 <vPortFree+0xb4>)
 80128dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80128de:	6938      	ldr	r0, [r7, #16]
 80128e0:	f000 f86c 	bl	80129bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80128e4:	f7fe fec2 	bl	801166c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80128e8:	bf00      	nop
 80128ea:	3718      	adds	r7, #24
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	20002c20 	.word	0x20002c20
 80128f4:	20002c18 	.word	0x20002c18

080128f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80128f8:	b480      	push	{r7}
 80128fa:	b085      	sub	sp, #20
 80128fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80128fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012902:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012904:	4b27      	ldr	r3, [pc, #156]	@ (80129a4 <prvHeapInit+0xac>)
 8012906:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	f003 0307 	and.w	r3, r3, #7
 801290e:	2b00      	cmp	r3, #0
 8012910:	d00c      	beq.n	801292c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	3307      	adds	r3, #7
 8012916:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	f023 0307 	bic.w	r3, r3, #7
 801291e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012920:	68ba      	ldr	r2, [r7, #8]
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	1ad3      	subs	r3, r2, r3
 8012926:	4a1f      	ldr	r2, [pc, #124]	@ (80129a4 <prvHeapInit+0xac>)
 8012928:	4413      	add	r3, r2
 801292a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012930:	4a1d      	ldr	r2, [pc, #116]	@ (80129a8 <prvHeapInit+0xb0>)
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012936:	4b1c      	ldr	r3, [pc, #112]	@ (80129a8 <prvHeapInit+0xb0>)
 8012938:	2200      	movs	r2, #0
 801293a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	68ba      	ldr	r2, [r7, #8]
 8012940:	4413      	add	r3, r2
 8012942:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012944:	2208      	movs	r2, #8
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	1a9b      	subs	r3, r3, r2
 801294a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	f023 0307 	bic.w	r3, r3, #7
 8012952:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	4a15      	ldr	r2, [pc, #84]	@ (80129ac <prvHeapInit+0xb4>)
 8012958:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801295a:	4b14      	ldr	r3, [pc, #80]	@ (80129ac <prvHeapInit+0xb4>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	2200      	movs	r2, #0
 8012960:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012962:	4b12      	ldr	r3, [pc, #72]	@ (80129ac <prvHeapInit+0xb4>)
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	2200      	movs	r2, #0
 8012968:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	68fa      	ldr	r2, [r7, #12]
 8012972:	1ad2      	subs	r2, r2, r3
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012978:	4b0c      	ldr	r3, [pc, #48]	@ (80129ac <prvHeapInit+0xb4>)
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	685b      	ldr	r3, [r3, #4]
 8012984:	4a0a      	ldr	r2, [pc, #40]	@ (80129b0 <prvHeapInit+0xb8>)
 8012986:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	685b      	ldr	r3, [r3, #4]
 801298c:	4a09      	ldr	r2, [pc, #36]	@ (80129b4 <prvHeapInit+0xbc>)
 801298e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012990:	4b09      	ldr	r3, [pc, #36]	@ (80129b8 <prvHeapInit+0xc0>)
 8012992:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012996:	601a      	str	r2, [r3, #0]
}
 8012998:	bf00      	nop
 801299a:	3714      	adds	r7, #20
 801299c:	46bd      	mov	sp, r7
 801299e:	bc80      	pop	{r7}
 80129a0:	4770      	bx	lr
 80129a2:	bf00      	nop
 80129a4:	2000140c 	.word	0x2000140c
 80129a8:	20002c0c 	.word	0x20002c0c
 80129ac:	20002c14 	.word	0x20002c14
 80129b0:	20002c1c 	.word	0x20002c1c
 80129b4:	20002c18 	.word	0x20002c18
 80129b8:	20002c20 	.word	0x20002c20

080129bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80129bc:	b480      	push	{r7}
 80129be:	b085      	sub	sp, #20
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80129c4:	4b27      	ldr	r3, [pc, #156]	@ (8012a64 <prvInsertBlockIntoFreeList+0xa8>)
 80129c6:	60fb      	str	r3, [r7, #12]
 80129c8:	e002      	b.n	80129d0 <prvInsertBlockIntoFreeList+0x14>
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	60fb      	str	r3, [r7, #12]
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	687a      	ldr	r2, [r7, #4]
 80129d6:	429a      	cmp	r2, r3
 80129d8:	d8f7      	bhi.n	80129ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	685b      	ldr	r3, [r3, #4]
 80129e2:	68ba      	ldr	r2, [r7, #8]
 80129e4:	4413      	add	r3, r2
 80129e6:	687a      	ldr	r2, [r7, #4]
 80129e8:	429a      	cmp	r2, r3
 80129ea:	d108      	bne.n	80129fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	685a      	ldr	r2, [r3, #4]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	685b      	ldr	r3, [r3, #4]
 80129f4:	441a      	add	r2, r3
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	685b      	ldr	r3, [r3, #4]
 8012a06:	68ba      	ldr	r2, [r7, #8]
 8012a08:	441a      	add	r2, r3
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	d118      	bne.n	8012a44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	681a      	ldr	r2, [r3, #0]
 8012a16:	4b14      	ldr	r3, [pc, #80]	@ (8012a68 <prvInsertBlockIntoFreeList+0xac>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	429a      	cmp	r2, r3
 8012a1c:	d00d      	beq.n	8012a3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	685a      	ldr	r2, [r3, #4]
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	441a      	add	r2, r3
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	681a      	ldr	r2, [r3, #0]
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	601a      	str	r2, [r3, #0]
 8012a38:	e008      	b.n	8012a4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8012a68 <prvInsertBlockIntoFreeList+0xac>)
 8012a3c:	681a      	ldr	r2, [r3, #0]
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	601a      	str	r2, [r3, #0]
 8012a42:	e003      	b.n	8012a4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	681a      	ldr	r2, [r3, #0]
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012a4c:	68fa      	ldr	r2, [r7, #12]
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	429a      	cmp	r2, r3
 8012a52:	d002      	beq.n	8012a5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	687a      	ldr	r2, [r7, #4]
 8012a58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012a5a:	bf00      	nop
 8012a5c:	3714      	adds	r7, #20
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bc80      	pop	{r7}
 8012a62:	4770      	bx	lr
 8012a64:	20002c0c 	.word	0x20002c0c
 8012a68:	20002c14 	.word	0x20002c14

08012a6c <calloc>:
 8012a6c:	4b02      	ldr	r3, [pc, #8]	@ (8012a78 <calloc+0xc>)
 8012a6e:	460a      	mov	r2, r1
 8012a70:	4601      	mov	r1, r0
 8012a72:	6818      	ldr	r0, [r3, #0]
 8012a74:	f000 b802 	b.w	8012a7c <_calloc_r>
 8012a78:	20000044 	.word	0x20000044

08012a7c <_calloc_r>:
 8012a7c:	b570      	push	{r4, r5, r6, lr}
 8012a7e:	fba1 5402 	umull	r5, r4, r1, r2
 8012a82:	b93c      	cbnz	r4, 8012a94 <_calloc_r+0x18>
 8012a84:	4629      	mov	r1, r5
 8012a86:	f000 f82f 	bl	8012ae8 <_malloc_r>
 8012a8a:	4606      	mov	r6, r0
 8012a8c:	b928      	cbnz	r0, 8012a9a <_calloc_r+0x1e>
 8012a8e:	2600      	movs	r6, #0
 8012a90:	4630      	mov	r0, r6
 8012a92:	bd70      	pop	{r4, r5, r6, pc}
 8012a94:	220c      	movs	r2, #12
 8012a96:	6002      	str	r2, [r0, #0]
 8012a98:	e7f9      	b.n	8012a8e <_calloc_r+0x12>
 8012a9a:	462a      	mov	r2, r5
 8012a9c:	4621      	mov	r1, r4
 8012a9e:	f000 f8af 	bl	8012c00 <memset>
 8012aa2:	e7f5      	b.n	8012a90 <_calloc_r+0x14>

08012aa4 <sbrk_aligned>:
 8012aa4:	b570      	push	{r4, r5, r6, lr}
 8012aa6:	4e0f      	ldr	r6, [pc, #60]	@ (8012ae4 <sbrk_aligned+0x40>)
 8012aa8:	460c      	mov	r4, r1
 8012aaa:	6831      	ldr	r1, [r6, #0]
 8012aac:	4605      	mov	r5, r0
 8012aae:	b911      	cbnz	r1, 8012ab6 <sbrk_aligned+0x12>
 8012ab0:	f000 f8ae 	bl	8012c10 <_sbrk_r>
 8012ab4:	6030      	str	r0, [r6, #0]
 8012ab6:	4621      	mov	r1, r4
 8012ab8:	4628      	mov	r0, r5
 8012aba:	f000 f8a9 	bl	8012c10 <_sbrk_r>
 8012abe:	1c43      	adds	r3, r0, #1
 8012ac0:	d103      	bne.n	8012aca <sbrk_aligned+0x26>
 8012ac2:	f04f 34ff 	mov.w	r4, #4294967295
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	bd70      	pop	{r4, r5, r6, pc}
 8012aca:	1cc4      	adds	r4, r0, #3
 8012acc:	f024 0403 	bic.w	r4, r4, #3
 8012ad0:	42a0      	cmp	r0, r4
 8012ad2:	d0f8      	beq.n	8012ac6 <sbrk_aligned+0x22>
 8012ad4:	1a21      	subs	r1, r4, r0
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	f000 f89a 	bl	8012c10 <_sbrk_r>
 8012adc:	3001      	adds	r0, #1
 8012ade:	d1f2      	bne.n	8012ac6 <sbrk_aligned+0x22>
 8012ae0:	e7ef      	b.n	8012ac2 <sbrk_aligned+0x1e>
 8012ae2:	bf00      	nop
 8012ae4:	20002c24 	.word	0x20002c24

08012ae8 <_malloc_r>:
 8012ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012aec:	1ccd      	adds	r5, r1, #3
 8012aee:	f025 0503 	bic.w	r5, r5, #3
 8012af2:	3508      	adds	r5, #8
 8012af4:	2d0c      	cmp	r5, #12
 8012af6:	bf38      	it	cc
 8012af8:	250c      	movcc	r5, #12
 8012afa:	2d00      	cmp	r5, #0
 8012afc:	4606      	mov	r6, r0
 8012afe:	db01      	blt.n	8012b04 <_malloc_r+0x1c>
 8012b00:	42a9      	cmp	r1, r5
 8012b02:	d904      	bls.n	8012b0e <_malloc_r+0x26>
 8012b04:	230c      	movs	r3, #12
 8012b06:	6033      	str	r3, [r6, #0]
 8012b08:	2000      	movs	r0, #0
 8012b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012be4 <_malloc_r+0xfc>
 8012b12:	f000 f869 	bl	8012be8 <__malloc_lock>
 8012b16:	f8d8 3000 	ldr.w	r3, [r8]
 8012b1a:	461c      	mov	r4, r3
 8012b1c:	bb44      	cbnz	r4, 8012b70 <_malloc_r+0x88>
 8012b1e:	4629      	mov	r1, r5
 8012b20:	4630      	mov	r0, r6
 8012b22:	f7ff ffbf 	bl	8012aa4 <sbrk_aligned>
 8012b26:	1c43      	adds	r3, r0, #1
 8012b28:	4604      	mov	r4, r0
 8012b2a:	d158      	bne.n	8012bde <_malloc_r+0xf6>
 8012b2c:	f8d8 4000 	ldr.w	r4, [r8]
 8012b30:	4627      	mov	r7, r4
 8012b32:	2f00      	cmp	r7, #0
 8012b34:	d143      	bne.n	8012bbe <_malloc_r+0xd6>
 8012b36:	2c00      	cmp	r4, #0
 8012b38:	d04b      	beq.n	8012bd2 <_malloc_r+0xea>
 8012b3a:	6823      	ldr	r3, [r4, #0]
 8012b3c:	4639      	mov	r1, r7
 8012b3e:	4630      	mov	r0, r6
 8012b40:	eb04 0903 	add.w	r9, r4, r3
 8012b44:	f000 f864 	bl	8012c10 <_sbrk_r>
 8012b48:	4581      	cmp	r9, r0
 8012b4a:	d142      	bne.n	8012bd2 <_malloc_r+0xea>
 8012b4c:	6821      	ldr	r1, [r4, #0]
 8012b4e:	4630      	mov	r0, r6
 8012b50:	1a6d      	subs	r5, r5, r1
 8012b52:	4629      	mov	r1, r5
 8012b54:	f7ff ffa6 	bl	8012aa4 <sbrk_aligned>
 8012b58:	3001      	adds	r0, #1
 8012b5a:	d03a      	beq.n	8012bd2 <_malloc_r+0xea>
 8012b5c:	6823      	ldr	r3, [r4, #0]
 8012b5e:	442b      	add	r3, r5
 8012b60:	6023      	str	r3, [r4, #0]
 8012b62:	f8d8 3000 	ldr.w	r3, [r8]
 8012b66:	685a      	ldr	r2, [r3, #4]
 8012b68:	bb62      	cbnz	r2, 8012bc4 <_malloc_r+0xdc>
 8012b6a:	f8c8 7000 	str.w	r7, [r8]
 8012b6e:	e00f      	b.n	8012b90 <_malloc_r+0xa8>
 8012b70:	6822      	ldr	r2, [r4, #0]
 8012b72:	1b52      	subs	r2, r2, r5
 8012b74:	d420      	bmi.n	8012bb8 <_malloc_r+0xd0>
 8012b76:	2a0b      	cmp	r2, #11
 8012b78:	d917      	bls.n	8012baa <_malloc_r+0xc2>
 8012b7a:	1961      	adds	r1, r4, r5
 8012b7c:	42a3      	cmp	r3, r4
 8012b7e:	6025      	str	r5, [r4, #0]
 8012b80:	bf18      	it	ne
 8012b82:	6059      	strne	r1, [r3, #4]
 8012b84:	6863      	ldr	r3, [r4, #4]
 8012b86:	bf08      	it	eq
 8012b88:	f8c8 1000 	streq.w	r1, [r8]
 8012b8c:	5162      	str	r2, [r4, r5]
 8012b8e:	604b      	str	r3, [r1, #4]
 8012b90:	4630      	mov	r0, r6
 8012b92:	f000 f82f 	bl	8012bf4 <__malloc_unlock>
 8012b96:	f104 000b 	add.w	r0, r4, #11
 8012b9a:	1d23      	adds	r3, r4, #4
 8012b9c:	f020 0007 	bic.w	r0, r0, #7
 8012ba0:	1ac2      	subs	r2, r0, r3
 8012ba2:	bf1c      	itt	ne
 8012ba4:	1a1b      	subne	r3, r3, r0
 8012ba6:	50a3      	strne	r3, [r4, r2]
 8012ba8:	e7af      	b.n	8012b0a <_malloc_r+0x22>
 8012baa:	6862      	ldr	r2, [r4, #4]
 8012bac:	42a3      	cmp	r3, r4
 8012bae:	bf0c      	ite	eq
 8012bb0:	f8c8 2000 	streq.w	r2, [r8]
 8012bb4:	605a      	strne	r2, [r3, #4]
 8012bb6:	e7eb      	b.n	8012b90 <_malloc_r+0xa8>
 8012bb8:	4623      	mov	r3, r4
 8012bba:	6864      	ldr	r4, [r4, #4]
 8012bbc:	e7ae      	b.n	8012b1c <_malloc_r+0x34>
 8012bbe:	463c      	mov	r4, r7
 8012bc0:	687f      	ldr	r7, [r7, #4]
 8012bc2:	e7b6      	b.n	8012b32 <_malloc_r+0x4a>
 8012bc4:	461a      	mov	r2, r3
 8012bc6:	685b      	ldr	r3, [r3, #4]
 8012bc8:	42a3      	cmp	r3, r4
 8012bca:	d1fb      	bne.n	8012bc4 <_malloc_r+0xdc>
 8012bcc:	2300      	movs	r3, #0
 8012bce:	6053      	str	r3, [r2, #4]
 8012bd0:	e7de      	b.n	8012b90 <_malloc_r+0xa8>
 8012bd2:	230c      	movs	r3, #12
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	6033      	str	r3, [r6, #0]
 8012bd8:	f000 f80c 	bl	8012bf4 <__malloc_unlock>
 8012bdc:	e794      	b.n	8012b08 <_malloc_r+0x20>
 8012bde:	6005      	str	r5, [r0, #0]
 8012be0:	e7d6      	b.n	8012b90 <_malloc_r+0xa8>
 8012be2:	bf00      	nop
 8012be4:	20002c28 	.word	0x20002c28

08012be8 <__malloc_lock>:
 8012be8:	4801      	ldr	r0, [pc, #4]	@ (8012bf0 <__malloc_lock+0x8>)
 8012bea:	f000 b84b 	b.w	8012c84 <__retarget_lock_acquire_recursive>
 8012bee:	bf00      	nop
 8012bf0:	20002d68 	.word	0x20002d68

08012bf4 <__malloc_unlock>:
 8012bf4:	4801      	ldr	r0, [pc, #4]	@ (8012bfc <__malloc_unlock+0x8>)
 8012bf6:	f000 b846 	b.w	8012c86 <__retarget_lock_release_recursive>
 8012bfa:	bf00      	nop
 8012bfc:	20002d68 	.word	0x20002d68

08012c00 <memset>:
 8012c00:	4603      	mov	r3, r0
 8012c02:	4402      	add	r2, r0
 8012c04:	4293      	cmp	r3, r2
 8012c06:	d100      	bne.n	8012c0a <memset+0xa>
 8012c08:	4770      	bx	lr
 8012c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8012c0e:	e7f9      	b.n	8012c04 <memset+0x4>

08012c10 <_sbrk_r>:
 8012c10:	b538      	push	{r3, r4, r5, lr}
 8012c12:	2300      	movs	r3, #0
 8012c14:	4d05      	ldr	r5, [pc, #20]	@ (8012c2c <_sbrk_r+0x1c>)
 8012c16:	4604      	mov	r4, r0
 8012c18:	4608      	mov	r0, r1
 8012c1a:	602b      	str	r3, [r5, #0]
 8012c1c:	f7f1 fe20 	bl	8004860 <_sbrk>
 8012c20:	1c43      	adds	r3, r0, #1
 8012c22:	d102      	bne.n	8012c2a <_sbrk_r+0x1a>
 8012c24:	682b      	ldr	r3, [r5, #0]
 8012c26:	b103      	cbz	r3, 8012c2a <_sbrk_r+0x1a>
 8012c28:	6023      	str	r3, [r4, #0]
 8012c2a:	bd38      	pop	{r3, r4, r5, pc}
 8012c2c:	20002d64 	.word	0x20002d64

08012c30 <__errno>:
 8012c30:	4b01      	ldr	r3, [pc, #4]	@ (8012c38 <__errno+0x8>)
 8012c32:	6818      	ldr	r0, [r3, #0]
 8012c34:	4770      	bx	lr
 8012c36:	bf00      	nop
 8012c38:	20000044 	.word	0x20000044

08012c3c <__libc_init_array>:
 8012c3c:	b570      	push	{r4, r5, r6, lr}
 8012c3e:	2600      	movs	r6, #0
 8012c40:	4d0c      	ldr	r5, [pc, #48]	@ (8012c74 <__libc_init_array+0x38>)
 8012c42:	4c0d      	ldr	r4, [pc, #52]	@ (8012c78 <__libc_init_array+0x3c>)
 8012c44:	1b64      	subs	r4, r4, r5
 8012c46:	10a4      	asrs	r4, r4, #2
 8012c48:	42a6      	cmp	r6, r4
 8012c4a:	d109      	bne.n	8012c60 <__libc_init_array+0x24>
 8012c4c:	f000 f9ae 	bl	8012fac <_init>
 8012c50:	2600      	movs	r6, #0
 8012c52:	4d0a      	ldr	r5, [pc, #40]	@ (8012c7c <__libc_init_array+0x40>)
 8012c54:	4c0a      	ldr	r4, [pc, #40]	@ (8012c80 <__libc_init_array+0x44>)
 8012c56:	1b64      	subs	r4, r4, r5
 8012c58:	10a4      	asrs	r4, r4, #2
 8012c5a:	42a6      	cmp	r6, r4
 8012c5c:	d105      	bne.n	8012c6a <__libc_init_array+0x2e>
 8012c5e:	bd70      	pop	{r4, r5, r6, pc}
 8012c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c64:	4798      	blx	r3
 8012c66:	3601      	adds	r6, #1
 8012c68:	e7ee      	b.n	8012c48 <__libc_init_array+0xc>
 8012c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c6e:	4798      	blx	r3
 8012c70:	3601      	adds	r6, #1
 8012c72:	e7f2      	b.n	8012c5a <__libc_init_array+0x1e>
 8012c74:	0801374c 	.word	0x0801374c
 8012c78:	0801374c 	.word	0x0801374c
 8012c7c:	0801374c 	.word	0x0801374c
 8012c80:	08013750 	.word	0x08013750

08012c84 <__retarget_lock_acquire_recursive>:
 8012c84:	4770      	bx	lr

08012c86 <__retarget_lock_release_recursive>:
 8012c86:	4770      	bx	lr

08012c88 <memcpy>:
 8012c88:	440a      	add	r2, r1
 8012c8a:	4291      	cmp	r1, r2
 8012c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c90:	d100      	bne.n	8012c94 <memcpy+0xc>
 8012c92:	4770      	bx	lr
 8012c94:	b510      	push	{r4, lr}
 8012c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c9a:	4291      	cmp	r1, r2
 8012c9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ca0:	d1f9      	bne.n	8012c96 <memcpy+0xe>
 8012ca2:	bd10      	pop	{r4, pc}

08012ca4 <sqrt>:
 8012ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ca6:	4606      	mov	r6, r0
 8012ca8:	460f      	mov	r7, r1
 8012caa:	f000 f839 	bl	8012d20 <__ieee754_sqrt>
 8012cae:	4632      	mov	r2, r6
 8012cb0:	4604      	mov	r4, r0
 8012cb2:	460d      	mov	r5, r1
 8012cb4:	463b      	mov	r3, r7
 8012cb6:	4630      	mov	r0, r6
 8012cb8:	4639      	mov	r1, r7
 8012cba:	f7ed ff0f 	bl	8000adc <__aeabi_dcmpun>
 8012cbe:	b990      	cbnz	r0, 8012ce6 <sqrt+0x42>
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	4630      	mov	r0, r6
 8012cc6:	4639      	mov	r1, r7
 8012cc8:	f7ed fee0 	bl	8000a8c <__aeabi_dcmplt>
 8012ccc:	b158      	cbz	r0, 8012ce6 <sqrt+0x42>
 8012cce:	f7ff ffaf 	bl	8012c30 <__errno>
 8012cd2:	2321      	movs	r3, #33	@ 0x21
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	6003      	str	r3, [r0, #0]
 8012cd8:	2300      	movs	r3, #0
 8012cda:	4610      	mov	r0, r2
 8012cdc:	4619      	mov	r1, r3
 8012cde:	f7ed fd8d 	bl	80007fc <__aeabi_ddiv>
 8012ce2:	4604      	mov	r4, r0
 8012ce4:	460d      	mov	r5, r1
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	4629      	mov	r1, r5
 8012cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012cec <sqrtf>:
 8012cec:	b538      	push	{r3, r4, r5, lr}
 8012cee:	4605      	mov	r5, r0
 8012cf0:	f000 f8ec 	bl	8012ecc <__ieee754_sqrtf>
 8012cf4:	4629      	mov	r1, r5
 8012cf6:	4604      	mov	r4, r0
 8012cf8:	4628      	mov	r0, r5
 8012cfa:	f7ee fa51 	bl	80011a0 <__aeabi_fcmpun>
 8012cfe:	b968      	cbnz	r0, 8012d1c <sqrtf+0x30>
 8012d00:	2100      	movs	r1, #0
 8012d02:	4628      	mov	r0, r5
 8012d04:	f7ee fa24 	bl	8001150 <__aeabi_fcmplt>
 8012d08:	b140      	cbz	r0, 8012d1c <sqrtf+0x30>
 8012d0a:	f7ff ff91 	bl	8012c30 <__errno>
 8012d0e:	2321      	movs	r3, #33	@ 0x21
 8012d10:	2100      	movs	r1, #0
 8012d12:	6003      	str	r3, [r0, #0]
 8012d14:	4608      	mov	r0, r1
 8012d16:	f7ee f931 	bl	8000f7c <__aeabi_fdiv>
 8012d1a:	4604      	mov	r4, r0
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	bd38      	pop	{r3, r4, r5, pc}

08012d20 <__ieee754_sqrt>:
 8012d20:	4a67      	ldr	r2, [pc, #412]	@ (8012ec0 <__ieee754_sqrt+0x1a0>)
 8012d22:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d26:	438a      	bics	r2, r1
 8012d28:	4606      	mov	r6, r0
 8012d2a:	460f      	mov	r7, r1
 8012d2c:	460b      	mov	r3, r1
 8012d2e:	4604      	mov	r4, r0
 8012d30:	d10e      	bne.n	8012d50 <__ieee754_sqrt+0x30>
 8012d32:	4602      	mov	r2, r0
 8012d34:	f7ed fc38 	bl	80005a8 <__aeabi_dmul>
 8012d38:	4602      	mov	r2, r0
 8012d3a:	460b      	mov	r3, r1
 8012d3c:	4630      	mov	r0, r6
 8012d3e:	4639      	mov	r1, r7
 8012d40:	f7ed fa7c 	bl	800023c <__adddf3>
 8012d44:	4606      	mov	r6, r0
 8012d46:	460f      	mov	r7, r1
 8012d48:	4630      	mov	r0, r6
 8012d4a:	4639      	mov	r1, r7
 8012d4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d50:	2900      	cmp	r1, #0
 8012d52:	dc0c      	bgt.n	8012d6e <__ieee754_sqrt+0x4e>
 8012d54:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8012d58:	4302      	orrs	r2, r0
 8012d5a:	d0f5      	beq.n	8012d48 <__ieee754_sqrt+0x28>
 8012d5c:	b189      	cbz	r1, 8012d82 <__ieee754_sqrt+0x62>
 8012d5e:	4602      	mov	r2, r0
 8012d60:	f7ed fa6a 	bl	8000238 <__aeabi_dsub>
 8012d64:	4602      	mov	r2, r0
 8012d66:	460b      	mov	r3, r1
 8012d68:	f7ed fd48 	bl	80007fc <__aeabi_ddiv>
 8012d6c:	e7ea      	b.n	8012d44 <__ieee754_sqrt+0x24>
 8012d6e:	150a      	asrs	r2, r1, #20
 8012d70:	d115      	bne.n	8012d9e <__ieee754_sqrt+0x7e>
 8012d72:	2100      	movs	r1, #0
 8012d74:	e009      	b.n	8012d8a <__ieee754_sqrt+0x6a>
 8012d76:	0ae3      	lsrs	r3, r4, #11
 8012d78:	3a15      	subs	r2, #21
 8012d7a:	0564      	lsls	r4, r4, #21
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d0fa      	beq.n	8012d76 <__ieee754_sqrt+0x56>
 8012d80:	e7f7      	b.n	8012d72 <__ieee754_sqrt+0x52>
 8012d82:	460a      	mov	r2, r1
 8012d84:	e7fa      	b.n	8012d7c <__ieee754_sqrt+0x5c>
 8012d86:	005b      	lsls	r3, r3, #1
 8012d88:	3101      	adds	r1, #1
 8012d8a:	02d8      	lsls	r0, r3, #11
 8012d8c:	d5fb      	bpl.n	8012d86 <__ieee754_sqrt+0x66>
 8012d8e:	1e48      	subs	r0, r1, #1
 8012d90:	1a12      	subs	r2, r2, r0
 8012d92:	f1c1 0020 	rsb	r0, r1, #32
 8012d96:	fa24 f000 	lsr.w	r0, r4, r0
 8012d9a:	4303      	orrs	r3, r0
 8012d9c:	408c      	lsls	r4, r1
 8012d9e:	2600      	movs	r6, #0
 8012da0:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8012da4:	2116      	movs	r1, #22
 8012da6:	07d2      	lsls	r2, r2, #31
 8012da8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8012dac:	4632      	mov	r2, r6
 8012dae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012db2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012db6:	bf5c      	itt	pl
 8012db8:	005b      	lslpl	r3, r3, #1
 8012dba:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8012dbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012dc2:	bf58      	it	pl
 8012dc4:	0064      	lslpl	r4, r4, #1
 8012dc6:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8012dca:	107f      	asrs	r7, r7, #1
 8012dcc:	0064      	lsls	r4, r4, #1
 8012dce:	1815      	adds	r5, r2, r0
 8012dd0:	429d      	cmp	r5, r3
 8012dd2:	bfde      	ittt	le
 8012dd4:	182a      	addle	r2, r5, r0
 8012dd6:	1b5b      	suble	r3, r3, r5
 8012dd8:	1836      	addle	r6, r6, r0
 8012dda:	0fe5      	lsrs	r5, r4, #31
 8012ddc:	3901      	subs	r1, #1
 8012dde:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8012de2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8012de6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8012dea:	d1f0      	bne.n	8012dce <__ieee754_sqrt+0xae>
 8012dec:	460d      	mov	r5, r1
 8012dee:	f04f 0a20 	mov.w	sl, #32
 8012df2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8012df6:	429a      	cmp	r2, r3
 8012df8:	eb01 0c00 	add.w	ip, r1, r0
 8012dfc:	db02      	blt.n	8012e04 <__ieee754_sqrt+0xe4>
 8012dfe:	d113      	bne.n	8012e28 <__ieee754_sqrt+0x108>
 8012e00:	45a4      	cmp	ip, r4
 8012e02:	d811      	bhi.n	8012e28 <__ieee754_sqrt+0x108>
 8012e04:	f1bc 0f00 	cmp.w	ip, #0
 8012e08:	eb0c 0100 	add.w	r1, ip, r0
 8012e0c:	da42      	bge.n	8012e94 <__ieee754_sqrt+0x174>
 8012e0e:	2900      	cmp	r1, #0
 8012e10:	db40      	blt.n	8012e94 <__ieee754_sqrt+0x174>
 8012e12:	f102 0e01 	add.w	lr, r2, #1
 8012e16:	1a9b      	subs	r3, r3, r2
 8012e18:	4672      	mov	r2, lr
 8012e1a:	45a4      	cmp	ip, r4
 8012e1c:	bf88      	it	hi
 8012e1e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012e22:	eba4 040c 	sub.w	r4, r4, ip
 8012e26:	4405      	add	r5, r0
 8012e28:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8012e2c:	f1ba 0a01 	subs.w	sl, sl, #1
 8012e30:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8012e34:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8012e38:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8012e3c:	d1db      	bne.n	8012df6 <__ieee754_sqrt+0xd6>
 8012e3e:	431c      	orrs	r4, r3
 8012e40:	d01a      	beq.n	8012e78 <__ieee754_sqrt+0x158>
 8012e42:	4c20      	ldr	r4, [pc, #128]	@ (8012ec4 <__ieee754_sqrt+0x1a4>)
 8012e44:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8012ec8 <__ieee754_sqrt+0x1a8>
 8012e48:	e9d4 0100 	ldrd	r0, r1, [r4]
 8012e4c:	e9db 2300 	ldrd	r2, r3, [fp]
 8012e50:	f7ed f9f2 	bl	8000238 <__aeabi_dsub>
 8012e54:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012e58:	4602      	mov	r2, r0
 8012e5a:	460b      	mov	r3, r1
 8012e5c:	4640      	mov	r0, r8
 8012e5e:	4649      	mov	r1, r9
 8012e60:	f7ed fe1e 	bl	8000aa0 <__aeabi_dcmple>
 8012e64:	b140      	cbz	r0, 8012e78 <__ieee754_sqrt+0x158>
 8012e66:	e9d4 0100 	ldrd	r0, r1, [r4]
 8012e6a:	e9db 2300 	ldrd	r2, r3, [fp]
 8012e6e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012e72:	d111      	bne.n	8012e98 <__ieee754_sqrt+0x178>
 8012e74:	4655      	mov	r5, sl
 8012e76:	3601      	adds	r6, #1
 8012e78:	1072      	asrs	r2, r6, #1
 8012e7a:	086b      	lsrs	r3, r5, #1
 8012e7c:	07f1      	lsls	r1, r6, #31
 8012e7e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012e82:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012e86:	bf48      	it	mi
 8012e88:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8012e92:	e757      	b.n	8012d44 <__ieee754_sqrt+0x24>
 8012e94:	4696      	mov	lr, r2
 8012e96:	e7be      	b.n	8012e16 <__ieee754_sqrt+0xf6>
 8012e98:	f7ed f9d0 	bl	800023c <__adddf3>
 8012e9c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	460b      	mov	r3, r1
 8012ea4:	4640      	mov	r0, r8
 8012ea6:	4649      	mov	r1, r9
 8012ea8:	f7ed fdf0 	bl	8000a8c <__aeabi_dcmplt>
 8012eac:	b120      	cbz	r0, 8012eb8 <__ieee754_sqrt+0x198>
 8012eae:	1ca8      	adds	r0, r5, #2
 8012eb0:	bf08      	it	eq
 8012eb2:	3601      	addeq	r6, #1
 8012eb4:	3502      	adds	r5, #2
 8012eb6:	e7df      	b.n	8012e78 <__ieee754_sqrt+0x158>
 8012eb8:	1c6b      	adds	r3, r5, #1
 8012eba:	f023 0501 	bic.w	r5, r3, #1
 8012ebe:	e7db      	b.n	8012e78 <__ieee754_sqrt+0x158>
 8012ec0:	7ff00000 	.word	0x7ff00000
 8012ec4:	200000a0 	.word	0x200000a0
 8012ec8:	20000098 	.word	0x20000098

08012ecc <__ieee754_sqrtf>:
 8012ecc:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8012ed0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ed8:	4603      	mov	r3, r0
 8012eda:	4604      	mov	r4, r0
 8012edc:	d30a      	bcc.n	8012ef4 <__ieee754_sqrtf+0x28>
 8012ede:	4601      	mov	r1, r0
 8012ee0:	f7ed ff98 	bl	8000e14 <__aeabi_fmul>
 8012ee4:	4601      	mov	r1, r0
 8012ee6:	4620      	mov	r0, r4
 8012ee8:	f7ed fe8c 	bl	8000c04 <__addsf3>
 8012eec:	4604      	mov	r4, r0
 8012eee:	4620      	mov	r0, r4
 8012ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ef4:	2a00      	cmp	r2, #0
 8012ef6:	d0fa      	beq.n	8012eee <__ieee754_sqrtf+0x22>
 8012ef8:	2800      	cmp	r0, #0
 8012efa:	da06      	bge.n	8012f0a <__ieee754_sqrtf+0x3e>
 8012efc:	4601      	mov	r1, r0
 8012efe:	f7ed fe7f 	bl	8000c00 <__aeabi_fsub>
 8012f02:	4601      	mov	r1, r0
 8012f04:	f7ee f83a 	bl	8000f7c <__aeabi_fdiv>
 8012f08:	e7f0      	b.n	8012eec <__ieee754_sqrtf+0x20>
 8012f0a:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 8012f0e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8012f12:	d03e      	beq.n	8012f92 <__ieee754_sqrtf+0xc6>
 8012f14:	2400      	movs	r4, #0
 8012f16:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 8012f1a:	07ca      	lsls	r2, r1, #31
 8012f1c:	f04f 0019 	mov.w	r0, #25
 8012f20:	4626      	mov	r6, r4
 8012f22:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8012f26:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012f2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012f2e:	bf58      	it	pl
 8012f30:	005b      	lslpl	r3, r3, #1
 8012f32:	106d      	asrs	r5, r5, #1
 8012f34:	005b      	lsls	r3, r3, #1
 8012f36:	1872      	adds	r2, r6, r1
 8012f38:	429a      	cmp	r2, r3
 8012f3a:	bfcf      	iteee	gt
 8012f3c:	461a      	movgt	r2, r3
 8012f3e:	1856      	addle	r6, r2, r1
 8012f40:	1864      	addle	r4, r4, r1
 8012f42:	1a9a      	suble	r2, r3, r2
 8012f44:	3801      	subs	r0, #1
 8012f46:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8012f4a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012f4e:	d1f2      	bne.n	8012f36 <__ieee754_sqrtf+0x6a>
 8012f50:	b1ba      	cbz	r2, 8012f82 <__ieee754_sqrtf+0xb6>
 8012f52:	4e14      	ldr	r6, [pc, #80]	@ (8012fa4 <__ieee754_sqrtf+0xd8>)
 8012f54:	4f14      	ldr	r7, [pc, #80]	@ (8012fa8 <__ieee754_sqrtf+0xdc>)
 8012f56:	6830      	ldr	r0, [r6, #0]
 8012f58:	6839      	ldr	r1, [r7, #0]
 8012f5a:	f7ed fe51 	bl	8000c00 <__aeabi_fsub>
 8012f5e:	f8d6 8000 	ldr.w	r8, [r6]
 8012f62:	4601      	mov	r1, r0
 8012f64:	4640      	mov	r0, r8
 8012f66:	f7ee f8fd 	bl	8001164 <__aeabi_fcmple>
 8012f6a:	b150      	cbz	r0, 8012f82 <__ieee754_sqrtf+0xb6>
 8012f6c:	6830      	ldr	r0, [r6, #0]
 8012f6e:	6839      	ldr	r1, [r7, #0]
 8012f70:	f7ed fe48 	bl	8000c04 <__addsf3>
 8012f74:	6836      	ldr	r6, [r6, #0]
 8012f76:	4601      	mov	r1, r0
 8012f78:	4630      	mov	r0, r6
 8012f7a:	f7ee f8e9 	bl	8001150 <__aeabi_fcmplt>
 8012f7e:	b168      	cbz	r0, 8012f9c <__ieee754_sqrtf+0xd0>
 8012f80:	3402      	adds	r4, #2
 8012f82:	1064      	asrs	r4, r4, #1
 8012f84:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8012f88:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8012f8c:	e7af      	b.n	8012eee <__ieee754_sqrtf+0x22>
 8012f8e:	005b      	lsls	r3, r3, #1
 8012f90:	3201      	adds	r2, #1
 8012f92:	0218      	lsls	r0, r3, #8
 8012f94:	d5fb      	bpl.n	8012f8e <__ieee754_sqrtf+0xc2>
 8012f96:	3a01      	subs	r2, #1
 8012f98:	1a89      	subs	r1, r1, r2
 8012f9a:	e7bb      	b.n	8012f14 <__ieee754_sqrtf+0x48>
 8012f9c:	3401      	adds	r4, #1
 8012f9e:	f024 0401 	bic.w	r4, r4, #1
 8012fa2:	e7ee      	b.n	8012f82 <__ieee754_sqrtf+0xb6>
 8012fa4:	200000ac 	.word	0x200000ac
 8012fa8:	200000a8 	.word	0x200000a8

08012fac <_init>:
 8012fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fae:	bf00      	nop
 8012fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fb2:	bc08      	pop	{r3}
 8012fb4:	469e      	mov	lr, r3
 8012fb6:	4770      	bx	lr

08012fb8 <_fini>:
 8012fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fba:	bf00      	nop
 8012fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fbe:	bc08      	pop	{r3}
 8012fc0:	469e      	mov	lr, r3
 8012fc2:	4770      	bx	lr
