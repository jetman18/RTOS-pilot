
RTOSpilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015c28  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  08015e18  08015e18  00016e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016610  08016610  000180f0  2**0
                  CONTENTS
  4 .ARM          00000008  08016610  08016610  00017610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016618  08016618  000180f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016618  08016618  00017618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801661c  0801661c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f0  20000000  08016620  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d20  200000f0  08016710  000180f0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20002e10  08016710  00018e10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000180f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b3a5  00000000  00000000  00018119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000075d1  00000000  00000000  000434be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023d0  00000000  00000000  0004aa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b85  00000000  00000000  0004ce60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024dda  00000000  00000000  0004e9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035a35  00000000  00000000  000737bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d31e5  00000000  00000000  000a91f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017c3d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b74  00000000  00000000  0017c41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00185f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000f0 	.word	0x200000f0
 800020c:	00000000 	.word	0x00000000
 8000210:	08015e00 	.word	0x08015e00

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000f4 	.word	0x200000f4
 800022c:	08015e00 	.word	0x08015e00

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	@ 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fmul>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d06f      	beq.n	8000f4c <__aeabi_fmul+0xf8>
 8000e6c:	441a      	add	r2, r3
 8000e6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e7a:	d01e      	beq.n	8000eba <__aeabi_fmul+0x66>
 8000e7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e88:	fba0 3101 	umull	r3, r1, r0, r1
 8000e8c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e90:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e94:	bf3e      	ittt	cc
 8000e96:	0049      	lslcc	r1, r1, #1
 8000e98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ea2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ea6:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea8:	d81d      	bhi.n	8000ee6 <__aeabi_fmul+0x92>
 8000eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb2:	bf08      	it	eq
 8000eb4:	f020 0001 	biceq.w	r0, r0, #1
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ec2:	bf08      	it	eq
 8000ec4:	0249      	lsleq	r1, r1, #9
 8000ec6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ece:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed0:	bfc2      	ittt	gt
 8000ed2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ed6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eda:	4770      	bxgt	lr
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	dc5d      	bgt.n	8000fa4 <__aeabi_fmul+0x150>
 8000ee8:	f112 0f19 	cmn.w	r2, #25
 8000eec:	bfdc      	itt	le
 8000eee:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ef2:	4770      	bxle	lr
 8000ef4:	f1c2 0200 	rsb	r2, r2, #0
 8000ef8:	0041      	lsls	r1, r0, #1
 8000efa:	fa21 f102 	lsr.w	r1, r1, r2
 8000efe:	f1c2 0220 	rsb	r2, r2, #32
 8000f02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f0a:	f140 0000 	adc.w	r0, r0, #0
 8000f0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f12:	bf08      	it	eq
 8000f14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f18:	4770      	bx	lr
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fmul+0xce>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fmul+0xe6>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e78f      	b.n	8000e6c <__aeabi_fmul+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	bf18      	it	ne
 8000f56:	ea93 0f0c 	teqne	r3, ip
 8000f5a:	d00a      	beq.n	8000f72 <__aeabi_fmul+0x11e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	d1d8      	bne.n	8000f1a <__aeabi_fmul+0xc6>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f70:	4770      	bx	lr
 8000f72:	f090 0f00 	teq	r0, #0
 8000f76:	bf17      	itett	ne
 8000f78:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f7c:	4608      	moveq	r0, r1
 8000f7e:	f091 0f00 	teqne	r1, #0
 8000f82:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f86:	d014      	beq.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_fmul+0x13e>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d10f      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f92:	ea93 0f0c 	teq	r3, ip
 8000f96:	d103      	bne.n	8000fa0 <__aeabi_fmul+0x14c>
 8000f98:	024b      	lsls	r3, r1, #9
 8000f9a:	bf18      	it	ne
 8000f9c:	4608      	movne	r0, r1
 8000f9e:	d108      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000fa0:	ea80 0001 	eor.w	r0, r0, r1
 8000fa4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fa8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb0:	4770      	bx	lr
 8000fb2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_fdiv>:
 8000fbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fc4:	bf1e      	ittt	ne
 8000fc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fca:	ea92 0f0c 	teqne	r2, ip
 8000fce:	ea93 0f0c 	teqne	r3, ip
 8000fd2:	d069      	beq.n	80010a8 <__aeabi_fdiv+0xec>
 8000fd4:	eba2 0203 	sub.w	r2, r2, r3
 8000fd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fe2:	d037      	beq.n	8001054 <__aeabi_fdiv+0x98>
 8000fe4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fe8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf38      	it	cc
 8000ff8:	005b      	lslcc	r3, r3, #1
 8000ffa:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ffe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001002:	428b      	cmp	r3, r1
 8001004:	bf24      	itt	cs
 8001006:	1a5b      	subcs	r3, r3, r1
 8001008:	ea40 000c 	orrcs.w	r0, r0, ip
 800100c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001010:	bf24      	itt	cs
 8001012:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001016:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800101a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800101e:	bf24      	itt	cs
 8001020:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001028:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800102c:	bf24      	itt	cs
 800102e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001032:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	bf18      	it	ne
 800103a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800103e:	d1e0      	bne.n	8001002 <__aeabi_fdiv+0x46>
 8001040:	2afd      	cmp	r2, #253	@ 0xfd
 8001042:	f63f af50 	bhi.w	8000ee6 <__aeabi_fmul+0x92>
 8001046:	428b      	cmp	r3, r1
 8001048:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800104c:	bf08      	it	eq
 800104e:	f020 0001 	biceq.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001058:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800105c:	327f      	adds	r2, #127	@ 0x7f
 800105e:	bfc2      	ittt	gt
 8001060:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001064:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001068:	4770      	bxgt	lr
 800106a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	3a01      	subs	r2, #1
 8001074:	e737      	b.n	8000ee6 <__aeabi_fmul+0x92>
 8001076:	f092 0f00 	teq	r2, #0
 800107a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800107e:	bf02      	ittt	eq
 8001080:	0040      	lsleq	r0, r0, #1
 8001082:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001086:	3a01      	subeq	r2, #1
 8001088:	d0f9      	beq.n	800107e <__aeabi_fdiv+0xc2>
 800108a:	ea40 000c 	orr.w	r0, r0, ip
 800108e:	f093 0f00 	teq	r3, #0
 8001092:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0049      	lsleq	r1, r1, #1
 800109a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800109e:	3b01      	subeq	r3, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fdiv+0xda>
 80010a2:	ea41 010c 	orr.w	r1, r1, ip
 80010a6:	e795      	b.n	8000fd4 <__aeabi_fdiv+0x18>
 80010a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010ac:	ea92 0f0c 	teq	r2, ip
 80010b0:	d108      	bne.n	80010c4 <__aeabi_fdiv+0x108>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	f47f af7d 	bne.w	8000fb2 <__aeabi_fmul+0x15e>
 80010b8:	ea93 0f0c 	teq	r3, ip
 80010bc:	f47f af70 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010c0:	4608      	mov	r0, r1
 80010c2:	e776      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010c4:	ea93 0f0c 	teq	r3, ip
 80010c8:	d104      	bne.n	80010d4 <__aeabi_fdiv+0x118>
 80010ca:	024b      	lsls	r3, r1, #9
 80010cc:	f43f af4c 	beq.w	8000f68 <__aeabi_fmul+0x114>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e76e      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010d4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010d8:	bf18      	it	ne
 80010da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010de:	d1ca      	bne.n	8001076 <__aeabi_fdiv+0xba>
 80010e0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010e4:	f47f af5c 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010e8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ec:	f47f af3c 	bne.w	8000f68 <__aeabi_fmul+0x114>
 80010f0:	e75f      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010f2:	bf00      	nop

080010f4 <__gesf2>:
 80010f4:	f04f 3cff 	mov.w	ip, #4294967295
 80010f8:	e006      	b.n	8001108 <__cmpsf2+0x4>
 80010fa:	bf00      	nop

080010fc <__lesf2>:
 80010fc:	f04f 0c01 	mov.w	ip, #1
 8001100:	e002      	b.n	8001108 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__cmpsf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	f84d cd04 	str.w	ip, [sp, #-4]!
 800110c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001110:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001114:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001118:	bf18      	it	ne
 800111a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800111e:	d011      	beq.n	8001144 <__cmpsf2+0x40>
 8001120:	b001      	add	sp, #4
 8001122:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001126:	bf18      	it	ne
 8001128:	ea90 0f01 	teqne	r0, r1
 800112c:	bf58      	it	pl
 800112e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001132:	bf88      	it	hi
 8001134:	17c8      	asrhi	r0, r1, #31
 8001136:	bf38      	it	cc
 8001138:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800113c:	bf18      	it	ne
 800113e:	f040 0001 	orrne.w	r0, r0, #1
 8001142:	4770      	bx	lr
 8001144:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001148:	d102      	bne.n	8001150 <__cmpsf2+0x4c>
 800114a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800114e:	d105      	bne.n	800115c <__cmpsf2+0x58>
 8001150:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001154:	d1e4      	bne.n	8001120 <__cmpsf2+0x1c>
 8001156:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800115a:	d0e1      	beq.n	8001120 <__cmpsf2+0x1c>
 800115c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <__aeabi_cfrcmple>:
 8001164:	4684      	mov	ip, r0
 8001166:	4608      	mov	r0, r1
 8001168:	4661      	mov	r1, ip
 800116a:	e7ff      	b.n	800116c <__aeabi_cfcmpeq>

0800116c <__aeabi_cfcmpeq>:
 800116c:	b50f      	push	{r0, r1, r2, r3, lr}
 800116e:	f7ff ffc9 	bl	8001104 <__cmpsf2>
 8001172:	2800      	cmp	r0, #0
 8001174:	bf48      	it	mi
 8001176:	f110 0f00 	cmnmi.w	r0, #0
 800117a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800117c <__aeabi_fcmpeq>:
 800117c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001180:	f7ff fff4 	bl	800116c <__aeabi_cfcmpeq>
 8001184:	bf0c      	ite	eq
 8001186:	2001      	moveq	r0, #1
 8001188:	2000      	movne	r0, #0
 800118a:	f85d fb08 	ldr.w	pc, [sp], #8
 800118e:	bf00      	nop

08001190 <__aeabi_fcmplt>:
 8001190:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001194:	f7ff ffea 	bl	800116c <__aeabi_cfcmpeq>
 8001198:	bf34      	ite	cc
 800119a:	2001      	movcc	r0, #1
 800119c:	2000      	movcs	r0, #0
 800119e:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a2:	bf00      	nop

080011a4 <__aeabi_fcmple>:
 80011a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a8:	f7ff ffe0 	bl	800116c <__aeabi_cfcmpeq>
 80011ac:	bf94      	ite	ls
 80011ae:	2001      	movls	r0, #1
 80011b0:	2000      	movhi	r0, #0
 80011b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b6:	bf00      	nop

080011b8 <__aeabi_fcmpge>:
 80011b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011bc:	f7ff ffd2 	bl	8001164 <__aeabi_cfrcmple>
 80011c0:	bf94      	ite	ls
 80011c2:	2001      	movls	r0, #1
 80011c4:	2000      	movhi	r0, #0
 80011c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ca:	bf00      	nop

080011cc <__aeabi_fcmpgt>:
 80011cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d0:	f7ff ffc8 	bl	8001164 <__aeabi_cfrcmple>
 80011d4:	bf34      	ite	cc
 80011d6:	2001      	movcc	r0, #1
 80011d8:	2000      	movcs	r0, #0
 80011da:	f85d fb08 	ldr.w	pc, [sp], #8
 80011de:	bf00      	nop

080011e0 <__aeabi_fcmpun>:
 80011e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011ec:	d102      	bne.n	80011f4 <__aeabi_fcmpun+0x14>
 80011ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011f2:	d108      	bne.n	8001206 <__aeabi_fcmpun+0x26>
 80011f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011f8:	d102      	bne.n	8001200 <__aeabi_fcmpun+0x20>
 80011fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011fe:	d102      	bne.n	8001206 <__aeabi_fcmpun+0x26>
 8001200:	f04f 0000 	mov.w	r0, #0
 8001204:	4770      	bx	lr
 8001206:	f04f 0001 	mov.w	r0, #1
 800120a:	4770      	bx	lr

0800120c <__aeabi_f2iz>:
 800120c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001210:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001214:	d30f      	bcc.n	8001236 <__aeabi_f2iz+0x2a>
 8001216:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800121a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800121e:	d90d      	bls.n	800123c <__aeabi_f2iz+0x30>
 8001220:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001224:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001228:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800122c:	fa23 f002 	lsr.w	r0, r3, r2
 8001230:	bf18      	it	ne
 8001232:	4240      	negne	r0, r0
 8001234:	4770      	bx	lr
 8001236:	f04f 0000 	mov.w	r0, #0
 800123a:	4770      	bx	lr
 800123c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001240:	d101      	bne.n	8001246 <__aeabi_f2iz+0x3a>
 8001242:	0242      	lsls	r2, r0, #9
 8001244:	d105      	bne.n	8001252 <__aeabi_f2iz+0x46>
 8001246:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800124a:	bf08      	it	eq
 800124c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001250:	4770      	bx	lr
 8001252:	f04f 0000 	mov.w	r0, #0
 8001256:	4770      	bx	lr

08001258 <__aeabi_f2uiz>:
 8001258:	0042      	lsls	r2, r0, #1
 800125a:	d20e      	bcs.n	800127a <__aeabi_f2uiz+0x22>
 800125c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001260:	d30b      	bcc.n	800127a <__aeabi_f2uiz+0x22>
 8001262:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001266:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800126a:	d409      	bmi.n	8001280 <__aeabi_f2uiz+0x28>
 800126c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001270:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001274:	fa23 f002 	lsr.w	r0, r3, r2
 8001278:	4770      	bx	lr
 800127a:	f04f 0000 	mov.w	r0, #0
 800127e:	4770      	bx	lr
 8001280:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001284:	d101      	bne.n	800128a <__aeabi_f2uiz+0x32>
 8001286:	0242      	lsls	r2, r0, #9
 8001288:	d102      	bne.n	8001290 <__aeabi_f2uiz+0x38>
 800128a:	f04f 30ff 	mov.w	r0, #4294967295
 800128e:	4770      	bx	lr
 8001290:	f04f 0000 	mov.w	r0, #0
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop

08001298 <__aeabi_ldivmod>:
 8001298:	b97b      	cbnz	r3, 80012ba <__aeabi_ldivmod+0x22>
 800129a:	b972      	cbnz	r2, 80012ba <__aeabi_ldivmod+0x22>
 800129c:	2900      	cmp	r1, #0
 800129e:	bfbe      	ittt	lt
 80012a0:	2000      	movlt	r0, #0
 80012a2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80012a6:	e006      	blt.n	80012b6 <__aeabi_ldivmod+0x1e>
 80012a8:	bf08      	it	eq
 80012aa:	2800      	cmpeq	r0, #0
 80012ac:	bf1c      	itt	ne
 80012ae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80012b2:	f04f 30ff 	movne.w	r0, #4294967295
 80012b6:	f000 b99b 	b.w	80015f0 <__aeabi_idiv0>
 80012ba:	f1ad 0c08 	sub.w	ip, sp, #8
 80012be:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80012c2:	2900      	cmp	r1, #0
 80012c4:	db09      	blt.n	80012da <__aeabi_ldivmod+0x42>
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db1a      	blt.n	8001300 <__aeabi_ldivmod+0x68>
 80012ca:	f000 f835 	bl	8001338 <__udivmoddi4>
 80012ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80012d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012d6:	b004      	add	sp, #16
 80012d8:	4770      	bx	lr
 80012da:	4240      	negs	r0, r0
 80012dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db1b      	blt.n	800131c <__aeabi_ldivmod+0x84>
 80012e4:	f000 f828 	bl	8001338 <__udivmoddi4>
 80012e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80012ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012f0:	b004      	add	sp, #16
 80012f2:	4240      	negs	r0, r0
 80012f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012f8:	4252      	negs	r2, r2
 80012fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80012fe:	4770      	bx	lr
 8001300:	4252      	negs	r2, r2
 8001302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001306:	f000 f817 	bl	8001338 <__udivmoddi4>
 800130a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800130e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001312:	b004      	add	sp, #16
 8001314:	4240      	negs	r0, r0
 8001316:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800131a:	4770      	bx	lr
 800131c:	4252      	negs	r2, r2
 800131e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001322:	f000 f809 	bl	8001338 <__udivmoddi4>
 8001326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800132a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800132e:	b004      	add	sp, #16
 8001330:	4252      	negs	r2, r2
 8001332:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001336:	4770      	bx	lr

08001338 <__udivmoddi4>:
 8001338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800133c:	9d08      	ldr	r5, [sp, #32]
 800133e:	460c      	mov	r4, r1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d14e      	bne.n	80013e2 <__udivmoddi4+0xaa>
 8001344:	4694      	mov	ip, r2
 8001346:	458c      	cmp	ip, r1
 8001348:	4686      	mov	lr, r0
 800134a:	fab2 f282 	clz	r2, r2
 800134e:	d962      	bls.n	8001416 <__udivmoddi4+0xde>
 8001350:	b14a      	cbz	r2, 8001366 <__udivmoddi4+0x2e>
 8001352:	f1c2 0320 	rsb	r3, r2, #32
 8001356:	4091      	lsls	r1, r2
 8001358:	fa20 f303 	lsr.w	r3, r0, r3
 800135c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001360:	4319      	orrs	r1, r3
 8001362:	fa00 fe02 	lsl.w	lr, r0, r2
 8001366:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800136a:	fbb1 f4f7 	udiv	r4, r1, r7
 800136e:	fb07 1114 	mls	r1, r7, r4, r1
 8001372:	fa1f f68c 	uxth.w	r6, ip
 8001376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800137a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800137e:	fb04 f106 	mul.w	r1, r4, r6
 8001382:	4299      	cmp	r1, r3
 8001384:	d90a      	bls.n	800139c <__udivmoddi4+0x64>
 8001386:	eb1c 0303 	adds.w	r3, ip, r3
 800138a:	f104 30ff 	add.w	r0, r4, #4294967295
 800138e:	f080 8110 	bcs.w	80015b2 <__udivmoddi4+0x27a>
 8001392:	4299      	cmp	r1, r3
 8001394:	f240 810d 	bls.w	80015b2 <__udivmoddi4+0x27a>
 8001398:	3c02      	subs	r4, #2
 800139a:	4463      	add	r3, ip
 800139c:	1a59      	subs	r1, r3, r1
 800139e:	fbb1 f0f7 	udiv	r0, r1, r7
 80013a2:	fb07 1110 	mls	r1, r7, r0, r1
 80013a6:	fb00 f606 	mul.w	r6, r0, r6
 80013aa:	fa1f f38e 	uxth.w	r3, lr
 80013ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013b2:	429e      	cmp	r6, r3
 80013b4:	d90a      	bls.n	80013cc <__udivmoddi4+0x94>
 80013b6:	eb1c 0303 	adds.w	r3, ip, r3
 80013ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80013be:	f080 80fa 	bcs.w	80015b6 <__udivmoddi4+0x27e>
 80013c2:	429e      	cmp	r6, r3
 80013c4:	f240 80f7 	bls.w	80015b6 <__udivmoddi4+0x27e>
 80013c8:	4463      	add	r3, ip
 80013ca:	3802      	subs	r0, #2
 80013cc:	2100      	movs	r1, #0
 80013ce:	1b9b      	subs	r3, r3, r6
 80013d0:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80013d4:	b11d      	cbz	r5, 80013de <__udivmoddi4+0xa6>
 80013d6:	40d3      	lsrs	r3, r2
 80013d8:	2200      	movs	r2, #0
 80013da:	e9c5 3200 	strd	r3, r2, [r5]
 80013de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013e2:	428b      	cmp	r3, r1
 80013e4:	d905      	bls.n	80013f2 <__udivmoddi4+0xba>
 80013e6:	b10d      	cbz	r5, 80013ec <__udivmoddi4+0xb4>
 80013e8:	e9c5 0100 	strd	r0, r1, [r5]
 80013ec:	2100      	movs	r1, #0
 80013ee:	4608      	mov	r0, r1
 80013f0:	e7f5      	b.n	80013de <__udivmoddi4+0xa6>
 80013f2:	fab3 f183 	clz	r1, r3
 80013f6:	2900      	cmp	r1, #0
 80013f8:	d146      	bne.n	8001488 <__udivmoddi4+0x150>
 80013fa:	42a3      	cmp	r3, r4
 80013fc:	d302      	bcc.n	8001404 <__udivmoddi4+0xcc>
 80013fe:	4290      	cmp	r0, r2
 8001400:	f0c0 80ee 	bcc.w	80015e0 <__udivmoddi4+0x2a8>
 8001404:	1a86      	subs	r6, r0, r2
 8001406:	eb64 0303 	sbc.w	r3, r4, r3
 800140a:	2001      	movs	r0, #1
 800140c:	2d00      	cmp	r5, #0
 800140e:	d0e6      	beq.n	80013de <__udivmoddi4+0xa6>
 8001410:	e9c5 6300 	strd	r6, r3, [r5]
 8001414:	e7e3      	b.n	80013de <__udivmoddi4+0xa6>
 8001416:	2a00      	cmp	r2, #0
 8001418:	f040 808f 	bne.w	800153a <__udivmoddi4+0x202>
 800141c:	eba1 040c 	sub.w	r4, r1, ip
 8001420:	2101      	movs	r1, #1
 8001422:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001426:	fa1f f78c 	uxth.w	r7, ip
 800142a:	fbb4 f6f8 	udiv	r6, r4, r8
 800142e:	fb08 4416 	mls	r4, r8, r6, r4
 8001432:	fb07 f006 	mul.w	r0, r7, r6
 8001436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800143a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800143e:	4298      	cmp	r0, r3
 8001440:	d908      	bls.n	8001454 <__udivmoddi4+0x11c>
 8001442:	eb1c 0303 	adds.w	r3, ip, r3
 8001446:	f106 34ff 	add.w	r4, r6, #4294967295
 800144a:	d202      	bcs.n	8001452 <__udivmoddi4+0x11a>
 800144c:	4298      	cmp	r0, r3
 800144e:	f200 80cb 	bhi.w	80015e8 <__udivmoddi4+0x2b0>
 8001452:	4626      	mov	r6, r4
 8001454:	1a1c      	subs	r4, r3, r0
 8001456:	fbb4 f0f8 	udiv	r0, r4, r8
 800145a:	fb08 4410 	mls	r4, r8, r0, r4
 800145e:	fb00 f707 	mul.w	r7, r0, r7
 8001462:	fa1f f38e 	uxth.w	r3, lr
 8001466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800146a:	429f      	cmp	r7, r3
 800146c:	d908      	bls.n	8001480 <__udivmoddi4+0x148>
 800146e:	eb1c 0303 	adds.w	r3, ip, r3
 8001472:	f100 34ff 	add.w	r4, r0, #4294967295
 8001476:	d202      	bcs.n	800147e <__udivmoddi4+0x146>
 8001478:	429f      	cmp	r7, r3
 800147a:	f200 80ae 	bhi.w	80015da <__udivmoddi4+0x2a2>
 800147e:	4620      	mov	r0, r4
 8001480:	1bdb      	subs	r3, r3, r7
 8001482:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001486:	e7a5      	b.n	80013d4 <__udivmoddi4+0x9c>
 8001488:	f1c1 0720 	rsb	r7, r1, #32
 800148c:	408b      	lsls	r3, r1
 800148e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001492:	ea4c 0c03 	orr.w	ip, ip, r3
 8001496:	fa24 f607 	lsr.w	r6, r4, r7
 800149a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800149e:	fbb6 f8f9 	udiv	r8, r6, r9
 80014a2:	fa1f fe8c 	uxth.w	lr, ip
 80014a6:	fb09 6618 	mls	r6, r9, r8, r6
 80014aa:	fa20 f307 	lsr.w	r3, r0, r7
 80014ae:	408c      	lsls	r4, r1
 80014b0:	fa00 fa01 	lsl.w	sl, r0, r1
 80014b4:	fb08 f00e 	mul.w	r0, r8, lr
 80014b8:	431c      	orrs	r4, r3
 80014ba:	0c23      	lsrs	r3, r4, #16
 80014bc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80014c0:	4298      	cmp	r0, r3
 80014c2:	fa02 f201 	lsl.w	r2, r2, r1
 80014c6:	d90a      	bls.n	80014de <__udivmoddi4+0x1a6>
 80014c8:	eb1c 0303 	adds.w	r3, ip, r3
 80014cc:	f108 36ff 	add.w	r6, r8, #4294967295
 80014d0:	f080 8081 	bcs.w	80015d6 <__udivmoddi4+0x29e>
 80014d4:	4298      	cmp	r0, r3
 80014d6:	d97e      	bls.n	80015d6 <__udivmoddi4+0x29e>
 80014d8:	f1a8 0802 	sub.w	r8, r8, #2
 80014dc:	4463      	add	r3, ip
 80014de:	1a1e      	subs	r6, r3, r0
 80014e0:	fbb6 f3f9 	udiv	r3, r6, r9
 80014e4:	fb09 6613 	mls	r6, r9, r3, r6
 80014e8:	fb03 fe0e 	mul.w	lr, r3, lr
 80014ec:	b2a4      	uxth	r4, r4
 80014ee:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80014f2:	45a6      	cmp	lr, r4
 80014f4:	d908      	bls.n	8001508 <__udivmoddi4+0x1d0>
 80014f6:	eb1c 0404 	adds.w	r4, ip, r4
 80014fa:	f103 30ff 	add.w	r0, r3, #4294967295
 80014fe:	d266      	bcs.n	80015ce <__udivmoddi4+0x296>
 8001500:	45a6      	cmp	lr, r4
 8001502:	d964      	bls.n	80015ce <__udivmoddi4+0x296>
 8001504:	3b02      	subs	r3, #2
 8001506:	4464      	add	r4, ip
 8001508:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800150c:	fba0 8302 	umull	r8, r3, r0, r2
 8001510:	eba4 040e 	sub.w	r4, r4, lr
 8001514:	429c      	cmp	r4, r3
 8001516:	46c6      	mov	lr, r8
 8001518:	461e      	mov	r6, r3
 800151a:	d350      	bcc.n	80015be <__udivmoddi4+0x286>
 800151c:	d04d      	beq.n	80015ba <__udivmoddi4+0x282>
 800151e:	b155      	cbz	r5, 8001536 <__udivmoddi4+0x1fe>
 8001520:	ebba 030e 	subs.w	r3, sl, lr
 8001524:	eb64 0406 	sbc.w	r4, r4, r6
 8001528:	fa04 f707 	lsl.w	r7, r4, r7
 800152c:	40cb      	lsrs	r3, r1
 800152e:	431f      	orrs	r7, r3
 8001530:	40cc      	lsrs	r4, r1
 8001532:	e9c5 7400 	strd	r7, r4, [r5]
 8001536:	2100      	movs	r1, #0
 8001538:	e751      	b.n	80013de <__udivmoddi4+0xa6>
 800153a:	fa0c fc02 	lsl.w	ip, ip, r2
 800153e:	f1c2 0320 	rsb	r3, r2, #32
 8001542:	40d9      	lsrs	r1, r3
 8001544:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001548:	fa20 f303 	lsr.w	r3, r0, r3
 800154c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001550:	fbb1 f0f8 	udiv	r0, r1, r8
 8001554:	fb08 1110 	mls	r1, r8, r0, r1
 8001558:	4094      	lsls	r4, r2
 800155a:	431c      	orrs	r4, r3
 800155c:	fa1f f78c 	uxth.w	r7, ip
 8001560:	0c23      	lsrs	r3, r4, #16
 8001562:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001566:	fb00 f107 	mul.w	r1, r0, r7
 800156a:	4299      	cmp	r1, r3
 800156c:	d908      	bls.n	8001580 <__udivmoddi4+0x248>
 800156e:	eb1c 0303 	adds.w	r3, ip, r3
 8001572:	f100 36ff 	add.w	r6, r0, #4294967295
 8001576:	d22c      	bcs.n	80015d2 <__udivmoddi4+0x29a>
 8001578:	4299      	cmp	r1, r3
 800157a:	d92a      	bls.n	80015d2 <__udivmoddi4+0x29a>
 800157c:	3802      	subs	r0, #2
 800157e:	4463      	add	r3, ip
 8001580:	1a5b      	subs	r3, r3, r1
 8001582:	fbb3 f1f8 	udiv	r1, r3, r8
 8001586:	fb08 3311 	mls	r3, r8, r1, r3
 800158a:	b2a4      	uxth	r4, r4
 800158c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001590:	fb01 f307 	mul.w	r3, r1, r7
 8001594:	42a3      	cmp	r3, r4
 8001596:	d908      	bls.n	80015aa <__udivmoddi4+0x272>
 8001598:	eb1c 0404 	adds.w	r4, ip, r4
 800159c:	f101 36ff 	add.w	r6, r1, #4294967295
 80015a0:	d213      	bcs.n	80015ca <__udivmoddi4+0x292>
 80015a2:	42a3      	cmp	r3, r4
 80015a4:	d911      	bls.n	80015ca <__udivmoddi4+0x292>
 80015a6:	3902      	subs	r1, #2
 80015a8:	4464      	add	r4, ip
 80015aa:	1ae4      	subs	r4, r4, r3
 80015ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80015b0:	e73b      	b.n	800142a <__udivmoddi4+0xf2>
 80015b2:	4604      	mov	r4, r0
 80015b4:	e6f2      	b.n	800139c <__udivmoddi4+0x64>
 80015b6:	4608      	mov	r0, r1
 80015b8:	e708      	b.n	80013cc <__udivmoddi4+0x94>
 80015ba:	45c2      	cmp	sl, r8
 80015bc:	d2af      	bcs.n	800151e <__udivmoddi4+0x1e6>
 80015be:	ebb8 0e02 	subs.w	lr, r8, r2
 80015c2:	eb63 060c 	sbc.w	r6, r3, ip
 80015c6:	3801      	subs	r0, #1
 80015c8:	e7a9      	b.n	800151e <__udivmoddi4+0x1e6>
 80015ca:	4631      	mov	r1, r6
 80015cc:	e7ed      	b.n	80015aa <__udivmoddi4+0x272>
 80015ce:	4603      	mov	r3, r0
 80015d0:	e79a      	b.n	8001508 <__udivmoddi4+0x1d0>
 80015d2:	4630      	mov	r0, r6
 80015d4:	e7d4      	b.n	8001580 <__udivmoddi4+0x248>
 80015d6:	46b0      	mov	r8, r6
 80015d8:	e781      	b.n	80014de <__udivmoddi4+0x1a6>
 80015da:	4463      	add	r3, ip
 80015dc:	3802      	subs	r0, #2
 80015de:	e74f      	b.n	8001480 <__udivmoddi4+0x148>
 80015e0:	4606      	mov	r6, r0
 80015e2:	4623      	mov	r3, r4
 80015e4:	4608      	mov	r0, r1
 80015e6:	e711      	b.n	800140c <__udivmoddi4+0xd4>
 80015e8:	3e02      	subs	r6, #2
 80015ea:	4463      	add	r3, ip
 80015ec:	e732      	b.n	8001454 <__udivmoddi4+0x11c>
 80015ee:	bf00      	nop

080015f0 <__aeabi_idiv0>:
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6


BMP280_HandleTypedef devv;

void bmp280_init_default_params() {
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
	devv.params.mode = BMP280_MODE_NORMAL;
 80015f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <bmp280_init_default_params+0x34>)
 80015fa:	2203      	movs	r2, #3
 80015fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	devv.params.filter = BMP280_FILTER_16;
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <bmp280_init_default_params+0x34>)
 8001602:	2204      	movs	r2, #4
 8001604:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	devv.params.oversampling_pressure = BMP280_ULTRA_HIGH_RES;
 8001608:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <bmp280_init_default_params+0x34>)
 800160a:	2205      	movs	r2, #5
 800160c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	devv.params.oversampling_temperature = BMP280_ULTRA_HIGH_RES;
 8001610:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <bmp280_init_default_params+0x34>)
 8001612:	2205      	movs	r2, #5
 8001614:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	devv.params.standby = BMP280_STANDBY_05;
 8001618:	4b03      	ldr	r3, [pc, #12]	@ (8001628 <bmp280_init_default_params+0x34>)
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	2000010c 	.word	0x2000010c

0800162c <read_register16>:

static bool read_register16(uint8_t addr, uint16_t *value) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af04      	add	r7, sp, #16
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (devv.addr << 1);
 8001638:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <read_register16+0x5c>)
 800163a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Read(devv.i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001640:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <read_register16+0x5c>)
 8001642:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	b29a      	uxth	r2, r3
 8001648:	89f9      	ldrh	r1, [r7, #14]
 800164a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	2302      	movs	r3, #2
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2301      	movs	r3, #1
 800165c:	f008 f850 	bl	8009700 <HAL_I2C_Mem_Read>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10b      	bne.n	800167e <read_register16+0x52>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001666:	7b7b      	ldrb	r3, [r7, #13]
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	b21a      	sxth	r2, r3
 800166c:	7b3b      	ldrb	r3, [r7, #12]
 800166e:	b21b      	sxth	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b21b      	sxth	r3, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	801a      	strh	r2, [r3, #0]
		return true;
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <read_register16+0x54>
	} else
		return false;
 800167e:	2300      	movs	r3, #0

}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2000010c 	.word	0x2000010c

0800168c <read_data>:

static inline int read_data(uint8_t addr, uint8_t *value,
		uint8_t len) {
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b089      	sub	sp, #36	@ 0x24
 8001690:	af04      	add	r7, sp, #16
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	71fb      	strb	r3, [r7, #7]
 8001698:	4613      	mov	r3, r2
 800169a:	71bb      	strb	r3, [r7, #6]
	uint16_t tx_buff;
	tx_buff = (devv.addr << 1);
 800169c:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <read_data+0x4c>)
 800169e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	81fb      	strh	r3, [r7, #14]
	if (HAL_I2C_Mem_Read(devv.i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <read_data+0x4c>)
 80016a6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	89f9      	ldrh	r1, [r7, #14]
 80016b2:	f241 3488 	movw	r4, #5000	@ 0x1388
 80016b6:	9402      	str	r4, [sp, #8]
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2301      	movs	r3, #1
 80016c0:	f008 f81e 	bl	8009700 <HAL_I2C_Mem_Read>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <read_data+0x42>
		return 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e000      	b.n	80016d0 <read_data+0x44>
	else
		return 1;
 80016ce:	2301      	movs	r3, #1

}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	2000010c 	.word	0x2000010c

080016dc <read_calibration_data>:

static bool read_calibration_data() {
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0

	if (read_register16(0x88, &devv.dig_T1)
 80016e0:	492c      	ldr	r1, [pc, #176]	@ (8001794 <read_calibration_data+0xb8>)
 80016e2:	2088      	movs	r0, #136	@ 0x88
 80016e4:	f7ff ffa2 	bl	800162c <read_register16>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d04e      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x8a, (uint16_t *) &devv.dig_T2)
 80016ee:	492a      	ldr	r1, [pc, #168]	@ (8001798 <read_calibration_data+0xbc>)
 80016f0:	208a      	movs	r0, #138	@ 0x8a
 80016f2:	f7ff ff9b 	bl	800162c <read_register16>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d047      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x8c, (uint16_t *) &devv.dig_T3)
 80016fc:	4927      	ldr	r1, [pc, #156]	@ (800179c <read_calibration_data+0xc0>)
 80016fe:	208c      	movs	r0, #140	@ 0x8c
 8001700:	f7ff ff94 	bl	800162c <read_register16>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d040      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x8e, &devv.dig_P1)
 800170a:	4925      	ldr	r1, [pc, #148]	@ (80017a0 <read_calibration_data+0xc4>)
 800170c:	208e      	movs	r0, #142	@ 0x8e
 800170e:	f7ff ff8d 	bl	800162c <read_register16>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d039      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x90, (uint16_t *) &devv.dig_P2)
 8001718:	4922      	ldr	r1, [pc, #136]	@ (80017a4 <read_calibration_data+0xc8>)
 800171a:	2090      	movs	r0, #144	@ 0x90
 800171c:	f7ff ff86 	bl	800162c <read_register16>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d032      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x92, (uint16_t *) &devv.dig_P3)
 8001726:	4920      	ldr	r1, [pc, #128]	@ (80017a8 <read_calibration_data+0xcc>)
 8001728:	2092      	movs	r0, #146	@ 0x92
 800172a:	f7ff ff7f 	bl	800162c <read_register16>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d02b      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x94, (uint16_t *) &devv.dig_P4)
 8001734:	491d      	ldr	r1, [pc, #116]	@ (80017ac <read_calibration_data+0xd0>)
 8001736:	2094      	movs	r0, #148	@ 0x94
 8001738:	f7ff ff78 	bl	800162c <read_register16>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d024      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x96, (uint16_t *) &devv.dig_P5)
 8001742:	491b      	ldr	r1, [pc, #108]	@ (80017b0 <read_calibration_data+0xd4>)
 8001744:	2096      	movs	r0, #150	@ 0x96
 8001746:	f7ff ff71 	bl	800162c <read_register16>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d01d      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x98, (uint16_t *) &devv.dig_P6)
 8001750:	4918      	ldr	r1, [pc, #96]	@ (80017b4 <read_calibration_data+0xd8>)
 8001752:	2098      	movs	r0, #152	@ 0x98
 8001754:	f7ff ff6a 	bl	800162c <read_register16>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d016      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x9a, (uint16_t *) &devv.dig_P7)
 800175e:	4916      	ldr	r1, [pc, #88]	@ (80017b8 <read_calibration_data+0xdc>)
 8001760:	209a      	movs	r0, #154	@ 0x9a
 8001762:	f7ff ff63 	bl	800162c <read_register16>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00f      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x9c, (uint16_t *) &devv.dig_P8)
 800176c:	4913      	ldr	r1, [pc, #76]	@ (80017bc <read_calibration_data+0xe0>)
 800176e:	209c      	movs	r0, #156	@ 0x9c
 8001770:	f7ff ff5c 	bl	800162c <read_register16>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d008      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x9e,(uint16_t *) &devv.dig_P9))
 800177a:	4911      	ldr	r1, [pc, #68]	@ (80017c0 <read_calibration_data+0xe4>)
 800177c:	209e      	movs	r0, #158	@ 0x9e
 800177e:	f7ff ff55 	bl	800162c <read_register16>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <read_calibration_data+0xb0>
			{

		return true;
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <read_calibration_data+0xb2>
	}

	return false;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000010c 	.word	0x2000010c
 8001798:	2000010e 	.word	0x2000010e
 800179c:	20000110 	.word	0x20000110
 80017a0:	20000112 	.word	0x20000112
 80017a4:	20000114 	.word	0x20000114
 80017a8:	20000116 	.word	0x20000116
 80017ac:	20000118 	.word	0x20000118
 80017b0:	2000011a 	.word	0x2000011a
 80017b4:	2000011c 	.word	0x2000011c
 80017b8:	2000011e 	.word	0x2000011e
 80017bc:	20000120 	.word	0x20000120
 80017c0:	20000122 	.word	0x20000122

080017c4 <write_register8>:


static int write_register8(uint8_t addr, uint8_t value) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af04      	add	r7, sp, #16
 80017ca:	4603      	mov	r3, r0
 80017cc:	460a      	mov	r2, r1
 80017ce:	71fb      	strb	r3, [r7, #7]
 80017d0:	4613      	mov	r3, r2
 80017d2:	71bb      	strb	r3, [r7, #6]
	uint16_t tx_buff;

	tx_buff = (devv.addr << 1);
 80017d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <write_register8+0x4c>)
 80017d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(devv.i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80017dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <write_register8+0x4c>)
 80017de:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	89f9      	ldrh	r1, [r7, #14]
 80017e6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80017ea:	9302      	str	r3, [sp, #8]
 80017ec:	2301      	movs	r3, #1
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	1dbb      	adds	r3, r7, #6
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2301      	movs	r3, #1
 80017f6:	f007 fe89 	bl	800950c <HAL_I2C_Mem_Write>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <write_register8+0x40>
		return false;
 8001800:	2300      	movs	r3, #0
 8001802:	e000      	b.n	8001806 <write_register8+0x42>
	else
		return true;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000010c 	.word	0x2000010c

08001814 <bmp280_init>:

bool bmp280_init(I2C_HandleTypeDef* i2c) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

    devv.addr = BMP280_I2C_ADDRESS_0;
 800181c:	4b49      	ldr	r3, [pc, #292]	@ (8001944 <bmp280_init+0x130>)
 800181e:	2276      	movs	r2, #118	@ 0x76
 8001820:	849a      	strh	r2, [r3, #36]	@ 0x24
	devv.i2c  = i2c;
 8001822:	4a48      	ldr	r2, [pc, #288]	@ (8001944 <bmp280_init+0x130>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6293      	str	r3, [r2, #40]	@ 0x28
	bmp280_init_default_params();
 8001828:	f7ff fee4 	bl	80015f4 <bmp280_init_default_params>

	if (devv.addr != BMP280_I2C_ADDRESS_0
 800182c:	4b45      	ldr	r3, [pc, #276]	@ (8001944 <bmp280_init+0x130>)
 800182e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001830:	2b76      	cmp	r3, #118	@ 0x76
 8001832:	d005      	beq.n	8001840 <bmp280_init+0x2c>
			&& devv.addr != BMP280_I2C_ADDRESS_1) {
 8001834:	4b43      	ldr	r3, [pc, #268]	@ (8001944 <bmp280_init+0x130>)
 8001836:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001838:	2b77      	cmp	r3, #119	@ 0x77
 800183a:	d001      	beq.n	8001840 <bmp280_init+0x2c>

		return false;
 800183c:	2300      	movs	r3, #0
 800183e:	e07d      	b.n	800193c <bmp280_init+0x128>
	}

	if (read_data(BMP280_REG_ID,&devv.id, 1)) {
 8001840:	2201      	movs	r2, #1
 8001842:	4941      	ldr	r1, [pc, #260]	@ (8001948 <bmp280_init+0x134>)
 8001844:	20d0      	movs	r0, #208	@ 0xd0
 8001846:	f7ff ff21 	bl	800168c <read_data>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <bmp280_init+0x40>
		return false;
 8001850:	2300      	movs	r3, #0
 8001852:	e073      	b.n	800193c <bmp280_init+0x128>
	}

	if (devv.id != BMP280_CHIP_ID && devv.id != BME280_CHIP_ID) {
 8001854:	4b3b      	ldr	r3, [pc, #236]	@ (8001944 <bmp280_init+0x130>)
 8001856:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800185a:	2b58      	cmp	r3, #88	@ 0x58
 800185c:	d006      	beq.n	800186c <bmp280_init+0x58>
 800185e:	4b39      	ldr	r3, [pc, #228]	@ (8001944 <bmp280_init+0x130>)
 8001860:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001864:	2b60      	cmp	r3, #96	@ 0x60
 8001866:	d001      	beq.n	800186c <bmp280_init+0x58>

		return false;
 8001868:	2300      	movs	r3, #0
 800186a:	e067      	b.n	800193c <bmp280_init+0x128>
	}

	// Soft reset.
	if (write_register8( BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800186c:	21b6      	movs	r1, #182	@ 0xb6
 800186e:	20e0      	movs	r0, #224	@ 0xe0
 8001870:	f7ff ffa8 	bl	80017c4 <write_register8>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <bmp280_init+0x6a>
		return false;
 800187a:	2300      	movs	r3, #0
 800187c:	e05e      	b.n	800193c <bmp280_init+0x128>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(BMP280_REG_STATUS, &status, 1)&& (status & 1) == 0)
 800187e:	f107 030d 	add.w	r3, r7, #13
 8001882:	2201      	movs	r2, #1
 8001884:	4619      	mov	r1, r3
 8001886:	20f3      	movs	r0, #243	@ 0xf3
 8001888:	f7ff ff00 	bl	800168c <read_data>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f5      	bne.n	800187e <bmp280_init+0x6a>
 8001892:	7b7b      	ldrb	r3, [r7, #13]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f0      	bne.n	800187e <bmp280_init+0x6a>
			break;
	}

	if (!read_calibration_data()) {
 800189c:	f7ff ff1e 	bl	80016dc <read_calibration_data>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f083 0301 	eor.w	r3, r3, #1
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d100      	bne.n	80018ae <bmp280_init+0x9a>
 80018ac:	e001      	b.n	80018b2 <bmp280_init+0x9e>
		return false;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e044      	b.n	800193c <bmp280_init+0x128>
	}

	if (devv.id == BME280_CHIP_ID ) {
 80018b2:	4b24      	ldr	r3, [pc, #144]	@ (8001944 <bmp280_init+0x130>)
 80018b4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80018b8:	2b60      	cmp	r3, #96	@ 0x60
 80018ba:	d101      	bne.n	80018c0 <bmp280_init+0xac>
		return false;
 80018bc:	2300      	movs	r3, #0
 80018be:	e03d      	b.n	800193c <bmp280_init+0x128>
	}

	uint8_t config = (devv.params.standby << 5) | (devv.params.filter << 2);
 80018c0:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <bmp280_init+0x130>)
 80018c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018c6:	015b      	lsls	r3, r3, #5
 80018c8:	b25a      	sxtb	r2, r3
 80018ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <bmp280_init+0x130>)
 80018cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b25b      	sxtb	r3, r3
 80018d8:	73fb      	strb	r3, [r7, #15]
	if (write_register8(BMP280_REG_CONFIG, config)) {
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	4619      	mov	r1, r3
 80018de:	20f5      	movs	r0, #245	@ 0xf5
 80018e0:	f7ff ff70 	bl	80017c4 <write_register8>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <bmp280_init+0xda>
		return false;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e026      	b.n	800193c <bmp280_init+0x128>
	}

	if (devv.params.mode == BMP280_MODE_FORCED) {
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <bmp280_init+0x130>)
 80018f0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d103      	bne.n	8001900 <bmp280_init+0xec>
		devv.params.mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <bmp280_init+0x130>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}

	uint8_t ctrl = (devv.params.oversampling_temperature << 5)
 8001900:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <bmp280_init+0x130>)
 8001902:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001906:	015b      	lsls	r3, r3, #5
			| (devv.params.oversampling_pressure << 2) | (devv.params.mode);
 8001908:	b25a      	sxtb	r2, r3
 800190a:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <bmp280_init+0x130>)
 800190c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	b25b      	sxtb	r3, r3
 8001914:	4313      	orrs	r3, r2
 8001916:	b25a      	sxtb	r2, r3
 8001918:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <bmp280_init+0x130>)
 800191a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800191e:	b25b      	sxtb	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (devv.params.oversampling_temperature << 5)
 8001924:	73bb      	strb	r3, [r7, #14]

	if (write_register8(BMP280_REG_CTRL, ctrl)) {
 8001926:	7bbb      	ldrb	r3, [r7, #14]
 8001928:	4619      	mov	r1, r3
 800192a:	20f4      	movs	r0, #244	@ 0xf4
 800192c:	f7ff ff4a 	bl	80017c4 <write_register8>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <bmp280_init+0x126>
		return false;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <bmp280_init+0x128>
	}

	return true;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	2000010c 	.word	0x2000010c
 8001948:	2000013d 	.word	0x2000013d

0800194c <compensate_temperature>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(int32_t adc_temp, int32_t *fine_temp) {
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) devv.dig_T1 << 1)))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	10da      	asrs	r2, r3, #3
 800195a:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <compensate_temperature+0x70>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	1ad3      	subs	r3, r2, r3
			* (int32_t) devv.dig_T2) >> 11;
 8001962:	4a16      	ldr	r2, [pc, #88]	@ (80019bc <compensate_temperature+0x70>)
 8001964:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001968:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) devv.dig_T1 << 1)))
 800196c:	12db      	asrs	r3, r3, #11
 800196e:	60fb      	str	r3, [r7, #12]
	var2 = (((((adc_temp >> 4) - (int32_t) devv.dig_T1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	111b      	asrs	r3, r3, #4
 8001974:	4a11      	ldr	r2, [pc, #68]	@ (80019bc <compensate_temperature+0x70>)
 8001976:	8812      	ldrh	r2, [r2, #0]
 8001978:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) devv.dig_T1)) >> 12)
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	1112      	asrs	r2, r2, #4
 800197e:	490f      	ldr	r1, [pc, #60]	@ (80019bc <compensate_temperature+0x70>)
 8001980:	8809      	ldrh	r1, [r1, #0]
 8001982:	1a52      	subs	r2, r2, r1
 8001984:	fb02 f303 	mul.w	r3, r2, r3
 8001988:	131b      	asrs	r3, r3, #12
			* (int32_t) devv.dig_T3) >> 14;
 800198a:	4a0c      	ldr	r2, [pc, #48]	@ (80019bc <compensate_temperature+0x70>)
 800198c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001990:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) devv.dig_T1)
 8001994:	139b      	asrs	r3, r3, #14
 8001996:	60bb      	str	r3, [r7, #8]

	*fine_temp = var1 + var2;
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	441a      	add	r2, r3
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	3380      	adds	r3, #128	@ 0x80
 80019ae:	121b      	asrs	r3, r3, #8
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	2000010c 	.word	0x2000010c

080019c0 <compensate_pressure>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static  uint32_t compensate_pressure(int32_t adc_press,int32_t fine_temp) {
 80019c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c4:	b0cc      	sub	sp, #304	@ 0x130
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80019cc:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80019d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80019d4:	17da      	asrs	r2, r3, #31
 80019d6:	461c      	mov	r4, r3
 80019d8:	4615      	mov	r5, r2
 80019da:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80019de:	f145 3bff 	adc.w	fp, r5, #4294967295
 80019e2:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) devv.dig_P6;
 80019e6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80019ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019ee:	fb03 f102 	mul.w	r1, r3, r2
 80019f2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80019f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	18ca      	adds	r2, r1, r3
 8001a00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a04:	fba3 8903 	umull	r8, r9, r3, r3
 8001a08:	eb02 0309 	add.w	r3, r2, r9
 8001a0c:	4699      	mov	r9, r3
 8001a0e:	4b9f      	ldr	r3, [pc, #636]	@ (8001c8c <compensate_pressure+0x2cc>)
 8001a10:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	17da      	asrs	r2, r3, #31
 8001a18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001a1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001a20:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001a24:	4603      	mov	r3, r0
 8001a26:	fb03 f209 	mul.w	r2, r3, r9
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	fb08 f303 	mul.w	r3, r8, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	4602      	mov	r2, r0
 8001a34:	fba8 2102 	umull	r2, r1, r8, r2
 8001a38:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001a3c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001a40:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001a44:	4413      	add	r3, r2
 8001a46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001a4a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8001a4e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001a52:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) devv.dig_P5) << 17);
 8001a56:	4b8d      	ldr	r3, [pc, #564]	@ (8001c8c <compensate_pressure+0x2cc>)
 8001a58:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	17da      	asrs	r2, r3, #31
 8001a60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001a68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a6c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001a70:	462a      	mov	r2, r5
 8001a72:	fb02 f203 	mul.w	r2, r2, r3
 8001a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	fb01 f303 	mul.w	r3, r1, r3
 8001a80:	441a      	add	r2, r3
 8001a82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a86:	4621      	mov	r1, r4
 8001a88:	fba3 3101 	umull	r3, r1, r3, r1
 8001a8c:	f8c7 110c 	str.w	r1, [r7, #268]	@ 0x10c
 8001a90:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001a98:	18d3      	adds	r3, r2, r3
 8001a9a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001a9e:	f04f 0000 	mov.w	r0, #0
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8001aaa:	462b      	mov	r3, r5
 8001aac:	0459      	lsls	r1, r3, #17
 8001aae:	4622      	mov	r2, r4
 8001ab0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001ab4:	4623      	mov	r3, r4
 8001ab6:	0458      	lsls	r0, r3, #17
 8001ab8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001abc:	1814      	adds	r4, r2, r0
 8001abe:	64bc      	str	r4, [r7, #72]	@ 0x48
 8001ac0:	414b      	adcs	r3, r1
 8001ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ac4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001ac8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) devv.dig_P4) << 35);
 8001acc:	4b6f      	ldr	r3, [pc, #444]	@ (8001c8c <compensate_pressure+0x2cc>)
 8001ace:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	17da      	asrs	r2, r3, #31
 8001ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001ada:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001ade:	f04f 0000 	mov.w	r0, #0
 8001ae2:	f04f 0100 	mov.w	r1, #0
 8001ae6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001aea:	00d9      	lsls	r1, r3, #3
 8001aec:	2000      	movs	r0, #0
 8001aee:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001af2:	1814      	adds	r4, r2, r0
 8001af4:	643c      	str	r4, [r7, #64]	@ 0x40
 8001af6:	414b      	adcs	r3, r1
 8001af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001afa:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001afe:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) devv.dig_P3) >> 8)
 8001b02:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001b06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b0a:	fb03 f102 	mul.w	r1, r3, r2
 8001b0e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001b12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b16:	fb02 f303 	mul.w	r3, r2, r3
 8001b1a:	18ca      	adds	r2, r1, r3
 8001b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b20:	fba3 3103 	umull	r3, r1, r3, r3
 8001b24:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8001b28:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001b30:	18d3      	adds	r3, r2, r3
 8001b32:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b36:	4b55      	ldr	r3, [pc, #340]	@ (8001c8c <compensate_pressure+0x2cc>)
 8001b38:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	17da      	asrs	r2, r3, #31
 8001b40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b48:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8001b4c:	4622      	mov	r2, r4
 8001b4e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001b52:	4641      	mov	r1, r8
 8001b54:	fb01 f202 	mul.w	r2, r1, r2
 8001b58:	464d      	mov	r5, r9
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	4603      	mov	r3, r0
 8001b60:	fb03 f305 	mul.w	r3, r3, r5
 8001b64:	4413      	add	r3, r2
 8001b66:	4602      	mov	r2, r0
 8001b68:	4641      	mov	r1, r8
 8001b6a:	fba2 2101 	umull	r2, r1, r2, r1
 8001b6e:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001b72:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8001b76:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b80:	f04f 0000 	mov.w	r0, #0
 8001b84:	f04f 0100 	mov.w	r1, #0
 8001b88:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	0a18      	lsrs	r0, r3, #8
 8001b90:	462a      	mov	r2, r5
 8001b92:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001b96:	462b      	mov	r3, r5
 8001b98:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) devv.dig_P2) << 12);
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c8c <compensate_pressure+0x2cc>)
 8001b9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ba0:	b21b      	sxth	r3, r3
 8001ba2:	17da      	asrs	r2, r3, #31
 8001ba4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ba8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001bac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001bb0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001bb4:	464a      	mov	r2, r9
 8001bb6:	fb02 f203 	mul.w	r2, r2, r3
 8001bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001bbe:	4644      	mov	r4, r8
 8001bc0:	fb04 f303 	mul.w	r3, r4, r3
 8001bc4:	441a      	add	r2, r3
 8001bc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001bca:	4644      	mov	r4, r8
 8001bcc:	fba3 3404 	umull	r3, r4, r3, r4
 8001bd0:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 8001bd4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bdc:	18d3      	adds	r3, r2, r3
 8001bde:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001bee:	464c      	mov	r4, r9
 8001bf0:	0323      	lsls	r3, r4, #12
 8001bf2:	46c4      	mov	ip, r8
 8001bf4:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001bf8:	4644      	mov	r4, r8
 8001bfa:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) devv.dig_P3) >> 8)
 8001bfc:	1884      	adds	r4, r0, r2
 8001bfe:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001c00:	eb41 0303 	adc.w	r3, r1, r3
 8001c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001c0a:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) devv.dig_P1) >> 33;
 8001c0e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001c12:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001c16:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001c1a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <compensate_pressure+0x2cc>)
 8001c20:	88db      	ldrh	r3, [r3, #6]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2200      	movs	r2, #0
 8001c26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001c2e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8001c32:	4622      	mov	r2, r4
 8001c34:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001c38:	4641      	mov	r1, r8
 8001c3a:	fb01 f202 	mul.w	r2, r1, r2
 8001c3e:	464d      	mov	r5, r9
 8001c40:	4618      	mov	r0, r3
 8001c42:	4621      	mov	r1, r4
 8001c44:	4603      	mov	r3, r0
 8001c46:	fb03 f305 	mul.w	r3, r3, r5
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4641      	mov	r1, r8
 8001c50:	fba2 2101 	umull	r2, r1, r2, r1
 8001c54:	f8c7 10ec 	str.w	r1, [r7, #236]	@ 0xec
 8001c58:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001c5c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001c60:	4413      	add	r3, r2
 8001c62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001c72:	4629      	mov	r1, r5
 8001c74:	104a      	asrs	r2, r1, #1
 8001c76:	4629      	mov	r1, r5
 8001c78:	17cb      	asrs	r3, r1, #31
 8001c7a:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001c7e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001c82:	4313      	orrs	r3, r2
 8001c84:	d104      	bne.n	8001c90 <compensate_pressure+0x2d0>
		return 0;  // avoid exception caused by division by zero
 8001c86:	2300      	movs	r3, #0
 8001c88:	e15d      	b.n	8001f46 <compensate_pressure+0x586>
 8001c8a:	bf00      	nop
 8001c8c:	2000010c 	.word	0x2000010c
	}

	p = 1048576 - adc_press;
 8001c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001c94:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001c98:	17da      	asrs	r2, r3, #31
 8001c9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c9c:	637a      	str	r2, [r7, #52]	@ 0x34
 8001c9e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001ca2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001ca6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001caa:	105b      	asrs	r3, r3, #1
 8001cac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001cb0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001cb4:	07db      	lsls	r3, r3, #31
 8001cb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001cba:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001cbe:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	1aa4      	subs	r4, r4, r2
 8001cc6:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 8001cca:	eb61 0303 	sbc.w	r3, r1, r3
 8001cce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001cd2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001cd6:	4622      	mov	r2, r4
 8001cd8:	462b      	mov	r3, r5
 8001cda:	1891      	adds	r1, r2, r2
 8001cdc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001cde:	415b      	adcs	r3, r3
 8001ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ce2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	1851      	adds	r1, r2, r1
 8001cea:	6239      	str	r1, [r7, #32]
 8001cec:	4629      	mov	r1, r5
 8001cee:	414b      	adcs	r3, r1
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cfe:	4649      	mov	r1, r9
 8001d00:	018b      	lsls	r3, r1, #6
 8001d02:	4641      	mov	r1, r8
 8001d04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d08:	4641      	mov	r1, r8
 8001d0a:	018a      	lsls	r2, r1, #6
 8001d0c:	4641      	mov	r1, r8
 8001d0e:	1889      	adds	r1, r1, r2
 8001d10:	61b9      	str	r1, [r7, #24]
 8001d12:	4649      	mov	r1, r9
 8001d14:	eb43 0101 	adc.w	r1, r3, r1
 8001d18:	61f9      	str	r1, [r7, #28]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001d26:	4649      	mov	r1, r9
 8001d28:	008b      	lsls	r3, r1, #2
 8001d2a:	46c4      	mov	ip, r8
 8001d2c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001d30:	4641      	mov	r1, r8
 8001d32:	008a      	lsls	r2, r1, #2
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4622      	mov	r2, r4
 8001d3c:	189b      	adds	r3, r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	460b      	mov	r3, r1
 8001d42:	462a      	mov	r2, r5
 8001d44:	eb42 0303 	adc.w	r3, r2, r3
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001d56:	4649      	mov	r1, r9
 8001d58:	008b      	lsls	r3, r1, #2
 8001d5a:	46c4      	mov	ip, r8
 8001d5c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001d60:	4641      	mov	r1, r8
 8001d62:	008a      	lsls	r2, r1, #2
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4622      	mov	r2, r4
 8001d6c:	189b      	adds	r3, r3, r2
 8001d6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d70:	462b      	mov	r3, r5
 8001d72:	460a      	mov	r2, r1
 8001d74:	eb42 0303 	adc.w	r3, r2, r3
 8001d78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d7a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001d7e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001d82:	f7ff fa89 	bl	8001298 <__aeabi_ldivmod>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) devv.dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001d8e:	4b71      	ldr	r3, [pc, #452]	@ (8001f54 <compensate_pressure+0x594>)
 8001d90:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	17da      	asrs	r2, r3, #31
 8001d98:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d9c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001da0:	f04f 0000 	mov.w	r0, #0
 8001da4:	f04f 0100 	mov.w	r1, #0
 8001da8:	0b50      	lsrs	r0, r2, #13
 8001daa:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dae:	1359      	asrs	r1, r3, #13
 8001db0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001db4:	462b      	mov	r3, r5
 8001db6:	fb00 f203 	mul.w	r2, r0, r3
 8001dba:	4623      	mov	r3, r4
 8001dbc:	fb03 f301 	mul.w	r3, r3, r1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4622      	mov	r2, r4
 8001dc4:	fba2 2100 	umull	r2, r1, r2, r0
 8001dc8:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001dcc:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001dd0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001dda:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001dde:	f04f 0000 	mov.w	r0, #0
 8001de2:	f04f 0100 	mov.w	r1, #0
 8001de6:	0b50      	lsrs	r0, r2, #13
 8001de8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dec:	1359      	asrs	r1, r3, #13
 8001dee:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001df2:	462b      	mov	r3, r5
 8001df4:	fb00 f203 	mul.w	r2, r0, r3
 8001df8:	4623      	mov	r3, r4
 8001dfa:	fb03 f301 	mul.w	r3, r3, r1
 8001dfe:	4413      	add	r3, r2
 8001e00:	4622      	mov	r2, r4
 8001e02:	fba2 2100 	umull	r2, r1, r2, r0
 8001e06:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001e0a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001e0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001e12:	4413      	add	r3, r2
 8001e14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001e24:	4621      	mov	r1, r4
 8001e26:	0e4a      	lsrs	r2, r1, #25
 8001e28:	4620      	mov	r0, r4
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	460c      	mov	r4, r1
 8001e2e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001e32:	164b      	asrs	r3, r1, #25
 8001e34:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) devv.dig_P8 * p) >> 19;
 8001e38:	4b46      	ldr	r3, [pc, #280]	@ (8001f54 <compensate_pressure+0x594>)
 8001e3a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e3e:	b21b      	sxth	r3, r3
 8001e40:	17da      	asrs	r2, r3, #31
 8001e42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e44:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e46:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001e4a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001e4e:	462a      	mov	r2, r5
 8001e50:	fb02 f203 	mul.w	r2, r2, r3
 8001e54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001e58:	4621      	mov	r1, r4
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	441a      	add	r2, r3
 8001e60:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001e64:	4621      	mov	r1, r4
 8001e66:	fba3 3101 	umull	r3, r1, r3, r1
 8001e6a:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001e6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e76:	18d3      	adds	r3, r2, r3
 8001e78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001e88:	4621      	mov	r1, r4
 8001e8a:	0cca      	lsrs	r2, r1, #19
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	4629      	mov	r1, r5
 8001e90:	460c      	mov	r4, r1
 8001e92:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001e96:	14cb      	asrs	r3, r1, #19
 8001e98:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) devv.dig_P7 << 4);
 8001e9c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001ea0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001ea4:	1884      	adds	r4, r0, r2
 8001ea6:	663c      	str	r4, [r7, #96]	@ 0x60
 8001ea8:	eb41 0303 	adc.w	r3, r1, r3
 8001eac:	667b      	str	r3, [r7, #100]	@ 0x64
 8001eae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001eb2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	1889      	adds	r1, r1, r2
 8001eba:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	eb43 0101 	adc.w	r1, r3, r1
 8001ec2:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001ec4:	f04f 0000 	mov.w	r0, #0
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001ed0:	4623      	mov	r3, r4
 8001ed2:	0a18      	lsrs	r0, r3, #8
 8001ed4:	462a      	mov	r2, r5
 8001ed6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001eda:	462b      	mov	r3, r5
 8001edc:	1219      	asrs	r1, r3, #8
 8001ede:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <compensate_pressure+0x594>)
 8001ee0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	17da      	asrs	r2, r3, #31
 8001ee8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001eea:	657a      	str	r2, [r7, #84]	@ 0x54
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ef8:	464c      	mov	r4, r9
 8001efa:	0123      	lsls	r3, r4, #4
 8001efc:	46c4      	mov	ip, r8
 8001efe:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001f02:	4644      	mov	r4, r8
 8001f04:	0122      	lsls	r2, r4, #4
 8001f06:	1884      	adds	r4, r0, r2
 8001f08:	60bc      	str	r4, [r7, #8]
 8001f0a:	eb41 0303 	adc.w	r3, r1, r3
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f14:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p/256;
 8001f18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	da07      	bge.n	8001f30 <compensate_pressure+0x570>
 8001f20:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	f143 0300 	adc.w	r3, r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f30:	f04f 0000 	mov.w	r0, #0
 8001f34:	f04f 0100 	mov.w	r1, #0
 8001f38:	0a10      	lsrs	r0, r2, #8
 8001f3a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001f3e:	1219      	asrs	r1, r3, #8
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4613      	mov	r3, r2
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f52:	bf00      	nop
 8001f54:	2000010c 	.word	0x2000010c

08001f58 <bmp280_read_fixed>:


int32_t bmp280_read_fixed(){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
	static int32_t temperature;
	static int32_t pressure;

	uint8_t data[3];

	if (read_data(0xf7, data,3)) {
 8001f5e:	463b      	mov	r3, r7
 8001f60:	2203      	movs	r2, #3
 8001f62:	4619      	mov	r1, r3
 8001f64:	20f7      	movs	r0, #247	@ 0xf7
 8001f66:	f7ff fb91 	bl	800168c <read_data>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <bmp280_read_fixed+0x1c>
		return false;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e073      	b.n	800205c <bmp280_read_fixed+0x104>
	}
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001f74:	783b      	ldrb	r3, [r7, #0]
 8001f76:	031a      	lsls	r2, r3, #12
 8001f78:	787b      	ldrb	r3, [r7, #1]
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	78ba      	ldrb	r2, [r7, #2]
 8001f80:	0912      	lsrs	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	4313      	orrs	r3, r2
 8001f86:	4a3c      	ldr	r2, [pc, #240]	@ (8002078 <bmp280_read_fixed+0x120>)
 8001f88:	6013      	str	r3, [r2, #0]

	if (read_data(0xfA, data,3)) {
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	4619      	mov	r1, r3
 8001f90:	20fa      	movs	r0, #250	@ 0xfa
 8001f92:	f7ff fb7b 	bl	800168c <read_data>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <bmp280_read_fixed+0x48>
		return false;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e05d      	b.n	800205c <bmp280_read_fixed+0x104>
	}
	adc_temp = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001fa0:	783b      	ldrb	r3, [r7, #0]
 8001fa2:	031a      	lsls	r2, r3, #12
 8001fa4:	787b      	ldrb	r3, [r7, #1]
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	78ba      	ldrb	r2, [r7, #2]
 8001fac:	0912      	lsrs	r2, r2, #4
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	4a32      	ldr	r2, [pc, #200]	@ (800207c <bmp280_read_fixed+0x124>)
 8001fb4:	6013      	str	r3, [r2, #0]
    temperature = compensate_temperature(adc_temp, &fine_temp);
 8001fb6:	4b31      	ldr	r3, [pc, #196]	@ (800207c <bmp280_read_fixed+0x124>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4931      	ldr	r1, [pc, #196]	@ (8002080 <bmp280_read_fixed+0x128>)
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fcc5 	bl	800194c <compensate_temperature>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4a2f      	ldr	r2, [pc, #188]	@ (8002084 <bmp280_read_fixed+0x12c>)
 8001fc6:	6013      	str	r3, [r2, #0]
	pressure = compensate_pressure(adc_pressure, fine_temp);
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002078 <bmp280_read_fixed+0x120>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8002080 <bmp280_read_fixed+0x128>)
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fcf4 	bl	80019c0 <compensate_pressure>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002088 <bmp280_read_fixed+0x130>)
 8001fde:	601a      	str	r2, [r3, #0]
	int32_t bmp280_altitude =((44330 * (1.0 - powf((float)pressure/102416,0.1903))))*100 - 100000;// cm
 8001fe0:	4b29      	ldr	r3, [pc, #164]	@ (8002088 <bmp280_read_fixed+0x130>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fee1 	bl	8000dac <__aeabi_i2f>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4927      	ldr	r1, [pc, #156]	@ (800208c <bmp280_read_fixed+0x134>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe ffe4 	bl	8000fbc <__aeabi_fdiv>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4926      	ldr	r1, [pc, #152]	@ (8002090 <bmp280_read_fixed+0x138>)
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f013 f97f 	bl	80152fc <powf>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fa79 	bl	80004f8 <__aeabi_f2d>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	f04f 0000 	mov.w	r0, #0
 800200e:	4921      	ldr	r1, [pc, #132]	@ (8002094 <bmp280_read_fixed+0x13c>)
 8002010:	f7fe f912 	bl	8000238 <__aeabi_dsub>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	a312      	add	r3, pc, #72	@ (adr r3, 8002068 <bmp280_read_fixed+0x110>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe fac1 	bl	80005a8 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <bmp280_read_fixed+0x140>)
 8002034:	f7fe fab8 	bl	80005a8 <__aeabi_dmul>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
 8002040:	a30b      	add	r3, pc, #44	@ (adr r3, 8002070 <bmp280_read_fixed+0x118>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe f8f7 	bl	8000238 <__aeabi_dsub>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f7fe fd59 	bl	8000b08 <__aeabi_d2iz>
 8002056:	4603      	mov	r3, r0
 8002058:	607b      	str	r3, [r7, #4]
	return bmp280_altitude;
 800205a:	687b      	ldr	r3, [r7, #4]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	f3af 8000 	nop.w
 8002068:	00000000 	.word	0x00000000
 800206c:	40e5a540 	.word	0x40e5a540
 8002070:	00000000 	.word	0x00000000
 8002074:	40f86a00 	.word	0x40f86a00
 8002078:	20000140 	.word	0x20000140
 800207c:	20000144 	.word	0x20000144
 8002080:	20000148 	.word	0x20000148
 8002084:	2000014c 	.word	0x2000014c
 8002088:	20000150 	.word	0x20000150
 800208c:	47c80800 	.word	0x47c80800
 8002090:	3e42de01 	.word	0x3e42de01
 8002094:	3ff00000 	.word	0x3ff00000
 8002098:	40590000 	.word	0x40590000

0800209c <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    ibusChannelData[0] = 1500;
 80020a4:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <ibus_init+0x54>)
 80020a6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80020aa:	601a      	str	r2, [r3, #0]
    ibusChannelData[1] = 1500;
 80020ac:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <ibus_init+0x54>)
 80020ae:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80020b2:	605a      	str	r2, [r3, #4]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 80020b4:	2302      	movs	r3, #2
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e008      	b.n	80020cc <ibus_init+0x30>
      ibusChannelData[i] = 1000;
 80020ba:	4a0d      	ldr	r2, [pc, #52]	@ (80020f0 <ibus_init+0x54>)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	3301      	adds	r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b0d      	cmp	r3, #13
 80020d0:	ddf3      	ble.n	80020ba <ibus_init+0x1e>
    }
	uart = uartt;
 80020d2:	4a08      	ldr	r2, [pc, #32]	@ (80020f4 <ibus_init+0x58>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <ibus_init+0x58>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2201      	movs	r2, #1
 80020de:	4906      	ldr	r1, [pc, #24]	@ (80020f8 <ibus_init+0x5c>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f00b f818 	bl	800d116 <HAL_UART_Receive_IT>
#endif
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000158 	.word	0x20000158
 80020f4:	200001b4 	.word	0x200001b4
 80020f8:	200001b0 	.word	0x200001b0

080020fc <ibus_uart_port>:

UART_HandleTypeDef *ibus_uart_port(){
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
   return uart;
 8002100:	4b02      	ldr	r3, [pc, #8]	@ (800210c <ibus_uart_port+0x10>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	200001b4 	.word	0x200001b4

08002110 <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <ibus_calback+0x20>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f000 f80d 	bl	8002138 <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 800211e:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <ibus_calback+0x24>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2201      	movs	r2, #1
 8002124:	4902      	ldr	r1, [pc, #8]	@ (8002130 <ibus_calback+0x20>)
 8002126:	4618      	mov	r0, r3
 8002128:	f00a fff5 	bl	800d116 <HAL_UART_Receive_IT>
#endif

}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200001b0 	.word	0x200001b0
 8002134:	200001b4 	.word	0x200001b4

08002138 <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 8002142:	4b1b      	ldr	r3, [pc, #108]	@ (80021b0 <ibusDataReceive+0x78>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800214a:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <ibusDataReceive+0x7c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4413      	add	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 8002152:	4b19      	ldr	r3, [pc, #100]	@ (80021b8 <ibusDataReceive+0x80>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800215e:	4293      	cmp	r3, r2
 8002160:	d902      	bls.n	8002168 <ibusDataReceive+0x30>
        ibusFramePosition = 0;
 8002162:	4b16      	ldr	r3, [pc, #88]	@ (80021bc <ibusDataReceive+0x84>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 8002168:	4a13      	ldr	r2, [pc, #76]	@ (80021b8 <ibusDataReceive+0x80>)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 800216e:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <ibusDataReceive+0x84>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d102      	bne.n	800217c <ibusDataReceive+0x44>
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	2b20      	cmp	r3, #32
 800217a:	d114      	bne.n	80021a6 <ibusDataReceive+0x6e>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 800217c:	4b0f      	ldr	r3, [pc, #60]	@ (80021bc <ibusDataReceive+0x84>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	4a0f      	ldr	r2, [pc, #60]	@ (80021c0 <ibusDataReceive+0x88>)
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 8002188:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <ibusDataReceive+0x84>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b1f      	cmp	r3, #31
 800218e:	d103      	bne.n	8002198 <ibusDataReceive+0x60>
        ibusFrameDone = TRUE;
 8002190:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <ibusDataReceive+0x8c>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	e007      	b.n	80021a8 <ibusDataReceive+0x70>
    } else {
        ibusFramePosition++;
 8002198:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <ibusDataReceive+0x84>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	3301      	adds	r3, #1
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <ibusDataReceive+0x84>)
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e000      	b.n	80021a8 <ibusDataReceive+0x70>
        return;
 80021a6:	bf00      	nop
    }
}
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	200005ec 	.word	0x200005ec
 80021b4:	200005f0 	.word	0x200005f0
 80021b8:	200001b8 	.word	0x200001b8
 80021bc:	200001bc 	.word	0x200001bc
 80021c0:	20000190 	.word	0x20000190
 80021c4:	20000154 	.word	0x20000154

080021c8 <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 80021ce:	4b63      	ldr	r3, [pc, #396]	@ (800235c <ibusFrameComplete+0x194>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80bb 	beq.w	800234e <ibusFrameComplete+0x186>
        ibusFrameDone = FALSE;
 80021d8:	4b60      	ldr	r3, [pc, #384]	@ (800235c <ibusFrameComplete+0x194>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 80021de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021e2:	81bb      	strh	r3, [r7, #12]

        for (i = 0; i < 30; i++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e009      	b.n	80021fe <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	4a5c      	ldr	r2, [pc, #368]	@ (8002360 <ibusFrameComplete+0x198>)
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	461a      	mov	r2, r3
 80021f2:	89bb      	ldrh	r3, [r7, #12]
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 30; i++)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	3301      	adds	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	2b1d      	cmp	r3, #29
 8002202:	d9f2      	bls.n	80021ea <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 8002204:	4b56      	ldr	r3, [pc, #344]	@ (8002360 <ibusFrameComplete+0x198>)
 8002206:	7f9b      	ldrb	r3, [r3, #30]
 8002208:	461a      	mov	r2, r3
 800220a:	4b55      	ldr	r3, [pc, #340]	@ (8002360 <ibusFrameComplete+0x198>)
 800220c:	7fdb      	ldrb	r3, [r3, #31]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	b29b      	uxth	r3, r3
 8002212:	4413      	add	r3, r2
 8002214:	80fb      	strh	r3, [r7, #6]

        if (chksum == rxsum) {
 8002216:	89ba      	ldrh	r2, [r7, #12]
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	429a      	cmp	r2, r3
 800221c:	f040 8097 	bne.w	800234e <ibusFrameComplete+0x186>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 8002220:	4b4f      	ldr	r3, [pc, #316]	@ (8002360 <ibusFrameComplete+0x198>)
 8002222:	78db      	ldrb	r3, [r3, #3]
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	4a4e      	ldr	r2, [pc, #312]	@ (8002360 <ibusFrameComplete+0x198>)
 8002228:	7892      	ldrb	r2, [r2, #2]
 800222a:	4413      	add	r3, r2
 800222c:	461a      	mov	r2, r3
 800222e:	4b4d      	ldr	r3, [pc, #308]	@ (8002364 <ibusFrameComplete+0x19c>)
 8002230:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 8002232:	4b4b      	ldr	r3, [pc, #300]	@ (8002360 <ibusFrameComplete+0x198>)
 8002234:	795b      	ldrb	r3, [r3, #5]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	4a49      	ldr	r2, [pc, #292]	@ (8002360 <ibusFrameComplete+0x198>)
 800223a:	7912      	ldrb	r2, [r2, #4]
 800223c:	4413      	add	r3, r2
 800223e:	461a      	mov	r2, r3
 8002240:	4b48      	ldr	r3, [pc, #288]	@ (8002364 <ibusFrameComplete+0x19c>)
 8002242:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 8002244:	4b46      	ldr	r3, [pc, #280]	@ (8002360 <ibusFrameComplete+0x198>)
 8002246:	79db      	ldrb	r3, [r3, #7]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	4a45      	ldr	r2, [pc, #276]	@ (8002360 <ibusFrameComplete+0x198>)
 800224c:	7992      	ldrb	r2, [r2, #6]
 800224e:	4413      	add	r3, r2
 8002250:	461a      	mov	r2, r3
 8002252:	4b44      	ldr	r3, [pc, #272]	@ (8002364 <ibusFrameComplete+0x19c>)
 8002254:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 8002256:	4b42      	ldr	r3, [pc, #264]	@ (8002360 <ibusFrameComplete+0x198>)
 8002258:	7a5b      	ldrb	r3, [r3, #9]
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	4a40      	ldr	r2, [pc, #256]	@ (8002360 <ibusFrameComplete+0x198>)
 800225e:	7a12      	ldrb	r2, [r2, #8]
 8002260:	4413      	add	r3, r2
 8002262:	461a      	mov	r2, r3
 8002264:	4b3f      	ldr	r3, [pc, #252]	@ (8002364 <ibusFrameComplete+0x19c>)
 8002266:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 8002268:	4b3d      	ldr	r3, [pc, #244]	@ (8002360 <ibusFrameComplete+0x198>)
 800226a:	7adb      	ldrb	r3, [r3, #11]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	4a3c      	ldr	r2, [pc, #240]	@ (8002360 <ibusFrameComplete+0x198>)
 8002270:	7a92      	ldrb	r2, [r2, #10]
 8002272:	4413      	add	r3, r2
 8002274:	461a      	mov	r2, r3
 8002276:	4b3b      	ldr	r3, [pc, #236]	@ (8002364 <ibusFrameComplete+0x19c>)
 8002278:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 800227a:	4b39      	ldr	r3, [pc, #228]	@ (8002360 <ibusFrameComplete+0x198>)
 800227c:	7b5b      	ldrb	r3, [r3, #13]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	4a37      	ldr	r2, [pc, #220]	@ (8002360 <ibusFrameComplete+0x198>)
 8002282:	7b12      	ldrb	r2, [r2, #12]
 8002284:	4413      	add	r3, r2
 8002286:	461a      	mov	r2, r3
 8002288:	4b36      	ldr	r3, [pc, #216]	@ (8002364 <ibusFrameComplete+0x19c>)
 800228a:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 800228c:	4b34      	ldr	r3, [pc, #208]	@ (8002360 <ibusFrameComplete+0x198>)
 800228e:	7bdb      	ldrb	r3, [r3, #15]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	4a33      	ldr	r2, [pc, #204]	@ (8002360 <ibusFrameComplete+0x198>)
 8002294:	7b92      	ldrb	r2, [r2, #14]
 8002296:	4413      	add	r3, r2
 8002298:	461a      	mov	r2, r3
 800229a:	4b32      	ldr	r3, [pc, #200]	@ (8002364 <ibusFrameComplete+0x19c>)
 800229c:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 800229e:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <ibusFrameComplete+0x198>)
 80022a0:	7c5b      	ldrb	r3, [r3, #17]
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002360 <ibusFrameComplete+0x198>)
 80022a6:	7c12      	ldrb	r2, [r2, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	461a      	mov	r2, r3
 80022ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002364 <ibusFrameComplete+0x19c>)
 80022ae:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 80022b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002360 <ibusFrameComplete+0x198>)
 80022b2:	7cdb      	ldrb	r3, [r3, #19]
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002360 <ibusFrameComplete+0x198>)
 80022b8:	7c92      	ldrb	r2, [r2, #18]
 80022ba:	4413      	add	r3, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	4b29      	ldr	r3, [pc, #164]	@ (8002364 <ibusFrameComplete+0x19c>)
 80022c0:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 80022c2:	4b27      	ldr	r3, [pc, #156]	@ (8002360 <ibusFrameComplete+0x198>)
 80022c4:	7d5b      	ldrb	r3, [r3, #21]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	4a25      	ldr	r2, [pc, #148]	@ (8002360 <ibusFrameComplete+0x198>)
 80022ca:	7d12      	ldrb	r2, [r2, #20]
 80022cc:	4413      	add	r3, r2
 80022ce:	461a      	mov	r2, r3
 80022d0:	4b24      	ldr	r3, [pc, #144]	@ (8002364 <ibusFrameComplete+0x19c>)
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24
            ibusChannelData[10] = (ibus[23] << 8) + ibus[22];
 80022d4:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <ibusFrameComplete+0x198>)
 80022d6:	7ddb      	ldrb	r3, [r3, #23]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	4a21      	ldr	r2, [pc, #132]	@ (8002360 <ibusFrameComplete+0x198>)
 80022dc:	7d92      	ldrb	r2, [r2, #22]
 80022de:	4413      	add	r3, r2
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b20      	ldr	r3, [pc, #128]	@ (8002364 <ibusFrameComplete+0x19c>)
 80022e4:	629a      	str	r2, [r3, #40]	@ 0x28
			ibusChannelData[11] = (ibus[25] << 8) + ibus[24];
 80022e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002360 <ibusFrameComplete+0x198>)
 80022e8:	7e5b      	ldrb	r3, [r3, #25]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002360 <ibusFrameComplete+0x198>)
 80022ee:	7e12      	ldrb	r2, [r2, #24]
 80022f0:	4413      	add	r3, r2
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002364 <ibusFrameComplete+0x19c>)
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c
			ibusChannelData[12] = (ibus[27] << 8) + ibus[26];
 80022f8:	4b19      	ldr	r3, [pc, #100]	@ (8002360 <ibusFrameComplete+0x198>)
 80022fa:	7edb      	ldrb	r3, [r3, #27]
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	4a18      	ldr	r2, [pc, #96]	@ (8002360 <ibusFrameComplete+0x198>)
 8002300:	7e92      	ldrb	r2, [r2, #26]
 8002302:	4413      	add	r3, r2
 8002304:	461a      	mov	r2, r3
 8002306:	4b17      	ldr	r3, [pc, #92]	@ (8002364 <ibusFrameComplete+0x19c>)
 8002308:	631a      	str	r2, [r3, #48]	@ 0x30
			ibusChannelData[13] = (ibus[29] << 8) + ibus[28];
 800230a:	4b15      	ldr	r3, [pc, #84]	@ (8002360 <ibusFrameComplete+0x198>)
 800230c:	7f5b      	ldrb	r3, [r3, #29]
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	4a13      	ldr	r2, [pc, #76]	@ (8002360 <ibusFrameComplete+0x198>)
 8002312:	7f12      	ldrb	r2, [r2, #28]
 8002314:	4413      	add	r3, r2
 8002316:	461a      	mov	r2, r3
 8002318:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <ibusFrameComplete+0x19c>)
 800231a:	635a      	str	r2, [r3, #52]	@ 0x34
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	e010      	b.n	8002344 <ibusFrameComplete+0x17c>
			    if(ibusChannelData[i] > 2100){
 8002322:	4a10      	ldr	r2, [pc, #64]	@ (8002364 <ibusFrameComplete+0x19c>)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232a:	f640 0234 	movw	r2, #2100	@ 0x834
 800232e:	4293      	cmp	r3, r2
 8002330:	d905      	bls.n	800233e <ibusFrameComplete+0x176>
				    ibusChannelData[i] = 1000;
 8002332:	4a0c      	ldr	r2, [pc, #48]	@ (8002364 <ibusFrameComplete+0x19c>)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800233a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	3301      	adds	r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b0d      	cmp	r3, #13
 8002348:	ddeb      	ble.n	8002322 <ibusFrameComplete+0x15a>
				}
			}
            return TRUE;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <ibusFrameComplete+0x188>
        }
    }
    return FALSE;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000154 	.word	0x20000154
 8002360:	20000190 	.word	0x20000190
 8002364:	20000158 	.word	0x20000158

08002368 <mpu6050Connection>:

/* Check mpu6050 connection
 * return 1 -> not connected
 * return 0 -> connected
 */ 
int8_t mpu6050Connection(){
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
    isConnected = HAL_I2C_IsDeviceReady(i2c,IMU_DEV_ADDRES, 3, 5);
 800236c:	4b07      	ldr	r3, [pc, #28]	@ (800238c <mpu6050Connection+0x24>)
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	2305      	movs	r3, #5
 8002372:	2203      	movs	r2, #3
 8002374:	21d0      	movs	r1, #208	@ 0xd0
 8002376:	f007 fc2b 	bl	8009bd0 <HAL_I2C_IsDeviceReady>
 800237a:	4603      	mov	r3, r0
 800237c:	b25a      	sxtb	r2, r3
 800237e:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <mpu6050Connection+0x28>)
 8002380:	701a      	strb	r2, [r3, #0]
    return isConnected;
 8002382:	4b03      	ldr	r3, [pc, #12]	@ (8002390 <mpu6050Connection+0x28>)
 8002384:	f993 3000 	ldrsb.w	r3, [r3]
}
 8002388:	4618      	mov	r0, r3
 800238a:	bd80      	pop	{r7, pc}
 800238c:	200001c0 	.word	0x200001c0
 8002390:	200001c4 	.word	0x200001c4

08002394 <mpu6050_init>:
}

/* configuration mpu6050*/


int8_t mpu6050_init(I2C_HandleTypeDef *hi2c){
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af02      	add	r7, sp, #8
 800239a:	6078      	str	r0, [r7, #4]
	data[1] = (uint8_t)(ACC_2G<<3);
    SPI_write(&data,2);
	return 0;
#endif
#ifdef I2C
  i2c = hi2c;	
 800239c:	4a25      	ldr	r2, [pc, #148]	@ (8002434 <mpu6050_init+0xa0>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6013      	str	r3, [r2, #0]
	int8_t k = mpu6050Connection();
 80023a2:	f7ff ffe1 	bl	8002368 <mpu6050Connection>
 80023a6:	4603      	mov	r3, r0
 80023a8:	73fb      	strb	r3, [r7, #15]
	if(!k){
 80023aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d13a      	bne.n	8002428 <mpu6050_init+0x94>
		uint8_t buffer[6];	
		buffer[0] = MPU_RA_PWR_MGMT_1; 
 80023b2:	236b      	movs	r3, #107	@ 0x6b
 80023b4:	723b      	strb	r3, [r7, #8]
		buffer[1] = RESET_REG;
 80023b6:	2300      	movs	r3, #0
 80023b8:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80023ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002434 <mpu6050_init+0xa0>)
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	f107 0208 	add.w	r2, r7, #8
 80023c2:	2301      	movs	r3, #1
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2302      	movs	r3, #2
 80023c8:	21d0      	movs	r1, #208	@ 0xd0
 80023ca:	f006 fd35 	bl	8008e38 <HAL_I2C_Master_Transmit>
		
		//buffer[0] = CONFIGURATION;
		//buffer[1] = (HZ_5<<0);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);

		buffer[0] = GYRO_REG_CONFIG;
 80023ce:	231b      	movs	r3, #27
 80023d0:	723b      	strb	r3, [r7, #8]
		buffer[1] = (GYRO_1000dps<<3);
 80023d2:	2310      	movs	r3, #16
 80023d4:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80023d6:	4b17      	ldr	r3, [pc, #92]	@ (8002434 <mpu6050_init+0xa0>)
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	f107 0208 	add.w	r2, r7, #8
 80023de:	2301      	movs	r3, #1
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2302      	movs	r3, #2
 80023e4:	21d0      	movs	r1, #208	@ 0xd0
 80023e6:	f006 fd27 	bl	8008e38 <HAL_I2C_Master_Transmit>

		buffer[0] = ACC_REG_CONFIG;
 80023ea:	231c      	movs	r3, #28
 80023ec:	723b      	strb	r3, [r7, #8]
		buffer[1] = (ACC_16G<<3);
 80023ee:	2318      	movs	r3, #24
 80023f0:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80023f2:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <mpu6050_init+0xa0>)
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	f107 0208 	add.w	r2, r7, #8
 80023fa:	2301      	movs	r3, #1
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2302      	movs	r3, #2
 8002400:	21d0      	movs	r1, #208	@ 0xd0
 8002402:	f006 fd19 	bl	8008e38 <HAL_I2C_Master_Transmit>
		//buffer[1] &= ~(1<<5);
		//buffer[1] |= (1<<5);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
		
		// set aux i2c pass through mode 
		buffer[0] = INT_PIN_CFG;
 8002406:	2337      	movs	r3, #55	@ 0x37
 8002408:	723b      	strb	r3, [r7, #8]
		buffer[1] |= (1<<1);
 800240a:	7a7b      	ldrb	r3, [r7, #9]
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	b2db      	uxtb	r3, r3
 8002412:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8002414:	4b07      	ldr	r3, [pc, #28]	@ (8002434 <mpu6050_init+0xa0>)
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	f107 0208 	add.w	r2, r7, #8
 800241c:	2301      	movs	r3, #1
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2302      	movs	r3, #2
 8002422:	21d0      	movs	r1, #208	@ 0xd0
 8002424:	f006 fd08 	bl	8008e38 <HAL_I2C_Master_Transmit>

	}
	return k;
 8002428:	f997 300f 	ldrsb.w	r3, [r7, #15]
#endif

}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200001c0 	.word	0x200001c0

08002438 <mpu6050_gyro_get_raw>:
/* Gyro get raw data (Lbs/s)
 * x - rate
 * y - rate
 * z - rate   
 */
void mpu6050_gyro_get_raw(axis3_t *raw){
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af02      	add	r7, sp, #8
 800243e:	6078      	str	r0, [r7, #4]
	  uint8_t buffe[6];
	  buffe[0] = (uint8_t)GYRO_DATA_REG;
 8002440:	2343      	movs	r3, #67	@ 0x43
 8002442:	723b      	strb	r3, [r7, #8]

#ifdef I2C
	  HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 8002444:	4b19      	ldr	r3, [pc, #100]	@ (80024ac <mpu6050_gyro_get_raw+0x74>)
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	f107 0208 	add.w	r2, r7, #8
 800244c:	2301      	movs	r3, #1
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2301      	movs	r3, #1
 8002452:	21d0      	movs	r1, #208	@ 0xd0
 8002454:	f006 fcf0 	bl	8008e38 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 8002458:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <mpu6050_gyro_get_raw+0x74>)
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	f107 0208 	add.w	r2, r7, #8
 8002460:	2301      	movs	r3, #1
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2306      	movs	r3, #6
 8002466:	21d0      	movs	r1, #208	@ 0xd0
 8002468:	f006 fde4 	bl	8009034 <HAL_I2C_Master_Receive>
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&SPI_PORT,&buffe[0],1,1);
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
#endif
	  raw->x = (int16_t)buffe[0]<<8|buffe[1];
 800246c:	7a3b      	ldrb	r3, [r7, #8]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	b21a      	sxth	r2, r3
 8002472:	7a7b      	ldrb	r3, [r7, #9]
 8002474:	b21b      	sxth	r3, r3
 8002476:	4313      	orrs	r3, r2
 8002478:	b21a      	sxth	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	801a      	strh	r2, [r3, #0]
	  raw->y = (int16_t)buffe[2]<<8|buffe[3];
 800247e:	7abb      	ldrb	r3, [r7, #10]
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	b21a      	sxth	r2, r3
 8002484:	7afb      	ldrb	r3, [r7, #11]
 8002486:	b21b      	sxth	r3, r3
 8002488:	4313      	orrs	r3, r2
 800248a:	b21a      	sxth	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	805a      	strh	r2, [r3, #2]
	  raw->z = (int16_t)buffe[4]<<8|buffe[5];
 8002490:	7b3b      	ldrb	r3, [r7, #12]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	b21a      	sxth	r2, r3
 8002496:	7b7b      	ldrb	r3, [r7, #13]
 8002498:	b21b      	sxth	r3, r3
 800249a:	4313      	orrs	r3, r2
 800249c:	b21a      	sxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	809a      	strh	r2, [r3, #4]
	}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200001c0 	.word	0x200001c0

080024b0 <mpu6050_acc_get_raw>:
/* Acc get raw data
	*  x - axis
	*  y - axis
	*  z - axis   
	*/
void mpu6050_acc_get_raw(axis3_t *k){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	6078      	str	r0, [r7, #4]
	axis3_t p_val =*k;
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	f107 0310 	add.w	r3, r7, #16
 80024be:	6810      	ldr	r0, [r2, #0]
 80024c0:	6018      	str	r0, [r3, #0]
 80024c2:	8892      	ldrh	r2, [r2, #4]
 80024c4:	809a      	strh	r2, [r3, #4]
	uint8_t buffe[6];
	buffe[0] = (uint8_t)ACC_DATA_REG;
 80024c6:	233b      	movs	r3, #59	@ 0x3b
 80024c8:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 80024ca:	4b19      	ldr	r3, [pc, #100]	@ (8002530 <mpu6050_acc_get_raw+0x80>)
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	f107 0208 	add.w	r2, r7, #8
 80024d2:	2301      	movs	r3, #1
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2301      	movs	r3, #1
 80024d8:	21d0      	movs	r1, #208	@ 0xd0
 80024da:	f006 fcad 	bl	8008e38 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 80024de:	4b14      	ldr	r3, [pc, #80]	@ (8002530 <mpu6050_acc_get_raw+0x80>)
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	f107 0208 	add.w	r2, r7, #8
 80024e6:	2301      	movs	r3, #1
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2306      	movs	r3, #6
 80024ec:	21d0      	movs	r1, #208	@ 0xd0
 80024ee:	f006 fda1 	bl	8009034 <HAL_I2C_Master_Receive>
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
*/
      SPI_read(buffe[0],buffe,14);
#endif
	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 80024f2:	7a3b      	ldrb	r3, [r7, #8]
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	b21a      	sxth	r2, r3
 80024f8:	7a7b      	ldrb	r3, [r7, #9]
 80024fa:	b21b      	sxth	r3, r3
 80024fc:	4313      	orrs	r3, r2
 80024fe:	b21a      	sxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 8002504:	7abb      	ldrb	r3, [r7, #10]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	b21a      	sxth	r2, r3
 800250a:	7afb      	ldrb	r3, [r7, #11]
 800250c:	b21b      	sxth	r3, r3
 800250e:	4313      	orrs	r3, r2
 8002510:	b21a      	sxth	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 8002516:	7b3b      	ldrb	r3, [r7, #12]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	b21a      	sxth	r2, r3
 800251c:	7b7b      	ldrb	r3, [r7, #13]
 800251e:	b21b      	sxth	r3, r3
 8002520:	4313      	orrs	r3, r2
 8002522:	b21a      	sxth	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	809a      	strh	r2, [r3, #4]
}
 8002528:	bf00      	nop
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	200001c0 	.word	0x200001c0

08002534 <qmc5883_init>:
#include "../Lib/axis.h"

const uint8_t qmc_addres = (0x0d<<1);
static I2C_HandleTypeDef *qmc_i2cport;

void qmc5883_init(I2C_HandleTypeDef *i2cport){
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af02      	add	r7, sp, #8
 800253a:	6078      	str	r0, [r7, #4]
	qmc_i2cport = i2cport;
 800253c:	4a12      	ldr	r2, [pc, #72]	@ (8002588 <qmc5883_init+0x54>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
    uint8_t buf[2];
    buf[0]=0x0b;
 8002542:	230b      	movs	r3, #11
 8002544:	733b      	strb	r3, [r7, #12]
    buf[1]=0X01;
 8002546:	2301      	movs	r3, #1
 8002548:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 800254a:	4b0f      	ldr	r3, [pc, #60]	@ (8002588 <qmc5883_init+0x54>)
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	231a      	movs	r3, #26
 8002550:	4619      	mov	r1, r3
 8002552:	f107 020c 	add.w	r2, r7, #12
 8002556:	2301      	movs	r3, #1
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2302      	movs	r3, #2
 800255c:	f006 fc6c 	bl	8008e38 <HAL_I2C_Master_Transmit>
    buf[0]=0x09;
 8002560:	2309      	movs	r3, #9
 8002562:	733b      	strb	r3, [r7, #12]
    buf[1]=0X1D;
 8002564:	231d      	movs	r3, #29
 8002566:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8002568:	4b07      	ldr	r3, [pc, #28]	@ (8002588 <qmc5883_init+0x54>)
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	231a      	movs	r3, #26
 800256e:	4619      	mov	r1, r3
 8002570:	f107 020c 	add.w	r2, r7, #12
 8002574:	2301      	movs	r3, #1
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	2302      	movs	r3, #2
 800257a:	f006 fc5d 	bl	8008e38 <HAL_I2C_Master_Transmit>
}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200001c8 	.word	0x200001c8

0800258c <qmc_get_raw>:

void qmc_get_raw(axis3_t *axis){
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af04      	add	r7, sp, #16
 8002592:	6078      	str	r0, [r7, #4]
	  uint8_t buf[6]={0};
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	2300      	movs	r3, #0
 800259a:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(qmc_i2cport,qmc_addres,0x00,1,buf,6,1);
 800259c:	4b16      	ldr	r3, [pc, #88]	@ (80025f8 <qmc_get_raw+0x6c>)
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	231a      	movs	r3, #26
 80025a2:	4619      	mov	r1, r3
 80025a4:	2301      	movs	r3, #1
 80025a6:	9302      	str	r3, [sp, #8]
 80025a8:	2306      	movs	r3, #6
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	f107 0308 	add.w	r3, r7, #8
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	2301      	movs	r3, #1
 80025b4:	2200      	movs	r2, #0
 80025b6:	f007 f8a3 	bl	8009700 <HAL_I2C_Mem_Read>
	  axis->x=((int16_t)buf[1]<<8|buf[0]) ;
 80025ba:	7a7b      	ldrb	r3, [r7, #9]
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	b21a      	sxth	r2, r3
 80025c0:	7a3b      	ldrb	r3, [r7, #8]
 80025c2:	b21b      	sxth	r3, r3
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b21a      	sxth	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	801a      	strh	r2, [r3, #0]
	  axis->y=((int16_t)buf[3]<<8|buf[2]);
 80025cc:	7afb      	ldrb	r3, [r7, #11]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	b21a      	sxth	r2, r3
 80025d2:	7abb      	ldrb	r3, [r7, #10]
 80025d4:	b21b      	sxth	r3, r3
 80025d6:	4313      	orrs	r3, r2
 80025d8:	b21a      	sxth	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	805a      	strh	r2, [r3, #2]
	  axis->z=((int16_t)buf[5]<<8|buf[4]);
 80025de:	7b7b      	ldrb	r3, [r7, #13]
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	b21a      	sxth	r2, r3
 80025e4:	7b3b      	ldrb	r3, [r7, #12]
 80025e6:	b21b      	sxth	r3, r3
 80025e8:	4313      	orrs	r3, r2
 80025ea:	b21a      	sxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	809a      	strh	r2, [r3, #4]
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	200001c8 	.word	0x200001c8

080025fc <baro_init>:
//#define MS5611

int8_t baro_calib;
int32_t alt_offset;

void baro_init(){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
    baro_calib = FALSE;
 8002602:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <baro_init+0x40>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
    alt_offset = 0;
 8002608:	4b0d      	ldr	r3, [pc, #52]	@ (8002640 <baro_init+0x44>)
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
#ifdef BMP280
    bmp280_init(&hi2c2);
 800260e:	480d      	ldr	r0, [pc, #52]	@ (8002644 <baro_init+0x48>)
 8002610:	f7ff f900 	bl	8001814 <bmp280_init>
    for(int i=0; i< 100; i++){
 8002614:	2300      	movs	r3, #0
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	e007      	b.n	800262a <baro_init+0x2e>
    	bmp280_read_fixed();
 800261a:	f7ff fc9d 	bl	8001f58 <bmp280_read_fixed>
    	HAL_Delay(5);
 800261e:	2005      	movs	r0, #5
 8002620:	f005 fb62 	bl	8007ce8 <HAL_Delay>
    for(int i=0; i< 100; i++){
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3301      	adds	r3, #1
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b63      	cmp	r3, #99	@ 0x63
 800262e:	ddf4      	ble.n	800261a <baro_init+0x1e>
    }
#elif MS5611
    ms5611_init(&hi2c2);
#endif
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200001cc 	.word	0x200001cc
 8002640:	200001d0 	.word	0x200001d0
 8002644:	200008e8 	.word	0x200008e8

08002648 <baro_zero_calibrate>:


void baro_zero_calibrate(){
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
    int32_t altitude = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
    static int16_t count = 0;
#ifdef BMP280
    altitude = bmp280_read_fixed();
 8002652:	f7ff fc81 	bl	8001f58 <bmp280_read_fixed>
 8002656:	6078      	str	r0, [r7, #4]
#elif MS5611
    altitude = ms5611_read_fixed();
#endif
    alt_offset += altitude;
 8002658:	4b13      	ldr	r3, [pc, #76]	@ (80026a8 <baro_zero_calibrate+0x60>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4413      	add	r3, r2
 8002660:	4a11      	ldr	r2, [pc, #68]	@ (80026a8 <baro_zero_calibrate+0x60>)
 8002662:	6013      	str	r3, [r2, #0]
    count ++;
 8002664:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <baro_zero_calibrate+0x64>)
 8002666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800266a:	b29b      	uxth	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	b29b      	uxth	r3, r3
 8002670:	b21a      	sxth	r2, r3
 8002672:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <baro_zero_calibrate+0x64>)
 8002674:	801a      	strh	r2, [r3, #0]
    if(count > 100){
 8002676:	4b0d      	ldr	r3, [pc, #52]	@ (80026ac <baro_zero_calibrate+0x64>)
 8002678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267c:	2b64      	cmp	r3, #100	@ 0x64
 800267e:	dd0f      	ble.n	80026a0 <baro_zero_calibrate+0x58>
        alt_offset /= 100;
 8002680:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <baro_zero_calibrate+0x60>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0a      	ldr	r2, [pc, #40]	@ (80026b0 <baro_zero_calibrate+0x68>)
 8002686:	fb82 1203 	smull	r1, r2, r2, r3
 800268a:	1152      	asrs	r2, r2, #5
 800268c:	17db      	asrs	r3, r3, #31
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	4a05      	ldr	r2, [pc, #20]	@ (80026a8 <baro_zero_calibrate+0x60>)
 8002692:	6013      	str	r3, [r2, #0]
        baro_calib = TRUE;
 8002694:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <baro_zero_calibrate+0x6c>)
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
        count = 101;
 800269a:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <baro_zero_calibrate+0x64>)
 800269c:	2265      	movs	r2, #101	@ 0x65
 800269e:	801a      	strh	r2, [r3, #0]
    }
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	200001d0 	.word	0x200001d0
 80026ac:	200001d4 	.word	0x200001d4
 80026b0:	51eb851f 	.word	0x51eb851f
 80026b4:	200001cc 	.word	0x200001cc

080026b8 <is_baro_calibration>:

int8_t is_baro_calibration(){
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
      return baro_calib;
 80026bc:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <is_baro_calibration+0x14>)
 80026be:	f993 3000 	ldrsb.w	r3, [r3]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	200001cc 	.word	0x200001cc

080026d0 <baro_get_altitude>:

int32_t baro_get_altitude(){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
     if(baro_calib){
 80026d6:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <baro_get_altitude+0x2c>)
 80026d8:	f993 3000 	ldrsb.w	r3, [r3]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <baro_get_altitude+0x22>
        int32_t alt = bmp280_read_fixed() - alt_offset;
 80026e0:	f7ff fc3a 	bl	8001f58 <bmp280_read_fixed>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <baro_get_altitude+0x30>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	607b      	str	r3, [r7, #4]
        return alt;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	e000      	b.n	80026f4 <baro_get_altitude+0x24>
     }
     return 0;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	200001cc 	.word	0x200001cc
 8002700:	200001d0 	.word	0x200001d0

08002704 <black_box_init>:
FRESULT open_state;
int32_t puts_state;
/*
 * init black box
 */
void black_box_init(){
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	fs.file = &SDFile;
 8002708:	4b0e      	ldr	r3, [pc, #56]	@ (8002744 <black_box_init+0x40>)
 800270a:	4a0f      	ldr	r2, [pc, #60]	@ (8002748 <black_box_init+0x44>)
 800270c:	605a      	str	r2, [r3, #4]
    mount_state = f_mount(&SDFatFS,"",1);
 800270e:	2201      	movs	r2, #1
 8002710:	490e      	ldr	r1, [pc, #56]	@ (800274c <black_box_init+0x48>)
 8002712:	480f      	ldr	r0, [pc, #60]	@ (8002750 <black_box_init+0x4c>)
 8002714:	f00e fbf0 	bl	8010ef8 <f_mount>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <black_box_init+0x50>)
 800271e:	701a      	strb	r2, [r3, #0]
    open_state = f_open(&SDFile,"flight.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8002720:	2213      	movs	r2, #19
 8002722:	490d      	ldr	r1, [pc, #52]	@ (8002758 <black_box_init+0x54>)
 8002724:	4808      	ldr	r0, [pc, #32]	@ (8002748 <black_box_init+0x44>)
 8002726:	f00e fc4f 	bl	8010fc8 <f_open>
 800272a:	4603      	mov	r3, r0
 800272c:	461a      	mov	r2, r3
 800272e:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <black_box_init+0x58>)
 8002730:	701a      	strb	r2, [r3, #0]
    f_lseek (&SDFile,SDFile.fsize);
 8002732:	4b05      	ldr	r3, [pc, #20]	@ (8002748 <black_box_init+0x44>)
 8002734:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002738:	4619      	mov	r1, r3
 800273a:	4803      	ldr	r0, [pc, #12]	@ (8002748 <black_box_init+0x44>)
 800273c:	f00f f98d 	bl	8011a5a <f_lseek>
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	200001d8 	.word	0x200001d8
 8002748:	200010e4 	.word	0x200010e4
 800274c:	08015e18 	.word	0x08015e18
 8002750:	20000eb0 	.word	0x20000eb0
 8002754:	200003e4 	.word	0x200003e4
 8002758:	08015e1c 	.word	0x08015e1c
 800275c:	200003e5 	.word	0x200003e5

08002760 <black_box_get_file_size>:

uint32_t black_box_get_file_size(){
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
    return SDFile.fsize;
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <black_box_get_file_size+0x14>)
 8002766:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	200010e4 	.word	0x200010e4

08002778 <black_box_pack_int>:
    fs.buffer_index += index;
}



void black_box_pack_int(int val){
 8002778:	b580      	push	{r7, lr}
 800277a:	b08c      	sub	sp, #48	@ 0x30
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

	fs.indexx=0;
 8002780:	4b48      	ldr	r3, [pc, #288]	@ (80028a4 <black_box_pack_int+0x12c>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
	int len_str;
	int val_ = val;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	617b      	str	r3, [r7, #20]
	char str_[11];
	memset(str_,0,11);
 800278a:	f107 0308 	add.w	r3, r7, #8
 800278e:	220b      	movs	r2, #11
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f012 fd3c 	bl	8015210 <memset>
	if(val != 0){
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d02a      	beq.n	80027f4 <black_box_pack_int+0x7c>
		val = abs(val);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bfb8      	it	lt
 80027a4:	425b      	neglt	r3, r3
 80027a6:	607b      	str	r3, [r7, #4]
		len_str = intToStr(val,str_,0);
 80027a8:	f107 0308 	add.w	r3, r7, #8
 80027ac:	2200      	movs	r2, #0
 80027ae:	4619      	mov	r1, r3
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f91b 	bl	80029ec <intToStr>
 80027b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(val_ < 0){
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	da2a      	bge.n	8002814 <black_box_pack_int+0x9c>
			for(int i = len_str; i > 0; i--){
 80027be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027c2:	e00e      	b.n	80027e2 <black_box_pack_int+0x6a>
				str_[i] = str_[i - 1];
 80027c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c6:	3b01      	subs	r3, #1
 80027c8:	3330      	adds	r3, #48	@ 0x30
 80027ca:	443b      	add	r3, r7
 80027cc:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80027d0:	f107 0208 	add.w	r2, r7, #8
 80027d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d6:	4413      	add	r3, r2
 80027d8:	460a      	mov	r2, r1
 80027da:	701a      	strb	r2, [r3, #0]
			for(int i = len_str; i > 0; i--){
 80027dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027de:	3b01      	subs	r3, #1
 80027e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	dced      	bgt.n	80027c4 <black_box_pack_int+0x4c>
			}
			len_str ++;
 80027e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ea:	3301      	adds	r3, #1
 80027ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			str_[0] = '-';
 80027ee:	232d      	movs	r3, #45	@ 0x2d
 80027f0:	723b      	strb	r3, [r7, #8]
 80027f2:	e00f      	b.n	8002814 <black_box_pack_int+0x9c>
		}
	}
	else{
	   fs.buffer[fs.buffer_index] ='0';
 80027f4:	4b2b      	ldr	r3, [pc, #172]	@ (80028a4 <black_box_pack_int+0x12c>)
 80027f6:	891b      	ldrh	r3, [r3, #8]
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b2a      	ldr	r3, [pc, #168]	@ (80028a4 <black_box_pack_int+0x12c>)
 80027fc:	4413      	add	r3, r2
 80027fe:	2230      	movs	r2, #48	@ 0x30
 8002800:	729a      	strb	r2, [r3, #10]
	   len_str = 1;
 8002802:	2301      	movs	r3, #1
 8002804:	62fb      	str	r3, [r7, #44]	@ 0x2c
	   fs.buffer_index ++;
 8002806:	4b27      	ldr	r3, [pc, #156]	@ (80028a4 <black_box_pack_int+0x12c>)
 8002808:	891b      	ldrh	r3, [r3, #8]
 800280a:	3301      	adds	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	4b25      	ldr	r3, [pc, #148]	@ (80028a4 <black_box_pack_int+0x12c>)
 8002810:	811a      	strh	r2, [r3, #8]
 8002812:	e044      	b.n	800289e <black_box_pack_int+0x126>
		return;
	}
	// copy str to buffer
	int str_idx = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24
	int index_flag;
	int max_index = fs.buffer_index + len_str;
 8002818:	4b22      	ldr	r3, [pc, #136]	@ (80028a4 <black_box_pack_int+0x12c>)
 800281a:	891b      	ldrh	r3, [r3, #8]
 800281c:	461a      	mov	r2, r3
 800281e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002820:	4413      	add	r3, r2
 8002822:	61fb      	str	r3, [r7, #28]
	if(max_index <=  MAX_BUFFER_SIZE){
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800282a:	dc08      	bgt.n	800283e <black_box_pack_int+0xc6>
		max_index = fs.buffer_index + len_str;
 800282c:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <black_box_pack_int+0x12c>)
 800282e:	891b      	ldrh	r3, [r3, #8]
 8002830:	461a      	mov	r2, r3
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	4413      	add	r3, r2
 8002836:	61fb      	str	r3, [r7, #28]
		index_flag = 1;
 8002838:	2301      	movs	r3, #1
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	e004      	b.n	8002848 <black_box_pack_int+0xd0>
	}
	else{
		max_index = MAX_BUFFER_SIZE;
 800283e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002842:	61fb      	str	r3, [r7, #28]
		index_flag = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	623b      	str	r3, [r7, #32]
	}
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 8002848:	4b16      	ldr	r3, [pc, #88]	@ (80028a4 <black_box_pack_int+0x12c>)
 800284a:	891b      	ldrh	r3, [r3, #8]
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	e00f      	b.n	8002870 <black_box_pack_int+0xf8>
			fs.buffer[j] = str_[str_idx ++];
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	627a      	str	r2, [r7, #36]	@ 0x24
 8002856:	3330      	adds	r3, #48	@ 0x30
 8002858:	443b      	add	r3, r7
 800285a:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 800285e:	4a11      	ldr	r2, [pc, #68]	@ (80028a4 <black_box_pack_int+0x12c>)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	4413      	add	r3, r2
 8002864:	330a      	adds	r3, #10
 8002866:	460a      	mov	r2, r1
 8002868:	701a      	strb	r2, [r3, #0]
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	3301      	adds	r3, #1
 800286e:	61bb      	str	r3, [r7, #24]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	429a      	cmp	r2, r3
 8002876:	dbeb      	blt.n	8002850 <black_box_pack_int+0xd8>
	}
	
	if(index_flag){
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <black_box_pack_int+0x118>
		fs.buffer_index += len_str;
 800287e:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <black_box_pack_int+0x12c>)
 8002880:	891a      	ldrh	r2, [r3, #8]
 8002882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002884:	b29b      	uxth	r3, r3
 8002886:	4413      	add	r3, r2
 8002888:	b29a      	uxth	r2, r3
 800288a:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <black_box_pack_int+0x12c>)
 800288c:	811a      	strh	r2, [r3, #8]
 800288e:	e006      	b.n	800289e <black_box_pack_int+0x126>
	}
	else{
		fs.buffer_index += MAX_BUFFER_SIZE;
 8002890:	4b04      	ldr	r3, [pc, #16]	@ (80028a4 <black_box_pack_int+0x12c>)
 8002892:	891b      	ldrh	r3, [r3, #8]
 8002894:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002898:	b29a      	uxth	r2, r3
 800289a:	4b02      	ldr	r3, [pc, #8]	@ (80028a4 <black_box_pack_int+0x12c>)
 800289c:	811a      	strh	r2, [r3, #8]
	}
}
 800289e:	3730      	adds	r7, #48	@ 0x30
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	200001d8 	.word	0x200001d8

080028a8 <black_box_pack_str>:


void black_box_pack_str(char *c){
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

    int i = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 80028b4:	e01c      	b.n	80028f0 <black_box_pack_str+0x48>
        if((fs.buffer_index + i) > MAX_BUFFER_SIZE){
 80028b6:	4b17      	ldr	r3, [pc, #92]	@ (8002914 <black_box_pack_str+0x6c>)
 80028b8:	891b      	ldrh	r3, [r3, #8]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028c4:	dd04      	ble.n	80028d0 <black_box_pack_str+0x28>
                fs.buffer_index = MAX_BUFFER_SIZE;
 80028c6:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <black_box_pack_str+0x6c>)
 80028c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028cc:	811a      	strh	r2, [r3, #8]
                return;
 80028ce:	e01d      	b.n	800290c <black_box_pack_str+0x64>
        }
        fs.buffer[fs.buffer_index + i] = c[i];
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	441a      	add	r2, r3
 80028d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002914 <black_box_pack_str+0x6c>)
 80028d8:	891b      	ldrh	r3, [r3, #8]
 80028da:	4619      	mov	r1, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	440b      	add	r3, r1
 80028e0:	7811      	ldrb	r1, [r2, #0]
 80028e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002914 <black_box_pack_str+0x6c>)
 80028e4:	4413      	add	r3, r2
 80028e6:	460a      	mov	r2, r1
 80028e8:	729a      	strb	r2, [r3, #10]
        i ++;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3301      	adds	r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1dc      	bne.n	80028b6 <black_box_pack_str+0xe>
    }
    fs.buffer_index += i;
 80028fc:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <black_box_pack_str+0x6c>)
 80028fe:	891a      	ldrh	r2, [r3, #8]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	b29b      	uxth	r3, r3
 8002904:	4413      	add	r3, r2
 8002906:	b29a      	uxth	r2, r3
 8002908:	4b02      	ldr	r3, [pc, #8]	@ (8002914 <black_box_pack_str+0x6c>)
 800290a:	811a      	strh	r2, [r3, #8]
}
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	200001d8 	.word	0x200001d8

08002918 <black_box_pack_char>:

void black_box_pack_char(char c){
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
    fs.buffer[fs.buffer_index ] = c;
 8002922:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <black_box_pack_char+0x30>)
 8002924:	891b      	ldrh	r3, [r3, #8]
 8002926:	461a      	mov	r2, r3
 8002928:	4b07      	ldr	r3, [pc, #28]	@ (8002948 <black_box_pack_char+0x30>)
 800292a:	4413      	add	r3, r2
 800292c:	79fa      	ldrb	r2, [r7, #7]
 800292e:	729a      	strb	r2, [r3, #10]
    fs.buffer_index ++;
 8002930:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <black_box_pack_char+0x30>)
 8002932:	891b      	ldrh	r3, [r3, #8]
 8002934:	3301      	adds	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	4b03      	ldr	r3, [pc, #12]	@ (8002948 <black_box_pack_char+0x30>)
 800293a:	811a      	strh	r2, [r3, #8]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	200001d8 	.word	0x200001d8

0800294c <black_box_load>:



void black_box_load()
 {
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
	  puts_state = f_puts(fs.buffer,fs.file);
 8002950:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <black_box_load+0x38>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4619      	mov	r1, r3
 8002956:	480c      	ldr	r0, [pc, #48]	@ (8002988 <black_box_load+0x3c>)
 8002958:	f00f fb8b 	bl	8012072 <f_puts>
 800295c:	4603      	mov	r3, r0
 800295e:	4a0b      	ldr	r2, [pc, #44]	@ (800298c <black_box_load+0x40>)
 8002960:	6013      	str	r3, [r2, #0]
      f_sync(fs.file);
 8002962:	4b08      	ldr	r3, [pc, #32]	@ (8002984 <black_box_load+0x38>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4618      	mov	r0, r3
 8002968:	f00e ffae 	bl	80118c8 <f_sync>
      memset(fs.buffer,0,MAX_BUFFER_SIZE);
 800296c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002970:	2100      	movs	r1, #0
 8002972:	4805      	ldr	r0, [pc, #20]	@ (8002988 <black_box_load+0x3c>)
 8002974:	f012 fc4c 	bl	8015210 <memset>
      fs.buffer_index = 0;
 8002978:	4b02      	ldr	r3, [pc, #8]	@ (8002984 <black_box_load+0x38>)
 800297a:	2200      	movs	r2, #0
 800297c:	811a      	strh	r2, [r3, #8]
 }
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200001d8 	.word	0x200001d8
 8002988:	200001e2 	.word	0x200001e2
 800298c:	200003e8 	.word	0x200003e8

08002990 <reverse>:




static void reverse( char *str, int len)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80029a4:	e018      	b.n	80029d8 <reverse+0x48>
        temp = str[i];
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	4413      	add	r3, r2
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	441a      	add	r2, r3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	440b      	add	r3, r1
 80029bc:	7812      	ldrb	r2, [r2, #0]
 80029be:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	701a      	strb	r2, [r3, #0]
        i++;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	3301      	adds	r3, #1
 80029d0:	617b      	str	r3, [r7, #20]
        j--;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	429a      	cmp	r2, r3
 80029de:	dbe2      	blt.n	80029a6 <reverse+0x16>
    }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <intToStr>:

 static int intToStr(int x,  char *str, int d)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
    while (x) {
 80029f8:	e01f      	b.n	8002a3a <intToStr+0x4e>
        str[fs.indexx++] = (x % 10) + '0';
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002a78 <intToStr+0x8c>)
 80029fe:	fb83 1302 	smull	r1, r3, r3, r2
 8002a02:	1099      	asrs	r1, r3, #2
 8002a04:	17d3      	asrs	r3, r2, #31
 8002a06:	1ac9      	subs	r1, r1, r3
 8002a08:	460b      	mov	r3, r1
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	1ad1      	subs	r1, r2, r3
 8002a12:	b2ca      	uxtb	r2, r1
 8002a14:	4b19      	ldr	r3, [pc, #100]	@ (8002a7c <intToStr+0x90>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	1c59      	adds	r1, r3, #1
 8002a1a:	4818      	ldr	r0, [pc, #96]	@ (8002a7c <intToStr+0x90>)
 8002a1c:	6001      	str	r1, [r0, #0]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	440b      	add	r3, r1
 8002a24:	3230      	adds	r2, #48	@ 0x30
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a12      	ldr	r2, [pc, #72]	@ (8002a78 <intToStr+0x8c>)
 8002a2e:	fb82 1203 	smull	r1, r2, r2, r3
 8002a32:	1092      	asrs	r2, r2, #2
 8002a34:	17db      	asrs	r3, r3, #31
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	60fb      	str	r3, [r7, #12]
    while (x) {
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1dc      	bne.n	80029fa <intToStr+0xe>
    }

    while (fs.indexx < d)
 8002a40:	e009      	b.n	8002a56 <intToStr+0x6a>
        str[fs.indexx++] = '0';
 8002a42:	4b0e      	ldr	r3, [pc, #56]	@ (8002a7c <intToStr+0x90>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	490c      	ldr	r1, [pc, #48]	@ (8002a7c <intToStr+0x90>)
 8002a4a:	600a      	str	r2, [r1, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4413      	add	r3, r2
 8002a52:	2230      	movs	r2, #48	@ 0x30
 8002a54:	701a      	strb	r2, [r3, #0]
    while (fs.indexx < d)
 8002a56:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <intToStr+0x90>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	dcf0      	bgt.n	8002a42 <intToStr+0x56>
    reverse(str,fs.indexx);
 8002a60:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <intToStr+0x90>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4619      	mov	r1, r3
 8002a66:	68b8      	ldr	r0, [r7, #8]
 8002a68:	f7ff ff92 	bl	8002990 <reverse>
    return fs.indexx;
 8002a6c:	4b03      	ldr	r3, [pc, #12]	@ (8002a7c <intToStr+0x90>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	66666667 	.word	0x66666667
 8002a7c:	200001d8 	.word	0x200001d8

08002a80 <compassInit>:
int8_t file_open;


/*  Init compass
 */
void compassInit(){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  calibrate_value.scale_factor_axis[X] = 1.0f;
 8002a84:	4b17      	ldr	r3, [pc, #92]	@ (8002ae4 <compassInit+0x64>)
 8002a86:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a8a:	60da      	str	r2, [r3, #12]
  calibrate_value.scale_factor_axis[Y] = 1.0f;
 8002a8c:	4b15      	ldr	r3, [pc, #84]	@ (8002ae4 <compassInit+0x64>)
 8002a8e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a92:	611a      	str	r2, [r3, #16]
  calibrate_value.scale_factor_axis[Z] = 1.0f;
 8002a94:	4b13      	ldr	r3, [pc, #76]	@ (8002ae4 <compassInit+0x64>)
 8002a96:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a9a:	615a      	str	r2, [r3, #20]

  calibrate_value.hard_iron_calibrate_value[X] = 0;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <compassInit+0x64>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
  calibrate_value.hard_iron_calibrate_value[Y] = 0;
 8002aa2:	4b10      	ldr	r3, [pc, #64]	@ (8002ae4 <compassInit+0x64>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	605a      	str	r2, [r3, #4]
  calibrate_value.hard_iron_calibrate_value[Z] = 0;
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <compassInit+0x64>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
	
  //file_open = black_box_create_file(&calib_file,file_name);
	 
 // epprom init
  AT24Cxx_init(&device_array, 0x00, &hi2c2);
 8002aae:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae8 <compassInit+0x68>)
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	480e      	ldr	r0, [pc, #56]	@ (8002aec <compassInit+0x6c>)
 8002ab4:	f003 fd14 	bl	80064e0 <AT24Cxx_init>
  AT24Cxx_add_dev(&device_array, 0x01, &hi2c2);
 8002ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8002ae8 <compassInit+0x68>)
 8002aba:	2101      	movs	r1, #1
 8002abc:	480b      	ldr	r0, [pc, #44]	@ (8002aec <compassInit+0x6c>)
 8002abe:	f003 fd4f 	bl	8006560 <AT24Cxx_add_dev>

  // init sensor
#ifdef QMC5883
  qmc5883_init(&hi2c1);
 8002ac2:	480b      	ldr	r0, [pc, #44]	@ (8002af0 <compassInit+0x70>)
 8002ac4:	f7ff fd36 	bl	8002534 <qmc5883_init>
#else
  hmc5883_init(&hi2c2);
#endif
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 8002ac8:	2120      	movs	r1, #32
 8002aca:	480a      	ldr	r0, [pc, #40]	@ (8002af4 <compassInit+0x74>)
 8002acc:	f006 f828 	bl	8008b20 <HAL_GPIO_ReadPin>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <compassInit+0x5c>
      compass_calibrate();
 8002ad6:	f000 f8f3 	bl	8002cc0 <compass_calibrate>
  }
  else{
      read_calibrate_file();
  }
}
 8002ada:	e001      	b.n	8002ae0 <compassInit+0x60>
      read_calibrate_file();
 8002adc:	f000 f87c 	bl	8002bd8 <read_calibrate_file>
}
 8002ae0:	bf00      	nop
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000414 	.word	0x20000414
 8002ae8:	200008e8 	.word	0x200008e8
 8002aec:	200003f0 	.word	0x200003f0
 8002af0:	20000894 	.word	0x20000894
 8002af4:	40010c00 	.word	0x40010c00

08002af8 <compass_get>:

void compass_get(axis3_t *out){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	axis3_t as;
#ifdef QMC5883
         qmc_get_raw(&as);
 8002b00:	f107 0308 	add.w	r3, r7, #8
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fd41 	bl	800258c <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
    // calibrate ouput
	out->x = (as.x - calibrate_value.hard_iron_calibrate_value[X]);
 8002b0a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	4b30      	ldr	r3, [pc, #192]	@ (8002bd4 <compass_get+0xdc>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	b21a      	sxth	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	801a      	strh	r2, [r3, #0]
	out->y = (as.y - calibrate_value.hard_iron_calibrate_value[Y]);
 8002b20:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd4 <compass_get+0xdc>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	b21a      	sxth	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	805a      	strh	r2, [r3, #2]
	out->z = (as.z - calibrate_value.hard_iron_calibrate_value[Z]);
 8002b36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	4b25      	ldr	r3, [pc, #148]	@ (8002bd4 <compass_get+0xdc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	b21a      	sxth	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	809a      	strh	r2, [r3, #4]

    out->x *= calibrate_value.scale_factor_axis[X];
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe f92a 	bl	8000dac <__aeabi_i2f>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd4 <compass_get+0xdc>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4610      	mov	r0, r2
 8002b62:	f7fe f977 	bl	8000e54 <__aeabi_fmul>
 8002b66:	4603      	mov	r3, r0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fb4f 	bl	800120c <__aeabi_f2iz>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	b21a      	sxth	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	801a      	strh	r2, [r3, #0]
    out->y *= calibrate_value.scale_factor_axis[Y];
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe f915 	bl	8000dac <__aeabi_i2f>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b13      	ldr	r3, [pc, #76]	@ (8002bd4 <compass_get+0xdc>)
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f7fe f962 	bl	8000e54 <__aeabi_fmul>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe fb3a 	bl	800120c <__aeabi_f2iz>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	b21a      	sxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	805a      	strh	r2, [r3, #2]
    out->z *= calibrate_value.scale_factor_axis[Z];
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe f900 	bl	8000dac <__aeabi_i2f>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <compass_get+0xdc>)
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	f7fe f94d 	bl	8000e54 <__aeabi_fmul>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe fb25 	bl	800120c <__aeabi_f2iz>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	b21a      	sxth	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	809a      	strh	r2, [r3, #4]
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000414 	.word	0x20000414

08002bd8 <read_calibrate_file>:

/* read calibrate data from eprrom
 * 
 */

void read_calibrate_file(){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
	int32_t sum_all = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
    AT24Cxx_read_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_value,0x0010,sizeof(cali_mag_t));
 8002be2:	4b33      	ldr	r3, [pc, #204]	@ (8002cb0 <read_calibrate_file+0xd8>)
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	231c      	movs	r3, #28
 8002be8:	2210      	movs	r2, #16
 8002bea:	4932      	ldr	r1, [pc, #200]	@ (8002cb4 <read_calibrate_file+0xdc>)
 8002bec:	f003 fe11 	bl	8006812 <AT24Cxx_read_byte_buffer>
   	sum_all += calibrate_value.scale_factor_axis[X];
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7fe f8db 	bl	8000dac <__aeabi_i2f>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb4 <read_calibrate_file+0xdc>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f7fe f820 	bl	8000c44 <__addsf3>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe fb00 	bl	800120c <__aeabi_f2iz>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Y];
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7fe f8cb 	bl	8000dac <__aeabi_i2f>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b26      	ldr	r3, [pc, #152]	@ (8002cb4 <read_calibrate_file+0xdc>)
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f7fe f810 	bl	8000c44 <__addsf3>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe faf0 	bl	800120c <__aeabi_f2iz>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Z];
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7fe f8bb 	bl	8000dac <__aeabi_i2f>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb4 <read_calibrate_file+0xdc>)
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f7fe f800 	bl	8000c44 <__addsf3>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fae0 	bl	800120c <__aeabi_f2iz>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	607b      	str	r3, [r7, #4]

    sum_all += (int)calibrate_value.hard_iron_calibrate_value[X];
 8002c50:	4b18      	ldr	r3, [pc, #96]	@ (8002cb4 <read_calibrate_file+0xdc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	4413      	add	r3, r2
 8002c58:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Y];
 8002c5a:	4b16      	ldr	r3, [pc, #88]	@ (8002cb4 <read_calibrate_file+0xdc>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Z];
 8002c64:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <read_calibrate_file+0xdc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	607b      	str	r3, [r7, #4]

    if(ABS(sum_all - (int)calibrate_value.sum_all_value) > 40){
 8002c6e:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <read_calibrate_file+0xdc>)
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bfb8      	it	lt
 8002c7e:	425b      	neglt	r3, r3
 8002c80:	2b28      	cmp	r3, #40	@ 0x28
 8002c82:	dd11      	ble.n	8002ca8 <read_calibrate_file+0xd0>
      while(1){
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002c84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c88:	480b      	ldr	r0, [pc, #44]	@ (8002cb8 <read_calibrate_file+0xe0>)
 8002c8a:	f005 ff78 	bl	8008b7e <HAL_GPIO_TogglePin>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002c8e:	2120      	movs	r1, #32
 8002c90:	480a      	ldr	r0, [pc, #40]	@ (8002cbc <read_calibrate_file+0xe4>)
 8002c92:	f005 ff74 	bl	8008b7e <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002c96:	2110      	movs	r1, #16
 8002c98:	4808      	ldr	r0, [pc, #32]	@ (8002cbc <read_calibrate_file+0xe4>)
 8002c9a:	f005 ff70 	bl	8008b7e <HAL_GPIO_TogglePin>
       HAL_Delay(50); // 10 Hz loop
 8002c9e:	2032      	movs	r0, #50	@ 0x32
 8002ca0:	f005 f822 	bl	8007ce8 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002ca4:	bf00      	nop
 8002ca6:	e7ed      	b.n	8002c84 <read_calibrate_file+0xac>
      }
    }
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	200003f0 	.word	0x200003f0
 8002cb4:	20000414 	.word	0x20000414
 8002cb8:	40011000 	.word	0x40011000
 8002cbc:	40010800 	.word	0x40010800

08002cc0 <compass_calibrate>:


/* Calibrate function
 * write calibrate value to sd card
 */
static void compass_calibrate(){
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b095      	sub	sp, #84	@ 0x54
 8002cc4:	af00      	add	r7, sp, #0
    int16_t max_val[] = {-32767,-32767,-32767};
 8002cc6:	4a9f      	ldr	r2, [pc, #636]	@ (8002f44 <compass_calibrate+0x284>)
 8002cc8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ccc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cd0:	6018      	str	r0, [r3, #0]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	8019      	strh	r1, [r3, #0]
    int16_t min_val[] = {32767, 32767, 32767};
 8002cd6:	4a9c      	ldr	r2, [pc, #624]	@ (8002f48 <compass_calibrate+0x288>)
 8002cd8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002cdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ce0:	6018      	str	r0, [r3, #0]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	8019      	strh	r1, [r3, #0]
    uint8_t fist_data = TRUE;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    cali_mag_t calibrate_temp;
    ignore_data = 0;
 8002cec:	4b97      	ldr	r3, [pc, #604]	@ (8002f4c <compass_calibrate+0x28c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	801a      	strh	r2, [r3, #0]
    int16_t last_axis[3];
    axis3_t as;

	while(!file_open){
 8002cf2:	e0b5      	b.n	8002e60 <compass_calibrate+0x1a0>
 // read data from sensor
#ifdef QMC5883
         qmc_get_raw(&as);
 8002cf4:	1d3b      	adds	r3, r7, #4
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fc48 	bl	800258c <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
        if(fist_data){
 8002cfc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00c      	beq.n	8002d1e <compass_calibrate+0x5e>
          last_axis[X] = as.x;
 8002d04:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d08:	81bb      	strh	r3, [r7, #12]
          last_axis[Y] = as.y;
 8002d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d0e:	81fb      	strh	r3, [r7, #14]
          last_axis[Z] = as.z;
 8002d10:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d14:	823b      	strh	r3, [r7, #16]
          fist_data = FALSE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          continue;
 8002d1c:	e0a0      	b.n	8002e60 <compass_calibrate+0x1a0>
        }
        int16_t delta_x_ = as.x -  last_axis[X];
 8002d1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        int16_t delta_y_ = as.y -  last_axis[Y];
 8002d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        int16_t delta_z_ = as.z -  last_axis[Z];
 8002d46:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        // ignore wrong value and set to zero
        int16_t ckec = sqrt(sq(delta_x_) + sq(delta_y_) + sq(delta_z_));
 8002d5a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002d5e:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8002d62:	fb03 f202 	mul.w	r2, r3, r2
 8002d66:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8002d6a:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	@ 0x48
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	441a      	add	r2, r3
 8002d74:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002d78:	f9b7 1046 	ldrsh.w	r1, [r7, #70]	@ 0x46
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fba6 	bl	80004d4 <__aeabi_i2d>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f012 fa90 	bl	80152b4 <sqrt>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f7fd feb4 	bl	8000b08 <__aeabi_d2iz>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        if(ckec > max_change){
 8002da6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002daa:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8002dae:	4293      	cmp	r3, r2
 8002db0:	dd09      	ble.n	8002dc6 <compass_calibrate+0x106>
            fist_data = TRUE; 
 8002db2:	2301      	movs	r3, #1
 8002db4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            ignore_data ++;
 8002db8:	4b64      	ldr	r3, [pc, #400]	@ (8002f4c <compass_calibrate+0x28c>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	4b62      	ldr	r3, [pc, #392]	@ (8002f4c <compass_calibrate+0x28c>)
 8002dc2:	801a      	strh	r2, [r3, #0]
            continue;
 8002dc4:	e04c      	b.n	8002e60 <compass_calibrate+0x1a0>
        }
        last_axis[X] = as.x;
 8002dc6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002dca:	81bb      	strh	r3, [r7, #12]
        last_axis[Y] = as.y;
 8002dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dd0:	81fb      	strh	r3, [r7, #14]
        last_axis[Z] = as.z;
 8002dd2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002dd6:	823b      	strh	r3, [r7, #16]
        // get max value each axis
        if(as.x > max_val[X]) max_val[X] = as.x;
 8002dd8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002ddc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002de0:	429a      	cmp	r2, r3
 8002de2:	dd02      	ble.n	8002dea <compass_calibrate+0x12a>
 8002de4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002de8:	873b      	strh	r3, [r7, #56]	@ 0x38
        if(as.y > max_val[Y]) max_val[Y] = as.y;
 8002dea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002dee:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002df2:	429a      	cmp	r2, r3
 8002df4:	dd02      	ble.n	8002dfc <compass_calibrate+0x13c>
 8002df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dfa:	877b      	strh	r3, [r7, #58]	@ 0x3a
        if(as.z > max_val[Z]) max_val[Z] = as.z;
 8002dfc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e00:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002e04:	429a      	cmp	r2, r3
 8002e06:	dd02      	ble.n	8002e0e <compass_calibrate+0x14e>
 8002e08:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002e0c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

        // min value
        if(as.x < min_val[X]) min_val[X] = as.x;
 8002e0e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002e12:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002e16:	429a      	cmp	r2, r3
 8002e18:	da02      	bge.n	8002e20 <compass_calibrate+0x160>
 8002e1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e1e:	863b      	strh	r3, [r7, #48]	@ 0x30
        if(as.y < min_val[Y]) min_val[Y] = as.y;
 8002e20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e24:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	da02      	bge.n	8002e32 <compass_calibrate+0x172>
 8002e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e30:	867b      	strh	r3, [r7, #50]	@ 0x32
        if(as.z < min_val[Z]) min_val[Z] = as.z;
 8002e32:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e36:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	da02      	bge.n	8002e44 <compass_calibrate+0x184>
 8002e3e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002e42:	86bb      	strh	r3, [r7, #52]	@ 0x34
        black_box_pack_str(&calib_file,"\n");
		
		black_box_load(&calib_file);
        black_box_sync(&calib_file);
        */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002e44:	2110      	movs	r1, #16
 8002e46:	4842      	ldr	r0, [pc, #264]	@ (8002f50 <compass_calibrate+0x290>)
 8002e48:	f005 fe99 	bl	8008b7e <HAL_GPIO_TogglePin>
        HAL_Delay(20); // 10 Hz loop
 8002e4c:	2014      	movs	r0, #20
 8002e4e:	f004 ff4b 	bl	8007ce8 <HAL_Delay>

       if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5) == 0){
 8002e52:	2120      	movs	r1, #32
 8002e54:	483f      	ldr	r0, [pc, #252]	@ (8002f54 <compass_calibrate+0x294>)
 8002e56:	f005 fe63 	bl	8008b20 <HAL_GPIO_ReadPin>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d006      	beq.n	8002e6e <compass_calibrate+0x1ae>
	while(!file_open){
 8002e60:	4b3d      	ldr	r3, [pc, #244]	@ (8002f58 <compass_calibrate+0x298>)
 8002e62:	f993 3000 	ldrsb.w	r3, [r3]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f43f af44 	beq.w	8002cf4 <compass_calibrate+0x34>
 8002e6c:	e000      	b.n	8002e70 <compass_calibrate+0x1b0>
              break;
 8002e6e:	bf00      	nop
          }
	  }

    // check all min value is negative sign
    if(min_val[X] > 0 || min_val[Y] > 0 || min_val[Z] > 0){
 8002e70:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	dc02      	bgt.n	8002e7e <compass_calibrate+0x1be>
 8002e78:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002e7c:	2b00      	cmp	r3, #0
          // error
    }
    // check all max value is positive sign
    if(max_val[X] < 0 || max_val[Y] < 0 || max_val[Z] < 0){
 8002e7e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db02      	blt.n	8002e8c <compass_calibrate+0x1cc>
 8002e86:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002e8a:	2b00      	cmp	r3, #0
          // error
    }
    // calibrate value for each axis
    calibrate_temp.hard_iron_calibrate_value[X] = (int)(max_val[X] + min_val[X])/2;
 8002e8c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002e90:	461a      	mov	r2, r3
 8002e92:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002e96:	4413      	add	r3, r2
 8002e98:	0fda      	lsrs	r2, r3, #31
 8002e9a:	4413      	add	r3, r2
 8002e9c:	105b      	asrs	r3, r3, #1
 8002e9e:	617b      	str	r3, [r7, #20]
    calibrate_temp.hard_iron_calibrate_value[Y] = (int)(max_val[Y] + min_val[Y])/2;
 8002ea0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002eaa:	4413      	add	r3, r2
 8002eac:	0fda      	lsrs	r2, r3, #31
 8002eae:	4413      	add	r3, r2
 8002eb0:	105b      	asrs	r3, r3, #1
 8002eb2:	61bb      	str	r3, [r7, #24]
    calibrate_temp.hard_iron_calibrate_value[Z] = (int)(max_val[Z] + min_val[Z])/2;
 8002eb4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002ebe:	4413      	add	r3, r2
 8002ec0:	0fda      	lsrs	r2, r3, #31
 8002ec2:	4413      	add	r3, r2
 8002ec4:	105b      	asrs	r3, r3, #1
 8002ec6:	61fb      	str	r3, [r7, #28]

    // calculate scale factor for each axis
    int16_t x_ = abs(max_val[X]) + abs(min_val[X]);
 8002ec8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bfb8      	it	lt
 8002ed0:	425b      	neglt	r3, r3
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bfb8      	it	lt
 8002edc:	425b      	neglt	r3, r3
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t y_ = abs(max_val[Y]) + abs(min_val[Y]);
 8002ee8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bfb8      	it	lt
 8002ef0:	425b      	neglt	r3, r3
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bfb8      	it	lt
 8002efc:	425b      	neglt	r3, r3
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    int16_t z_ = abs(max_val[Z]) + abs(min_val[Z]);
 8002f08:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bfb8      	it	lt
 8002f10:	425b      	neglt	r3, r3
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bfb8      	it	lt
 8002f1c:	425b      	neglt	r3, r3
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    // get largest value
    int16_t max_value = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(x_ > y_)
 8002f2c:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8002f30:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8002f34:	429a      	cmp	r2, r3
 8002f36:	dd11      	ble.n	8002f5c <compass_calibrate+0x29c>
        max_value = x_;
 8002f38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002f3c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8002f40:	e010      	b.n	8002f64 <compass_calibrate+0x2a4>
 8002f42:	bf00      	nop
 8002f44:	08015e28 	.word	0x08015e28
 8002f48:	08015e30 	.word	0x08015e30
 8002f4c:	200003ec 	.word	0x200003ec
 8002f50:	40010800 	.word	0x40010800
 8002f54:	40010c00 	.word	0x40010c00
 8002f58:	20000430 	.word	0x20000430
    else
        max_value = y_;
 8002f5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f60:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(max_value < z_)
 8002f64:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 8002f68:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	da02      	bge.n	8002f76 <compass_calibrate+0x2b6>
        max_value = z_;
 8002f70:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002f72:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

    // caculate scale
    calibrate_temp.scale_factor_axis[X] = (float)x_/max_value;
 8002f76:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd ff16 	bl	8000dac <__aeabi_i2f>
 8002f80:	4604      	mov	r4, r0
 8002f82:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd ff10 	bl	8000dac <__aeabi_i2f>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4620      	mov	r0, r4
 8002f92:	f7fe f813 	bl	8000fbc <__aeabi_fdiv>
 8002f96:	4603      	mov	r3, r0
 8002f98:	623b      	str	r3, [r7, #32]
    calibrate_temp.scale_factor_axis[Y] = (float)y_/max_value;
 8002f9a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd ff04 	bl	8000dac <__aeabi_i2f>
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd fefe 	bl	8000dac <__aeabi_i2f>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f7fe f801 	bl	8000fbc <__aeabi_fdiv>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    calibrate_temp.scale_factor_axis[Z] = (float)z_/max_value;
 8002fbe:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fef2 	bl	8000dac <__aeabi_i2f>
 8002fc8:	4604      	mov	r4, r0
 8002fca:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd feec 	bl	8000dac <__aeabi_i2f>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f7fd ffef 	bl	8000fbc <__aeabi_fdiv>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	62bb      	str	r3, [r7, #40]	@ 0x28

    calibrate_temp.sum_all_value = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[X];
 8002fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fedf 	bl	8000dac <__aeabi_i2f>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	f7fd fe25 	bl	8000c44 <__addsf3>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fe f905 	bl	800120c <__aeabi_f2iz>
 8003002:	4603      	mov	r3, r0
 8003004:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Y];
 8003006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fecf 	bl	8000dac <__aeabi_i2f>
 800300e:	4602      	mov	r2, r0
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	4619      	mov	r1, r3
 8003014:	4610      	mov	r0, r2
 8003016:	f7fd fe15 	bl	8000c44 <__addsf3>
 800301a:	4603      	mov	r3, r0
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe f8f5 	bl	800120c <__aeabi_f2iz>
 8003022:	4603      	mov	r3, r0
 8003024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Z];
 8003026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd febf 	bl	8000dac <__aeabi_i2f>
 800302e:	4602      	mov	r2, r0
 8003030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003032:	4619      	mov	r1, r3
 8003034:	4610      	mov	r0, r2
 8003036:	f7fd fe05 	bl	8000c44 <__addsf3>
 800303a:	4603      	mov	r3, r0
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe f8e5 	bl	800120c <__aeabi_f2iz>
 8003042:	4603      	mov	r3, r0
 8003044:	62fb      	str	r3, [r7, #44]	@ 0x2c

    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[X];
 8003046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	4413      	add	r3, r2
 800304c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Y];
 800304e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	4413      	add	r3, r2
 8003054:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Z];
 8003056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	4413      	add	r3, r2
 800305c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // write data to eprrom
    AT24Cxx_write_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_temp, 0x0010, sizeof(cali_mag_t));
 800305e:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <compass_calibrate+0x3c4>)
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	f107 0114 	add.w	r1, r7, #20
 8003066:	231c      	movs	r3, #28
 8003068:	2210      	movs	r2, #16
 800306a:	f003 fad0 	bl	800660e <AT24Cxx_write_byte_buffer>
  
   // black_box_load(&calib_file);
   // black_box_close(&calib_file);
	
	while(1){
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800306e:	2120      	movs	r1, #32
 8003070:	4805      	ldr	r0, [pc, #20]	@ (8003088 <compass_calibrate+0x3c8>)
 8003072:	f005 fd84 	bl	8008b7e <HAL_GPIO_TogglePin>
      HAL_Delay(1000); // 10 Hz loop
 8003076:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800307a:	f004 fe35 	bl	8007ce8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800307e:	bf00      	nop
 8003080:	e7f5      	b.n	800306e <compass_calibrate+0x3ae>
 8003082:	bf00      	nop
 8003084:	200003f0 	.word	0x200003f0
 8003088:	40010800 	.word	0x40010800

0800308c <gps_init>:

/*  
 * Init function 
 */
void gps_init(UART_HandleTypeDef *uart,uint32_t baudrate)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
    terrain_altitude = 0;
 8003096:	4b2a      	ldr	r3, [pc, #168]	@ (8003140 <gps_init+0xb4>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
    gps_alt_zero_calibrate = FALSE;
 800309c:	4b29      	ldr	r3, [pc, #164]	@ (8003144 <gps_init+0xb8>)
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
	_gpsUartPort = uart;
 80030a2:	4a29      	ldr	r2, [pc, #164]	@ (8003148 <gps_init+0xbc>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6013      	str	r3, [r2, #0]
    _gps.timer_ = millis();
 80030a8:	4b28      	ldr	r3, [pc, #160]	@ (800314c <gps_init+0xc0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030b0:	4b27      	ldr	r3, [pc, #156]	@ (8003150 <gps_init+0xc4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4413      	add	r3, r2
 80030b6:	4a27      	ldr	r2, [pc, #156]	@ (8003154 <gps_init+0xc8>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	099b      	lsrs	r3, r3, #6
 80030be:	4a26      	ldr	r2, [pc, #152]	@ (8003158 <gps_init+0xcc>)
 80030c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    // reset all viriables
    _payload_length = 0;
 80030c2:	4b26      	ldr	r3, [pc, #152]	@ (800315c <gps_init+0xd0>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	801a      	strh	r2, [r3, #0]
    _payload_counter = 0;
 80030c8:	4b25      	ldr	r3, [pc, #148]	@ (8003160 <gps_init+0xd4>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	801a      	strh	r2, [r3, #0]
    _msg_id = 0;
 80030ce:	4b25      	ldr	r3, [pc, #148]	@ (8003164 <gps_init+0xd8>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]

    // Configuration _gps module
    HAL_UART_Transmit(_gpsUartPort,ubloxInit,sizeof(ubloxInit),1000);
 80030d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003148 <gps_init+0xbc>)
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030dc:	22a8      	movs	r2, #168	@ 0xa8
 80030de:	4922      	ldr	r1, [pc, #136]	@ (8003168 <gps_init+0xdc>)
 80030e0:	f009 ff96 	bl	800d010 <HAL_UART_Transmit>
    HAL_Delay(10);
 80030e4:	200a      	movs	r0, #10
 80030e6:	f004 fdff 	bl	8007ce8 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,ubloxSbasInit,sizeof(ubloxSbasInit),1000);
 80030ea:	4b17      	ldr	r3, [pc, #92]	@ (8003148 <gps_init+0xbc>)
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030f2:	2210      	movs	r2, #16
 80030f4:	491d      	ldr	r1, [pc, #116]	@ (800316c <gps_init+0xe0>)
 80030f6:	f009 ff8b 	bl	800d010 <HAL_UART_Transmit>
    HAL_Delay(10);
 80030fa:	200a      	movs	r0, #10
 80030fc:	f004 fdf4 	bl	8007ce8 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,uart57600,sizeof(uart57600),1000);
 8003100:	4b11      	ldr	r3, [pc, #68]	@ (8003148 <gps_init+0xbc>)
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003108:	221c      	movs	r2, #28
 800310a:	4919      	ldr	r1, [pc, #100]	@ (8003170 <gps_init+0xe4>)
 800310c:	f009 ff80 	bl	800d010 <HAL_UART_Transmit>
    HAL_Delay(10);
 8003110:	200a      	movs	r0, #10
 8003112:	f004 fde9 	bl	8007ce8 <HAL_Delay>
    // set baudrate
    _gpsUartPort->Init.BaudRate = baudrate;
 8003116:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <gps_init+0xbc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(_gpsUartPort); 
 800311e:	4b0a      	ldr	r3, [pc, #40]	@ (8003148 <gps_init+0xbc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f009 ff24 	bl	800cf70 <HAL_UART_Init>

    // read gps using interrup
	HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 8003128:	4b07      	ldr	r3, [pc, #28]	@ (8003148 <gps_init+0xbc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	4911      	ldr	r1, [pc, #68]	@ (8003174 <gps_init+0xe8>)
 8003130:	4618      	mov	r0, r3
 8003132:	f009 fff0 	bl	800d116 <HAL_UART_Receive_IT>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000484 	.word	0x20000484
 8003144:	20000488 	.word	0x20000488
 8003148:	20000470 	.word	0x20000470
 800314c:	200005ec 	.word	0x200005ec
 8003150:	200005f0 	.word	0x200005f0
 8003154:	10624dd3 	.word	0x10624dd3
 8003158:	20000434 	.word	0x20000434
 800315c:	2000047e 	.word	0x2000047e
 8003160:	20000480 	.word	0x20000480
 8003164:	2000047c 	.word	0x2000047c
 8003168:	08015fa4 	.word	0x08015fa4
 800316c:	20000000 	.word	0x20000000
 8003170:	0801604c 	.word	0x0801604c
 8003174:	20000474 	.word	0x20000474

08003178 <gps_uart_port>:

UART_HandleTypeDef *gps_uart_port(){
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
    return _gpsUartPort;
 800317c:	4b02      	ldr	r3, [pc, #8]	@ (8003188 <gps_uart_port+0x10>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	20000470 	.word	0x20000470

0800318c <gps_callback>:

}

uint32_t gps_interrupt_count;
void gps_callback()
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
   // parse data
   gps_interrupt_count++;
 8003190:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <gps_callback+0x2c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	4a08      	ldr	r2, [pc, #32]	@ (80031b8 <gps_callback+0x2c>)
 8003198:	6013      	str	r3, [r2, #0]
   newdata(_char);
 800319a:	4b08      	ldr	r3, [pc, #32]	@ (80031bc <gps_callback+0x30>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f916 	bl	80033d0 <newdata>
   HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 80031a4:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <gps_callback+0x34>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2201      	movs	r2, #1
 80031aa:	4904      	ldr	r1, [pc, #16]	@ (80031bc <gps_callback+0x30>)
 80031ac:	4618      	mov	r0, r3
 80031ae:	f009 ffb2 	bl	800d116 <HAL_UART_Receive_IT>
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000554 	.word	0x20000554
 80031bc:	20000474 	.word	0x20000474
 80031c0:	20000470 	.word	0x20000470

080031c4 <parse_msg>:
        *ck_b += *ck_a;
        data++;
    }
}
*/
static uint8_t parse_msg(){
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
    static uint8_t _new_speed;
    //static uint8_t next_fix;
    static uint32_t lastPosUpdateTime;
    static uint8_t _new_position;
    static uint8_t gps_cali_count = 0;
    switch (_msg_id) {
 80031c8:	4b74      	ldr	r3, [pc, #464]	@ (800339c <parse_msg+0x1d8>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b12      	cmp	r3, #18
 80031ce:	dc2b      	bgt.n	8003228 <parse_msg+0x64>
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	f2c0 80c7 	blt.w	8003364 <parse_msg+0x1a0>
 80031d6:	3b02      	subs	r3, #2
 80031d8:	2b10      	cmp	r3, #16
 80031da:	f200 80c3 	bhi.w	8003364 <parse_msg+0x1a0>
 80031de:	a201      	add	r2, pc, #4	@ (adr r2, 80031e4 <parse_msg+0x20>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	08003231 	.word	0x08003231
 80031e8:	080032f9 	.word	0x080032f9
 80031ec:	08003365 	.word	0x08003365
 80031f0:	08003365 	.word	0x08003365
 80031f4:	08003305 	.word	0x08003305
 80031f8:	08003365 	.word	0x08003365
 80031fc:	08003365 	.word	0x08003365
 8003200:	08003365 	.word	0x08003365
 8003204:	08003365 	.word	0x08003365
 8003208:	08003365 	.word	0x08003365
 800320c:	08003365 	.word	0x08003365
 8003210:	08003365 	.word	0x08003365
 8003214:	08003365 	.word	0x08003365
 8003218:	08003365 	.word	0x08003365
 800321c:	08003365 	.word	0x08003365
 8003220:	08003365 	.word	0x08003365
 8003224:	0800331d 	.word	0x0800331d
 8003228:	2b30      	cmp	r3, #48	@ 0x30
 800322a:	f000 809d 	beq.w	8003368 <parse_msg+0x1a4>
 800322e:	e099      	b.n	8003364 <parse_msg+0x1a0>
        case MSG_POSLLH:
            _gps.position[LON] = _buffer.posllh.longitude;
 8003230:	4b5b      	ldr	r3, [pc, #364]	@ (80033a0 <parse_msg+0x1dc>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a5b      	ldr	r2, [pc, #364]	@ (80033a4 <parse_msg+0x1e0>)
 8003236:	6013      	str	r3, [r2, #0]
            _gps.position[LAT] = _buffer.posllh.latitude;
 8003238:	4b59      	ldr	r3, [pc, #356]	@ (80033a0 <parse_msg+0x1dc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4a59      	ldr	r2, [pc, #356]	@ (80033a4 <parse_msg+0x1e0>)
 800323e:	6053      	str	r3, [r2, #4]
            if(gps_alt_zero_calibrate == FALSE){
 8003240:	4b59      	ldr	r3, [pc, #356]	@ (80033a8 <parse_msg+0x1e4>)
 8003242:	f993 3000 	ldrsb.w	r3, [r3]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d115      	bne.n	8003276 <parse_msg+0xb2>
                if(gps_cali_count < 20){
 800324a:	4b58      	ldr	r3, [pc, #352]	@ (80033ac <parse_msg+0x1e8>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b13      	cmp	r3, #19
 8003250:	d80d      	bhi.n	800326e <parse_msg+0xaa>
                    terrain_altitude += _buffer.posllh.altitude_msl;
 8003252:	4b53      	ldr	r3, [pc, #332]	@ (80033a0 <parse_msg+0x1dc>)
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	4b56      	ldr	r3, [pc, #344]	@ (80033b0 <parse_msg+0x1ec>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4413      	add	r3, r2
 800325c:	4a54      	ldr	r2, [pc, #336]	@ (80033b0 <parse_msg+0x1ec>)
 800325e:	6013      	str	r3, [r2, #0]
                    gps_cali_count ++;
 8003260:	4b52      	ldr	r3, [pc, #328]	@ (80033ac <parse_msg+0x1e8>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	3301      	adds	r3, #1
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b50      	ldr	r3, [pc, #320]	@ (80033ac <parse_msg+0x1e8>)
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	e010      	b.n	8003290 <parse_msg+0xcc>
                }
                else{
                    gps_alt_zero_calibrate = TRUE;
 800326e:	4b4e      	ldr	r3, [pc, #312]	@ (80033a8 <parse_msg+0x1e4>)
 8003270:	2201      	movs	r2, #1
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	e00c      	b.n	8003290 <parse_msg+0xcc>
                }
            }
            else{
               _gps.altitude_mgl = _buffer.posllh.altitude_msl - terrain_altitude/20; 
 8003276:	4b4a      	ldr	r3, [pc, #296]	@ (80033a0 <parse_msg+0x1dc>)
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	4b4d      	ldr	r3, [pc, #308]	@ (80033b0 <parse_msg+0x1ec>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	494d      	ldr	r1, [pc, #308]	@ (80033b4 <parse_msg+0x1f0>)
 8003280:	fb81 0103 	smull	r0, r1, r1, r3
 8003284:	10c9      	asrs	r1, r1, #3
 8003286:	17db      	asrs	r3, r3, #31
 8003288:	1a5b      	subs	r3, r3, r1
 800328a:	4413      	add	r3, r2
 800328c:	4a45      	ldr	r2, [pc, #276]	@ (80033a4 <parse_msg+0x1e0>)
 800328e:	6353      	str	r3, [r2, #52]	@ 0x34
            }
            _gps.altitude_msl = _buffer.posllh.altitude_msl - terrain_altitude; 
 8003290:	4b43      	ldr	r3, [pc, #268]	@ (80033a0 <parse_msg+0x1dc>)
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	4b46      	ldr	r3, [pc, #280]	@ (80033b0 <parse_msg+0x1ec>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	4a42      	ldr	r2, [pc, #264]	@ (80033a4 <parse_msg+0x1e0>)
 800329c:	6313      	str	r3, [r2, #48]	@ 0x30
            _gps.horizontalAccuracy = _buffer.posllh.horizontal_accuracy;
 800329e:	4b40      	ldr	r3, [pc, #256]	@ (80033a0 <parse_msg+0x1dc>)
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	4a40      	ldr	r2, [pc, #256]	@ (80033a4 <parse_msg+0x1e0>)
 80032a4:	6213      	str	r3, [r2, #32]
            _gps.VerticalAccuracy = _buffer.posllh.vertical_accuracy;
 80032a6:	4b3e      	ldr	r3, [pc, #248]	@ (80033a0 <parse_msg+0x1dc>)
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	4a3e      	ldr	r2, [pc, #248]	@ (80033a4 <parse_msg+0x1e0>)
 80032ac:	6253      	str	r3, [r2, #36]	@ 0x24
            /* time update position */
            if(lastPosUpdateTime == 0){
 80032ae:	4b42      	ldr	r3, [pc, #264]	@ (80033b8 <parse_msg+0x1f4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d05a      	beq.n	800336c <parse_msg+0x1a8>
                break;
                lastPosUpdateTime = millis();
            }
            _gps.posUpdateTime = millis() - lastPosUpdateTime;
 80032b6:	4b41      	ldr	r3, [pc, #260]	@ (80033bc <parse_msg+0x1f8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032be:	4b40      	ldr	r3, [pc, #256]	@ (80033c0 <parse_msg+0x1fc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4413      	add	r3, r2
 80032c4:	4a3f      	ldr	r2, [pc, #252]	@ (80033c4 <parse_msg+0x200>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	099a      	lsrs	r2, r3, #6
 80032cc:	4b3a      	ldr	r3, [pc, #232]	@ (80033b8 <parse_msg+0x1f4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	4a34      	ldr	r2, [pc, #208]	@ (80033a4 <parse_msg+0x1e0>)
 80032d4:	6293      	str	r3, [r2, #40]	@ 0x28
            lastPosUpdateTime = millis();
 80032d6:	4b39      	ldr	r3, [pc, #228]	@ (80033bc <parse_msg+0x1f8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032de:	4b38      	ldr	r3, [pc, #224]	@ (80033c0 <parse_msg+0x1fc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4413      	add	r3, r2
 80032e4:	4a37      	ldr	r2, [pc, #220]	@ (80033c4 <parse_msg+0x200>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	099b      	lsrs	r3, r3, #6
 80032ec:	4a32      	ldr	r2, [pc, #200]	@ (80033b8 <parse_msg+0x1f4>)
 80032ee:	6013      	str	r3, [r2, #0]
            /* flag set */
            _new_position = TRUE;
 80032f0:	4b35      	ldr	r3, [pc, #212]	@ (80033c8 <parse_msg+0x204>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
            break;
 80032f6:	e03a      	b.n	800336e <parse_msg+0x1aa>
        case MSG_STATUS:
            //next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type == FIX_3D);
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.status.fix_type;
 80032f8:	4b29      	ldr	r3, [pc, #164]	@ (80033a0 <parse_msg+0x1dc>)
 80032fa:	791a      	ldrb	r2, [r3, #4]
 80032fc:	4b29      	ldr	r3, [pc, #164]	@ (80033a4 <parse_msg+0x1e0>)
 80032fe:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            break;
 8003302:	e034      	b.n	800336e <parse_msg+0x1aa>
        case MSG_SOL:
            //next_fix = (_buffer.solution.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.solution.fix_type == FIX_3D);
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.solution.fix_type;
 8003304:	4b26      	ldr	r3, [pc, #152]	@ (80033a0 <parse_msg+0x1dc>)
 8003306:	7a9a      	ldrb	r2, [r3, #10]
 8003308:	4b26      	ldr	r3, [pc, #152]	@ (80033a4 <parse_msg+0x1e0>)
 800330a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            _gps.numSat = _buffer.solution.satellites;
 800330e:	4b24      	ldr	r3, [pc, #144]	@ (80033a0 <parse_msg+0x1dc>)
 8003310:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8003314:	4b23      	ldr	r3, [pc, #140]	@ (80033a4 <parse_msg+0x1e0>)
 8003316:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            break;
 800331a:	e028      	b.n	800336e <parse_msg+0x1aa>
        case MSG_VELNED:
            _gps.velocity[LAT] = _buffer.velned.ned_north;
 800331c:	4b20      	ldr	r3, [pc, #128]	@ (80033a0 <parse_msg+0x1dc>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a20      	ldr	r2, [pc, #128]	@ (80033a4 <parse_msg+0x1e0>)
 8003322:	60d3      	str	r3, [r2, #12]
            _gps.velocity[LON] = _buffer.velned.ned_east;
 8003324:	4b1e      	ldr	r3, [pc, #120]	@ (80033a0 <parse_msg+0x1dc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a1e      	ldr	r2, [pc, #120]	@ (80033a4 <parse_msg+0x1e0>)
 800332a:	6093      	str	r3, [r2, #8]
            _gps.velocity[DOWN] = _buffer.velned.ned_down;
 800332c:	4b1c      	ldr	r3, [pc, #112]	@ (80033a0 <parse_msg+0x1dc>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a1c      	ldr	r2, [pc, #112]	@ (80033a4 <parse_msg+0x1e0>)
 8003332:	6113      	str	r3, [r2, #16]
            _gps.Gspeed = _buffer.velned.speed_2d;
 8003334:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <parse_msg+0x1dc>)
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	461a      	mov	r2, r3
 800333a:	4b1a      	ldr	r3, [pc, #104]	@ (80033a4 <parse_msg+0x1e0>)
 800333c:	615a      	str	r2, [r3, #20]
            _gps.ground_course = _buffer.velned.heading_2d;
 800333e:	4b18      	ldr	r3, [pc, #96]	@ (80033a0 <parse_msg+0x1dc>)
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	b29a      	uxth	r2, r3
 8003344:	4b17      	ldr	r3, [pc, #92]	@ (80033a4 <parse_msg+0x1e0>)
 8003346:	871a      	strh	r2, [r3, #56]	@ 0x38
            _gps.speedAccuracy = _buffer.velned.speed_accuracy;
 8003348:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <parse_msg+0x1dc>)
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	461a      	mov	r2, r3
 800334e:	4b15      	ldr	r3, [pc, #84]	@ (80033a4 <parse_msg+0x1e0>)
 8003350:	619a      	str	r2, [r3, #24]
            _gps.headingAccuracy = _buffer.velned.heading_accuracy;
 8003352:	4b13      	ldr	r3, [pc, #76]	@ (80033a0 <parse_msg+0x1dc>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	461a      	mov	r2, r3
 8003358:	4b12      	ldr	r3, [pc, #72]	@ (80033a4 <parse_msg+0x1e0>)
 800335a:	61da      	str	r2, [r3, #28]
            _new_speed = TRUE;
 800335c:	4b1b      	ldr	r3, [pc, #108]	@ (80033cc <parse_msg+0x208>)
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]
            break;
 8003362:	e004      	b.n	800336e <parse_msg+0x1aa>
            svinfo_rate[0] = svinfo_rate[1];
            svinfo_rate[1] = millis();
            */
            break;
        default:
            return FALSE;
 8003364:	2300      	movs	r3, #0
 8003366:	e014      	b.n	8003392 <parse_msg+0x1ce>
            break;
 8003368:	bf00      	nop
 800336a:	e000      	b.n	800336e <parse_msg+0x1aa>
                break;
 800336c:	bf00      	nop
    }
    if (_new_position && _new_speed) {
 800336e:	4b16      	ldr	r3, [pc, #88]	@ (80033c8 <parse_msg+0x204>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00c      	beq.n	8003390 <parse_msg+0x1cc>
 8003376:	4b15      	ldr	r3, [pc, #84]	@ (80033cc <parse_msg+0x208>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <parse_msg+0x1cc>
        _new_speed = _new_position = FALSE;
 800337e:	4b12      	ldr	r3, [pc, #72]	@ (80033c8 <parse_msg+0x204>)
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
 8003384:	4b10      	ldr	r3, [pc, #64]	@ (80033c8 <parse_msg+0x204>)
 8003386:	781a      	ldrb	r2, [r3, #0]
 8003388:	4b10      	ldr	r3, [pc, #64]	@ (80033cc <parse_msg+0x208>)
 800338a:	701a      	strb	r2, [r3, #0]
        return TRUE;
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <parse_msg+0x1ce>
    }
    return FALSE;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	2000047c 	.word	0x2000047c
 80033a0:	2000048c 	.word	0x2000048c
 80033a4:	20000434 	.word	0x20000434
 80033a8:	20000488 	.word	0x20000488
 80033ac:	20000558 	.word	0x20000558
 80033b0:	20000484 	.word	0x20000484
 80033b4:	66666667 	.word	0x66666667
 80033b8:	2000055c 	.word	0x2000055c
 80033bc:	200005ec 	.word	0x200005ec
 80033c0:	200005f0 	.word	0x200005f0
 80033c4:	10624dd3 	.word	0x10624dd3
 80033c8:	20000560 	.word	0x20000560
 80033cc:	20000561 	.word	0x20000561

080033d0 <newdata>:

int parse_ok;
static uint8_t newdata(uint8_t data){
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	71fb      	strb	r3, [r7, #7]
    uint8_t parsed = FALSE;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
    static uint8_t _ck_a;
    static uint8_t _ck_b;
    static uint8_t _step = 0;
    static uint32_t current_time_ms = 0;
    switch (_step) {
 80033de:	4b85      	ldr	r3, [pc, #532]	@ (80035f4 <newdata+0x224>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	f200 8100 	bhi.w	80035e8 <newdata+0x218>
 80033e8:	a201      	add	r2, pc, #4	@ (adr r2, 80033f0 <newdata+0x20>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	08003415 	.word	0x08003415
 80033f4:	0800342b 	.word	0x0800342b
 80033f8:	0800343f 	.word	0x0800343f
 80033fc:	0800345b 	.word	0x0800345b
 8003400:	0800348d 	.word	0x0800348d
 8003404:	080034c1 	.word	0x080034c1
 8003408:	0800351b 	.word	0x0800351b
 800340c:	08003573 	.word	0x08003573
 8003410:	08003591 	.word	0x08003591
        case 0: // Sync char 1 (0xB5)
            if (PREAMBLE1 == data)
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	2bb5      	cmp	r3, #181	@ 0xb5
 8003418:	f040 80df 	bne.w	80035da <newdata+0x20a>
                _step++;
 800341c:	4b75      	ldr	r3, [pc, #468]	@ (80035f4 <newdata+0x224>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	3301      	adds	r3, #1
 8003422:	b2da      	uxtb	r2, r3
 8003424:	4b73      	ldr	r3, [pc, #460]	@ (80035f4 <newdata+0x224>)
 8003426:	701a      	strb	r2, [r3, #0]
            break;
 8003428:	e0d7      	b.n	80035da <newdata+0x20a>
        case 1: // Sync char 2 (0x62)
            if (PREAMBLE2 == data) {
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	2b62      	cmp	r3, #98	@ 0x62
 800342e:	d106      	bne.n	800343e <newdata+0x6e>
                _step++;
 8003430:	4b70      	ldr	r3, [pc, #448]	@ (80035f4 <newdata+0x224>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	3301      	adds	r3, #1
 8003436:	b2da      	uxtb	r2, r3
 8003438:	4b6e      	ldr	r3, [pc, #440]	@ (80035f4 <newdata+0x224>)
 800343a:	701a      	strb	r2, [r3, #0]
                break;
 800343c:	e0d4      	b.n	80035e8 <newdata+0x218>
            }
        case 2: // Class
            _step++;
 800343e:	4b6d      	ldr	r3, [pc, #436]	@ (80035f4 <newdata+0x224>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4b6b      	ldr	r3, [pc, #428]	@ (80035f4 <newdata+0x224>)
 8003448:	701a      	strb	r2, [r3, #0]
            _ck_b = _ck_a = data;  
 800344a:	4a6b      	ldr	r2, [pc, #428]	@ (80035f8 <newdata+0x228>)
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	7013      	strb	r3, [r2, #0]
 8003450:	4b69      	ldr	r3, [pc, #420]	@ (80035f8 <newdata+0x228>)
 8003452:	781a      	ldrb	r2, [r3, #0]
 8003454:	4b69      	ldr	r3, [pc, #420]	@ (80035fc <newdata+0x22c>)
 8003456:	701a      	strb	r2, [r3, #0]
            break;
 8003458:	e0c6      	b.n	80035e8 <newdata+0x218>
        case 3: // ID
            _step++;
 800345a:	4b66      	ldr	r3, [pc, #408]	@ (80035f4 <newdata+0x224>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	3301      	adds	r3, #1
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4b64      	ldr	r3, [pc, #400]	@ (80035f4 <newdata+0x224>)
 8003464:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8003466:	4b64      	ldr	r3, [pc, #400]	@ (80035f8 <newdata+0x228>)
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	4413      	add	r3, r2
 800346e:	b2da      	uxtb	r2, r3
 8003470:	4b61      	ldr	r3, [pc, #388]	@ (80035f8 <newdata+0x228>)
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	4b60      	ldr	r3, [pc, #384]	@ (80035f8 <newdata+0x228>)
 8003476:	781a      	ldrb	r2, [r3, #0]
 8003478:	4b60      	ldr	r3, [pc, #384]	@ (80035fc <newdata+0x22c>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	4413      	add	r3, r2
 800347e:	b2da      	uxtb	r2, r3
 8003480:	4b5e      	ldr	r3, [pc, #376]	@ (80035fc <newdata+0x22c>)
 8003482:	701a      	strb	r2, [r3, #0]
            _msg_id = data;
 8003484:	4a5e      	ldr	r2, [pc, #376]	@ (8003600 <newdata+0x230>)
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	7013      	strb	r3, [r2, #0]
            break;
 800348a:	e0ad      	b.n	80035e8 <newdata+0x218>
        case 4: 
            _step++;
 800348c:	4b59      	ldr	r3, [pc, #356]	@ (80035f4 <newdata+0x224>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	3301      	adds	r3, #1
 8003492:	b2da      	uxtb	r2, r3
 8003494:	4b57      	ldr	r3, [pc, #348]	@ (80035f4 <newdata+0x224>)
 8003496:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8003498:	4b57      	ldr	r3, [pc, #348]	@ (80035f8 <newdata+0x228>)
 800349a:	781a      	ldrb	r2, [r3, #0]
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	4413      	add	r3, r2
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	4b55      	ldr	r3, [pc, #340]	@ (80035f8 <newdata+0x228>)
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	4b54      	ldr	r3, [pc, #336]	@ (80035f8 <newdata+0x228>)
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	4b54      	ldr	r3, [pc, #336]	@ (80035fc <newdata+0x22c>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	4413      	add	r3, r2
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	4b52      	ldr	r3, [pc, #328]	@ (80035fc <newdata+0x22c>)
 80034b4:	701a      	strb	r2, [r3, #0]
            _payload_length = data; 
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	4b52      	ldr	r3, [pc, #328]	@ (8003604 <newdata+0x234>)
 80034bc:	801a      	strh	r2, [r3, #0]
            break;
 80034be:	e093      	b.n	80035e8 <newdata+0x218>
        case 5: 
            _step++;
 80034c0:	4b4c      	ldr	r3, [pc, #304]	@ (80035f4 <newdata+0x224>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	3301      	adds	r3, #1
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	4b4a      	ldr	r3, [pc, #296]	@ (80035f4 <newdata+0x224>)
 80034ca:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);      
 80034cc:	4b4a      	ldr	r3, [pc, #296]	@ (80035f8 <newdata+0x228>)
 80034ce:	781a      	ldrb	r2, [r3, #0]
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	4413      	add	r3, r2
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	4b48      	ldr	r3, [pc, #288]	@ (80035f8 <newdata+0x228>)
 80034d8:	701a      	strb	r2, [r3, #0]
 80034da:	4b47      	ldr	r3, [pc, #284]	@ (80035f8 <newdata+0x228>)
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	4b47      	ldr	r3, [pc, #284]	@ (80035fc <newdata+0x22c>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	4413      	add	r3, r2
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4b45      	ldr	r3, [pc, #276]	@ (80035fc <newdata+0x22c>)
 80034e8:	701a      	strb	r2, [r3, #0]
            _payload_length += (uint16_t)(data << 8);
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	4b44      	ldr	r3, [pc, #272]	@ (8003604 <newdata+0x234>)
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	4413      	add	r3, r2
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	4b42      	ldr	r3, [pc, #264]	@ (8003604 <newdata+0x234>)
 80034fc:	801a      	strh	r2, [r3, #0]
            if (_payload_length > UBLOX_BUFFER_SIZE) {
 80034fe:	4b41      	ldr	r3, [pc, #260]	@ (8003604 <newdata+0x234>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	2bc8      	cmp	r3, #200	@ 0xc8
 8003504:	d905      	bls.n	8003512 <newdata+0x142>
                _payload_length = 0;
 8003506:	4b3f      	ldr	r3, [pc, #252]	@ (8003604 <newdata+0x234>)
 8003508:	2200      	movs	r2, #0
 800350a:	801a      	strh	r2, [r3, #0]
                _step = 0;
 800350c:	4b39      	ldr	r3, [pc, #228]	@ (80035f4 <newdata+0x224>)
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
            }
            _payload_counter = 0;   
 8003512:	4b3d      	ldr	r3, [pc, #244]	@ (8003608 <newdata+0x238>)
 8003514:	2200      	movs	r2, #0
 8003516:	801a      	strh	r2, [r3, #0]
            break;
 8003518:	e066      	b.n	80035e8 <newdata+0x218>
        case 6:
            _ck_b += (_ck_a += data);     
 800351a:	4b37      	ldr	r3, [pc, #220]	@ (80035f8 <newdata+0x228>)
 800351c:	781a      	ldrb	r2, [r3, #0]
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	4413      	add	r3, r2
 8003522:	b2da      	uxtb	r2, r3
 8003524:	4b34      	ldr	r3, [pc, #208]	@ (80035f8 <newdata+0x228>)
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	4b33      	ldr	r3, [pc, #204]	@ (80035f8 <newdata+0x228>)
 800352a:	781a      	ldrb	r2, [r3, #0]
 800352c:	4b33      	ldr	r3, [pc, #204]	@ (80035fc <newdata+0x22c>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	4413      	add	r3, r2
 8003532:	b2da      	uxtb	r2, r3
 8003534:	4b31      	ldr	r3, [pc, #196]	@ (80035fc <newdata+0x22c>)
 8003536:	701a      	strb	r2, [r3, #0]
            if (_payload_counter < UBLOX_BUFFER_SIZE) {
 8003538:	4b33      	ldr	r3, [pc, #204]	@ (8003608 <newdata+0x238>)
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	2bc7      	cmp	r3, #199	@ 0xc7
 800353e:	d805      	bhi.n	800354c <newdata+0x17c>
                _buffer.bytes[_payload_counter] = data;
 8003540:	4b31      	ldr	r3, [pc, #196]	@ (8003608 <newdata+0x238>)
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	4619      	mov	r1, r3
 8003546:	4a31      	ldr	r2, [pc, #196]	@ (800360c <newdata+0x23c>)
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	5453      	strb	r3, [r2, r1]
            }
            if (++_payload_counter == _payload_length)
 800354c:	4b2e      	ldr	r3, [pc, #184]	@ (8003608 <newdata+0x238>)
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	4b2c      	ldr	r3, [pc, #176]	@ (8003608 <newdata+0x238>)
 8003556:	801a      	strh	r2, [r3, #0]
 8003558:	4b2b      	ldr	r3, [pc, #172]	@ (8003608 <newdata+0x238>)
 800355a:	881a      	ldrh	r2, [r3, #0]
 800355c:	4b29      	ldr	r3, [pc, #164]	@ (8003604 <newdata+0x234>)
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d13c      	bne.n	80035de <newdata+0x20e>
                _step++;
 8003564:	4b23      	ldr	r3, [pc, #140]	@ (80035f4 <newdata+0x224>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	3301      	adds	r3, #1
 800356a:	b2da      	uxtb	r2, r3
 800356c:	4b21      	ldr	r3, [pc, #132]	@ (80035f4 <newdata+0x224>)
 800356e:	701a      	strb	r2, [r3, #0]
            break;
 8003570:	e035      	b.n	80035de <newdata+0x20e>
        case 7:
            _step++;
 8003572:	4b20      	ldr	r3, [pc, #128]	@ (80035f4 <newdata+0x224>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	3301      	adds	r3, #1
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4b1e      	ldr	r3, [pc, #120]	@ (80035f4 <newdata+0x224>)
 800357c:	701a      	strb	r2, [r3, #0]
            if (_ck_a != data)
 800357e:	4b1e      	ldr	r3, [pc, #120]	@ (80035f8 <newdata+0x228>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	79fa      	ldrb	r2, [r7, #7]
 8003584:	429a      	cmp	r2, r3
 8003586:	d02c      	beq.n	80035e2 <newdata+0x212>
                _step = 0;         
 8003588:	4b1a      	ldr	r3, [pc, #104]	@ (80035f4 <newdata+0x224>)
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
            break;
 800358e:	e028      	b.n	80035e2 <newdata+0x212>
        case 8:
            _step = 0;
 8003590:	4b18      	ldr	r3, [pc, #96]	@ (80035f4 <newdata+0x224>)
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
            if (_ck_b != data)
 8003596:	4b19      	ldr	r3, [pc, #100]	@ (80035fc <newdata+0x22c>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	79fa      	ldrb	r2, [r7, #7]
 800359c:	429a      	cmp	r2, r3
 800359e:	d122      	bne.n	80035e6 <newdata+0x216>
                break;   
			 _therad_read_time_ms = micros() - current_time_ms;
 80035a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003610 <newdata+0x240>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003614 <newdata+0x244>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	441a      	add	r2, r3
 80035ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003618 <newdata+0x248>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	4a19      	ldr	r2, [pc, #100]	@ (800361c <newdata+0x24c>)
 80035b6:	6013      	str	r3, [r2, #0]
			 current_time_ms = micros();
 80035b8:	4b15      	ldr	r3, [pc, #84]	@ (8003610 <newdata+0x240>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035c0:	4b14      	ldr	r3, [pc, #80]	@ (8003614 <newdata+0x244>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4413      	add	r3, r2
 80035c6:	4a14      	ldr	r2, [pc, #80]	@ (8003618 <newdata+0x248>)
 80035c8:	6013      	str	r3, [r2, #0]
            if (parse_msg())
 80035ca:	f7ff fdfb 	bl	80031c4 <parse_msg>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d009      	beq.n	80035e8 <newdata+0x218>
            {
                parsed = TRUE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e006      	b.n	80035e8 <newdata+0x218>
            break;
 80035da:	bf00      	nop
 80035dc:	e004      	b.n	80035e8 <newdata+0x218>
            break;
 80035de:	bf00      	nop
 80035e0:	e002      	b.n	80035e8 <newdata+0x218>
            break;
 80035e2:	bf00      	nop
 80035e4:	e000      	b.n	80035e8 <newdata+0x218>
                break;   
 80035e6:	bf00      	nop
            }
    } 
    return parsed;
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20000562 	.word	0x20000562
 80035f8:	20000563 	.word	0x20000563
 80035fc:	20000564 	.word	0x20000564
 8003600:	2000047c 	.word	0x2000047c
 8003604:	2000047e 	.word	0x2000047e
 8003608:	20000480 	.word	0x20000480
 800360c:	2000048c 	.word	0x2000048c
 8003610:	200005ec 	.word	0x200005ec
 8003614:	200005f0 	.word	0x200005f0
 8003618:	20000568 	.word	0x20000568
 800361c:	20000478 	.word	0x20000478

08003620 <imu_calibrate>:
  .gyr_lsb = 32.8f
};


static int32_t store_gyro[3];
void imu_calibrate(int16_t *offsx,int16_t *offsy,int16_t *offsz){
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
	axis3_t gyro_;
	integralFBx = 0;
 800362c:	4b32      	ldr	r3, [pc, #200]	@ (80036f8 <imu_calibrate+0xd8>)
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
	integralFBy = 0;
 8003634:	4b31      	ldr	r3, [pc, #196]	@ (80036fc <imu_calibrate+0xdc>)
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
	integralFBz = 0;
 800363c:	4b30      	ldr	r3, [pc, #192]	@ (8003700 <imu_calibrate+0xe0>)
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < OFFSET_CYCLE; i++){
 8003644:	2300      	movs	r3, #0
 8003646:	61fb      	str	r3, [r7, #28]
 8003648:	e01f      	b.n	800368a <imu_calibrate+0x6a>
		mpu6050_gyro_get_raw(&gyro_);
 800364a:	f107 0314 	add.w	r3, r7, #20
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe fef2 	bl	8002438 <mpu6050_gyro_get_raw>
		store_gyro[X] += gyro_.x;
 8003654:	4b2b      	ldr	r3, [pc, #172]	@ (8003704 <imu_calibrate+0xe4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800365c:	4413      	add	r3, r2
 800365e:	4a29      	ldr	r2, [pc, #164]	@ (8003704 <imu_calibrate+0xe4>)
 8003660:	6013      	str	r3, [r2, #0]
    	store_gyro[Y] += gyro_.y;
 8003662:	4b28      	ldr	r3, [pc, #160]	@ (8003704 <imu_calibrate+0xe4>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800366a:	4413      	add	r3, r2
 800366c:	4a25      	ldr	r2, [pc, #148]	@ (8003704 <imu_calibrate+0xe4>)
 800366e:	6053      	str	r3, [r2, #4]
    	store_gyro[Z] += gyro_.z;
 8003670:	4b24      	ldr	r3, [pc, #144]	@ (8003704 <imu_calibrate+0xe4>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003678:	4413      	add	r3, r2
 800367a:	4a22      	ldr	r2, [pc, #136]	@ (8003704 <imu_calibrate+0xe4>)
 800367c:	6093      	str	r3, [r2, #8]
		HAL_Delay(1); // delay 1 ms
 800367e:	2001      	movs	r0, #1
 8003680:	f004 fb32 	bl	8007ce8 <HAL_Delay>
	for(int i = 0;i < OFFSET_CYCLE; i++){
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	3301      	adds	r3, #1
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003690:	dbdb      	blt.n	800364a <imu_calibrate+0x2a>
	}
	*offsx = store_gyro[X] / OFFSET_CYCLE;
 8003692:	4b1c      	ldr	r3, [pc, #112]	@ (8003704 <imu_calibrate+0xe4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <imu_calibrate+0xe8>)
 8003698:	fb82 1203 	smull	r1, r2, r2, r3
 800369c:	1192      	asrs	r2, r2, #6
 800369e:	17db      	asrs	r3, r3, #31
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	b21a      	sxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	801a      	strh	r2, [r3, #0]
	*offsy = store_gyro[Y] / OFFSET_CYCLE;
 80036a8:	4b16      	ldr	r3, [pc, #88]	@ (8003704 <imu_calibrate+0xe4>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	4a16      	ldr	r2, [pc, #88]	@ (8003708 <imu_calibrate+0xe8>)
 80036ae:	fb82 1203 	smull	r1, r2, r2, r3
 80036b2:	1192      	asrs	r2, r2, #6
 80036b4:	17db      	asrs	r3, r3, #31
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	b21a      	sxth	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	801a      	strh	r2, [r3, #0]
	*offsz = store_gyro[Z] / OFFSET_CYCLE;
 80036be:	4b11      	ldr	r3, [pc, #68]	@ (8003704 <imu_calibrate+0xe4>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	4a11      	ldr	r2, [pc, #68]	@ (8003708 <imu_calibrate+0xe8>)
 80036c4:	fb82 1203 	smull	r1, r2, r2, r3
 80036c8:	1192      	asrs	r2, r2, #6
 80036ca:	17db      	asrs	r3, r3, #31
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	b21a      	sxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	801a      	strh	r2, [r3, #0]
	init_us = millis();
 80036d4:	4b0d      	ldr	r3, [pc, #52]	@ (800370c <imu_calibrate+0xec>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003710 <imu_calibrate+0xf0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4413      	add	r3, r2
 80036e2:	4a09      	ldr	r2, [pc, #36]	@ (8003708 <imu_calibrate+0xe8>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	099b      	lsrs	r3, r3, #6
 80036ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003714 <imu_calibrate+0xf4>)
 80036ec:	6013      	str	r3, [r2, #0]
}
 80036ee:	bf00      	nop
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000584 	.word	0x20000584
 80036fc:	20000588 	.word	0x20000588
 8003700:	2000058c 	.word	0x2000058c
 8003704:	200005d0 	.word	0x200005d0
 8003708:	10624dd3 	.word	0x10624dd3
 800370c:	200005ec 	.word	0x200005ec
 8003710:	200005f0 	.word	0x200005f0
 8003714:	200005cc 	.word	0x200005cc

08003718 <update_ahrs>:
	m->roll   = atan2_approx(-acc.x, (1/invSqrt_(acc.y * acc.y + acc.z * acc.z)))*180/M_PIf;
}

static int8_t reset_state = 1;
// mahony filter
void update_ahrs(int16_t gx_, int16_t gy_, int16_t gz_, int16_t accx_, int16_t accy_, int16_t accz_,int16_t magx,int16_t magy,int16_t magz,uint32_t micros){
 8003718:	b5b0      	push	{r4, r5, r7, lr}
 800371a:	b0a8      	sub	sp, #160	@ 0xa0
 800371c:	af00      	add	r7, sp, #0
 800371e:	4604      	mov	r4, r0
 8003720:	4608      	mov	r0, r1
 8003722:	4611      	mov	r1, r2
 8003724:	461a      	mov	r2, r3
 8003726:	4623      	mov	r3, r4
 8003728:	80fb      	strh	r3, [r7, #6]
 800372a:	4603      	mov	r3, r0
 800372c:	80bb      	strh	r3, [r7, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	807b      	strh	r3, [r7, #2]
 8003732:	4613      	mov	r3, r2
 8003734:	803b      	strh	r3, [r7, #0]
    float vx, vy, vz;
    float emz,wx,wy;
    float mx,my,mz,hx,hy,bx,bz;

    static uint32_t last_time_us;
    float dt = (micros - last_time_us)*(1e-6f);
 8003736:	4bb2      	ldr	r3, [pc, #712]	@ (8003a00 <update_ahrs+0x2e8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	4618      	mov	r0, r3
 8003742:	f7fd fb2f 	bl	8000da4 <__aeabi_ui2f>
 8003746:	4603      	mov	r3, r0
 8003748:	49ae      	ldr	r1, [pc, #696]	@ (8003a04 <update_ahrs+0x2ec>)
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd fb82 	bl	8000e54 <__aeabi_fmul>
 8003750:	4603      	mov	r3, r0
 8003752:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    last_time_us = micros;
 8003756:	4aaa      	ldr	r2, [pc, #680]	@ (8003a00 <update_ahrs+0x2e8>)
 8003758:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800375c:	6013      	str	r3, [r2, #0]

	gx = (gx_/config.gyr_lsb) * RAD;
 800375e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fd fb22 	bl	8000dac <__aeabi_i2f>
 8003768:	4602      	mov	r2, r0
 800376a:	4ba7      	ldr	r3, [pc, #668]	@ (8003a08 <update_ahrs+0x2f0>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	4619      	mov	r1, r3
 8003770:	4610      	mov	r0, r2
 8003772:	f7fd fc23 	bl	8000fbc <__aeabi_fdiv>
 8003776:	4603      	mov	r3, r0
 8003778:	49a4      	ldr	r1, [pc, #656]	@ (8003a0c <update_ahrs+0x2f4>)
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd fb6a 	bl	8000e54 <__aeabi_fmul>
 8003780:	4603      	mov	r3, r0
 8003782:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	gy = (gy_/config.gyr_lsb) * RAD;
 8003786:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd fb0e 	bl	8000dac <__aeabi_i2f>
 8003790:	4602      	mov	r2, r0
 8003792:	4b9d      	ldr	r3, [pc, #628]	@ (8003a08 <update_ahrs+0x2f0>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	4619      	mov	r1, r3
 8003798:	4610      	mov	r0, r2
 800379a:	f7fd fc0f 	bl	8000fbc <__aeabi_fdiv>
 800379e:	4603      	mov	r3, r0
 80037a0:	499a      	ldr	r1, [pc, #616]	@ (8003a0c <update_ahrs+0x2f4>)
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fd fb56 	bl	8000e54 <__aeabi_fmul>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	gz = (gz_/config.gyr_lsb) * RAD;
 80037ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fd fafa 	bl	8000dac <__aeabi_i2f>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b93      	ldr	r3, [pc, #588]	@ (8003a08 <update_ahrs+0x2f0>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	4619      	mov	r1, r3
 80037c0:	4610      	mov	r0, r2
 80037c2:	f7fd fbfb 	bl	8000fbc <__aeabi_fdiv>
 80037c6:	4603      	mov	r3, r0
 80037c8:	4990      	ldr	r1, [pc, #576]	@ (8003a0c <update_ahrs+0x2f4>)
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fd fb42 	bl	8000e54 <__aeabi_fmul>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	if(!((accx_ == 0) && (accy_ == 0) && ( accz_ == 0))) {
 80037d6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d108      	bne.n	80037f0 <update_ahrs+0xd8>
 80037de:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d104      	bne.n	80037f0 <update_ahrs+0xd8>
 80037e6:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 825d 	beq.w	8003caa <update_ahrs+0x592>
		norm = invSqrt_(accx_ * accx_ + accy_ * accy_ + accz_ * accz_);
 80037f0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80037f4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80037f8:	fb03 f202 	mul.w	r2, r3, r2
 80037fc:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8003800:	f9b7 10b0 	ldrsh.w	r1, [r7, #176]	@ 0xb0
 8003804:	fb01 f303 	mul.w	r3, r1, r3
 8003808:	441a      	add	r2, r3
 800380a:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 800380e:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	@ 0xb4
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f7fd fac7 	bl	8000dac <__aeabi_i2f>
 800381e:	4603      	mov	r3, r0
 8003820:	4618      	mov	r0, r3
 8003822:	f000 ffe3 	bl	80047ec <invSqrt_>
 8003826:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
		acc_x = (float)accx_ * norm;
 800382a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fd fabc 	bl	8000dac <__aeabi_i2f>
 8003834:	4603      	mov	r3, r0
 8003836:	4619      	mov	r1, r3
 8003838:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800383c:	f7fd fb0a 	bl	8000e54 <__aeabi_fmul>
 8003840:	4603      	mov	r3, r0
 8003842:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		acc_y = (float)accy_ * norm;
 8003846:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd faae 	bl	8000dac <__aeabi_i2f>
 8003850:	4603      	mov	r3, r0
 8003852:	4619      	mov	r1, r3
 8003854:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003858:	f7fd fafc 	bl	8000e54 <__aeabi_fmul>
 800385c:	4603      	mov	r3, r0
 800385e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		acc_z = (float)accz_ * norm;
 8003862:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 8003866:	4618      	mov	r0, r3
 8003868:	f7fd faa0 	bl	8000dac <__aeabi_i2f>
 800386c:	4603      	mov	r3, r0
 800386e:	4619      	mov	r1, r3
 8003870:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003874:	f7fd faee 	bl	8000e54 <__aeabi_fmul>
 8003878:	4603      	mov	r3, r0
 800387a:	67fb      	str	r3, [r7, #124]	@ 0x7c

		if(reset_state){
 800387c:	4b64      	ldr	r3, [pc, #400]	@ (8003a10 <update_ahrs+0x2f8>)
 800387e:	f993 3000 	ldrsb.w	r3, [r3]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00d      	beq.n	80038a2 <update_ahrs+0x18a>
			dcm[0][2] = acc_x;
 8003886:	4a63      	ldr	r2, [pc, #396]	@ (8003a14 <update_ahrs+0x2fc>)
 8003888:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800388c:	6093      	str	r3, [r2, #8]
			dcm[1][2] = acc_y;
 800388e:	4a61      	ldr	r2, [pc, #388]	@ (8003a14 <update_ahrs+0x2fc>)
 8003890:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003894:	6153      	str	r3, [r2, #20]
			dcm[2][2] = acc_z;
 8003896:	4a5f      	ldr	r2, [pc, #380]	@ (8003a14 <update_ahrs+0x2fc>)
 8003898:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800389a:	6213      	str	r3, [r2, #32]
			reset_state = 0;
 800389c:	4b5c      	ldr	r3, [pc, #368]	@ (8003a10 <update_ahrs+0x2f8>)
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
		}

        if(USE_MAG){
			norm = invSqrt_(magx * magx + magy * magy + magz * magz);
 80038a2:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 80038a6:	f9b7 20b8 	ldrsh.w	r2, [r7, #184]	@ 0xb8
 80038aa:	fb03 f202 	mul.w	r2, r3, r2
 80038ae:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 80038b2:	f9b7 10bc 	ldrsh.w	r1, [r7, #188]	@ 0xbc
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	441a      	add	r2, r3
 80038bc:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 80038c0:	f9b7 10c0 	ldrsh.w	r1, [r7, #192]	@ 0xc0
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd fa6e 	bl	8000dac <__aeabi_i2f>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 ff8a 	bl	80047ec <invSqrt_>
 80038d8:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
			mx = magx * norm;
 80038dc:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fd fa63 	bl	8000dac <__aeabi_i2f>
 80038e6:	4603      	mov	r3, r0
 80038e8:	4619      	mov	r1, r3
 80038ea:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80038ee:	f7fd fab1 	bl	8000e54 <__aeabi_fmul>
 80038f2:	4603      	mov	r3, r0
 80038f4:	67bb      	str	r3, [r7, #120]	@ 0x78
			my = magy * norm;
 80038f6:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd fa56 	bl	8000dac <__aeabi_i2f>
 8003900:	4603      	mov	r3, r0
 8003902:	4619      	mov	r1, r3
 8003904:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003908:	f7fd faa4 	bl	8000e54 <__aeabi_fmul>
 800390c:	4603      	mov	r3, r0
 800390e:	677b      	str	r3, [r7, #116]	@ 0x74
			mz = magz * norm;
 8003910:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8003914:	4618      	mov	r0, r3
 8003916:	f7fd fa49 	bl	8000dac <__aeabi_i2f>
 800391a:	4603      	mov	r3, r0
 800391c:	4619      	mov	r1, r3
 800391e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003922:	f7fd fa97 	bl	8000e54 <__aeabi_fmul>
 8003926:	4603      	mov	r3, r0
 8003928:	673b      	str	r3, [r7, #112]	@ 0x70

			hx = mx * dcm[0][0] + my * dcm[1][0] + mz * dcm[2][0];
 800392a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a14 <update_ahrs+0x2fc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003930:	4618      	mov	r0, r3
 8003932:	f7fd fa8f 	bl	8000e54 <__aeabi_fmul>
 8003936:	4603      	mov	r3, r0
 8003938:	461c      	mov	r4, r3
 800393a:	4b36      	ldr	r3, [pc, #216]	@ (8003a14 <update_ahrs+0x2fc>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003940:	4618      	mov	r0, r3
 8003942:	f7fd fa87 	bl	8000e54 <__aeabi_fmul>
 8003946:	4603      	mov	r3, r0
 8003948:	4619      	mov	r1, r3
 800394a:	4620      	mov	r0, r4
 800394c:	f7fd f97a 	bl	8000c44 <__addsf3>
 8003950:	4603      	mov	r3, r0
 8003952:	461c      	mov	r4, r3
 8003954:	4b2f      	ldr	r3, [pc, #188]	@ (8003a14 <update_ahrs+0x2fc>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd fa7a 	bl	8000e54 <__aeabi_fmul>
 8003960:	4603      	mov	r3, r0
 8003962:	4619      	mov	r1, r3
 8003964:	4620      	mov	r0, r4
 8003966:	f7fd f96d 	bl	8000c44 <__addsf3>
 800396a:	4603      	mov	r3, r0
 800396c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			hy = mx * dcm[0][1] + my * dcm[1][1] + mz * dcm[2][1];
 800396e:	4b29      	ldr	r3, [pc, #164]	@ (8003a14 <update_ahrs+0x2fc>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd fa6d 	bl	8000e54 <__aeabi_fmul>
 800397a:	4603      	mov	r3, r0
 800397c:	461c      	mov	r4, r3
 800397e:	4b25      	ldr	r3, [pc, #148]	@ (8003a14 <update_ahrs+0x2fc>)
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd fa65 	bl	8000e54 <__aeabi_fmul>
 800398a:	4603      	mov	r3, r0
 800398c:	4619      	mov	r1, r3
 800398e:	4620      	mov	r0, r4
 8003990:	f7fd f958 	bl	8000c44 <__addsf3>
 8003994:	4603      	mov	r3, r0
 8003996:	461c      	mov	r4, r3
 8003998:	4b1e      	ldr	r3, [pc, #120]	@ (8003a14 <update_ahrs+0x2fc>)
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fa58 	bl	8000e54 <__aeabi_fmul>
 80039a4:	4603      	mov	r3, r0
 80039a6:	4619      	mov	r1, r3
 80039a8:	4620      	mov	r0, r4
 80039aa:	f7fd f94b 	bl	8000c44 <__addsf3>
 80039ae:	4603      	mov	r3, r0
 80039b0:	66bb      	str	r3, [r7, #104]	@ 0x68
			bz = mx * dcm[0][2] + my * dcm[1][2] + mz * dcm[2][2];
 80039b2:	4b18      	ldr	r3, [pc, #96]	@ (8003a14 <update_ahrs+0x2fc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fd fa4b 	bl	8000e54 <__aeabi_fmul>
 80039be:	4603      	mov	r3, r0
 80039c0:	461c      	mov	r4, r3
 80039c2:	4b14      	ldr	r3, [pc, #80]	@ (8003a14 <update_ahrs+0x2fc>)
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fd fa43 	bl	8000e54 <__aeabi_fmul>
 80039ce:	4603      	mov	r3, r0
 80039d0:	4619      	mov	r1, r3
 80039d2:	4620      	mov	r0, r4
 80039d4:	f7fd f936 	bl	8000c44 <__addsf3>
 80039d8:	4603      	mov	r3, r0
 80039da:	461c      	mov	r4, r3
 80039dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003a14 <update_ahrs+0x2fc>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd fa36 	bl	8000e54 <__aeabi_fmul>
 80039e8:	4603      	mov	r3, r0
 80039ea:	4619      	mov	r1, r3
 80039ec:	4620      	mov	r0, r4
 80039ee:	f7fd f929 	bl	8000c44 <__addsf3>
 80039f2:	4603      	mov	r3, r0
 80039f4:	667b      	str	r3, [r7, #100]	@ 0x64

			bx = sqrtf(hx * hx + hy * hy);
 80039f6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80039f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80039fa:	f7fd fa2b 	bl	8000e54 <__aeabi_fmul>
 80039fe:	e00b      	b.n	8003a18 <update_ahrs+0x300>
 8003a00:	200005dc 	.word	0x200005dc
 8003a04:	358637bd 	.word	0x358637bd
 8003a08:	20000018 	.word	0x20000018
 8003a0c:	3c8efa35 	.word	0x3c8efa35
 8003a10:	20000024 	.word	0x20000024
 8003a14:	200005a8 	.word	0x200005a8
 8003a18:	4603      	mov	r3, r0
 8003a1a:	461c      	mov	r4, r3
 8003a1c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a1e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003a20:	f7fd fa18 	bl	8000e54 <__aeabi_fmul>
 8003a24:	4603      	mov	r3, r0
 8003a26:	4619      	mov	r1, r3
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f7fd f90b 	bl	8000c44 <__addsf3>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f011 fcb0 	bl	8015396 <sqrtf>
 8003a36:	6638      	str	r0, [r7, #96]	@ 0x60

			wx = bx * dcm[0][0] + bz * dcm[0][2];
 8003a38:	4b75      	ldr	r3, [pc, #468]	@ (8003c10 <update_ahrs+0x4f8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd fa08 	bl	8000e54 <__aeabi_fmul>
 8003a44:	4603      	mov	r3, r0
 8003a46:	461c      	mov	r4, r3
 8003a48:	4b71      	ldr	r3, [pc, #452]	@ (8003c10 <update_ahrs+0x4f8>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fd fa00 	bl	8000e54 <__aeabi_fmul>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4619      	mov	r1, r3
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7fd f8f3 	bl	8000c44 <__addsf3>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
			wy = bx * dcm[1][0] + bz * dcm[1][2];
 8003a62:	4b6b      	ldr	r3, [pc, #428]	@ (8003c10 <update_ahrs+0x4f8>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fd f9f3 	bl	8000e54 <__aeabi_fmul>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	461c      	mov	r4, r3
 8003a72:	4b67      	ldr	r3, [pc, #412]	@ (8003c10 <update_ahrs+0x4f8>)
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fd f9eb 	bl	8000e54 <__aeabi_fmul>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4619      	mov	r1, r3
 8003a82:	4620      	mov	r0, r4
 8003a84:	f7fd f8de 	bl	8000c44 <__addsf3>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	65bb      	str	r3, [r7, #88]	@ 0x58
			emz = mx * wy - my * wx;
 8003a8c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003a8e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003a90:	f7fd f9e0 	bl	8000e54 <__aeabi_fmul>
 8003a94:	4603      	mov	r3, r0
 8003a96:	461c      	mov	r4, r3
 8003a98:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003a9a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8003a9c:	f7fd f9da 	bl	8000e54 <__aeabi_fmul>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f7fd f8cb 	bl	8000c40 <__aeabi_fsub>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	657b      	str	r3, [r7, #84]	@ 0x54
		}
		else{
			emz = 0.0f;
		}

		vx = dcm[0][2];
 8003aae:	4b58      	ldr	r3, [pc, #352]	@ (8003c10 <update_ahrs+0x4f8>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	653b      	str	r3, [r7, #80]	@ 0x50
		vy = dcm[1][2];
 8003ab4:	4b56      	ldr	r3, [pc, #344]	@ (8003c10 <update_ahrs+0x4f8>)
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
		vz = dcm[2][2];
 8003aba:	4b55      	ldr	r3, [pc, #340]	@ (8003c10 <update_ahrs+0x4f8>)
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	64bb      	str	r3, [r7, #72]	@ 0x48

		ex = acc_y * vz - acc_z * vy;
 8003ac0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003ac2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003ac6:	f7fd f9c5 	bl	8000e54 <__aeabi_fmul>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461c      	mov	r4, r3
 8003ace:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003ad0:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8003ad2:	f7fd f9bf 	bl	8000e54 <__aeabi_fmul>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4620      	mov	r0, r4
 8003adc:	f7fd f8b0 	bl	8000c40 <__aeabi_fsub>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	647b      	str	r3, [r7, #68]	@ 0x44
		ey = acc_z * vx - acc_x * vz;
 8003ae4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003ae6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8003ae8:	f7fd f9b4 	bl	8000e54 <__aeabi_fmul>
 8003aec:	4603      	mov	r3, r0
 8003aee:	461c      	mov	r4, r3
 8003af0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003af2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003af6:	f7fd f9ad 	bl	8000e54 <__aeabi_fmul>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4619      	mov	r1, r3
 8003afe:	4620      	mov	r0, r4
 8003b00:	f7fd f89e 	bl	8000c40 <__aeabi_fsub>
 8003b04:	4603      	mov	r3, r0
 8003b06:	643b      	str	r3, [r7, #64]	@ 0x40
		ez = acc_x * vy - acc_y * vx;
 8003b08:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003b0a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003b0e:	f7fd f9a1 	bl	8000e54 <__aeabi_fmul>
 8003b12:	4603      	mov	r3, r0
 8003b14:	461c      	mov	r4, r3
 8003b16:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003b18:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003b1c:	f7fd f99a 	bl	8000e54 <__aeabi_fmul>
 8003b20:	4603      	mov	r3, r0
 8003b22:	4619      	mov	r1, r3
 8003b24:	4620      	mov	r0, r4
 8003b26:	f7fd f88b 	bl	8000c40 <__aeabi_fsub>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c

		if( Ki_imu  > 0.0f) {
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fd fb48 	bl	80011cc <__aeabi_fcmpgt>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d06e      	beq.n	8003c20 <update_ahrs+0x508>
			integralFBx +=  Ki_imu  * ex * dt;
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd f983 	bl	8000e54 <__aeabi_fmul>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fd f97d 	bl	8000e54 <__aeabi_fmul>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c14 <update_ahrs+0x4fc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f7fd f86d 	bl	8000c44 <__addsf3>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4b29      	ldr	r3, [pc, #164]	@ (8003c14 <update_ahrs+0x4fc>)
 8003b70:	601a      	str	r2, [r3, #0]
			integralFBy +=  Ki_imu  * ey * dt;
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fd f96b 	bl	8000e54 <__aeabi_fmul>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fd f965 	bl	8000e54 <__aeabi_fmul>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4b22      	ldr	r3, [pc, #136]	@ (8003c18 <update_ahrs+0x500>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4619      	mov	r1, r3
 8003b94:	4610      	mov	r0, r2
 8003b96:	f7fd f855 	bl	8000c44 <__addsf3>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003c18 <update_ahrs+0x500>)
 8003ba0:	601a      	str	r2, [r3, #0]
			integralFBz +=  Ki_imu  * ez * dt;
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fd f953 	bl	8000e54 <__aeabi_fmul>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fd f94d 	bl	8000e54 <__aeabi_fmul>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b17      	ldr	r3, [pc, #92]	@ (8003c1c <update_ahrs+0x504>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f7fd f83d 	bl	8000c44 <__addsf3>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4b13      	ldr	r3, [pc, #76]	@ (8003c1c <update_ahrs+0x504>)
 8003bd0:	601a      	str	r2, [r3, #0]
			gx += integralFBx;
 8003bd2:	4b10      	ldr	r3, [pc, #64]	@ (8003c14 <update_ahrs+0x4fc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003bdc:	f7fd f832 	bl	8000c44 <__addsf3>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			gy += integralFBy;
 8003be6:	4b0c      	ldr	r3, [pc, #48]	@ (8003c18 <update_ahrs+0x500>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4619      	mov	r1, r3
 8003bec:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003bf0:	f7fd f828 	bl	8000c44 <__addsf3>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			gz += integralFBz;
 8003bfa:	4b08      	ldr	r3, [pc, #32]	@ (8003c1c <update_ahrs+0x504>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003c04:	f7fd f81e 	bl	8000c44 <__addsf3>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c0e:	e013      	b.n	8003c38 <update_ahrs+0x520>
 8003c10:	200005a8 	.word	0x200005a8
 8003c14:	20000584 	.word	0x20000584
 8003c18:	20000588 	.word	0x20000588
 8003c1c:	2000058c 	.word	0x2000058c
		} else {
			integralFBx = 0.0f;
 8003c20:	4ba4      	ldr	r3, [pc, #656]	@ (8003eb4 <update_ahrs+0x79c>)
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8003c28:	4ba3      	ldr	r3, [pc, #652]	@ (8003eb8 <update_ahrs+0x7a0>)
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8003c30:	4ba2      	ldr	r3, [pc, #648]	@ (8003ebc <update_ahrs+0x7a4>)
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
		}

		gx += Kp_imu * ex;
 8003c38:	4ba1      	ldr	r3, [pc, #644]	@ (8003ec0 <update_ahrs+0x7a8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fd f908 	bl	8000e54 <__aeabi_fmul>
 8003c44:	4603      	mov	r3, r0
 8003c46:	4619      	mov	r1, r3
 8003c48:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003c4c:	f7fc fffa 	bl	8000c44 <__addsf3>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		gy += Kp_imu * ey;
 8003c56:	4b9a      	ldr	r3, [pc, #616]	@ (8003ec0 <update_ahrs+0x7a8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fd f8f9 	bl	8000e54 <__aeabi_fmul>
 8003c62:	4603      	mov	r3, r0
 8003c64:	4619      	mov	r1, r3
 8003c66:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003c6a:	f7fc ffeb 	bl	8000c44 <__addsf3>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		gz += Kp_imu * ez + emz * Kp_mag;
 8003c74:	4b92      	ldr	r3, [pc, #584]	@ (8003ec0 <update_ahrs+0x7a8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fd f8ea 	bl	8000e54 <__aeabi_fmul>
 8003c80:	4603      	mov	r3, r0
 8003c82:	461c      	mov	r4, r3
 8003c84:	4b8f      	ldr	r3, [pc, #572]	@ (8003ec4 <update_ahrs+0x7ac>)
 8003c86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fd f8e3 	bl	8000e54 <__aeabi_fmul>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4619      	mov	r1, r3
 8003c92:	4620      	mov	r0, r4
 8003c94:	f7fc ffd6 	bl	8000c44 <__addsf3>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003ca0:	f7fc ffd0 	bl	8000c44 <__addsf3>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	}

	gx *= (0.5f * dt);
 8003caa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003cae:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003cb2:	f7fd f8cf 	bl	8000e54 <__aeabi_fmul>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003cbe:	f7fd f8c9 	bl	8000e54 <__aeabi_fmul>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	gy *= (0.5f * dt);
 8003cc8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003ccc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003cd0:	f7fd f8c0 	bl	8000e54 <__aeabi_fmul>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003cdc:	f7fd f8ba 	bl	8000e54 <__aeabi_fmul>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	gz *= (0.5f * dt);
 8003ce6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003cea:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003cee:	f7fd f8b1 	bl	8000e54 <__aeabi_fmul>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003cfa:	f7fd f8ab 	bl	8000e54 <__aeabi_fmul>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	q0 += (-q1 * gx - q2 * gy - q3 * gz);
 8003d04:	4b70      	ldr	r3, [pc, #448]	@ (8003ec8 <update_ahrs+0x7b0>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003d0c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fd f89f 	bl	8000e54 <__aeabi_fmul>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461c      	mov	r4, r3
 8003d1a:	4b6c      	ldr	r3, [pc, #432]	@ (8003ecc <update_ahrs+0x7b4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fd f896 	bl	8000e54 <__aeabi_fmul>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f7fc ff87 	bl	8000c40 <__aeabi_fsub>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461c      	mov	r4, r3
 8003d36:	4b66      	ldr	r3, [pc, #408]	@ (8003ed0 <update_ahrs+0x7b8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd f888 	bl	8000e54 <__aeabi_fmul>
 8003d44:	4603      	mov	r3, r0
 8003d46:	4619      	mov	r1, r3
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f7fc ff79 	bl	8000c40 <__aeabi_fsub>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	461a      	mov	r2, r3
 8003d52:	4b60      	ldr	r3, [pc, #384]	@ (8003ed4 <update_ahrs+0x7bc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4619      	mov	r1, r3
 8003d58:	4610      	mov	r0, r2
 8003d5a:	f7fc ff73 	bl	8000c44 <__addsf3>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	461a      	mov	r2, r3
 8003d62:	4b5c      	ldr	r3, [pc, #368]	@ (8003ed4 <update_ahrs+0x7bc>)
 8003d64:	601a      	str	r2, [r3, #0]
	q1 += ( q0 * gx + q2 * gz - q3 * gy);
 8003d66:	4b5b      	ldr	r3, [pc, #364]	@ (8003ed4 <update_ahrs+0x7bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fd f870 	bl	8000e54 <__aeabi_fmul>
 8003d74:	4603      	mov	r3, r0
 8003d76:	461c      	mov	r4, r3
 8003d78:	4b54      	ldr	r3, [pc, #336]	@ (8003ecc <update_ahrs+0x7b4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fd f867 	bl	8000e54 <__aeabi_fmul>
 8003d86:	4603      	mov	r3, r0
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7fc ff5a 	bl	8000c44 <__addsf3>
 8003d90:	4603      	mov	r3, r0
 8003d92:	461c      	mov	r4, r3
 8003d94:	4b4e      	ldr	r3, [pc, #312]	@ (8003ed0 <update_ahrs+0x7b8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fd f859 	bl	8000e54 <__aeabi_fmul>
 8003da2:	4603      	mov	r3, r0
 8003da4:	4619      	mov	r1, r3
 8003da6:	4620      	mov	r0, r4
 8003da8:	f7fc ff4a 	bl	8000c40 <__aeabi_fsub>
 8003dac:	4603      	mov	r3, r0
 8003dae:	461a      	mov	r2, r3
 8003db0:	4b45      	ldr	r3, [pc, #276]	@ (8003ec8 <update_ahrs+0x7b0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f7fc ff44 	bl	8000c44 <__addsf3>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4b41      	ldr	r3, [pc, #260]	@ (8003ec8 <update_ahrs+0x7b0>)
 8003dc2:	601a      	str	r2, [r3, #0]
	q2 += ( q0 * gy - q1 * gz + q3 * gx);
 8003dc4:	4b43      	ldr	r3, [pc, #268]	@ (8003ed4 <update_ahrs+0x7bc>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fd f841 	bl	8000e54 <__aeabi_fmul>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	461c      	mov	r4, r3
 8003dd6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ec8 <update_ahrs+0x7b0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd f838 	bl	8000e54 <__aeabi_fmul>
 8003de4:	4603      	mov	r3, r0
 8003de6:	4619      	mov	r1, r3
 8003de8:	4620      	mov	r0, r4
 8003dea:	f7fc ff29 	bl	8000c40 <__aeabi_fsub>
 8003dee:	4603      	mov	r3, r0
 8003df0:	461c      	mov	r4, r3
 8003df2:	4b37      	ldr	r3, [pc, #220]	@ (8003ed0 <update_ahrs+0x7b8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fd f82a 	bl	8000e54 <__aeabi_fmul>
 8003e00:	4603      	mov	r3, r0
 8003e02:	4619      	mov	r1, r3
 8003e04:	4620      	mov	r0, r4
 8003e06:	f7fc ff1d 	bl	8000c44 <__addsf3>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8003ecc <update_ahrs+0x7b4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4619      	mov	r1, r3
 8003e14:	4610      	mov	r0, r2
 8003e16:	f7fc ff15 	bl	8000c44 <__addsf3>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8003ecc <update_ahrs+0x7b4>)
 8003e20:	601a      	str	r2, [r3, #0]
	q3 += ( q0 * gz + q1 * gy - q2 * gx);
 8003e22:	4b2c      	ldr	r3, [pc, #176]	@ (8003ed4 <update_ahrs+0x7bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fd f812 	bl	8000e54 <__aeabi_fmul>
 8003e30:	4603      	mov	r3, r0
 8003e32:	461c      	mov	r4, r3
 8003e34:	4b24      	ldr	r3, [pc, #144]	@ (8003ec8 <update_ahrs+0x7b0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fd f809 	bl	8000e54 <__aeabi_fmul>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4619      	mov	r1, r3
 8003e46:	4620      	mov	r0, r4
 8003e48:	f7fc fefc 	bl	8000c44 <__addsf3>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	461c      	mov	r4, r3
 8003e50:	4b1e      	ldr	r3, [pc, #120]	@ (8003ecc <update_ahrs+0x7b4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fc fffb 	bl	8000e54 <__aeabi_fmul>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	4619      	mov	r1, r3
 8003e62:	4620      	mov	r0, r4
 8003e64:	f7fc feec 	bl	8000c40 <__aeabi_fsub>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4b18      	ldr	r3, [pc, #96]	@ (8003ed0 <update_ahrs+0x7b8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4619      	mov	r1, r3
 8003e72:	4610      	mov	r0, r2
 8003e74:	f7fc fee6 	bl	8000c44 <__addsf3>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4b14      	ldr	r3, [pc, #80]	@ (8003ed0 <update_ahrs+0x7b8>)
 8003e7e:	601a      	str	r2, [r3, #0]

	norm = invSqrt_(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003e80:	4b14      	ldr	r3, [pc, #80]	@ (8003ed4 <update_ahrs+0x7bc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a13      	ldr	r2, [pc, #76]	@ (8003ed4 <update_ahrs+0x7bc>)
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	4611      	mov	r1, r2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc ffe2 	bl	8000e54 <__aeabi_fmul>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461c      	mov	r4, r3
 8003e94:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec8 <update_ahrs+0x7b0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a0b      	ldr	r2, [pc, #44]	@ (8003ec8 <update_ahrs+0x7b0>)
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc ffd8 	bl	8000e54 <__aeabi_fmul>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	f7fc fecb 	bl	8000c44 <__addsf3>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	461c      	mov	r4, r3
 8003eb2:	e011      	b.n	8003ed8 <update_ahrs+0x7c0>
 8003eb4:	20000584 	.word	0x20000584
 8003eb8:	20000588 	.word	0x20000588
 8003ebc:	2000058c 	.word	0x2000058c
 8003ec0:	20000010 	.word	0x20000010
 8003ec4:	40a00000 	.word	0x40a00000
 8003ec8:	2000059c 	.word	0x2000059c
 8003ecc:	200005a0 	.word	0x200005a0
 8003ed0:	200005a4 	.word	0x200005a4
 8003ed4:	20000014 	.word	0x20000014
 8003ed8:	4b96      	ldr	r3, [pc, #600]	@ (8004134 <update_ahrs+0xa1c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a95      	ldr	r2, [pc, #596]	@ (8004134 <update_ahrs+0xa1c>)
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fc ffb6 	bl	8000e54 <__aeabi_fmul>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4619      	mov	r1, r3
 8003eec:	4620      	mov	r0, r4
 8003eee:	f7fc fea9 	bl	8000c44 <__addsf3>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	461c      	mov	r4, r3
 8003ef6:	4b90      	ldr	r3, [pc, #576]	@ (8004138 <update_ahrs+0xa20>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a8f      	ldr	r2, [pc, #572]	@ (8004138 <update_ahrs+0xa20>)
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc ffa7 	bl	8000e54 <__aeabi_fmul>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f7fc fe9a 	bl	8000c44 <__addsf3>
 8003f10:	4603      	mov	r3, r0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fc6a 	bl	80047ec <invSqrt_>
 8003f18:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	q0 *= norm;
 8003f1c:	4b87      	ldr	r3, [pc, #540]	@ (800413c <update_ahrs+0xa24>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fc ff95 	bl	8000e54 <__aeabi_fmul>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4b83      	ldr	r3, [pc, #524]	@ (800413c <update_ahrs+0xa24>)
 8003f30:	601a      	str	r2, [r3, #0]
	q1 *= norm;
 8003f32:	4b83      	ldr	r3, [pc, #524]	@ (8004140 <update_ahrs+0xa28>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fc ff8a 	bl	8000e54 <__aeabi_fmul>
 8003f40:	4603      	mov	r3, r0
 8003f42:	461a      	mov	r2, r3
 8003f44:	4b7e      	ldr	r3, [pc, #504]	@ (8004140 <update_ahrs+0xa28>)
 8003f46:	601a      	str	r2, [r3, #0]
	q2 *= norm;
 8003f48:	4b7a      	ldr	r3, [pc, #488]	@ (8004134 <update_ahrs+0xa1c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc ff7f 	bl	8000e54 <__aeabi_fmul>
 8003f56:	4603      	mov	r3, r0
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4b76      	ldr	r3, [pc, #472]	@ (8004134 <update_ahrs+0xa1c>)
 8003f5c:	601a      	str	r2, [r3, #0]
	q3 *= norm;
 8003f5e:	4b76      	ldr	r3, [pc, #472]	@ (8004138 <update_ahrs+0xa20>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc ff74 	bl	8000e54 <__aeabi_fmul>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4b71      	ldr	r3, [pc, #452]	@ (8004138 <update_ahrs+0xa20>)
 8003f72:	601a      	str	r2, [r3, #0]
	
	float q0q1 = q0*q1;
 8003f74:	4b71      	ldr	r3, [pc, #452]	@ (800413c <update_ahrs+0xa24>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a71      	ldr	r2, [pc, #452]	@ (8004140 <update_ahrs+0xa28>)
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fc ff68 	bl	8000e54 <__aeabi_fmul>
 8003f84:	4603      	mov	r3, r0
 8003f86:	63bb      	str	r3, [r7, #56]	@ 0x38
	float q0q2 = q0*q2;
 8003f88:	4b6c      	ldr	r3, [pc, #432]	@ (800413c <update_ahrs+0xa24>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a69      	ldr	r2, [pc, #420]	@ (8004134 <update_ahrs+0xa1c>)
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	4611      	mov	r1, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fc ff5e 	bl	8000e54 <__aeabi_fmul>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	637b      	str	r3, [r7, #52]	@ 0x34
	float q0q3 = q0*q3;
 8003f9c:	4b67      	ldr	r3, [pc, #412]	@ (800413c <update_ahrs+0xa24>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a65      	ldr	r2, [pc, #404]	@ (8004138 <update_ahrs+0xa20>)
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fc ff54 	bl	8000e54 <__aeabi_fmul>
 8003fac:	4603      	mov	r3, r0
 8003fae:	633b      	str	r3, [r7, #48]	@ 0x30
	float q1q1 = q1*q1;
 8003fb0:	4b63      	ldr	r3, [pc, #396]	@ (8004140 <update_ahrs+0xa28>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a62      	ldr	r2, [pc, #392]	@ (8004140 <update_ahrs+0xa28>)
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	4611      	mov	r1, r2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fc ff4a 	bl	8000e54 <__aeabi_fmul>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float q1q2 = q1*q2;
 8003fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8004140 <update_ahrs+0xa28>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a5a      	ldr	r2, [pc, #360]	@ (8004134 <update_ahrs+0xa1c>)
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc ff40 	bl	8000e54 <__aeabi_fmul>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
	float q1q3 = q1*q3;
 8003fd8:	4b59      	ldr	r3, [pc, #356]	@ (8004140 <update_ahrs+0xa28>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a56      	ldr	r2, [pc, #344]	@ (8004138 <update_ahrs+0xa20>)
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc ff36 	bl	8000e54 <__aeabi_fmul>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	627b      	str	r3, [r7, #36]	@ 0x24
	float q2q2 = q2*q2;
 8003fec:	4b51      	ldr	r3, [pc, #324]	@ (8004134 <update_ahrs+0xa1c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a50      	ldr	r2, [pc, #320]	@ (8004134 <update_ahrs+0xa1c>)
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fc ff2c 	bl	8000e54 <__aeabi_fmul>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	623b      	str	r3, [r7, #32]
	float q2q3 = q2*q3;
 8004000:	4b4c      	ldr	r3, [pc, #304]	@ (8004134 <update_ahrs+0xa1c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a4c      	ldr	r2, [pc, #304]	@ (8004138 <update_ahrs+0xa20>)
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f7fc ff22 	bl	8000e54 <__aeabi_fmul>
 8004010:	4603      	mov	r3, r0
 8004012:	61fb      	str	r3, [r7, #28]
	float q3q3 = q3*q3;
 8004014:	4b48      	ldr	r3, [pc, #288]	@ (8004138 <update_ahrs+0xa20>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a47      	ldr	r2, [pc, #284]	@ (8004138 <update_ahrs+0xa20>)
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f7fc ff18 	bl	8000e54 <__aeabi_fmul>
 8004024:	4603      	mov	r3, r0
 8004026:	61bb      	str	r3, [r7, #24]

	// Quaternion to Rotation matrix
	dcm[0][0] = 2.0f*(0.5f - q2q2  - q3q3);
 8004028:	6a39      	ldr	r1, [r7, #32]
 800402a:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800402e:	f7fc fe07 	bl	8000c40 <__aeabi_fsub>
 8004032:	4603      	mov	r3, r0
 8004034:	69b9      	ldr	r1, [r7, #24]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fc fe02 	bl	8000c40 <__aeabi_fsub>
 800403c:	4603      	mov	r3, r0
 800403e:	4619      	mov	r1, r3
 8004040:	4618      	mov	r0, r3
 8004042:	f7fc fdff 	bl	8000c44 <__addsf3>
 8004046:	4603      	mov	r3, r0
 8004048:	461a      	mov	r2, r3
 800404a:	4b3e      	ldr	r3, [pc, #248]	@ (8004144 <update_ahrs+0xa2c>)
 800404c:	601a      	str	r2, [r3, #0]
	dcm[1][0] = 2.0f*(q1q2 - q0q3);
 800404e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004050:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004052:	f7fc fdf5 	bl	8000c40 <__aeabi_fsub>
 8004056:	4603      	mov	r3, r0
 8004058:	4619      	mov	r1, r3
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc fdf2 	bl	8000c44 <__addsf3>
 8004060:	4603      	mov	r3, r0
 8004062:	461a      	mov	r2, r3
 8004064:	4b37      	ldr	r3, [pc, #220]	@ (8004144 <update_ahrs+0xa2c>)
 8004066:	60da      	str	r2, [r3, #12]
	dcm[2][0] = 2.0f*(q1q3 + q0q2);
 8004068:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800406a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800406c:	f7fc fdea 	bl	8000c44 <__addsf3>
 8004070:	4603      	mov	r3, r0
 8004072:	4619      	mov	r1, r3
 8004074:	4618      	mov	r0, r3
 8004076:	f7fc fde5 	bl	8000c44 <__addsf3>
 800407a:	4603      	mov	r3, r0
 800407c:	461a      	mov	r2, r3
 800407e:	4b31      	ldr	r3, [pc, #196]	@ (8004144 <update_ahrs+0xa2c>)
 8004080:	619a      	str	r2, [r3, #24]
	dcm[0][1] = 2.0f*(q1q2 + q0q3);
 8004082:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004084:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004086:	f7fc fddd 	bl	8000c44 <__addsf3>
 800408a:	4603      	mov	r3, r0
 800408c:	4619      	mov	r1, r3
 800408e:	4618      	mov	r0, r3
 8004090:	f7fc fdd8 	bl	8000c44 <__addsf3>
 8004094:	4603      	mov	r3, r0
 8004096:	461a      	mov	r2, r3
 8004098:	4b2a      	ldr	r3, [pc, #168]	@ (8004144 <update_ahrs+0xa2c>)
 800409a:	605a      	str	r2, [r3, #4]
	dcm[1][1] = 2.0f*(0.5f - q1q1 - q3q3);
 800409c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800409e:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80040a2:	f7fc fdcd 	bl	8000c40 <__aeabi_fsub>
 80040a6:	4603      	mov	r3, r0
 80040a8:	69b9      	ldr	r1, [r7, #24]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fc fdc8 	bl	8000c40 <__aeabi_fsub>
 80040b0:	4603      	mov	r3, r0
 80040b2:	4619      	mov	r1, r3
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fc fdc5 	bl	8000c44 <__addsf3>
 80040ba:	4603      	mov	r3, r0
 80040bc:	461a      	mov	r2, r3
 80040be:	4b21      	ldr	r3, [pc, #132]	@ (8004144 <update_ahrs+0xa2c>)
 80040c0:	611a      	str	r2, [r3, #16]
	dcm[2][1] = 2.0f*(q2q3 - q0q1);
 80040c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040c4:	69f8      	ldr	r0, [r7, #28]
 80040c6:	f7fc fdbb 	bl	8000c40 <__aeabi_fsub>
 80040ca:	4603      	mov	r3, r0
 80040cc:	4619      	mov	r1, r3
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc fdb8 	bl	8000c44 <__addsf3>
 80040d4:	4603      	mov	r3, r0
 80040d6:	461a      	mov	r2, r3
 80040d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <update_ahrs+0xa2c>)
 80040da:	61da      	str	r2, [r3, #28]
	dcm[0][2] = 2.0f*(q1q3 - q0q2);
 80040dc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80040de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040e0:	f7fc fdae 	bl	8000c40 <__aeabi_fsub>
 80040e4:	4603      	mov	r3, r0
 80040e6:	4619      	mov	r1, r3
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fc fdab 	bl	8000c44 <__addsf3>
 80040ee:	4603      	mov	r3, r0
 80040f0:	461a      	mov	r2, r3
 80040f2:	4b14      	ldr	r3, [pc, #80]	@ (8004144 <update_ahrs+0xa2c>)
 80040f4:	609a      	str	r2, [r3, #8]
	dcm[1][2] = 2.0f*(q2q3 + q0q1);
 80040f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040f8:	69f8      	ldr	r0, [r7, #28]
 80040fa:	f7fc fda3 	bl	8000c44 <__addsf3>
 80040fe:	4603      	mov	r3, r0
 8004100:	4619      	mov	r1, r3
 8004102:	4618      	mov	r0, r3
 8004104:	f7fc fd9e 	bl	8000c44 <__addsf3>
 8004108:	4603      	mov	r3, r0
 800410a:	461a      	mov	r2, r3
 800410c:	4b0d      	ldr	r3, [pc, #52]	@ (8004144 <update_ahrs+0xa2c>)
 800410e:	615a      	str	r2, [r3, #20]
	dcm[2][2] = 2.0f*(0.5f - q1q1 - q2q2);
 8004110:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004112:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8004116:	f7fc fd93 	bl	8000c40 <__aeabi_fsub>
 800411a:	4603      	mov	r3, r0
 800411c:	6a39      	ldr	r1, [r7, #32]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fc fd8e 	bl	8000c40 <__aeabi_fsub>
 8004124:	4603      	mov	r3, r0
 8004126:	4619      	mov	r1, r3
 8004128:	4618      	mov	r0, r3
 800412a:	f7fc fd8b 	bl	8000c44 <__addsf3>
 800412e:	4603      	mov	r3, r0
 8004130:	461a      	mov	r2, r3
 8004132:	e009      	b.n	8004148 <update_ahrs+0xa30>
 8004134:	200005a0 	.word	0x200005a0
 8004138:	200005a4 	.word	0x200005a4
 800413c:	20000014 	.word	0x20000014
 8004140:	2000059c 	.word	0x2000059c
 8004144:	200005a8 	.word	0x200005a8
 8004148:	4ba3      	ldr	r3, [pc, #652]	@ (80043d8 <update_ahrs+0xcc0>)
 800414a:	621a      	str	r2, [r3, #32]
	
    // Rotate acceleration from Body frame to earth frame
	int16_t acc_Eframex = dcm[0][0]*accx_ + dcm[1][0]*accy_ + dcm[2][0]*accz_;
 800414c:	4ba2      	ldr	r3, [pc, #648]	@ (80043d8 <update_ahrs+0xcc0>)
 800414e:	681c      	ldr	r4, [r3, #0]
 8004150:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004154:	4618      	mov	r0, r3
 8004156:	f7fc fe29 	bl	8000dac <__aeabi_i2f>
 800415a:	4603      	mov	r3, r0
 800415c:	4619      	mov	r1, r3
 800415e:	4620      	mov	r0, r4
 8004160:	f7fc fe78 	bl	8000e54 <__aeabi_fmul>
 8004164:	4603      	mov	r3, r0
 8004166:	461d      	mov	r5, r3
 8004168:	4b9b      	ldr	r3, [pc, #620]	@ (80043d8 <update_ahrs+0xcc0>)
 800416a:	68dc      	ldr	r4, [r3, #12]
 800416c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8004170:	4618      	mov	r0, r3
 8004172:	f7fc fe1b 	bl	8000dac <__aeabi_i2f>
 8004176:	4603      	mov	r3, r0
 8004178:	4619      	mov	r1, r3
 800417a:	4620      	mov	r0, r4
 800417c:	f7fc fe6a 	bl	8000e54 <__aeabi_fmul>
 8004180:	4603      	mov	r3, r0
 8004182:	4619      	mov	r1, r3
 8004184:	4628      	mov	r0, r5
 8004186:	f7fc fd5d 	bl	8000c44 <__addsf3>
 800418a:	4603      	mov	r3, r0
 800418c:	461d      	mov	r5, r3
 800418e:	4b92      	ldr	r3, [pc, #584]	@ (80043d8 <update_ahrs+0xcc0>)
 8004190:	699c      	ldr	r4, [r3, #24]
 8004192:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc fe08 	bl	8000dac <__aeabi_i2f>
 800419c:	4603      	mov	r3, r0
 800419e:	4619      	mov	r1, r3
 80041a0:	4620      	mov	r0, r4
 80041a2:	f7fc fe57 	bl	8000e54 <__aeabi_fmul>
 80041a6:	4603      	mov	r3, r0
 80041a8:	4619      	mov	r1, r3
 80041aa:	4628      	mov	r0, r5
 80041ac:	f7fc fd4a 	bl	8000c44 <__addsf3>
 80041b0:	4603      	mov	r3, r0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fd f82a 	bl	800120c <__aeabi_f2iz>
 80041b8:	4603      	mov	r3, r0
 80041ba:	82fb      	strh	r3, [r7, #22]
	int16_t acc_Eframey = dcm[0][1]*accx_ + dcm[1][1]*accy_ + dcm[2][1]*accz_;
 80041bc:	4b86      	ldr	r3, [pc, #536]	@ (80043d8 <update_ahrs+0xcc0>)
 80041be:	685c      	ldr	r4, [r3, #4]
 80041c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fc fdf1 	bl	8000dac <__aeabi_i2f>
 80041ca:	4603      	mov	r3, r0
 80041cc:	4619      	mov	r1, r3
 80041ce:	4620      	mov	r0, r4
 80041d0:	f7fc fe40 	bl	8000e54 <__aeabi_fmul>
 80041d4:	4603      	mov	r3, r0
 80041d6:	461d      	mov	r5, r3
 80041d8:	4b7f      	ldr	r3, [pc, #508]	@ (80043d8 <update_ahrs+0xcc0>)
 80041da:	691c      	ldr	r4, [r3, #16]
 80041dc:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fc fde3 	bl	8000dac <__aeabi_i2f>
 80041e6:	4603      	mov	r3, r0
 80041e8:	4619      	mov	r1, r3
 80041ea:	4620      	mov	r0, r4
 80041ec:	f7fc fe32 	bl	8000e54 <__aeabi_fmul>
 80041f0:	4603      	mov	r3, r0
 80041f2:	4619      	mov	r1, r3
 80041f4:	4628      	mov	r0, r5
 80041f6:	f7fc fd25 	bl	8000c44 <__addsf3>
 80041fa:	4603      	mov	r3, r0
 80041fc:	461d      	mov	r5, r3
 80041fe:	4b76      	ldr	r3, [pc, #472]	@ (80043d8 <update_ahrs+0xcc0>)
 8004200:	69dc      	ldr	r4, [r3, #28]
 8004202:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc fdd0 	bl	8000dac <__aeabi_i2f>
 800420c:	4603      	mov	r3, r0
 800420e:	4619      	mov	r1, r3
 8004210:	4620      	mov	r0, r4
 8004212:	f7fc fe1f 	bl	8000e54 <__aeabi_fmul>
 8004216:	4603      	mov	r3, r0
 8004218:	4619      	mov	r1, r3
 800421a:	4628      	mov	r0, r5
 800421c:	f7fc fd12 	bl	8000c44 <__addsf3>
 8004220:	4603      	mov	r3, r0
 8004222:	4618      	mov	r0, r3
 8004224:	f7fc fff2 	bl	800120c <__aeabi_f2iz>
 8004228:	4603      	mov	r3, r0
 800422a:	82bb      	strh	r3, [r7, #20]
	int16_t acc_Eframez = dcm[0][2]*accx_ + dcm[1][2]*accy_ + dcm[2][2]*accz_;
 800422c:	4b6a      	ldr	r3, [pc, #424]	@ (80043d8 <update_ahrs+0xcc0>)
 800422e:	689c      	ldr	r4, [r3, #8]
 8004230:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004234:	4618      	mov	r0, r3
 8004236:	f7fc fdb9 	bl	8000dac <__aeabi_i2f>
 800423a:	4603      	mov	r3, r0
 800423c:	4619      	mov	r1, r3
 800423e:	4620      	mov	r0, r4
 8004240:	f7fc fe08 	bl	8000e54 <__aeabi_fmul>
 8004244:	4603      	mov	r3, r0
 8004246:	461d      	mov	r5, r3
 8004248:	4b63      	ldr	r3, [pc, #396]	@ (80043d8 <update_ahrs+0xcc0>)
 800424a:	695c      	ldr	r4, [r3, #20]
 800424c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8004250:	4618      	mov	r0, r3
 8004252:	f7fc fdab 	bl	8000dac <__aeabi_i2f>
 8004256:	4603      	mov	r3, r0
 8004258:	4619      	mov	r1, r3
 800425a:	4620      	mov	r0, r4
 800425c:	f7fc fdfa 	bl	8000e54 <__aeabi_fmul>
 8004260:	4603      	mov	r3, r0
 8004262:	4619      	mov	r1, r3
 8004264:	4628      	mov	r0, r5
 8004266:	f7fc fced 	bl	8000c44 <__addsf3>
 800426a:	4603      	mov	r3, r0
 800426c:	461d      	mov	r5, r3
 800426e:	4b5a      	ldr	r3, [pc, #360]	@ (80043d8 <update_ahrs+0xcc0>)
 8004270:	6a1c      	ldr	r4, [r3, #32]
 8004272:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc fd98 	bl	8000dac <__aeabi_i2f>
 800427c:	4603      	mov	r3, r0
 800427e:	4619      	mov	r1, r3
 8004280:	4620      	mov	r0, r4
 8004282:	f7fc fde7 	bl	8000e54 <__aeabi_fmul>
 8004286:	4603      	mov	r3, r0
 8004288:	4619      	mov	r1, r3
 800428a:	4628      	mov	r0, r5
 800428c:	f7fc fcda 	bl	8000c44 <__addsf3>
 8004290:	4603      	mov	r3, r0
 8004292:	4618      	mov	r0, r3
 8004294:	f7fc ffba 	bl	800120c <__aeabi_f2iz>
 8004298:	4603      	mov	r3, r0
 800429a:	827b      	strh	r3, [r7, #18]
	acc_Eframez -= 2000;
 800429c:	8a7b      	ldrh	r3, [r7, #18]
 800429e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	827b      	strh	r3, [r7, #18]


	const float accTrueScale = 9.81f/2000.0f; // 2048
 80042a6:	4b4d      	ldr	r3, [pc, #308]	@ (80043dc <update_ahrs+0xcc4>)
 80042a8:	60fb      	str	r3, [r7, #12]
	acc_Eframe[X] = acc_Eframex*accTrueScale;
 80042aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fc fd7c 	bl	8000dac <__aeabi_i2f>
 80042b4:	4603      	mov	r3, r0
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fc fdcb 	bl	8000e54 <__aeabi_fmul>
 80042be:	4603      	mov	r3, r0
 80042c0:	461a      	mov	r2, r3
 80042c2:	4b47      	ldr	r3, [pc, #284]	@ (80043e0 <update_ahrs+0xcc8>)
 80042c4:	601a      	str	r2, [r3, #0]
	acc_Eframe[Y] = acc_Eframey*accTrueScale;
 80042c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fc fd6e 	bl	8000dac <__aeabi_i2f>
 80042d0:	4603      	mov	r3, r0
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fc fdbd 	bl	8000e54 <__aeabi_fmul>
 80042da:	4603      	mov	r3, r0
 80042dc:	461a      	mov	r2, r3
 80042de:	4b40      	ldr	r3, [pc, #256]	@ (80043e0 <update_ahrs+0xcc8>)
 80042e0:	605a      	str	r2, [r3, #4]
	acc_Eframe[Z] = acc_Eframez*accTrueScale;
 80042e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fc fd60 	bl	8000dac <__aeabi_i2f>
 80042ec:	4603      	mov	r3, r0
 80042ee:	68f9      	ldr	r1, [r7, #12]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fc fdaf 	bl	8000e54 <__aeabi_fmul>
 80042f6:	4603      	mov	r3, r0
 80042f8:	461a      	mov	r2, r3
 80042fa:	4b39      	ldr	r3, [pc, #228]	@ (80043e0 <update_ahrs+0xcc8>)
 80042fc:	609a      	str	r2, [r3, #8]

	acc_Eframe[X] = fapplyDeadband(acc_Eframe[X],0.02);
 80042fe:	4b38      	ldr	r3, [pc, #224]	@ (80043e0 <update_ahrs+0xcc8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4938      	ldr	r1, [pc, #224]	@ (80043e4 <update_ahrs+0xccc>)
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fa47 	bl	8004798 <fapplyDeadband>
 800430a:	4603      	mov	r3, r0
 800430c:	4a34      	ldr	r2, [pc, #208]	@ (80043e0 <update_ahrs+0xcc8>)
 800430e:	6013      	str	r3, [r2, #0]
	acc_Eframe[Y] = fapplyDeadband(acc_Eframe[Y],0.02);
 8004310:	4b33      	ldr	r3, [pc, #204]	@ (80043e0 <update_ahrs+0xcc8>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	4933      	ldr	r1, [pc, #204]	@ (80043e4 <update_ahrs+0xccc>)
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fa3e 	bl	8004798 <fapplyDeadband>
 800431c:	4603      	mov	r3, r0
 800431e:	4a30      	ldr	r2, [pc, #192]	@ (80043e0 <update_ahrs+0xcc8>)
 8004320:	6053      	str	r3, [r2, #4]
	acc_Eframe[Z] = fapplyDeadband(acc_Eframe[Z],0.02);
 8004322:	4b2f      	ldr	r3, [pc, #188]	@ (80043e0 <update_ahrs+0xcc8>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	492f      	ldr	r1, [pc, #188]	@ (80043e4 <update_ahrs+0xccc>)
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fa35 	bl	8004798 <fapplyDeadband>
 800432e:	4603      	mov	r3, r0
 8004330:	4a2b      	ldr	r2, [pc, #172]	@ (80043e0 <update_ahrs+0xcc8>)
 8004332:	6093      	str	r3, [r2, #8]

    if(millis() - init_us < 5000){
 8004334:	4b2c      	ldr	r3, [pc, #176]	@ (80043e8 <update_ahrs+0xcd0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800433c:	4b2b      	ldr	r3, [pc, #172]	@ (80043ec <update_ahrs+0xcd4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4413      	add	r3, r2
 8004342:	4a2b      	ldr	r2, [pc, #172]	@ (80043f0 <update_ahrs+0xcd8>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	099a      	lsrs	r2, r3, #6
 800434a:	4b2a      	ldr	r3, [pc, #168]	@ (80043f4 <update_ahrs+0xcdc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f241 3287 	movw	r2, #4999	@ 0x1387
 8004354:	4293      	cmp	r3, r2
 8004356:	d80b      	bhi.n	8004370 <update_ahrs+0xc58>
    	acc_Eframe[X] = 0;
 8004358:	4b21      	ldr	r3, [pc, #132]	@ (80043e0 <update_ahrs+0xcc8>)
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
    	acc_Eframe[Y] = 0;
 8004360:	4b1f      	ldr	r3, [pc, #124]	@ (80043e0 <update_ahrs+0xcc8>)
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	605a      	str	r2, [r3, #4]
    	acc_Eframe[Z] = 0;
 8004368:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <update_ahrs+0xcc8>)
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	609a      	str	r2, [r3, #8]

	//position_test += velocity_test*0.01f + 0.5* acc_Eframe[Z]* 0.01f * 0.01f;

	//velocity_test += acc_Eframe[Z]*0.01f;

	AHRS.pitch = -atan2_approx(-dcm[0][2],sqrtf(1 - dcm[0][2]*dcm[0][2]))*DEG;
 8004370:	4b19      	ldr	r3, [pc, #100]	@ (80043d8 <update_ahrs+0xcc0>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8004378:	4b17      	ldr	r3, [pc, #92]	@ (80043d8 <update_ahrs+0xcc0>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4a16      	ldr	r2, [pc, #88]	@ (80043d8 <update_ahrs+0xcc0>)
 800437e:	6892      	ldr	r2, [r2, #8]
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f7fc fd66 	bl	8000e54 <__aeabi_fmul>
 8004388:	4603      	mov	r3, r0
 800438a:	4619      	mov	r1, r3
 800438c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004390:	f7fc fc56 	bl	8000c40 <__aeabi_fsub>
 8004394:	4603      	mov	r3, r0
 8004396:	4618      	mov	r0, r3
 8004398:	f010 fffd 	bl	8015396 <sqrtf>
 800439c:	4603      	mov	r3, r0
 800439e:	4619      	mov	r1, r3
 80043a0:	4620      	mov	r0, r4
 80043a2:	f000 f939 	bl	8004618 <atan2_approx>
 80043a6:	4603      	mov	r3, r0
 80043a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80043ac:	4912      	ldr	r1, [pc, #72]	@ (80043f8 <update_ahrs+0xce0>)
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fc fd50 	bl	8000e54 <__aeabi_fmul>
 80043b4:	4603      	mov	r3, r0
 80043b6:	461a      	mov	r2, r3
 80043b8:	4b10      	ldr	r3, [pc, #64]	@ (80043fc <update_ahrs+0xce4>)
 80043ba:	605a      	str	r2, [r3, #4]
	AHRS.roll = -atan2_approx(-dcm[1][2],dcm[2][2])*DEG;
 80043bc:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <update_ahrs+0xcc0>)
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80043c4:	4a04      	ldr	r2, [pc, #16]	@ (80043d8 <update_ahrs+0xcc0>)
 80043c6:	6a12      	ldr	r2, [r2, #32]
 80043c8:	4611      	mov	r1, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f924 	bl	8004618 <atan2_approx>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80043d6:	e013      	b.n	8004400 <update_ahrs+0xce8>
 80043d8:	200005a8 	.word	0x200005a8
 80043dc:	3ba0ba20 	.word	0x3ba0ba20
 80043e0:	20000590 	.word	0x20000590
 80043e4:	3ca3d70a 	.word	0x3ca3d70a
 80043e8:	200005ec 	.word	0x200005ec
 80043ec:	200005f0 	.word	0x200005f0
 80043f0:	10624dd3 	.word	0x10624dd3
 80043f4:	200005cc 	.word	0x200005cc
 80043f8:	42652ee0 	.word	0x42652ee0
 80043fc:	2000056c 	.word	0x2000056c
 8004400:	4932      	ldr	r1, [pc, #200]	@ (80044cc <update_ahrs+0xdb4>)
 8004402:	4618      	mov	r0, r3
 8004404:	f7fc fd26 	bl	8000e54 <__aeabi_fmul>
 8004408:	4603      	mov	r3, r0
 800440a:	461a      	mov	r2, r3
 800440c:	4b30      	ldr	r3, [pc, #192]	@ (80044d0 <update_ahrs+0xdb8>)
 800440e:	601a      	str	r2, [r3, #0]
	float yaw_ = -atan2_approx(dcm[0][1],dcm[0][0])*DEG;
 8004410:	4b30      	ldr	r3, [pc, #192]	@ (80044d4 <update_ahrs+0xdbc>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	4a2f      	ldr	r2, [pc, #188]	@ (80044d4 <update_ahrs+0xdbc>)
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	4611      	mov	r1, r2
 800441a:	4618      	mov	r0, r3
 800441c:	f000 f8fc 	bl	8004618 <atan2_approx>
 8004420:	4603      	mov	r3, r0
 8004422:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004426:	4929      	ldr	r1, [pc, #164]	@ (80044cc <update_ahrs+0xdb4>)
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc fd13 	bl	8000e54 <__aeabi_fmul>
 800442e:	4603      	mov	r3, r0
 8004430:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	if(yaw_ < 0){
 8004434:	f04f 0100 	mov.w	r1, #0
 8004438:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800443c:	f7fc fea8 	bl	8001190 <__aeabi_fcmplt>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <update_ahrs+0xd3e>
		 yaw_ = 360 + yaw_;
 8004446:	4924      	ldr	r1, [pc, #144]	@ (80044d8 <update_ahrs+0xdc0>)
 8004448:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800444c:	f7fc fbfa 	bl	8000c44 <__addsf3>
 8004450:	4603      	mov	r3, r0
 8004452:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	}
	AHRS.yaw =  yaw_;
 8004456:	4a1e      	ldr	r2, [pc, #120]	@ (80044d0 <update_ahrs+0xdb8>)
 8004458:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800445c:	6093      	str	r3, [r2, #8]
	AHRS.roll_rate  = gx_/config.gyr_lsb;
 800445e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004462:	4618      	mov	r0, r3
 8004464:	f7fc fca2 	bl	8000dac <__aeabi_i2f>
 8004468:	4602      	mov	r2, r0
 800446a:	4b1c      	ldr	r3, [pc, #112]	@ (80044dc <update_ahrs+0xdc4>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f7fc fda3 	bl	8000fbc <__aeabi_fdiv>
 8004476:	4603      	mov	r3, r0
 8004478:	461a      	mov	r2, r3
 800447a:	4b15      	ldr	r3, [pc, #84]	@ (80044d0 <update_ahrs+0xdb8>)
 800447c:	60da      	str	r2, [r3, #12]
	AHRS.pitch_rate = -gy_/config.gyr_lsb;
 800447e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004482:	425b      	negs	r3, r3
 8004484:	4618      	mov	r0, r3
 8004486:	f7fc fc91 	bl	8000dac <__aeabi_i2f>
 800448a:	4602      	mov	r2, r0
 800448c:	4b13      	ldr	r3, [pc, #76]	@ (80044dc <update_ahrs+0xdc4>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f7fc fd92 	bl	8000fbc <__aeabi_fdiv>
 8004498:	4603      	mov	r3, r0
 800449a:	461a      	mov	r2, r3
 800449c:	4b0c      	ldr	r3, [pc, #48]	@ (80044d0 <update_ahrs+0xdb8>)
 800449e:	611a      	str	r2, [r3, #16]
	AHRS.yaw_rate   = -gz_/config.gyr_lsb;
 80044a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044a4:	425b      	negs	r3, r3
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fc fc80 	bl	8000dac <__aeabi_i2f>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <update_ahrs+0xdc4>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	4619      	mov	r1, r3
 80044b4:	4610      	mov	r0, r2
 80044b6:	f7fc fd81 	bl	8000fbc <__aeabi_fdiv>
 80044ba:	4603      	mov	r3, r0
 80044bc:	461a      	mov	r2, r3
 80044be:	4b04      	ldr	r3, [pc, #16]	@ (80044d0 <update_ahrs+0xdb8>)
 80044c0:	615a      	str	r2, [r3, #20]

}
 80044c2:	bf00      	nop
 80044c4:	37a0      	adds	r7, #160	@ 0xa0
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bdb0      	pop	{r4, r5, r7, pc}
 80044ca:	bf00      	nop
 80044cc:	42652ee0 	.word	0x42652ee0
 80044d0:	2000056c 	.word	0x2000056c
 80044d4:	200005a8 	.word	0x200005a8
 80044d8:	43b40000 	.word	0x43b40000
 80044dc:	20000018 	.word	0x20000018

080044e0 <sin_approx>:
#define sinPolyCoef5  8.333017292e-3f                                          // Double:  8.333017291562218127986291618761571373087e-3
#define sinPolyCoef7 -1.980661520e-4f                                          // Double: -1.980661520135080504411629636078917643846e-4
#define sinPolyCoef9  2.600054768e-6f                                          // Double:  2.600054767890361277123254766503271638682e-6
#endif
float sin_approx(float x)
{
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
    int32_t xint = x;
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7fc fe8f 	bl	800120c <__aeabi_f2iz>
 80044ee:	4603      	mov	r3, r0
 80044f0:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f113 0f20 	cmn.w	r3, #32
 80044f8:	db02      	blt.n	8004500 <sin_approx+0x20>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	dd08      	ble.n	8004512 <sin_approx+0x32>
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	e074      	b.n	80045f0 <sin_approx+0x110>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 8004506:	493c      	ldr	r1, [pc, #240]	@ (80045f8 <sin_approx+0x118>)
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7fc fb99 	bl	8000c40 <__aeabi_fsub>
 800450e:	4603      	mov	r3, r0
 8004510:	607b      	str	r3, [r7, #4]
 8004512:	493a      	ldr	r1, [pc, #232]	@ (80045fc <sin_approx+0x11c>)
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7fc fe59 	bl	80011cc <__aeabi_fcmpgt>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f2      	bne.n	8004506 <sin_approx+0x26>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 8004520:	e005      	b.n	800452e <sin_approx+0x4e>
 8004522:	4935      	ldr	r1, [pc, #212]	@ (80045f8 <sin_approx+0x118>)
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7fc fb8d 	bl	8000c44 <__addsf3>
 800452a:	4603      	mov	r3, r0
 800452c:	607b      	str	r3, [r7, #4]
 800452e:	4934      	ldr	r1, [pc, #208]	@ (8004600 <sin_approx+0x120>)
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7fc fe2d 	bl	8001190 <__aeabi_fcmplt>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f2      	bne.n	8004522 <sin_approx+0x42>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 800453c:	4931      	ldr	r1, [pc, #196]	@ (8004604 <sin_approx+0x124>)
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fc fe44 	bl	80011cc <__aeabi_fcmpgt>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00b      	beq.n	8004562 <sin_approx+0x82>
 800454a:	492e      	ldr	r1, [pc, #184]	@ (8004604 <sin_approx+0x124>)
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7fc fb77 	bl	8000c40 <__aeabi_fsub>
 8004552:	4603      	mov	r3, r0
 8004554:	4619      	mov	r1, r3
 8004556:	482b      	ldr	r0, [pc, #172]	@ (8004604 <sin_approx+0x124>)
 8004558:	f7fc fb72 	bl	8000c40 <__aeabi_fsub>
 800455c:	4603      	mov	r3, r0
 800455e:	607b      	str	r3, [r7, #4]
 8004560:	e011      	b.n	8004586 <sin_approx+0xa6>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 8004562:	4929      	ldr	r1, [pc, #164]	@ (8004608 <sin_approx+0x128>)
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7fc fe13 	bl	8001190 <__aeabi_fcmplt>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <sin_approx+0xa6>
 8004570:	4924      	ldr	r1, [pc, #144]	@ (8004604 <sin_approx+0x124>)
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fc fb66 	bl	8000c44 <__addsf3>
 8004578:	4603      	mov	r3, r0
 800457a:	4619      	mov	r1, r3
 800457c:	4822      	ldr	r0, [pc, #136]	@ (8004608 <sin_approx+0x128>)
 800457e:	f7fc fb5f 	bl	8000c40 <__aeabi_fsub>
 8004582:	4603      	mov	r3, r0
 8004584:	607b      	str	r3, [r7, #4]
    float x2 = x * x;
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7fc fc63 	bl	8000e54 <__aeabi_fmul>
 800458e:	4603      	mov	r3, r0
 8004590:	60bb      	str	r3, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7fc fc5d 	bl	8000e54 <__aeabi_fmul>
 800459a:	4603      	mov	r3, r0
 800459c:	461c      	mov	r4, r3
 800459e:	f04f 0100 	mov.w	r1, #0
 80045a2:	68b8      	ldr	r0, [r7, #8]
 80045a4:	f7fc fc56 	bl	8000e54 <__aeabi_fmul>
 80045a8:	4603      	mov	r3, r0
 80045aa:	4918      	ldr	r1, [pc, #96]	@ (800460c <sin_approx+0x12c>)
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fc fb47 	bl	8000c40 <__aeabi_fsub>
 80045b2:	4603      	mov	r3, r0
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fc fc4c 	bl	8000e54 <__aeabi_fmul>
 80045bc:	4603      	mov	r3, r0
 80045be:	4914      	ldr	r1, [pc, #80]	@ (8004610 <sin_approx+0x130>)
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fc fb3f 	bl	8000c44 <__addsf3>
 80045c6:	4603      	mov	r3, r0
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fc fc42 	bl	8000e54 <__aeabi_fmul>
 80045d0:	4603      	mov	r3, r0
 80045d2:	4910      	ldr	r1, [pc, #64]	@ (8004614 <sin_approx+0x134>)
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fc fb33 	bl	8000c40 <__aeabi_fsub>
 80045da:	4603      	mov	r3, r0
 80045dc:	4619      	mov	r1, r3
 80045de:	4620      	mov	r0, r4
 80045e0:	f7fc fc38 	bl	8000e54 <__aeabi_fmul>
 80045e4:	4603      	mov	r3, r0
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fc fb2b 	bl	8000c44 <__addsf3>
 80045ee:	4603      	mov	r3, r0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd90      	pop	{r4, r7, pc}
 80045f8:	40c90fdb 	.word	0x40c90fdb
 80045fc:	40490fdb 	.word	0x40490fdb
 8004600:	c0490fdb 	.word	0xc0490fdb
 8004604:	3fc90fdb 	.word	0x3fc90fdb
 8004608:	bfc90fdb 	.word	0xbfc90fdb
 800460c:	3941e792 	.word	0x3941e792
 8004610:	3c083097 	.word	0x3c083097
 8004614:	3e2aa815 	.word	0x3e2aa815

08004618 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 8004618:	b590      	push	{r4, r7, lr}
 800461a:	b08b      	sub	sp, #44	@ 0x2c
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004628:	623b      	str	r3, [r7, #32]
    absY = fabsf(y);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004630:	61fb      	str	r3, [r7, #28]
    res  = MAX(absX, absY);
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	6979      	ldr	r1, [r7, #20]
 800463c:	69b8      	ldr	r0, [r7, #24]
 800463e:	f7fc fdc5 	bl	80011cc <__aeabi_fcmpgt>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <atan2_approx+0x34>
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	e000      	b.n	800464e <atan2_approx+0x36>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (res) res = MIN(absX, absY) / res;
 8004650:	f04f 0100 	mov.w	r1, #0
 8004654:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004656:	f7fc fd91 	bl	800117c <__aeabi_fcmpeq>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d114      	bne.n	800468a <atan2_approx+0x72>
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68f9      	ldr	r1, [r7, #12]
 800466a:	6938      	ldr	r0, [r7, #16]
 800466c:	f7fc fd90 	bl	8001190 <__aeabi_fcmplt>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <atan2_approx+0x62>
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	e000      	b.n	800467c <atan2_approx+0x64>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800467e:	4618      	mov	r0, r3
 8004680:	f7fc fc9c 	bl	8000fbc <__aeabi_fdiv>
 8004684:	4603      	mov	r3, r0
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
 8004688:	e002      	b.n	8004690 <atan2_approx+0x78>
    else res = 0.0f;
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	627b      	str	r3, [r7, #36]	@ 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 8004690:	4938      	ldr	r1, [pc, #224]	@ (8004774 <atan2_approx+0x15c>)
 8004692:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004694:	f7fc fbde 	bl	8000e54 <__aeabi_fmul>
 8004698:	4603      	mov	r3, r0
 800469a:	4937      	ldr	r1, [pc, #220]	@ (8004778 <atan2_approx+0x160>)
 800469c:	4618      	mov	r0, r3
 800469e:	f7fc facf 	bl	8000c40 <__aeabi_fsub>
 80046a2:	4603      	mov	r3, r0
 80046a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fc fbd4 	bl	8000e54 <__aeabi_fmul>
 80046ac:	4603      	mov	r3, r0
 80046ae:	4933      	ldr	r1, [pc, #204]	@ (800477c <atan2_approx+0x164>)
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fc fac5 	bl	8000c40 <__aeabi_fsub>
 80046b6:	4603      	mov	r3, r0
 80046b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fc fbca 	bl	8000e54 <__aeabi_fmul>
 80046c0:	4603      	mov	r3, r0
 80046c2:	492f      	ldr	r1, [pc, #188]	@ (8004780 <atan2_approx+0x168>)
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fc fabb 	bl	8000c40 <__aeabi_fsub>
 80046ca:	4603      	mov	r3, r0
 80046cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fc fbc0 	bl	8000e54 <__aeabi_fmul>
 80046d4:	4603      	mov	r3, r0
 80046d6:	492b      	ldr	r1, [pc, #172]	@ (8004784 <atan2_approx+0x16c>)
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fc fab1 	bl	8000c40 <__aeabi_fsub>
 80046de:	4603      	mov	r3, r0
 80046e0:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80046e4:	4928      	ldr	r1, [pc, #160]	@ (8004788 <atan2_approx+0x170>)
 80046e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046e8:	f7fc fbb4 	bl	8000e54 <__aeabi_fmul>
 80046ec:	4603      	mov	r3, r0
 80046ee:	4927      	ldr	r1, [pc, #156]	@ (800478c <atan2_approx+0x174>)
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fc faa7 	bl	8000c44 <__addsf3>
 80046f6:	4603      	mov	r3, r0
 80046f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fc fbaa 	bl	8000e54 <__aeabi_fmul>
 8004700:	4603      	mov	r3, r0
 8004702:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004706:	4618      	mov	r0, r3
 8004708:	f7fc fa9c 	bl	8000c44 <__addsf3>
 800470c:	4603      	mov	r3, r0
 800470e:	4619      	mov	r1, r3
 8004710:	4620      	mov	r0, r4
 8004712:	f7fc fc53 	bl	8000fbc <__aeabi_fdiv>
 8004716:	4603      	mov	r3, r0
 8004718:	627b      	str	r3, [r7, #36]	@ 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 800471a:	6a39      	ldr	r1, [r7, #32]
 800471c:	69f8      	ldr	r0, [r7, #28]
 800471e:	f7fc fd55 	bl	80011cc <__aeabi_fcmpgt>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <atan2_approx+0x11c>
 8004728:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800472a:	4819      	ldr	r0, [pc, #100]	@ (8004790 <atan2_approx+0x178>)
 800472c:	f7fc fa88 	bl	8000c40 <__aeabi_fsub>
 8004730:	4603      	mov	r3, r0
 8004732:	627b      	str	r3, [r7, #36]	@ 0x24
    if (x < 0) res = M_PIf - res;
 8004734:	f04f 0100 	mov.w	r1, #0
 8004738:	6838      	ldr	r0, [r7, #0]
 800473a:	f7fc fd29 	bl	8001190 <__aeabi_fcmplt>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <atan2_approx+0x138>
 8004744:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004746:	4813      	ldr	r0, [pc, #76]	@ (8004794 <atan2_approx+0x17c>)
 8004748:	f7fc fa7a 	bl	8000c40 <__aeabi_fsub>
 800474c:	4603      	mov	r3, r0
 800474e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) res = -res;
 8004750:	f04f 0100 	mov.w	r1, #0
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7fc fd1b 	bl	8001190 <__aeabi_fcmplt>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <atan2_approx+0x150>
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
    return res;
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800476a:	4618      	mov	r0, r3
 800476c:	372c      	adds	r7, #44	@ 0x2c
 800476e:	46bd      	mov	sp, r7
 8004770:	bd90      	pop	{r4, r7, pc}
 8004772:	bf00      	nop
 8004774:	3d4e0939 	.word	0x3d4e0939
 8004778:	3e9eb5e3 	.word	0x3e9eb5e3
 800477c:	3e16fa88 	.word	0x3e16fa88
 8004780:	3f7ffe45 	.word	0x3f7ffe45
 8004784:	34a8dfa7 	.word	0x34a8dfa7
 8004788:	3f24fb99 	.word	0x3f24fb99
 800478c:	3e16a269 	.word	0x3e16a269
 8004790:	3fc90fdb 	.word	0x3fc90fdb
 8004794:	40490fdb 	.word	0x40490fdb

08004798 <fapplyDeadband>:

    return value >= 0 ? value - deadband : value + deadband;
}

float fapplyDeadband(const float value, const float deadband)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
    if (fabsf(value) < deadband) {
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047a8:	4619      	mov	r1, r3
 80047aa:	6838      	ldr	r0, [r7, #0]
 80047ac:	f7fc fd0e 	bl	80011cc <__aeabi_fcmpgt>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <fapplyDeadband+0x24>
        return 0;
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	e012      	b.n	80047e2 <fapplyDeadband+0x4a>
    }

    return value >= 0 ? value - deadband : value + deadband;
 80047bc:	f04f 0100 	mov.w	r1, #0
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7fc fcf9 	bl	80011b8 <__aeabi_fcmpge>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <fapplyDeadband+0x40>
 80047cc:	6839      	ldr	r1, [r7, #0]
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fc fa36 	bl	8000c40 <__aeabi_fsub>
 80047d4:	4603      	mov	r3, r0
 80047d6:	e004      	b.n	80047e2 <fapplyDeadband+0x4a>
 80047d8:	6839      	ldr	r1, [r7, #0]
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fc fa32 	bl	8000c44 <__addsf3>
 80047e0:	4603      	mov	r3, r0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <invSqrt_>:
    return (num << 12) / den;
}


float invSqrt_(float x)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 80047f4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7fc fb2b 	bl	8000e54 <__aeabi_fmul>
 80047fe:	4603      	mov	r3, r0
 8004800:	617b      	str	r3, [r7, #20]
	float y = x;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8004806:	f107 0310 	add.w	r3, r7, #16
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	105a      	asrs	r2, r3, #1
 8004812:	4b13      	ldr	r3, [pc, #76]	@ (8004860 <invSqrt_+0x74>)
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8004818:	f107 030c 	add.w	r3, r7, #12
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	6979      	ldr	r1, [r7, #20]
 8004824:	4618      	mov	r0, r3
 8004826:	f7fc fb15 	bl	8000e54 <__aeabi_fmul>
 800482a:	4603      	mov	r3, r0
 800482c:	461a      	mov	r2, r3
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f7fc fb0e 	bl	8000e54 <__aeabi_fmul>
 8004838:	4603      	mov	r3, r0
 800483a:	4619      	mov	r1, r3
 800483c:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8004840:	f7fc f9fe 	bl	8000c40 <__aeabi_fsub>
 8004844:	4603      	mov	r3, r0
 8004846:	461a      	mov	r2, r3
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f7fc fb01 	bl	8000e54 <__aeabi_fmul>
 8004852:	4603      	mov	r3, r0
 8004854:	613b      	str	r3, [r7, #16]
	//y = y * (1.5f - (halfx * y * y));
	return y;
 8004856:	693b      	ldr	r3, [r7, #16]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	5f3759df 	.word	0x5f3759df

08004864 <constrainf>:
    else
        return amt;
}

static inline float constrainf(float amt, float low, float high)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7fc fc8c 	bl	8001190 <__aeabi_fcmplt>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <constrainf+0x1e>
        return low;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	e009      	b.n	8004896 <constrainf+0x32>
    else if (amt > high)
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7fc fca1 	bl	80011cc <__aeabi_fcmpgt>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <constrainf+0x30>
        return high;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	e000      	b.n	8004896 <constrainf+0x32>
    else
        return amt;
 8004894:	68fb      	ldr	r3, [r7, #12]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <pid_init>:
#include "filter.h"
#include "maths.h"
#include "timer.h"
#include "string.h"

void pid_init(pid_t  *pid_in,float kp, float ki, float kd, float f_cut_D, float maxI){
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	603b      	str	r3, [r7, #0]
  memset(pid_in,0,sizeof(pid_t));
 80048ac:	2224      	movs	r2, #36	@ 0x24
 80048ae:	2100      	movs	r1, #0
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f010 fcad 	bl	8015210 <memset>
  pid_in->kp = kp;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	601a      	str	r2, [r3, #0]
  pid_in->ki = ki;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	605a      	str	r2, [r3, #4]
  pid_in->kd = kd;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	609a      	str	r2, [r3, #8]
  pid_in->f_cut_D = f_cut_D;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	61da      	str	r2, [r3, #28]
  pid_in->I_range = maxI;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	619a      	str	r2, [r3, #24]
  pid_in->last_input = 0;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	611a      	str	r2, [r3, #16]
  pid_in->D_filted = 0;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	615a      	str	r2, [r3, #20]
  pid_in->init = 1;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2020 	strb.w	r2, [r3, #32]
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <pid_calculate>:

float pid_calculate(pid_t *pid_in,float input, float setpoint,float scaler,float dt){
 80048f4:	b590      	push	{r4, r7, lr}
 80048f6:	b08b      	sub	sp, #44	@ 0x2c
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	603b      	str	r3, [r7, #0]
   if(pid_in->init){
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d009      	beq.n	8004920 <pid_calculate+0x2c>
       pid_in->last_input = input;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	611a      	str	r2, [r3, #16]
       pid_in->init = 0;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2020 	strb.w	r2, [r3, #32]
       return 0.0f;
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	e0a8      	b.n	8004a72 <pid_calculate+0x17e>
   }
   // Caculate P term
   float error = setpoint - input;
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fc f98c 	bl	8000c40 <__aeabi_fsub>
 8004928:	4603      	mov	r3, r0
 800492a:	623b      	str	r3, [r7, #32]
   float output = error*pid_in->kp*scaler;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6a39      	ldr	r1, [r7, #32]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fc fa8e 	bl	8000e54 <__aeabi_fmul>
 8004938:	4603      	mov	r3, r0
 800493a:	4619      	mov	r1, r3
 800493c:	6838      	ldr	r0, [r7, #0]
 800493e:	f7fc fa89 	bl	8000e54 <__aeabi_fmul>
 8004942:	4603      	mov	r3, r0
 8004944:	627b      	str	r3, [r7, #36]	@ 0x24

   // Caculate I term
   if(pid_in->ki > 0){
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f04f 0100 	mov.w	r1, #0
 800494e:	4618      	mov	r0, r3
 8004950:	f7fc fc3c 	bl	80011cc <__aeabi_fcmpgt>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d02b      	beq.n	80049b2 <pid_calculate+0xbe>
      pid_in->i_term += error *pid_in->ki *dt;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	68dc      	ldr	r4, [r3, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	6a39      	ldr	r1, [r7, #32]
 8004964:	4618      	mov	r0, r3
 8004966:	f7fc fa75 	bl	8000e54 <__aeabi_fmul>
 800496a:	4603      	mov	r3, r0
 800496c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800496e:	4618      	mov	r0, r3
 8004970:	f7fc fa70 	bl	8000e54 <__aeabi_fmul>
 8004974:	4603      	mov	r3, r0
 8004976:	4619      	mov	r1, r3
 8004978:	4620      	mov	r0, r4
 800497a:	f7fc f963 	bl	8000c44 <__addsf3>
 800497e:	4603      	mov	r3, r0
 8004980:	461a      	mov	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	60da      	str	r2, [r3, #12]
      pid_in->i_term = constrainf(pid_in->i_term,-pid_in->I_range,pid_in->I_range);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	68d8      	ldr	r0, [r3, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	461a      	mov	r2, r3
 8004998:	f7ff ff64 	bl	8004864 <constrainf>
 800499c:	4602      	mov	r2, r0
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	60da      	str	r2, [r3, #12]
      output += pid_in->i_term;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	4619      	mov	r1, r3
 80049a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049aa:	f7fc f94b 	bl	8000c44 <__addsf3>
 80049ae:	4603      	mov	r3, r0
 80049b0:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   // Caculate D term
   if(pid_in->kd > 0){
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f04f 0100 	mov.w	r1, #0
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fc fc06 	bl	80011cc <__aeabi_fcmpgt>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d054      	beq.n	8004a70 <pid_calculate+0x17c>
        // low pass filter
        float RC = 1.0f / (2 *M_PIf *pid_in->f_cut_D);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	492c      	ldr	r1, [pc, #176]	@ (8004a7c <pid_calculate+0x188>)
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fc fa41 	bl	8000e54 <__aeabi_fmul>
 80049d2:	4603      	mov	r3, r0
 80049d4:	4619      	mov	r1, r3
 80049d6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80049da:	f7fc faef 	bl	8000fbc <__aeabi_fdiv>
 80049de:	4603      	mov	r3, r0
 80049e0:	61fb      	str	r3, [r7, #28]
        float gain_lpf = dt/(RC + dt);
 80049e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80049e4:	69f8      	ldr	r0, [r7, #28]
 80049e6:	f7fc f92d 	bl	8000c44 <__addsf3>
 80049ea:	4603      	mov	r3, r0
 80049ec:	4619      	mov	r1, r3
 80049ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80049f0:	f7fc fae4 	bl	8000fbc <__aeabi_fdiv>
 80049f4:	4603      	mov	r3, r0
 80049f6:	61bb      	str	r3, [r7, #24]
        float delta =  (input - pid_in->last_input)*pid_in->kd;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	4619      	mov	r1, r3
 80049fe:	68b8      	ldr	r0, [r7, #8]
 8004a00:	f7fc f91e 	bl	8000c40 <__aeabi_fsub>
 8004a04:	4603      	mov	r3, r0
 8004a06:	461a      	mov	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f7fc fa20 	bl	8000e54 <__aeabi_fmul>
 8004a14:	4603      	mov	r3, r0
 8004a16:	617b      	str	r3, [r7, #20]
        pid_in->last_input = input;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	611a      	str	r2, [r3, #16]
        delta /= dt;
 8004a1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a20:	6978      	ldr	r0, [r7, #20]
 8004a22:	f7fc facb 	bl	8000fbc <__aeabi_fdiv>
 8004a26:	4603      	mov	r3, r0
 8004a28:	617b      	str	r3, [r7, #20]
        pid_in->D_filted += gain_lpf*(delta - pid_in->D_filted);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	695c      	ldr	r4, [r3, #20]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	4619      	mov	r1, r3
 8004a34:	6978      	ldr	r0, [r7, #20]
 8004a36:	f7fc f903 	bl	8000c40 <__aeabi_fsub>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	69b9      	ldr	r1, [r7, #24]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fc fa08 	bl	8000e54 <__aeabi_fmul>
 8004a44:	4603      	mov	r3, r0
 8004a46:	4619      	mov	r1, r3
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f7fc f8fb 	bl	8000c44 <__addsf3>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	461a      	mov	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	615a      	str	r2, [r3, #20]
        output -= pid_in->D_filted*scaler;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	6839      	ldr	r1, [r7, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fc f9f9 	bl	8000e54 <__aeabi_fmul>
 8004a62:	4603      	mov	r3, r0
 8004a64:	4619      	mov	r1, r3
 8004a66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a68:	f7fc f8ea 	bl	8000c40 <__aeabi_fsub>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   return output;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	372c      	adds	r7, #44	@ 0x2c
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd90      	pop	{r4, r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40c90fdb 	.word	0x40c90fdb

08004a80 <constrain>:
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	da01      	bge.n	8004a98 <constrain+0x18>
        return low;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	e006      	b.n	8004aa6 <constrain+0x26>
    else if (amt > high)
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	dd01      	ble.n	8004aa4 <constrain+0x24>
        return high;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	e000      	b.n	8004aa6 <constrain+0x26>
        return amt;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <initPWM>:
uint8_t pwm_lock_status;

/*
 * init pwm 
 */
void initPWM(TIM_HandleTypeDef *htim){
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	htimm = htim;
 8004ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b2c <initPWM+0x7c>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6013      	str	r3, [r2, #0]
	pr_status = 1;
 8004abe:	4b1c      	ldr	r3, [pc, #112]	@ (8004b30 <initPWM+0x80>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	701a      	strb	r2, [r3, #0]
	pwm_lock_status = 0;
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b34 <initPWM+0x84>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	701a      	strb	r2, [r3, #0]
	pwm_last_update_ms= 0;
 8004aca:	4b1b      	ldr	r3, [pc, #108]	@ (8004b38 <initPWM+0x88>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch1);
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f007 fb7e 	bl	800c1d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch2);
 8004ad8:	2104      	movs	r1, #4
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f007 fb7a 	bl	800c1d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch3);
 8004ae0:	2108      	movs	r1, #8
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f007 fb76 	bl	800c1d4 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim,ch4);
	__HAL_TIM_SetAutoreload(htimm,PWM_RELOAD_AFFTER);
 8004ae8:	4b10      	ldr	r3, [pc, #64]	@ (8004b2c <initPWM+0x7c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004af2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004af4:	4b0d      	ldr	r3, [pc, #52]	@ (8004b2c <initPWM+0x7c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004afc:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SetCompare (htimm,ch1,1000);
 8004afe:	4b0b      	ldr	r3, [pc, #44]	@ (8004b2c <initPWM+0x7c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b08:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare (htimm,ch2,1500);
 8004b0a:	4b08      	ldr	r3, [pc, #32]	@ (8004b2c <initPWM+0x7c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004b14:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare (htimm,ch3,1500);
 8004b16:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <initPWM+0x7c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004b20:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	200005e0 	.word	0x200005e0
 8004b30:	200005e8 	.word	0x200005e8
 8004b34:	200005e9 	.word	0x200005e9
 8004b38:	200005e4 	.word	0x200005e4

08004b3c <writePwm>:


void writePwm(uint32_t Channel,int16_t dulty,int8_t invert)
{     if( invert){
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	807b      	strh	r3, [r7, #2]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	707b      	strb	r3, [r7, #1]
 8004b4c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <writePwm+0x2c>
	    dulty -= 1000;
 8004b54:	887b      	ldrh	r3, [r7, #2]
 8004b56:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	807b      	strh	r3, [r7, #2]
	    dulty  = 2000 - dulty; 
 8004b5e:	887b      	ldrh	r3, [r7, #2]
 8004b60:	f5c3 63fa 	rsb	r3, r3, #2000	@ 0x7d0
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	807b      	strh	r3, [r7, #2]
      }
	  dulty = constrain(dulty,1000,2000);
 8004b68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b6c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004b70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff ff83 	bl	8004a80 <constrain>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <writePwm+0x56>
 8004b84:	4b12      	ldr	r3, [pc, #72]	@ (8004bd0 <writePwm+0x94>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004b8e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004b90:	e019      	b.n	8004bc6 <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d106      	bne.n	8004ba6 <writePwm+0x6a>
 8004b98:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd0 <writePwm+0x94>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ba2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004ba4:	e00f      	b.n	8004bc6 <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d106      	bne.n	8004bba <writePwm+0x7e>
 8004bac:	4b08      	ldr	r3, [pc, #32]	@ (8004bd0 <writePwm+0x94>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bb6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8004bb8:	e005      	b.n	8004bc6 <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8004bba:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <writePwm+0x94>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bc4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8004bc6:	bf00      	nop
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	200005e0 	.word	0x200005e0

08004bd4 <write_pwm_ctrl>:

void write_pwm_ctrl(uint16_t throtlle,uint16_t servoL,uint16_t servoR){
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	80fb      	strh	r3, [r7, #6]
 8004bde:	460b      	mov	r3, r1
 8004be0:	80bb      	strh	r3, [r7, #4]
 8004be2:	4613      	mov	r3, r2
 8004be4:	807b      	strh	r3, [r7, #2]
      if(pr_status || pwm_lock_status){
 8004be6:	4b17      	ldr	r3, [pc, #92]	@ (8004c44 <write_pwm_ctrl+0x70>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d103      	bne.n	8004bf6 <write_pwm_ctrl+0x22>
 8004bee:	4b16      	ldr	r3, [pc, #88]	@ (8004c48 <write_pwm_ctrl+0x74>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d008      	beq.n	8004c08 <write_pwm_ctrl+0x34>
           pwm_last_update_ms = HAL_GetTick();
 8004bf6:	f003 f86d 	bl	8007cd4 <HAL_GetTick>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4a13      	ldr	r2, [pc, #76]	@ (8004c4c <write_pwm_ctrl+0x78>)
 8004bfe:	6013      	str	r3, [r2, #0]
		   pr_status = 0;
 8004c00:	4b10      	ldr	r3, [pc, #64]	@ (8004c44 <write_pwm_ctrl+0x70>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]
		   return;
 8004c06:	e019      	b.n	8004c3c <write_pwm_ctrl+0x68>
	  }
	 writePwm(TIM_CHANNEL_1,throtlle,INVERT);
 8004c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	4619      	mov	r1, r3
 8004c10:	2000      	movs	r0, #0
 8004c12:	f7ff ff93 	bl	8004b3c <writePwm>
     writePwm(TIM_CHANNEL_2,servoL,INVERT);
 8004c16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	2004      	movs	r0, #4
 8004c20:	f7ff ff8c 	bl	8004b3c <writePwm>
     writePwm(TIM_CHANNEL_3,servoR,NOT_INVERT);
 8004c24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	2008      	movs	r0, #8
 8004c2e:	f7ff ff85 	bl	8004b3c <writePwm>
	pwm_last_update_ms = HAL_GetTick();
 8004c32:	f003 f84f 	bl	8007cd4 <HAL_GetTick>
 8004c36:	4603      	mov	r3, r0
 8004c38:	4a04      	ldr	r2, [pc, #16]	@ (8004c4c <write_pwm_ctrl+0x78>)
 8004c3a:	6013      	str	r3, [r2, #0]
}
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	200005e8 	.word	0x200005e8
 8004c48:	200005e9 	.word	0x200005e9
 8004c4c:	200005e4 	.word	0x200005e4

08004c50 <timer_start>:
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}

void timer_start(TIM_HandleTypeDef *htimz){
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	htimmz = htimz;
 8004c58:	4a05      	ldr	r2, [pc, #20]	@ (8004c70 <timer_start+0x20>)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htimmz);
 8004c5e:	4b04      	ldr	r3, [pc, #16]	@ (8004c70 <timer_start+0x20>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f007 f9fe 	bl	800c064 <HAL_TIM_Base_Start_IT>
}
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	200005ec 	.word	0x200005ec

08004c74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004cac <MX_DMA_Init+0x38>)
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8004cac <MX_DMA_Init+0x38>)
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	6153      	str	r3, [r2, #20]
 8004c86:	4b09      	ldr	r3, [pc, #36]	@ (8004cac <MX_DMA_Init+0x38>)
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8004c92:	2200      	movs	r2, #0
 8004c94:	2105      	movs	r1, #5
 8004c96:	200e      	movs	r0, #14
 8004c98:	f003 f8ff 	bl	8007e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004c9c:	200e      	movs	r0, #14
 8004c9e:	f003 f918 	bl	8007ed2 <HAL_NVIC_EnableIRQ>

}
 8004ca2:	bf00      	nop
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000

08004cb0 <HAL_UART_RxCpltCallback>:
#include "../flight/plane.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
    if(huart == ibus_uart_port())
 8004cb8:	f7fd fa20 	bl	80020fc <ibus_uart_port>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d102      	bne.n	8004cca <HAL_UART_RxCpltCallback+0x1a>
	{
		ibus_calback();
 8004cc4:	f7fd fa24 	bl	8002110 <ibus_calback>
    }
    else if(huart == gps_uart_port()){
        gps_callback();
    }
}
 8004cc8:	e007      	b.n	8004cda <HAL_UART_RxCpltCallback+0x2a>
    else if(huart == gps_uart_port()){
 8004cca:	f7fe fa55 	bl	8003178 <gps_uart_port>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d101      	bne.n	8004cda <HAL_UART_RxCpltCallback+0x2a>
        gps_callback();
 8004cd6:	f7fe fa59 	bl	800318c <gps_callback>
}
 8004cda:	bf00      	nop
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
    if(huart == &huart1)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a04      	ldr	r2, [pc, #16]	@ (8004d00 <HAL_UART_TxCpltCallback+0x1c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d101      	bne.n	8004cf8 <HAL_UART_TxCpltCallback+0x14>
	{
		mavlink_tx_cpl_callback();
 8004cf4:	f002 ffba 	bl	8007c6c <mavlink_tx_cpl_callback>
    }
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20000a9c 	.word	0x20000a9c

08004d04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4a06      	ldr	r2, [pc, #24]	@ (8004d2c <vApplicationGetIdleTaskMemory+0x28>)
 8004d14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4a05      	ldr	r2, [pc, #20]	@ (8004d30 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2280      	movs	r2, #128	@ 0x80
 8004d20:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr
 8004d2c:	20000608 	.word	0x20000608
 8004d30:	2000065c 	.word	0x2000065c

08004d34 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004d34:	b5b0      	push	{r4, r5, r7, lr}
 8004d36:	b0a4      	sub	sp, #144	@ 0x90
 8004d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	 timer_start(&htim7);
 8004d3a:	4832      	ldr	r0, [pc, #200]	@ (8004e04 <MX_FREERTOS_Init+0xd0>)
 8004d3c:	f7ff ff88 	bl	8004c50 <timer_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, ahrs_task, osPriorityHigh, 0, 128);
 8004d40:	4b31      	ldr	r3, [pc, #196]	@ (8004e08 <MX_FREERTOS_Init+0xd4>)
 8004d42:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8004d46:	461d      	mov	r5, r3
 8004d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8004d54:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004d58:	2100      	movs	r1, #0
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f00d fbed 	bl	801253a <osThreadCreate>
 8004d60:	4603      	mov	r3, r0
 8004d62:	4a2a      	ldr	r2, [pc, #168]	@ (8004e0c <MX_FREERTOS_Init+0xd8>)
 8004d64:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, blackbox, osPriorityLow, 0, 512);
 8004d66:	4b2a      	ldr	r3, [pc, #168]	@ (8004e10 <MX_FREERTOS_Init+0xdc>)
 8004d68:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8004d6c:	461d      	mov	r5, r3
 8004d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8004d7a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004d7e:	2100      	movs	r1, #0
 8004d80:	4618      	mov	r0, r3
 8004d82:	f00d fbda 	bl	801253a <osThreadCreate>
 8004d86:	4603      	mov	r3, r0
 8004d88:	4a22      	ldr	r2, [pc, #136]	@ (8004e14 <MX_FREERTOS_Init+0xe0>)
 8004d8a:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, led_indicate, osPriorityLow, 0, 128);
 8004d8c:	4b22      	ldr	r3, [pc, #136]	@ (8004e18 <MX_FREERTOS_Init+0xe4>)
 8004d8e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8004d92:	461d      	mov	r5, r3
 8004d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8004da0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004da4:	2100      	movs	r1, #0
 8004da6:	4618      	mov	r0, r3
 8004da8:	f00d fbc7 	bl	801253a <osThreadCreate>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4a1b      	ldr	r2, [pc, #108]	@ (8004e1c <MX_FREERTOS_Init+0xe8>)
 8004db0:	6013      	str	r3, [r2, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, read_sensor, osPriorityRealtime, 0, 128);
 8004db2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e20 <MX_FREERTOS_Init+0xec>)
 8004db4:	f107 0420 	add.w	r4, r7, #32
 8004db8:	461d      	mov	r5, r3
 8004dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004dc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 8004dc6:	f107 0320 	add.w	r3, r7, #32
 8004dca:	2100      	movs	r1, #0
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f00d fbb4 	bl	801253a <osThreadCreate>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4a13      	ldr	r2, [pc, #76]	@ (8004e24 <MX_FREERTOS_Init+0xf0>)
 8004dd6:	6013      	str	r3, [r2, #0]

  /* definition and creation of task5 */
  osThreadDef(task5, mavlinkOSD, osPriorityNormal, 0, 128);
 8004dd8:	4b13      	ldr	r3, [pc, #76]	@ (8004e28 <MX_FREERTOS_Init+0xf4>)
 8004dda:	1d3c      	adds	r4, r7, #4
 8004ddc:	461d      	mov	r5, r3
 8004dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004de2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004de6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task5Handle = osThreadCreate(osThread(task5), NULL);
 8004dea:	1d3b      	adds	r3, r7, #4
 8004dec:	2100      	movs	r1, #0
 8004dee:	4618      	mov	r0, r3
 8004df0:	f00d fba3 	bl	801253a <osThreadCreate>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4a0d      	ldr	r2, [pc, #52]	@ (8004e2c <MX_FREERTOS_Init+0xf8>)
 8004df8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8004dfa:	bf00      	nop
 8004dfc:	3790      	adds	r7, #144	@ 0x90
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bdb0      	pop	{r4, r5, r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000a54 	.word	0x20000a54
 8004e08:	08015e40 	.word	0x08015e40
 8004e0c:	200005f4 	.word	0x200005f4
 8004e10:	08015e64 	.word	0x08015e64
 8004e14:	200005f8 	.word	0x200005f8
 8004e18:	08015e88 	.word	0x08015e88
 8004e1c:	200005fc 	.word	0x200005fc
 8004e20:	08015eac 	.word	0x08015eac
 8004e24:	20000600 	.word	0x20000600
 8004e28:	08015ed0 	.word	0x08015ed0
 8004e2c:	20000604 	.word	0x20000604

08004e30 <ahrs_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ahrs_task */
void ahrs_task(void const * argument)
{
 8004e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e34:	b08b      	sub	sp, #44	@ 0x2c
 8004e36:	af06      	add	r7, sp, #24
 8004e38:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ahrs_task */
	ibus_init(&huart2);
 8004e3a:	484b      	ldr	r0, [pc, #300]	@ (8004f68 <ahrs_task+0x138>)
 8004e3c:	f7fd f92e 	bl	800209c <ibus_init>
	gps_init(&huart3,57600);
 8004e40:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8004e44:	4849      	ldr	r0, [pc, #292]	@ (8004f6c <ahrs_task+0x13c>)
 8004e46:	f7fe f921 	bl	800308c <gps_init>
	attitude_ctrl_init();
 8004e4a:	f001 fd71 	bl	8006930 <attitude_ctrl_init>
	initPWM(&htim3);
 8004e4e:	4848      	ldr	r0, [pc, #288]	@ (8004f70 <ahrs_task+0x140>)
 8004e50:	f7ff fe2e 	bl	8004ab0 <initPWM>
    baro_init();
 8004e54:	f7fd fbd2 	bl	80025fc <baro_init>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10; // 100 hz loop
 8004e58:	230a      	movs	r3, #10
 8004e5a:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8004e5c:	f00e ffac 	bl	8013db8 <xTaskGetTickCount>
 8004e60:	4603      	mov	r3, r0
 8004e62:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug
	//timer_calculate_boottime();
    if(is_baro_calibration() == FALSE){
 8004e64:	f7fd fc28 	bl	80026b8 <is_baro_calibration>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <ahrs_task+0x42>
		baro_zero_calibrate();
 8004e6e:	f7fd fbeb 	bl	8002648 <baro_zero_calibrate>
	}
    alt_baro = baro_get_altitude();
 8004e72:	f7fd fc2d 	bl	80026d0 <baro_get_altitude>
 8004e76:	4603      	mov	r3, r0
 8004e78:	4a3e      	ldr	r2, [pc, #248]	@ (8004f74 <ahrs_task+0x144>)
 8004e7a:	6013      	str	r3, [r2, #0]
    ibusFrameComplete();
 8004e7c:	f7fd f9a4 	bl	80021c8 <ibusFrameComplete>
    update_ahrs(gyro_imu[0],gyro_imu[1],gyro_imu[2],acc_imu[0],acc_imu[1],acc_imu[2],mag_raw[0],mag_raw[1],mag_raw[2],micros());
 8004e80:	4b3d      	ldr	r3, [pc, #244]	@ (8004f78 <ahrs_task+0x148>)
 8004e82:	f9b3 c000 	ldrsh.w	ip, [r3]
 8004e86:	4b3c      	ldr	r3, [pc, #240]	@ (8004f78 <ahrs_task+0x148>)
 8004e88:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8004e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f78 <ahrs_task+0x148>)
 8004e8e:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8004e92:	4b3a      	ldr	r3, [pc, #232]	@ (8004f7c <ahrs_task+0x14c>)
 8004e94:	f9b3 9000 	ldrsh.w	r9, [r3]
 8004e98:	4b38      	ldr	r3, [pc, #224]	@ (8004f7c <ahrs_task+0x14c>)
 8004e9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e9e:	4a37      	ldr	r2, [pc, #220]	@ (8004f7c <ahrs_task+0x14c>)
 8004ea0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8004ea4:	4936      	ldr	r1, [pc, #216]	@ (8004f80 <ahrs_task+0x150>)
 8004ea6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8004eaa:	4835      	ldr	r0, [pc, #212]	@ (8004f80 <ahrs_task+0x150>)
 8004eac:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8004eb0:	4c33      	ldr	r4, [pc, #204]	@ (8004f80 <ahrs_task+0x150>)
 8004eb2:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 8004eb6:	4d33      	ldr	r5, [pc, #204]	@ (8004f84 <ahrs_task+0x154>)
 8004eb8:	682d      	ldr	r5, [r5, #0]
 8004eba:	682d      	ldr	r5, [r5, #0]
 8004ebc:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8004ebe:	4d32      	ldr	r5, [pc, #200]	@ (8004f88 <ahrs_task+0x158>)
 8004ec0:	682d      	ldr	r5, [r5, #0]
 8004ec2:	4435      	add	r5, r6
 8004ec4:	9505      	str	r5, [sp, #20]
 8004ec6:	9404      	str	r4, [sp, #16]
 8004ec8:	9003      	str	r0, [sp, #12]
 8004eca:	9102      	str	r1, [sp, #8]
 8004ecc:	9201      	str	r2, [sp, #4]
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	4642      	mov	r2, r8
 8004ed4:	4671      	mov	r1, lr
 8004ed6:	4660      	mov	r0, ip
 8004ed8:	f7fe fc1e 	bl	8003718 <update_ahrs>
    attitude_ctrl(micros());
 8004edc:	4b29      	ldr	r3, [pc, #164]	@ (8004f84 <ahrs_task+0x154>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ee4:	4b28      	ldr	r3, [pc, #160]	@ (8004f88 <ahrs_task+0x158>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4413      	add	r3, r2
 8004eea:	4618      	mov	r0, r3
 8004eec:	f001 fd98 	bl	8006a20 <attitude_ctrl>

    /*** Altitude estimate ****/
    static int8_t count_ = 0;
	if(count_ >= 9){
 8004ef0:	4b26      	ldr	r3, [pc, #152]	@ (8004f8c <ahrs_task+0x15c>)
 8004ef2:	f993 3000 	ldrsb.w	r3, [r3]
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	dd07      	ble.n	8004f0a <ahrs_task+0xda>
		altitude_estimate(0.1);
 8004efa:	a119      	add	r1, pc, #100	@ (adr r1, 8004f60 <ahrs_task+0x130>)
 8004efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f00:	f002 f9a6 	bl	8007250 <altitude_estimate>
		count_ = 0;
 8004f04:	4b21      	ldr	r3, [pc, #132]	@ (8004f8c <ahrs_task+0x15c>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]
	}
	count_ ++;
 8004f0a:	4b20      	ldr	r3, [pc, #128]	@ (8004f8c <ahrs_task+0x15c>)
 8004f0c:	f993 3000 	ldrsb.w	r3, [r3]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	3301      	adds	r3, #1
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	b25a      	sxtb	r2, r3
 8004f18:	4b1c      	ldr	r3, [pc, #112]	@ (8004f8c <ahrs_task+0x15c>)
 8004f1a:	701a      	strb	r2, [r3, #0]

    if(ibusChannelData[CH5] < CHANNEL_HIGH ){
 8004f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f90 <ahrs_task+0x160>)
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d808      	bhi.n	8004f3a <ahrs_task+0x10a>
    	 vTaskSuspend(task2Handle);
 8004f28:	4b1a      	ldr	r3, [pc, #104]	@ (8004f94 <ahrs_task+0x164>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f00e fd07 	bl	8013940 <vTaskSuspend>
    	 black_box_reset = TRUE;
 8004f32:	4b19      	ldr	r3, [pc, #100]	@ (8004f98 <ahrs_task+0x168>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	e004      	b.n	8004f44 <ahrs_task+0x114>
    }else{
    	 vTaskResume(task2Handle);
 8004f3a:	4b16      	ldr	r3, [pc, #88]	@ (8004f94 <ahrs_task+0x164>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f00e fdce 	bl	8013ae0 <vTaskResume>
    }

    //vTaskSuspend(NULL);
    vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004f44:	f107 0308 	add.w	r3, r7, #8
 8004f48:	68f9      	ldr	r1, [r7, #12]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f00e fc42 	bl	80137d4 <vTaskDelayUntil>
    stack_task_ahrs = uxTaskGetStackHighWaterMark( NULL );
 8004f50:	2000      	movs	r0, #0
 8004f52:	f00f fa0b 	bl	801436c <uxTaskGetStackHighWaterMark>
 8004f56:	4603      	mov	r3, r0
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	4b10      	ldr	r3, [pc, #64]	@ (8004f9c <ahrs_task+0x16c>)
 8004f5c:	801a      	strh	r2, [r3, #0]
  {
 8004f5e:	e781      	b.n	8004e64 <ahrs_task+0x34>
 8004f60:	9999999a 	.word	0x9999999a
 8004f64:	3fb99999 	.word	0x3fb99999
 8004f68:	20000ae4 	.word	0x20000ae4
 8004f6c:	20000b2c 	.word	0x20000b2c
 8004f70:	20000a0c 	.word	0x20000a0c
 8004f74:	20000868 	.word	0x20000868
 8004f78:	2000086c 	.word	0x2000086c
 8004f7c:	20000874 	.word	0x20000874
 8004f80:	2000087c 	.word	0x2000087c
 8004f84:	200005ec 	.word	0x200005ec
 8004f88:	200005f0 	.word	0x200005f0
 8004f8c:	2000088c 	.word	0x2000088c
 8004f90:	20000158 	.word	0x20000158
 8004f94:	200005f8 	.word	0x200005f8
 8004f98:	20000882 	.word	0x20000882
 8004f9c:	2000085c 	.word	0x2000085c

08004fa0 <blackbox>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blackbox */
void blackbox(void const * argument)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08c      	sub	sp, #48	@ 0x30
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blackbox */

	//vTaskSuspend(NULL);
	black_box_init();
 8004fa8:	f7fd fbac 	bl	8002704 <black_box_init>
	black_box_reset = TRUE;
 8004fac:	4bc0      	ldr	r3, [pc, #768]	@ (80052b0 <blackbox+0x310>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	701a      	strb	r2, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;  // 25 ms
 8004fb2:	2332      	movs	r3, #50	@ 0x32
 8004fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	xLastWakeTime = xTaskGetTickCount();
 8004fb6:	f00e feff 	bl	8013db8 <xTaskGetTickCount>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	static uint32_t start_time_ms;
	uint32_t current_time = micros();
 8004fbe:	4bbd      	ldr	r3, [pc, #756]	@ (80052b4 <blackbox+0x314>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fc6:	4bbc      	ldr	r3, [pc, #752]	@ (80052b8 <blackbox+0x318>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4413      	add	r3, r2
 8004fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(black_box_reset){
 8004fce:	4bb8      	ldr	r3, [pc, #736]	@ (80052b0 <blackbox+0x310>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d012      	beq.n	8004ffc <blackbox+0x5c>
    	black_box_pack_str("----------------------------new data----------------------------------------------------------------\n");
 8004fd6:	48b9      	ldr	r0, [pc, #740]	@ (80052bc <blackbox+0x31c>)
 8004fd8:	f7fd fc66 	bl	80028a8 <black_box_pack_str>
    	black_box_reset = FALSE;
 8004fdc:	4bb4      	ldr	r3, [pc, #720]	@ (80052b0 <blackbox+0x310>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
    	start_time_ms = millis();
 8004fe2:	4bb4      	ldr	r3, [pc, #720]	@ (80052b4 <blackbox+0x314>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fea:	4bb3      	ldr	r3, [pc, #716]	@ (80052b8 <blackbox+0x318>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4413      	add	r3, r2
 8004ff0:	4ab3      	ldr	r2, [pc, #716]	@ (80052c0 <blackbox+0x320>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	099b      	lsrs	r3, r3, #6
 8004ff8:	4ab2      	ldr	r2, [pc, #712]	@ (80052c4 <blackbox+0x324>)
 8004ffa:	6013      	str	r3, [r2, #0]
    }
    uint32_t time_ms =  millis() - start_time_ms;
 8004ffc:	4bad      	ldr	r3, [pc, #692]	@ (80052b4 <blackbox+0x314>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005004:	4bac      	ldr	r3, [pc, #688]	@ (80052b8 <blackbox+0x318>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4413      	add	r3, r2
 800500a:	4aad      	ldr	r2, [pc, #692]	@ (80052c0 <blackbox+0x320>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	099a      	lsrs	r2, r3, #6
 8005012:	4bac      	ldr	r3, [pc, #688]	@ (80052c4 <blackbox+0x324>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24

	// control thortle 0 -> 100%
	int throtle = ((int)ibusChannelData[CH3] - 1000)*0.1;
 800501a:	4bab      	ldr	r3, [pc, #684]	@ (80052c8 <blackbox+0x328>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8005022:	4618      	mov	r0, r3
 8005024:	f7fb fa56 	bl	80004d4 <__aeabi_i2d>
 8005028:	a39f      	add	r3, pc, #636	@ (adr r3, 80052a8 <blackbox+0x308>)
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	f7fb fabb 	bl	80005a8 <__aeabi_dmul>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4610      	mov	r0, r2
 8005038:	4619      	mov	r1, r3
 800503a:	f7fb fd65 	bl	8000b08 <__aeabi_d2iz>
 800503e:	4603      	mov	r3, r0
 8005040:	623b      	str	r3, [r7, #32]

	// tx signal 0 -> 100 %
	int srri = ((int)ibusChannelData[CH11] - 1000)*0.1;
 8005042:	4ba1      	ldr	r3, [pc, #644]	@ (80052c8 <blackbox+0x328>)
 8005044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005046:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800504a:	4618      	mov	r0, r3
 800504c:	f7fb fa42 	bl	80004d4 <__aeabi_i2d>
 8005050:	a395      	add	r3, pc, #596	@ (adr r3, 80052a8 <blackbox+0x308>)
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	f7fb faa7 	bl	80005a8 <__aeabi_dmul>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	4610      	mov	r0, r2
 8005060:	4619      	mov	r1, r3
 8005062:	f7fb fd51 	bl	8000b08 <__aeabi_d2iz>
 8005066:	4603      	mov	r3, r0
 8005068:	61fb      	str	r3, [r7, #28]

	/*** write time  ***/
    black_box_pack_int(time_ms);
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	4618      	mov	r0, r3
 800506e:	f7fd fb83 	bl	8002778 <black_box_pack_int>
    black_box_pack_char(' ');
 8005072:	2020      	movs	r0, #32
 8005074:	f7fd fc50 	bl	8002918 <black_box_pack_char>

	/*---- control parameters ---*/
	black_box_pack_int((int)servoL);
 8005078:	4b94      	ldr	r3, [pc, #592]	@ (80052cc <blackbox+0x32c>)
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f7fd fb7b 	bl	8002778 <black_box_pack_int>
    black_box_pack_char(' ');
 8005082:	2020      	movs	r0, #32
 8005084:	f7fd fc48 	bl	8002918 <black_box_pack_char>
	black_box_pack_int((int)servoR);
 8005088:	4b91      	ldr	r3, [pc, #580]	@ (80052d0 <blackbox+0x330>)
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f7fd fb73 	bl	8002778 <black_box_pack_int>
    black_box_pack_char(' ');
 8005092:	2020      	movs	r0, #32
 8005094:	f7fd fc40 	bl	8002918 <black_box_pack_char>
	black_box_pack_int(throtle);
 8005098:	6a38      	ldr	r0, [r7, #32]
 800509a:	f7fd fb6d 	bl	8002778 <black_box_pack_int>
    black_box_pack_char(' ');
 800509e:	2020      	movs	r0, #32
 80050a0:	f7fd fc3a 	bl	8002918 <black_box_pack_char>
	black_box_pack_int(srri);
 80050a4:	69f8      	ldr	r0, [r7, #28]
 80050a6:	f7fd fb67 	bl	8002778 <black_box_pack_int>
    black_box_pack_char(' ');
 80050aa:	2020      	movs	r0, #32
 80050ac:	f7fd fc34 	bl	8002918 <black_box_pack_char>

	/*----- atitude ---------------------*/
	black_box_pack_int((int)(AHRS.roll*100));
 80050b0:	4b88      	ldr	r3, [pc, #544]	@ (80052d4 <blackbox+0x334>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4988      	ldr	r1, [pc, #544]	@ (80052d8 <blackbox+0x338>)
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fb fecc 	bl	8000e54 <__aeabi_fmul>
 80050bc:	4603      	mov	r3, r0
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fc f8a4 	bl	800120c <__aeabi_f2iz>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fd fb56 	bl	8002778 <black_box_pack_int>
	black_box_pack_char(' ');
 80050cc:	2020      	movs	r0, #32
 80050ce:	f7fd fc23 	bl	8002918 <black_box_pack_char>
	black_box_pack_int((int)(roll_desired*100));
 80050d2:	4b82      	ldr	r3, [pc, #520]	@ (80052dc <blackbox+0x33c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4980      	ldr	r1, [pc, #512]	@ (80052d8 <blackbox+0x338>)
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fb febb 	bl	8000e54 <__aeabi_fmul>
 80050de:	4603      	mov	r3, r0
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fc f893 	bl	800120c <__aeabi_f2iz>
 80050e6:	4603      	mov	r3, r0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fd fb45 	bl	8002778 <black_box_pack_int>
	black_box_pack_char(' ');
 80050ee:	2020      	movs	r0, #32
 80050f0:	f7fd fc12 	bl	8002918 <black_box_pack_char>
	black_box_pack_int((int)(AHRS.pitch*100));// cm
 80050f4:	4b77      	ldr	r3, [pc, #476]	@ (80052d4 <blackbox+0x334>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	4977      	ldr	r1, [pc, #476]	@ (80052d8 <blackbox+0x338>)
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fb feaa 	bl	8000e54 <__aeabi_fmul>
 8005100:	4603      	mov	r3, r0
 8005102:	4618      	mov	r0, r3
 8005104:	f7fc f882 	bl	800120c <__aeabi_f2iz>
 8005108:	4603      	mov	r3, r0
 800510a:	4618      	mov	r0, r3
 800510c:	f7fd fb34 	bl	8002778 <black_box_pack_int>
	black_box_pack_char(' ');
 8005110:	2020      	movs	r0, #32
 8005112:	f7fd fc01 	bl	8002918 <black_box_pack_char>
	black_box_pack_int((int)(pitch_desired*100));
 8005116:	4b72      	ldr	r3, [pc, #456]	@ (80052e0 <blackbox+0x340>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	496f      	ldr	r1, [pc, #444]	@ (80052d8 <blackbox+0x338>)
 800511c:	4618      	mov	r0, r3
 800511e:	f7fb fe99 	bl	8000e54 <__aeabi_fmul>
 8005122:	4603      	mov	r3, r0
 8005124:	4618      	mov	r0, r3
 8005126:	f7fc f871 	bl	800120c <__aeabi_f2iz>
 800512a:	4603      	mov	r3, r0
 800512c:	4618      	mov	r0, r3
 800512e:	f7fd fb23 	bl	8002778 <black_box_pack_int>
	black_box_pack_char(' ');
 8005132:	2020      	movs	r0, #32
 8005134:	f7fd fbf0 	bl	8002918 <black_box_pack_char>
	black_box_pack_int((int)(AHRS.yaw*100));
 8005138:	4b66      	ldr	r3, [pc, #408]	@ (80052d4 <blackbox+0x334>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	4966      	ldr	r1, [pc, #408]	@ (80052d8 <blackbox+0x338>)
 800513e:	4618      	mov	r0, r3
 8005140:	f7fb fe88 	bl	8000e54 <__aeabi_fmul>
 8005144:	4603      	mov	r3, r0
 8005146:	4618      	mov	r0, r3
 8005148:	f7fc f860 	bl	800120c <__aeabi_f2iz>
 800514c:	4603      	mov	r3, r0
 800514e:	4618      	mov	r0, r3
 8005150:	f7fd fb12 	bl	8002778 <black_box_pack_int>
	black_box_pack_char(' ');
 8005154:	2020      	movs	r0, #32
 8005156:	f7fd fbdf 	bl	8002918 <black_box_pack_char>
	black_box_pack_int((int)(AHRS.yaw_rate*100));
 800515a:	4b5e      	ldr	r3, [pc, #376]	@ (80052d4 <blackbox+0x334>)
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	495e      	ldr	r1, [pc, #376]	@ (80052d8 <blackbox+0x338>)
 8005160:	4618      	mov	r0, r3
 8005162:	f7fb fe77 	bl	8000e54 <__aeabi_fmul>
 8005166:	4603      	mov	r3, r0
 8005168:	4618      	mov	r0, r3
 800516a:	f7fc f84f 	bl	800120c <__aeabi_f2iz>
 800516e:	4603      	mov	r3, r0
 8005170:	4618      	mov	r0, r3
 8005172:	f7fd fb01 	bl	8002778 <black_box_pack_int>
	black_box_pack_char(' ');
 8005176:	2020      	movs	r0, #32
 8005178:	f7fd fbce 	bl	8002918 <black_box_pack_char>

	/*------- GPS ----------------------*/
	int16_t vx = _gps.velocity[0];  // cm/s
 800517c:	4b59      	ldr	r3, [pc, #356]	@ (80052e4 <blackbox+0x344>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	837b      	strh	r3, [r7, #26]
    int16_t vy = _gps.velocity[1];  // cm/s
 8005182:	4b58      	ldr	r3, [pc, #352]	@ (80052e4 <blackbox+0x344>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	833b      	strh	r3, [r7, #24]
    int16_t vz = _gps.velocity[2];  // cm/s
 8005188:	4b56      	ldr	r3, [pc, #344]	@ (80052e4 <blackbox+0x344>)
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	82fb      	strh	r3, [r7, #22]
    int32_t ground_speed = sqrt(sq(vx) + sq(vy)) ;
 800518e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005192:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005196:	fb03 f202 	mul.w	r2, r3, r2
 800519a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800519e:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 80051a2:	fb01 f303 	mul.w	r3, r1, r3
 80051a6:	4413      	add	r3, r2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fb f993 	bl	80004d4 <__aeabi_i2d>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4610      	mov	r0, r2
 80051b4:	4619      	mov	r1, r3
 80051b6:	f010 f87d 	bl	80152b4 <sqrt>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4610      	mov	r0, r2
 80051c0:	4619      	mov	r1, r3
 80051c2:	f7fb fca1 	bl	8000b08 <__aeabi_d2iz>
 80051c6:	4603      	mov	r3, r0
 80051c8:	613b      	str	r3, [r7, #16]

	black_box_pack_int(_gps.position[0]);
 80051ca:	4b46      	ldr	r3, [pc, #280]	@ (80052e4 <blackbox+0x344>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fd fad2 	bl	8002778 <black_box_pack_int>
	black_box_pack_char(' ');
 80051d4:	2020      	movs	r0, #32
 80051d6:	f7fd fb9f 	bl	8002918 <black_box_pack_char>
	black_box_pack_int(_gps.position[1]);
 80051da:	4b42      	ldr	r3, [pc, #264]	@ (80052e4 <blackbox+0x344>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fd faca 	bl	8002778 <black_box_pack_int>
	black_box_pack_char(' ');
 80051e4:	2020      	movs	r0, #32
 80051e6:	f7fd fb97 	bl	8002918 <black_box_pack_char>
	black_box_pack_int(_gps.altitude_msl);
 80051ea:	4b3e      	ldr	r3, [pc, #248]	@ (80052e4 <blackbox+0x344>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fd fac2 	bl	8002778 <black_box_pack_int>
	black_box_pack_char(' ');
 80051f4:	2020      	movs	r0, #32
 80051f6:	f7fd fb8f 	bl	8002918 <black_box_pack_char>
	black_box_pack_int(_gps.altitude_mgl);
 80051fa:	4b3a      	ldr	r3, [pc, #232]	@ (80052e4 <blackbox+0x344>)
 80051fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fd faba 	bl	8002778 <black_box_pack_int>
	black_box_pack_char(' ');
 8005204:	2020      	movs	r0, #32
 8005206:	f7fd fb87 	bl	8002918 <black_box_pack_char>
	black_box_pack_int(_gps.numSat);
 800520a:	4b36      	ldr	r3, [pc, #216]	@ (80052e4 <blackbox+0x344>)
 800520c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005210:	4618      	mov	r0, r3
 8005212:	f7fd fab1 	bl	8002778 <black_box_pack_int>
	black_box_pack_char(' ');
 8005216:	2020      	movs	r0, #32
 8005218:	f7fd fb7e 	bl	8002918 <black_box_pack_char>
	black_box_pack_int(_gps.fix);
 800521c:	4b31      	ldr	r3, [pc, #196]	@ (80052e4 <blackbox+0x344>)
 800521e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005222:	4618      	mov	r0, r3
 8005224:	f7fd faa8 	bl	8002778 <black_box_pack_int>
	black_box_pack_char(' ');
 8005228:	2020      	movs	r0, #32
 800522a:	f7fd fb75 	bl	8002918 <black_box_pack_char>
	black_box_pack_int(ground_speed);
 800522e:	6938      	ldr	r0, [r7, #16]
 8005230:	f7fd faa2 	bl	8002778 <black_box_pack_int>
	black_box_pack_char(' ');
 8005234:	2020      	movs	r0, #32
 8005236:	f7fd fb6f 	bl	8002918 <black_box_pack_char>
	black_box_pack_int(vz);
 800523a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800523e:	4618      	mov	r0, r3
 8005240:	f7fd fa9a 	bl	8002778 <black_box_pack_int>

	/*---- estimate ---------------------------*/
	black_box_pack_char(' ');
 8005244:	2020      	movs	r0, #32
 8005246:	f7fd fb67 	bl	8002918 <black_box_pack_char>
	black_box_pack_int((int)(alt_estimate*100)); //cm
 800524a:	4b27      	ldr	r3, [pc, #156]	@ (80052e8 <blackbox+0x348>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4922      	ldr	r1, [pc, #136]	@ (80052d8 <blackbox+0x338>)
 8005250:	4618      	mov	r0, r3
 8005252:	f7fb fdff 	bl	8000e54 <__aeabi_fmul>
 8005256:	4603      	mov	r3, r0
 8005258:	4618      	mov	r0, r3
 800525a:	f7fb ffd7 	bl	800120c <__aeabi_f2iz>
 800525e:	4603      	mov	r3, r0
 8005260:	4618      	mov	r0, r3
 8005262:	f7fd fa89 	bl	8002778 <black_box_pack_int>
	black_box_pack_char(' '); 
 8005266:	2020      	movs	r0, #32
 8005268:	f7fd fb56 	bl	8002918 <black_box_pack_char>
	black_box_pack_int((int)(climb_rate*100));   // cm/s
 800526c:	4b1f      	ldr	r3, [pc, #124]	@ (80052ec <blackbox+0x34c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4919      	ldr	r1, [pc, #100]	@ (80052d8 <blackbox+0x338>)
 8005272:	4618      	mov	r0, r3
 8005274:	f7fb fdee 	bl	8000e54 <__aeabi_fmul>
 8005278:	4603      	mov	r3, r0
 800527a:	4618      	mov	r0, r3
 800527c:	f7fb ffc6 	bl	800120c <__aeabi_f2iz>
 8005280:	4603      	mov	r3, r0
 8005282:	4618      	mov	r0, r3
 8005284:	f7fd fa78 	bl	8002778 <black_box_pack_int>
	black_box_pack_char(' '); 
 8005288:	2020      	movs	r0, #32
 800528a:	f7fd fb45 	bl	8002918 <black_box_pack_char>
	black_box_pack_int(alt_baro);   // cm
 800528e:	4b18      	ldr	r3, [pc, #96]	@ (80052f0 <blackbox+0x350>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7fd fa70 	bl	8002778 <black_box_pack_int>

	/*----- end line && load data to sd card- -----*/
	sdcard_fsize = black_box_get_file_size();
 8005298:	f7fd fa62 	bl	8002760 <black_box_get_file_size>
 800529c:	4603      	mov	r3, r0
 800529e:	4a15      	ldr	r2, [pc, #84]	@ (80052f4 <blackbox+0x354>)
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	e029      	b.n	80052f8 <blackbox+0x358>
 80052a4:	f3af 8000 	nop.w
 80052a8:	9999999a 	.word	0x9999999a
 80052ac:	3fb99999 	.word	0x3fb99999
 80052b0:	20000882 	.word	0x20000882
 80052b4:	200005ec 	.word	0x200005ec
 80052b8:	200005f0 	.word	0x200005f0
 80052bc:	08015eec 	.word	0x08015eec
 80052c0:	10624dd3 	.word	0x10624dd3
 80052c4:	20000890 	.word	0x20000890
 80052c8:	20000158 	.word	0x20000158
 80052cc:	20000bc0 	.word	0x20000bc0
 80052d0:	20000bc2 	.word	0x20000bc2
 80052d4:	2000056c 	.word	0x2000056c
 80052d8:	42c80000 	.word	0x42c80000
 80052dc:	20000bb8 	.word	0x20000bb8
 80052e0:	20000bbc 	.word	0x20000bbc
 80052e4:	20000434 	.word	0x20000434
 80052e8:	20000c80 	.word	0x20000c80
 80052ec:	20000c84 	.word	0x20000c84
 80052f0:	20000868 	.word	0x20000868
 80052f4:	20000888 	.word	0x20000888
	black_box_pack_char('\n');
 80052f8:	200a      	movs	r0, #10
 80052fa:	f7fd fb0d 	bl	8002918 <black_box_pack_char>
	black_box_load();
 80052fe:	f7fd fb25 	bl	800294c <black_box_load>

	write_time = micros() - current_time;
 8005302:	4b13      	ldr	r3, [pc, #76]	@ (8005350 <blackbox+0x3b0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800530a:	4b12      	ldr	r3, [pc, #72]	@ (8005354 <blackbox+0x3b4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	441a      	add	r2, r3
 8005310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	4a10      	ldr	r2, [pc, #64]	@ (8005358 <blackbox+0x3b8>)
 8005316:	6013      	str	r3, [r2, #0]
	if(write_time > 10 && puts_state != -1){
 8005318:	4b0f      	ldr	r3, [pc, #60]	@ (8005358 <blackbox+0x3b8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b0a      	cmp	r3, #10
 800531e:	d908      	bls.n	8005332 <blackbox+0x392>
 8005320:	4b0e      	ldr	r3, [pc, #56]	@ (800535c <blackbox+0x3bc>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d003      	beq.n	8005332 <blackbox+0x392>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800532a:	2110      	movs	r1, #16
 800532c:	480c      	ldr	r0, [pc, #48]	@ (8005360 <blackbox+0x3c0>)
 800532e:	f003 fc26 	bl	8008b7e <HAL_GPIO_TogglePin>
	}

	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8005332:	f107 030c 	add.w	r3, r7, #12
 8005336:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005338:	4618      	mov	r0, r3
 800533a:	f00e fa4b 	bl	80137d4 <vTaskDelayUntil>
    stack_task_blackbox = uxTaskGetStackHighWaterMark( NULL );
 800533e:	2000      	movs	r0, #0
 8005340:	f00f f814 	bl	801436c <uxTaskGetStackHighWaterMark>
 8005344:	4603      	mov	r3, r0
 8005346:	b29a      	uxth	r2, r3
 8005348:	4b06      	ldr	r3, [pc, #24]	@ (8005364 <blackbox+0x3c4>)
 800534a:	801a      	strh	r2, [r3, #0]
  {
 800534c:	e637      	b.n	8004fbe <blackbox+0x1e>
 800534e:	bf00      	nop
 8005350:	200005ec 	.word	0x200005ec
 8005354:	200005f0 	.word	0x200005f0
 8005358:	20000884 	.word	0x20000884
 800535c:	200003e8 	.word	0x200003e8
 8005360:	40010800 	.word	0x40010800
 8005364:	20000864 	.word	0x20000864

08005368 <led_indicate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_indicate */
void led_indicate(void const * argument)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		delay = 500;
		vTaskSuspend(task2Handle);
	}
	*/
	if(_gps.fix > 1){
 8005370:	4b0c      	ldr	r3, [pc, #48]	@ (80053a4 <led_indicate+0x3c>)
 8005372:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005376:	2b01      	cmp	r3, #1
 8005378:	d903      	bls.n	8005382 <led_indicate+0x1a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800537a:	2120      	movs	r1, #32
 800537c:	480a      	ldr	r0, [pc, #40]	@ (80053a8 <led_indicate+0x40>)
 800537e:	f003 fbfe 	bl	8008b7e <HAL_GPIO_TogglePin>
	}
	stack_task_led = uxTaskGetStackHighWaterMark( NULL );
 8005382:	2000      	movs	r0, #0
 8005384:	f00e fff2 	bl	801436c <uxTaskGetStackHighWaterMark>
 8005388:	4603      	mov	r3, r0
 800538a:	b29a      	uxth	r2, r3
 800538c:	4b07      	ldr	r3, [pc, #28]	@ (80053ac <led_indicate+0x44>)
 800538e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005390:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005394:	4806      	ldr	r0, [pc, #24]	@ (80053b0 <led_indicate+0x48>)
 8005396:	f003 fbf2 	bl	8008b7e <HAL_GPIO_TogglePin>
    osDelay(100);
 800539a:	2064      	movs	r0, #100	@ 0x64
 800539c:	f00d f919 	bl	80125d2 <osDelay>
	if(_gps.fix > 1){
 80053a0:	e7e6      	b.n	8005370 <led_indicate+0x8>
 80053a2:	bf00      	nop
 80053a4:	20000434 	.word	0x20000434
 80053a8:	40010800 	.word	0x40010800
 80053ac:	2000085e 	.word	0x2000085e
 80053b0:	40011000 	.word	0x40011000
 80053b4:	00000000 	.word	0x00000000

080053b8 <read_sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_sensor */
void read_sensor(void const * argument)
{
 80053b8:	b5b0      	push	{r4, r5, r7, lr}
 80053ba:	b08e      	sub	sp, #56	@ 0x38
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_sensor */
  /* Infinite loop */
	int16_t gyso_offset[3] = {0,0,0};
 80053c0:	2300      	movs	r3, #0
 80053c2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80053c4:	2300      	movs	r3, #0
 80053c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80053c8:	2300      	movs	r3, #0
 80053ca:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	axis3_t raw;
	uint8_t sample_count = 0;
 80053cc:	2300      	movs	r3, #0
 80053ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t gyro_add[3] = {0,0,0};
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	2300      	movs	r3, #0
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	2300      	movs	r3, #0
 80053dc:	61fb      	str	r3, [r7, #28]
	uint8_t first_loop = 1;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	compassInit();
 80053e4:	f7fd fb4c 	bl	8002a80 <compassInit>
	mpu6050_init(&hi2c2);
 80053e8:	488f      	ldr	r0, [pc, #572]	@ (8005628 <read_sensor+0x270>)
 80053ea:	f7fc ffd3 	bl	8002394 <mpu6050_init>
	HAL_Delay(2000);
 80053ee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80053f2:	f002 fc79 	bl	8007ce8 <HAL_Delay>
	imu_calibrate(&gyso_offset[0],&gyso_offset[1],&gyso_offset[2]);
 80053f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80053fa:	1d1a      	adds	r2, r3, #4
 80053fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005400:	1c99      	adds	r1, r3, #2
 8005402:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005406:	4618      	mov	r0, r3
 8005408:	f7fe f90a 	bl	8003620 <imu_calibrate>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2;
 800540c:	2302      	movs	r3, #2
 800540e:	633b      	str	r3, [r7, #48]	@ 0x30
	xLastWakeTime = xTaskGetTickCount();
 8005410:	f00e fcd2 	bl	8013db8 <xTaskGetTickCount>
 8005414:	4603      	mov	r3, r0
 8005416:	613b      	str	r3, [r7, #16]

	for(;;)
	{
		mpu6050_gyro_get_raw(&raw);
 8005418:	f107 0320 	add.w	r3, r7, #32
 800541c:	4618      	mov	r0, r3
 800541e:	f7fd f80b 	bl	8002438 <mpu6050_gyro_get_raw>
		gyro_add[0] += (raw.x - gyso_offset[0]);
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005428:	4619      	mov	r1, r3
 800542a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800542e:	1acb      	subs	r3, r1, r3
 8005430:	4413      	add	r3, r2
 8005432:	617b      	str	r3, [r7, #20]
		gyro_add[1] += (raw.y - gyso_offset[1]);
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800543a:	4619      	mov	r1, r3
 800543c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8005440:	1acb      	subs	r3, r1, r3
 8005442:	4413      	add	r3, r2
 8005444:	61bb      	str	r3, [r7, #24]
		gyro_add[2] += (raw.z - gyso_offset[2]);
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800544c:	4619      	mov	r1, r3
 800544e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005452:	1acb      	subs	r3, r1, r3
 8005454:	4413      	add	r3, r2
 8005456:	61fb      	str	r3, [r7, #28]
		sample_count ++;
 8005458:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800545c:	3301      	adds	r3, #1
 800545e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if(sample_count >= 5){
 8005462:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005466:	2b04      	cmp	r3, #4
 8005468:	d937      	bls.n	80054da <read_sensor+0x122>
		   axis3_t mag;
		   compass_get(&mag);
 800546a:	f107 0308 	add.w	r3, r7, #8
 800546e:	4618      	mov	r0, r3
 8005470:	f7fd fb42 	bl	8002af8 <compass_get>
		   mag_raw[0] = mag.x;
 8005474:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005478:	4b6c      	ldr	r3, [pc, #432]	@ (800562c <read_sensor+0x274>)
 800547a:	801a      	strh	r2, [r3, #0]
		   mag_raw[1] = mag.y;
 800547c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005480:	4b6a      	ldr	r3, [pc, #424]	@ (800562c <read_sensor+0x274>)
 8005482:	805a      	strh	r2, [r3, #2]
		   mag_raw[2] = mag.z;
 8005484:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005488:	4b68      	ldr	r3, [pc, #416]	@ (800562c <read_sensor+0x274>)
 800548a:	809a      	strh	r2, [r3, #4]

		   gyro_imu[0] = (int16_t)(gyro_add[0]/5);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	4a68      	ldr	r2, [pc, #416]	@ (8005630 <read_sensor+0x278>)
 8005490:	fb82 1203 	smull	r1, r2, r2, r3
 8005494:	1052      	asrs	r2, r2, #1
 8005496:	17db      	asrs	r3, r3, #31
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	b21a      	sxth	r2, r3
 800549c:	4b65      	ldr	r3, [pc, #404]	@ (8005634 <read_sensor+0x27c>)
 800549e:	801a      	strh	r2, [r3, #0]
		   gyro_imu[1] = (int16_t)(gyro_add[1]/5);
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	4a63      	ldr	r2, [pc, #396]	@ (8005630 <read_sensor+0x278>)
 80054a4:	fb82 1203 	smull	r1, r2, r2, r3
 80054a8:	1052      	asrs	r2, r2, #1
 80054aa:	17db      	asrs	r3, r3, #31
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	b21a      	sxth	r2, r3
 80054b0:	4b60      	ldr	r3, [pc, #384]	@ (8005634 <read_sensor+0x27c>)
 80054b2:	805a      	strh	r2, [r3, #2]
		   gyro_imu[2] = (int16_t)(gyro_add[2]/5);
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	4a5e      	ldr	r2, [pc, #376]	@ (8005630 <read_sensor+0x278>)
 80054b8:	fb82 1203 	smull	r1, r2, r2, r3
 80054bc:	1052      	asrs	r2, r2, #1
 80054be:	17db      	asrs	r3, r3, #31
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	b21a      	sxth	r2, r3
 80054c4:	4b5b      	ldr	r3, [pc, #364]	@ (8005634 <read_sensor+0x27c>)
 80054c6:	809a      	strh	r2, [r3, #4]
		   gyro_add[0] = 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
		   gyro_add[1] = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	61bb      	str	r3, [r7, #24]
		   gyro_add[2] = 0;
 80054d0:	2300      	movs	r3, #0
 80054d2:	61fb      	str	r3, [r7, #28]
		   sample_count = 0;
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		   //vTaskResume(task1Handle);
		}

		raw.x = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	843b      	strh	r3, [r7, #32]
		raw.y = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	847b      	strh	r3, [r7, #34]	@ 0x22
		raw.z = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	84bb      	strh	r3, [r7, #36]	@ 0x24

		mpu6050_acc_get_raw(&raw);
 80054e6:	f107 0320 	add.w	r3, r7, #32
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fc ffe0 	bl	80024b0 <mpu6050_acc_get_raw>
		if(first_loop){
 80054f0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00e      	beq.n	8005516 <read_sensor+0x15e>
			acc_imu[0] = raw.x;
 80054f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80054fc:	4b4e      	ldr	r3, [pc, #312]	@ (8005638 <read_sensor+0x280>)
 80054fe:	801a      	strh	r2, [r3, #0]
			acc_imu[1] = raw.y;
 8005500:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8005504:	4b4c      	ldr	r3, [pc, #304]	@ (8005638 <read_sensor+0x280>)
 8005506:	805a      	strh	r2, [r3, #2]
			acc_imu[2] = raw.z;
 8005508:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800550c:	4b4a      	ldr	r3, [pc, #296]	@ (8005638 <read_sensor+0x280>)
 800550e:	809a      	strh	r2, [r3, #4]
			first_loop = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		}
		// low pass filter
		acc_imu[0] += 0.1*(raw.x - acc_imu[0]);
 8005516:	4b48      	ldr	r3, [pc, #288]	@ (8005638 <read_sensor+0x280>)
 8005518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800551c:	4618      	mov	r0, r3
 800551e:	f7fa ffd9 	bl	80004d4 <__aeabi_i2d>
 8005522:	4604      	mov	r4, r0
 8005524:	460d      	mov	r5, r1
 8005526:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800552a:	461a      	mov	r2, r3
 800552c:	4b42      	ldr	r3, [pc, #264]	@ (8005638 <read_sensor+0x280>)
 800552e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	4618      	mov	r0, r3
 8005536:	f7fa ffcd 	bl	80004d4 <__aeabi_i2d>
 800553a:	a339      	add	r3, pc, #228	@ (adr r3, 8005620 <read_sensor+0x268>)
 800553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005540:	f7fb f832 	bl	80005a8 <__aeabi_dmul>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4620      	mov	r0, r4
 800554a:	4629      	mov	r1, r5
 800554c:	f7fa fe76 	bl	800023c <__adddf3>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4610      	mov	r0, r2
 8005556:	4619      	mov	r1, r3
 8005558:	f7fb fad6 	bl	8000b08 <__aeabi_d2iz>
 800555c:	4603      	mov	r3, r0
 800555e:	b21a      	sxth	r2, r3
 8005560:	4b35      	ldr	r3, [pc, #212]	@ (8005638 <read_sensor+0x280>)
 8005562:	801a      	strh	r2, [r3, #0]
		acc_imu[1] += 0.1*(raw.y - acc_imu[1]);
 8005564:	4b34      	ldr	r3, [pc, #208]	@ (8005638 <read_sensor+0x280>)
 8005566:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800556a:	4618      	mov	r0, r3
 800556c:	f7fa ffb2 	bl	80004d4 <__aeabi_i2d>
 8005570:	4604      	mov	r4, r0
 8005572:	460d      	mov	r5, r1
 8005574:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8005578:	461a      	mov	r2, r3
 800557a:	4b2f      	ldr	r3, [pc, #188]	@ (8005638 <read_sensor+0x280>)
 800557c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	4618      	mov	r0, r3
 8005584:	f7fa ffa6 	bl	80004d4 <__aeabi_i2d>
 8005588:	a325      	add	r3, pc, #148	@ (adr r3, 8005620 <read_sensor+0x268>)
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	f7fb f80b 	bl	80005a8 <__aeabi_dmul>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4620      	mov	r0, r4
 8005598:	4629      	mov	r1, r5
 800559a:	f7fa fe4f 	bl	800023c <__adddf3>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4610      	mov	r0, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	f7fb faaf 	bl	8000b08 <__aeabi_d2iz>
 80055aa:	4603      	mov	r3, r0
 80055ac:	b21a      	sxth	r2, r3
 80055ae:	4b22      	ldr	r3, [pc, #136]	@ (8005638 <read_sensor+0x280>)
 80055b0:	805a      	strh	r2, [r3, #2]
		acc_imu[2] += 0.1*(raw.z - acc_imu[2]);
 80055b2:	4b21      	ldr	r3, [pc, #132]	@ (8005638 <read_sensor+0x280>)
 80055b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fa ff8b 	bl	80004d4 <__aeabi_i2d>
 80055be:	4604      	mov	r4, r0
 80055c0:	460d      	mov	r5, r1
 80055c2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80055c6:	461a      	mov	r2, r3
 80055c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005638 <read_sensor+0x280>)
 80055ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fa ff7f 	bl	80004d4 <__aeabi_i2d>
 80055d6:	a312      	add	r3, pc, #72	@ (adr r3, 8005620 <read_sensor+0x268>)
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f7fa ffe4 	bl	80005a8 <__aeabi_dmul>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4620      	mov	r0, r4
 80055e6:	4629      	mov	r1, r5
 80055e8:	f7fa fe28 	bl	800023c <__adddf3>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4610      	mov	r0, r2
 80055f2:	4619      	mov	r1, r3
 80055f4:	f7fb fa88 	bl	8000b08 <__aeabi_d2iz>
 80055f8:	4603      	mov	r3, r0
 80055fa:	b21a      	sxth	r2, r3
 80055fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005638 <read_sensor+0x280>)
 80055fe:	809a      	strh	r2, [r3, #4]
	    stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 8005600:	2000      	movs	r0, #0
 8005602:	f00e feb3 	bl	801436c <uxTaskGetStackHighWaterMark>
 8005606:	4603      	mov	r3, r0
 8005608:	b29a      	uxth	r2, r3
 800560a:	4b0c      	ldr	r3, [pc, #48]	@ (800563c <read_sensor+0x284>)
 800560c:	801a      	strh	r2, [r3, #0]
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800560e:	f107 0310 	add.w	r3, r7, #16
 8005612:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005614:	4618      	mov	r0, r3
 8005616:	f00e f8dd 	bl	80137d4 <vTaskDelayUntil>
		mpu6050_gyro_get_raw(&raw);
 800561a:	e6fd      	b.n	8005418 <read_sensor+0x60>
 800561c:	f3af 8000 	nop.w
 8005620:	9999999a 	.word	0x9999999a
 8005624:	3fb99999 	.word	0x3fb99999
 8005628:	200008e8 	.word	0x200008e8
 800562c:	2000087c 	.word	0x2000087c
 8005630:	66666667 	.word	0x66666667
 8005634:	2000086c 	.word	0x2000086c
 8005638:	20000874 	.word	0x20000874
 800563c:	20000860 	.word	0x20000860

08005640 <mavlinkOSD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mavlinkOSD */
void mavlinkOSD(void const * argument)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mavlinkOSD */
	mavlinkInit(1,1,&huart1,57600);
 8005648:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 800564c:	4a0d      	ldr	r2, [pc, #52]	@ (8005684 <mavlinkOSD+0x44>)
 800564e:	2101      	movs	r1, #1
 8005650:	2001      	movs	r0, #1
 8005652:	f002 f9b9 	bl	80079c8 <mavlinkInit>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;  // 25 ms
 8005656:	2332      	movs	r3, #50	@ 0x32
 8005658:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 800565a:	f00e fbad 	bl	8013db8 <xTaskGetTickCount>
 800565e:	4603      	mov	r3, r0
 8005660:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	mavlink_osd();
 8005662:	f002 f9e7 	bl	8007a34 <mavlink_osd>
	//mavlink_send_heartbeat();
	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8005666:	f107 0308 	add.w	r3, r7, #8
 800566a:	68f9      	ldr	r1, [r7, #12]
 800566c:	4618      	mov	r0, r3
 800566e:	f00e f8b1 	bl	80137d4 <vTaskDelayUntil>
    stack_task_mavOSD = uxTaskGetStackHighWaterMark( NULL );
 8005672:	2000      	movs	r0, #0
 8005674:	f00e fe7a 	bl	801436c <uxTaskGetStackHighWaterMark>
 8005678:	4603      	mov	r3, r0
 800567a:	b29a      	uxth	r2, r3
 800567c:	4b02      	ldr	r3, [pc, #8]	@ (8005688 <mavlinkOSD+0x48>)
 800567e:	801a      	strh	r2, [r3, #0]
	mavlink_osd();
 8005680:	bf00      	nop
 8005682:	e7ee      	b.n	8005662 <mavlinkOSD+0x22>
 8005684:	20000a9c 	.word	0x20000a9c
 8005688:	20000862 	.word	0x20000862

0800568c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005692:	f107 0310 	add.w	r3, r7, #16
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	605a      	str	r2, [r3, #4]
 800569c:	609a      	str	r2, [r3, #8]
 800569e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80056a0:	4b46      	ldr	r3, [pc, #280]	@ (80057bc <MX_GPIO_Init+0x130>)
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	4a45      	ldr	r2, [pc, #276]	@ (80057bc <MX_GPIO_Init+0x130>)
 80056a6:	f043 0310 	orr.w	r3, r3, #16
 80056aa:	6193      	str	r3, [r2, #24]
 80056ac:	4b43      	ldr	r3, [pc, #268]	@ (80057bc <MX_GPIO_Init+0x130>)
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056b8:	4b40      	ldr	r3, [pc, #256]	@ (80057bc <MX_GPIO_Init+0x130>)
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	4a3f      	ldr	r2, [pc, #252]	@ (80057bc <MX_GPIO_Init+0x130>)
 80056be:	f043 0304 	orr.w	r3, r3, #4
 80056c2:	6193      	str	r3, [r2, #24]
 80056c4:	4b3d      	ldr	r3, [pc, #244]	@ (80057bc <MX_GPIO_Init+0x130>)
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056d0:	4b3a      	ldr	r3, [pc, #232]	@ (80057bc <MX_GPIO_Init+0x130>)
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	4a39      	ldr	r2, [pc, #228]	@ (80057bc <MX_GPIO_Init+0x130>)
 80056d6:	f043 0308 	orr.w	r3, r3, #8
 80056da:	6193      	str	r3, [r2, #24]
 80056dc:	4b37      	ldr	r3, [pc, #220]	@ (80057bc <MX_GPIO_Init+0x130>)
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80056e8:	4b34      	ldr	r3, [pc, #208]	@ (80057bc <MX_GPIO_Init+0x130>)
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	4a33      	ldr	r2, [pc, #204]	@ (80057bc <MX_GPIO_Init+0x130>)
 80056ee:	f043 0320 	orr.w	r3, r3, #32
 80056f2:	6193      	str	r3, [r2, #24]
 80056f4:	4b31      	ldr	r3, [pc, #196]	@ (80057bc <MX_GPIO_Init+0x130>)
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	603b      	str	r3, [r7, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005700:	2200      	movs	r2, #0
 8005702:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005706:	482e      	ldr	r0, [pc, #184]	@ (80057c0 <MX_GPIO_Init+0x134>)
 8005708:	f003 fa21 	bl	8008b4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800570c:	2200      	movs	r2, #0
 800570e:	2130      	movs	r1, #48	@ 0x30
 8005710:	482c      	ldr	r0, [pc, #176]	@ (80057c4 <MX_GPIO_Init+0x138>)
 8005712:	f003 fa1c 	bl	8008b4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8005716:	2200      	movs	r2, #0
 8005718:	21c0      	movs	r1, #192	@ 0xc0
 800571a:	482b      	ldr	r0, [pc, #172]	@ (80057c8 <MX_GPIO_Init+0x13c>)
 800571c:	f003 fa17 	bl	8008b4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8005720:	2200      	movs	r2, #0
 8005722:	2118      	movs	r1, #24
 8005724:	4829      	ldr	r0, [pc, #164]	@ (80057cc <MX_GPIO_Init+0x140>)
 8005726:	f003 fa12 	bl	8008b4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800572a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800572e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005730:	2301      	movs	r3, #1
 8005732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005734:	2300      	movs	r3, #0
 8005736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005738:	2302      	movs	r3, #2
 800573a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800573c:	f107 0310 	add.w	r3, r7, #16
 8005740:	4619      	mov	r1, r3
 8005742:	481f      	ldr	r0, [pc, #124]	@ (80057c0 <MX_GPIO_Init+0x134>)
 8005744:	f003 f858 	bl	80087f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005748:	2330      	movs	r3, #48	@ 0x30
 800574a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800574c:	2301      	movs	r3, #1
 800574e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005750:	2300      	movs	r3, #0
 8005752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005754:	2302      	movs	r3, #2
 8005756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005758:	f107 0310 	add.w	r3, r7, #16
 800575c:	4619      	mov	r1, r3
 800575e:	4819      	ldr	r0, [pc, #100]	@ (80057c4 <MX_GPIO_Init+0x138>)
 8005760:	f003 f84a 	bl	80087f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005764:	23c0      	movs	r3, #192	@ 0xc0
 8005766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005768:	2301      	movs	r3, #1
 800576a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800576c:	2300      	movs	r3, #0
 800576e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005770:	2302      	movs	r3, #2
 8005772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005774:	f107 0310 	add.w	r3, r7, #16
 8005778:	4619      	mov	r1, r3
 800577a:	4813      	ldr	r0, [pc, #76]	@ (80057c8 <MX_GPIO_Init+0x13c>)
 800577c:	f003 f83c 	bl	80087f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005780:	2318      	movs	r3, #24
 8005782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005784:	2301      	movs	r3, #1
 8005786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005788:	2300      	movs	r3, #0
 800578a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800578c:	2302      	movs	r3, #2
 800578e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005790:	f107 0310 	add.w	r3, r7, #16
 8005794:	4619      	mov	r1, r3
 8005796:	480d      	ldr	r0, [pc, #52]	@ (80057cc <MX_GPIO_Init+0x140>)
 8005798:	f003 f82e 	bl	80087f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800579c:	2320      	movs	r3, #32
 800579e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80057a4:	2302      	movs	r3, #2
 80057a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057a8:	f107 0310 	add.w	r3, r7, #16
 80057ac:	4619      	mov	r1, r3
 80057ae:	4807      	ldr	r0, [pc, #28]	@ (80057cc <MX_GPIO_Init+0x140>)
 80057b0:	f003 f822 	bl	80087f8 <HAL_GPIO_Init>

}
 80057b4:	bf00      	nop
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40021000 	.word	0x40021000
 80057c0:	40011000 	.word	0x40011000
 80057c4:	40010800 	.word	0x40010800
 80057c8:	40011400 	.word	0x40011400
 80057cc:	40010c00 	.word	0x40010c00

080057d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80057d4:	4b12      	ldr	r3, [pc, #72]	@ (8005820 <MX_I2C1_Init+0x50>)
 80057d6:	4a13      	ldr	r2, [pc, #76]	@ (8005824 <MX_I2C1_Init+0x54>)
 80057d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80057da:	4b11      	ldr	r3, [pc, #68]	@ (8005820 <MX_I2C1_Init+0x50>)
 80057dc:	4a12      	ldr	r2, [pc, #72]	@ (8005828 <MX_I2C1_Init+0x58>)
 80057de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80057e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005820 <MX_I2C1_Init+0x50>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80057e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005820 <MX_I2C1_Init+0x50>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80057ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005820 <MX_I2C1_Init+0x50>)
 80057ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80057f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80057f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005820 <MX_I2C1_Init+0x50>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80057fa:	4b09      	ldr	r3, [pc, #36]	@ (8005820 <MX_I2C1_Init+0x50>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005800:	4b07      	ldr	r3, [pc, #28]	@ (8005820 <MX_I2C1_Init+0x50>)
 8005802:	2200      	movs	r2, #0
 8005804:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005806:	4b06      	ldr	r3, [pc, #24]	@ (8005820 <MX_I2C1_Init+0x50>)
 8005808:	2200      	movs	r2, #0
 800580a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800580c:	4804      	ldr	r0, [pc, #16]	@ (8005820 <MX_I2C1_Init+0x50>)
 800580e:	f003 f9cf 	bl	8008bb0 <HAL_I2C_Init>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005818:	f000 f92a 	bl	8005a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800581c:	bf00      	nop
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000894 	.word	0x20000894
 8005824:	40005400 	.word	0x40005400
 8005828:	00061a80 	.word	0x00061a80

0800582c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005830:	4b12      	ldr	r3, [pc, #72]	@ (800587c <MX_I2C2_Init+0x50>)
 8005832:	4a13      	ldr	r2, [pc, #76]	@ (8005880 <MX_I2C2_Init+0x54>)
 8005834:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8005836:	4b11      	ldr	r3, [pc, #68]	@ (800587c <MX_I2C2_Init+0x50>)
 8005838:	4a12      	ldr	r2, [pc, #72]	@ (8005884 <MX_I2C2_Init+0x58>)
 800583a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800583c:	4b0f      	ldr	r3, [pc, #60]	@ (800587c <MX_I2C2_Init+0x50>)
 800583e:	2200      	movs	r2, #0
 8005840:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005842:	4b0e      	ldr	r3, [pc, #56]	@ (800587c <MX_I2C2_Init+0x50>)
 8005844:	2200      	movs	r2, #0
 8005846:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005848:	4b0c      	ldr	r3, [pc, #48]	@ (800587c <MX_I2C2_Init+0x50>)
 800584a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800584e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005850:	4b0a      	ldr	r3, [pc, #40]	@ (800587c <MX_I2C2_Init+0x50>)
 8005852:	2200      	movs	r2, #0
 8005854:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005856:	4b09      	ldr	r3, [pc, #36]	@ (800587c <MX_I2C2_Init+0x50>)
 8005858:	2200      	movs	r2, #0
 800585a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800585c:	4b07      	ldr	r3, [pc, #28]	@ (800587c <MX_I2C2_Init+0x50>)
 800585e:	2200      	movs	r2, #0
 8005860:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005862:	4b06      	ldr	r3, [pc, #24]	@ (800587c <MX_I2C2_Init+0x50>)
 8005864:	2200      	movs	r2, #0
 8005866:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005868:	4804      	ldr	r0, [pc, #16]	@ (800587c <MX_I2C2_Init+0x50>)
 800586a:	f003 f9a1 	bl	8008bb0 <HAL_I2C_Init>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005874:	f000 f8fc 	bl	8005a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005878:	bf00      	nop
 800587a:	bd80      	pop	{r7, pc}
 800587c:	200008e8 	.word	0x200008e8
 8005880:	40005800 	.word	0x40005800
 8005884:	00061a80 	.word	0x00061a80

08005888 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	@ 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005890:	f107 0318 	add.w	r3, r7, #24
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	605a      	str	r2, [r3, #4]
 800589a:	609a      	str	r2, [r3, #8]
 800589c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005950 <HAL_I2C_MspInit+0xc8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d124      	bne.n	80058f2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005954 <HAL_I2C_MspInit+0xcc>)
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	4a29      	ldr	r2, [pc, #164]	@ (8005954 <HAL_I2C_MspInit+0xcc>)
 80058ae:	f043 0308 	orr.w	r3, r3, #8
 80058b2:	6193      	str	r3, [r2, #24]
 80058b4:	4b27      	ldr	r3, [pc, #156]	@ (8005954 <HAL_I2C_MspInit+0xcc>)
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80058c0:	23c0      	movs	r3, #192	@ 0xc0
 80058c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058c4:	2312      	movs	r3, #18
 80058c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80058c8:	2303      	movs	r3, #3
 80058ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058cc:	f107 0318 	add.w	r3, r7, #24
 80058d0:	4619      	mov	r1, r3
 80058d2:	4821      	ldr	r0, [pc, #132]	@ (8005958 <HAL_I2C_MspInit+0xd0>)
 80058d4:	f002 ff90 	bl	80087f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80058d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005954 <HAL_I2C_MspInit+0xcc>)
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005954 <HAL_I2C_MspInit+0xcc>)
 80058de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80058e2:	61d3      	str	r3, [r2, #28]
 80058e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005954 <HAL_I2C_MspInit+0xcc>)
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058ec:	613b      	str	r3, [r7, #16]
 80058ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80058f0:	e029      	b.n	8005946 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a19      	ldr	r2, [pc, #100]	@ (800595c <HAL_I2C_MspInit+0xd4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d124      	bne.n	8005946 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058fc:	4b15      	ldr	r3, [pc, #84]	@ (8005954 <HAL_I2C_MspInit+0xcc>)
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	4a14      	ldr	r2, [pc, #80]	@ (8005954 <HAL_I2C_MspInit+0xcc>)
 8005902:	f043 0308 	orr.w	r3, r3, #8
 8005906:	6193      	str	r3, [r2, #24]
 8005908:	4b12      	ldr	r3, [pc, #72]	@ (8005954 <HAL_I2C_MspInit+0xcc>)
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005914:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800591a:	2312      	movs	r3, #18
 800591c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800591e:	2303      	movs	r3, #3
 8005920:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005922:	f107 0318 	add.w	r3, r7, #24
 8005926:	4619      	mov	r1, r3
 8005928:	480b      	ldr	r0, [pc, #44]	@ (8005958 <HAL_I2C_MspInit+0xd0>)
 800592a:	f002 ff65 	bl	80087f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800592e:	4b09      	ldr	r3, [pc, #36]	@ (8005954 <HAL_I2C_MspInit+0xcc>)
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	4a08      	ldr	r2, [pc, #32]	@ (8005954 <HAL_I2C_MspInit+0xcc>)
 8005934:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005938:	61d3      	str	r3, [r2, #28]
 800593a:	4b06      	ldr	r3, [pc, #24]	@ (8005954 <HAL_I2C_MspInit+0xcc>)
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005942:	60bb      	str	r3, [r7, #8]
 8005944:	68bb      	ldr	r3, [r7, #8]
}
 8005946:	bf00      	nop
 8005948:	3728      	adds	r7, #40	@ 0x28
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40005400 	.word	0x40005400
 8005954:	40021000 	.word	0x40021000
 8005958:	40010c00 	.word	0x40010c00
 800595c:	40005800 	.word	0x40005800

08005960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005964:	f002 f98e 	bl	8007c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005968:	f000 f81c 	bl	80059a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800596c:	f7ff fe8e 	bl	800568c <MX_GPIO_Init>
  MX_DMA_Init();
 8005970:	f7ff f980 	bl	8004c74 <MX_DMA_Init>
  MX_I2C1_Init();
 8005974:	f7ff ff2c 	bl	80057d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005978:	f7ff ff58 	bl	800582c <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 800597c:	f000 f87e 	bl	8005a7c <MX_SDIO_SD_Init>
  MX_TIM7_Init();
 8005980:	f000 fad4 	bl	8005f2c <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8005984:	f000 fb96 	bl	80060b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005988:	f000 fbbe 	bl	8006108 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800598c:	f000 fbe6 	bl	800615c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8005990:	f000 fa40 	bl	8005e14 <MX_TIM3_Init>
  MX_FATFS_Init();
 8005994:	f008 ffc4 	bl	800e920 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8005998:	f7ff f9cc 	bl	8004d34 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800599c:	f00c fdc6 	bl	801252c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80059a0:	bf00      	nop
 80059a2:	e7fd      	b.n	80059a0 <main+0x40>

080059a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b090      	sub	sp, #64	@ 0x40
 80059a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80059aa:	f107 0318 	add.w	r3, r7, #24
 80059ae:	2228      	movs	r2, #40	@ 0x28
 80059b0:	2100      	movs	r1, #0
 80059b2:	4618      	mov	r0, r3
 80059b4:	f00f fc2c 	bl	8015210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059b8:	1d3b      	adds	r3, r7, #4
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	605a      	str	r2, [r3, #4]
 80059c0:	609a      	str	r2, [r3, #8]
 80059c2:	60da      	str	r2, [r3, #12]
 80059c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80059c6:	2301      	movs	r3, #1
 80059c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80059ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80059ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80059d0:	2300      	movs	r3, #0
 80059d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80059d4:	2301      	movs	r3, #1
 80059d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80059d8:	2302      	movs	r3, #2
 80059da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80059dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80059e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80059e2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80059e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059e8:	f107 0318 	add.w	r3, r7, #24
 80059ec:	4618      	mov	r0, r3
 80059ee:	f004 ff21 	bl	800a834 <HAL_RCC_OscConfig>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80059f8:	f000 f83a 	bl	8005a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80059fc:	230f      	movs	r3, #15
 80059fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a00:	2302      	movs	r3, #2
 8005a02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005a08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005a12:	1d3b      	adds	r3, r7, #4
 8005a14:	2102      	movs	r1, #2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f005 f98e 	bl	800ad38 <HAL_RCC_ClockConfig>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005a22:	f000 f825 	bl	8005a70 <Error_Handler>
  }
}
 8005a26:	bf00      	nop
 8005a28:	3740      	adds	r7, #64	@ 0x40
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a40:	d102      	bne.n	8005a48 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8005a42:	f002 f935 	bl	8007cb0 <HAL_IncTick>
  else if(htim->Instance == TIM7){
	  TIMER_CALLBACK();
  }

  /* USER CODE END Callback 1 */
}
 8005a46:	e00b      	b.n	8005a60 <HAL_TIM_PeriodElapsedCallback+0x30>
  else if(htim->Instance == TIM7){
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a06      	ldr	r2, [pc, #24]	@ (8005a68 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d106      	bne.n	8005a60 <HAL_TIM_PeriodElapsedCallback+0x30>
	  TIMER_CALLBACK();
 8005a52:	4b06      	ldr	r3, [pc, #24]	@ (8005a6c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8005a5a:	33ff      	adds	r3, #255	@ 0xff
 8005a5c:	4a03      	ldr	r2, [pc, #12]	@ (8005a6c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005a5e:	6013      	str	r3, [r2, #0]
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40001400 	.word	0x40001400
 8005a6c:	200005f0 	.word	0x200005f0

08005a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a74:	b672      	cpsid	i
}
 8005a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a78:	bf00      	nop
 8005a7a:	e7fd      	b.n	8005a78 <Error_Handler+0x8>

08005a7c <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005a80:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <MX_SDIO_SD_Init+0x3c>)
 8005a82:	4a0e      	ldr	r2, [pc, #56]	@ (8005abc <MX_SDIO_SD_Init+0x40>)
 8005a84:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005a86:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab8 <MX_SDIO_SD_Init+0x3c>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab8 <MX_SDIO_SD_Init+0x3c>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005a92:	4b09      	ldr	r3, [pc, #36]	@ (8005ab8 <MX_SDIO_SD_Init+0x3c>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005a98:	4b07      	ldr	r3, [pc, #28]	@ (8005ab8 <MX_SDIO_SD_Init+0x3c>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005a9e:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <MX_SDIO_SD_Init+0x3c>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 255;
 8005aa4:	4b04      	ldr	r3, [pc, #16]	@ (8005ab8 <MX_SDIO_SD_Init+0x3c>)
 8005aa6:	22ff      	movs	r2, #255	@ 0xff
 8005aa8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.ClockDiv = 255;
 8005aaa:	4b03      	ldr	r3, [pc, #12]	@ (8005ab8 <MX_SDIO_SD_Init+0x3c>)
 8005aac:	22ff      	movs	r2, #255	@ 0xff
 8005aae:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 2 */

}
 8005ab0:	bf00      	nop
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr
 8005ab8:	2000093c 	.word	0x2000093c
 8005abc:	40018000 	.word	0x40018000

08005ac0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08a      	sub	sp, #40	@ 0x28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ac8:	f107 0318 	add.w	r3, r7, #24
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	605a      	str	r2, [r3, #4]
 8005ad2:	609a      	str	r2, [r3, #8]
 8005ad4:	60da      	str	r2, [r3, #12]
  if(sdHandle->Instance==SDIO)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a22      	ldr	r2, [pc, #136]	@ (8005b64 <HAL_SD_MspInit+0xa4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d13c      	bne.n	8005b5a <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005ae0:	4b21      	ldr	r3, [pc, #132]	@ (8005b68 <HAL_SD_MspInit+0xa8>)
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	4a20      	ldr	r2, [pc, #128]	@ (8005b68 <HAL_SD_MspInit+0xa8>)
 8005ae6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005aea:	6153      	str	r3, [r2, #20]
 8005aec:	4b1e      	ldr	r3, [pc, #120]	@ (8005b68 <HAL_SD_MspInit+0xa8>)
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005af8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b68 <HAL_SD_MspInit+0xa8>)
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	4a1a      	ldr	r2, [pc, #104]	@ (8005b68 <HAL_SD_MspInit+0xa8>)
 8005afe:	f043 0310 	orr.w	r3, r3, #16
 8005b02:	6193      	str	r3, [r2, #24]
 8005b04:	4b18      	ldr	r3, [pc, #96]	@ (8005b68 <HAL_SD_MspInit+0xa8>)
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b10:	4b15      	ldr	r3, [pc, #84]	@ (8005b68 <HAL_SD_MspInit+0xa8>)
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	4a14      	ldr	r2, [pc, #80]	@ (8005b68 <HAL_SD_MspInit+0xa8>)
 8005b16:	f043 0320 	orr.w	r3, r3, #32
 8005b1a:	6193      	str	r3, [r2, #24]
 8005b1c:	4b12      	ldr	r3, [pc, #72]	@ (8005b68 <HAL_SD_MspInit+0xa8>)
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8005b28:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8005b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b32:	2303      	movs	r3, #3
 8005b34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b36:	f107 0318 	add.w	r3, r7, #24
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	480b      	ldr	r0, [pc, #44]	@ (8005b6c <HAL_SD_MspInit+0xac>)
 8005b3e:	f002 fe5b 	bl	80087f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005b42:	2304      	movs	r3, #4
 8005b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b46:	2302      	movs	r3, #2
 8005b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b4e:	f107 0318 	add.w	r3, r7, #24
 8005b52:	4619      	mov	r1, r3
 8005b54:	4806      	ldr	r0, [pc, #24]	@ (8005b70 <HAL_SD_MspInit+0xb0>)
 8005b56:	f002 fe4f 	bl	80087f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8005b5a:	bf00      	nop
 8005b5c:	3728      	adds	r7, #40	@ 0x28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	40018000 	.word	0x40018000
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	40011000 	.word	0x40011000
 8005b70:	40011400 	.word	0x40011400

08005b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005b7a:	4b18      	ldr	r3, [pc, #96]	@ (8005bdc <HAL_MspInit+0x68>)
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	4a17      	ldr	r2, [pc, #92]	@ (8005bdc <HAL_MspInit+0x68>)
 8005b80:	f043 0301 	orr.w	r3, r3, #1
 8005b84:	6193      	str	r3, [r2, #24]
 8005b86:	4b15      	ldr	r3, [pc, #84]	@ (8005bdc <HAL_MspInit+0x68>)
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	60bb      	str	r3, [r7, #8]
 8005b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b92:	4b12      	ldr	r3, [pc, #72]	@ (8005bdc <HAL_MspInit+0x68>)
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	4a11      	ldr	r2, [pc, #68]	@ (8005bdc <HAL_MspInit+0x68>)
 8005b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b9c:	61d3      	str	r3, [r2, #28]
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8005bdc <HAL_MspInit+0x68>)
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ba6:	607b      	str	r3, [r7, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005baa:	2200      	movs	r2, #0
 8005bac:	210f      	movs	r1, #15
 8005bae:	f06f 0001 	mvn.w	r0, #1
 8005bb2:	f002 f972 	bl	8007e9a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005be0 <HAL_MspInit+0x6c>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	4a04      	ldr	r2, [pc, #16]	@ (8005be0 <HAL_MspInit+0x6c>)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005bd2:	bf00      	nop
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	40010000 	.word	0x40010000

08005be4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08e      	sub	sp, #56	@ 0x38
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8005bfa:	4b34      	ldr	r3, [pc, #208]	@ (8005ccc <HAL_InitTick+0xe8>)
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	4a33      	ldr	r2, [pc, #204]	@ (8005ccc <HAL_InitTick+0xe8>)
 8005c00:	f043 0301 	orr.w	r3, r3, #1
 8005c04:	61d3      	str	r3, [r2, #28]
 8005c06:	4b31      	ldr	r3, [pc, #196]	@ (8005ccc <HAL_InitTick+0xe8>)
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005c12:	f107 0210 	add.w	r2, r7, #16
 8005c16:	f107 0314 	add.w	r3, r7, #20
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f005 f9fb 	bl	800b018 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d103      	bne.n	8005c34 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005c2c:	f005 f9cc 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 8005c30:	6378      	str	r0, [r7, #52]	@ 0x34
 8005c32:	e004      	b.n	8005c3e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005c34:	f005 f9c8 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c40:	4a23      	ldr	r2, [pc, #140]	@ (8005cd0 <HAL_InitTick+0xec>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	0c9b      	lsrs	r3, r3, #18
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8005c4c:	4b21      	ldr	r3, [pc, #132]	@ (8005cd4 <HAL_InitTick+0xf0>)
 8005c4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005c52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8005c54:	4b1f      	ldr	r3, [pc, #124]	@ (8005cd4 <HAL_InitTick+0xf0>)
 8005c56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005c5a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd4 <HAL_InitTick+0xf0>)
 8005c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c60:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8005c62:	4b1c      	ldr	r3, [pc, #112]	@ (8005cd4 <HAL_InitTick+0xf0>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c68:	4b1a      	ldr	r3, [pc, #104]	@ (8005cd4 <HAL_InitTick+0xf0>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c6e:	4b19      	ldr	r3, [pc, #100]	@ (8005cd4 <HAL_InitTick+0xf0>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8005c74:	4817      	ldr	r0, [pc, #92]	@ (8005cd4 <HAL_InitTick+0xf0>)
 8005c76:	f006 f9a5 	bl	800bfc4 <HAL_TIM_Base_Init>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005c80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d11b      	bne.n	8005cc0 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8005c88:	4812      	ldr	r0, [pc, #72]	@ (8005cd4 <HAL_InitTick+0xf0>)
 8005c8a:	f006 f9eb 	bl	800c064 <HAL_TIM_Base_Start_IT>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005c94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d111      	bne.n	8005cc0 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005c9c:	201c      	movs	r0, #28
 8005c9e:	f002 f918 	bl	8007ed2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b0f      	cmp	r3, #15
 8005ca6:	d808      	bhi.n	8005cba <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8005ca8:	2200      	movs	r2, #0
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	201c      	movs	r0, #28
 8005cae:	f002 f8f4 	bl	8007e9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005cb2:	4a09      	ldr	r2, [pc, #36]	@ (8005cd8 <HAL_InitTick+0xf4>)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	e002      	b.n	8005cc0 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3738      	adds	r7, #56	@ 0x38
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	431bde83 	.word	0x431bde83
 8005cd4:	200009c0 	.word	0x200009c0
 8005cd8:	2000007c 	.word	0x2000007c

08005cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005ce0:	bf00      	nop
 8005ce2:	e7fd      	b.n	8005ce0 <NMI_Handler+0x4>

08005ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ce8:	bf00      	nop
 8005cea:	e7fd      	b.n	8005ce8 <HardFault_Handler+0x4>

08005cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005cf0:	bf00      	nop
 8005cf2:	e7fd      	b.n	8005cf0 <MemManage_Handler+0x4>

08005cf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cf8:	bf00      	nop
 8005cfa:	e7fd      	b.n	8005cf8 <BusFault_Handler+0x4>

08005cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d00:	bf00      	nop
 8005d02:	e7fd      	b.n	8005d00 <UsageFault_Handler+0x4>

08005d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d08:	bf00      	nop
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr

08005d10 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005d14:	4802      	ldr	r0, [pc, #8]	@ (8005d20 <DMA1_Channel4_IRQHandler+0x10>)
 8005d16:	f002 fb05 	bl	8008324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005d1a:	bf00      	nop
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000b74 	.word	0x20000b74

08005d24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005d28:	4802      	ldr	r0, [pc, #8]	@ (8005d34 <TIM2_IRQHandler+0x10>)
 8005d2a:	f006 fb0d 	bl	800c348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005d2e:	bf00      	nop
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	200009c0 	.word	0x200009c0

08005d38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005d3c:	4802      	ldr	r0, [pc, #8]	@ (8005d48 <TIM3_IRQHandler+0x10>)
 8005d3e:	f006 fb03 	bl	800c348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005d42:	bf00      	nop
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000a0c 	.word	0x20000a0c

08005d4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005d50:	4802      	ldr	r0, [pc, #8]	@ (8005d5c <USART1_IRQHandler+0x10>)
 8005d52:	f007 fa75 	bl	800d240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005d56:	bf00      	nop
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000a9c 	.word	0x20000a9c

08005d60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005d64:	4802      	ldr	r0, [pc, #8]	@ (8005d70 <USART2_IRQHandler+0x10>)
 8005d66:	f007 fa6b 	bl	800d240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005d6a:	bf00      	nop
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000ae4 	.word	0x20000ae4

08005d74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005d78:	4802      	ldr	r0, [pc, #8]	@ (8005d84 <USART3_IRQHandler+0x10>)
 8005d7a:	f007 fa61 	bl	800d240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000b2c 	.word	0x20000b2c

08005d88 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005d8c:	4802      	ldr	r0, [pc, #8]	@ (8005d98 <TIM7_IRQHandler+0x10>)
 8005d8e:	f006 fadb 	bl	800c348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20000a54 	.word	0x20000a54

08005d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005da4:	4a14      	ldr	r2, [pc, #80]	@ (8005df8 <_sbrk+0x5c>)
 8005da6:	4b15      	ldr	r3, [pc, #84]	@ (8005dfc <_sbrk+0x60>)
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005db0:	4b13      	ldr	r3, [pc, #76]	@ (8005e00 <_sbrk+0x64>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d102      	bne.n	8005dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005db8:	4b11      	ldr	r3, [pc, #68]	@ (8005e00 <_sbrk+0x64>)
 8005dba:	4a12      	ldr	r2, [pc, #72]	@ (8005e04 <_sbrk+0x68>)
 8005dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005dbe:	4b10      	ldr	r3, [pc, #64]	@ (8005e00 <_sbrk+0x64>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d207      	bcs.n	8005ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005dcc:	f00f fa38 	bl	8015240 <__errno>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	220c      	movs	r2, #12
 8005dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dda:	e009      	b.n	8005df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ddc:	4b08      	ldr	r3, [pc, #32]	@ (8005e00 <_sbrk+0x64>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005de2:	4b07      	ldr	r3, [pc, #28]	@ (8005e00 <_sbrk+0x64>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4413      	add	r3, r2
 8005dea:	4a05      	ldr	r2, [pc, #20]	@ (8005e00 <_sbrk+0x64>)
 8005dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005dee:	68fb      	ldr	r3, [r7, #12]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	2000c000 	.word	0x2000c000
 8005dfc:	00004000 	.word	0x00004000
 8005e00:	20000a08 	.word	0x20000a08
 8005e04:	20002e10 	.word	0x20002e10

08005e08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e0c:	bf00      	nop
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr

08005e14 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08e      	sub	sp, #56	@ 0x38
 8005e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	605a      	str	r2, [r3, #4]
 8005e24:	609a      	str	r2, [r3, #8]
 8005e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e28:	f107 0320 	add.w	r3, r7, #32
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e32:	1d3b      	adds	r3, r7, #4
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	605a      	str	r2, [r3, #4]
 8005e3a:	609a      	str	r2, [r3, #8]
 8005e3c:	60da      	str	r2, [r3, #12]
 8005e3e:	611a      	str	r2, [r3, #16]
 8005e40:	615a      	str	r2, [r3, #20]
 8005e42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005e44:	4b37      	ldr	r3, [pc, #220]	@ (8005f24 <MX_TIM3_Init+0x110>)
 8005e46:	4a38      	ldr	r2, [pc, #224]	@ (8005f28 <MX_TIM3_Init+0x114>)
 8005e48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8005e4a:	4b36      	ldr	r3, [pc, #216]	@ (8005f24 <MX_TIM3_Init+0x110>)
 8005e4c:	2247      	movs	r2, #71	@ 0x47
 8005e4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e50:	4b34      	ldr	r3, [pc, #208]	@ (8005f24 <MX_TIM3_Init+0x110>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005e56:	4b33      	ldr	r3, [pc, #204]	@ (8005f24 <MX_TIM3_Init+0x110>)
 8005e58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e5e:	4b31      	ldr	r3, [pc, #196]	@ (8005f24 <MX_TIM3_Init+0x110>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e64:	4b2f      	ldr	r3, [pc, #188]	@ (8005f24 <MX_TIM3_Init+0x110>)
 8005e66:	2280      	movs	r2, #128	@ 0x80
 8005e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005e6a:	482e      	ldr	r0, [pc, #184]	@ (8005f24 <MX_TIM3_Init+0x110>)
 8005e6c:	f006 f8aa 	bl	800bfc4 <HAL_TIM_Base_Init>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005e76:	f7ff fdfb 	bl	8005a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005e80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005e84:	4619      	mov	r1, r3
 8005e86:	4827      	ldr	r0, [pc, #156]	@ (8005f24 <MX_TIM3_Init+0x110>)
 8005e88:	f006 fc28 	bl	800c6dc <HAL_TIM_ConfigClockSource>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005e92:	f7ff fded 	bl	8005a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005e96:	4823      	ldr	r0, [pc, #140]	@ (8005f24 <MX_TIM3_Init+0x110>)
 8005e98:	f006 f944 	bl	800c124 <HAL_TIM_PWM_Init>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005ea2:	f7ff fde5 	bl	8005a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005eae:	f107 0320 	add.w	r3, r7, #32
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	481b      	ldr	r0, [pc, #108]	@ (8005f24 <MX_TIM3_Init+0x110>)
 8005eb6:	f006 ffdd 	bl	800ce74 <HAL_TIMEx_MasterConfigSynchronization>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005ec0:	f7ff fdd6 	bl	8005a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ec4:	2360      	movs	r3, #96	@ 0x60
 8005ec6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ed4:	1d3b      	adds	r3, r7, #4
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4812      	ldr	r0, [pc, #72]	@ (8005f24 <MX_TIM3_Init+0x110>)
 8005edc:	f006 fb3c 	bl	800c558 <HAL_TIM_PWM_ConfigChannel>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005ee6:	f7ff fdc3 	bl	8005a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005eea:	1d3b      	adds	r3, r7, #4
 8005eec:	2204      	movs	r2, #4
 8005eee:	4619      	mov	r1, r3
 8005ef0:	480c      	ldr	r0, [pc, #48]	@ (8005f24 <MX_TIM3_Init+0x110>)
 8005ef2:	f006 fb31 	bl	800c558 <HAL_TIM_PWM_ConfigChannel>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005efc:	f7ff fdb8 	bl	8005a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f00:	1d3b      	adds	r3, r7, #4
 8005f02:	2208      	movs	r2, #8
 8005f04:	4619      	mov	r1, r3
 8005f06:	4807      	ldr	r0, [pc, #28]	@ (8005f24 <MX_TIM3_Init+0x110>)
 8005f08:	f006 fb26 	bl	800c558 <HAL_TIM_PWM_ConfigChannel>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8005f12:	f7ff fdad 	bl	8005a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005f16:	4803      	ldr	r0, [pc, #12]	@ (8005f24 <MX_TIM3_Init+0x110>)
 8005f18:	f000 f880 	bl	800601c <HAL_TIM_MspPostInit>

}
 8005f1c:	bf00      	nop
 8005f1e:	3738      	adds	r7, #56	@ 0x38
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	20000a0c 	.word	0x20000a0c
 8005f28:	40000400 	.word	0x40000400

08005f2c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f32:	463b      	mov	r3, r7
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005f3a:	4b15      	ldr	r3, [pc, #84]	@ (8005f90 <MX_TIM7_Init+0x64>)
 8005f3c:	4a15      	ldr	r2, [pc, #84]	@ (8005f94 <MX_TIM7_Init+0x68>)
 8005f3e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8005f40:	4b13      	ldr	r3, [pc, #76]	@ (8005f90 <MX_TIM7_Init+0x64>)
 8005f42:	2247      	movs	r2, #71	@ 0x47
 8005f44:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f46:	4b12      	ldr	r3, [pc, #72]	@ (8005f90 <MX_TIM7_Init+0x64>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8005f4c:	4b10      	ldr	r3, [pc, #64]	@ (8005f90 <MX_TIM7_Init+0x64>)
 8005f4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005f52:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f54:	4b0e      	ldr	r3, [pc, #56]	@ (8005f90 <MX_TIM7_Init+0x64>)
 8005f56:	2280      	movs	r2, #128	@ 0x80
 8005f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005f5a:	480d      	ldr	r0, [pc, #52]	@ (8005f90 <MX_TIM7_Init+0x64>)
 8005f5c:	f006 f832 	bl	800bfc4 <HAL_TIM_Base_Init>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8005f66:	f7ff fd83 	bl	8005a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005f72:	463b      	mov	r3, r7
 8005f74:	4619      	mov	r1, r3
 8005f76:	4806      	ldr	r0, [pc, #24]	@ (8005f90 <MX_TIM7_Init+0x64>)
 8005f78:	f006 ff7c 	bl	800ce74 <HAL_TIMEx_MasterConfigSynchronization>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8005f82:	f7ff fd75 	bl	8005a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005f86:	bf00      	nop
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000a54 	.word	0x20000a54
 8005f94:	40001400 	.word	0x40001400

08005f98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8006010 <HAL_TIM_Base_MspInit+0x78>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d114      	bne.n	8005fd4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005faa:	4b1a      	ldr	r3, [pc, #104]	@ (8006014 <HAL_TIM_Base_MspInit+0x7c>)
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	4a19      	ldr	r2, [pc, #100]	@ (8006014 <HAL_TIM_Base_MspInit+0x7c>)
 8005fb0:	f043 0302 	orr.w	r3, r3, #2
 8005fb4:	61d3      	str	r3, [r2, #28]
 8005fb6:	4b17      	ldr	r3, [pc, #92]	@ (8006014 <HAL_TIM_Base_MspInit+0x7c>)
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2105      	movs	r1, #5
 8005fc6:	201d      	movs	r0, #29
 8005fc8:	f001 ff67 	bl	8007e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005fcc:	201d      	movs	r0, #29
 8005fce:	f001 ff80 	bl	8007ed2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005fd2:	e018      	b.n	8006006 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8006018 <HAL_TIM_Base_MspInit+0x80>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d113      	bne.n	8006006 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005fde:	4b0d      	ldr	r3, [pc, #52]	@ (8006014 <HAL_TIM_Base_MspInit+0x7c>)
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8006014 <HAL_TIM_Base_MspInit+0x7c>)
 8005fe4:	f043 0320 	orr.w	r3, r3, #32
 8005fe8:	61d3      	str	r3, [r2, #28]
 8005fea:	4b0a      	ldr	r3, [pc, #40]	@ (8006014 <HAL_TIM_Base_MspInit+0x7c>)
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	60bb      	str	r3, [r7, #8]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2105      	movs	r1, #5
 8005ffa:	2037      	movs	r0, #55	@ 0x37
 8005ffc:	f001 ff4d 	bl	8007e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006000:	2037      	movs	r0, #55	@ 0x37
 8006002:	f001 ff66 	bl	8007ed2 <HAL_NVIC_EnableIRQ>
}
 8006006:	bf00      	nop
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	40000400 	.word	0x40000400
 8006014:	40021000 	.word	0x40021000
 8006018:	40001400 	.word	0x40001400

0800601c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006024:	f107 0310 	add.w	r3, r7, #16
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	605a      	str	r2, [r3, #4]
 800602e:	609a      	str	r2, [r3, #8]
 8006030:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1b      	ldr	r2, [pc, #108]	@ (80060a4 <HAL_TIM_MspPostInit+0x88>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d12f      	bne.n	800609c <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800603c:	4b1a      	ldr	r3, [pc, #104]	@ (80060a8 <HAL_TIM_MspPostInit+0x8c>)
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	4a19      	ldr	r2, [pc, #100]	@ (80060a8 <HAL_TIM_MspPostInit+0x8c>)
 8006042:	f043 0304 	orr.w	r3, r3, #4
 8006046:	6193      	str	r3, [r2, #24]
 8006048:	4b17      	ldr	r3, [pc, #92]	@ (80060a8 <HAL_TIM_MspPostInit+0x8c>)
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006054:	4b14      	ldr	r3, [pc, #80]	@ (80060a8 <HAL_TIM_MspPostInit+0x8c>)
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	4a13      	ldr	r2, [pc, #76]	@ (80060a8 <HAL_TIM_MspPostInit+0x8c>)
 800605a:	f043 0308 	orr.w	r3, r3, #8
 800605e:	6193      	str	r3, [r2, #24]
 8006060:	4b11      	ldr	r3, [pc, #68]	@ (80060a8 <HAL_TIM_MspPostInit+0x8c>)
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f003 0308 	and.w	r3, r3, #8
 8006068:	60bb      	str	r3, [r7, #8]
 800606a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800606c:	23c0      	movs	r3, #192	@ 0xc0
 800606e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006070:	2302      	movs	r3, #2
 8006072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006074:	2302      	movs	r3, #2
 8006076:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006078:	f107 0310 	add.w	r3, r7, #16
 800607c:	4619      	mov	r1, r3
 800607e:	480b      	ldr	r0, [pc, #44]	@ (80060ac <HAL_TIM_MspPostInit+0x90>)
 8006080:	f002 fbba 	bl	80087f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006084:	2301      	movs	r3, #1
 8006086:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006088:	2302      	movs	r3, #2
 800608a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800608c:	2302      	movs	r3, #2
 800608e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006090:	f107 0310 	add.w	r3, r7, #16
 8006094:	4619      	mov	r1, r3
 8006096:	4806      	ldr	r0, [pc, #24]	@ (80060b0 <HAL_TIM_MspPostInit+0x94>)
 8006098:	f002 fbae 	bl	80087f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800609c:	bf00      	nop
 800609e:	3720      	adds	r7, #32
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40000400 	.word	0x40000400
 80060a8:	40021000 	.word	0x40021000
 80060ac:	40010800 	.word	0x40010800
 80060b0:	40010c00 	.word	0x40010c00

080060b4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80060b8:	4b11      	ldr	r3, [pc, #68]	@ (8006100 <MX_USART1_UART_Init+0x4c>)
 80060ba:	4a12      	ldr	r2, [pc, #72]	@ (8006104 <MX_USART1_UART_Init+0x50>)
 80060bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80060be:	4b10      	ldr	r3, [pc, #64]	@ (8006100 <MX_USART1_UART_Init+0x4c>)
 80060c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80060c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80060c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006100 <MX_USART1_UART_Init+0x4c>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80060cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006100 <MX_USART1_UART_Init+0x4c>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80060d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006100 <MX_USART1_UART_Init+0x4c>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80060d8:	4b09      	ldr	r3, [pc, #36]	@ (8006100 <MX_USART1_UART_Init+0x4c>)
 80060da:	220c      	movs	r2, #12
 80060dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060de:	4b08      	ldr	r3, [pc, #32]	@ (8006100 <MX_USART1_UART_Init+0x4c>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80060e4:	4b06      	ldr	r3, [pc, #24]	@ (8006100 <MX_USART1_UART_Init+0x4c>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80060ea:	4805      	ldr	r0, [pc, #20]	@ (8006100 <MX_USART1_UART_Init+0x4c>)
 80060ec:	f006 ff40 	bl	800cf70 <HAL_UART_Init>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80060f6:	f7ff fcbb 	bl	8005a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80060fa:	bf00      	nop
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000a9c 	.word	0x20000a9c
 8006104:	40013800 	.word	0x40013800

08006108 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800610c:	4b11      	ldr	r3, [pc, #68]	@ (8006154 <MX_USART2_UART_Init+0x4c>)
 800610e:	4a12      	ldr	r2, [pc, #72]	@ (8006158 <MX_USART2_UART_Init+0x50>)
 8006110:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006112:	4b10      	ldr	r3, [pc, #64]	@ (8006154 <MX_USART2_UART_Init+0x4c>)
 8006114:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006118:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800611a:	4b0e      	ldr	r3, [pc, #56]	@ (8006154 <MX_USART2_UART_Init+0x4c>)
 800611c:	2200      	movs	r2, #0
 800611e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006120:	4b0c      	ldr	r3, [pc, #48]	@ (8006154 <MX_USART2_UART_Init+0x4c>)
 8006122:	2200      	movs	r2, #0
 8006124:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006126:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <MX_USART2_UART_Init+0x4c>)
 8006128:	2200      	movs	r2, #0
 800612a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800612c:	4b09      	ldr	r3, [pc, #36]	@ (8006154 <MX_USART2_UART_Init+0x4c>)
 800612e:	220c      	movs	r2, #12
 8006130:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006132:	4b08      	ldr	r3, [pc, #32]	@ (8006154 <MX_USART2_UART_Init+0x4c>)
 8006134:	2200      	movs	r2, #0
 8006136:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006138:	4b06      	ldr	r3, [pc, #24]	@ (8006154 <MX_USART2_UART_Init+0x4c>)
 800613a:	2200      	movs	r2, #0
 800613c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800613e:	4805      	ldr	r0, [pc, #20]	@ (8006154 <MX_USART2_UART_Init+0x4c>)
 8006140:	f006 ff16 	bl	800cf70 <HAL_UART_Init>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800614a:	f7ff fc91 	bl	8005a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800614e:	bf00      	nop
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000ae4 	.word	0x20000ae4
 8006158:	40004400 	.word	0x40004400

0800615c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006160:	4b11      	ldr	r3, [pc, #68]	@ (80061a8 <MX_USART3_UART_Init+0x4c>)
 8006162:	4a12      	ldr	r2, [pc, #72]	@ (80061ac <MX_USART3_UART_Init+0x50>)
 8006164:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8006166:	4b10      	ldr	r3, [pc, #64]	@ (80061a8 <MX_USART3_UART_Init+0x4c>)
 8006168:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800616c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800616e:	4b0e      	ldr	r3, [pc, #56]	@ (80061a8 <MX_USART3_UART_Init+0x4c>)
 8006170:	2200      	movs	r2, #0
 8006172:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006174:	4b0c      	ldr	r3, [pc, #48]	@ (80061a8 <MX_USART3_UART_Init+0x4c>)
 8006176:	2200      	movs	r2, #0
 8006178:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800617a:	4b0b      	ldr	r3, [pc, #44]	@ (80061a8 <MX_USART3_UART_Init+0x4c>)
 800617c:	2200      	movs	r2, #0
 800617e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006180:	4b09      	ldr	r3, [pc, #36]	@ (80061a8 <MX_USART3_UART_Init+0x4c>)
 8006182:	220c      	movs	r2, #12
 8006184:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006186:	4b08      	ldr	r3, [pc, #32]	@ (80061a8 <MX_USART3_UART_Init+0x4c>)
 8006188:	2200      	movs	r2, #0
 800618a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800618c:	4b06      	ldr	r3, [pc, #24]	@ (80061a8 <MX_USART3_UART_Init+0x4c>)
 800618e:	2200      	movs	r2, #0
 8006190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006192:	4805      	ldr	r0, [pc, #20]	@ (80061a8 <MX_USART3_UART_Init+0x4c>)
 8006194:	f006 feec 	bl	800cf70 <HAL_UART_Init>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800619e:	f7ff fc67 	bl	8005a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80061a2:	bf00      	nop
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000b2c 	.word	0x20000b2c
 80061ac:	40004800 	.word	0x40004800

080061b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08e      	sub	sp, #56	@ 0x38
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	605a      	str	r2, [r3, #4]
 80061c2:	609a      	str	r2, [r3, #8]
 80061c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a7c      	ldr	r2, [pc, #496]	@ (80063bc <HAL_UART_MspInit+0x20c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d161      	bne.n	8006294 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80061d0:	4b7b      	ldr	r3, [pc, #492]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	4a7a      	ldr	r2, [pc, #488]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 80061d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061da:	6193      	str	r3, [r2, #24]
 80061dc:	4b78      	ldr	r3, [pc, #480]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061e8:	4b75      	ldr	r3, [pc, #468]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	4a74      	ldr	r2, [pc, #464]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 80061ee:	f043 0304 	orr.w	r3, r3, #4
 80061f2:	6193      	str	r3, [r2, #24]
 80061f4:	4b72      	ldr	r3, [pc, #456]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	61fb      	str	r3, [r7, #28]
 80061fe:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006200:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006204:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006206:	2302      	movs	r3, #2
 8006208:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800620a:	2303      	movs	r3, #3
 800620c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800620e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006212:	4619      	mov	r1, r3
 8006214:	486b      	ldr	r0, [pc, #428]	@ (80063c4 <HAL_UART_MspInit+0x214>)
 8006216:	f002 faef 	bl	80087f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800621a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800621e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006220:	2300      	movs	r3, #0
 8006222:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006224:	2300      	movs	r3, #0
 8006226:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800622c:	4619      	mov	r1, r3
 800622e:	4865      	ldr	r0, [pc, #404]	@ (80063c4 <HAL_UART_MspInit+0x214>)
 8006230:	f002 fae2 	bl	80087f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8006234:	4b64      	ldr	r3, [pc, #400]	@ (80063c8 <HAL_UART_MspInit+0x218>)
 8006236:	4a65      	ldr	r2, [pc, #404]	@ (80063cc <HAL_UART_MspInit+0x21c>)
 8006238:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800623a:	4b63      	ldr	r3, [pc, #396]	@ (80063c8 <HAL_UART_MspInit+0x218>)
 800623c:	2210      	movs	r2, #16
 800623e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006240:	4b61      	ldr	r3, [pc, #388]	@ (80063c8 <HAL_UART_MspInit+0x218>)
 8006242:	2200      	movs	r2, #0
 8006244:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006246:	4b60      	ldr	r3, [pc, #384]	@ (80063c8 <HAL_UART_MspInit+0x218>)
 8006248:	2280      	movs	r2, #128	@ 0x80
 800624a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800624c:	4b5e      	ldr	r3, [pc, #376]	@ (80063c8 <HAL_UART_MspInit+0x218>)
 800624e:	2200      	movs	r2, #0
 8006250:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006252:	4b5d      	ldr	r3, [pc, #372]	@ (80063c8 <HAL_UART_MspInit+0x218>)
 8006254:	2200      	movs	r2, #0
 8006256:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006258:	4b5b      	ldr	r3, [pc, #364]	@ (80063c8 <HAL_UART_MspInit+0x218>)
 800625a:	2200      	movs	r2, #0
 800625c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800625e:	4b5a      	ldr	r3, [pc, #360]	@ (80063c8 <HAL_UART_MspInit+0x218>)
 8006260:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006264:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006266:	4858      	ldr	r0, [pc, #352]	@ (80063c8 <HAL_UART_MspInit+0x218>)
 8006268:	f001 fe42 	bl	8007ef0 <HAL_DMA_Init>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8006272:	f7ff fbfd 	bl	8005a70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a53      	ldr	r2, [pc, #332]	@ (80063c8 <HAL_UART_MspInit+0x218>)
 800627a:	639a      	str	r2, [r3, #56]	@ 0x38
 800627c:	4a52      	ldr	r2, [pc, #328]	@ (80063c8 <HAL_UART_MspInit+0x218>)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006282:	2200      	movs	r2, #0
 8006284:	2105      	movs	r1, #5
 8006286:	2025      	movs	r0, #37	@ 0x25
 8006288:	f001 fe07 	bl	8007e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800628c:	2025      	movs	r0, #37	@ 0x25
 800628e:	f001 fe20 	bl	8007ed2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006292:	e08e      	b.n	80063b2 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART2)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a4d      	ldr	r2, [pc, #308]	@ (80063d0 <HAL_UART_MspInit+0x220>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d138      	bne.n	8006310 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 800629e:	4b48      	ldr	r3, [pc, #288]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	4a47      	ldr	r2, [pc, #284]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 80062a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062a8:	61d3      	str	r3, [r2, #28]
 80062aa:	4b45      	ldr	r3, [pc, #276]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b2:	61bb      	str	r3, [r7, #24]
 80062b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062b6:	4b42      	ldr	r3, [pc, #264]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	4a41      	ldr	r2, [pc, #260]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 80062bc:	f043 0304 	orr.w	r3, r3, #4
 80062c0:	6193      	str	r3, [r2, #24]
 80062c2:	4b3f      	ldr	r3, [pc, #252]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80062ce:	2304      	movs	r3, #4
 80062d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062d2:	2302      	movs	r3, #2
 80062d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80062d6:	2303      	movs	r3, #3
 80062d8:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062de:	4619      	mov	r1, r3
 80062e0:	4838      	ldr	r0, [pc, #224]	@ (80063c4 <HAL_UART_MspInit+0x214>)
 80062e2:	f002 fa89 	bl	80087f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80062e6:	2308      	movs	r3, #8
 80062e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062ea:	2300      	movs	r3, #0
 80062ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062f6:	4619      	mov	r1, r3
 80062f8:	4832      	ldr	r0, [pc, #200]	@ (80063c4 <HAL_UART_MspInit+0x214>)
 80062fa:	f002 fa7d 	bl	80087f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80062fe:	2200      	movs	r2, #0
 8006300:	2105      	movs	r1, #5
 8006302:	2026      	movs	r0, #38	@ 0x26
 8006304:	f001 fdc9 	bl	8007e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006308:	2026      	movs	r0, #38	@ 0x26
 800630a:	f001 fde2 	bl	8007ed2 <HAL_NVIC_EnableIRQ>
}
 800630e:	e050      	b.n	80063b2 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART3)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a2f      	ldr	r2, [pc, #188]	@ (80063d4 <HAL_UART_MspInit+0x224>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d14b      	bne.n	80063b2 <HAL_UART_MspInit+0x202>
    __HAL_RCC_USART3_CLK_ENABLE();
 800631a:	4b29      	ldr	r3, [pc, #164]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	4a28      	ldr	r2, [pc, #160]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 8006320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006324:	61d3      	str	r3, [r2, #28]
 8006326:	4b26      	ldr	r3, [pc, #152]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800632e:	613b      	str	r3, [r7, #16]
 8006330:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006332:	4b23      	ldr	r3, [pc, #140]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	4a22      	ldr	r2, [pc, #136]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 8006338:	f043 0320 	orr.w	r3, r3, #32
 800633c:	6193      	str	r3, [r2, #24]
 800633e:	4b20      	ldr	r3, [pc, #128]	@ (80063c0 <HAL_UART_MspInit+0x210>)
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	f003 0320 	and.w	r3, r3, #32
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800634a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800634e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006350:	2302      	movs	r3, #2
 8006352:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006354:	2303      	movs	r3, #3
 8006356:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800635c:	4619      	mov	r1, r3
 800635e:	481e      	ldr	r0, [pc, #120]	@ (80063d8 <HAL_UART_MspInit+0x228>)
 8006360:	f002 fa4a 	bl	80087f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006364:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006368:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800636a:	2300      	movs	r3, #0
 800636c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800636e:	2300      	movs	r3, #0
 8006370:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006376:	4619      	mov	r1, r3
 8006378:	4817      	ldr	r0, [pc, #92]	@ (80063d8 <HAL_UART_MspInit+0x228>)
 800637a:	f002 fa3d 	bl	80087f8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 800637e:	4b17      	ldr	r3, [pc, #92]	@ (80063dc <HAL_UART_MspInit+0x22c>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	637b      	str	r3, [r7, #52]	@ 0x34
 8006384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006386:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800638a:	637b      	str	r3, [r7, #52]	@ 0x34
 800638c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800638e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8006392:	637b      	str	r3, [r7, #52]	@ 0x34
 8006394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006396:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800639a:	637b      	str	r3, [r7, #52]	@ 0x34
 800639c:	4a0f      	ldr	r2, [pc, #60]	@ (80063dc <HAL_UART_MspInit+0x22c>)
 800639e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063a0:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80063a2:	2200      	movs	r2, #0
 80063a4:	2105      	movs	r1, #5
 80063a6:	2027      	movs	r0, #39	@ 0x27
 80063a8:	f001 fd77 	bl	8007e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80063ac:	2027      	movs	r0, #39	@ 0x27
 80063ae:	f001 fd90 	bl	8007ed2 <HAL_NVIC_EnableIRQ>
}
 80063b2:	bf00      	nop
 80063b4:	3738      	adds	r7, #56	@ 0x38
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	40013800 	.word	0x40013800
 80063c0:	40021000 	.word	0x40021000
 80063c4:	40010800 	.word	0x40010800
 80063c8:	20000b74 	.word	0x20000b74
 80063cc:	40020044 	.word	0x40020044
 80063d0:	40004400 	.word	0x40004400
 80063d4:	40004800 	.word	0x40004800
 80063d8:	40011400 	.word	0x40011400
 80063dc:	40010000 	.word	0x40010000

080063e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80063e0:	f7ff fd12 	bl	8005e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80063e4:	480b      	ldr	r0, [pc, #44]	@ (8006414 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80063e6:	490c      	ldr	r1, [pc, #48]	@ (8006418 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80063e8:	4a0c      	ldr	r2, [pc, #48]	@ (800641c <LoopFillZerobss+0x16>)
  movs r3, #0
 80063ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80063ec:	e002      	b.n	80063f4 <LoopCopyDataInit>

080063ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80063ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80063f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80063f2:	3304      	adds	r3, #4

080063f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80063f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80063f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80063f8:	d3f9      	bcc.n	80063ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80063fa:	4a09      	ldr	r2, [pc, #36]	@ (8006420 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80063fc:	4c09      	ldr	r4, [pc, #36]	@ (8006424 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80063fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006400:	e001      	b.n	8006406 <LoopFillZerobss>

08006402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006404:	3204      	adds	r2, #4

08006406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006408:	d3fb      	bcc.n	8006402 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800640a:	f00e ff1f 	bl	801524c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800640e:	f7ff faa7 	bl	8005960 <main>
  bx lr
 8006412:	4770      	bx	lr
  ldr r0, =_sdata
 8006414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006418:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 800641c:	08016620 	.word	0x08016620
  ldr r2, =_sbss
 8006420:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8006424:	20002e10 	.word	0x20002e10

08006428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006428:	e7fe      	b.n	8006428 <ADC1_2_IRQHandler>
	...

0800642c <AT24Cxx_get_max_addr>:
#include <stdio.h>

#include "AT24Cxx_stm32_hal.h"

uint16_t AT24Cxx_get_max_addr ( AT24Cxx_device_t* dev )
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	791b      	ldrb	r3, [r3, #4]
 8006438:	2b05      	cmp	r3, #5
 800643a:	d820      	bhi.n	800647e <AT24Cxx_get_max_addr+0x52>
 800643c:	a201      	add	r2, pc, #4	@ (adr r2, 8006444 <AT24Cxx_get_max_addr+0x18>)
 800643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006442:	bf00      	nop
 8006444:	0800645d 	.word	0x0800645d
 8006448:	08006461 	.word	0x08006461
 800644c:	08006467 	.word	0x08006467
 8006450:	0800646d 	.word	0x0800646d
 8006454:	08006473 	.word	0x08006473
 8006458:	08006479 	.word	0x08006479
	case AT24C01:
		return AT24C01_MAX_ADDR;
 800645c:	237f      	movs	r3, #127	@ 0x7f
 800645e:	e00f      	b.n	8006480 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C32:
		return AT24C32_MAX_ADDR;
 8006460:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8006464:	e00c      	b.n	8006480 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C64:
		return AT24C64_MAX_ADDR;
 8006466:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800646a:	e009      	b.n	8006480 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C128:
		return AT24C128_MAX_ADDR;
 800646c:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8006470:	e006      	b.n	8006480 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C256:
		return AT24C256_MAX_ADDR;
 8006472:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8006476:	e003      	b.n	8006480 <AT24Cxx_get_max_addr+0x54>
		break;
		//not supported yet, will overflow
	case AT24C512:
		return AT24C512_MAX_ADDR;
 8006478:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800647c:	e000      	b.n	8006480 <AT24Cxx_get_max_addr+0x54>
		break;
	default:
		return 0;
 800647e:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop

0800648c <AT24Cxx_get_pg_size>:

uint16_t AT24Cxx_get_pg_size ( AT24Cxx_device_t* dev )
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	791b      	ldrb	r3, [r3, #4]
 8006498:	2b05      	cmp	r3, #5
 800649a:	d81b      	bhi.n	80064d4 <AT24Cxx_get_pg_size+0x48>
 800649c:	a201      	add	r2, pc, #4	@ (adr r2, 80064a4 <AT24Cxx_get_pg_size+0x18>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064bd 	.word	0x080064bd
 80064a8:	080064c1 	.word	0x080064c1
 80064ac:	080064c5 	.word	0x080064c5
 80064b0:	080064c9 	.word	0x080064c9
 80064b4:	080064cd 	.word	0x080064cd
 80064b8:	080064d1 	.word	0x080064d1
	case AT24C01:
		return AT24C01_PG_SIZE;
 80064bc:	2308      	movs	r3, #8
 80064be:	e00a      	b.n	80064d6 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C32:
		return AT24C32_PG_SIZE;
 80064c0:	2320      	movs	r3, #32
 80064c2:	e008      	b.n	80064d6 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C64:
		return AT24C64_PG_SIZE;
 80064c4:	2320      	movs	r3, #32
 80064c6:	e006      	b.n	80064d6 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C128:
		return AT24C128_PG_SIZE;
 80064c8:	2340      	movs	r3, #64	@ 0x40
 80064ca:	e004      	b.n	80064d6 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C256:
		return AT24C256_PG_SIZE;
 80064cc:	2340      	movs	r3, #64	@ 0x40
 80064ce:	e002      	b.n	80064d6 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C512:
		//not supported yet, will overflow
		return AT24C512_PG_SIZE;
 80064d0:	2380      	movs	r3, #128	@ 0x80
 80064d2:	e000      	b.n	80064d6 <AT24Cxx_get_pg_size+0x4a>
		break;
	default:
		return 0;
 80064d4:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr

080064e0 <AT24Cxx_init>:

AT24Cxx_ERR_TypeDef AT24Cxx_init( AT24Cxx_devices_t* devices, 
	uint8_t init_dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	460b      	mov	r3, r1
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	72fb      	strb	r3, [r7, #11]
	//adds first device to AT32Cxx_devices array
	//further devices should be added by calling AT24Cxx_add_dev()
	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 80064ee:	2114      	movs	r1, #20
 80064f0:	2001      	movs	r0, #1
 80064f2:	f00e fdc3 	bl	801507c <calloc>
 80064f6:	4603      	mov	r3, r0
 80064f8:	613b      	str	r3, [r7, #16]
	if ( at == NULL )
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d102      	bne.n	8006506 <AT24Cxx_init+0x26>
		return at_init_err;
 8006500:	f04f 33ff 	mov.w	r3, #4294967295
 8006504:	e028      	b.n	8006558 <AT24Cxx_init+0x78>

	for(uint8_t i = 0; i < 8; i++)
 8006506:	2300      	movs	r3, #0
 8006508:	75fb      	strb	r3, [r7, #23]
 800650a:	e007      	b.n	800651c <AT24Cxx_init+0x3c>
			devices->devices[i] = 0x00;
 800650c:	7dfa      	ldrb	r2, [r7, #23]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2100      	movs	r1, #0
 8006512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < 8; i++)
 8006516:	7dfb      	ldrb	r3, [r7, #23]
 8006518:	3301      	adds	r3, #1
 800651a:	75fb      	strb	r3, [r7, #23]
 800651c:	7dfb      	ldrb	r3, [r7, #23]
 800651e:	2b07      	cmp	r3, #7
 8006520:	d9f4      	bls.n	800650c <AT24Cxx_init+0x2c>

	at->dev_addr = init_dev_addr;
 8006522:	7afb      	ldrb	r3, [r7, #11]
 8006524:	b29a      	uxth	r2, r3
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2200      	movs	r2, #0
 800652e:	60da      	str	r2, [r3, #12]
	at->prev_dev = NULL;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2200      	movs	r2, #0
 8006534:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	2205      	movs	r2, #5
 800653a:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2201      	movs	r2, #1
 8006546:	721a      	strb	r2, [r3, #8]
	devices->dev_count = 1;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[0] = at;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	601a      	str	r2, [r3, #0]

	return at_ok;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <AT24Cxx_add_dev>:

AT24Cxx_ERR_TypeDef AT24Cxx_add_dev( AT24Cxx_devices_t* devices, 
	uint8_t dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	460b      	mov	r3, r1
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	72fb      	strb	r3, [r7, #11]
	if(devices->dev_count == 0 || devices->dev_count > 8)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <AT24Cxx_add_dev+0x22>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800657e:	2b08      	cmp	r3, #8
 8006580:	d902      	bls.n	8006588 <AT24Cxx_add_dev+0x28>
		return at_add_dev_err;
 8006582:	f06f 0301 	mvn.w	r3, #1
 8006586:	e03e      	b.n	8006606 <AT24Cxx_add_dev+0xa6>

	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 8006588:	2114      	movs	r1, #20
 800658a:	2001      	movs	r0, #1
 800658c:	f00e fd76 	bl	801507c <calloc>
 8006590:	4603      	mov	r3, r0
 8006592:	617b      	str	r3, [r7, #20]
	if ( at == NULL )
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d102      	bne.n	80065a0 <AT24Cxx_add_dev+0x40>
		return at_add_dev_err;
 800659a:	f06f 0301 	mvn.w	r3, #1
 800659e:	e032      	b.n	8006606 <AT24Cxx_add_dev+0xa6>

	at->dev_addr = dev_addr;
 80065a0:	7afb      	ldrb	r3, [r7, #11]
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2200      	movs	r2, #0
 80065ac:	60da      	str	r2, [r3, #12]
	at->prev_dev = devices->devices[devices->dev_count-1];
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065b4:	1e5a      	subs	r2, r3, #1
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2205      	movs	r2, #5
 80065c4:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2201      	movs	r2, #1
 80065d0:	721a      	strb	r2, [r3, #8]
	devices->dev_count++;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065d8:	3301      	adds	r3, #1
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[devices->dev_count-1] = at;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065e8:	1e5a      	subs	r2, r3, #1
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6979      	ldr	r1, [r7, #20]
 80065ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//update previous device's next device
	devices->devices[devices->dev_count-2]->next_dev = at;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065f8:	1e9a      	subs	r2, r3, #2
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	60da      	str	r2, [r3, #12]
	return at_ok;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <AT24Cxx_write_byte_buffer>:
	return at_w_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_write_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 800660e:	b5b0      	push	{r4, r5, r7, lr}
 8006610:	b08a      	sub	sp, #40	@ 0x28
 8006612:	af04      	add	r7, sp, #16
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	4611      	mov	r1, r2
 800661a:	461a      	mov	r2, r3
 800661c:	460b      	mov	r3, r1
 800661e:	80fb      	strh	r3, [r7, #6]
 8006620:	4613      	mov	r3, r2
 8006622:	80bb      	strh	r3, [r7, #4]
	//TODO checks

	uint8_t page_size = AT24Cxx_get_pg_size(dev);
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f7ff ff31 	bl	800648c <AT24Cxx_get_pg_size>
 800662a:	4603      	mov	r3, r0
 800662c:	75bb      	strb	r3, [r7, #22]

	uint8_t page_remaining = page_size - mem_addr % page_size;
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	7dba      	ldrb	r2, [r7, #22]
 8006632:	fb93 f1f2 	sdiv	r1, r3, r2
 8006636:	fb01 f202 	mul.w	r2, r1, r2
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	b2db      	uxtb	r3, r3
 800663e:	7dba      	ldrb	r2, [r7, #22]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	757b      	strb	r3, [r7, #21]

	uint8_t page_writes = (buf_length - page_remaining) / page_size;
 8006644:	88ba      	ldrh	r2, [r7, #4]
 8006646:	7d7b      	ldrb	r3, [r7, #21]
 8006648:	1ad2      	subs	r2, r2, r3
 800664a:	7dbb      	ldrb	r3, [r7, #22]
 800664c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006650:	753b      	strb	r3, [r7, #20]
	uint8_t remainder_writes = (buf_length - page_remaining) % page_size;
 8006652:	88ba      	ldrh	r2, [r7, #4]
 8006654:	7d7b      	ldrb	r3, [r7, #21]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	7dba      	ldrb	r2, [r7, #22]
 800665a:	fb93 f1f2 	sdiv	r1, r3, r2
 800665e:	fb01 f202 	mul.w	r2, r1, r2
 8006662:	1a9b      	subs	r3, r3, r2
 8006664:	74fb      	strb	r3, [r7, #19]

	//finish first page
	if((mem_addr + page_remaining) > 0x00 &&
 8006666:	88fa      	ldrh	r2, [r7, #6]
 8006668:	7d7b      	ldrb	r3, [r7, #21]
 800666a:	4413      	add	r3, r2
 800666c:	2b00      	cmp	r3, #0
 800666e:	dd23      	ble.n	80066b8 <AT24Cxx_write_byte_buffer+0xaa>
		(mem_addr + page_remaining) < AT24Cxx_get_max_addr(dev)){
 8006670:	88fa      	ldrh	r2, [r7, #6]
 8006672:	7d7b      	ldrb	r3, [r7, #21]
 8006674:	18d4      	adds	r4, r2, r3
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f7ff fed8 	bl	800642c <AT24Cxx_get_max_addr>
 800667c:	4603      	mov	r3, r0
	if((mem_addr + page_remaining) > 0x00 &&
 800667e:	429c      	cmp	r4, r3
 8006680:	da1a      	bge.n	80066b8 <AT24Cxx_write_byte_buffer+0xaa>

		while(HAL_I2C_Mem_Write(dev->dev_port,
 8006682:	bf00      	nop
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	88db      	ldrh	r3, [r3, #6]
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	b21b      	sxth	r3, r3
 8006690:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8006694:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Write(dev->dev_port,
 8006696:	b299      	uxth	r1, r3
 8006698:	7d7b      	ldrb	r3, [r7, #21]
 800669a:	b29b      	uxth	r3, r3
 800669c:	88fa      	ldrh	r2, [r7, #6]
 800669e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80066a2:	9402      	str	r4, [sp, #8]
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	2310      	movs	r3, #16
 80066ac:	f002 ff2e 	bl	800950c <HAL_I2C_Mem_Write>
 80066b0:	4603      	mov	r3, r0
				(uint16_t) mem_addr,
				I2C_MEMADD_SIZE_16BIT,
				data_buf,
				page_remaining,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e6      	bne.n	8006684 <AT24Cxx_write_byte_buffer+0x76>
	if((mem_addr + page_remaining) > 0x00 &&
 80066b6:	e002      	b.n	80066be <AT24Cxx_write_byte_buffer+0xb0>
	}else return at_w_bytes_err;
 80066b8:	f06f 0304 	mvn.w	r3, #4
 80066bc:	e0a5      	b.n	800680a <AT24Cxx_write_byte_buffer+0x1fc>

	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 80066be:	2300      	movs	r3, #0
 80066c0:	75fb      	strb	r3, [r7, #23]
 80066c2:	e04e      	b.n	8006762 <AT24Cxx_write_byte_buffer+0x154>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 80066c4:	88fa      	ldrh	r2, [r7, #6]
 80066c6:	7d7b      	ldrb	r3, [r7, #21]
 80066c8:	441a      	add	r2, r3
 80066ca:	7dfb      	ldrb	r3, [r7, #23]
 80066cc:	7db9      	ldrb	r1, [r7, #22]
 80066ce:	fb01 f303 	mul.w	r3, r1, r3
 80066d2:	4413      	add	r3, r2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	dd3e      	ble.n	8006756 <AT24Cxx_write_byte_buffer+0x148>
			(mem_addr + page_remaining + (current_page * page_size)) < AT24Cxx_get_max_addr(dev)){
 80066d8:	88fa      	ldrh	r2, [r7, #6]
 80066da:	7d7b      	ldrb	r3, [r7, #21]
 80066dc:	441a      	add	r2, r3
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	7db9      	ldrb	r1, [r7, #22]
 80066e2:	fb01 f303 	mul.w	r3, r1, r3
 80066e6:	18d4      	adds	r4, r2, r3
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f7ff fe9f 	bl	800642c <AT24Cxx_get_max_addr>
 80066ee:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 80066f0:	429c      	cmp	r4, r3
 80066f2:	da30      	bge.n	8006756 <AT24Cxx_write_byte_buffer+0x148>

				while(HAL_I2C_Mem_Write(dev->dev_port,
 80066f4:	bf00      	nop
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6818      	ldr	r0, [r3, #0]
					AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	88db      	ldrh	r3, [r3, #6]
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	b21b      	sxth	r3, r3
 8006702:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8006706:	b21b      	sxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8006708:	b29c      	uxth	r4, r3
					(uint16_t) mem_addr + page_remaining + (current_page * page_size),
 800670a:	7d7b      	ldrb	r3, [r7, #21]
 800670c:	b29a      	uxth	r2, r3
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	4413      	add	r3, r2
 8006712:	b29a      	uxth	r2, r3
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	b29b      	uxth	r3, r3
 8006718:	7db9      	ldrb	r1, [r7, #22]
 800671a:	b289      	uxth	r1, r1
 800671c:	fb01 f303 	mul.w	r3, r1, r3
 8006720:	b29b      	uxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8006722:	4413      	add	r3, r2
 8006724:	b29d      	uxth	r5, r3
					I2C_MEMADD_SIZE_16BIT,
					data_buf + page_remaining + (current_page * page_size),
 8006726:	7d7b      	ldrb	r3, [r7, #21]
 8006728:	7dfa      	ldrb	r2, [r7, #23]
 800672a:	7db9      	ldrb	r1, [r7, #22]
 800672c:	fb01 f202 	mul.w	r2, r1, r2
 8006730:	4413      	add	r3, r2
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	4413      	add	r3, r2
 8006736:	7dba      	ldrb	r2, [r7, #22]
 8006738:	b292      	uxth	r2, r2
 800673a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800673e:	9102      	str	r1, [sp, #8]
 8006740:	9201      	str	r2, [sp, #4]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	2310      	movs	r3, #16
 8006746:	462a      	mov	r2, r5
 8006748:	4621      	mov	r1, r4
 800674a:	f002 fedf 	bl	800950c <HAL_I2C_Mem_Write>
 800674e:	4603      	mov	r3, r0
					page_size,
					AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1d0      	bne.n	80066f6 <AT24Cxx_write_byte_buffer+0xe8>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8006754:	e002      	b.n	800675c <AT24Cxx_write_byte_buffer+0x14e>
		}else return at_w_bytes_err;
 8006756:	f06f 0304 	mvn.w	r3, #4
 800675a:	e056      	b.n	800680a <AT24Cxx_write_byte_buffer+0x1fc>
	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 800675c:	7dfb      	ldrb	r3, [r7, #23]
 800675e:	3301      	adds	r3, #1
 8006760:	75fb      	strb	r3, [r7, #23]
 8006762:	7dfa      	ldrb	r2, [r7, #23]
 8006764:	7d3b      	ldrb	r3, [r7, #20]
 8006766:	429a      	cmp	r2, r3
 8006768:	d3ac      	bcc.n	80066c4 <AT24Cxx_write_byte_buffer+0xb6>
	}

	if(remainder_writes){
 800676a:	7cfb      	ldrb	r3, [r7, #19]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d04b      	beq.n	8006808 <AT24Cxx_write_byte_buffer+0x1fa>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8006770:	88fa      	ldrh	r2, [r7, #6]
 8006772:	7d7b      	ldrb	r3, [r7, #21]
 8006774:	441a      	add	r2, r3
 8006776:	7d3b      	ldrb	r3, [r7, #20]
 8006778:	7db9      	ldrb	r1, [r7, #22]
 800677a:	fb01 f303 	mul.w	r3, r1, r3
 800677e:	4413      	add	r3, r2
 8006780:	2b00      	cmp	r3, #0
 8006782:	dd3e      	ble.n	8006802 <AT24Cxx_write_byte_buffer+0x1f4>
			(mem_addr + page_remaining + (page_writes * page_size)) < AT24Cxx_get_max_addr(dev)){
 8006784:	88fa      	ldrh	r2, [r7, #6]
 8006786:	7d7b      	ldrb	r3, [r7, #21]
 8006788:	441a      	add	r2, r3
 800678a:	7d3b      	ldrb	r3, [r7, #20]
 800678c:	7db9      	ldrb	r1, [r7, #22]
 800678e:	fb01 f303 	mul.w	r3, r1, r3
 8006792:	18d4      	adds	r4, r2, r3
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f7ff fe49 	bl	800642c <AT24Cxx_get_max_addr>
 800679a:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 800679c:	429c      	cmp	r4, r3
 800679e:	da30      	bge.n	8006802 <AT24Cxx_write_byte_buffer+0x1f4>

			while(HAL_I2C_Mem_Write(dev->dev_port,
 80067a0:	bf00      	nop
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	88db      	ldrh	r3, [r3, #6]
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	b21b      	sxth	r3, r3
 80067ae:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80067b2:	b21b      	sxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 80067b4:	b29c      	uxth	r4, r3
				(uint16_t) mem_addr + page_remaining + (page_writes * page_size),
 80067b6:	7d7b      	ldrb	r3, [r7, #21]
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	88fb      	ldrh	r3, [r7, #6]
 80067bc:	4413      	add	r3, r2
 80067be:	b29a      	uxth	r2, r3
 80067c0:	7d3b      	ldrb	r3, [r7, #20]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	7db9      	ldrb	r1, [r7, #22]
 80067c6:	b289      	uxth	r1, r1
 80067c8:	fb01 f303 	mul.w	r3, r1, r3
 80067cc:	b29b      	uxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 80067ce:	4413      	add	r3, r2
 80067d0:	b29d      	uxth	r5, r3
				I2C_MEMADD_SIZE_16BIT,
				data_buf + page_remaining + (page_writes * page_size),
 80067d2:	7d7b      	ldrb	r3, [r7, #21]
 80067d4:	7d3a      	ldrb	r2, [r7, #20]
 80067d6:	7db9      	ldrb	r1, [r7, #22]
 80067d8:	fb01 f202 	mul.w	r2, r1, r2
 80067dc:	4413      	add	r3, r2
			while(HAL_I2C_Mem_Write(dev->dev_port,
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	4413      	add	r3, r2
 80067e2:	7cfa      	ldrb	r2, [r7, #19]
 80067e4:	b292      	uxth	r2, r2
 80067e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80067ea:	9102      	str	r1, [sp, #8]
 80067ec:	9201      	str	r2, [sp, #4]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	2310      	movs	r3, #16
 80067f2:	462a      	mov	r2, r5
 80067f4:	4621      	mov	r1, r4
 80067f6:	f002 fe89 	bl	800950c <HAL_I2C_Mem_Write>
 80067fa:	4603      	mov	r3, r0
				remainder_writes,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1d0      	bne.n	80067a2 <AT24Cxx_write_byte_buffer+0x194>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8006800:	e002      	b.n	8006808 <AT24Cxx_write_byte_buffer+0x1fa>
		}else return at_w_bytes_err;
 8006802:	f06f 0304 	mvn.w	r3, #4
 8006806:	e000      	b.n	800680a <AT24Cxx_write_byte_buffer+0x1fc>
	}

	return at_ok;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bdb0      	pop	{r4, r5, r7, pc}

08006812 <AT24Cxx_read_byte_buffer>:
	return at_r_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_read_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b088      	sub	sp, #32
 8006816:	af04      	add	r7, sp, #16
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	4611      	mov	r1, r2
 800681e:	461a      	mov	r2, r3
 8006820:	460b      	mov	r3, r1
 8006822:	80fb      	strh	r3, [r7, #6]
 8006824:	4613      	mov	r3, r2
 8006826:	80bb      	strh	r3, [r7, #4]
	if(mem_addr > 0x00 && mem_addr < AT24Cxx_get_max_addr(dev)){
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d022      	beq.n	8006874 <AT24Cxx_read_byte_buffer+0x62>
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f7ff fdfc 	bl	800642c <AT24Cxx_get_max_addr>
 8006834:	4603      	mov	r3, r0
 8006836:	461a      	mov	r2, r3
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	4293      	cmp	r3, r2
 800683c:	d21a      	bcs.n	8006874 <AT24Cxx_read_byte_buffer+0x62>
		while(HAL_I2C_Mem_Read(dev->dev_port,
 800683e:	bf00      	nop
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_R | (dev->dev_addr << 1) ,
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	88db      	ldrh	r3, [r3, #6]
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	b21b      	sxth	r3, r3
 800684c:	f043 03a1 	orr.w	r3, r3, #161	@ 0xa1
 8006850:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8006852:	b299      	uxth	r1, r3
 8006854:	88fa      	ldrh	r2, [r7, #6]
 8006856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800685a:	9302      	str	r3, [sp, #8]
 800685c:	88bb      	ldrh	r3, [r7, #4]
 800685e:	9301      	str	r3, [sp, #4]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	2310      	movs	r3, #16
 8006866:	f002 ff4b 	bl	8009700 <HAL_I2C_Mem_Read>
 800686a:	4603      	mov	r3, r0
				(uint16_t) mem_addr, I2C_MEMADD_SIZE_16BIT, data_buf, buf_length,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e7      	bne.n	8006840 <AT24Cxx_read_byte_buffer+0x2e>
		return at_ok;
 8006870:	2300      	movs	r3, #0
 8006872:	e001      	b.n	8006878 <AT24Cxx_read_byte_buffer+0x66>
	}
	return at_r_bytes_err;
 8006874:	f06f 0306 	mvn.w	r3, #6
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static int constrain(int amt, int low, int high)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
    if (amt < low)
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	429a      	cmp	r2, r3
 8006892:	da01      	bge.n	8006898 <constrain+0x18>
        return low;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	e006      	b.n	80068a6 <constrain+0x26>
    else if (amt > high)
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	429a      	cmp	r2, r3
 800689e:	dd01      	ble.n	80068a4 <constrain+0x24>
        return high;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	e000      	b.n	80068a6 <constrain+0x26>
    else
        return amt;
 80068a4:	68fb      	ldr	r3, [r7, #12]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr

080068b0 <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7fa fc66 	bl	8001190 <__aeabi_fcmplt>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <constrainf+0x1e>
        return low;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	e009      	b.n	80068e2 <constrainf+0x32>
    else if (amt > high)
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7fa fc7b 	bl	80011cc <__aeabi_fcmpgt>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <constrainf+0x30>
        return high;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	e000      	b.n	80068e2 <constrainf+0x32>
    else
        return amt;
 80068e0:	68fb      	ldr	r3, [r7, #12]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
    float RC = 1 / (2 * M_PIf * f_cut);
 80068f6:	490d      	ldr	r1, [pc, #52]	@ (800692c <pt1FilterGain+0x40>)
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7fa faab 	bl	8000e54 <__aeabi_fmul>
 80068fe:	4603      	mov	r3, r0
 8006900:	4619      	mov	r1, r3
 8006902:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006906:	f7fa fb59 	bl	8000fbc <__aeabi_fdiv>
 800690a:	4603      	mov	r3, r0
 800690c:	60fb      	str	r3, [r7, #12]
    return dT/ (RC + dT);
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f7fa f997 	bl	8000c44 <__addsf3>
 8006916:	4603      	mov	r3, r0
 8006918:	4619      	mov	r1, r3
 800691a:	6838      	ldr	r0, [r7, #0]
 800691c:	f7fa fb4e 	bl	8000fbc <__aeabi_fdiv>
 8006920:	4603      	mov	r3, r0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	40c90fdb 	.word	0x40c90fdb

08006930 <attitude_ctrl_init>:


/*
 *  init pid controller
 **/
void attitude_ctrl_init(){
 8006930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af02      	add	r7, sp, #8

   speed_filter_reset = TRUE;
 8006938:	4b31      	ldr	r3, [pc, #196]	@ (8006a00 <attitude_ctrl_init+0xd0>)
 800693a:	2201      	movs	r2, #1
 800693c:	701a      	strb	r2, [r3, #0]
   ab_speed_filted = 0.0f;
 800693e:	4b31      	ldr	r3, [pc, #196]	@ (8006a04 <attitude_ctrl_init+0xd4>)
 8006940:	f04f 0200 	mov.w	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
   // init pid 
   pid_init(&roll_angle_pid, pid_file_1.roll_angle_Kp,0,0,0,0);
 8006946:	4b30      	ldr	r3, [pc, #192]	@ (8006a08 <attitude_ctrl_init+0xd8>)
 8006948:	68d9      	ldr	r1, [r3, #12]
 800694a:	f04f 0300 	mov.w	r3, #0
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	f04f 0300 	mov.w	r3, #0
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	f04f 0300 	mov.w	r3, #0
 800695a:	f04f 0200 	mov.w	r2, #0
 800695e:	482b      	ldr	r0, [pc, #172]	@ (8006a0c <attitude_ctrl_init+0xdc>)
 8006960:	f7fd ff9d 	bl	800489e <pid_init>
   pid_init(&roll_rate_pid, pid_file_1.roll_rate_Kp, pid_file_1.roll_rate_Ki, pid_file_1.roll_rate_Kd, pid_file_1.roll_f_cut_rate_D, pid_file_1.roll_max_I);
 8006964:	4b28      	ldr	r3, [pc, #160]	@ (8006a08 <attitude_ctrl_init+0xd8>)
 8006966:	691c      	ldr	r4, [r3, #16]
 8006968:	4b27      	ldr	r3, [pc, #156]	@ (8006a08 <attitude_ctrl_init+0xd8>)
 800696a:	695d      	ldr	r5, [r3, #20]
 800696c:	4b26      	ldr	r3, [pc, #152]	@ (8006a08 <attitude_ctrl_init+0xd8>)
 800696e:	699e      	ldr	r6, [r3, #24]
 8006970:	4b25      	ldr	r3, [pc, #148]	@ (8006a08 <attitude_ctrl_init+0xd8>)
 8006972:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8006976:	4618      	mov	r0, r3
 8006978:	f7fa fa18 	bl	8000dac <__aeabi_i2f>
 800697c:	4680      	mov	r8, r0
 800697e:	4b22      	ldr	r3, [pc, #136]	@ (8006a08 <attitude_ctrl_init+0xd8>)
 8006980:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8006984:	4618      	mov	r0, r3
 8006986:	f7fa fa11 	bl	8000dac <__aeabi_i2f>
 800698a:	4603      	mov	r3, r0
 800698c:	9301      	str	r3, [sp, #4]
 800698e:	f8cd 8000 	str.w	r8, [sp]
 8006992:	4633      	mov	r3, r6
 8006994:	462a      	mov	r2, r5
 8006996:	4621      	mov	r1, r4
 8006998:	481d      	ldr	r0, [pc, #116]	@ (8006a10 <attitude_ctrl_init+0xe0>)
 800699a:	f7fd ff80 	bl	800489e <pid_init>

   pid_init(&pitch_angle_pid, pid_file_1.pitch_angle_Kp,0,0,0,0);
 800699e:	4b1a      	ldr	r3, [pc, #104]	@ (8006a08 <attitude_ctrl_init+0xd8>)
 80069a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	f04f 0300 	mov.w	r3, #0
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	f04f 0200 	mov.w	r2, #0
 80069b6:	4817      	ldr	r0, [pc, #92]	@ (8006a14 <attitude_ctrl_init+0xe4>)
 80069b8:	f7fd ff71 	bl	800489e <pid_init>
   pid_init(&pitch_rate_pid,pid_file_1.pitch_rate_Kp,pid_file_1.pitch_rate_Ki,pid_file_1.pitch_rate_Kd,pid_file_1.pitch_f_cut_rate_D,pid_file_1.pitch_max_I);
 80069bc:	4b12      	ldr	r3, [pc, #72]	@ (8006a08 <attitude_ctrl_init+0xd8>)
 80069be:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80069c0:	4b11      	ldr	r3, [pc, #68]	@ (8006a08 <attitude_ctrl_init+0xd8>)
 80069c2:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 80069c4:	4b10      	ldr	r3, [pc, #64]	@ (8006a08 <attitude_ctrl_init+0xd8>)
 80069c6:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 80069c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006a08 <attitude_ctrl_init+0xd8>)
 80069ca:	f993 303c 	ldrsb.w	r3, [r3, #60]	@ 0x3c
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fa f9ec 	bl	8000dac <__aeabi_i2f>
 80069d4:	4680      	mov	r8, r0
 80069d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006a08 <attitude_ctrl_init+0xd8>)
 80069d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80069dc:	4618      	mov	r0, r3
 80069de:	f7fa f9e5 	bl	8000dac <__aeabi_i2f>
 80069e2:	4603      	mov	r3, r0
 80069e4:	9301      	str	r3, [sp, #4]
 80069e6:	f8cd 8000 	str.w	r8, [sp]
 80069ea:	4633      	mov	r3, r6
 80069ec:	462a      	mov	r2, r5
 80069ee:	4621      	mov	r1, r4
 80069f0:	4809      	ldr	r0, [pc, #36]	@ (8006a18 <attitude_ctrl_init+0xe8>)
 80069f2:	f7fd ff54 	bl	800489e <pid_init>

   // rate 
   //pid_init(&roll_rate_t,4,0,0,F_CUT_OFF,300);
   //pid_init(&pitch_rate_t,4,0,0,F_CUT_OFF,300);

}
 80069f6:	bf00      	nop
 80069f8:	46bd      	mov	sp, r7
 80069fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069fe:	bf00      	nop
 8006a00:	20000bc4 	.word	0x20000bc4
 8006a04:	20000c6c 	.word	0x20000c6c
 8006a08:	2000002c 	.word	0x2000002c
 8006a0c:	20000c10 	.word	0x20000c10
 8006a10:	20000bc8 	.word	0x20000bc8
 8006a14:	20000c34 	.word	0x20000c34
 8006a18:	20000bec 	.word	0x20000bec
 8006a1c:	00000000 	.word	0x00000000

08006a20 <attitude_ctrl>:

void attitude_ctrl(const uint32_t micros){
 8006a20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006a24:	b09a      	sub	sp, #104	@ 0x68
 8006a26:	af02      	add	r7, sp, #8
 8006a28:	6078      	str	r0, [r7, #4]
    static uint32_t last_time_us; 
    float dt = (micros - last_time_us)*(1e-6f);
 8006a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ad4 <attitude_ctrl+0xb4>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fa f9b6 	bl	8000da4 <__aeabi_ui2f>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	4927      	ldr	r1, [pc, #156]	@ (8006ad8 <attitude_ctrl+0xb8>)
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fa fa09 	bl	8000e54 <__aeabi_fmul>
 8006a42:	4603      	mov	r3, r0
 8006a44:	65bb      	str	r3, [r7, #88]	@ 0x58
    last_time_us = micros;
 8006a46:	4a23      	ldr	r2, [pc, #140]	@ (8006ad4 <attitude_ctrl+0xb4>)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6013      	str	r3, [r2, #0]
    if(dt < 0 || dt > MAX_WAIT_TIME){
 8006a4c:	f04f 0100 	mov.w	r1, #0
 8006a50:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006a52:	f7fa fb9d 	bl	8001190 <__aeabi_fcmplt>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f040 83d5 	bne.w	8007208 <attitude_ctrl+0x7e8>
 8006a5e:	491f      	ldr	r1, [pc, #124]	@ (8006adc <attitude_ctrl+0xbc>)
 8006a60:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006a62:	f7fa fbb3 	bl	80011cc <__aeabi_fcmpgt>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f040 83cd 	bne.w	8007208 <attitude_ctrl+0x7e8>
        return;
    }

    const float roll_rate_measurement = AHRS.roll_rate;
 8006a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae0 <attitude_ctrl+0xc0>)
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	657b      	str	r3, [r7, #84]	@ 0x54
    const float pitch_rate_measurement = AHRS.pitch_rate;
 8006a74:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae0 <attitude_ctrl+0xc0>)
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	653b      	str	r3, [r7, #80]	@ 0x50

    const float roll_measurement = AHRS.roll;
 8006a7a:	4b19      	ldr	r3, [pc, #100]	@ (8006ae0 <attitude_ctrl+0xc0>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const float pitch_measurement = AHRS.pitch;
 8006a80:	4b17      	ldr	r3, [pc, #92]	@ (8006ae0 <attitude_ctrl+0xc0>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	64bb      	str	r3, [r7, #72]	@ 0x48
    static float pitch_pid_smooth = 0.0f;
    
    /* calculate roll && pitch desired
    */

	if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 8006a86:	4b17      	ldr	r3, [pc, #92]	@ (8006ae4 <attitude_ctrl+0xc4>)
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d932      	bls.n	8006af8 <attitude_ctrl+0xd8>
		roll_pid_rc_gain = ((int)ibusChannelData[CH7] - 1000)*0.002f;
 8006a92:	4b14      	ldr	r3, [pc, #80]	@ (8006ae4 <attitude_ctrl+0xc4>)
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fa f986 	bl	8000dac <__aeabi_i2f>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	4911      	ldr	r1, [pc, #68]	@ (8006ae8 <attitude_ctrl+0xc8>)
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fa f9d5 	bl	8000e54 <__aeabi_fmul>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	461a      	mov	r2, r3
 8006aae:	4b0f      	ldr	r3, [pc, #60]	@ (8006aec <attitude_ctrl+0xcc>)
 8006ab0:	601a      	str	r2, [r3, #0]
		roll_trim = ((int)ibusChannelData[CH8] - 1500)*-0.1f;
 8006ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae4 <attitude_ctrl+0xc4>)
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fa f976 	bl	8000dac <__aeabi_i2f>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	490b      	ldr	r1, [pc, #44]	@ (8006af0 <attitude_ctrl+0xd0>)
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fa f9c5 	bl	8000e54 <__aeabi_fmul>
 8006aca:	4603      	mov	r3, r0
 8006acc:	461a      	mov	r2, r3
 8006ace:	4b09      	ldr	r3, [pc, #36]	@ (8006af4 <attitude_ctrl+0xd4>)
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	e031      	b.n	8006b38 <attitude_ctrl+0x118>
 8006ad4:	20000c74 	.word	0x20000c74
 8006ad8:	358637bd 	.word	0x358637bd
 8006adc:	3dcccccd 	.word	0x3dcccccd
 8006ae0:	2000056c 	.word	0x2000056c
 8006ae4:	20000158 	.word	0x20000158
 8006ae8:	3b03126f 	.word	0x3b03126f
 8006aec:	20000c5c 	.word	0x20000c5c
 8006af0:	bdcccccd 	.word	0xbdcccccd
 8006af4:	20000c64 	.word	0x20000c64
	}else{
		pitch_pid_rc_gain = ((int)ibusChannelData[CH7] - 1000)*0.002f;
 8006af8:	4b7c      	ldr	r3, [pc, #496]	@ (8006cec <attitude_ctrl+0x2cc>)
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fa f953 	bl	8000dac <__aeabi_i2f>
 8006b06:	4603      	mov	r3, r0
 8006b08:	4979      	ldr	r1, [pc, #484]	@ (8006cf0 <attitude_ctrl+0x2d0>)
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fa f9a2 	bl	8000e54 <__aeabi_fmul>
 8006b10:	4603      	mov	r3, r0
 8006b12:	461a      	mov	r2, r3
 8006b14:	4b77      	ldr	r3, [pc, #476]	@ (8006cf4 <attitude_ctrl+0x2d4>)
 8006b16:	601a      	str	r2, [r3, #0]
		pitch_trim = ((int)ibusChannelData[CH8] - 1500)*-0.1f;
 8006b18:	4b74      	ldr	r3, [pc, #464]	@ (8006cec <attitude_ctrl+0x2cc>)
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fa f943 	bl	8000dac <__aeabi_i2f>
 8006b26:	4603      	mov	r3, r0
 8006b28:	4973      	ldr	r1, [pc, #460]	@ (8006cf8 <attitude_ctrl+0x2d8>)
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fa f992 	bl	8000e54 <__aeabi_fmul>
 8006b30:	4603      	mov	r3, r0
 8006b32:	461a      	mov	r2, r3
 8006b34:	4b71      	ldr	r3, [pc, #452]	@ (8006cfc <attitude_ctrl+0x2dc>)
 8006b36:	601a      	str	r2, [r3, #0]
	}

    roll_desired = ((int)ibusChannelData[0] - 1500)*0.15f    + roll_trim;   /*  -50 <-  -> +50  */
 8006b38:	4b6c      	ldr	r3, [pc, #432]	@ (8006cec <attitude_ctrl+0x2cc>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fa f933 	bl	8000dac <__aeabi_i2f>
 8006b46:	4603      	mov	r3, r0
 8006b48:	496d      	ldr	r1, [pc, #436]	@ (8006d00 <attitude_ctrl+0x2e0>)
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fa f982 	bl	8000e54 <__aeabi_fmul>
 8006b50:	4603      	mov	r3, r0
 8006b52:	461a      	mov	r2, r3
 8006b54:	4b6b      	ldr	r3, [pc, #428]	@ (8006d04 <attitude_ctrl+0x2e4>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	f7fa f872 	bl	8000c44 <__addsf3>
 8006b60:	4603      	mov	r3, r0
 8006b62:	461a      	mov	r2, r3
 8006b64:	4b68      	ldr	r3, [pc, #416]	@ (8006d08 <attitude_ctrl+0x2e8>)
 8006b66:	601a      	str	r2, [r3, #0]
	pitch_desired = ((int)ibusChannelData[1] - 1500)*-0.15f + pitch_trim ;/*  -75 <-  -> +75  */
 8006b68:	4b60      	ldr	r3, [pc, #384]	@ (8006cec <attitude_ctrl+0x2cc>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fa f91b 	bl	8000dac <__aeabi_i2f>
 8006b76:	4603      	mov	r3, r0
 8006b78:	4964      	ldr	r1, [pc, #400]	@ (8006d0c <attitude_ctrl+0x2ec>)
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fa f96a 	bl	8000e54 <__aeabi_fmul>
 8006b80:	4603      	mov	r3, r0
 8006b82:	461a      	mov	r2, r3
 8006b84:	4b5d      	ldr	r3, [pc, #372]	@ (8006cfc <attitude_ctrl+0x2dc>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	f7fa f85a 	bl	8000c44 <__addsf3>
 8006b90:	4603      	mov	r3, r0
 8006b92:	461a      	mov	r2, r3
 8006b94:	4b5e      	ldr	r3, [pc, #376]	@ (8006d10 <attitude_ctrl+0x2f0>)
 8006b96:	601a      	str	r2, [r3, #0]

    v_estimate = dynamic_speed_esitmate(dt);
 8006b98:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006b9a:	f000 fc55 	bl	8007448 <dynamic_speed_esitmate>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	4a5c      	ldr	r2, [pc, #368]	@ (8006d14 <attitude_ctrl+0x2f4>)
 8006ba2:	6013      	str	r3, [r2, #0]
    if(v_estimate < 0)
 8006ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8006d14 <attitude_ctrl+0x2f4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f04f 0100 	mov.w	r1, #0
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fa faef 	bl	8001190 <__aeabi_fcmplt>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <attitude_ctrl+0x1a0>
    	v_estimate = 0;
 8006bb8:	4b56      	ldr	r3, [pc, #344]	@ (8006d14 <attitude_ctrl+0x2f4>)
 8006bba:	f04f 0200 	mov.w	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]

    /*---- pid scale with velocity  -----*/
	float pid_velo_scale;
    if(_gps.fix > 1){
 8006bc0:	4b55      	ldr	r3, [pc, #340]	@ (8006d18 <attitude_ctrl+0x2f8>)
 8006bc2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	f240 8083 	bls.w	8006cd2 <attitude_ctrl+0x2b2>
        float vn = (float)_gps.velocity[0]/100;  // m
 8006bcc:	4b52      	ldr	r3, [pc, #328]	@ (8006d18 <attitude_ctrl+0x2f8>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fa f8eb 	bl	8000dac <__aeabi_i2f>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4950      	ldr	r1, [pc, #320]	@ (8006d1c <attitude_ctrl+0x2fc>)
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fa f9ee 	bl	8000fbc <__aeabi_fdiv>
 8006be0:	4603      	mov	r3, r0
 8006be2:	647b      	str	r3, [r7, #68]	@ 0x44
        float ve = (float)_gps.velocity[1]/100;  // m
 8006be4:	4b4c      	ldr	r3, [pc, #304]	@ (8006d18 <attitude_ctrl+0x2f8>)
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fa f8df 	bl	8000dac <__aeabi_i2f>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	494a      	ldr	r1, [pc, #296]	@ (8006d1c <attitude_ctrl+0x2fc>)
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fa f9e2 	bl	8000fbc <__aeabi_fdiv>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	643b      	str	r3, [r7, #64]	@ 0x40
        //float vd = (float)_gps.velocity[2]/100;  // m

        float absolute_velocity = sqrtf(sq(vn) + sq(ve));// + sq(vd));
 8006bfc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006bfe:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8006c00:	f7fa f928 	bl	8000e54 <__aeabi_fmul>
 8006c04:	4603      	mov	r3, r0
 8006c06:	461c      	mov	r4, r3
 8006c08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c0a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006c0c:	f7fa f922 	bl	8000e54 <__aeabi_fmul>
 8006c10:	4603      	mov	r3, r0
 8006c12:	4619      	mov	r1, r3
 8006c14:	4620      	mov	r0, r4
 8006c16:	f7fa f815 	bl	8000c44 <__addsf3>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f00e fbba 	bl	8015396 <sqrtf>
 8006c22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        absolute_velocity = constrainf(absolute_velocity,0,MAX_SPEED); 
 8006c24:	4a3e      	ldr	r2, [pc, #248]	@ (8006d20 <attitude_ctrl+0x300>)
 8006c26:	f04f 0100 	mov.w	r1, #0
 8006c2a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006c2c:	f7ff fe40 	bl	80068b0 <constrainf>
 8006c30:	63f8      	str	r0, [r7, #60]	@ 0x3c
        if(speed_filter_reset){
 8006c32:	4b3c      	ldr	r3, [pc, #240]	@ (8006d24 <attitude_ctrl+0x304>)
 8006c34:	f993 3000 	ldrsb.w	r3, [r3]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d005      	beq.n	8006c48 <attitude_ctrl+0x228>
            ab_speed_filted = absolute_velocity;
 8006c3c:	4a3a      	ldr	r2, [pc, #232]	@ (8006d28 <attitude_ctrl+0x308>)
 8006c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c40:	6013      	str	r3, [r2, #0]
            speed_filter_reset = FALSE;
 8006c42:	4b38      	ldr	r3, [pc, #224]	@ (8006d24 <attitude_ctrl+0x304>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
        }
        ab_speed_filted += pt1FilterGain(10,dt)*(absolute_velocity - ab_speed_filted);
 8006c48:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006c4a:	4838      	ldr	r0, [pc, #224]	@ (8006d2c <attitude_ctrl+0x30c>)
 8006c4c:	f7ff fe4e 	bl	80068ec <pt1FilterGain>
 8006c50:	4604      	mov	r4, r0
 8006c52:	4b35      	ldr	r3, [pc, #212]	@ (8006d28 <attitude_ctrl+0x308>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006c5a:	f7f9 fff1 	bl	8000c40 <__aeabi_fsub>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	4619      	mov	r1, r3
 8006c62:	4620      	mov	r0, r4
 8006c64:	f7fa f8f6 	bl	8000e54 <__aeabi_fmul>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8006d28 <attitude_ctrl+0x308>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4619      	mov	r1, r3
 8006c72:	4610      	mov	r0, r2
 8006c74:	f7f9 ffe6 	bl	8000c44 <__addsf3>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8006d28 <attitude_ctrl+0x308>)
 8006c7e:	601a      	str	r2, [r3, #0]
        float speed_temp = constrainf(ab_speed_filted,MINIMUN_SPEED,MAXIMUN_SPEED);
 8006c80:	4b29      	ldr	r3, [pc, #164]	@ (8006d28 <attitude_ctrl+0x308>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a2a      	ldr	r2, [pc, #168]	@ (8006d30 <attitude_ctrl+0x310>)
 8006c86:	492b      	ldr	r1, [pc, #172]	@ (8006d34 <attitude_ctrl+0x314>)
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff fe11 	bl	80068b0 <constrainf>
 8006c8e:	63b8      	str	r0, [r7, #56]	@ 0x38
        pid_velo_scale = (float)MINIMUN_SPEED/((float)MINIMUN_SPEED + sq(speed_temp - MINIMUN_SPEED)*0.04f);
 8006c90:	4928      	ldr	r1, [pc, #160]	@ (8006d34 <attitude_ctrl+0x314>)
 8006c92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006c94:	f7f9 ffd4 	bl	8000c40 <__aeabi_fsub>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	461c      	mov	r4, r3
 8006c9c:	4925      	ldr	r1, [pc, #148]	@ (8006d34 <attitude_ctrl+0x314>)
 8006c9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006ca0:	f7f9 ffce 	bl	8000c40 <__aeabi_fsub>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f7fa f8d3 	bl	8000e54 <__aeabi_fmul>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4921      	ldr	r1, [pc, #132]	@ (8006d38 <attitude_ctrl+0x318>)
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fa f8ce 	bl	8000e54 <__aeabi_fmul>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	491e      	ldr	r1, [pc, #120]	@ (8006d34 <attitude_ctrl+0x314>)
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7f9 ffc1 	bl	8000c44 <__addsf3>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	481b      	ldr	r0, [pc, #108]	@ (8006d34 <attitude_ctrl+0x314>)
 8006cc8:	f7fa f978 	bl	8000fbc <__aeabi_fdiv>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cd0:	e036      	b.n	8006d40 <attitude_ctrl+0x320>
    }
    else{
        speed_filter_reset = TRUE;
 8006cd2:	4b14      	ldr	r3, [pc, #80]	@ (8006d24 <attitude_ctrl+0x304>)
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	701a      	strb	r2, [r3, #0]
    	if(ibusChannelData[CH6] > CHANNEL_HIGH){
 8006cd8:	4b04      	ldr	r3, [pc, #16]	@ (8006cec <attitude_ctrl+0x2cc>)
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d92b      	bls.n	8006d3c <attitude_ctrl+0x31c>
    		pid_velo_scale = 1;
 8006ce4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cea:	e029      	b.n	8006d40 <attitude_ctrl+0x320>
 8006cec:	20000158 	.word	0x20000158
 8006cf0:	3b03126f 	.word	0x3b03126f
 8006cf4:	20000c60 	.word	0x20000c60
 8006cf8:	bdcccccd 	.word	0xbdcccccd
 8006cfc:	20000c68 	.word	0x20000c68
 8006d00:	3e19999a 	.word	0x3e19999a
 8006d04:	20000c64 	.word	0x20000c64
 8006d08:	20000bb8 	.word	0x20000bb8
 8006d0c:	be19999a 	.word	0xbe19999a
 8006d10:	20000bbc 	.word	0x20000bbc
 8006d14:	20000c70 	.word	0x20000c70
 8006d18:	20000434 	.word	0x20000434
 8006d1c:	42c80000 	.word	0x42c80000
 8006d20:	41f00000 	.word	0x41f00000
 8006d24:	20000bc4 	.word	0x20000bc4
 8006d28:	20000c6c 	.word	0x20000c6c
 8006d2c:	41200000 	.word	0x41200000
 8006d30:	42040000 	.word	0x42040000
 8006d34:	41400000 	.word	0x41400000
 8006d38:	3d23d70a 	.word	0x3d23d70a
    	}else{
    		pid_velo_scale = 0.4f;
 8006d3c:	4b98      	ldr	r3, [pc, #608]	@ (8006fa0 <attitude_ctrl+0x580>)
 8006d3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    	}
    }

    const float pid_roll_vel_scale  = constrainf(pid_velo_scale,MIN_PID_SPEED_SCALE,MAX_PID_SPEED_SCALE);
 8006d40:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006d44:	4996      	ldr	r1, [pc, #600]	@ (8006fa0 <attitude_ctrl+0x580>)
 8006d46:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006d48:	f7ff fdb2 	bl	80068b0 <constrainf>
 8006d4c:	6378      	str	r0, [r7, #52]	@ 0x34
    const float pid_pitch_vel_scale = constrainf(pid_velo_scale,MIN_PID_SPEED_SCALE + 0.2,MAX_PID_SPEED_SCALE);
 8006d4e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006d52:	4994      	ldr	r1, [pc, #592]	@ (8006fa4 <attitude_ctrl+0x584>)
 8006d54:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006d56:	f7ff fdab 	bl	80068b0 <constrainf>
 8006d5a:	6338      	str	r0, [r7, #48]	@ 0x30

    // stabilize mode
    if(ibusChannelData[CH5] > CHANNEL_HIGH ){
 8006d5c:	4b92      	ldr	r3, [pc, #584]	@ (8006fa8 <attitude_ctrl+0x588>)
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006d64:	4293      	cmp	r3, r2
 8006d66:	f240 81a1 	bls.w	80070ac <attitude_ctrl+0x68c>
        /*----- roll axis pid   -----*/
        float roll_rate_desired =  pid_calculate(&roll_angle_pid,roll_measurement,roll_desired,1.0f,dt);
 8006d6a:	4b90      	ldr	r3, [pc, #576]	@ (8006fac <attitude_ctrl+0x58c>)
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006d76:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006d78:	488d      	ldr	r0, [pc, #564]	@ (8006fb0 <attitude_ctrl+0x590>)
 8006d7a:	f7fd fdbb 	bl	80048f4 <pid_calculate>
 8006d7e:	6278      	str	r0, [r7, #36]	@ 0x24
        // limit rate
        roll_rate_desired = constrainf(roll_rate_desired, -pid_file_1.roll_rate_limit, pid_file_1.roll_rate_limit);
 8006d80:	4b8c      	ldr	r3, [pc, #560]	@ (8006fb4 <attitude_ctrl+0x594>)
 8006d82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d86:	425b      	negs	r3, r3
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fa f80f 	bl	8000dac <__aeabi_i2f>
 8006d8e:	4604      	mov	r4, r0
 8006d90:	4b88      	ldr	r3, [pc, #544]	@ (8006fb4 <attitude_ctrl+0x594>)
 8006d92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fa f808 	bl	8000dac <__aeabi_i2f>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	461a      	mov	r2, r3
 8006da0:	4621      	mov	r1, r4
 8006da2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006da4:	f7ff fd84 	bl	80068b0 <constrainf>
 8006da8:	6278      	str	r0, [r7, #36]	@ 0x24
        float r_rate_pid  =  pid_calculate(&roll_rate_pid, roll_rate_measurement,roll_rate_desired,pid_roll_vel_scale,dt);
 8006daa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006db2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006db4:	4880      	ldr	r0, [pc, #512]	@ (8006fb8 <attitude_ctrl+0x598>)
 8006db6:	f7fd fd9d 	bl	80048f4 <pid_calculate>
 8006dba:	6238      	str	r0, [r7, #32]
        // feed forward
        float FF_roll = roll_rate_desired*pid_file_1.roll_FF_gain;
 8006dbc:	4b7d      	ldr	r3, [pc, #500]	@ (8006fb4 <attitude_ctrl+0x594>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006dc4:	f7fa f846 	bl	8000e54 <__aeabi_fmul>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	61fb      	str	r3, [r7, #28]
        r_rate_pid = r_rate_pid + FF_roll;
 8006dcc:	69f9      	ldr	r1, [r7, #28]
 8006dce:	6a38      	ldr	r0, [r7, #32]
 8006dd0:	f7f9 ff38 	bl	8000c44 <__addsf3>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	623b      	str	r3, [r7, #32]
        r_rate_pid = constrainf(r_rate_pid, -pid_file_1.roll_max_pid, pid_file_1.roll_max_pid);
 8006dd8:	4b76      	ldr	r3, [pc, #472]	@ (8006fb4 <attitude_ctrl+0x594>)
 8006dda:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8006dde:	425b      	negs	r3, r3
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7f9 ffe3 	bl	8000dac <__aeabi_i2f>
 8006de6:	4604      	mov	r4, r0
 8006de8:	4b72      	ldr	r3, [pc, #456]	@ (8006fb4 <attitude_ctrl+0x594>)
 8006dea:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7f9 ffdc 	bl	8000dac <__aeabi_i2f>
 8006df4:	4603      	mov	r3, r0
 8006df6:	461a      	mov	r2, r3
 8006df8:	4621      	mov	r1, r4
 8006dfa:	6a38      	ldr	r0, [r7, #32]
 8006dfc:	f7ff fd58 	bl	80068b0 <constrainf>
 8006e00:	6238      	str	r0, [r7, #32]
        // filter pid  LPF
        roll_pid_smooth += pt1FilterGain(pid_file_1.roll_pid_fcut,dt)*(r_rate_pid - roll_pid_smooth);
 8006e02:	4b6c      	ldr	r3, [pc, #432]	@ (8006fb4 <attitude_ctrl+0x594>)
 8006e04:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7f9 ffcf 	bl	8000dac <__aeabi_i2f>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff fd6a 	bl	80068ec <pt1FilterGain>
 8006e18:	4604      	mov	r4, r0
 8006e1a:	4b68      	ldr	r3, [pc, #416]	@ (8006fbc <attitude_ctrl+0x59c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6a38      	ldr	r0, [r7, #32]
 8006e22:	f7f9 ff0d 	bl	8000c40 <__aeabi_fsub>
 8006e26:	4603      	mov	r3, r0
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f7fa f812 	bl	8000e54 <__aeabi_fmul>
 8006e30:	4603      	mov	r3, r0
 8006e32:	461a      	mov	r2, r3
 8006e34:	4b61      	ldr	r3, [pc, #388]	@ (8006fbc <attitude_ctrl+0x59c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	f7f9 ff02 	bl	8000c44 <__addsf3>
 8006e40:	4603      	mov	r3, r0
 8006e42:	461a      	mov	r2, r3
 8006e44:	4b5d      	ldr	r3, [pc, #372]	@ (8006fbc <attitude_ctrl+0x59c>)
 8006e46:	601a      	str	r2, [r3, #0]

        /*-----  pitch axis pid  ---------*/
        float pitch_rate_desired =  pid_calculate(&pitch_angle_pid,pitch_measurement,pitch_desired,1.0f,dt);
 8006e48:	4b5d      	ldr	r3, [pc, #372]	@ (8006fc0 <attitude_ctrl+0x5a0>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006e54:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006e56:	485b      	ldr	r0, [pc, #364]	@ (8006fc4 <attitude_ctrl+0x5a4>)
 8006e58:	f7fd fd4c 	bl	80048f4 <pid_calculate>
 8006e5c:	61b8      	str	r0, [r7, #24]
        // limit rate
        pitch_rate_desired = constrainf(pitch_rate_desired, -pid_file_1.pitch_rate_limit, pid_file_1.pitch_rate_limit);
 8006e5e:	4b55      	ldr	r3, [pc, #340]	@ (8006fb4 <attitude_ctrl+0x594>)
 8006e60:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8006e64:	425b      	negs	r3, r3
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7f9 ffa0 	bl	8000dac <__aeabi_i2f>
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	4b51      	ldr	r3, [pc, #324]	@ (8006fb4 <attitude_ctrl+0x594>)
 8006e70:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7f9 ff99 	bl	8000dac <__aeabi_i2f>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4621      	mov	r1, r4
 8006e80:	69b8      	ldr	r0, [r7, #24]
 8006e82:	f7ff fd15 	bl	80068b0 <constrainf>
 8006e86:	61b8      	str	r0, [r7, #24]
        float p_rate_pid  =  pid_calculate(&pitch_rate_pid, pitch_rate_measurement,pitch_rate_desired,pid_pitch_vel_scale ,dt);
 8006e88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e92:	484d      	ldr	r0, [pc, #308]	@ (8006fc8 <attitude_ctrl+0x5a8>)
 8006e94:	f7fd fd2e 	bl	80048f4 <pid_calculate>
 8006e98:	6178      	str	r0, [r7, #20]
        // feed forward
        float FF_pitch = pitch_rate_desired*pid_file_1.pitch_FF_gain;;
 8006e9a:	4b46      	ldr	r3, [pc, #280]	@ (8006fb4 <attitude_ctrl+0x594>)
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	69b8      	ldr	r0, [r7, #24]
 8006ea2:	f7f9 ffd7 	bl	8000e54 <__aeabi_fmul>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	613b      	str	r3, [r7, #16]
        p_rate_pid = p_rate_pid + FF_pitch;
 8006eaa:	6939      	ldr	r1, [r7, #16]
 8006eac:	6978      	ldr	r0, [r7, #20]
 8006eae:	f7f9 fec9 	bl	8000c44 <__addsf3>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	617b      	str	r3, [r7, #20]
        p_rate_pid = constrainf(p_rate_pid,- pid_file_1.pitch_max_pid, pid_file_1.pitch_max_pid);
 8006eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8006fb4 <attitude_ctrl+0x594>)
 8006eb8:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 8006ebc:	425b      	negs	r3, r3
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7f9 ff74 	bl	8000dac <__aeabi_i2f>
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8006fb4 <attitude_ctrl+0x594>)
 8006ec8:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7f9 ff6d 	bl	8000dac <__aeabi_i2f>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	6978      	ldr	r0, [r7, #20]
 8006eda:	f7ff fce9 	bl	80068b0 <constrainf>
 8006ede:	6178      	str	r0, [r7, #20]
        // filter pid  LPF
        pitch_pid_smooth += pt1FilterGain(pid_file_1.pitch_pid_fcut,dt)*(p_rate_pid - pitch_pid_smooth);
 8006ee0:	4b34      	ldr	r3, [pc, #208]	@ (8006fb4 <attitude_ctrl+0x594>)
 8006ee2:	f993 3040 	ldrsb.w	r3, [r3, #64]	@ 0x40
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7f9 ff60 	bl	8000dac <__aeabi_i2f>
 8006eec:	4603      	mov	r3, r0
 8006eee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff fcfb 	bl	80068ec <pt1FilterGain>
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	4b34      	ldr	r3, [pc, #208]	@ (8006fcc <attitude_ctrl+0x5ac>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4619      	mov	r1, r3
 8006efe:	6978      	ldr	r0, [r7, #20]
 8006f00:	f7f9 fe9e 	bl	8000c40 <__aeabi_fsub>
 8006f04:	4603      	mov	r3, r0
 8006f06:	4619      	mov	r1, r3
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f7f9 ffa3 	bl	8000e54 <__aeabi_fmul>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	461a      	mov	r2, r3
 8006f12:	4b2e      	ldr	r3, [pc, #184]	@ (8006fcc <attitude_ctrl+0x5ac>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4619      	mov	r1, r3
 8006f18:	4610      	mov	r0, r2
 8006f1a:	f7f9 fe93 	bl	8000c44 <__addsf3>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	461a      	mov	r2, r3
 8006f22:	4b2a      	ldr	r3, [pc, #168]	@ (8006fcc <attitude_ctrl+0x5ac>)
 8006f24:	601a      	str	r2, [r3, #0]
        

        /*-------------- mix channel --------------------------*/
		if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 8006f26:	4b20      	ldr	r3, [pc, #128]	@ (8006fa8 <attitude_ctrl+0x588>)
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d954      	bls.n	8006fdc <attitude_ctrl+0x5bc>
                // roll stabilize
				int pitch_rc = 1500 - ibusChannelData[CH2];
 8006f32:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa8 <attitude_ctrl+0x588>)
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	60bb      	str	r3, [r7, #8]

				servoL = 1500 - roll_pid_smooth + pitch_rc;
 8006f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8006fbc <attitude_ctrl+0x59c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4619      	mov	r1, r3
 8006f44:	4822      	ldr	r0, [pc, #136]	@ (8006fd0 <attitude_ctrl+0x5b0>)
 8006f46:	f7f9 fe7b 	bl	8000c40 <__aeabi_fsub>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	461c      	mov	r4, r3
 8006f4e:	68b8      	ldr	r0, [r7, #8]
 8006f50:	f7f9 ff2c 	bl	8000dac <__aeabi_i2f>
 8006f54:	4603      	mov	r3, r0
 8006f56:	4619      	mov	r1, r3
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f7f9 fe73 	bl	8000c44 <__addsf3>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fa f979 	bl	8001258 <__aeabi_f2uiz>
 8006f66:	4603      	mov	r3, r0
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fd4 <attitude_ctrl+0x5b4>)
 8006f6c:	801a      	strh	r2, [r3, #0]
				servoR = 1500 + roll_pid_smooth + pitch_rc;
 8006f6e:	4b13      	ldr	r3, [pc, #76]	@ (8006fbc <attitude_ctrl+0x59c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4917      	ldr	r1, [pc, #92]	@ (8006fd0 <attitude_ctrl+0x5b0>)
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7f9 fe65 	bl	8000c44 <__addsf3>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	461c      	mov	r4, r3
 8006f7e:	68b8      	ldr	r0, [r7, #8]
 8006f80:	f7f9 ff14 	bl	8000dac <__aeabi_i2f>
 8006f84:	4603      	mov	r3, r0
 8006f86:	4619      	mov	r1, r3
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f7f9 fe5b 	bl	8000c44 <__addsf3>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fa f961 	bl	8001258 <__aeabi_f2uiz>
 8006f96:	4603      	mov	r3, r0
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd8 <attitude_ctrl+0x5b8>)
 8006f9c:	801a      	strh	r2, [r3, #0]
 8006f9e:	e075      	b.n	800708c <attitude_ctrl+0x66c>
 8006fa0:	3ecccccd 	.word	0x3ecccccd
 8006fa4:	3f19999a 	.word	0x3f19999a
 8006fa8:	20000158 	.word	0x20000158
 8006fac:	20000bb8 	.word	0x20000bb8
 8006fb0:	20000c10 	.word	0x20000c10
 8006fb4:	2000002c 	.word	0x2000002c
 8006fb8:	20000bc8 	.word	0x20000bc8
 8006fbc:	20000c78 	.word	0x20000c78
 8006fc0:	20000bbc 	.word	0x20000bbc
 8006fc4:	20000c34 	.word	0x20000c34
 8006fc8:	20000bec 	.word	0x20000bec
 8006fcc:	20000c7c 	.word	0x20000c7c
 8006fd0:	44bb8000 	.word	0x44bb8000
 8006fd4:	20000bc0 	.word	0x20000bc0
 8006fd8:	20000bc2 	.word	0x20000bc2
		}else{
               // pitch stabilize
				int roll_rc = 1500 - ibusChannelData[CH1];
 8006fdc:	4b92      	ldr	r3, [pc, #584]	@ (8007228 <attitude_ctrl+0x808>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	60fb      	str	r3, [r7, #12]

				servoL = 1500 +  roll_rc*0.5 + pitch_pid_smooth;
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f7f9 fa73 	bl	80004d4 <__aeabi_i2d>
 8006fee:	f04f 0200 	mov.w	r2, #0
 8006ff2:	4b8e      	ldr	r3, [pc, #568]	@ (800722c <attitude_ctrl+0x80c>)
 8006ff4:	f7f9 fad8 	bl	80005a8 <__aeabi_dmul>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4619      	mov	r1, r3
 8007000:	a385      	add	r3, pc, #532	@ (adr r3, 8007218 <attitude_ctrl+0x7f8>)
 8007002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007006:	f7f9 f919 	bl	800023c <__adddf3>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4614      	mov	r4, r2
 8007010:	461d      	mov	r5, r3
 8007012:	4b87      	ldr	r3, [pc, #540]	@ (8007230 <attitude_ctrl+0x810>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4618      	mov	r0, r3
 8007018:	f7f9 fa6e 	bl	80004f8 <__aeabi_f2d>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4620      	mov	r0, r4
 8007022:	4629      	mov	r1, r5
 8007024:	f7f9 f90a 	bl	800023c <__adddf3>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4610      	mov	r0, r2
 800702e:	4619      	mov	r1, r3
 8007030:	f7f9 fd92 	bl	8000b58 <__aeabi_d2uiz>
 8007034:	4603      	mov	r3, r0
 8007036:	b29a      	uxth	r2, r3
 8007038:	4b7e      	ldr	r3, [pc, #504]	@ (8007234 <attitude_ctrl+0x814>)
 800703a:	801a      	strh	r2, [r3, #0]
				servoR = 1500 -  roll_rc*0.5 + pitch_pid_smooth;
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f7f9 fa49 	bl	80004d4 <__aeabi_i2d>
 8007042:	f04f 0200 	mov.w	r2, #0
 8007046:	4b79      	ldr	r3, [pc, #484]	@ (800722c <attitude_ctrl+0x80c>)
 8007048:	f7f9 faae 	bl	80005a8 <__aeabi_dmul>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	a171      	add	r1, pc, #452	@ (adr r1, 8007218 <attitude_ctrl+0x7f8>)
 8007052:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007056:	f7f9 f8ef 	bl	8000238 <__aeabi_dsub>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4614      	mov	r4, r2
 8007060:	461d      	mov	r5, r3
 8007062:	4b73      	ldr	r3, [pc, #460]	@ (8007230 <attitude_ctrl+0x810>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4618      	mov	r0, r3
 8007068:	f7f9 fa46 	bl	80004f8 <__aeabi_f2d>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4620      	mov	r0, r4
 8007072:	4629      	mov	r1, r5
 8007074:	f7f9 f8e2 	bl	800023c <__adddf3>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4610      	mov	r0, r2
 800707e:	4619      	mov	r1, r3
 8007080:	f7f9 fd6a 	bl	8000b58 <__aeabi_d2uiz>
 8007084:	4603      	mov	r3, r0
 8007086:	b29a      	uxth	r2, r3
 8007088:	4b6b      	ldr	r3, [pc, #428]	@ (8007238 <attitude_ctrl+0x818>)
 800708a:	801a      	strh	r2, [r3, #0]
		}

        // enable or disable I term, for test only
		if(ibusChannelData[CH10] > CHANNEL_HIGH ){
 800708c:	4b66      	ldr	r3, [pc, #408]	@ (8007228 <attitude_ctrl+0x808>)
 800708e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007090:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8007094:	4293      	cmp	r3, r2
 8007096:	f240 8092 	bls.w	80071be <attitude_ctrl+0x79e>
			pitch_rate_pid.i_term = 0;
 800709a:	4b68      	ldr	r3, [pc, #416]	@ (800723c <attitude_ctrl+0x81c>)
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	60da      	str	r2, [r3, #12]
			roll_rate_pid.i_term = 0;
 80070a2:	4b67      	ldr	r3, [pc, #412]	@ (8007240 <attitude_ctrl+0x820>)
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	60da      	str	r2, [r3, #12]
 80070aa:	e088      	b.n	80071be <attitude_ctrl+0x79e>
		}
        
    }
    // manual mode
    else{
        int s1 = 1500 - ibusChannelData[CH1];
 80070ac:	4b5e      	ldr	r3, [pc, #376]	@ (8007228 <attitude_ctrl+0x808>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 80070b4:	3304      	adds	r3, #4
 80070b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int s2 = 1500 - ibusChannelData[CH2];
 80070b8:	4b5b      	ldr	r3, [pc, #364]	@ (8007228 <attitude_ctrl+0x808>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 80070c0:	3304      	adds	r3, #4
 80070c2:	62bb      	str	r3, [r7, #40]	@ 0x28

        smooth_ch1 += 0.8*(s1*0.5 - smooth_ch1);
 80070c4:	4b5f      	ldr	r3, [pc, #380]	@ (8007244 <attitude_ctrl+0x824>)
 80070c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7f9 fa02 	bl	80004d4 <__aeabi_i2d>
 80070d0:	4604      	mov	r4, r0
 80070d2:	460d      	mov	r5, r1
 80070d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070d6:	f7f9 f9fd 	bl	80004d4 <__aeabi_i2d>
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	4b53      	ldr	r3, [pc, #332]	@ (800722c <attitude_ctrl+0x80c>)
 80070e0:	f7f9 fa62 	bl	80005a8 <__aeabi_dmul>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4690      	mov	r8, r2
 80070ea:	4699      	mov	r9, r3
 80070ec:	4b55      	ldr	r3, [pc, #340]	@ (8007244 <attitude_ctrl+0x824>)
 80070ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7f9 f9ee 	bl	80004d4 <__aeabi_i2d>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4640      	mov	r0, r8
 80070fe:	4649      	mov	r1, r9
 8007100:	f7f9 f89a 	bl	8000238 <__aeabi_dsub>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4610      	mov	r0, r2
 800710a:	4619      	mov	r1, r3
 800710c:	a344      	add	r3, pc, #272	@ (adr r3, 8007220 <attitude_ctrl+0x800>)
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	f7f9 fa49 	bl	80005a8 <__aeabi_dmul>
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	4620      	mov	r0, r4
 800711c:	4629      	mov	r1, r5
 800711e:	f7f9 f88d 	bl	800023c <__adddf3>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	4610      	mov	r0, r2
 8007128:	4619      	mov	r1, r3
 800712a:	f7f9 fced 	bl	8000b08 <__aeabi_d2iz>
 800712e:	4603      	mov	r3, r0
 8007130:	b21a      	sxth	r2, r3
 8007132:	4b44      	ldr	r3, [pc, #272]	@ (8007244 <attitude_ctrl+0x824>)
 8007134:	801a      	strh	r2, [r3, #0]
        smooth_ch2 += 0.8*(s2 - smooth_ch2);
 8007136:	4b44      	ldr	r3, [pc, #272]	@ (8007248 <attitude_ctrl+0x828>)
 8007138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800713c:	4618      	mov	r0, r3
 800713e:	f7f9 f9c9 	bl	80004d4 <__aeabi_i2d>
 8007142:	4604      	mov	r4, r0
 8007144:	460d      	mov	r5, r1
 8007146:	4b40      	ldr	r3, [pc, #256]	@ (8007248 <attitude_ctrl+0x828>)
 8007148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800714c:	461a      	mov	r2, r3
 800714e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007150:	1a9b      	subs	r3, r3, r2
 8007152:	4618      	mov	r0, r3
 8007154:	f7f9 f9be 	bl	80004d4 <__aeabi_i2d>
 8007158:	a331      	add	r3, pc, #196	@ (adr r3, 8007220 <attitude_ctrl+0x800>)
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	f7f9 fa23 	bl	80005a8 <__aeabi_dmul>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4620      	mov	r0, r4
 8007168:	4629      	mov	r1, r5
 800716a:	f7f9 f867 	bl	800023c <__adddf3>
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	4610      	mov	r0, r2
 8007174:	4619      	mov	r1, r3
 8007176:	f7f9 fcc7 	bl	8000b08 <__aeabi_d2iz>
 800717a:	4603      	mov	r3, r0
 800717c:	b21a      	sxth	r2, r3
 800717e:	4b32      	ldr	r3, [pc, #200]	@ (8007248 <attitude_ctrl+0x828>)
 8007180:	801a      	strh	r2, [r3, #0]
            
        servoL = 1500 + smooth_ch1 + smooth_ch2;
 8007182:	4b30      	ldr	r3, [pc, #192]	@ (8007244 <attitude_ctrl+0x824>)
 8007184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007188:	b29a      	uxth	r2, r3
 800718a:	4b2f      	ldr	r3, [pc, #188]	@ (8007248 <attitude_ctrl+0x828>)
 800718c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007190:	b29b      	uxth	r3, r3
 8007192:	4413      	add	r3, r2
 8007194:	b29b      	uxth	r3, r3
 8007196:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800719a:	b29a      	uxth	r2, r3
 800719c:	4b25      	ldr	r3, [pc, #148]	@ (8007234 <attitude_ctrl+0x814>)
 800719e:	801a      	strh	r2, [r3, #0]
        servoR = 1500 - smooth_ch1 + smooth_ch2;
 80071a0:	4b29      	ldr	r3, [pc, #164]	@ (8007248 <attitude_ctrl+0x828>)
 80071a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	4b26      	ldr	r3, [pc, #152]	@ (8007244 <attitude_ctrl+0x824>)
 80071aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	4b1f      	ldr	r3, [pc, #124]	@ (8007238 <attitude_ctrl+0x818>)
 80071bc:	801a      	strh	r2, [r3, #0]
        
    }

    servoL = constrain(servoL,SERVO_MIN_PWM,SERVO_MAX_PWM);
 80071be:	4b1d      	ldr	r3, [pc, #116]	@ (8007234 <attitude_ctrl+0x814>)
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80071c6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7ff fb58 	bl	8006880 <constrain>
 80071d0:	4603      	mov	r3, r0
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	4b17      	ldr	r3, [pc, #92]	@ (8007234 <attitude_ctrl+0x814>)
 80071d6:	801a      	strh	r2, [r3, #0]
    servoR = constrain(servoR,SERVO_MIN_PWM,SERVO_MAX_PWM);
 80071d8:	4b17      	ldr	r3, [pc, #92]	@ (8007238 <attitude_ctrl+0x818>)
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80071e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7ff fb4b 	bl	8006880 <constrain>
 80071ea:	4603      	mov	r3, r0
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	4b12      	ldr	r3, [pc, #72]	@ (8007238 <attitude_ctrl+0x818>)
 80071f0:	801a      	strh	r2, [r3, #0]
    write_pwm_ctrl(ibusChannelData[CH3],servoL,servoR);
 80071f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007228 <attitude_ctrl+0x808>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007234 <attitude_ctrl+0x814>)
 80071fa:	8811      	ldrh	r1, [r2, #0]
 80071fc:	4a0e      	ldr	r2, [pc, #56]	@ (8007238 <attitude_ctrl+0x818>)
 80071fe:	8812      	ldrh	r2, [r2, #0]
 8007200:	4618      	mov	r0, r3
 8007202:	f7fd fce7 	bl	8004bd4 <write_pwm_ctrl>
 8007206:	e000      	b.n	800720a <attitude_ctrl+0x7ea>
        return;
 8007208:	bf00      	nop

}
 800720a:	3760      	adds	r7, #96	@ 0x60
 800720c:	46bd      	mov	sp, r7
 800720e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007212:	bf00      	nop
 8007214:	f3af 8000 	nop.w
 8007218:	00000000 	.word	0x00000000
 800721c:	40977000 	.word	0x40977000
 8007220:	9999999a 	.word	0x9999999a
 8007224:	3fe99999 	.word	0x3fe99999
 8007228:	20000158 	.word	0x20000158
 800722c:	3fe00000 	.word	0x3fe00000
 8007230:	20000c7c 	.word	0x20000c7c
 8007234:	20000bc0 	.word	0x20000bc0
 8007238:	20000bc2 	.word	0x20000bc2
 800723c:	20000bec 	.word	0x20000bec
 8007240:	20000bc8 	.word	0x20000bc8
 8007244:	20000c58 	.word	0x20000c58
 8007248:	20000c5a 	.word	0x20000c5a
 800724c:	00000000 	.word	0x00000000

08007250 <altitude_estimate>:
#include "../Driver/ms5611.h"

extern float acc_Eframe[3];
float alt_estimate,climb_rate;

void altitude_estimate(float dt){
 8007250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
	if(_gps.fix > 2){
 800725a:	4b73      	ldr	r3, [pc, #460]	@ (8007428 <altitude_estimate+0x1d8>)
 800725c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007260:	2b02      	cmp	r3, #2
 8007262:	f240 80b9 	bls.w	80073d8 <altitude_estimate+0x188>
		alt_estimate += climb_rate*dt + 0.5*sq(dt)*acc_Eframe[Z];
 8007266:	4b71      	ldr	r3, [pc, #452]	@ (800742c <altitude_estimate+0x1dc>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4618      	mov	r0, r3
 800726c:	f7f9 f944 	bl	80004f8 <__aeabi_f2d>
 8007270:	4604      	mov	r4, r0
 8007272:	460d      	mov	r5, r1
 8007274:	4b6e      	ldr	r3, [pc, #440]	@ (8007430 <altitude_estimate+0x1e0>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6879      	ldr	r1, [r7, #4]
 800727a:	4618      	mov	r0, r3
 800727c:	f7f9 fdea 	bl	8000e54 <__aeabi_fmul>
 8007280:	4603      	mov	r3, r0
 8007282:	4618      	mov	r0, r3
 8007284:	f7f9 f938 	bl	80004f8 <__aeabi_f2d>
 8007288:	4680      	mov	r8, r0
 800728a:	4689      	mov	r9, r1
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7f9 fde0 	bl	8000e54 <__aeabi_fmul>
 8007294:	4603      	mov	r3, r0
 8007296:	4618      	mov	r0, r3
 8007298:	f7f9 f92e 	bl	80004f8 <__aeabi_f2d>
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	4b64      	ldr	r3, [pc, #400]	@ (8007434 <altitude_estimate+0x1e4>)
 80072a2:	f7f9 f981 	bl	80005a8 <__aeabi_dmul>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4692      	mov	sl, r2
 80072ac:	469b      	mov	fp, r3
 80072ae:	4b62      	ldr	r3, [pc, #392]	@ (8007438 <altitude_estimate+0x1e8>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7f9 f920 	bl	80004f8 <__aeabi_f2d>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4650      	mov	r0, sl
 80072be:	4659      	mov	r1, fp
 80072c0:	f7f9 f972 	bl	80005a8 <__aeabi_dmul>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4640      	mov	r0, r8
 80072ca:	4649      	mov	r1, r9
 80072cc:	f7f8 ffb6 	bl	800023c <__adddf3>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4620      	mov	r0, r4
 80072d6:	4629      	mov	r1, r5
 80072d8:	f7f8 ffb0 	bl	800023c <__adddf3>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4610      	mov	r0, r2
 80072e2:	4619      	mov	r1, r3
 80072e4:	f7f9 fc58 	bl	8000b98 <__aeabi_d2f>
 80072e8:	4603      	mov	r3, r0
 80072ea:	4a50      	ldr	r2, [pc, #320]	@ (800742c <altitude_estimate+0x1dc>)
 80072ec:	6013      	str	r3, [r2, #0]
		climb_rate += dt*acc_Eframe[Z];
 80072ee:	4b52      	ldr	r3, [pc, #328]	@ (8007438 <altitude_estimate+0x1e8>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7f9 fdad 	bl	8000e54 <__aeabi_fmul>
 80072fa:	4603      	mov	r3, r0
 80072fc:	461a      	mov	r2, r3
 80072fe:	4b4c      	ldr	r3, [pc, #304]	@ (8007430 <altitude_estimate+0x1e0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4619      	mov	r1, r3
 8007304:	4610      	mov	r0, r2
 8007306:	f7f9 fc9d 	bl	8000c44 <__addsf3>
 800730a:	4603      	mov	r3, r0
 800730c:	461a      	mov	r2, r3
 800730e:	4b48      	ldr	r3, [pc, #288]	@ (8007430 <altitude_estimate+0x1e0>)
 8007310:	601a      	str	r2, [r3, #0]
		// correction
		alt_estimate += 0.1*(_gps.altitude_msl/1000.0f - alt_estimate);
 8007312:	4b46      	ldr	r3, [pc, #280]	@ (800742c <altitude_estimate+0x1dc>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f7f9 f8ee 	bl	80004f8 <__aeabi_f2d>
 800731c:	4604      	mov	r4, r0
 800731e:	460d      	mov	r5, r1
 8007320:	4b41      	ldr	r3, [pc, #260]	@ (8007428 <altitude_estimate+0x1d8>)
 8007322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007324:	4618      	mov	r0, r3
 8007326:	f7f9 fd41 	bl	8000dac <__aeabi_i2f>
 800732a:	4603      	mov	r3, r0
 800732c:	4943      	ldr	r1, [pc, #268]	@ (800743c <altitude_estimate+0x1ec>)
 800732e:	4618      	mov	r0, r3
 8007330:	f7f9 fe44 	bl	8000fbc <__aeabi_fdiv>
 8007334:	4603      	mov	r3, r0
 8007336:	461a      	mov	r2, r3
 8007338:	4b3c      	ldr	r3, [pc, #240]	@ (800742c <altitude_estimate+0x1dc>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4619      	mov	r1, r3
 800733e:	4610      	mov	r0, r2
 8007340:	f7f9 fc7e 	bl	8000c40 <__aeabi_fsub>
 8007344:	4603      	mov	r3, r0
 8007346:	4618      	mov	r0, r3
 8007348:	f7f9 f8d6 	bl	80004f8 <__aeabi_f2d>
 800734c:	a334      	add	r3, pc, #208	@ (adr r3, 8007420 <altitude_estimate+0x1d0>)
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	f7f9 f929 	bl	80005a8 <__aeabi_dmul>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	4620      	mov	r0, r4
 800735c:	4629      	mov	r1, r5
 800735e:	f7f8 ff6d 	bl	800023c <__adddf3>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4610      	mov	r0, r2
 8007368:	4619      	mov	r1, r3
 800736a:	f7f9 fc15 	bl	8000b98 <__aeabi_d2f>
 800736e:	4603      	mov	r3, r0
 8007370:	4a2e      	ldr	r2, [pc, #184]	@ (800742c <altitude_estimate+0x1dc>)
 8007372:	6013      	str	r3, [r2, #0]
		climb_rate += 0.1*(_gps.velocity[2]/100.0f - climb_rate);
 8007374:	4b2e      	ldr	r3, [pc, #184]	@ (8007430 <altitude_estimate+0x1e0>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f7f9 f8bd 	bl	80004f8 <__aeabi_f2d>
 800737e:	4604      	mov	r4, r0
 8007380:	460d      	mov	r5, r1
 8007382:	4b29      	ldr	r3, [pc, #164]	@ (8007428 <altitude_estimate+0x1d8>)
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	4618      	mov	r0, r3
 8007388:	f7f9 fd10 	bl	8000dac <__aeabi_i2f>
 800738c:	4603      	mov	r3, r0
 800738e:	492c      	ldr	r1, [pc, #176]	@ (8007440 <altitude_estimate+0x1f0>)
 8007390:	4618      	mov	r0, r3
 8007392:	f7f9 fe13 	bl	8000fbc <__aeabi_fdiv>
 8007396:	4603      	mov	r3, r0
 8007398:	461a      	mov	r2, r3
 800739a:	4b25      	ldr	r3, [pc, #148]	@ (8007430 <altitude_estimate+0x1e0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4619      	mov	r1, r3
 80073a0:	4610      	mov	r0, r2
 80073a2:	f7f9 fc4d 	bl	8000c40 <__aeabi_fsub>
 80073a6:	4603      	mov	r3, r0
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7f9 f8a5 	bl	80004f8 <__aeabi_f2d>
 80073ae:	a31c      	add	r3, pc, #112	@ (adr r3, 8007420 <altitude_estimate+0x1d0>)
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	f7f9 f8f8 	bl	80005a8 <__aeabi_dmul>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4620      	mov	r0, r4
 80073be:	4629      	mov	r1, r5
 80073c0:	f7f8 ff3c 	bl	800023c <__adddf3>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4610      	mov	r0, r2
 80073ca:	4619      	mov	r1, r3
 80073cc:	f7f9 fbe4 	bl	8000b98 <__aeabi_d2f>
 80073d0:	4603      	mov	r3, r0
 80073d2:	4a17      	ldr	r2, [pc, #92]	@ (8007430 <altitude_estimate+0x1e0>)
 80073d4:	6013      	str	r3, [r2, #0]
	}
	else{
		alt_estimate = _gps.altitude_msl/1000.0f;
		climb_rate = _gps.velocity[2]/100.0f;
	}
}
 80073d6:	e01b      	b.n	8007410 <altitude_estimate+0x1c0>
		alt_estimate = _gps.altitude_msl/1000.0f;
 80073d8:	4b13      	ldr	r3, [pc, #76]	@ (8007428 <altitude_estimate+0x1d8>)
 80073da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073dc:	4618      	mov	r0, r3
 80073de:	f7f9 fce5 	bl	8000dac <__aeabi_i2f>
 80073e2:	4603      	mov	r3, r0
 80073e4:	4915      	ldr	r1, [pc, #84]	@ (800743c <altitude_estimate+0x1ec>)
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7f9 fde8 	bl	8000fbc <__aeabi_fdiv>
 80073ec:	4603      	mov	r3, r0
 80073ee:	461a      	mov	r2, r3
 80073f0:	4b0e      	ldr	r3, [pc, #56]	@ (800742c <altitude_estimate+0x1dc>)
 80073f2:	601a      	str	r2, [r3, #0]
		climb_rate = _gps.velocity[2]/100.0f;
 80073f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007428 <altitude_estimate+0x1d8>)
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7f9 fcd7 	bl	8000dac <__aeabi_i2f>
 80073fe:	4603      	mov	r3, r0
 8007400:	490f      	ldr	r1, [pc, #60]	@ (8007440 <altitude_estimate+0x1f0>)
 8007402:	4618      	mov	r0, r3
 8007404:	f7f9 fdda 	bl	8000fbc <__aeabi_fdiv>
 8007408:	4603      	mov	r3, r0
 800740a:	461a      	mov	r2, r3
 800740c:	4b08      	ldr	r3, [pc, #32]	@ (8007430 <altitude_estimate+0x1e0>)
 800740e:	601a      	str	r2, [r3, #0]
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800741a:	bf00      	nop
 800741c:	f3af 8000 	nop.w
 8007420:	9999999a 	.word	0x9999999a
 8007424:	3fb99999 	.word	0x3fb99999
 8007428:	20000434 	.word	0x20000434
 800742c:	20000c80 	.word	0x20000c80
 8007430:	20000c84 	.word	0x20000c84
 8007434:	3fe00000 	.word	0x3fe00000
 8007438:	20000590 	.word	0x20000590
 800743c:	447a0000 	.word	0x447a0000
 8007440:	42c80000 	.word	0x42c80000
 8007444:	00000000 	.word	0x00000000

08007448 <dynamic_speed_esitmate>:
static float Cd = 0.01;
static float weigh = 0.8; // kg

static float velocity = 0;

float dynamic_speed_esitmate(float dt){
 8007448:	b5b0      	push	{r4, r5, r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
    float Thrust = (float)(ibusChannelData[CH3] - 1000) * 0.009;
 8007450:	4b41      	ldr	r3, [pc, #260]	@ (8007558 <dynamic_speed_esitmate+0x110>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8007458:	4618      	mov	r0, r3
 800745a:	f7f9 fca3 	bl	8000da4 <__aeabi_ui2f>
 800745e:	4603      	mov	r3, r0
 8007460:	4618      	mov	r0, r3
 8007462:	f7f9 f849 	bl	80004f8 <__aeabi_f2d>
 8007466:	a33a      	add	r3, pc, #232	@ (adr r3, 8007550 <dynamic_speed_esitmate+0x108>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f7f9 f89c 	bl	80005a8 <__aeabi_dmul>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4610      	mov	r0, r2
 8007476:	4619      	mov	r1, r3
 8007478:	f7f9 fb8e 	bl	8000b98 <__aeabi_d2f>
 800747c:	4603      	mov	r3, r0
 800747e:	60fb      	str	r3, [r7, #12]
    float acc = (Thrust - sign(velocity)*sq(velocity)*Cd + weigh * gravity * sin_approx(AHRS.pitch*RAD))/weigh;
 8007480:	4b36      	ldr	r3, [pc, #216]	@ (800755c <dynamic_speed_esitmate+0x114>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f04f 0100 	mov.w	r1, #0
 8007488:	4618      	mov	r0, r3
 800748a:	f7f9 fe9f 	bl	80011cc <__aeabi_fcmpgt>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <dynamic_speed_esitmate+0x52>
 8007494:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
 8007498:	e000      	b.n	800749c <dynamic_speed_esitmate+0x54>
 800749a:	4c31      	ldr	r4, [pc, #196]	@ (8007560 <dynamic_speed_esitmate+0x118>)
 800749c:	4b2f      	ldr	r3, [pc, #188]	@ (800755c <dynamic_speed_esitmate+0x114>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a2e      	ldr	r2, [pc, #184]	@ (800755c <dynamic_speed_esitmate+0x114>)
 80074a2:	6812      	ldr	r2, [r2, #0]
 80074a4:	4611      	mov	r1, r2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7f9 fcd4 	bl	8000e54 <__aeabi_fmul>
 80074ac:	4603      	mov	r3, r0
 80074ae:	4619      	mov	r1, r3
 80074b0:	4620      	mov	r0, r4
 80074b2:	f7f9 fccf 	bl	8000e54 <__aeabi_fmul>
 80074b6:	4603      	mov	r3, r0
 80074b8:	461a      	mov	r2, r3
 80074ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007564 <dynamic_speed_esitmate+0x11c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4619      	mov	r1, r3
 80074c0:	4610      	mov	r0, r2
 80074c2:	f7f9 fcc7 	bl	8000e54 <__aeabi_fmul>
 80074c6:	4603      	mov	r3, r0
 80074c8:	4619      	mov	r1, r3
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7f9 fbb8 	bl	8000c40 <__aeabi_fsub>
 80074d0:	4603      	mov	r3, r0
 80074d2:	461c      	mov	r4, r3
 80074d4:	4b24      	ldr	r3, [pc, #144]	@ (8007568 <dynamic_speed_esitmate+0x120>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a24      	ldr	r2, [pc, #144]	@ (800756c <dynamic_speed_esitmate+0x124>)
 80074da:	6812      	ldr	r2, [r2, #0]
 80074dc:	4611      	mov	r1, r2
 80074de:	4618      	mov	r0, r3
 80074e0:	f7f9 fcb8 	bl	8000e54 <__aeabi_fmul>
 80074e4:	4603      	mov	r3, r0
 80074e6:	461d      	mov	r5, r3
 80074e8:	4b21      	ldr	r3, [pc, #132]	@ (8007570 <dynamic_speed_esitmate+0x128>)
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	4921      	ldr	r1, [pc, #132]	@ (8007574 <dynamic_speed_esitmate+0x12c>)
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7f9 fcb0 	bl	8000e54 <__aeabi_fmul>
 80074f4:	4603      	mov	r3, r0
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fc fff2 	bl	80044e0 <sin_approx>
 80074fc:	4603      	mov	r3, r0
 80074fe:	4619      	mov	r1, r3
 8007500:	4628      	mov	r0, r5
 8007502:	f7f9 fca7 	bl	8000e54 <__aeabi_fmul>
 8007506:	4603      	mov	r3, r0
 8007508:	4619      	mov	r1, r3
 800750a:	4620      	mov	r0, r4
 800750c:	f7f9 fb9a 	bl	8000c44 <__addsf3>
 8007510:	4603      	mov	r3, r0
 8007512:	461a      	mov	r2, r3
 8007514:	4b14      	ldr	r3, [pc, #80]	@ (8007568 <dynamic_speed_esitmate+0x120>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4619      	mov	r1, r3
 800751a:	4610      	mov	r0, r2
 800751c:	f7f9 fd4e 	bl	8000fbc <__aeabi_fdiv>
 8007520:	4603      	mov	r3, r0
 8007522:	60bb      	str	r3, [r7, #8]
    velocity += acc*dt;
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	68b8      	ldr	r0, [r7, #8]
 8007528:	f7f9 fc94 	bl	8000e54 <__aeabi_fmul>
 800752c:	4603      	mov	r3, r0
 800752e:	461a      	mov	r2, r3
 8007530:	4b0a      	ldr	r3, [pc, #40]	@ (800755c <dynamic_speed_esitmate+0x114>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4619      	mov	r1, r3
 8007536:	4610      	mov	r0, r2
 8007538:	f7f9 fb84 	bl	8000c44 <__addsf3>
 800753c:	4603      	mov	r3, r0
 800753e:	461a      	mov	r2, r3
 8007540:	4b06      	ldr	r3, [pc, #24]	@ (800755c <dynamic_speed_esitmate+0x114>)
 8007542:	601a      	str	r2, [r3, #0]
    return velocity;
 8007544:	4b05      	ldr	r3, [pc, #20]	@ (800755c <dynamic_speed_esitmate+0x114>)
 8007546:	681b      	ldr	r3, [r3, #0]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bdb0      	pop	{r4, r5, r7, pc}
 8007550:	8d4fdf3b 	.word	0x8d4fdf3b
 8007554:	3f826e97 	.word	0x3f826e97
 8007558:	20000158 	.word	0x20000158
 800755c:	20000c88 	.word	0x20000c88
 8007560:	bf800000 	.word	0xbf800000
 8007564:	20000074 	.word	0x20000074
 8007568:	20000078 	.word	0x20000078
 800756c:	20000070 	.word	0x20000070
 8007570:	2000056c 	.word	0x2000056c
 8007574:	3c8efa35 	.word	0x3c8efa35

08007578 <mapI>:
}


#define Feq2Sec(F) (1.0f/F)

static int32_t mapI(int val, int min_in,int max_in,int min_out, int max_out){
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
 8007584:	603b      	str	r3, [r7, #0]
   int out = (val - min_in)*(max_out - min_out)/(max_in - min_in);
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	6a39      	ldr	r1, [r7, #32]
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	1a8a      	subs	r2, r1, r2
 8007592:	fb03 f202 	mul.w	r2, r3, r2
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	1acb      	subs	r3, r1, r3
 800759c:	fb92 f3f3 	sdiv	r3, r2, r3
 80075a0:	617b      	str	r3, [r7, #20]
}
 80075a2:	bf00      	nop
 80075a4:	4618      	mov	r0, r3
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bc80      	pop	{r7}
 80075ac:	4770      	bx	lr

080075ae <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b085      	sub	sp, #20
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	4603      	mov	r3, r0
 80075b6:	6039      	str	r1, [r7, #0]
 80075b8:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	79fb      	ldrb	r3, [r7, #7]
 80075c2:	4053      	eors	r3, r2
 80075c4:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	011b      	lsls	r3, r3, #4
 80075ca:	b25a      	sxtb	r2, r3
 80075cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075d0:	4053      	eors	r3, r2
 80075d2:	b25b      	sxtb	r3, r3
 80075d4:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	0a1b      	lsrs	r3, r3, #8
 80075dc:	b29b      	uxth	r3, r3
 80075de:	b21a      	sxth	r2, r3
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	b21b      	sxth	r3, r3
 80075e6:	4053      	eors	r3, r2
 80075e8:	b21a      	sxth	r2, r3
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	b21b      	sxth	r3, r3
 80075f0:	4053      	eors	r3, r2
 80075f2:	b21a      	sxth	r2, r3
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	091b      	lsrs	r3, r3, #4
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	b21b      	sxth	r3, r3
 80075fc:	4053      	eors	r3, r2
 80075fe:	b21b      	sxth	r3, r3
 8007600:	b29a      	uxth	r2, r3
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	801a      	strh	r2, [r3, #0]
}
 8007606:	bf00      	nop
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	bc80      	pop	{r7}
 800760e:	4770      	bx	lr

08007610 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800761e:	801a      	strh	r2, [r3, #0]
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	bc80      	pop	{r7}
 8007628:	4770      	bx	lr

0800762a <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8007636:	f107 030e 	add.w	r3, r7, #14
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff ffe8 	bl	8007610 <crc_init>
	while (length--) {
 8007640:	e009      	b.n	8007656 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	f107 020e 	add.w	r2, r7, #14
 800764e:	4611      	mov	r1, r2
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff ffac 	bl	80075ae <crc_accumulate>
	while (length--) {
 8007656:	887b      	ldrh	r3, [r7, #2]
 8007658:	1e5a      	subs	r2, r3, #1
 800765a:	807a      	strh	r2, [r7, #2]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1f0      	bne.n	8007642 <crc_calculate+0x18>
        }
        return crcTmp;
 8007660:	89fb      	ldrh	r3, [r7, #14]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b086      	sub	sp, #24
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	4613      	mov	r3, r2
 8007676:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	617b      	str	r3, [r7, #20]
	while (length--) {
 800767c:	e007      	b.n	800768e <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	617a      	str	r2, [r7, #20]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	68f9      	ldr	r1, [r7, #12]
 8007688:	4618      	mov	r0, r3
 800768a:	f7ff ff90 	bl	80075ae <crc_accumulate>
	while (length--) {
 800768e:	88fb      	ldrh	r3, [r7, #6]
 8007690:	1e5a      	subs	r2, r3, #1
 8007692:	80fa      	strh	r2, [r7, #6]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1f2      	bne.n	800767e <crc_accumulate_buffer+0x14>
        }
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	4603      	mov	r3, r0
 80076ac:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 80076ae:	79fa      	ldrb	r2, [r7, #7]
 80076b0:	4613      	mov	r3, r2
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4a03      	ldr	r2, [pc, #12]	@ (80076c8 <mavlink_get_channel_status+0x24>)
 80076ba:	4413      	add	r3, r2
}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bc80      	pop	{r7}
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	20000e70 	.word	0x20000e70

080076cc <mavlink_finalize_message_chan>:
						      uint8_t chan, uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
 80076cc:	b590      	push	{r4, r7, lr}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	4608      	mov	r0, r1
 80076d6:	4611      	mov	r1, r2
 80076d8:	461a      	mov	r2, r3
 80076da:	4603      	mov	r3, r0
 80076dc:	70fb      	strb	r3, [r7, #3]
 80076de:	460b      	mov	r3, r1
 80076e0:	70bb      	strb	r3, [r7, #2]
 80076e2:	4613      	mov	r3, r2
 80076e4:	707b      	strb	r3, [r7, #1]
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	22fe      	movs	r2, #254	@ 0xfe
 80076ea:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	7e3a      	ldrb	r2, [r7, #24]
 80076f0:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	78ba      	ldrb	r2, [r7, #2]
 80076fc:	719a      	strb	r2, [r3, #6]
	// One sequence number per component
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 80076fe:	787b      	ldrb	r3, [r7, #1]
 8007700:	4618      	mov	r0, r3
 8007702:	f7ff ffcf 	bl	80076a4 <mavlink_get_channel_status>
 8007706:	4603      	mov	r3, r0
 8007708:	799a      	ldrb	r2, [r3, #6]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 800770e:	787b      	ldrb	r3, [r7, #1]
 8007710:	4618      	mov	r0, r3
 8007712:	f7ff ffc7 	bl	80076a4 <mavlink_get_channel_status>
 8007716:	4603      	mov	r3, r0
 8007718:	799c      	ldrb	r4, [r3, #6]
 800771a:	787b      	ldrb	r3, [r7, #1]
 800771c:	4618      	mov	r0, r3
 800771e:	f7ff ffc1 	bl	80076a4 <mavlink_get_channel_status>
 8007722:	4603      	mov	r3, r0
 8007724:	1c62      	adds	r2, r4, #1
 8007726:	b2d2      	uxtb	r2, r2
 8007728:	719a      	strb	r2, [r3, #6]
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	3303      	adds	r3, #3
 800772e:	2105      	movs	r1, #5
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff ff7a 	bl	800762a <crc_calculate>
 8007736:	4603      	mov	r3, r0
 8007738:	461a      	mov	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f103 0108 	add.w	r1, r3, #8
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	78db      	ldrb	r3, [r3, #3]
 800774a:	461a      	mov	r2, r3
 800774c:	f7ff ff8d 	bl	800766a <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &msg->checksum);
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	7f3b      	ldrb	r3, [r7, #28]
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff ff29 	bl	80075ae <crc_accumulate>
#endif
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	b299      	uxth	r1, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	3308      	adds	r3, #8
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	78d2      	ldrb	r2, [r2, #3]
 800776a:	4413      	add	r3, r2
 800776c:	b2ca      	uxtb	r2, r1
 800776e:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	b29b      	uxth	r3, r3
 8007776:	0a1b      	lsrs	r3, r3, #8
 8007778:	b299      	uxth	r1, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f103 0208 	add.w	r2, r3, #8
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	78db      	ldrb	r3, [r3, #3]
 8007784:	3301      	adds	r3, #1
 8007786:	4413      	add	r3, r2
 8007788:	b2ca      	uxtb	r2, r1
 800778a:	701a      	strb	r2, [r3, #0]

	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 800778c:	7e3b      	ldrb	r3, [r7, #24]
 800778e:	b29b      	uxth	r3, r3
 8007790:	3308      	adds	r3, #8
 8007792:	b29b      	uxth	r3, r3
}
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	bd90      	pop	{r4, r7, pc}

0800779c <mavlink_finalize_message>:
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
#if MAVLINK_CRC_EXTRA
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t length, uint8_t crc_extra)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	4608      	mov	r0, r1
 80077a6:	4611      	mov	r1, r2
 80077a8:	461a      	mov	r2, r3
 80077aa:	4603      	mov	r3, r0
 80077ac:	70fb      	strb	r3, [r7, #3]
 80077ae:	460b      	mov	r3, r1
 80077b0:	70bb      	strb	r3, [r7, #2]
 80077b2:	4613      	mov	r3, r2
 80077b4:	707b      	strb	r3, [r7, #1]
	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
 80077b6:	78ba      	ldrb	r2, [r7, #2]
 80077b8:	78f9      	ldrb	r1, [r7, #3]
 80077ba:	7c3b      	ldrb	r3, [r7, #16]
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	787b      	ldrb	r3, [r7, #1]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	2300      	movs	r3, #0
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7ff ff81 	bl	80076cc <mavlink_finalize_message_chan>
 80077ca:	4603      	mov	r3, r0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	1c99      	adds	r1, r3, #2
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	78db      	ldrb	r3, [r3, #3]
 80077e6:	3306      	adds	r3, #6
 80077e8:	461a      	mov	r2, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f00d fd54 	bl	8015298 <memcpy>

	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	78db      	ldrb	r3, [r3, #3]
 80077f4:	3306      	adds	r3, #6
 80077f6:	461a      	mov	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4413      	add	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]

	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	b29b      	uxth	r3, r3
 8007804:	b2da      	uxtb	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	b29b      	uxth	r3, r3
 8007810:	0a1b      	lsrs	r3, r3, #8
 8007812:	b29a      	uxth	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	b2d2      	uxtb	r2, r2
 800781a:	701a      	strb	r2, [r3, #0]

	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	78db      	ldrb	r3, [r3, #3]
 8007820:	3308      	adds	r3, #8
 8007822:	b29b      	uxth	r3, r3
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <mavlink_msg_heartbeat_pack>:
 * @param system_status System status flag, see MAV_STATE ENUM
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af02      	add	r7, sp, #8
 8007832:	603a      	str	r2, [r7, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	4603      	mov	r3, r0
 8007838:	71fb      	strb	r3, [r7, #7]
 800783a:	460b      	mov	r3, r1
 800783c:	71bb      	strb	r3, [r7, #6]
 800783e:	4613      	mov	r3, r2
 8007840:	717b      	strb	r3, [r7, #5]
	_mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
	mavlink_heartbeat_t packet;
	packet.custom_mode = custom_mode;
 8007842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007844:	60fb      	str	r3, [r7, #12]
	packet.type = type;
 8007846:	797b      	ldrb	r3, [r7, #5]
 8007848:	743b      	strb	r3, [r7, #16]
	packet.autopilot = autopilot;
 800784a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800784e:	747b      	strb	r3, [r7, #17]
	packet.base_mode = base_mode;
 8007850:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007854:	74bb      	strb	r3, [r7, #18]
	packet.system_status = system_status;
 8007856:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800785a:	74fb      	strb	r3, [r7, #19]
	packet.mavlink_version = 3;
 800785c:	2303      	movs	r3, #3
 800785e:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	f107 010c 	add.w	r1, r7, #12
 8007868:	2209      	movs	r2, #9
 800786a:	4618      	mov	r0, r3
 800786c:	f00d fd14 	bl	8015298 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2200      	movs	r2, #0
 8007874:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8007876:	79ba      	ldrb	r2, [r7, #6]
 8007878:	79f9      	ldrb	r1, [r7, #7]
 800787a:	2332      	movs	r3, #50	@ 0x32
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	2309      	movs	r3, #9
 8007880:	6838      	ldr	r0, [r7, #0]
 8007882:	f7ff ff8b 	bl	800779c <mavlink_finalize_message>
 8007886:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <mavlink_msg_attitude_pack>:
 * @param yawspeed Yaw angular speed (rad/s)
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_attitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08e      	sub	sp, #56	@ 0x38
 8007894:	af02      	add	r7, sp, #8
 8007896:	60ba      	str	r2, [r7, #8]
 8007898:	607b      	str	r3, [r7, #4]
 800789a:	4603      	mov	r3, r0
 800789c:	73fb      	strb	r3, [r7, #15]
 800789e:	460b      	mov	r3, r1
 80078a0:	73bb      	strb	r3, [r7, #14]
	_mav_put_float(buf, 24, yawspeed);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_ATTITUDE_LEN);
#else
	mavlink_attitude_t packet;
	packet.time_boot_ms = time_boot_ms;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	617b      	str	r3, [r7, #20]
	packet.roll = roll;
 80078a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a8:	61bb      	str	r3, [r7, #24]
	packet.pitch = pitch;
 80078aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ac:	61fb      	str	r3, [r7, #28]
	packet.yaw = yaw;
 80078ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078b0:	623b      	str	r3, [r7, #32]
	packet.rollspeed = rollspeed;
 80078b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078b4:	627b      	str	r3, [r7, #36]	@ 0x24
	packet.pitchspeed = pitchspeed;
 80078b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	packet.yawspeed = yawspeed;
 80078ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	3308      	adds	r3, #8
 80078c2:	f107 0114 	add.w	r1, r7, #20
 80078c6:	221c      	movs	r2, #28
 80078c8:	4618      	mov	r0, r3
 80078ca:	f00d fce5 	bl	8015298 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_ATTITUDE;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	221e      	movs	r2, #30
 80078d2:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
 80078d4:	7bba      	ldrb	r2, [r7, #14]
 80078d6:	7bf9      	ldrb	r1, [r7, #15]
 80078d8:	2327      	movs	r3, #39	@ 0x27
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	231c      	movs	r3, #28
 80078de:	68b8      	ldr	r0, [r7, #8]
 80078e0:	f7ff ff5c 	bl	800779c <mavlink_finalize_message>
 80078e4:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3730      	adds	r7, #48	@ 0x30
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <mavlink_msg_rc_channels_raw_pack>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rc_channels_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b08c      	sub	sp, #48	@ 0x30
 80078f2:	af02      	add	r7, sp, #8
 80078f4:	60ba      	str	r2, [r7, #8]
 80078f6:	607b      	str	r3, [r7, #4]
 80078f8:	4603      	mov	r3, r0
 80078fa:	73fb      	strb	r3, [r7, #15]
 80078fc:	460b      	mov	r3, r1
 80078fe:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint8_t(buf, 21, rssi);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#else
	mavlink_rc_channels_raw_t packet;
	packet.time_boot_ms = time_boot_ms;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	613b      	str	r3, [r7, #16]
	packet.chan1_raw = chan1_raw;
 8007904:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007906:	82bb      	strh	r3, [r7, #20]
	packet.chan2_raw = chan2_raw;
 8007908:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800790a:	82fb      	strh	r3, [r7, #22]
	packet.chan3_raw = chan3_raw;
 800790c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800790e:	833b      	strh	r3, [r7, #24]
	packet.chan4_raw = chan4_raw;
 8007910:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007914:	837b      	strh	r3, [r7, #26]
	packet.chan5_raw = chan5_raw;
 8007916:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800791a:	83bb      	strh	r3, [r7, #28]
	packet.chan6_raw = chan6_raw;
 800791c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007920:	83fb      	strh	r3, [r7, #30]
	packet.chan7_raw = chan7_raw;
 8007922:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007926:	843b      	strh	r3, [r7, #32]
	packet.chan8_raw = chan8_raw;
 8007928:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800792c:	847b      	strh	r3, [r7, #34]	@ 0x22
	packet.port = port;
 800792e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007932:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	packet.rssi = rssi;
 8007936:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800793a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	3308      	adds	r3, #8
 8007942:	f107 0110 	add.w	r1, r7, #16
 8007946:	2216      	movs	r2, #22
 8007948:	4618      	mov	r0, r3
 800794a:	f00d fca5 	bl	8015298 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_RC_CHANNELS_RAW;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2223      	movs	r2, #35	@ 0x23
 8007952:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
 8007954:	7bba      	ldrb	r2, [r7, #14]
 8007956:	7bf9      	ldrb	r1, [r7, #15]
 8007958:	23f4      	movs	r3, #244	@ 0xf4
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	2316      	movs	r3, #22
 800795e:	68b8      	ldr	r0, [r7, #8]
 8007960:	f7ff ff1c 	bl	800779c <mavlink_finalize_message>
 8007964:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
}
 8007966:	4618      	mov	r0, r3
 8007968:	3728      	adds	r7, #40	@ 0x28
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <mavlink_msg_vfr_hud_pack>:
 * @param climb Current climb rate in meters/second
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b08c      	sub	sp, #48	@ 0x30
 8007972:	af02      	add	r7, sp, #8
 8007974:	60ba      	str	r2, [r7, #8]
 8007976:	607b      	str	r3, [r7, #4]
 8007978:	4603      	mov	r3, r0
 800797a:	73fb      	strb	r3, [r7, #15]
 800797c:	460b      	mov	r3, r1
 800797e:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint16_t(buf, 18, throttle);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_VFR_HUD_LEN);
#else
	mavlink_vfr_hud_t packet;
	packet.airspeed = airspeed;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	617b      	str	r3, [r7, #20]
	packet.groundspeed = groundspeed;
 8007984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007986:	61bb      	str	r3, [r7, #24]
	packet.alt = alt;
 8007988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800798a:	61fb      	str	r3, [r7, #28]
	packet.climb = climb;
 800798c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800798e:	623b      	str	r3, [r7, #32]
	packet.heading = heading;
 8007990:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007992:	84bb      	strh	r3, [r7, #36]	@ 0x24
	packet.throttle = throttle;
 8007994:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007996:	84fb      	strh	r3, [r7, #38]	@ 0x26

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	3308      	adds	r3, #8
 800799c:	f107 0114 	add.w	r1, r7, #20
 80079a0:	2214      	movs	r2, #20
 80079a2:	4618      	mov	r0, r3
 80079a4:	f00d fc78 	bl	8015298 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	224a      	movs	r2, #74	@ 0x4a
 80079ac:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 80079ae:	7bba      	ldrb	r2, [r7, #14]
 80079b0:	7bf9      	ldrb	r1, [r7, #15]
 80079b2:	2314      	movs	r3, #20
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	2314      	movs	r3, #20
 80079b8:	68b8      	ldr	r0, [r7, #8]
 80079ba:	f7ff feef 	bl	800779c <mavlink_finalize_message>
 80079be:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3728      	adds	r7, #40	@ 0x28
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <mavlinkInit>:
static int isTxcpl;
uint32_t send_time_us;

extern float v_estimate;

void mavlinkInit(uint8_t syss_id, uint8_t comm_id,UART_HandleTypeDef *uartt,uint32_t baudrate){
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60ba      	str	r2, [r7, #8]
 80079d0:	607b      	str	r3, [r7, #4]
 80079d2:	4603      	mov	r3, r0
 80079d4:	73fb      	strb	r3, [r7, #15]
 80079d6:	460b      	mov	r3, r1
 80079d8:	73bb      	strb	r3, [r7, #14]
    isTxcpl = 1;
 80079da:	4b10      	ldr	r3, [pc, #64]	@ (8007a1c <mavlinkInit+0x54>)
 80079dc:	2201      	movs	r2, #1
 80079de:	601a      	str	r2, [r3, #0]
    index_ =0;
 80079e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007a20 <mavlinkInit+0x58>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
	sys_id  = syss_id;
 80079e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007a24 <mavlinkInit+0x5c>)
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	7013      	strb	r3, [r2, #0]
    com_id  = comm_id;
 80079ec:	4a0e      	ldr	r2, [pc, #56]	@ (8007a28 <mavlinkInit+0x60>)
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	7013      	strb	r3, [r2, #0]
	uart = uartt;
 80079f2:	4a0e      	ldr	r2, [pc, #56]	@ (8007a2c <mavlinkInit+0x64>)
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	6013      	str	r3, [r2, #0]
    uartt->Init.BaudRate = baudrate;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(uartt);
 80079fe:	68b8      	ldr	r0, [r7, #8]
 8007a00:	f005 fab6 	bl	800cf70 <HAL_UART_Init>
	HAL_UART_Receive_IT(uart, &data,1);
 8007a04:	4b09      	ldr	r3, [pc, #36]	@ (8007a2c <mavlinkInit+0x64>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	4909      	ldr	r1, [pc, #36]	@ (8007a30 <mavlinkInit+0x68>)
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f005 fb82 	bl	800d116 <HAL_UART_Receive_IT>
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000e6c 	.word	0x20000e6c
 8007a20:	20000d9d 	.word	0x20000d9d
 8007a24:	20000d9e 	.word	0x20000d9e
 8007a28:	20000d9f 	.word	0x20000d9f
 8007a2c:	20000da0 	.word	0x20000da0
 8007a30:	20000d9c 	.word	0x20000d9c

08007a34 <mavlink_osd>:
*   Attitude
*   GPS 
*   RC signal
*   heartbeat
*/
void mavlink_osd(){
 8007a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a36:	b093      	sub	sp, #76	@ 0x4c
 8007a38:	af0a      	add	r7, sp, #40	@ 0x28
	static uint8_t count_ = 0;
	static uint8_t count2_ = 0;
	if(isTxcpl)
 8007a3a:	4b7c      	ldr	r3, [pc, #496]	@ (8007c2c <mavlink_osd+0x1f8>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 80ef 	beq.w	8007c22 <mavlink_osd+0x1ee>
	{
		switch (count_)
 8007a44:	4b7a      	ldr	r3, [pc, #488]	@ (8007c30 <mavlink_osd+0x1fc>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d071      	beq.n	8007b30 <mavlink_osd+0xfc>
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	f300 80d8 	bgt.w	8007c02 <mavlink_osd+0x1ce>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <mavlink_osd+0x28>
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d02f      	beq.n	8007aba <mavlink_osd+0x86>
 8007a5a:	e0d2      	b.n	8007c02 <mavlink_osd+0x1ce>
		{
		// fast display
		case 0:  
			mavlink_msg_attitude_pack(sys_id,com_id,&msg,0,AHRS.roll*RAD,AHRS.pitch*RAD,0,0,0,0);
 8007a5c:	4b75      	ldr	r3, [pc, #468]	@ (8007c34 <mavlink_osd+0x200>)
 8007a5e:	781c      	ldrb	r4, [r3, #0]
 8007a60:	4b75      	ldr	r3, [pc, #468]	@ (8007c38 <mavlink_osd+0x204>)
 8007a62:	781d      	ldrb	r5, [r3, #0]
 8007a64:	4b75      	ldr	r3, [pc, #468]	@ (8007c3c <mavlink_osd+0x208>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4975      	ldr	r1, [pc, #468]	@ (8007c40 <mavlink_osd+0x20c>)
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7f9 f9f2 	bl	8000e54 <__aeabi_fmul>
 8007a70:	4603      	mov	r3, r0
 8007a72:	461e      	mov	r6, r3
 8007a74:	4b71      	ldr	r3, [pc, #452]	@ (8007c3c <mavlink_osd+0x208>)
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	4971      	ldr	r1, [pc, #452]	@ (8007c40 <mavlink_osd+0x20c>)
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7f9 f9ea 	bl	8000e54 <__aeabi_fmul>
 8007a80:	4603      	mov	r3, r0
 8007a82:	461a      	mov	r2, r3
 8007a84:	f04f 0300 	mov.w	r3, #0
 8007a88:	9305      	str	r3, [sp, #20]
 8007a8a:	f04f 0300 	mov.w	r3, #0
 8007a8e:	9304      	str	r3, [sp, #16]
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	9303      	str	r3, [sp, #12]
 8007a96:	f04f 0300 	mov.w	r3, #0
 8007a9a:	9302      	str	r3, [sp, #8]
 8007a9c:	9201      	str	r2, [sp, #4]
 8007a9e:	9600      	str	r6, [sp, #0]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4a68      	ldr	r2, [pc, #416]	@ (8007c44 <mavlink_osd+0x210>)
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f7ff fef2 	bl	8007890 <mavlink_msg_attitude_pack>
			count_ ++;
 8007aac:	4b60      	ldr	r3, [pc, #384]	@ (8007c30 <mavlink_osd+0x1fc>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	4b5e      	ldr	r3, [pc, #376]	@ (8007c30 <mavlink_osd+0x1fc>)
 8007ab6:	701a      	strb	r2, [r3, #0]
			break;
 8007ab8:	e0a3      	b.n	8007c02 <mavlink_osd+0x1ce>
		case 1:  
			float airspeed = 314;    // osd in km/h
 8007aba:	4b63      	ldr	r3, [pc, #396]	@ (8007c48 <mavlink_osd+0x214>)
 8007abc:	61bb      	str	r3, [r7, #24]
			float groundspeed = 57;  // osd in km/h
 8007abe:	4b63      	ldr	r3, [pc, #396]	@ (8007c4c <mavlink_osd+0x218>)
 8007ac0:	617b      	str	r3, [r7, #20]
			uint16_t throttle = (ibusChannelData[CH3] - 1000)*0.1f;
 8007ac2:	4b63      	ldr	r3, [pc, #396]	@ (8007c50 <mavlink_osd+0x21c>)
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7f9 f96a 	bl	8000da4 <__aeabi_ui2f>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	4960      	ldr	r1, [pc, #384]	@ (8007c54 <mavlink_osd+0x220>)
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7f9 f9bd 	bl	8000e54 <__aeabi_fmul>
 8007ada:	4603      	mov	r3, r0
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7f9 fbbb 	bl	8001258 <__aeabi_f2uiz>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	827b      	strh	r3, [r7, #18]
			float alt = 333;
 8007ae6:	4b5c      	ldr	r3, [pc, #368]	@ (8007c58 <mavlink_osd+0x224>)
 8007ae8:	60fb      	str	r3, [r7, #12]
			float climb = 5;
 8007aea:	4b5c      	ldr	r3, [pc, #368]	@ (8007c5c <mavlink_osd+0x228>)
 8007aec:	60bb      	str	r3, [r7, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 8007aee:	4b51      	ldr	r3, [pc, #324]	@ (8007c34 <mavlink_osd+0x200>)
 8007af0:	781c      	ldrb	r4, [r3, #0]
 8007af2:	4b51      	ldr	r3, [pc, #324]	@ (8007c38 <mavlink_osd+0x204>)
 8007af4:	781d      	ldrb	r5, [r3, #0]
						airspeed, groundspeed,AHRS.yaw, throttle,alt, climb);
 8007af6:	4b51      	ldr	r3, [pc, #324]	@ (8007c3c <mavlink_osd+0x208>)
 8007af8:	689b      	ldr	r3, [r3, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7f9 fb86 	bl	800120c <__aeabi_f2iz>
 8007b00:	4603      	mov	r3, r0
 8007b02:	b21b      	sxth	r3, r3
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	9204      	str	r2, [sp, #16]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	9203      	str	r2, [sp, #12]
 8007b0c:	8a7a      	ldrh	r2, [r7, #18]
 8007b0e:	9202      	str	r2, [sp, #8]
 8007b10:	9301      	str	r3, [sp, #4]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	4a4a      	ldr	r2, [pc, #296]	@ (8007c44 <mavlink_osd+0x210>)
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f7ff ff26 	bl	800796e <mavlink_msg_vfr_hud_pack>
			count_ ++;
 8007b22:	4b43      	ldr	r3, [pc, #268]	@ (8007c30 <mavlink_osd+0x1fc>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	3301      	adds	r3, #1
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	4b41      	ldr	r3, [pc, #260]	@ (8007c30 <mavlink_osd+0x1fc>)
 8007b2c:	701a      	strb	r2, [r3, #0]
			break;
 8007b2e:	e068      	b.n	8007c02 <mavlink_osd+0x1ce>
		case 2:
			switch (count2_)
 8007b30:	4b4b      	ldr	r3, [pc, #300]	@ (8007c60 <mavlink_osd+0x22c>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d046      	beq.n	8007bc6 <mavlink_osd+0x192>
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	dc5f      	bgt.n	8007bfc <mavlink_osd+0x1c8>
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <mavlink_osd+0x112>
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d007      	beq.n	8007b54 <mavlink_osd+0x120>
 8007b44:	e05a      	b.n	8007bfc <mavlink_osd+0x1c8>
			{
			case 0:
				//mavlink_msg_gps_raw_int_pack(sys_id,com_id,&msg,
				//						0, _gps.fix,_gps.position[0],_gps.position[1],1200,
				//						1 , 1 , 2200,0 ,abs(v_estimate));
				count2_ ++;
 8007b46:	4b46      	ldr	r3, [pc, #280]	@ (8007c60 <mavlink_osd+0x22c>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	4b44      	ldr	r3, [pc, #272]	@ (8007c60 <mavlink_osd+0x22c>)
 8007b50:	701a      	strb	r2, [r3, #0]

				break;
 8007b52:	e053      	b.n	8007bfc <mavlink_osd+0x1c8>
			case 1:
			    uint8_t rssi = mapI(ibusChannelData[CH11],1000,2000,0,255);
 8007b54:	4b3e      	ldr	r3, [pc, #248]	@ (8007c50 <mavlink_osd+0x21c>)
 8007b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b58:	4618      	mov	r0, r3
 8007b5a:	23ff      	movs	r3, #255	@ 0xff
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007b64:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007b68:	f7ff fd06 	bl	8007578 <mapI>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	773b      	strb	r3, [r7, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8007b70:	4b30      	ldr	r3, [pc, #192]	@ (8007c34 <mavlink_osd+0x200>)
 8007b72:	781c      	ldrb	r4, [r3, #0]
 8007b74:	4b30      	ldr	r3, [pc, #192]	@ (8007c38 <mavlink_osd+0x204>)
 8007b76:	781d      	ldrb	r5, [r3, #0]
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 8007b78:	4b35      	ldr	r3, [pc, #212]	@ (8007c50 <mavlink_osd+0x21c>)
 8007b7a:	68db      	ldr	r3, [r3, #12]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8007b7c:	b29b      	uxth	r3, r3
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 8007b7e:	4a34      	ldr	r2, [pc, #208]	@ (8007c50 <mavlink_osd+0x21c>)
 8007b80:	6992      	ldr	r2, [r2, #24]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8007b82:	b292      	uxth	r2, r2
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 8007b84:	4932      	ldr	r1, [pc, #200]	@ (8007c50 <mavlink_osd+0x21c>)
 8007b86:	69c9      	ldr	r1, [r1, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8007b88:	b289      	uxth	r1, r1
 8007b8a:	7f38      	ldrb	r0, [r7, #28]
 8007b8c:	9009      	str	r0, [sp, #36]	@ 0x24
 8007b8e:	2000      	movs	r0, #0
 8007b90:	9008      	str	r0, [sp, #32]
 8007b92:	2000      	movs	r0, #0
 8007b94:	9007      	str	r0, [sp, #28]
 8007b96:	2000      	movs	r0, #0
 8007b98:	9006      	str	r0, [sp, #24]
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	9005      	str	r0, [sp, #20]
 8007b9e:	2000      	movs	r0, #0
 8007ba0:	9004      	str	r0, [sp, #16]
 8007ba2:	9103      	str	r1, [sp, #12]
 8007ba4:	9202      	str	r2, [sp, #8]
 8007ba6:	9301      	str	r3, [sp, #4]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	2300      	movs	r3, #0
 8007bae:	4a25      	ldr	r2, [pc, #148]	@ (8007c44 <mavlink_osd+0x210>)
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f7ff fe9b 	bl	80078ee <mavlink_msg_rc_channels_raw_pack>
						0,0,0,
						0,0,rssi);
				count2_ ++;
 8007bb8:	4b29      	ldr	r3, [pc, #164]	@ (8007c60 <mavlink_osd+0x22c>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	4b27      	ldr	r3, [pc, #156]	@ (8007c60 <mavlink_osd+0x22c>)
 8007bc2:	701a      	strb	r2, [r3, #0]
				break;
 8007bc4:	e01a      	b.n	8007bfc <mavlink_osd+0x1c8>
			case 2: // send heartbeat
				uint8_t type = MAV_TYPE_FIXED_WING;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	77fb      	strb	r3, [r7, #31]
				uint8_t autopilot = MAV_AUTOPILOT_GENERIC;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	77bb      	strb	r3, [r7, #30]
				uint8_t base_mode = MAV_MODE_FLAG_TEST_ENABLED;
 8007bce:	2302      	movs	r3, #2
 8007bd0:	777b      	strb	r3, [r7, #29]
				mavlink_msg_heartbeat_pack(sys_id,com_id,&msg,type,autopilot,base_mode,base_mode, MAV_STATE_UNINIT);
 8007bd2:	4b18      	ldr	r3, [pc, #96]	@ (8007c34 <mavlink_osd+0x200>)
 8007bd4:	7818      	ldrb	r0, [r3, #0]
 8007bd6:	4b18      	ldr	r3, [pc, #96]	@ (8007c38 <mavlink_osd+0x204>)
 8007bd8:	7819      	ldrb	r1, [r3, #0]
 8007bda:	7f7b      	ldrb	r3, [r7, #29]
 8007bdc:	7ffa      	ldrb	r2, [r7, #31]
 8007bde:	2400      	movs	r4, #0
 8007be0:	9403      	str	r4, [sp, #12]
 8007be2:	9302      	str	r3, [sp, #8]
 8007be4:	7f7b      	ldrb	r3, [r7, #29]
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	7fbb      	ldrb	r3, [r7, #30]
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	4613      	mov	r3, r2
 8007bee:	4a15      	ldr	r2, [pc, #84]	@ (8007c44 <mavlink_osd+0x210>)
 8007bf0:	f7ff fe1c 	bl	800782c <mavlink_msg_heartbeat_pack>
				count2_ = 0;
 8007bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8007c60 <mavlink_osd+0x22c>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	701a      	strb	r2, [r3, #0]
				break;
 8007bfa:	bf00      	nop
				                                     0,q,0,0,0,thrust);
		        count2_ = 0;
				break;
			*/
			}
			count_ = 0;
 8007bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8007c30 <mavlink_osd+0x1fc>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
		}
		uint16_t len_data = mavlink_msg_to_send_buffer(buffer__,&msg);
 8007c02:	4910      	ldr	r1, [pc, #64]	@ (8007c44 <mavlink_osd+0x210>)
 8007c04:	4817      	ldr	r0, [pc, #92]	@ (8007c64 <mavlink_osd+0x230>)
 8007c06:	f7ff fde5 	bl	80077d4 <mavlink_msg_to_send_buffer>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	80fb      	strh	r3, [r7, #6]
	    HAL_UART_Transmit_DMA(uart,buffer__,len_data);
 8007c0e:	4b16      	ldr	r3, [pc, #88]	@ (8007c68 <mavlink_osd+0x234>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	88fa      	ldrh	r2, [r7, #6]
 8007c14:	4913      	ldr	r1, [pc, #76]	@ (8007c64 <mavlink_osd+0x230>)
 8007c16:	4618      	mov	r0, r3
 8007c18:	f005 faa2 	bl	800d160 <HAL_UART_Transmit_DMA>
	    isTxcpl = 0;
 8007c1c:	4b03      	ldr	r3, [pc, #12]	@ (8007c2c <mavlink_osd+0x1f8>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]
	}
}
 8007c22:	bf00      	nop
 8007c24:	3724      	adds	r7, #36	@ 0x24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20000e6c 	.word	0x20000e6c
 8007c30:	20000ea0 	.word	0x20000ea0
 8007c34:	20000d9e 	.word	0x20000d9e
 8007c38:	20000d9f 	.word	0x20000d9f
 8007c3c:	2000056c 	.word	0x2000056c
 8007c40:	3c8efa35 	.word	0x3c8efa35
 8007c44:	20000c8c 	.word	0x20000c8c
 8007c48:	439d0000 	.word	0x439d0000
 8007c4c:	42640000 	.word	0x42640000
 8007c50:	20000158 	.word	0x20000158
 8007c54:	3dcccccd 	.word	0x3dcccccd
 8007c58:	43a68000 	.word	0x43a68000
 8007c5c:	40a00000 	.word	0x40a00000
 8007c60:	20000ea1 	.word	0x20000ea1
 8007c64:	20000da4 	.word	0x20000da4
 8007c68:	20000da0 	.word	0x20000da0

08007c6c <mavlink_tx_cpl_callback>:
/*
 * 
 */
uint32_t temp;
void mavlink_tx_cpl_callback()
{   
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
	//send_time_us = millis() - temp;
	//temp = millis();
	isTxcpl = 1;
 8007c70:	4b03      	ldr	r3, [pc, #12]	@ (8007c80 <mavlink_tx_cpl_callback+0x14>)
 8007c72:	2201      	movs	r2, #1
 8007c74:	601a      	str	r2, [r3, #0]
}
 8007c76:	bf00      	nop
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bc80      	pop	{r7}
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	20000e6c 	.word	0x20000e6c

08007c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c88:	4b08      	ldr	r3, [pc, #32]	@ (8007cac <HAL_Init+0x28>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a07      	ldr	r2, [pc, #28]	@ (8007cac <HAL_Init+0x28>)
 8007c8e:	f043 0310 	orr.w	r3, r3, #16
 8007c92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c94:	2003      	movs	r0, #3
 8007c96:	f000 f8f5 	bl	8007e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007c9a:	200f      	movs	r0, #15
 8007c9c:	f7fd ffa2 	bl	8005be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007ca0:	f7fd ff68 	bl	8005b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	40022000 	.word	0x40022000

08007cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007cb4:	4b05      	ldr	r3, [pc, #20]	@ (8007ccc <HAL_IncTick+0x1c>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4b05      	ldr	r3, [pc, #20]	@ (8007cd0 <HAL_IncTick+0x20>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	4a03      	ldr	r2, [pc, #12]	@ (8007cd0 <HAL_IncTick+0x20>)
 8007cc2:	6013      	str	r3, [r2, #0]
}
 8007cc4:	bf00      	nop
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bc80      	pop	{r7}
 8007cca:	4770      	bx	lr
 8007ccc:	20000080 	.word	0x20000080
 8007cd0:	20000ea4 	.word	0x20000ea4

08007cd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8007cd8:	4b02      	ldr	r3, [pc, #8]	@ (8007ce4 <HAL_GetTick+0x10>)
 8007cda:	681b      	ldr	r3, [r3, #0]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bc80      	pop	{r7}
 8007ce2:	4770      	bx	lr
 8007ce4:	20000ea4 	.word	0x20000ea4

08007ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007cf0:	f7ff fff0 	bl	8007cd4 <HAL_GetTick>
 8007cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d00:	d005      	beq.n	8007d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d02:	4b0a      	ldr	r3, [pc, #40]	@ (8007d2c <HAL_Delay+0x44>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007d0e:	bf00      	nop
 8007d10:	f7ff ffe0 	bl	8007cd4 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d8f7      	bhi.n	8007d10 <HAL_Delay+0x28>
  {
  }
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000080 	.word	0x20000080

08007d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d40:	4b0c      	ldr	r3, [pc, #48]	@ (8007d74 <__NVIC_SetPriorityGrouping+0x44>)
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007d58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d62:	4a04      	ldr	r2, [pc, #16]	@ (8007d74 <__NVIC_SetPriorityGrouping+0x44>)
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	60d3      	str	r3, [r2, #12]
}
 8007d68:	bf00      	nop
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bc80      	pop	{r7}
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	e000ed00 	.word	0xe000ed00

08007d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d7c:	4b04      	ldr	r3, [pc, #16]	@ (8007d90 <__NVIC_GetPriorityGrouping+0x18>)
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	0a1b      	lsrs	r3, r3, #8
 8007d82:	f003 0307 	and.w	r3, r3, #7
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bc80      	pop	{r7}
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	e000ed00 	.word	0xe000ed00

08007d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	db0b      	blt.n	8007dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007da6:	79fb      	ldrb	r3, [r7, #7]
 8007da8:	f003 021f 	and.w	r2, r3, #31
 8007dac:	4906      	ldr	r1, [pc, #24]	@ (8007dc8 <__NVIC_EnableIRQ+0x34>)
 8007dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007db2:	095b      	lsrs	r3, r3, #5
 8007db4:	2001      	movs	r0, #1
 8007db6:	fa00 f202 	lsl.w	r2, r0, r2
 8007dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bc80      	pop	{r7}
 8007dc6:	4770      	bx	lr
 8007dc8:	e000e100 	.word	0xe000e100

08007dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	6039      	str	r1, [r7, #0]
 8007dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	db0a      	blt.n	8007df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	490c      	ldr	r1, [pc, #48]	@ (8007e18 <__NVIC_SetPriority+0x4c>)
 8007de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dea:	0112      	lsls	r2, r2, #4
 8007dec:	b2d2      	uxtb	r2, r2
 8007dee:	440b      	add	r3, r1
 8007df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007df4:	e00a      	b.n	8007e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	4908      	ldr	r1, [pc, #32]	@ (8007e1c <__NVIC_SetPriority+0x50>)
 8007dfc:	79fb      	ldrb	r3, [r7, #7]
 8007dfe:	f003 030f 	and.w	r3, r3, #15
 8007e02:	3b04      	subs	r3, #4
 8007e04:	0112      	lsls	r2, r2, #4
 8007e06:	b2d2      	uxtb	r2, r2
 8007e08:	440b      	add	r3, r1
 8007e0a:	761a      	strb	r2, [r3, #24]
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bc80      	pop	{r7}
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	e000e100 	.word	0xe000e100
 8007e1c:	e000ed00 	.word	0xe000ed00

08007e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b089      	sub	sp, #36	@ 0x24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f003 0307 	and.w	r3, r3, #7
 8007e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	f1c3 0307 	rsb	r3, r3, #7
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	bf28      	it	cs
 8007e3e:	2304      	movcs	r3, #4
 8007e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	3304      	adds	r3, #4
 8007e46:	2b06      	cmp	r3, #6
 8007e48:	d902      	bls.n	8007e50 <NVIC_EncodePriority+0x30>
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	3b03      	subs	r3, #3
 8007e4e:	e000      	b.n	8007e52 <NVIC_EncodePriority+0x32>
 8007e50:	2300      	movs	r3, #0
 8007e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e54:	f04f 32ff 	mov.w	r2, #4294967295
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5e:	43da      	mvns	r2, r3
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	401a      	ands	r2, r3
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e68:	f04f 31ff 	mov.w	r1, #4294967295
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e72:	43d9      	mvns	r1, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e78:	4313      	orrs	r3, r2
         );
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3724      	adds	r7, #36	@ 0x24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bc80      	pop	{r7}
 8007e82:	4770      	bx	lr

08007e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7ff ff4f 	bl	8007d30 <__NVIC_SetPriorityGrouping>
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b086      	sub	sp, #24
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	607a      	str	r2, [r7, #4]
 8007ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007eac:	f7ff ff64 	bl	8007d78 <__NVIC_GetPriorityGrouping>
 8007eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	6978      	ldr	r0, [r7, #20]
 8007eb8:	f7ff ffb2 	bl	8007e20 <NVIC_EncodePriority>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7ff ff81 	bl	8007dcc <__NVIC_SetPriority>
}
 8007eca:	bf00      	nop
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b082      	sub	sp, #8
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	4603      	mov	r3, r0
 8007eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7ff ff57 	bl	8007d94 <__NVIC_EnableIRQ>
}
 8007ee6:	bf00      	nop
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
	...

08007ef0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e059      	b.n	8007fba <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8007fc4 <HAL_DMA_Init+0xd4>)
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d80f      	bhi.n	8007f32 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	4b2b      	ldr	r3, [pc, #172]	@ (8007fc8 <HAL_DMA_Init+0xd8>)
 8007f1a:	4413      	add	r3, r2
 8007f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8007fcc <HAL_DMA_Init+0xdc>)
 8007f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f22:	091b      	lsrs	r3, r3, #4
 8007f24:	009a      	lsls	r2, r3, #2
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a28      	ldr	r2, [pc, #160]	@ (8007fd0 <HAL_DMA_Init+0xe0>)
 8007f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007f30:	e00e      	b.n	8007f50 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	4b26      	ldr	r3, [pc, #152]	@ (8007fd4 <HAL_DMA_Init+0xe4>)
 8007f3a:	4413      	add	r3, r2
 8007f3c:	4a23      	ldr	r2, [pc, #140]	@ (8007fcc <HAL_DMA_Init+0xdc>)
 8007f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f42:	091b      	lsrs	r3, r3, #4
 8007f44:	009a      	lsls	r2, r3, #2
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a22      	ldr	r2, [pc, #136]	@ (8007fd8 <HAL_DMA_Init+0xe8>)
 8007f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007f66:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007f6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bc80      	pop	{r7}
 8007fc2:	4770      	bx	lr
 8007fc4:	40020407 	.word	0x40020407
 8007fc8:	bffdfff8 	.word	0xbffdfff8
 8007fcc:	cccccccd 	.word	0xcccccccd
 8007fd0:	40020000 	.word	0x40020000
 8007fd4:	bffdfbf8 	.word	0xbffdfbf8
 8007fd8:	40020400 	.word	0x40020400

08007fdc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d101      	bne.n	8007ffc <HAL_DMA_Start_IT+0x20>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	e04b      	b.n	8008094 <HAL_DMA_Start_IT+0xb8>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b01      	cmp	r3, #1
 800800e:	d13a      	bne.n	8008086 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0201 	bic.w	r2, r2, #1
 800802c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 fbb1 	bl	800879c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d008      	beq.n	8008054 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f042 020e 	orr.w	r2, r2, #14
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	e00f      	b.n	8008074 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0204 	bic.w	r2, r2, #4
 8008062:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f042 020a 	orr.w	r2, r2, #10
 8008072:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	e005      	b.n	8008092 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800808e:	2302      	movs	r3, #2
 8008090:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d008      	beq.n	80080c6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2204      	movs	r2, #4
 80080b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e020      	b.n	8008108 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 020e 	bic.w	r2, r2, #14
 80080d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0201 	bic.w	r2, r2, #1
 80080e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ee:	2101      	movs	r1, #1
 80080f0:	fa01 f202 	lsl.w	r2, r1, r2
 80080f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008106:	7bfb      	ldrb	r3, [r7, #15]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	bc80      	pop	{r7}
 8008110:	4770      	bx	lr
	...

08008114 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b02      	cmp	r3, #2
 800812a:	d005      	beq.n	8008138 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2204      	movs	r2, #4
 8008130:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	73fb      	strb	r3, [r7, #15]
 8008136:	e0d6      	b.n	80082e6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 020e 	bic.w	r2, r2, #14
 8008146:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 0201 	bic.w	r2, r2, #1
 8008156:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	4b64      	ldr	r3, [pc, #400]	@ (80082f0 <HAL_DMA_Abort_IT+0x1dc>)
 8008160:	429a      	cmp	r2, r3
 8008162:	d958      	bls.n	8008216 <HAL_DMA_Abort_IT+0x102>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a62      	ldr	r2, [pc, #392]	@ (80082f4 <HAL_DMA_Abort_IT+0x1e0>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d04f      	beq.n	800820e <HAL_DMA_Abort_IT+0xfa>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a61      	ldr	r2, [pc, #388]	@ (80082f8 <HAL_DMA_Abort_IT+0x1e4>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d048      	beq.n	800820a <HAL_DMA_Abort_IT+0xf6>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a5f      	ldr	r2, [pc, #380]	@ (80082fc <HAL_DMA_Abort_IT+0x1e8>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d040      	beq.n	8008204 <HAL_DMA_Abort_IT+0xf0>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a5e      	ldr	r2, [pc, #376]	@ (8008300 <HAL_DMA_Abort_IT+0x1ec>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d038      	beq.n	80081fe <HAL_DMA_Abort_IT+0xea>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a5c      	ldr	r2, [pc, #368]	@ (8008304 <HAL_DMA_Abort_IT+0x1f0>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d030      	beq.n	80081f8 <HAL_DMA_Abort_IT+0xe4>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a5b      	ldr	r2, [pc, #364]	@ (8008308 <HAL_DMA_Abort_IT+0x1f4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d028      	beq.n	80081f2 <HAL_DMA_Abort_IT+0xde>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a52      	ldr	r2, [pc, #328]	@ (80082f0 <HAL_DMA_Abort_IT+0x1dc>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d020      	beq.n	80081ec <HAL_DMA_Abort_IT+0xd8>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a57      	ldr	r2, [pc, #348]	@ (800830c <HAL_DMA_Abort_IT+0x1f8>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d019      	beq.n	80081e8 <HAL_DMA_Abort_IT+0xd4>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a55      	ldr	r2, [pc, #340]	@ (8008310 <HAL_DMA_Abort_IT+0x1fc>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d012      	beq.n	80081e4 <HAL_DMA_Abort_IT+0xd0>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a54      	ldr	r2, [pc, #336]	@ (8008314 <HAL_DMA_Abort_IT+0x200>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d00a      	beq.n	80081de <HAL_DMA_Abort_IT+0xca>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a52      	ldr	r2, [pc, #328]	@ (8008318 <HAL_DMA_Abort_IT+0x204>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d102      	bne.n	80081d8 <HAL_DMA_Abort_IT+0xc4>
 80081d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80081d6:	e01b      	b.n	8008210 <HAL_DMA_Abort_IT+0xfc>
 80081d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80081dc:	e018      	b.n	8008210 <HAL_DMA_Abort_IT+0xfc>
 80081de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80081e2:	e015      	b.n	8008210 <HAL_DMA_Abort_IT+0xfc>
 80081e4:	2310      	movs	r3, #16
 80081e6:	e013      	b.n	8008210 <HAL_DMA_Abort_IT+0xfc>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e011      	b.n	8008210 <HAL_DMA_Abort_IT+0xfc>
 80081ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80081f0:	e00e      	b.n	8008210 <HAL_DMA_Abort_IT+0xfc>
 80081f2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80081f6:	e00b      	b.n	8008210 <HAL_DMA_Abort_IT+0xfc>
 80081f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80081fc:	e008      	b.n	8008210 <HAL_DMA_Abort_IT+0xfc>
 80081fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008202:	e005      	b.n	8008210 <HAL_DMA_Abort_IT+0xfc>
 8008204:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008208:	e002      	b.n	8008210 <HAL_DMA_Abort_IT+0xfc>
 800820a:	2310      	movs	r3, #16
 800820c:	e000      	b.n	8008210 <HAL_DMA_Abort_IT+0xfc>
 800820e:	2301      	movs	r3, #1
 8008210:	4a42      	ldr	r2, [pc, #264]	@ (800831c <HAL_DMA_Abort_IT+0x208>)
 8008212:	6053      	str	r3, [r2, #4]
 8008214:	e057      	b.n	80082c6 <HAL_DMA_Abort_IT+0x1b2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a36      	ldr	r2, [pc, #216]	@ (80082f4 <HAL_DMA_Abort_IT+0x1e0>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d04f      	beq.n	80082c0 <HAL_DMA_Abort_IT+0x1ac>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a34      	ldr	r2, [pc, #208]	@ (80082f8 <HAL_DMA_Abort_IT+0x1e4>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d048      	beq.n	80082bc <HAL_DMA_Abort_IT+0x1a8>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a33      	ldr	r2, [pc, #204]	@ (80082fc <HAL_DMA_Abort_IT+0x1e8>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d040      	beq.n	80082b6 <HAL_DMA_Abort_IT+0x1a2>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a31      	ldr	r2, [pc, #196]	@ (8008300 <HAL_DMA_Abort_IT+0x1ec>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d038      	beq.n	80082b0 <HAL_DMA_Abort_IT+0x19c>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a30      	ldr	r2, [pc, #192]	@ (8008304 <HAL_DMA_Abort_IT+0x1f0>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d030      	beq.n	80082aa <HAL_DMA_Abort_IT+0x196>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a2e      	ldr	r2, [pc, #184]	@ (8008308 <HAL_DMA_Abort_IT+0x1f4>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d028      	beq.n	80082a4 <HAL_DMA_Abort_IT+0x190>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a26      	ldr	r2, [pc, #152]	@ (80082f0 <HAL_DMA_Abort_IT+0x1dc>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d020      	beq.n	800829e <HAL_DMA_Abort_IT+0x18a>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a2a      	ldr	r2, [pc, #168]	@ (800830c <HAL_DMA_Abort_IT+0x1f8>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d019      	beq.n	800829a <HAL_DMA_Abort_IT+0x186>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a29      	ldr	r2, [pc, #164]	@ (8008310 <HAL_DMA_Abort_IT+0x1fc>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d012      	beq.n	8008296 <HAL_DMA_Abort_IT+0x182>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a27      	ldr	r2, [pc, #156]	@ (8008314 <HAL_DMA_Abort_IT+0x200>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d00a      	beq.n	8008290 <HAL_DMA_Abort_IT+0x17c>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a26      	ldr	r2, [pc, #152]	@ (8008318 <HAL_DMA_Abort_IT+0x204>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d102      	bne.n	800828a <HAL_DMA_Abort_IT+0x176>
 8008284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008288:	e01b      	b.n	80082c2 <HAL_DMA_Abort_IT+0x1ae>
 800828a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800828e:	e018      	b.n	80082c2 <HAL_DMA_Abort_IT+0x1ae>
 8008290:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008294:	e015      	b.n	80082c2 <HAL_DMA_Abort_IT+0x1ae>
 8008296:	2310      	movs	r3, #16
 8008298:	e013      	b.n	80082c2 <HAL_DMA_Abort_IT+0x1ae>
 800829a:	2301      	movs	r3, #1
 800829c:	e011      	b.n	80082c2 <HAL_DMA_Abort_IT+0x1ae>
 800829e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80082a2:	e00e      	b.n	80082c2 <HAL_DMA_Abort_IT+0x1ae>
 80082a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80082a8:	e00b      	b.n	80082c2 <HAL_DMA_Abort_IT+0x1ae>
 80082aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80082ae:	e008      	b.n	80082c2 <HAL_DMA_Abort_IT+0x1ae>
 80082b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80082b4:	e005      	b.n	80082c2 <HAL_DMA_Abort_IT+0x1ae>
 80082b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80082ba:	e002      	b.n	80082c2 <HAL_DMA_Abort_IT+0x1ae>
 80082bc:	2310      	movs	r3, #16
 80082be:	e000      	b.n	80082c2 <HAL_DMA_Abort_IT+0x1ae>
 80082c0:	2301      	movs	r3, #1
 80082c2:	4a17      	ldr	r2, [pc, #92]	@ (8008320 <HAL_DMA_Abort_IT+0x20c>)
 80082c4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	4798      	blx	r3
    } 
  }
  return status;
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	40020080 	.word	0x40020080
 80082f4:	40020008 	.word	0x40020008
 80082f8:	4002001c 	.word	0x4002001c
 80082fc:	40020030 	.word	0x40020030
 8008300:	40020044 	.word	0x40020044
 8008304:	40020058 	.word	0x40020058
 8008308:	4002006c 	.word	0x4002006c
 800830c:	40020408 	.word	0x40020408
 8008310:	4002041c 	.word	0x4002041c
 8008314:	40020430 	.word	0x40020430
 8008318:	40020444 	.word	0x40020444
 800831c:	40020400 	.word	0x40020400
 8008320:	40020000 	.word	0x40020000

08008324 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008340:	2204      	movs	r2, #4
 8008342:	409a      	lsls	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4013      	ands	r3, r2
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 80f1 	beq.w	8008530 <HAL_DMA_IRQHandler+0x20c>
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 80eb 	beq.w	8008530 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0320 	and.w	r3, r3, #32
 8008364:	2b00      	cmp	r3, #0
 8008366:	d107      	bne.n	8008378 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 0204 	bic.w	r2, r2, #4
 8008376:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	461a      	mov	r2, r3
 800837e:	4b5f      	ldr	r3, [pc, #380]	@ (80084fc <HAL_DMA_IRQHandler+0x1d8>)
 8008380:	429a      	cmp	r2, r3
 8008382:	d958      	bls.n	8008436 <HAL_DMA_IRQHandler+0x112>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a5d      	ldr	r2, [pc, #372]	@ (8008500 <HAL_DMA_IRQHandler+0x1dc>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d04f      	beq.n	800842e <HAL_DMA_IRQHandler+0x10a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a5c      	ldr	r2, [pc, #368]	@ (8008504 <HAL_DMA_IRQHandler+0x1e0>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d048      	beq.n	800842a <HAL_DMA_IRQHandler+0x106>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a5a      	ldr	r2, [pc, #360]	@ (8008508 <HAL_DMA_IRQHandler+0x1e4>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d040      	beq.n	8008424 <HAL_DMA_IRQHandler+0x100>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a59      	ldr	r2, [pc, #356]	@ (800850c <HAL_DMA_IRQHandler+0x1e8>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d038      	beq.n	800841e <HAL_DMA_IRQHandler+0xfa>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a57      	ldr	r2, [pc, #348]	@ (8008510 <HAL_DMA_IRQHandler+0x1ec>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d030      	beq.n	8008418 <HAL_DMA_IRQHandler+0xf4>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a56      	ldr	r2, [pc, #344]	@ (8008514 <HAL_DMA_IRQHandler+0x1f0>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d028      	beq.n	8008412 <HAL_DMA_IRQHandler+0xee>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a4d      	ldr	r2, [pc, #308]	@ (80084fc <HAL_DMA_IRQHandler+0x1d8>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d020      	beq.n	800840c <HAL_DMA_IRQHandler+0xe8>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a52      	ldr	r2, [pc, #328]	@ (8008518 <HAL_DMA_IRQHandler+0x1f4>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d019      	beq.n	8008408 <HAL_DMA_IRQHandler+0xe4>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a50      	ldr	r2, [pc, #320]	@ (800851c <HAL_DMA_IRQHandler+0x1f8>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d012      	beq.n	8008404 <HAL_DMA_IRQHandler+0xe0>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a4f      	ldr	r2, [pc, #316]	@ (8008520 <HAL_DMA_IRQHandler+0x1fc>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d00a      	beq.n	80083fe <HAL_DMA_IRQHandler+0xda>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a4d      	ldr	r2, [pc, #308]	@ (8008524 <HAL_DMA_IRQHandler+0x200>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d102      	bne.n	80083f8 <HAL_DMA_IRQHandler+0xd4>
 80083f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80083f6:	e01b      	b.n	8008430 <HAL_DMA_IRQHandler+0x10c>
 80083f8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80083fc:	e018      	b.n	8008430 <HAL_DMA_IRQHandler+0x10c>
 80083fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008402:	e015      	b.n	8008430 <HAL_DMA_IRQHandler+0x10c>
 8008404:	2340      	movs	r3, #64	@ 0x40
 8008406:	e013      	b.n	8008430 <HAL_DMA_IRQHandler+0x10c>
 8008408:	2304      	movs	r3, #4
 800840a:	e011      	b.n	8008430 <HAL_DMA_IRQHandler+0x10c>
 800840c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008410:	e00e      	b.n	8008430 <HAL_DMA_IRQHandler+0x10c>
 8008412:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008416:	e00b      	b.n	8008430 <HAL_DMA_IRQHandler+0x10c>
 8008418:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800841c:	e008      	b.n	8008430 <HAL_DMA_IRQHandler+0x10c>
 800841e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008422:	e005      	b.n	8008430 <HAL_DMA_IRQHandler+0x10c>
 8008424:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008428:	e002      	b.n	8008430 <HAL_DMA_IRQHandler+0x10c>
 800842a:	2340      	movs	r3, #64	@ 0x40
 800842c:	e000      	b.n	8008430 <HAL_DMA_IRQHandler+0x10c>
 800842e:	2304      	movs	r3, #4
 8008430:	4a3d      	ldr	r2, [pc, #244]	@ (8008528 <HAL_DMA_IRQHandler+0x204>)
 8008432:	6053      	str	r3, [r2, #4]
 8008434:	e057      	b.n	80084e6 <HAL_DMA_IRQHandler+0x1c2>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a31      	ldr	r2, [pc, #196]	@ (8008500 <HAL_DMA_IRQHandler+0x1dc>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d04f      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x1bc>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a2f      	ldr	r2, [pc, #188]	@ (8008504 <HAL_DMA_IRQHandler+0x1e0>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d048      	beq.n	80084dc <HAL_DMA_IRQHandler+0x1b8>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a2e      	ldr	r2, [pc, #184]	@ (8008508 <HAL_DMA_IRQHandler+0x1e4>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d040      	beq.n	80084d6 <HAL_DMA_IRQHandler+0x1b2>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a2c      	ldr	r2, [pc, #176]	@ (800850c <HAL_DMA_IRQHandler+0x1e8>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d038      	beq.n	80084d0 <HAL_DMA_IRQHandler+0x1ac>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a2b      	ldr	r2, [pc, #172]	@ (8008510 <HAL_DMA_IRQHandler+0x1ec>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d030      	beq.n	80084ca <HAL_DMA_IRQHandler+0x1a6>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a29      	ldr	r2, [pc, #164]	@ (8008514 <HAL_DMA_IRQHandler+0x1f0>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d028      	beq.n	80084c4 <HAL_DMA_IRQHandler+0x1a0>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a21      	ldr	r2, [pc, #132]	@ (80084fc <HAL_DMA_IRQHandler+0x1d8>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d020      	beq.n	80084be <HAL_DMA_IRQHandler+0x19a>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a25      	ldr	r2, [pc, #148]	@ (8008518 <HAL_DMA_IRQHandler+0x1f4>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d019      	beq.n	80084ba <HAL_DMA_IRQHandler+0x196>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a24      	ldr	r2, [pc, #144]	@ (800851c <HAL_DMA_IRQHandler+0x1f8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d012      	beq.n	80084b6 <HAL_DMA_IRQHandler+0x192>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a22      	ldr	r2, [pc, #136]	@ (8008520 <HAL_DMA_IRQHandler+0x1fc>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d00a      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x18c>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a21      	ldr	r2, [pc, #132]	@ (8008524 <HAL_DMA_IRQHandler+0x200>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d102      	bne.n	80084aa <HAL_DMA_IRQHandler+0x186>
 80084a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80084a8:	e01b      	b.n	80084e2 <HAL_DMA_IRQHandler+0x1be>
 80084aa:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80084ae:	e018      	b.n	80084e2 <HAL_DMA_IRQHandler+0x1be>
 80084b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084b4:	e015      	b.n	80084e2 <HAL_DMA_IRQHandler+0x1be>
 80084b6:	2340      	movs	r3, #64	@ 0x40
 80084b8:	e013      	b.n	80084e2 <HAL_DMA_IRQHandler+0x1be>
 80084ba:	2304      	movs	r3, #4
 80084bc:	e011      	b.n	80084e2 <HAL_DMA_IRQHandler+0x1be>
 80084be:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80084c2:	e00e      	b.n	80084e2 <HAL_DMA_IRQHandler+0x1be>
 80084c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80084c8:	e00b      	b.n	80084e2 <HAL_DMA_IRQHandler+0x1be>
 80084ca:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80084ce:	e008      	b.n	80084e2 <HAL_DMA_IRQHandler+0x1be>
 80084d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80084d4:	e005      	b.n	80084e2 <HAL_DMA_IRQHandler+0x1be>
 80084d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084da:	e002      	b.n	80084e2 <HAL_DMA_IRQHandler+0x1be>
 80084dc:	2340      	movs	r3, #64	@ 0x40
 80084de:	e000      	b.n	80084e2 <HAL_DMA_IRQHandler+0x1be>
 80084e0:	2304      	movs	r3, #4
 80084e2:	4a12      	ldr	r2, [pc, #72]	@ (800852c <HAL_DMA_IRQHandler+0x208>)
 80084e4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 8136 	beq.w	800875c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80084f8:	e130      	b.n	800875c <HAL_DMA_IRQHandler+0x438>
 80084fa:	bf00      	nop
 80084fc:	40020080 	.word	0x40020080
 8008500:	40020008 	.word	0x40020008
 8008504:	4002001c 	.word	0x4002001c
 8008508:	40020030 	.word	0x40020030
 800850c:	40020044 	.word	0x40020044
 8008510:	40020058 	.word	0x40020058
 8008514:	4002006c 	.word	0x4002006c
 8008518:	40020408 	.word	0x40020408
 800851c:	4002041c 	.word	0x4002041c
 8008520:	40020430 	.word	0x40020430
 8008524:	40020444 	.word	0x40020444
 8008528:	40020400 	.word	0x40020400
 800852c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008534:	2202      	movs	r2, #2
 8008536:	409a      	lsls	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4013      	ands	r3, r2
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 80dd 	beq.w	80086fc <HAL_DMA_IRQHandler+0x3d8>
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	f003 0302 	and.w	r3, r3, #2
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 80d7 	beq.w	80086fc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0320 	and.w	r3, r3, #32
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10b      	bne.n	8008574 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 020a 	bic.w	r2, r2, #10
 800856a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	461a      	mov	r2, r3
 800857a:	4b7b      	ldr	r3, [pc, #492]	@ (8008768 <HAL_DMA_IRQHandler+0x444>)
 800857c:	429a      	cmp	r2, r3
 800857e:	d958      	bls.n	8008632 <HAL_DMA_IRQHandler+0x30e>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a79      	ldr	r2, [pc, #484]	@ (800876c <HAL_DMA_IRQHandler+0x448>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d04f      	beq.n	800862a <HAL_DMA_IRQHandler+0x306>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a78      	ldr	r2, [pc, #480]	@ (8008770 <HAL_DMA_IRQHandler+0x44c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d048      	beq.n	8008626 <HAL_DMA_IRQHandler+0x302>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a76      	ldr	r2, [pc, #472]	@ (8008774 <HAL_DMA_IRQHandler+0x450>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d040      	beq.n	8008620 <HAL_DMA_IRQHandler+0x2fc>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a75      	ldr	r2, [pc, #468]	@ (8008778 <HAL_DMA_IRQHandler+0x454>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d038      	beq.n	800861a <HAL_DMA_IRQHandler+0x2f6>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a73      	ldr	r2, [pc, #460]	@ (800877c <HAL_DMA_IRQHandler+0x458>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d030      	beq.n	8008614 <HAL_DMA_IRQHandler+0x2f0>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a72      	ldr	r2, [pc, #456]	@ (8008780 <HAL_DMA_IRQHandler+0x45c>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d028      	beq.n	800860e <HAL_DMA_IRQHandler+0x2ea>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a69      	ldr	r2, [pc, #420]	@ (8008768 <HAL_DMA_IRQHandler+0x444>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d020      	beq.n	8008608 <HAL_DMA_IRQHandler+0x2e4>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a6e      	ldr	r2, [pc, #440]	@ (8008784 <HAL_DMA_IRQHandler+0x460>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d019      	beq.n	8008604 <HAL_DMA_IRQHandler+0x2e0>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a6c      	ldr	r2, [pc, #432]	@ (8008788 <HAL_DMA_IRQHandler+0x464>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d012      	beq.n	8008600 <HAL_DMA_IRQHandler+0x2dc>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a6b      	ldr	r2, [pc, #428]	@ (800878c <HAL_DMA_IRQHandler+0x468>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d00a      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2d6>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a69      	ldr	r2, [pc, #420]	@ (8008790 <HAL_DMA_IRQHandler+0x46c>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d102      	bne.n	80085f4 <HAL_DMA_IRQHandler+0x2d0>
 80085ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80085f2:	e01b      	b.n	800862c <HAL_DMA_IRQHandler+0x308>
 80085f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80085f8:	e018      	b.n	800862c <HAL_DMA_IRQHandler+0x308>
 80085fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085fe:	e015      	b.n	800862c <HAL_DMA_IRQHandler+0x308>
 8008600:	2320      	movs	r3, #32
 8008602:	e013      	b.n	800862c <HAL_DMA_IRQHandler+0x308>
 8008604:	2302      	movs	r3, #2
 8008606:	e011      	b.n	800862c <HAL_DMA_IRQHandler+0x308>
 8008608:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800860c:	e00e      	b.n	800862c <HAL_DMA_IRQHandler+0x308>
 800860e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008612:	e00b      	b.n	800862c <HAL_DMA_IRQHandler+0x308>
 8008614:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008618:	e008      	b.n	800862c <HAL_DMA_IRQHandler+0x308>
 800861a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800861e:	e005      	b.n	800862c <HAL_DMA_IRQHandler+0x308>
 8008620:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008624:	e002      	b.n	800862c <HAL_DMA_IRQHandler+0x308>
 8008626:	2320      	movs	r3, #32
 8008628:	e000      	b.n	800862c <HAL_DMA_IRQHandler+0x308>
 800862a:	2302      	movs	r3, #2
 800862c:	4a59      	ldr	r2, [pc, #356]	@ (8008794 <HAL_DMA_IRQHandler+0x470>)
 800862e:	6053      	str	r3, [r2, #4]
 8008630:	e057      	b.n	80086e2 <HAL_DMA_IRQHandler+0x3be>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a4d      	ldr	r2, [pc, #308]	@ (800876c <HAL_DMA_IRQHandler+0x448>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d04f      	beq.n	80086dc <HAL_DMA_IRQHandler+0x3b8>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a4b      	ldr	r2, [pc, #300]	@ (8008770 <HAL_DMA_IRQHandler+0x44c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d048      	beq.n	80086d8 <HAL_DMA_IRQHandler+0x3b4>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a4a      	ldr	r2, [pc, #296]	@ (8008774 <HAL_DMA_IRQHandler+0x450>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d040      	beq.n	80086d2 <HAL_DMA_IRQHandler+0x3ae>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a48      	ldr	r2, [pc, #288]	@ (8008778 <HAL_DMA_IRQHandler+0x454>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d038      	beq.n	80086cc <HAL_DMA_IRQHandler+0x3a8>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a47      	ldr	r2, [pc, #284]	@ (800877c <HAL_DMA_IRQHandler+0x458>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d030      	beq.n	80086c6 <HAL_DMA_IRQHandler+0x3a2>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a45      	ldr	r2, [pc, #276]	@ (8008780 <HAL_DMA_IRQHandler+0x45c>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d028      	beq.n	80086c0 <HAL_DMA_IRQHandler+0x39c>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a3d      	ldr	r2, [pc, #244]	@ (8008768 <HAL_DMA_IRQHandler+0x444>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d020      	beq.n	80086ba <HAL_DMA_IRQHandler+0x396>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a41      	ldr	r2, [pc, #260]	@ (8008784 <HAL_DMA_IRQHandler+0x460>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d019      	beq.n	80086b6 <HAL_DMA_IRQHandler+0x392>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a40      	ldr	r2, [pc, #256]	@ (8008788 <HAL_DMA_IRQHandler+0x464>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d012      	beq.n	80086b2 <HAL_DMA_IRQHandler+0x38e>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a3e      	ldr	r2, [pc, #248]	@ (800878c <HAL_DMA_IRQHandler+0x468>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d00a      	beq.n	80086ac <HAL_DMA_IRQHandler+0x388>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a3d      	ldr	r2, [pc, #244]	@ (8008790 <HAL_DMA_IRQHandler+0x46c>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d102      	bne.n	80086a6 <HAL_DMA_IRQHandler+0x382>
 80086a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80086a4:	e01b      	b.n	80086de <HAL_DMA_IRQHandler+0x3ba>
 80086a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80086aa:	e018      	b.n	80086de <HAL_DMA_IRQHandler+0x3ba>
 80086ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086b0:	e015      	b.n	80086de <HAL_DMA_IRQHandler+0x3ba>
 80086b2:	2320      	movs	r3, #32
 80086b4:	e013      	b.n	80086de <HAL_DMA_IRQHandler+0x3ba>
 80086b6:	2302      	movs	r3, #2
 80086b8:	e011      	b.n	80086de <HAL_DMA_IRQHandler+0x3ba>
 80086ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80086be:	e00e      	b.n	80086de <HAL_DMA_IRQHandler+0x3ba>
 80086c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80086c4:	e00b      	b.n	80086de <HAL_DMA_IRQHandler+0x3ba>
 80086c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80086ca:	e008      	b.n	80086de <HAL_DMA_IRQHandler+0x3ba>
 80086cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80086d0:	e005      	b.n	80086de <HAL_DMA_IRQHandler+0x3ba>
 80086d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086d6:	e002      	b.n	80086de <HAL_DMA_IRQHandler+0x3ba>
 80086d8:	2320      	movs	r3, #32
 80086da:	e000      	b.n	80086de <HAL_DMA_IRQHandler+0x3ba>
 80086dc:	2302      	movs	r3, #2
 80086de:	4a2e      	ldr	r2, [pc, #184]	@ (8008798 <HAL_DMA_IRQHandler+0x474>)
 80086e0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d034      	beq.n	800875c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80086fa:	e02f      	b.n	800875c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008700:	2208      	movs	r2, #8
 8008702:	409a      	lsls	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4013      	ands	r3, r2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d028      	beq.n	800875e <HAL_DMA_IRQHandler+0x43a>
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f003 0308 	and.w	r3, r3, #8
 8008712:	2b00      	cmp	r3, #0
 8008714:	d023      	beq.n	800875e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 020e 	bic.w	r2, r2, #14
 8008724:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800872e:	2101      	movs	r1, #1
 8008730:	fa01 f202 	lsl.w	r2, r1, r2
 8008734:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008750:	2b00      	cmp	r3, #0
 8008752:	d004      	beq.n	800875e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	4798      	blx	r3
    }
  }
  return;
 800875c:	bf00      	nop
 800875e:	bf00      	nop
}
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	40020080 	.word	0x40020080
 800876c:	40020008 	.word	0x40020008
 8008770:	4002001c 	.word	0x4002001c
 8008774:	40020030 	.word	0x40020030
 8008778:	40020044 	.word	0x40020044
 800877c:	40020058 	.word	0x40020058
 8008780:	4002006c 	.word	0x4002006c
 8008784:	40020408 	.word	0x40020408
 8008788:	4002041c 	.word	0x4002041c
 800878c:	40020430 	.word	0x40020430
 8008790:	40020444 	.word	0x40020444
 8008794:	40020400 	.word	0x40020400
 8008798:	40020000 	.word	0x40020000

0800879c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b2:	2101      	movs	r1, #1
 80087b4:	fa01 f202 	lsl.w	r2, r1, r2
 80087b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	2b10      	cmp	r3, #16
 80087c8:	d108      	bne.n	80087dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80087da:	e007      	b.n	80087ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	60da      	str	r2, [r3, #12]
}
 80087ec:	bf00      	nop
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bc80      	pop	{r7}
 80087f4:	4770      	bx	lr
	...

080087f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b08b      	sub	sp, #44	@ 0x2c
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008802:	2300      	movs	r3, #0
 8008804:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008806:	2300      	movs	r3, #0
 8008808:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800880a:	e179      	b.n	8008b00 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800880c:	2201      	movs	r2, #1
 800880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008810:	fa02 f303 	lsl.w	r3, r2, r3
 8008814:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69fa      	ldr	r2, [r7, #28]
 800881c:	4013      	ands	r3, r2
 800881e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	429a      	cmp	r2, r3
 8008826:	f040 8168 	bne.w	8008afa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	4a96      	ldr	r2, [pc, #600]	@ (8008a88 <HAL_GPIO_Init+0x290>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d05e      	beq.n	80088f2 <HAL_GPIO_Init+0xfa>
 8008834:	4a94      	ldr	r2, [pc, #592]	@ (8008a88 <HAL_GPIO_Init+0x290>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d875      	bhi.n	8008926 <HAL_GPIO_Init+0x12e>
 800883a:	4a94      	ldr	r2, [pc, #592]	@ (8008a8c <HAL_GPIO_Init+0x294>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d058      	beq.n	80088f2 <HAL_GPIO_Init+0xfa>
 8008840:	4a92      	ldr	r2, [pc, #584]	@ (8008a8c <HAL_GPIO_Init+0x294>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d86f      	bhi.n	8008926 <HAL_GPIO_Init+0x12e>
 8008846:	4a92      	ldr	r2, [pc, #584]	@ (8008a90 <HAL_GPIO_Init+0x298>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d052      	beq.n	80088f2 <HAL_GPIO_Init+0xfa>
 800884c:	4a90      	ldr	r2, [pc, #576]	@ (8008a90 <HAL_GPIO_Init+0x298>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d869      	bhi.n	8008926 <HAL_GPIO_Init+0x12e>
 8008852:	4a90      	ldr	r2, [pc, #576]	@ (8008a94 <HAL_GPIO_Init+0x29c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d04c      	beq.n	80088f2 <HAL_GPIO_Init+0xfa>
 8008858:	4a8e      	ldr	r2, [pc, #568]	@ (8008a94 <HAL_GPIO_Init+0x29c>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d863      	bhi.n	8008926 <HAL_GPIO_Init+0x12e>
 800885e:	4a8e      	ldr	r2, [pc, #568]	@ (8008a98 <HAL_GPIO_Init+0x2a0>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d046      	beq.n	80088f2 <HAL_GPIO_Init+0xfa>
 8008864:	4a8c      	ldr	r2, [pc, #560]	@ (8008a98 <HAL_GPIO_Init+0x2a0>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d85d      	bhi.n	8008926 <HAL_GPIO_Init+0x12e>
 800886a:	2b12      	cmp	r3, #18
 800886c:	d82a      	bhi.n	80088c4 <HAL_GPIO_Init+0xcc>
 800886e:	2b12      	cmp	r3, #18
 8008870:	d859      	bhi.n	8008926 <HAL_GPIO_Init+0x12e>
 8008872:	a201      	add	r2, pc, #4	@ (adr r2, 8008878 <HAL_GPIO_Init+0x80>)
 8008874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008878:	080088f3 	.word	0x080088f3
 800887c:	080088cd 	.word	0x080088cd
 8008880:	080088df 	.word	0x080088df
 8008884:	08008921 	.word	0x08008921
 8008888:	08008927 	.word	0x08008927
 800888c:	08008927 	.word	0x08008927
 8008890:	08008927 	.word	0x08008927
 8008894:	08008927 	.word	0x08008927
 8008898:	08008927 	.word	0x08008927
 800889c:	08008927 	.word	0x08008927
 80088a0:	08008927 	.word	0x08008927
 80088a4:	08008927 	.word	0x08008927
 80088a8:	08008927 	.word	0x08008927
 80088ac:	08008927 	.word	0x08008927
 80088b0:	08008927 	.word	0x08008927
 80088b4:	08008927 	.word	0x08008927
 80088b8:	08008927 	.word	0x08008927
 80088bc:	080088d5 	.word	0x080088d5
 80088c0:	080088e9 	.word	0x080088e9
 80088c4:	4a75      	ldr	r2, [pc, #468]	@ (8008a9c <HAL_GPIO_Init+0x2a4>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d013      	beq.n	80088f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80088ca:	e02c      	b.n	8008926 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	623b      	str	r3, [r7, #32]
          break;
 80088d2:	e029      	b.n	8008928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	3304      	adds	r3, #4
 80088da:	623b      	str	r3, [r7, #32]
          break;
 80088dc:	e024      	b.n	8008928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	3308      	adds	r3, #8
 80088e4:	623b      	str	r3, [r7, #32]
          break;
 80088e6:	e01f      	b.n	8008928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	330c      	adds	r3, #12
 80088ee:	623b      	str	r3, [r7, #32]
          break;
 80088f0:	e01a      	b.n	8008928 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d102      	bne.n	8008900 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80088fa:	2304      	movs	r3, #4
 80088fc:	623b      	str	r3, [r7, #32]
          break;
 80088fe:	e013      	b.n	8008928 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d105      	bne.n	8008914 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008908:	2308      	movs	r3, #8
 800890a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	69fa      	ldr	r2, [r7, #28]
 8008910:	611a      	str	r2, [r3, #16]
          break;
 8008912:	e009      	b.n	8008928 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008914:	2308      	movs	r3, #8
 8008916:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	69fa      	ldr	r2, [r7, #28]
 800891c:	615a      	str	r2, [r3, #20]
          break;
 800891e:	e003      	b.n	8008928 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008920:	2300      	movs	r3, #0
 8008922:	623b      	str	r3, [r7, #32]
          break;
 8008924:	e000      	b.n	8008928 <HAL_GPIO_Init+0x130>
          break;
 8008926:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	2bff      	cmp	r3, #255	@ 0xff
 800892c:	d801      	bhi.n	8008932 <HAL_GPIO_Init+0x13a>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	e001      	b.n	8008936 <HAL_GPIO_Init+0x13e>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	3304      	adds	r3, #4
 8008936:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	2bff      	cmp	r3, #255	@ 0xff
 800893c:	d802      	bhi.n	8008944 <HAL_GPIO_Init+0x14c>
 800893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	e002      	b.n	800894a <HAL_GPIO_Init+0x152>
 8008944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008946:	3b08      	subs	r3, #8
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	210f      	movs	r1, #15
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	fa01 f303 	lsl.w	r3, r1, r3
 8008958:	43db      	mvns	r3, r3
 800895a:	401a      	ands	r2, r3
 800895c:	6a39      	ldr	r1, [r7, #32]
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	fa01 f303 	lsl.w	r3, r1, r3
 8008964:	431a      	orrs	r2, r3
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 80c1 	beq.w	8008afa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008978:	4b49      	ldr	r3, [pc, #292]	@ (8008aa0 <HAL_GPIO_Init+0x2a8>)
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	4a48      	ldr	r2, [pc, #288]	@ (8008aa0 <HAL_GPIO_Init+0x2a8>)
 800897e:	f043 0301 	orr.w	r3, r3, #1
 8008982:	6193      	str	r3, [r2, #24]
 8008984:	4b46      	ldr	r3, [pc, #280]	@ (8008aa0 <HAL_GPIO_Init+0x2a8>)
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	60bb      	str	r3, [r7, #8]
 800898e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008990:	4a44      	ldr	r2, [pc, #272]	@ (8008aa4 <HAL_GPIO_Init+0x2ac>)
 8008992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008994:	089b      	lsrs	r3, r3, #2
 8008996:	3302      	adds	r3, #2
 8008998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800899c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	f003 0303 	and.w	r3, r3, #3
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	220f      	movs	r2, #15
 80089a8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ac:	43db      	mvns	r3, r3
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	4013      	ands	r3, r2
 80089b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a3c      	ldr	r2, [pc, #240]	@ (8008aa8 <HAL_GPIO_Init+0x2b0>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d01f      	beq.n	80089fc <HAL_GPIO_Init+0x204>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a3b      	ldr	r2, [pc, #236]	@ (8008aac <HAL_GPIO_Init+0x2b4>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d019      	beq.n	80089f8 <HAL_GPIO_Init+0x200>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a3a      	ldr	r2, [pc, #232]	@ (8008ab0 <HAL_GPIO_Init+0x2b8>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d013      	beq.n	80089f4 <HAL_GPIO_Init+0x1fc>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a39      	ldr	r2, [pc, #228]	@ (8008ab4 <HAL_GPIO_Init+0x2bc>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d00d      	beq.n	80089f0 <HAL_GPIO_Init+0x1f8>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a38      	ldr	r2, [pc, #224]	@ (8008ab8 <HAL_GPIO_Init+0x2c0>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d007      	beq.n	80089ec <HAL_GPIO_Init+0x1f4>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a37      	ldr	r2, [pc, #220]	@ (8008abc <HAL_GPIO_Init+0x2c4>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d101      	bne.n	80089e8 <HAL_GPIO_Init+0x1f0>
 80089e4:	2305      	movs	r3, #5
 80089e6:	e00a      	b.n	80089fe <HAL_GPIO_Init+0x206>
 80089e8:	2306      	movs	r3, #6
 80089ea:	e008      	b.n	80089fe <HAL_GPIO_Init+0x206>
 80089ec:	2304      	movs	r3, #4
 80089ee:	e006      	b.n	80089fe <HAL_GPIO_Init+0x206>
 80089f0:	2303      	movs	r3, #3
 80089f2:	e004      	b.n	80089fe <HAL_GPIO_Init+0x206>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e002      	b.n	80089fe <HAL_GPIO_Init+0x206>
 80089f8:	2301      	movs	r3, #1
 80089fa:	e000      	b.n	80089fe <HAL_GPIO_Init+0x206>
 80089fc:	2300      	movs	r3, #0
 80089fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a00:	f002 0203 	and.w	r2, r2, #3
 8008a04:	0092      	lsls	r2, r2, #2
 8008a06:	4093      	lsls	r3, r2
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008a0e:	4925      	ldr	r1, [pc, #148]	@ (8008aa4 <HAL_GPIO_Init+0x2ac>)
 8008a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a12:	089b      	lsrs	r3, r3, #2
 8008a14:	3302      	adds	r3, #2
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d006      	beq.n	8008a36 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008a28:	4b25      	ldr	r3, [pc, #148]	@ (8008ac0 <HAL_GPIO_Init+0x2c8>)
 8008a2a:	689a      	ldr	r2, [r3, #8]
 8008a2c:	4924      	ldr	r1, [pc, #144]	@ (8008ac0 <HAL_GPIO_Init+0x2c8>)
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	608b      	str	r3, [r1, #8]
 8008a34:	e006      	b.n	8008a44 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008a36:	4b22      	ldr	r3, [pc, #136]	@ (8008ac0 <HAL_GPIO_Init+0x2c8>)
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	43db      	mvns	r3, r3
 8008a3e:	4920      	ldr	r1, [pc, #128]	@ (8008ac0 <HAL_GPIO_Init+0x2c8>)
 8008a40:	4013      	ands	r3, r2
 8008a42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d006      	beq.n	8008a5e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008a50:	4b1b      	ldr	r3, [pc, #108]	@ (8008ac0 <HAL_GPIO_Init+0x2c8>)
 8008a52:	68da      	ldr	r2, [r3, #12]
 8008a54:	491a      	ldr	r1, [pc, #104]	@ (8008ac0 <HAL_GPIO_Init+0x2c8>)
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	60cb      	str	r3, [r1, #12]
 8008a5c:	e006      	b.n	8008a6c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008a5e:	4b18      	ldr	r3, [pc, #96]	@ (8008ac0 <HAL_GPIO_Init+0x2c8>)
 8008a60:	68da      	ldr	r2, [r3, #12]
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	43db      	mvns	r3, r3
 8008a66:	4916      	ldr	r1, [pc, #88]	@ (8008ac0 <HAL_GPIO_Init+0x2c8>)
 8008a68:	4013      	ands	r3, r2
 8008a6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d025      	beq.n	8008ac4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008a78:	4b11      	ldr	r3, [pc, #68]	@ (8008ac0 <HAL_GPIO_Init+0x2c8>)
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	4910      	ldr	r1, [pc, #64]	@ (8008ac0 <HAL_GPIO_Init+0x2c8>)
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	604b      	str	r3, [r1, #4]
 8008a84:	e025      	b.n	8008ad2 <HAL_GPIO_Init+0x2da>
 8008a86:	bf00      	nop
 8008a88:	10320000 	.word	0x10320000
 8008a8c:	10310000 	.word	0x10310000
 8008a90:	10220000 	.word	0x10220000
 8008a94:	10210000 	.word	0x10210000
 8008a98:	10120000 	.word	0x10120000
 8008a9c:	10110000 	.word	0x10110000
 8008aa0:	40021000 	.word	0x40021000
 8008aa4:	40010000 	.word	0x40010000
 8008aa8:	40010800 	.word	0x40010800
 8008aac:	40010c00 	.word	0x40010c00
 8008ab0:	40011000 	.word	0x40011000
 8008ab4:	40011400 	.word	0x40011400
 8008ab8:	40011800 	.word	0x40011800
 8008abc:	40011c00 	.word	0x40011c00
 8008ac0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008ac4:	4b15      	ldr	r3, [pc, #84]	@ (8008b1c <HAL_GPIO_Init+0x324>)
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	43db      	mvns	r3, r3
 8008acc:	4913      	ldr	r1, [pc, #76]	@ (8008b1c <HAL_GPIO_Init+0x324>)
 8008ace:	4013      	ands	r3, r2
 8008ad0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d006      	beq.n	8008aec <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008ade:	4b0f      	ldr	r3, [pc, #60]	@ (8008b1c <HAL_GPIO_Init+0x324>)
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	490e      	ldr	r1, [pc, #56]	@ (8008b1c <HAL_GPIO_Init+0x324>)
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	600b      	str	r3, [r1, #0]
 8008aea:	e006      	b.n	8008afa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008aec:	4b0b      	ldr	r3, [pc, #44]	@ (8008b1c <HAL_GPIO_Init+0x324>)
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	43db      	mvns	r3, r3
 8008af4:	4909      	ldr	r1, [pc, #36]	@ (8008b1c <HAL_GPIO_Init+0x324>)
 8008af6:	4013      	ands	r3, r2
 8008af8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	3301      	adds	r3, #1
 8008afe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b06:	fa22 f303 	lsr.w	r3, r2, r3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f47f ae7e 	bne.w	800880c <HAL_GPIO_Init+0x14>
  }
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	372c      	adds	r7, #44	@ 0x2c
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bc80      	pop	{r7}
 8008b1a:	4770      	bx	lr
 8008b1c:	40010400 	.word	0x40010400

08008b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	689a      	ldr	r2, [r3, #8]
 8008b30:	887b      	ldrh	r3, [r7, #2]
 8008b32:	4013      	ands	r3, r2
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	73fb      	strb	r3, [r7, #15]
 8008b3c:	e001      	b.n	8008b42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc80      	pop	{r7}
 8008b4c:	4770      	bx	lr

08008b4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	460b      	mov	r3, r1
 8008b58:	807b      	strh	r3, [r7, #2]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b5e:	787b      	ldrb	r3, [r7, #1]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d003      	beq.n	8008b6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b64:	887a      	ldrh	r2, [r7, #2]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008b6a:	e003      	b.n	8008b74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008b6c:	887b      	ldrh	r3, [r7, #2]
 8008b6e:	041a      	lsls	r2, r3, #16
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	611a      	str	r2, [r3, #16]
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bc80      	pop	{r7}
 8008b7c:	4770      	bx	lr

08008b7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b085      	sub	sp, #20
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	460b      	mov	r3, r1
 8008b88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008b90:	887a      	ldrh	r2, [r7, #2]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	4013      	ands	r3, r2
 8008b96:	041a      	lsls	r2, r3, #16
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	43d9      	mvns	r1, r3
 8008b9c:	887b      	ldrh	r3, [r7, #2]
 8008b9e:	400b      	ands	r3, r1
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	611a      	str	r2, [r3, #16]
}
 8008ba6:	bf00      	nop
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bc80      	pop	{r7}
 8008bae:	4770      	bx	lr

08008bb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e12b      	b.n	8008e1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d106      	bne.n	8008bdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7fc fe56 	bl	8005888 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2224      	movs	r2, #36	@ 0x24
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f022 0201 	bic.w	r2, r2, #1
 8008bf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008c14:	f002 f9d8 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 8008c18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	4a81      	ldr	r2, [pc, #516]	@ (8008e24 <HAL_I2C_Init+0x274>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d807      	bhi.n	8008c34 <HAL_I2C_Init+0x84>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	4a80      	ldr	r2, [pc, #512]	@ (8008e28 <HAL_I2C_Init+0x278>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	bf94      	ite	ls
 8008c2c:	2301      	movls	r3, #1
 8008c2e:	2300      	movhi	r3, #0
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	e006      	b.n	8008c42 <HAL_I2C_Init+0x92>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	4a7d      	ldr	r2, [pc, #500]	@ (8008e2c <HAL_I2C_Init+0x27c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	bf94      	ite	ls
 8008c3c:	2301      	movls	r3, #1
 8008c3e:	2300      	movhi	r3, #0
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e0e7      	b.n	8008e1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	4a78      	ldr	r2, [pc, #480]	@ (8008e30 <HAL_I2C_Init+0x280>)
 8008c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c52:	0c9b      	lsrs	r3, r3, #18
 8008c54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
 8008c70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	4a6a      	ldr	r2, [pc, #424]	@ (8008e24 <HAL_I2C_Init+0x274>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d802      	bhi.n	8008c84 <HAL_I2C_Init+0xd4>
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	3301      	adds	r3, #1
 8008c82:	e009      	b.n	8008c98 <HAL_I2C_Init+0xe8>
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008c8a:	fb02 f303 	mul.w	r3, r2, r3
 8008c8e:	4a69      	ldr	r2, [pc, #420]	@ (8008e34 <HAL_I2C_Init+0x284>)
 8008c90:	fba2 2303 	umull	r2, r3, r2, r3
 8008c94:	099b      	lsrs	r3, r3, #6
 8008c96:	3301      	adds	r3, #1
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	6812      	ldr	r2, [r2, #0]
 8008c9c:	430b      	orrs	r3, r1
 8008c9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008caa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	495c      	ldr	r1, [pc, #368]	@ (8008e24 <HAL_I2C_Init+0x274>)
 8008cb4:	428b      	cmp	r3, r1
 8008cb6:	d819      	bhi.n	8008cec <HAL_I2C_Init+0x13c>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	1e59      	subs	r1, r3, #1
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008cc6:	1c59      	adds	r1, r3, #1
 8008cc8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008ccc:	400b      	ands	r3, r1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00a      	beq.n	8008ce8 <HAL_I2C_Init+0x138>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	1e59      	subs	r1, r3, #1
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	005b      	lsls	r3, r3, #1
 8008cdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ce6:	e051      	b.n	8008d8c <HAL_I2C_Init+0x1dc>
 8008ce8:	2304      	movs	r3, #4
 8008cea:	e04f      	b.n	8008d8c <HAL_I2C_Init+0x1dc>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d111      	bne.n	8008d18 <HAL_I2C_Init+0x168>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	1e58      	subs	r0, r3, #1
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6859      	ldr	r1, [r3, #4]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	005b      	lsls	r3, r3, #1
 8008d00:	440b      	add	r3, r1
 8008d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d06:	3301      	adds	r3, #1
 8008d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	bf0c      	ite	eq
 8008d10:	2301      	moveq	r3, #1
 8008d12:	2300      	movne	r3, #0
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	e012      	b.n	8008d3e <HAL_I2C_Init+0x18e>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	1e58      	subs	r0, r3, #1
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6859      	ldr	r1, [r3, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	440b      	add	r3, r1
 8008d26:	0099      	lsls	r1, r3, #2
 8008d28:	440b      	add	r3, r1
 8008d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d2e:	3301      	adds	r3, #1
 8008d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	bf0c      	ite	eq
 8008d38:	2301      	moveq	r3, #1
 8008d3a:	2300      	movne	r3, #0
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <HAL_I2C_Init+0x196>
 8008d42:	2301      	movs	r3, #1
 8008d44:	e022      	b.n	8008d8c <HAL_I2C_Init+0x1dc>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10e      	bne.n	8008d6c <HAL_I2C_Init+0x1bc>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	1e58      	subs	r0, r3, #1
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6859      	ldr	r1, [r3, #4]
 8008d56:	460b      	mov	r3, r1
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	440b      	add	r3, r1
 8008d5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d60:	3301      	adds	r3, #1
 8008d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d6a:	e00f      	b.n	8008d8c <HAL_I2C_Init+0x1dc>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	1e58      	subs	r0, r3, #1
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6859      	ldr	r1, [r3, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	440b      	add	r3, r1
 8008d7a:	0099      	lsls	r1, r3, #2
 8008d7c:	440b      	add	r3, r1
 8008d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d82:	3301      	adds	r3, #1
 8008d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	6809      	ldr	r1, [r1, #0]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	69da      	ldr	r2, [r3, #28]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	431a      	orrs	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	430a      	orrs	r2, r1
 8008dae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008dba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	6911      	ldr	r1, [r2, #16]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	68d2      	ldr	r2, [r2, #12]
 8008dc6:	4311      	orrs	r1, r2
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	6812      	ldr	r2, [r2, #0]
 8008dcc:	430b      	orrs	r3, r1
 8008dce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	695a      	ldr	r2, [r3, #20]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	431a      	orrs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f042 0201 	orr.w	r2, r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	000186a0 	.word	0x000186a0
 8008e28:	001e847f 	.word	0x001e847f
 8008e2c:	003d08ff 	.word	0x003d08ff
 8008e30:	431bde83 	.word	0x431bde83
 8008e34:	10624dd3 	.word	0x10624dd3

08008e38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b088      	sub	sp, #32
 8008e3c:	af02      	add	r7, sp, #8
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	607a      	str	r2, [r7, #4]
 8008e42:	461a      	mov	r2, r3
 8008e44:	460b      	mov	r3, r1
 8008e46:	817b      	strh	r3, [r7, #10]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e4c:	f7fe ff42 	bl	8007cd4 <HAL_GetTick>
 8008e50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b20      	cmp	r3, #32
 8008e5c:	f040 80e0 	bne.w	8009020 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	2319      	movs	r3, #25
 8008e66:	2201      	movs	r2, #1
 8008e68:	4970      	ldr	r1, [pc, #448]	@ (800902c <HAL_I2C_Master_Transmit+0x1f4>)
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f001 faac 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008e76:	2302      	movs	r3, #2
 8008e78:	e0d3      	b.n	8009022 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d101      	bne.n	8008e88 <HAL_I2C_Master_Transmit+0x50>
 8008e84:	2302      	movs	r3, #2
 8008e86:	e0cc      	b.n	8009022 <HAL_I2C_Master_Transmit+0x1ea>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d007      	beq.n	8008eae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f042 0201 	orr.w	r2, r2, #1
 8008eac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ebc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2221      	movs	r2, #33	@ 0x21
 8008ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2210      	movs	r2, #16
 8008eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	893a      	ldrh	r2, [r7, #8]
 8008ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	4a50      	ldr	r2, [pc, #320]	@ (8009030 <HAL_I2C_Master_Transmit+0x1f8>)
 8008eee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008ef0:	8979      	ldrh	r1, [r7, #10]
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	6a3a      	ldr	r2, [r7, #32]
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 ff98 	bl	8009e2c <I2C_MasterRequestWrite>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e08d      	b.n	8009022 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f06:	2300      	movs	r3, #0
 8008f08:	613b      	str	r3, [r7, #16]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	613b      	str	r3, [r7, #16]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	613b      	str	r3, [r7, #16]
 8008f1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008f1c:	e066      	b.n	8008fec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	6a39      	ldr	r1, [r7, #32]
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f001 fb6a 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00d      	beq.n	8008f4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	d107      	bne.n	8008f46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e06b      	b.n	8009022 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f4e:	781a      	ldrb	r2, [r3, #0]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	3b01      	subs	r3, #1
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f72:	3b01      	subs	r3, #1
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	2b04      	cmp	r3, #4
 8008f86:	d11b      	bne.n	8008fc0 <HAL_I2C_Master_Transmit+0x188>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d017      	beq.n	8008fc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f94:	781a      	ldrb	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	3b01      	subs	r3, #1
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	6a39      	ldr	r1, [r7, #32]
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f001 fb61 	bl	800a68c <I2C_WaitOnBTFFlagUntilTimeout>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00d      	beq.n	8008fec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd4:	2b04      	cmp	r3, #4
 8008fd6:	d107      	bne.n	8008fe8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fe6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e01a      	b.n	8009022 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d194      	bne.n	8008f1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2220      	movs	r2, #32
 8009008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	e000      	b.n	8009022 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009020:	2302      	movs	r3, #2
  }
}
 8009022:	4618      	mov	r0, r3
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	00100002 	.word	0x00100002
 8009030:	ffff0000 	.word	0xffff0000

08009034 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b08c      	sub	sp, #48	@ 0x30
 8009038:	af02      	add	r7, sp, #8
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	607a      	str	r2, [r7, #4]
 800903e:	461a      	mov	r2, r3
 8009040:	460b      	mov	r3, r1
 8009042:	817b      	strh	r3, [r7, #10]
 8009044:	4613      	mov	r3, r2
 8009046:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800904c:	f7fe fe42 	bl	8007cd4 <HAL_GetTick>
 8009050:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b20      	cmp	r3, #32
 800905c:	f040 824b 	bne.w	80094f6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	2319      	movs	r3, #25
 8009066:	2201      	movs	r2, #1
 8009068:	497f      	ldr	r1, [pc, #508]	@ (8009268 <HAL_I2C_Master_Receive+0x234>)
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f001 f9ac 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8009076:	2302      	movs	r3, #2
 8009078:	e23e      	b.n	80094f8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009080:	2b01      	cmp	r3, #1
 8009082:	d101      	bne.n	8009088 <HAL_I2C_Master_Receive+0x54>
 8009084:	2302      	movs	r3, #2
 8009086:	e237      	b.n	80094f8 <HAL_I2C_Master_Receive+0x4c4>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 0301 	and.w	r3, r3, #1
 800909a:	2b01      	cmp	r3, #1
 800909c:	d007      	beq.n	80090ae <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f042 0201 	orr.w	r2, r2, #1
 80090ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2222      	movs	r2, #34	@ 0x22
 80090c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2210      	movs	r2, #16
 80090ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	893a      	ldrh	r2, [r7, #8]
 80090de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4a5f      	ldr	r2, [pc, #380]	@ (800926c <HAL_I2C_Master_Receive+0x238>)
 80090ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80090f0:	8979      	ldrh	r1, [r7, #10]
 80090f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 ff1a 	bl	8009f30 <I2C_MasterRequestRead>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e1f8      	b.n	80094f8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800910a:	2b00      	cmp	r3, #0
 800910c:	d113      	bne.n	8009136 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800910e:	2300      	movs	r3, #0
 8009110:	61fb      	str	r3, [r7, #28]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	61fb      	str	r3, [r7, #28]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	61fb      	str	r3, [r7, #28]
 8009122:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	e1cc      	b.n	80094d0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800913a:	2b01      	cmp	r3, #1
 800913c:	d11e      	bne.n	800917c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800914c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800914e:	b672      	cpsid	i
}
 8009150:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009152:	2300      	movs	r3, #0
 8009154:	61bb      	str	r3, [r7, #24]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	695b      	ldr	r3, [r3, #20]
 800915c:	61bb      	str	r3, [r7, #24]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	61bb      	str	r3, [r7, #24]
 8009166:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009176:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009178:	b662      	cpsie	i
}
 800917a:	e035      	b.n	80091e8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009180:	2b02      	cmp	r3, #2
 8009182:	d11e      	bne.n	80091c2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009192:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009194:	b672      	cpsid	i
}
 8009196:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009198:	2300      	movs	r3, #0
 800919a:	617b      	str	r3, [r7, #20]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	617b      	str	r3, [r7, #20]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	617b      	str	r3, [r7, #20]
 80091ac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80091be:	b662      	cpsie	i
}
 80091c0:	e012      	b.n	80091e8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80091d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091d2:	2300      	movs	r3, #0
 80091d4:	613b      	str	r3, [r7, #16]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	613b      	str	r3, [r7, #16]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	613b      	str	r3, [r7, #16]
 80091e6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80091e8:	e172      	b.n	80094d0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	f200 811f 	bhi.w	8009432 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d123      	bne.n	8009244 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f001 fa8b 	bl	800a71c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e173      	b.n	80094f8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	691a      	ldr	r2, [r3, #16]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921a:	b2d2      	uxtb	r2, r2
 800921c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800922c:	3b01      	subs	r3, #1
 800922e:	b29a      	uxth	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009238:	b29b      	uxth	r3, r3
 800923a:	3b01      	subs	r3, #1
 800923c:	b29a      	uxth	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009242:	e145      	b.n	80094d0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009248:	2b02      	cmp	r3, #2
 800924a:	d152      	bne.n	80092f2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800924c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009252:	2200      	movs	r2, #0
 8009254:	4906      	ldr	r1, [pc, #24]	@ (8009270 <HAL_I2C_Master_Receive+0x23c>)
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f001 f8b6 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d008      	beq.n	8009274 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e148      	b.n	80094f8 <HAL_I2C_Master_Receive+0x4c4>
 8009266:	bf00      	nop
 8009268:	00100002 	.word	0x00100002
 800926c:	ffff0000 	.word	0xffff0000
 8009270:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009274:	b672      	cpsid	i
}
 8009276:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	691a      	ldr	r2, [r3, #16]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009292:	b2d2      	uxtb	r2, r2
 8009294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092a4:	3b01      	subs	r3, #1
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	3b01      	subs	r3, #1
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80092ba:	b662      	cpsie	i
}
 80092bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	691a      	ldr	r2, [r3, #16]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c8:	b2d2      	uxtb	r2, r2
 80092ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092da:	3b01      	subs	r3, #1
 80092dc:	b29a      	uxth	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	3b01      	subs	r3, #1
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80092f0:	e0ee      	b.n	80094d0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80092f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f8:	2200      	movs	r2, #0
 80092fa:	4981      	ldr	r1, [pc, #516]	@ (8009500 <HAL_I2C_Master_Receive+0x4cc>)
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f001 f863 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	e0f5      	b.n	80094f8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800931a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800931c:	b672      	cpsid	i
}
 800931e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	691a      	ldr	r2, [r3, #16]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800932a:	b2d2      	uxtb	r2, r2
 800932c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800933c:	3b01      	subs	r3, #1
 800933e:	b29a      	uxth	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009348:	b29b      	uxth	r3, r3
 800934a:	3b01      	subs	r3, #1
 800934c:	b29a      	uxth	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009352:	4b6c      	ldr	r3, [pc, #432]	@ (8009504 <HAL_I2C_Master_Receive+0x4d0>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	08db      	lsrs	r3, r3, #3
 8009358:	4a6b      	ldr	r2, [pc, #428]	@ (8009508 <HAL_I2C_Master_Receive+0x4d4>)
 800935a:	fba2 2303 	umull	r2, r3, r2, r3
 800935e:	0a1a      	lsrs	r2, r3, #8
 8009360:	4613      	mov	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	00da      	lsls	r2, r3, #3
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	3b01      	subs	r3, #1
 8009370:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d118      	bne.n	80093aa <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2220      	movs	r2, #32
 8009382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009392:	f043 0220 	orr.w	r2, r3, #32
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800939a:	b662      	cpsie	i
}
 800939c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e0a6      	b.n	80094f8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	695b      	ldr	r3, [r3, #20]
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	d1d9      	bne.n	800936c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	691a      	ldr	r2, [r3, #16]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d2:	b2d2      	uxtb	r2, r2
 80093d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093e4:	3b01      	subs	r3, #1
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	3b01      	subs	r3, #1
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80093fa:	b662      	cpsie	i
}
 80093fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	691a      	ldr	r2, [r3, #16]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009408:	b2d2      	uxtb	r2, r2
 800940a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009410:	1c5a      	adds	r2, r3, #1
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800941a:	3b01      	subs	r3, #1
 800941c:	b29a      	uxth	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009426:	b29b      	uxth	r3, r3
 8009428:	3b01      	subs	r3, #1
 800942a:	b29a      	uxth	r2, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009430:	e04e      	b.n	80094d0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009434:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f001 f970 	bl	800a71c <I2C_WaitOnRXNEFlagUntilTimeout>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e058      	b.n	80094f8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	691a      	ldr	r2, [r3, #16]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009450:	b2d2      	uxtb	r2, r2
 8009452:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009462:	3b01      	subs	r3, #1
 8009464:	b29a      	uxth	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800946e:	b29b      	uxth	r3, r3
 8009470:	3b01      	subs	r3, #1
 8009472:	b29a      	uxth	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	f003 0304 	and.w	r3, r3, #4
 8009482:	2b04      	cmp	r3, #4
 8009484:	d124      	bne.n	80094d0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800948a:	2b03      	cmp	r3, #3
 800948c:	d107      	bne.n	800949e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800949c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	691a      	ldr	r2, [r3, #16]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a8:	b2d2      	uxtb	r2, r2
 80094aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b0:	1c5a      	adds	r2, r3, #1
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094ba:	3b01      	subs	r3, #1
 80094bc:	b29a      	uxth	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	3b01      	subs	r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f47f ae88 	bne.w	80091ea <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2220      	movs	r2, #32
 80094de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	e000      	b.n	80094f8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80094f6:	2302      	movs	r3, #2
  }
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3728      	adds	r7, #40	@ 0x28
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	00010004 	.word	0x00010004
 8009504:	20000028 	.word	0x20000028
 8009508:	14f8b589 	.word	0x14f8b589

0800950c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b088      	sub	sp, #32
 8009510:	af02      	add	r7, sp, #8
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	4608      	mov	r0, r1
 8009516:	4611      	mov	r1, r2
 8009518:	461a      	mov	r2, r3
 800951a:	4603      	mov	r3, r0
 800951c:	817b      	strh	r3, [r7, #10]
 800951e:	460b      	mov	r3, r1
 8009520:	813b      	strh	r3, [r7, #8]
 8009522:	4613      	mov	r3, r2
 8009524:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009526:	f7fe fbd5 	bl	8007cd4 <HAL_GetTick>
 800952a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b20      	cmp	r3, #32
 8009536:	f040 80d9 	bne.w	80096ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	2319      	movs	r3, #25
 8009540:	2201      	movs	r2, #1
 8009542:	496d      	ldr	r1, [pc, #436]	@ (80096f8 <HAL_I2C_Mem_Write+0x1ec>)
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f000 ff3f 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009550:	2302      	movs	r3, #2
 8009552:	e0cc      	b.n	80096ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800955a:	2b01      	cmp	r3, #1
 800955c:	d101      	bne.n	8009562 <HAL_I2C_Mem_Write+0x56>
 800955e:	2302      	movs	r3, #2
 8009560:	e0c5      	b.n	80096ee <HAL_I2C_Mem_Write+0x1e2>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2201      	movs	r2, #1
 8009566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0301 	and.w	r3, r3, #1
 8009574:	2b01      	cmp	r3, #1
 8009576:	d007      	beq.n	8009588 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f042 0201 	orr.w	r2, r2, #1
 8009586:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009596:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2221      	movs	r2, #33	@ 0x21
 800959c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2240      	movs	r2, #64	@ 0x40
 80095a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6a3a      	ldr	r2, [r7, #32]
 80095b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80095b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095be:	b29a      	uxth	r2, r3
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	4a4d      	ldr	r2, [pc, #308]	@ (80096fc <HAL_I2C_Mem_Write+0x1f0>)
 80095c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80095ca:	88f8      	ldrh	r0, [r7, #6]
 80095cc:	893a      	ldrh	r2, [r7, #8]
 80095ce:	8979      	ldrh	r1, [r7, #10]
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	9301      	str	r3, [sp, #4]
 80095d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	4603      	mov	r3, r0
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f000 fd76 	bl	800a0cc <I2C_RequestMemoryWrite>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d052      	beq.n	800968c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e081      	b.n	80096ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f001 f804 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00d      	beq.n	8009616 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095fe:	2b04      	cmp	r3, #4
 8009600:	d107      	bne.n	8009612 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009610:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e06b      	b.n	80096ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800961a:	781a      	ldrb	r2, [r3, #0]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009626:	1c5a      	adds	r2, r3, #1
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009630:	3b01      	subs	r3, #1
 8009632:	b29a      	uxth	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800963c:	b29b      	uxth	r3, r3
 800963e:	3b01      	subs	r3, #1
 8009640:	b29a      	uxth	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	f003 0304 	and.w	r3, r3, #4
 8009650:	2b04      	cmp	r3, #4
 8009652:	d11b      	bne.n	800968c <HAL_I2C_Mem_Write+0x180>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009658:	2b00      	cmp	r3, #0
 800965a:	d017      	beq.n	800968c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009660:	781a      	ldrb	r2, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800966c:	1c5a      	adds	r2, r3, #1
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009676:	3b01      	subs	r3, #1
 8009678:	b29a      	uxth	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009682:	b29b      	uxth	r3, r3
 8009684:	3b01      	subs	r3, #1
 8009686:	b29a      	uxth	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1aa      	bne.n	80095ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 fff7 	bl	800a68c <I2C_WaitOnBTFFlagUntilTimeout>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00d      	beq.n	80096c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a8:	2b04      	cmp	r3, #4
 80096aa:	d107      	bne.n	80096bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	e016      	b.n	80096ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2220      	movs	r2, #32
 80096d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	e000      	b.n	80096ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80096ec:	2302      	movs	r3, #2
  }
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	00100002 	.word	0x00100002
 80096fc:	ffff0000 	.word	0xffff0000

08009700 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08c      	sub	sp, #48	@ 0x30
 8009704:	af02      	add	r7, sp, #8
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	4608      	mov	r0, r1
 800970a:	4611      	mov	r1, r2
 800970c:	461a      	mov	r2, r3
 800970e:	4603      	mov	r3, r0
 8009710:	817b      	strh	r3, [r7, #10]
 8009712:	460b      	mov	r3, r1
 8009714:	813b      	strh	r3, [r7, #8]
 8009716:	4613      	mov	r3, r2
 8009718:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800971a:	2300      	movs	r3, #0
 800971c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800971e:	f7fe fad9 	bl	8007cd4 <HAL_GetTick>
 8009722:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b20      	cmp	r3, #32
 800972e:	f040 8244 	bne.w	8009bba <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	2319      	movs	r3, #25
 8009738:	2201      	movs	r2, #1
 800973a:	4982      	ldr	r1, [pc, #520]	@ (8009944 <HAL_I2C_Mem_Read+0x244>)
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f000 fe43 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009748:	2302      	movs	r3, #2
 800974a:	e237      	b.n	8009bbc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009752:	2b01      	cmp	r3, #1
 8009754:	d101      	bne.n	800975a <HAL_I2C_Mem_Read+0x5a>
 8009756:	2302      	movs	r3, #2
 8009758:	e230      	b.n	8009bbc <HAL_I2C_Mem_Read+0x4bc>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	2b01      	cmp	r3, #1
 800976e:	d007      	beq.n	8009780 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f042 0201 	orr.w	r2, r2, #1
 800977e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800978e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2222      	movs	r2, #34	@ 0x22
 8009794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2240      	movs	r2, #64	@ 0x40
 800979c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80097b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	4a62      	ldr	r2, [pc, #392]	@ (8009948 <HAL_I2C_Mem_Read+0x248>)
 80097c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80097c2:	88f8      	ldrh	r0, [r7, #6]
 80097c4:	893a      	ldrh	r2, [r7, #8]
 80097c6:	8979      	ldrh	r1, [r7, #10]
 80097c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	4603      	mov	r3, r0
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 fd10 	bl	800a1f8 <I2C_RequestMemoryRead>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e1ec      	b.n	8009bbc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d113      	bne.n	8009812 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097ea:	2300      	movs	r3, #0
 80097ec:	61fb      	str	r3, [r7, #28]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	695b      	ldr	r3, [r3, #20]
 80097f4:	61fb      	str	r3, [r7, #28]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	61fb      	str	r3, [r7, #28]
 80097fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	e1c0      	b.n	8009b94 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009816:	2b01      	cmp	r3, #1
 8009818:	d11e      	bne.n	8009858 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009828:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800982a:	b672      	cpsid	i
}
 800982c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800982e:	2300      	movs	r3, #0
 8009830:	61bb      	str	r3, [r7, #24]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	61bb      	str	r3, [r7, #24]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	61bb      	str	r3, [r7, #24]
 8009842:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009852:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009854:	b662      	cpsie	i
}
 8009856:	e035      	b.n	80098c4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800985c:	2b02      	cmp	r3, #2
 800985e:	d11e      	bne.n	800989e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800986e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009870:	b672      	cpsid	i
}
 8009872:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009874:	2300      	movs	r3, #0
 8009876:	617b      	str	r3, [r7, #20]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	617b      	str	r3, [r7, #20]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009898:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800989a:	b662      	cpsie	i
}
 800989c:	e012      	b.n	80098c4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80098ac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098ae:	2300      	movs	r3, #0
 80098b0:	613b      	str	r3, [r7, #16]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	695b      	ldr	r3, [r3, #20]
 80098b8:	613b      	str	r3, [r7, #16]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	613b      	str	r3, [r7, #16]
 80098c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80098c4:	e166      	b.n	8009b94 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098ca:	2b03      	cmp	r3, #3
 80098cc:	f200 811f 	bhi.w	8009b0e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d123      	bne.n	8009920 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 ff1d 	bl	800a71c <I2C_WaitOnRXNEFlagUntilTimeout>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d001      	beq.n	80098ec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	e167      	b.n	8009bbc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	691a      	ldr	r2, [r3, #16]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fe:	1c5a      	adds	r2, r3, #1
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009908:	3b01      	subs	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009914:	b29b      	uxth	r3, r3
 8009916:	3b01      	subs	r3, #1
 8009918:	b29a      	uxth	r2, r3
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800991e:	e139      	b.n	8009b94 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009924:	2b02      	cmp	r3, #2
 8009926:	d152      	bne.n	80099ce <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800992e:	2200      	movs	r2, #0
 8009930:	4906      	ldr	r1, [pc, #24]	@ (800994c <HAL_I2C_Mem_Read+0x24c>)
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f000 fd48 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d008      	beq.n	8009950 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e13c      	b.n	8009bbc <HAL_I2C_Mem_Read+0x4bc>
 8009942:	bf00      	nop
 8009944:	00100002 	.word	0x00100002
 8009948:	ffff0000 	.word	0xffff0000
 800994c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009950:	b672      	cpsid	i
}
 8009952:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	691a      	ldr	r2, [r3, #16]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800996e:	b2d2      	uxtb	r2, r2
 8009970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009976:	1c5a      	adds	r2, r3, #1
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009980:	3b01      	subs	r3, #1
 8009982:	b29a      	uxth	r2, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800998c:	b29b      	uxth	r3, r3
 800998e:	3b01      	subs	r3, #1
 8009990:	b29a      	uxth	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009996:	b662      	cpsie	i
}
 8009998:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	691a      	ldr	r2, [r3, #16]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a4:	b2d2      	uxtb	r2, r2
 80099a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ac:	1c5a      	adds	r2, r3, #1
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099b6:	3b01      	subs	r3, #1
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	3b01      	subs	r3, #1
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80099cc:	e0e2      	b.n	8009b94 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80099ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d4:	2200      	movs	r2, #0
 80099d6:	497b      	ldr	r1, [pc, #492]	@ (8009bc4 <HAL_I2C_Mem_Read+0x4c4>)
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f000 fcf5 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d001      	beq.n	80099e8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e0e9      	b.n	8009bbc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80099f8:	b672      	cpsid	i
}
 80099fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	691a      	ldr	r2, [r3, #16]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a06:	b2d2      	uxtb	r2, r2
 8009a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	3b01      	subs	r3, #1
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009a2e:	4b66      	ldr	r3, [pc, #408]	@ (8009bc8 <HAL_I2C_Mem_Read+0x4c8>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	08db      	lsrs	r3, r3, #3
 8009a34:	4a65      	ldr	r2, [pc, #404]	@ (8009bcc <HAL_I2C_Mem_Read+0x4cc>)
 8009a36:	fba2 2303 	umull	r2, r3, r2, r3
 8009a3a:	0a1a      	lsrs	r2, r3, #8
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	00da      	lsls	r2, r3, #3
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009a48:	6a3b      	ldr	r3, [r7, #32]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d118      	bne.n	8009a86 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a6e:	f043 0220 	orr.w	r2, r3, #32
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009a76:	b662      	cpsie	i
}
 8009a78:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e09a      	b.n	8009bbc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	f003 0304 	and.w	r3, r3, #4
 8009a90:	2b04      	cmp	r3, #4
 8009a92:	d1d9      	bne.n	8009a48 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	691a      	ldr	r2, [r3, #16]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aae:	b2d2      	uxtb	r2, r2
 8009ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009ad6:	b662      	cpsie	i
}
 8009ad8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	691a      	ldr	r2, [r3, #16]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae4:	b2d2      	uxtb	r2, r2
 8009ae6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aec:	1c5a      	adds	r2, r3, #1
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009af6:	3b01      	subs	r3, #1
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	3b01      	subs	r3, #1
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009b0c:	e042      	b.n	8009b94 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 fe02 	bl	800a71c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d001      	beq.n	8009b22 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e04c      	b.n	8009bbc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	691a      	ldr	r2, [r3, #16]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b2c:	b2d2      	uxtb	r2, r2
 8009b2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b34:	1c5a      	adds	r2, r3, #1
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	f003 0304 	and.w	r3, r3, #4
 8009b5e:	2b04      	cmp	r3, #4
 8009b60:	d118      	bne.n	8009b94 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	691a      	ldr	r2, [r3, #16]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6c:	b2d2      	uxtb	r2, r2
 8009b6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b74:	1c5a      	adds	r2, r3, #1
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f47f ae94 	bne.w	80098c6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2220      	movs	r2, #32
 8009ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	e000      	b.n	8009bbc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009bba:	2302      	movs	r3, #2
  }
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3728      	adds	r7, #40	@ 0x28
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	00010004 	.word	0x00010004
 8009bc8:	20000028 	.word	0x20000028
 8009bcc:	14f8b589 	.word	0x14f8b589

08009bd0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b08a      	sub	sp, #40	@ 0x28
 8009bd4:	af02      	add	r7, sp, #8
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	607a      	str	r2, [r7, #4]
 8009bda:	603b      	str	r3, [r7, #0]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009be0:	f7fe f878 	bl	8007cd4 <HAL_GetTick>
 8009be4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b20      	cmp	r3, #32
 8009bf4:	f040 8111 	bne.w	8009e1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	2319      	movs	r3, #25
 8009bfe:	2201      	movs	r2, #1
 8009c00:	4988      	ldr	r1, [pc, #544]	@ (8009e24 <HAL_I2C_IsDeviceReady+0x254>)
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f000 fbe0 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d001      	beq.n	8009c12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e104      	b.n	8009e1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d101      	bne.n	8009c20 <HAL_I2C_IsDeviceReady+0x50>
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	e0fd      	b.n	8009e1c <HAL_I2C_IsDeviceReady+0x24c>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d007      	beq.n	8009c46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f042 0201 	orr.w	r2, r2, #1
 8009c44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009c54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2224      	movs	r2, #36	@ 0x24
 8009c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4a70      	ldr	r2, [pc, #448]	@ (8009e28 <HAL_I2C_IsDeviceReady+0x258>)
 8009c68:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f000 fb9e 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00d      	beq.n	8009cae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ca0:	d103      	bne.n	8009caa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ca8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e0b6      	b.n	8009e1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009cae:	897b      	ldrh	r3, [r7, #10]
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009cbc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009cbe:	f7fe f809 	bl	8007cd4 <HAL_GetTick>
 8009cc2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	f003 0302 	and.w	r3, r3, #2
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	bf0c      	ite	eq
 8009cd2:	2301      	moveq	r3, #1
 8009cd4:	2300      	movne	r3, #0
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ce8:	bf0c      	ite	eq
 8009cea:	2301      	moveq	r3, #1
 8009cec:	2300      	movne	r3, #0
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009cf2:	e025      	b.n	8009d40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009cf4:	f7fd ffee 	bl	8007cd4 <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d302      	bcc.n	8009d0a <HAL_I2C_IsDeviceReady+0x13a>
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d103      	bne.n	8009d12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	22a0      	movs	r2, #160	@ 0xa0
 8009d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	695b      	ldr	r3, [r3, #20]
 8009d18:	f003 0302 	and.w	r3, r3, #2
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	bf0c      	ite	eq
 8009d20:	2301      	moveq	r3, #1
 8009d22:	2300      	movne	r3, #0
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d36:	bf0c      	ite	eq
 8009d38:	2301      	moveq	r3, #1
 8009d3a:	2300      	movne	r3, #0
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2ba0      	cmp	r3, #160	@ 0xa0
 8009d4a:	d005      	beq.n	8009d58 <HAL_I2C_IsDeviceReady+0x188>
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d102      	bne.n	8009d58 <HAL_I2C_IsDeviceReady+0x188>
 8009d52:	7dbb      	ldrb	r3, [r7, #22]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d0cd      	beq.n	8009cf4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2220      	movs	r2, #32
 8009d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	f003 0302 	and.w	r3, r3, #2
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d129      	bne.n	8009dc2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d7e:	2300      	movs	r3, #0
 8009d80:	613b      	str	r3, [r7, #16]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	695b      	ldr	r3, [r3, #20]
 8009d88:	613b      	str	r3, [r7, #16]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	613b      	str	r3, [r7, #16]
 8009d92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	2319      	movs	r3, #25
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	4921      	ldr	r1, [pc, #132]	@ (8009e24 <HAL_I2C_IsDeviceReady+0x254>)
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f000 fb12 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e036      	b.n	8009e1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2220      	movs	r2, #32
 8009db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	e02c      	b.n	8009e1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009dd0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009dda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	2319      	movs	r3, #25
 8009de2:	2201      	movs	r2, #1
 8009de4:	490f      	ldr	r1, [pc, #60]	@ (8009e24 <HAL_I2C_IsDeviceReady+0x254>)
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f000 faee 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e012      	b.n	8009e1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009dfc:	69ba      	ldr	r2, [r7, #24]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	f4ff af32 	bcc.w	8009c6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e000      	b.n	8009e1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8009e1a:	2302      	movs	r3, #2
  }
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3720      	adds	r7, #32
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	00100002 	.word	0x00100002
 8009e28:	ffff0000 	.word	0xffff0000

08009e2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b088      	sub	sp, #32
 8009e30:	af02      	add	r7, sp, #8
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	607a      	str	r2, [r7, #4]
 8009e36:	603b      	str	r3, [r7, #0]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2b08      	cmp	r3, #8
 8009e46:	d006      	beq.n	8009e56 <I2C_MasterRequestWrite+0x2a>
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d003      	beq.n	8009e56 <I2C_MasterRequestWrite+0x2a>
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009e54:	d108      	bne.n	8009e68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e64:	601a      	str	r2, [r3, #0]
 8009e66:	e00b      	b.n	8009e80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e6c:	2b12      	cmp	r3, #18
 8009e6e:	d107      	bne.n	8009e80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f000 fa9b 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00d      	beq.n	8009eb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ea6:	d103      	bne.n	8009eb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009eae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e035      	b.n	8009f20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ebc:	d108      	bne.n	8009ed0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ebe:	897b      	ldrh	r3, [r7, #10]
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009ecc:	611a      	str	r2, [r3, #16]
 8009ece:	e01b      	b.n	8009f08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009ed0:	897b      	ldrh	r3, [r7, #10]
 8009ed2:	11db      	asrs	r3, r3, #7
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	f003 0306 	and.w	r3, r3, #6
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	f063 030f 	orn	r3, r3, #15
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	490e      	ldr	r1, [pc, #56]	@ (8009f28 <I2C_MasterRequestWrite+0xfc>)
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f000 fae4 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e010      	b.n	8009f20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009efe:	897b      	ldrh	r3, [r7, #10]
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	4907      	ldr	r1, [pc, #28]	@ (8009f2c <I2C_MasterRequestWrite+0x100>)
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f000 fad4 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e000      	b.n	8009f20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3718      	adds	r7, #24
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	00010008 	.word	0x00010008
 8009f2c:	00010002 	.word	0x00010002

08009f30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b088      	sub	sp, #32
 8009f34:	af02      	add	r7, sp, #8
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	607a      	str	r2, [r7, #4]
 8009f3a:	603b      	str	r3, [r7, #0]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009f54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	2b08      	cmp	r3, #8
 8009f5a:	d006      	beq.n	8009f6a <I2C_MasterRequestRead+0x3a>
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d003      	beq.n	8009f6a <I2C_MasterRequestRead+0x3a>
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009f68:	d108      	bne.n	8009f7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	e00b      	b.n	8009f94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f80:	2b11      	cmp	r3, #17
 8009f82:	d107      	bne.n	8009f94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009f92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 fa11 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00d      	beq.n	8009fc8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fba:	d103      	bne.n	8009fc4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009fc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e079      	b.n	800a0bc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fd0:	d108      	bne.n	8009fe4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009fd2:	897b      	ldrh	r3, [r7, #10]
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	f043 0301 	orr.w	r3, r3, #1
 8009fda:	b2da      	uxtb	r2, r3
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	611a      	str	r2, [r3, #16]
 8009fe2:	e05f      	b.n	800a0a4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009fe4:	897b      	ldrh	r3, [r7, #10]
 8009fe6:	11db      	asrs	r3, r3, #7
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	f003 0306 	and.w	r3, r3, #6
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	f063 030f 	orn	r3, r3, #15
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	4930      	ldr	r1, [pc, #192]	@ (800a0c4 <I2C_MasterRequestRead+0x194>)
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f000 fa5a 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d001      	beq.n	800a012 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e054      	b.n	800a0bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a012:	897b      	ldrh	r3, [r7, #10]
 800a014:	b2da      	uxtb	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	4929      	ldr	r1, [pc, #164]	@ (800a0c8 <I2C_MasterRequestRead+0x198>)
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 fa4a 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e044      	b.n	800a0bc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a032:	2300      	movs	r3, #0
 800a034:	613b      	str	r3, [r7, #16]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	695b      	ldr	r3, [r3, #20]
 800a03c:	613b      	str	r3, [r7, #16]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	613b      	str	r3, [r7, #16]
 800a046:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a056:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 f9af 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00d      	beq.n	800a08c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a07a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a07e:	d103      	bne.n	800a088 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a086:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800a088:	2303      	movs	r3, #3
 800a08a:	e017      	b.n	800a0bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a08c:	897b      	ldrh	r3, [r7, #10]
 800a08e:	11db      	asrs	r3, r3, #7
 800a090:	b2db      	uxtb	r3, r3
 800a092:	f003 0306 	and.w	r3, r3, #6
 800a096:	b2db      	uxtb	r3, r3
 800a098:	f063 030e 	orn	r3, r3, #14
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	4907      	ldr	r1, [pc, #28]	@ (800a0c8 <I2C_MasterRequestRead+0x198>)
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f000 fa06 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e000      	b.n	800a0bc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3718      	adds	r7, #24
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	00010008 	.word	0x00010008
 800a0c8:	00010002 	.word	0x00010002

0800a0cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af02      	add	r7, sp, #8
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	4608      	mov	r0, r1
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4603      	mov	r3, r0
 800a0dc:	817b      	strh	r3, [r7, #10]
 800a0de:	460b      	mov	r3, r1
 800a0e0:	813b      	strh	r3, [r7, #8]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a0f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f000 f960 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00d      	beq.n	800a12a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a11c:	d103      	bne.n	800a126 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a124:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e05f      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a12a:	897b      	ldrh	r3, [r7, #10]
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	461a      	mov	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13c:	6a3a      	ldr	r2, [r7, #32]
 800a13e:	492d      	ldr	r1, [pc, #180]	@ (800a1f4 <I2C_RequestMemoryWrite+0x128>)
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 f9bb 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e04c      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a150:	2300      	movs	r3, #0
 800a152:	617b      	str	r3, [r7, #20]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a168:	6a39      	ldr	r1, [r7, #32]
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 fa46 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00d      	beq.n	800a192 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a17a:	2b04      	cmp	r3, #4
 800a17c:	d107      	bne.n	800a18e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a18c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e02b      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a192:	88fb      	ldrh	r3, [r7, #6]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d105      	bne.n	800a1a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a198:	893b      	ldrh	r3, [r7, #8]
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	611a      	str	r2, [r3, #16]
 800a1a2:	e021      	b.n	800a1e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1a4:	893b      	ldrh	r3, [r7, #8]
 800a1a6:	0a1b      	lsrs	r3, r3, #8
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1b4:	6a39      	ldr	r1, [r7, #32]
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 fa20 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00d      	beq.n	800a1de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	d107      	bne.n	800a1da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e005      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1de:	893b      	ldrh	r3, [r7, #8]
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3718      	adds	r7, #24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	00010002 	.word	0x00010002

0800a1f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b088      	sub	sp, #32
 800a1fc:	af02      	add	r7, sp, #8
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	4608      	mov	r0, r1
 800a202:	4611      	mov	r1, r2
 800a204:	461a      	mov	r2, r3
 800a206:	4603      	mov	r3, r0
 800a208:	817b      	strh	r3, [r7, #10]
 800a20a:	460b      	mov	r3, r1
 800a20c:	813b      	strh	r3, [r7, #8]
 800a20e:	4613      	mov	r3, r2
 800a210:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a220:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	2200      	movs	r2, #0
 800a23a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 f8c2 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00d      	beq.n	800a266 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a258:	d103      	bne.n	800a262 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a260:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e0aa      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a266:	897b      	ldrh	r3, [r7, #10]
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	461a      	mov	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a278:	6a3a      	ldr	r2, [r7, #32]
 800a27a:	4952      	ldr	r1, [pc, #328]	@ (800a3c4 <I2C_RequestMemoryRead+0x1cc>)
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 f91d 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e097      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a28c:	2300      	movs	r3, #0
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	617b      	str	r3, [r7, #20]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2a4:	6a39      	ldr	r1, [r7, #32]
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 f9a8 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00d      	beq.n	800a2ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2b6:	2b04      	cmp	r3, #4
 800a2b8:	d107      	bne.n	800a2ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e076      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a2ce:	88fb      	ldrh	r3, [r7, #6]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d105      	bne.n	800a2e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2d4:	893b      	ldrh	r3, [r7, #8]
 800a2d6:	b2da      	uxtb	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	611a      	str	r2, [r3, #16]
 800a2de:	e021      	b.n	800a324 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a2e0:	893b      	ldrh	r3, [r7, #8]
 800a2e2:	0a1b      	lsrs	r3, r3, #8
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2f0:	6a39      	ldr	r1, [r7, #32]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 f982 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00d      	beq.n	800a31a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a302:	2b04      	cmp	r3, #4
 800a304:	d107      	bne.n	800a316 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e050      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a31a:	893b      	ldrh	r3, [r7, #8]
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a326:	6a39      	ldr	r1, [r7, #32]
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 f967 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00d      	beq.n	800a350 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a338:	2b04      	cmp	r3, #4
 800a33a:	d107      	bne.n	800a34c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a34a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e035      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a35e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	2200      	movs	r2, #0
 800a368:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f000 f82b 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00d      	beq.n	800a394 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a386:	d103      	bne.n	800a390 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a38e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a390:	2303      	movs	r3, #3
 800a392:	e013      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a394:	897b      	ldrh	r3, [r7, #10]
 800a396:	b2db      	uxtb	r3, r3
 800a398:	f043 0301 	orr.w	r3, r3, #1
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a6:	6a3a      	ldr	r2, [r7, #32]
 800a3a8:	4906      	ldr	r1, [pc, #24]	@ (800a3c4 <I2C_RequestMemoryRead+0x1cc>)
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 f886 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e000      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3718      	adds	r7, #24
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	00010002 	.word	0x00010002

0800a3c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	603b      	str	r3, [r7, #0]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3d8:	e048      	b.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e0:	d044      	beq.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3e2:	f7fd fc77 	bl	8007cd4 <HAL_GetTick>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d302      	bcc.n	800a3f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d139      	bne.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	0c1b      	lsrs	r3, r3, #16
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d10d      	bne.n	800a41e <I2C_WaitOnFlagUntilTimeout+0x56>
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	43da      	mvns	r2, r3
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	4013      	ands	r3, r2
 800a40e:	b29b      	uxth	r3, r3
 800a410:	2b00      	cmp	r3, #0
 800a412:	bf0c      	ite	eq
 800a414:	2301      	moveq	r3, #1
 800a416:	2300      	movne	r3, #0
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	461a      	mov	r2, r3
 800a41c:	e00c      	b.n	800a438 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	43da      	mvns	r2, r3
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	4013      	ands	r3, r2
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	bf0c      	ite	eq
 800a430:	2301      	moveq	r3, #1
 800a432:	2300      	movne	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	461a      	mov	r2, r3
 800a438:	79fb      	ldrb	r3, [r7, #7]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d116      	bne.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2220      	movs	r2, #32
 800a448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a458:	f043 0220 	orr.w	r2, r3, #32
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e023      	b.n	800a4b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	0c1b      	lsrs	r3, r3, #16
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b01      	cmp	r3, #1
 800a474:	d10d      	bne.n	800a492 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	43da      	mvns	r2, r3
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	4013      	ands	r3, r2
 800a482:	b29b      	uxth	r3, r3
 800a484:	2b00      	cmp	r3, #0
 800a486:	bf0c      	ite	eq
 800a488:	2301      	moveq	r3, #1
 800a48a:	2300      	movne	r3, #0
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	461a      	mov	r2, r3
 800a490:	e00c      	b.n	800a4ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	43da      	mvns	r2, r3
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	4013      	ands	r3, r2
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	bf0c      	ite	eq
 800a4a4:	2301      	moveq	r3, #1
 800a4a6:	2300      	movne	r3, #0
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d093      	beq.n	800a3da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
 800a4c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a4ca:	e071      	b.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4da:	d123      	bne.n	800a524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a4f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2220      	movs	r2, #32
 800a500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a510:	f043 0204 	orr.w	r2, r3, #4
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e067      	b.n	800a5f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52a:	d041      	beq.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a52c:	f7fd fbd2 	bl	8007cd4 <HAL_GetTick>
 800a530:	4602      	mov	r2, r0
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d302      	bcc.n	800a542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d136      	bne.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	0c1b      	lsrs	r3, r3, #16
 800a546:	b2db      	uxtb	r3, r3
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d10c      	bne.n	800a566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	43da      	mvns	r2, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	4013      	ands	r3, r2
 800a558:	b29b      	uxth	r3, r3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	bf14      	ite	ne
 800a55e:	2301      	movne	r3, #1
 800a560:	2300      	moveq	r3, #0
 800a562:	b2db      	uxtb	r3, r3
 800a564:	e00b      	b.n	800a57e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	43da      	mvns	r2, r3
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	4013      	ands	r3, r2
 800a572:	b29b      	uxth	r3, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	bf14      	ite	ne
 800a578:	2301      	movne	r3, #1
 800a57a:	2300      	moveq	r3, #0
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d016      	beq.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2220      	movs	r2, #32
 800a58c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a59c:	f043 0220 	orr.w	r2, r3, #32
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e021      	b.n	800a5f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	0c1b      	lsrs	r3, r3, #16
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d10c      	bne.n	800a5d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	695b      	ldr	r3, [r3, #20]
 800a5c0:	43da      	mvns	r2, r3
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	bf14      	ite	ne
 800a5cc:	2301      	movne	r3, #1
 800a5ce:	2300      	moveq	r3, #0
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	e00b      	b.n	800a5ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	43da      	mvns	r2, r3
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	4013      	ands	r3, r2
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	bf14      	ite	ne
 800a5e6:	2301      	movne	r3, #1
 800a5e8:	2300      	moveq	r3, #0
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f47f af6d 	bne.w	800a4cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a608:	e034      	b.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f000 f8e3 	bl	800a7d6 <I2C_IsAcknowledgeFailed>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e034      	b.n	800a684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a620:	d028      	beq.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a622:	f7fd fb57 	bl	8007cd4 <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d302      	bcc.n	800a638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d11d      	bne.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a642:	2b80      	cmp	r3, #128	@ 0x80
 800a644:	d016      	beq.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2220      	movs	r2, #32
 800a650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a660:	f043 0220 	orr.w	r2, r3, #32
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e007      	b.n	800a684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a67e:	2b80      	cmp	r3, #128	@ 0x80
 800a680:	d1c3      	bne.n	800a60a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a698:	e034      	b.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 f89b 	bl	800a7d6 <I2C_IsAcknowledgeFailed>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e034      	b.n	800a714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b0:	d028      	beq.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6b2:	f7fd fb0f 	bl	8007cd4 <HAL_GetTick>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d302      	bcc.n	800a6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d11d      	bne.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	f003 0304 	and.w	r3, r3, #4
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	d016      	beq.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2220      	movs	r2, #32
 800a6e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f0:	f043 0220 	orr.w	r2, r3, #32
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e007      	b.n	800a714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	695b      	ldr	r3, [r3, #20]
 800a70a:	f003 0304 	and.w	r3, r3, #4
 800a70e:	2b04      	cmp	r3, #4
 800a710:	d1c3      	bne.n	800a69a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a728:	e049      	b.n	800a7be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	2b10      	cmp	r3, #16
 800a736:	d119      	bne.n	800a76c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f06f 0210 	mvn.w	r2, #16
 800a740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2220      	movs	r2, #32
 800a74c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e030      	b.n	800a7ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a76c:	f7fd fab2 	bl	8007cd4 <HAL_GetTick>
 800a770:	4602      	mov	r2, r0
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d302      	bcc.n	800a782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d11d      	bne.n	800a7be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a78c:	2b40      	cmp	r3, #64	@ 0x40
 800a78e:	d016      	beq.n	800a7be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2220      	movs	r2, #32
 800a79a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7aa:	f043 0220 	orr.w	r2, r3, #32
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e007      	b.n	800a7ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7c8:	2b40      	cmp	r3, #64	@ 0x40
 800a7ca:	d1ae      	bne.n	800a72a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b083      	sub	sp, #12
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7ec:	d11b      	bne.n	800a826 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a7f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2220      	movs	r2, #32
 800a802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a812:	f043 0204 	orr.w	r2, r3, #4
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e000      	b.n	800a828 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bc80      	pop	{r7}
 800a830:	4770      	bx	lr
	...

0800a834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d101      	bne.n	800a846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	e272      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 0301 	and.w	r3, r3, #1
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 8087 	beq.w	800a962 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a854:	4b92      	ldr	r3, [pc, #584]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	f003 030c 	and.w	r3, r3, #12
 800a85c:	2b04      	cmp	r3, #4
 800a85e:	d00c      	beq.n	800a87a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a860:	4b8f      	ldr	r3, [pc, #572]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f003 030c 	and.w	r3, r3, #12
 800a868:	2b08      	cmp	r3, #8
 800a86a:	d112      	bne.n	800a892 <HAL_RCC_OscConfig+0x5e>
 800a86c:	4b8c      	ldr	r3, [pc, #560]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a878:	d10b      	bne.n	800a892 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a87a:	4b89      	ldr	r3, [pc, #548]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a882:	2b00      	cmp	r3, #0
 800a884:	d06c      	beq.n	800a960 <HAL_RCC_OscConfig+0x12c>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d168      	bne.n	800a960 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e24c      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a89a:	d106      	bne.n	800a8aa <HAL_RCC_OscConfig+0x76>
 800a89c:	4b80      	ldr	r3, [pc, #512]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a7f      	ldr	r2, [pc, #508]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a8a6:	6013      	str	r3, [r2, #0]
 800a8a8:	e02e      	b.n	800a908 <HAL_RCC_OscConfig+0xd4>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d10c      	bne.n	800a8cc <HAL_RCC_OscConfig+0x98>
 800a8b2:	4b7b      	ldr	r3, [pc, #492]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a7a      	ldr	r2, [pc, #488]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8bc:	6013      	str	r3, [r2, #0]
 800a8be:	4b78      	ldr	r3, [pc, #480]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a77      	ldr	r2, [pc, #476]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a8c8:	6013      	str	r3, [r2, #0]
 800a8ca:	e01d      	b.n	800a908 <HAL_RCC_OscConfig+0xd4>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a8d4:	d10c      	bne.n	800a8f0 <HAL_RCC_OscConfig+0xbc>
 800a8d6:	4b72      	ldr	r3, [pc, #456]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a71      	ldr	r2, [pc, #452]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	4b6f      	ldr	r3, [pc, #444]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a6e      	ldr	r2, [pc, #440]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a8ec:	6013      	str	r3, [r2, #0]
 800a8ee:	e00b      	b.n	800a908 <HAL_RCC_OscConfig+0xd4>
 800a8f0:	4b6b      	ldr	r3, [pc, #428]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a6a      	ldr	r2, [pc, #424]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	4b68      	ldr	r3, [pc, #416]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a67      	ldr	r2, [pc, #412]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a906:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d013      	beq.n	800a938 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a910:	f7fd f9e0 	bl	8007cd4 <HAL_GetTick>
 800a914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a916:	e008      	b.n	800a92a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a918:	f7fd f9dc 	bl	8007cd4 <HAL_GetTick>
 800a91c:	4602      	mov	r2, r0
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	2b64      	cmp	r3, #100	@ 0x64
 800a924:	d901      	bls.n	800a92a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e200      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a92a:	4b5d      	ldr	r3, [pc, #372]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0f0      	beq.n	800a918 <HAL_RCC_OscConfig+0xe4>
 800a936:	e014      	b.n	800a962 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a938:	f7fd f9cc 	bl	8007cd4 <HAL_GetTick>
 800a93c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a93e:	e008      	b.n	800a952 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a940:	f7fd f9c8 	bl	8007cd4 <HAL_GetTick>
 800a944:	4602      	mov	r2, r0
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	1ad3      	subs	r3, r2, r3
 800a94a:	2b64      	cmp	r3, #100	@ 0x64
 800a94c:	d901      	bls.n	800a952 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a94e:	2303      	movs	r3, #3
 800a950:	e1ec      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a952:	4b53      	ldr	r3, [pc, #332]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1f0      	bne.n	800a940 <HAL_RCC_OscConfig+0x10c>
 800a95e:	e000      	b.n	800a962 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 0302 	and.w	r3, r3, #2
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d063      	beq.n	800aa36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a96e:	4b4c      	ldr	r3, [pc, #304]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f003 030c 	and.w	r3, r3, #12
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00b      	beq.n	800a992 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a97a:	4b49      	ldr	r3, [pc, #292]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	f003 030c 	and.w	r3, r3, #12
 800a982:	2b08      	cmp	r3, #8
 800a984:	d11c      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x18c>
 800a986:	4b46      	ldr	r3, [pc, #280]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d116      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a992:	4b43      	ldr	r3, [pc, #268]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0302 	and.w	r3, r3, #2
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d005      	beq.n	800a9aa <HAL_RCC_OscConfig+0x176>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d001      	beq.n	800a9aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e1c0      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9aa:	4b3d      	ldr	r3, [pc, #244]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	00db      	lsls	r3, r3, #3
 800a9b8:	4939      	ldr	r1, [pc, #228]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9be:	e03a      	b.n	800aa36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d020      	beq.n	800aa0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a9c8:	4b36      	ldr	r3, [pc, #216]	@ (800aaa4 <HAL_RCC_OscConfig+0x270>)
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9ce:	f7fd f981 	bl	8007cd4 <HAL_GetTick>
 800a9d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9d4:	e008      	b.n	800a9e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9d6:	f7fd f97d 	bl	8007cd4 <HAL_GetTick>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d901      	bls.n	800a9e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e1a1      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9e8:	4b2d      	ldr	r3, [pc, #180]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 0302 	and.w	r3, r3, #2
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0f0      	beq.n	800a9d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9f4:	4b2a      	ldr	r3, [pc, #168]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	695b      	ldr	r3, [r3, #20]
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	4927      	ldr	r1, [pc, #156]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800aa04:	4313      	orrs	r3, r2
 800aa06:	600b      	str	r3, [r1, #0]
 800aa08:	e015      	b.n	800aa36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa0a:	4b26      	ldr	r3, [pc, #152]	@ (800aaa4 <HAL_RCC_OscConfig+0x270>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa10:	f7fd f960 	bl	8007cd4 <HAL_GetTick>
 800aa14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa16:	e008      	b.n	800aa2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa18:	f7fd f95c 	bl	8007cd4 <HAL_GetTick>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d901      	bls.n	800aa2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aa26:	2303      	movs	r3, #3
 800aa28:	e180      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa2a:	4b1d      	ldr	r3, [pc, #116]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 0302 	and.w	r3, r3, #2
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1f0      	bne.n	800aa18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 0308 	and.w	r3, r3, #8
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d03a      	beq.n	800aab8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d019      	beq.n	800aa7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa4a:	4b17      	ldr	r3, [pc, #92]	@ (800aaa8 <HAL_RCC_OscConfig+0x274>)
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa50:	f7fd f940 	bl	8007cd4 <HAL_GetTick>
 800aa54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa56:	e008      	b.n	800aa6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa58:	f7fd f93c 	bl	8007cd4 <HAL_GetTick>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d901      	bls.n	800aa6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aa66:	2303      	movs	r3, #3
 800aa68:	e160      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa6a:	4b0d      	ldr	r3, [pc, #52]	@ (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa6e:	f003 0302 	and.w	r3, r3, #2
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d0f0      	beq.n	800aa58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aa76:	2001      	movs	r0, #1
 800aa78:	f000 fafe 	bl	800b078 <RCC_Delay>
 800aa7c:	e01c      	b.n	800aab8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa7e:	4b0a      	ldr	r3, [pc, #40]	@ (800aaa8 <HAL_RCC_OscConfig+0x274>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa84:	f7fd f926 	bl	8007cd4 <HAL_GetTick>
 800aa88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa8a:	e00f      	b.n	800aaac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa8c:	f7fd f922 	bl	8007cd4 <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d908      	bls.n	800aaac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e146      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
 800aa9e:	bf00      	nop
 800aaa0:	40021000 	.word	0x40021000
 800aaa4:	42420000 	.word	0x42420000
 800aaa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aaac:	4b92      	ldr	r3, [pc, #584]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800aaae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab0:	f003 0302 	and.w	r3, r3, #2
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1e9      	bne.n	800aa8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0304 	and.w	r3, r3, #4
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f000 80a6 	beq.w	800ac12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aac6:	2300      	movs	r3, #0
 800aac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aaca:	4b8b      	ldr	r3, [pc, #556]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800aacc:	69db      	ldr	r3, [r3, #28]
 800aace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10d      	bne.n	800aaf2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aad6:	4b88      	ldr	r3, [pc, #544]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	4a87      	ldr	r2, [pc, #540]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800aadc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aae0:	61d3      	str	r3, [r2, #28]
 800aae2:	4b85      	ldr	r3, [pc, #532]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aaea:	60bb      	str	r3, [r7, #8]
 800aaec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aaf2:	4b82      	ldr	r3, [pc, #520]	@ (800acfc <HAL_RCC_OscConfig+0x4c8>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d118      	bne.n	800ab30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aafe:	4b7f      	ldr	r3, [pc, #508]	@ (800acfc <HAL_RCC_OscConfig+0x4c8>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a7e      	ldr	r2, [pc, #504]	@ (800acfc <HAL_RCC_OscConfig+0x4c8>)
 800ab04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab0a:	f7fd f8e3 	bl	8007cd4 <HAL_GetTick>
 800ab0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab10:	e008      	b.n	800ab24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab12:	f7fd f8df 	bl	8007cd4 <HAL_GetTick>
 800ab16:	4602      	mov	r2, r0
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	2b64      	cmp	r3, #100	@ 0x64
 800ab1e:	d901      	bls.n	800ab24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e103      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab24:	4b75      	ldr	r3, [pc, #468]	@ (800acfc <HAL_RCC_OscConfig+0x4c8>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0f0      	beq.n	800ab12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d106      	bne.n	800ab46 <HAL_RCC_OscConfig+0x312>
 800ab38:	4b6f      	ldr	r3, [pc, #444]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab3a:	6a1b      	ldr	r3, [r3, #32]
 800ab3c:	4a6e      	ldr	r2, [pc, #440]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab3e:	f043 0301 	orr.w	r3, r3, #1
 800ab42:	6213      	str	r3, [r2, #32]
 800ab44:	e02d      	b.n	800aba2 <HAL_RCC_OscConfig+0x36e>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10c      	bne.n	800ab68 <HAL_RCC_OscConfig+0x334>
 800ab4e:	4b6a      	ldr	r3, [pc, #424]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab50:	6a1b      	ldr	r3, [r3, #32]
 800ab52:	4a69      	ldr	r2, [pc, #420]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab54:	f023 0301 	bic.w	r3, r3, #1
 800ab58:	6213      	str	r3, [r2, #32]
 800ab5a:	4b67      	ldr	r3, [pc, #412]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	4a66      	ldr	r2, [pc, #408]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab60:	f023 0304 	bic.w	r3, r3, #4
 800ab64:	6213      	str	r3, [r2, #32]
 800ab66:	e01c      	b.n	800aba2 <HAL_RCC_OscConfig+0x36e>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	2b05      	cmp	r3, #5
 800ab6e:	d10c      	bne.n	800ab8a <HAL_RCC_OscConfig+0x356>
 800ab70:	4b61      	ldr	r3, [pc, #388]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab72:	6a1b      	ldr	r3, [r3, #32]
 800ab74:	4a60      	ldr	r2, [pc, #384]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab76:	f043 0304 	orr.w	r3, r3, #4
 800ab7a:	6213      	str	r3, [r2, #32]
 800ab7c:	4b5e      	ldr	r3, [pc, #376]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab7e:	6a1b      	ldr	r3, [r3, #32]
 800ab80:	4a5d      	ldr	r2, [pc, #372]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab82:	f043 0301 	orr.w	r3, r3, #1
 800ab86:	6213      	str	r3, [r2, #32]
 800ab88:	e00b      	b.n	800aba2 <HAL_RCC_OscConfig+0x36e>
 800ab8a:	4b5b      	ldr	r3, [pc, #364]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	4a5a      	ldr	r2, [pc, #360]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab90:	f023 0301 	bic.w	r3, r3, #1
 800ab94:	6213      	str	r3, [r2, #32]
 800ab96:	4b58      	ldr	r3, [pc, #352]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	4a57      	ldr	r2, [pc, #348]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab9c:	f023 0304 	bic.w	r3, r3, #4
 800aba0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d015      	beq.n	800abd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abaa:	f7fd f893 	bl	8007cd4 <HAL_GetTick>
 800abae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abb0:	e00a      	b.n	800abc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abb2:	f7fd f88f 	bl	8007cd4 <HAL_GetTick>
 800abb6:	4602      	mov	r2, r0
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d901      	bls.n	800abc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e0b1      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abc8:	4b4b      	ldr	r3, [pc, #300]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800abca:	6a1b      	ldr	r3, [r3, #32]
 800abcc:	f003 0302 	and.w	r3, r3, #2
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d0ee      	beq.n	800abb2 <HAL_RCC_OscConfig+0x37e>
 800abd4:	e014      	b.n	800ac00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abd6:	f7fd f87d 	bl	8007cd4 <HAL_GetTick>
 800abda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abdc:	e00a      	b.n	800abf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abde:	f7fd f879 	bl	8007cd4 <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abec:	4293      	cmp	r3, r2
 800abee:	d901      	bls.n	800abf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e09b      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abf4:	4b40      	ldr	r3, [pc, #256]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800abf6:	6a1b      	ldr	r3, [r3, #32]
 800abf8:	f003 0302 	and.w	r3, r3, #2
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1ee      	bne.n	800abde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ac00:	7dfb      	ldrb	r3, [r7, #23]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d105      	bne.n	800ac12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac06:	4b3c      	ldr	r3, [pc, #240]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac08:	69db      	ldr	r3, [r3, #28]
 800ac0a:	4a3b      	ldr	r2, [pc, #236]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f000 8087 	beq.w	800ad2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ac1c:	4b36      	ldr	r3, [pc, #216]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	f003 030c 	and.w	r3, r3, #12
 800ac24:	2b08      	cmp	r3, #8
 800ac26:	d061      	beq.n	800acec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	69db      	ldr	r3, [r3, #28]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d146      	bne.n	800acbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac30:	4b33      	ldr	r3, [pc, #204]	@ (800ad00 <HAL_RCC_OscConfig+0x4cc>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac36:	f7fd f84d 	bl	8007cd4 <HAL_GetTick>
 800ac3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac3c:	e008      	b.n	800ac50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac3e:	f7fd f849 	bl	8007cd4 <HAL_GetTick>
 800ac42:	4602      	mov	r2, r0
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d901      	bls.n	800ac50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e06d      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac50:	4b29      	ldr	r3, [pc, #164]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1f0      	bne.n	800ac3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a1b      	ldr	r3, [r3, #32]
 800ac60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac64:	d108      	bne.n	800ac78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ac66:	4b24      	ldr	r3, [pc, #144]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	4921      	ldr	r1, [pc, #132]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac74:	4313      	orrs	r3, r2
 800ac76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac78:	4b1f      	ldr	r3, [pc, #124]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a19      	ldr	r1, [r3, #32]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac88:	430b      	orrs	r3, r1
 800ac8a:	491b      	ldr	r1, [pc, #108]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac90:	4b1b      	ldr	r3, [pc, #108]	@ (800ad00 <HAL_RCC_OscConfig+0x4cc>)
 800ac92:	2201      	movs	r2, #1
 800ac94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac96:	f7fd f81d 	bl	8007cd4 <HAL_GetTick>
 800ac9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac9c:	e008      	b.n	800acb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac9e:	f7fd f819 	bl	8007cd4 <HAL_GetTick>
 800aca2:	4602      	mov	r2, r0
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	d901      	bls.n	800acb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800acac:	2303      	movs	r3, #3
 800acae:	e03d      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800acb0:	4b11      	ldr	r3, [pc, #68]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d0f0      	beq.n	800ac9e <HAL_RCC_OscConfig+0x46a>
 800acbc:	e035      	b.n	800ad2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acbe:	4b10      	ldr	r3, [pc, #64]	@ (800ad00 <HAL_RCC_OscConfig+0x4cc>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acc4:	f7fd f806 	bl	8007cd4 <HAL_GetTick>
 800acc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acca:	e008      	b.n	800acde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800accc:	f7fd f802 	bl	8007cd4 <HAL_GetTick>
 800acd0:	4602      	mov	r2, r0
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	d901      	bls.n	800acde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800acda:	2303      	movs	r3, #3
 800acdc:	e026      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acde:	4b06      	ldr	r3, [pc, #24]	@ (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1f0      	bne.n	800accc <HAL_RCC_OscConfig+0x498>
 800acea:	e01e      	b.n	800ad2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	69db      	ldr	r3, [r3, #28]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d107      	bne.n	800ad04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e019      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
 800acf8:	40021000 	.word	0x40021000
 800acfc:	40007000 	.word	0x40007000
 800ad00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ad04:	4b0b      	ldr	r3, [pc, #44]	@ (800ad34 <HAL_RCC_OscConfig+0x500>)
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a1b      	ldr	r3, [r3, #32]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d106      	bne.n	800ad26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d001      	beq.n	800ad2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e000      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3718      	adds	r7, #24
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	40021000 	.word	0x40021000

0800ad38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d101      	bne.n	800ad4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e0d0      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad4c:	4b6a      	ldr	r3, [pc, #424]	@ (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 0307 	and.w	r3, r3, #7
 800ad54:	683a      	ldr	r2, [r7, #0]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d910      	bls.n	800ad7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad5a:	4b67      	ldr	r3, [pc, #412]	@ (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f023 0207 	bic.w	r2, r3, #7
 800ad62:	4965      	ldr	r1, [pc, #404]	@ (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad6a:	4b63      	ldr	r3, [pc, #396]	@ (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f003 0307 	and.w	r3, r3, #7
 800ad72:	683a      	ldr	r2, [r7, #0]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d001      	beq.n	800ad7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e0b8      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 0302 	and.w	r3, r3, #2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d020      	beq.n	800adca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f003 0304 	and.w	r3, r3, #4
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d005      	beq.n	800ada0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad94:	4b59      	ldr	r3, [pc, #356]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	4a58      	ldr	r2, [pc, #352]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ad9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ad9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f003 0308 	and.w	r3, r3, #8
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d005      	beq.n	800adb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800adac:	4b53      	ldr	r3, [pc, #332]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	4a52      	ldr	r2, [pc, #328]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800adb2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800adb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adb8:	4b50      	ldr	r3, [pc, #320]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	494d      	ldr	r1, [pc, #308]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800adc6:	4313      	orrs	r3, r2
 800adc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	d040      	beq.n	800ae58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	2b01      	cmp	r3, #1
 800addc:	d107      	bne.n	800adee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adde:	4b47      	ldr	r3, [pc, #284]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d115      	bne.n	800ae16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	e07f      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d107      	bne.n	800ae06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adf6:	4b41      	ldr	r3, [pc, #260]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d109      	bne.n	800ae16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e073      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae06:	4b3d      	ldr	r3, [pc, #244]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f003 0302 	and.w	r3, r3, #2
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e06b      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae16:	4b39      	ldr	r3, [pc, #228]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f023 0203 	bic.w	r2, r3, #3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	4936      	ldr	r1, [pc, #216]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ae24:	4313      	orrs	r3, r2
 800ae26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae28:	f7fc ff54 	bl	8007cd4 <HAL_GetTick>
 800ae2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae2e:	e00a      	b.n	800ae46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae30:	f7fc ff50 	bl	8007cd4 <HAL_GetTick>
 800ae34:	4602      	mov	r2, r0
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d901      	bls.n	800ae46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e053      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae46:	4b2d      	ldr	r3, [pc, #180]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	f003 020c 	and.w	r2, r3, #12
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d1eb      	bne.n	800ae30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae58:	4b27      	ldr	r3, [pc, #156]	@ (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 0307 	and.w	r3, r3, #7
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d210      	bcs.n	800ae88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae66:	4b24      	ldr	r3, [pc, #144]	@ (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f023 0207 	bic.w	r2, r3, #7
 800ae6e:	4922      	ldr	r1, [pc, #136]	@ (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae76:	4b20      	ldr	r3, [pc, #128]	@ (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 0307 	and.w	r3, r3, #7
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d001      	beq.n	800ae88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e032      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 0304 	and.w	r3, r3, #4
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d008      	beq.n	800aea6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae94:	4b19      	ldr	r3, [pc, #100]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	4916      	ldr	r1, [pc, #88]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800aea2:	4313      	orrs	r3, r2
 800aea4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f003 0308 	and.w	r3, r3, #8
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d009      	beq.n	800aec6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aeb2:	4b12      	ldr	r3, [pc, #72]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	00db      	lsls	r3, r3, #3
 800aec0:	490e      	ldr	r1, [pc, #56]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800aec2:	4313      	orrs	r3, r2
 800aec4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aec6:	f000 f821 	bl	800af0c <HAL_RCC_GetSysClockFreq>
 800aeca:	4602      	mov	r2, r0
 800aecc:	4b0b      	ldr	r3, [pc, #44]	@ (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	091b      	lsrs	r3, r3, #4
 800aed2:	f003 030f 	and.w	r3, r3, #15
 800aed6:	490a      	ldr	r1, [pc, #40]	@ (800af00 <HAL_RCC_ClockConfig+0x1c8>)
 800aed8:	5ccb      	ldrb	r3, [r1, r3]
 800aeda:	fa22 f303 	lsr.w	r3, r2, r3
 800aede:	4a09      	ldr	r2, [pc, #36]	@ (800af04 <HAL_RCC_ClockConfig+0x1cc>)
 800aee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aee2:	4b09      	ldr	r3, [pc, #36]	@ (800af08 <HAL_RCC_ClockConfig+0x1d0>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fa fe7c 	bl	8005be4 <HAL_InitTick>

  return HAL_OK;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	40022000 	.word	0x40022000
 800aefc:	40021000 	.word	0x40021000
 800af00:	08016068 	.word	0x08016068
 800af04:	20000028 	.word	0x20000028
 800af08:	2000007c 	.word	0x2000007c

0800af0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b087      	sub	sp, #28
 800af10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800af12:	2300      	movs	r3, #0
 800af14:	60fb      	str	r3, [r7, #12]
 800af16:	2300      	movs	r3, #0
 800af18:	60bb      	str	r3, [r7, #8]
 800af1a:	2300      	movs	r3, #0
 800af1c:	617b      	str	r3, [r7, #20]
 800af1e:	2300      	movs	r3, #0
 800af20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800af22:	2300      	movs	r3, #0
 800af24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800af26:	4b1e      	ldr	r3, [pc, #120]	@ (800afa0 <HAL_RCC_GetSysClockFreq+0x94>)
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f003 030c 	and.w	r3, r3, #12
 800af32:	2b04      	cmp	r3, #4
 800af34:	d002      	beq.n	800af3c <HAL_RCC_GetSysClockFreq+0x30>
 800af36:	2b08      	cmp	r3, #8
 800af38:	d003      	beq.n	800af42 <HAL_RCC_GetSysClockFreq+0x36>
 800af3a:	e027      	b.n	800af8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800af3c:	4b19      	ldr	r3, [pc, #100]	@ (800afa4 <HAL_RCC_GetSysClockFreq+0x98>)
 800af3e:	613b      	str	r3, [r7, #16]
      break;
 800af40:	e027      	b.n	800af92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	0c9b      	lsrs	r3, r3, #18
 800af46:	f003 030f 	and.w	r3, r3, #15
 800af4a:	4a17      	ldr	r2, [pc, #92]	@ (800afa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800af4c:	5cd3      	ldrb	r3, [r2, r3]
 800af4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d010      	beq.n	800af7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800af5a:	4b11      	ldr	r3, [pc, #68]	@ (800afa0 <HAL_RCC_GetSysClockFreq+0x94>)
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	0c5b      	lsrs	r3, r3, #17
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	4a11      	ldr	r2, [pc, #68]	@ (800afac <HAL_RCC_GetSysClockFreq+0xa0>)
 800af66:	5cd3      	ldrb	r3, [r2, r3]
 800af68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a0d      	ldr	r2, [pc, #52]	@ (800afa4 <HAL_RCC_GetSysClockFreq+0x98>)
 800af6e:	fb03 f202 	mul.w	r2, r3, r2
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	fbb2 f3f3 	udiv	r3, r2, r3
 800af78:	617b      	str	r3, [r7, #20]
 800af7a:	e004      	b.n	800af86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a0c      	ldr	r2, [pc, #48]	@ (800afb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800af80:	fb02 f303 	mul.w	r3, r2, r3
 800af84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	613b      	str	r3, [r7, #16]
      break;
 800af8a:	e002      	b.n	800af92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800af8c:	4b05      	ldr	r3, [pc, #20]	@ (800afa4 <HAL_RCC_GetSysClockFreq+0x98>)
 800af8e:	613b      	str	r3, [r7, #16]
      break;
 800af90:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af92:	693b      	ldr	r3, [r7, #16]
}
 800af94:	4618      	mov	r0, r3
 800af96:	371c      	adds	r7, #28
 800af98:	46bd      	mov	sp, r7
 800af9a:	bc80      	pop	{r7}
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	40021000 	.word	0x40021000
 800afa4:	007a1200 	.word	0x007a1200
 800afa8:	08016080 	.word	0x08016080
 800afac:	08016090 	.word	0x08016090
 800afb0:	003d0900 	.word	0x003d0900

0800afb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800afb8:	4b02      	ldr	r3, [pc, #8]	@ (800afc4 <HAL_RCC_GetHCLKFreq+0x10>)
 800afba:	681b      	ldr	r3, [r3, #0]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bc80      	pop	{r7}
 800afc2:	4770      	bx	lr
 800afc4:	20000028 	.word	0x20000028

0800afc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800afcc:	f7ff fff2 	bl	800afb4 <HAL_RCC_GetHCLKFreq>
 800afd0:	4602      	mov	r2, r0
 800afd2:	4b05      	ldr	r3, [pc, #20]	@ (800afe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	0a1b      	lsrs	r3, r3, #8
 800afd8:	f003 0307 	and.w	r3, r3, #7
 800afdc:	4903      	ldr	r1, [pc, #12]	@ (800afec <HAL_RCC_GetPCLK1Freq+0x24>)
 800afde:	5ccb      	ldrb	r3, [r1, r3]
 800afe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	40021000 	.word	0x40021000
 800afec:	08016078 	.word	0x08016078

0800aff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aff4:	f7ff ffde 	bl	800afb4 <HAL_RCC_GetHCLKFreq>
 800aff8:	4602      	mov	r2, r0
 800affa:	4b05      	ldr	r3, [pc, #20]	@ (800b010 <HAL_RCC_GetPCLK2Freq+0x20>)
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	0adb      	lsrs	r3, r3, #11
 800b000:	f003 0307 	and.w	r3, r3, #7
 800b004:	4903      	ldr	r1, [pc, #12]	@ (800b014 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b006:	5ccb      	ldrb	r3, [r1, r3]
 800b008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	40021000 	.word	0x40021000
 800b014:	08016078 	.word	0x08016078

0800b018 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	220f      	movs	r2, #15
 800b026:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b028:	4b11      	ldr	r3, [pc, #68]	@ (800b070 <HAL_RCC_GetClockConfig+0x58>)
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	f003 0203 	and.w	r2, r3, #3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b034:	4b0e      	ldr	r3, [pc, #56]	@ (800b070 <HAL_RCC_GetClockConfig+0x58>)
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b040:	4b0b      	ldr	r3, [pc, #44]	@ (800b070 <HAL_RCC_GetClockConfig+0x58>)
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b04c:	4b08      	ldr	r3, [pc, #32]	@ (800b070 <HAL_RCC_GetClockConfig+0x58>)
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	08db      	lsrs	r3, r3, #3
 800b052:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b05a:	4b06      	ldr	r3, [pc, #24]	@ (800b074 <HAL_RCC_GetClockConfig+0x5c>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 0207 	and.w	r2, r3, #7
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800b066:	bf00      	nop
 800b068:	370c      	adds	r7, #12
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bc80      	pop	{r7}
 800b06e:	4770      	bx	lr
 800b070:	40021000 	.word	0x40021000
 800b074:	40022000 	.word	0x40022000

0800b078 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b080:	4b0a      	ldr	r3, [pc, #40]	@ (800b0ac <RCC_Delay+0x34>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a0a      	ldr	r2, [pc, #40]	@ (800b0b0 <RCC_Delay+0x38>)
 800b086:	fba2 2303 	umull	r2, r3, r2, r3
 800b08a:	0a5b      	lsrs	r3, r3, #9
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	fb02 f303 	mul.w	r3, r2, r3
 800b092:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b094:	bf00      	nop
  }
  while (Delay --);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	1e5a      	subs	r2, r3, #1
 800b09a:	60fa      	str	r2, [r7, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1f9      	bne.n	800b094 <RCC_Delay+0x1c>
}
 800b0a0:	bf00      	nop
 800b0a2:	bf00      	nop
 800b0a4:	3714      	adds	r7, #20
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bc80      	pop	{r7}
 800b0aa:	4770      	bx	lr
 800b0ac:	20000028 	.word	0x20000028
 800b0b0:	10624dd3 	.word	0x10624dd3

0800b0b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e022      	b.n	800b10c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d105      	bne.n	800b0de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f7fa fcf1 	bl	8005ac0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2203      	movs	r2, #3
 800b0e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 f814 	bl	800b114 <HAL_SD_InitCard>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d001      	beq.n	800b0f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e00a      	b.n	800b10c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2201      	movs	r2, #1
 800b106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b114:	b5b0      	push	{r4, r5, r7, lr}
 800b116:	b08e      	sub	sp, #56	@ 0x38
 800b118:	af04      	add	r7, sp, #16
 800b11a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800b11c:	2300      	movs	r3, #0
 800b11e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800b120:	2300      	movs	r3, #0
 800b122:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b124:	2300      	movs	r3, #0
 800b126:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800b128:	2300      	movs	r3, #0
 800b12a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b12c:	2300      	movs	r3, #0
 800b12e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800b130:	2376      	movs	r3, #118	@ 0x76
 800b132:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681d      	ldr	r5, [r3, #0]
 800b138:	466c      	mov	r4, sp
 800b13a:	f107 0314 	add.w	r3, r7, #20
 800b13e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b146:	f107 0308 	add.w	r3, r7, #8
 800b14a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b14c:	4628      	mov	r0, r5
 800b14e:	f002 fec3 	bl	800ded8 <SDIO_Init>
 800b152:	4603      	mov	r3, r0
 800b154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800b158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d001      	beq.n	800b164 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b160:	2301      	movs	r3, #1
 800b162:	e04f      	b.n	800b204 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b164:	4b29      	ldr	r3, [pc, #164]	@ (800b20c <HAL_SD_InitCard+0xf8>)
 800b166:	2200      	movs	r2, #0
 800b168:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4618      	mov	r0, r3
 800b170:	f002 fef8 	bl	800df64 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b174:	4b25      	ldr	r3, [pc, #148]	@ (800b20c <HAL_SD_InitCard+0xf8>)
 800b176:	2201      	movs	r2, #1
 800b178:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b17a:	2002      	movs	r0, #2
 800b17c:	f7fc fdb4 	bl	8007ce8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fe69 	bl	800be58 <SD_PowerON>
 800b186:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b188:	6a3b      	ldr	r3, [r7, #32]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00b      	beq.n	800b1a6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2201      	movs	r2, #1
 800b192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	431a      	orrs	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e02e      	b.n	800b204 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fd87 	bl	800bcba <SD_InitCard>
 800b1ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00b      	beq.n	800b1cc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1c0:	6a3b      	ldr	r3, [r7, #32]
 800b1c2:	431a      	orrs	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e01b      	b.n	800b204 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f002 ff51 	bl	800e07c <SDMMC_CmdBlockLength>
 800b1da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1dc:	6a3b      	ldr	r3, [r7, #32]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00f      	beq.n	800b202 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a0a      	ldr	r2, [pc, #40]	@ (800b210 <HAL_SD_InitCard+0xfc>)
 800b1e8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1ee:	6a3b      	ldr	r3, [r7, #32]
 800b1f0:	431a      	orrs	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e000      	b.n	800b204 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3728      	adds	r7, #40	@ 0x28
 800b208:	46bd      	mov	sp, r7
 800b20a:	bdb0      	pop	{r4, r5, r7, pc}
 800b20c:	423000a0 	.word	0x423000a0
 800b210:	004005ff 	.word	0x004005ff

0800b214 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b092      	sub	sp, #72	@ 0x48
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
 800b220:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b222:	f7fc fd57 	bl	8007cd4 <HAL_GetTick>
 800b226:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d107      	bne.n	800b246 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b23a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b242:	2301      	movs	r3, #1
 800b244:	e1bd      	b.n	800b5c2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	2b01      	cmp	r3, #1
 800b250:	f040 81b0 	bne.w	800b5b4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b25a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	441a      	add	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b264:	429a      	cmp	r2, r3
 800b266:	d907      	bls.n	800b278 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b26c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	e1a4      	b.n	800b5c2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2203      	movs	r2, #3
 800b27c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2200      	movs	r2, #0
 800b286:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d002      	beq.n	800b296 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b292:	025b      	lsls	r3, r3, #9
 800b294:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b296:	f04f 33ff 	mov.w	r3, #4294967295
 800b29a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	025b      	lsls	r3, r3, #9
 800b2a0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b2a2:	2390      	movs	r3, #144	@ 0x90
 800b2a4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b2a6:	2302      	movs	r3, #2
 800b2a8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f107 0214 	add.w	r2, r7, #20
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f002 feb2 	bl	800e026 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d90a      	bls.n	800b2de <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2202      	movs	r2, #2
 800b2cc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f002 ff15 	bl	800e104 <SDMMC_CmdReadMultiBlock>
 800b2da:	6478      	str	r0, [r7, #68]	@ 0x44
 800b2dc:	e009      	b.n	800b2f2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f002 fee8 	bl	800e0c0 <SDMMC_CmdReadSingleBlock>
 800b2f0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d012      	beq.n	800b31e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a7a      	ldr	r2, [pc, #488]	@ (800b4e8 <HAL_SD_ReadBlocks+0x2d4>)
 800b2fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b306:	431a      	orrs	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b31a:	2301      	movs	r3, #1
 800b31c:	e151      	b.n	800b5c2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b322:	e061      	b.n	800b3e8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b32a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d03c      	beq.n	800b3ac <HAL_SD_ReadBlocks+0x198>
 800b332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b334:	2b00      	cmp	r3, #0
 800b336:	d039      	beq.n	800b3ac <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b338:	2300      	movs	r3, #0
 800b33a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b33c:	e033      	b.n	800b3a6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4618      	mov	r0, r3
 800b344:	f002 fdf2 	bl	800df2c <SDIO_ReadFIFO>
 800b348:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34c:	b2da      	uxtb	r2, r3
 800b34e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b350:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b354:	3301      	adds	r3, #1
 800b356:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b35a:	3b01      	subs	r3, #1
 800b35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b360:	0a1b      	lsrs	r3, r3, #8
 800b362:	b2da      	uxtb	r2, r3
 800b364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b366:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b36a:	3301      	adds	r3, #1
 800b36c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b36e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b370:	3b01      	subs	r3, #1
 800b372:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b376:	0c1b      	lsrs	r3, r3, #16
 800b378:	b2da      	uxtb	r2, r3
 800b37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b37c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b37e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b380:	3301      	adds	r3, #1
 800b382:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b386:	3b01      	subs	r3, #1
 800b388:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b38c:	0e1b      	lsrs	r3, r3, #24
 800b38e:	b2da      	uxtb	r2, r3
 800b390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b392:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b396:	3301      	adds	r3, #1
 800b398:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b39a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b39c:	3b01      	subs	r3, #1
 800b39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800b3a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3a8:	2b07      	cmp	r3, #7
 800b3aa:	d9c8      	bls.n	800b33e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b3ac:	f7fc fc92 	bl	8007cd4 <HAL_GetTick>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d902      	bls.n	800b3c2 <HAL_SD_ReadBlocks+0x1ae>
 800b3bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d112      	bne.n	800b3e8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a48      	ldr	r2, [pc, #288]	@ (800b4e8 <HAL_SD_ReadBlocks+0x2d4>)
 800b3c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e0ec      	b.n	800b5c2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3ee:	f240 332a 	movw	r3, #810	@ 0x32a
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d095      	beq.n	800b324 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b402:	2b00      	cmp	r3, #0
 800b404:	d022      	beq.n	800b44c <HAL_SD_ReadBlocks+0x238>
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d91f      	bls.n	800b44c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b410:	2b03      	cmp	r3, #3
 800b412:	d01b      	beq.n	800b44c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4618      	mov	r0, r3
 800b41a:	f002 fed9 	bl	800e1d0 <SDMMC_CmdStopTransfer>
 800b41e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b422:	2b00      	cmp	r3, #0
 800b424:	d012      	beq.n	800b44c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a2f      	ldr	r2, [pc, #188]	@ (800b4e8 <HAL_SD_ReadBlocks+0x2d4>)
 800b42c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b434:	431a      	orrs	r2, r3
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2201      	movs	r2, #1
 800b43e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2200      	movs	r2, #0
 800b446:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	e0ba      	b.n	800b5c2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b452:	f003 0308 	and.w	r3, r3, #8
 800b456:	2b00      	cmp	r3, #0
 800b458:	d012      	beq.n	800b480 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a22      	ldr	r2, [pc, #136]	@ (800b4e8 <HAL_SD_ReadBlocks+0x2d4>)
 800b460:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b466:	f043 0208 	orr.w	r2, r3, #8
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2200      	movs	r2, #0
 800b47a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b47c:	2301      	movs	r3, #1
 800b47e:	e0a0      	b.n	800b5c2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b486:	f003 0302 	and.w	r3, r3, #2
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d012      	beq.n	800b4b4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a15      	ldr	r2, [pc, #84]	@ (800b4e8 <HAL_SD_ReadBlocks+0x2d4>)
 800b494:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b49a:	f043 0202 	orr.w	r2, r3, #2
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e086      	b.n	800b5c2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4ba:	f003 0320 	and.w	r3, r3, #32
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d063      	beq.n	800b58a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a08      	ldr	r2, [pc, #32]	@ (800b4e8 <HAL_SD_ReadBlocks+0x2d4>)
 800b4c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4ce:	f043 0220 	orr.w	r2, r3, #32
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e06c      	b.n	800b5c2 <HAL_SD_ReadBlocks+0x3ae>
 800b4e8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f002 fd1b 	bl	800df2c <SDIO_ReadFIFO>
 800b4f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800b4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4fe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b502:	3301      	adds	r3, #1
 800b504:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b508:	3b01      	subs	r3, #1
 800b50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b50e:	0a1b      	lsrs	r3, r3, #8
 800b510:	b2da      	uxtb	r2, r3
 800b512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b514:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b518:	3301      	adds	r3, #1
 800b51a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b51c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b51e:	3b01      	subs	r3, #1
 800b520:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b524:	0c1b      	lsrs	r3, r3, #16
 800b526:	b2da      	uxtb	r2, r3
 800b528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b52a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b52c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b52e:	3301      	adds	r3, #1
 800b530:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b534:	3b01      	subs	r3, #1
 800b536:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b53a:	0e1b      	lsrs	r3, r3, #24
 800b53c:	b2da      	uxtb	r2, r3
 800b53e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b540:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b544:	3301      	adds	r3, #1
 800b546:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b54a:	3b01      	subs	r3, #1
 800b54c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b54e:	f7fc fbc1 	bl	8007cd4 <HAL_GetTick>
 800b552:	4602      	mov	r2, r0
 800b554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d902      	bls.n	800b564 <HAL_SD_ReadBlocks+0x350>
 800b55e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b560:	2b00      	cmp	r3, #0
 800b562:	d112      	bne.n	800b58a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a18      	ldr	r2, [pc, #96]	@ (800b5cc <HAL_SD_ReadBlocks+0x3b8>)
 800b56a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b570:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e01b      	b.n	800b5c2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <HAL_SD_ReadBlocks+0x38a>
 800b598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1a6      	bne.n	800b4ec <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b5a6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	e006      	b.n	800b5c2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b5c0:	2301      	movs	r3, #1
  }
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3748      	adds	r7, #72	@ 0x48
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	004005ff 	.word	0x004005ff

0800b5d0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b092      	sub	sp, #72	@ 0x48
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
 800b5dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b5de:	f7fc fb79 	bl	8007cd4 <HAL_GetTick>
 800b5e2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d107      	bne.n	800b602 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	e166      	b.n	800b8d0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	f040 8159 	bne.w	800b8c2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2200      	movs	r2, #0
 800b614:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b616:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	441a      	add	r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b620:	429a      	cmp	r2, r3
 800b622:	d907      	bls.n	800b634 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b628:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800b630:	2301      	movs	r3, #1
 800b632:	e14d      	b.n	800b8d0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2203      	movs	r2, #3
 800b638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2200      	movs	r2, #0
 800b642:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d002      	beq.n	800b652 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b64e:	025b      	lsls	r3, r3, #9
 800b650:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b652:	f04f 33ff 	mov.w	r3, #4294967295
 800b656:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	025b      	lsls	r3, r3, #9
 800b65c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b65e:	2390      	movs	r3, #144	@ 0x90
 800b660:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b662:	2300      	movs	r3, #0
 800b664:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b666:	2300      	movs	r3, #0
 800b668:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b66a:	2301      	movs	r3, #1
 800b66c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f107 0218 	add.w	r2, r7, #24
 800b676:	4611      	mov	r1, r2
 800b678:	4618      	mov	r0, r3
 800b67a:	f002 fcd4 	bl	800e026 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d90a      	bls.n	800b69a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2220      	movs	r2, #32
 800b688:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b690:	4618      	mov	r0, r3
 800b692:	f002 fd7b 	bl	800e18c <SDMMC_CmdWriteMultiBlock>
 800b696:	6478      	str	r0, [r7, #68]	@ 0x44
 800b698:	e009      	b.n	800b6ae <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2210      	movs	r2, #16
 800b69e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f002 fd4e 	bl	800e148 <SDMMC_CmdWriteSingleBlock>
 800b6ac:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d012      	beq.n	800b6da <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a87      	ldr	r2, [pc, #540]	@ (800b8d8 <HAL_SD_WriteBlocks+0x308>)
 800b6ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6c2:	431a      	orrs	r2, r3
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e0fa      	b.n	800b8d0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b6de:	e065      	b.n	800b7ac <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d040      	beq.n	800b770 <HAL_SD_WriteBlocks+0x1a0>
 800b6ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d03d      	beq.n	800b770 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6f8:	e037      	b.n	800b76a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800b6fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b702:	3301      	adds	r3, #1
 800b704:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b708:	3b01      	subs	r3, #1
 800b70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800b70c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	021a      	lsls	r2, r3, #8
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	4313      	orrs	r3, r2
 800b716:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b71a:	3301      	adds	r3, #1
 800b71c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b71e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b720:	3b01      	subs	r3, #1
 800b722:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800b724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	041a      	lsls	r2, r3, #16
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b732:	3301      	adds	r3, #1
 800b734:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b738:	3b01      	subs	r3, #1
 800b73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	061a      	lsls	r2, r3, #24
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	4313      	orrs	r3, r2
 800b746:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b74a:	3301      	adds	r3, #1
 800b74c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b750:	3b01      	subs	r3, #1
 800b752:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f107 0214 	add.w	r2, r7, #20
 800b75c:	4611      	mov	r1, r2
 800b75e:	4618      	mov	r0, r3
 800b760:	f002 fbf0 	bl	800df44 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800b764:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b766:	3301      	adds	r3, #1
 800b768:	643b      	str	r3, [r7, #64]	@ 0x40
 800b76a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b76c:	2b07      	cmp	r3, #7
 800b76e:	d9c4      	bls.n	800b6fa <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b770:	f7fc fab0 	bl	8007cd4 <HAL_GetTick>
 800b774:	4602      	mov	r2, r0
 800b776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d902      	bls.n	800b786 <HAL_SD_WriteBlocks+0x1b6>
 800b780:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b782:	2b00      	cmp	r3, #0
 800b784:	d112      	bne.n	800b7ac <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a53      	ldr	r2, [pc, #332]	@ (800b8d8 <HAL_SD_WriteBlocks+0x308>)
 800b78c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b794:	431a      	orrs	r2, r3
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800b7a8:	2303      	movs	r3, #3
 800b7aa:	e091      	b.n	800b8d0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7b2:	f240 331a 	movw	r3, #794	@ 0x31a
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d091      	beq.n	800b6e0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d022      	beq.n	800b810 <HAL_SD_WriteBlocks+0x240>
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d91f      	bls.n	800b810 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7d4:	2b03      	cmp	r3, #3
 800b7d6:	d01b      	beq.n	800b810 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f002 fcf7 	bl	800e1d0 <SDMMC_CmdStopTransfer>
 800b7e2:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b7e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d012      	beq.n	800b810 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a3a      	ldr	r2, [pc, #232]	@ (800b8d8 <HAL_SD_WriteBlocks+0x308>)
 800b7f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7f8:	431a      	orrs	r2, r3
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2201      	movs	r2, #1
 800b802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e05f      	b.n	800b8d0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b816:	f003 0308 	and.w	r3, r3, #8
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d012      	beq.n	800b844 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a2d      	ldr	r2, [pc, #180]	@ (800b8d8 <HAL_SD_WriteBlocks+0x308>)
 800b824:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b82a:	f043 0208 	orr.w	r2, r3, #8
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2200      	movs	r2, #0
 800b83e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b840:	2301      	movs	r3, #1
 800b842:	e045      	b.n	800b8d0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b84a:	f003 0302 	and.w	r3, r3, #2
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d012      	beq.n	800b878 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a20      	ldr	r2, [pc, #128]	@ (800b8d8 <HAL_SD_WriteBlocks+0x308>)
 800b858:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b85e:	f043 0202 	orr.w	r2, r3, #2
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2201      	movs	r2, #1
 800b86a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	e02b      	b.n	800b8d0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b87e:	f003 0310 	and.w	r3, r3, #16
 800b882:	2b00      	cmp	r3, #0
 800b884:	d012      	beq.n	800b8ac <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a13      	ldr	r2, [pc, #76]	@ (800b8d8 <HAL_SD_WriteBlocks+0x308>)
 800b88c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b892:	f043 0210 	orr.w	r2, r3, #16
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e011      	b.n	800b8d0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b8b4:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	e006      	b.n	800b8d0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
  }
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3748      	adds	r7, #72	@ 0x48
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	004005ff 	.word	0x004005ff

0800b8dc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8ea:	0f9b      	lsrs	r3, r3, #30
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8f6:	0e9b      	lsrs	r3, r3, #26
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	f003 030f 	and.w	r3, r3, #15
 800b8fe:	b2da      	uxtb	r2, r3
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b908:	0e1b      	lsrs	r3, r3, #24
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	f003 0303 	and.w	r3, r3, #3
 800b910:	b2da      	uxtb	r2, r3
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b91a:	0c1b      	lsrs	r3, r3, #16
 800b91c:	b2da      	uxtb	r2, r3
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b926:	0a1b      	lsrs	r3, r3, #8
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b932:	b2da      	uxtb	r2, r3
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b93c:	0d1b      	lsrs	r3, r3, #20
 800b93e:	b29a      	uxth	r2, r3
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b948:	0c1b      	lsrs	r3, r3, #16
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	f003 030f 	and.w	r3, r3, #15
 800b950:	b2da      	uxtb	r2, r3
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b95a:	0bdb      	lsrs	r3, r3, #15
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	f003 0301 	and.w	r3, r3, #1
 800b962:	b2da      	uxtb	r2, r3
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b96c:	0b9b      	lsrs	r3, r3, #14
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	b2da      	uxtb	r2, r3
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b97e:	0b5b      	lsrs	r3, r3, #13
 800b980:	b2db      	uxtb	r3, r3
 800b982:	f003 0301 	and.w	r3, r3, #1
 800b986:	b2da      	uxtb	r2, r3
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b990:	0b1b      	lsrs	r3, r3, #12
 800b992:	b2db      	uxtb	r3, r3
 800b994:	f003 0301 	and.w	r3, r3, #1
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d163      	bne.n	800ba74 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b9b0:	009a      	lsls	r2, r3, #2
 800b9b2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b9b6:	4013      	ands	r3, r2
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800b9bc:	0f92      	lsrs	r2, r2, #30
 800b9be:	431a      	orrs	r2, r3
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9c8:	0edb      	lsrs	r3, r3, #27
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	f003 0307 	and.w	r3, r3, #7
 800b9d0:	b2da      	uxtb	r2, r3
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9da:	0e1b      	lsrs	r3, r3, #24
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	f003 0307 	and.w	r3, r3, #7
 800b9e2:	b2da      	uxtb	r2, r3
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9ec:	0d5b      	lsrs	r3, r3, #21
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	f003 0307 	and.w	r3, r3, #7
 800b9f4:	b2da      	uxtb	r2, r3
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9fe:	0c9b      	lsrs	r3, r3, #18
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	f003 0307 	and.w	r3, r3, #7
 800ba06:	b2da      	uxtb	r2, r3
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba10:	0bdb      	lsrs	r3, r3, #15
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	f003 0307 	and.w	r3, r3, #7
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	691b      	ldr	r3, [r3, #16]
 800ba22:	1c5a      	adds	r2, r3, #1
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	7e1b      	ldrb	r3, [r3, #24]
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	f003 0307 	and.w	r3, r3, #7
 800ba32:	3302      	adds	r3, #2
 800ba34:	2201      	movs	r2, #1
 800ba36:	fa02 f303 	lsl.w	r3, r2, r3
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800ba3e:	fb03 f202 	mul.w	r2, r3, r2
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	7a1b      	ldrb	r3, [r3, #8]
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	f003 030f 	and.w	r3, r3, #15
 800ba50:	2201      	movs	r2, #1
 800ba52:	409a      	lsls	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800ba60:	0a52      	lsrs	r2, r2, #9
 800ba62:	fb03 f202 	mul.w	r2, r3, r2
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba70:	661a      	str	r2, [r3, #96]	@ 0x60
 800ba72:	e031      	b.n	800bad8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d11d      	bne.n	800bab8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba80:	041b      	lsls	r3, r3, #16
 800ba82:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba8a:	0c1b      	lsrs	r3, r3, #16
 800ba8c:	431a      	orrs	r2, r3
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	3301      	adds	r3, #1
 800ba98:	029a      	lsls	r2, r3, #10
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800baac:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	661a      	str	r2, [r3, #96]	@ 0x60
 800bab6:	e00f      	b.n	800bad8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a58      	ldr	r2, [pc, #352]	@ (800bc20 <HAL_SD_GetCardCSD+0x344>)
 800babe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bac4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e09d      	b.n	800bc14 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800badc:	0b9b      	lsrs	r3, r3, #14
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	f003 0301 	and.w	r3, r3, #1
 800bae4:	b2da      	uxtb	r2, r3
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800baee:	09db      	lsrs	r3, r3, #7
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb10:	0fdb      	lsrs	r3, r3, #31
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb1c:	0f5b      	lsrs	r3, r3, #29
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	f003 0303 	and.w	r3, r3, #3
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb2e:	0e9b      	lsrs	r3, r3, #26
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	f003 0307 	and.w	r3, r3, #7
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb40:	0d9b      	lsrs	r3, r3, #22
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	f003 030f 	and.w	r3, r3, #15
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb52:	0d5b      	lsrs	r3, r3, #21
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	f003 0301 	and.w	r3, r3, #1
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb6e:	0c1b      	lsrs	r3, r3, #16
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	b2da      	uxtb	r2, r3
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb82:	0bdb      	lsrs	r3, r3, #15
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	f003 0301 	and.w	r3, r3, #1
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb96:	0b9b      	lsrs	r3, r3, #14
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	f003 0301 	and.w	r3, r3, #1
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbaa:	0b5b      	lsrs	r3, r3, #13
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	f003 0301 	and.w	r3, r3, #1
 800bbb2:	b2da      	uxtb	r2, r3
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbbe:	0b1b      	lsrs	r3, r3, #12
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	f003 0301 	and.w	r3, r3, #1
 800bbc6:	b2da      	uxtb	r2, r3
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbd2:	0a9b      	lsrs	r3, r3, #10
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	f003 0303 	and.w	r3, r3, #3
 800bbda:	b2da      	uxtb	r2, r3
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbe6:	0a1b      	lsrs	r3, r3, #8
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	f003 0303 	and.w	r3, r3, #3
 800bbee:	b2da      	uxtb	r2, r3
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbfa:	085b      	lsrs	r3, r3, #1
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc02:	b2da      	uxtb	r2, r3
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bc80      	pop	{r7}
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	004005ff 	.word	0x004005ff

0800bc24 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bc80      	pop	{r7}
 800bc78:	4770      	bx	lr

0800bc7a <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b086      	sub	sp, #24
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bc82:	2300      	movs	r3, #0
 800bc84:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800bc86:	f107 030c 	add.w	r3, r7, #12
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 f971 	bl	800bf74 <SD_SendStatus>
 800bc92:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d005      	beq.n	800bca6 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	431a      	orrs	r2, r3
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	0a5b      	lsrs	r3, r3, #9
 800bcaa:	f003 030f 	and.w	r3, r3, #15
 800bcae:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800bcb0:	693b      	ldr	r3, [r7, #16]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3718      	adds	r7, #24
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bcba:	b5b0      	push	{r4, r5, r7, lr}
 800bcbc:	b094      	sub	sp, #80	@ 0x50
 800bcbe:	af04      	add	r7, sp, #16
 800bcc0:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f002 f957 	bl	800df7e <SDIO_GetPowerState>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d102      	bne.n	800bcdc <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bcd6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800bcda:	e0b8      	b.n	800be4e <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bce0:	2b03      	cmp	r3, #3
 800bce2:	d02f      	beq.n	800bd44 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4618      	mov	r0, r3
 800bcea:	f002 fb38 	bl	800e35e <SDMMC_CmdSendCID>
 800bcee:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d001      	beq.n	800bcfa <SD_InitCard+0x40>
    {
      return errorstate;
 800bcf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf8:	e0a9      	b.n	800be4e <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2100      	movs	r1, #0
 800bd00:	4618      	mov	r0, r3
 800bd02:	f002 f97e 	bl	800e002 <SDIO_GetResponse>
 800bd06:	4602      	mov	r2, r0
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2104      	movs	r1, #4
 800bd12:	4618      	mov	r0, r3
 800bd14:	f002 f975 	bl	800e002 <SDIO_GetResponse>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2108      	movs	r1, #8
 800bd24:	4618      	mov	r0, r3
 800bd26:	f002 f96c 	bl	800e002 <SDIO_GetResponse>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	210c      	movs	r1, #12
 800bd36:	4618      	mov	r0, r3
 800bd38:	f002 f963 	bl	800e002 <SDIO_GetResponse>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd48:	2b03      	cmp	r3, #3
 800bd4a:	d00d      	beq.n	800bd68 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f107 020e 	add.w	r2, r7, #14
 800bd54:	4611      	mov	r1, r2
 800bd56:	4618      	mov	r0, r3
 800bd58:	f002 fb3e 	bl	800e3d8 <SDMMC_CmdSetRelAdd>
 800bd5c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d001      	beq.n	800bd68 <SD_InitCard+0xae>
    {
      return errorstate;
 800bd64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd66:	e072      	b.n	800be4e <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd6c:	2b03      	cmp	r3, #3
 800bd6e:	d036      	beq.n	800bdde <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bd70:	89fb      	ldrh	r3, [r7, #14]
 800bd72:	461a      	mov	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd80:	041b      	lsls	r3, r3, #16
 800bd82:	4619      	mov	r1, r3
 800bd84:	4610      	mov	r0, r2
 800bd86:	f002 fb08 	bl	800e39a <SDMMC_CmdSendCSD>
 800bd8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <SD_InitCard+0xdc>
    {
      return errorstate;
 800bd92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd94:	e05b      	b.n	800be4e <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f002 f930 	bl	800e002 <SDIO_GetResponse>
 800bda2:	4602      	mov	r2, r0
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2104      	movs	r1, #4
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f002 f927 	bl	800e002 <SDIO_GetResponse>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2108      	movs	r1, #8
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f002 f91e 	bl	800e002 <SDIO_GetResponse>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	210c      	movs	r1, #12
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f002 f915 	bl	800e002 <SDIO_GetResponse>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2104      	movs	r1, #4
 800bde4:	4618      	mov	r0, r3
 800bde6:	f002 f90c 	bl	800e002 <SDIO_GetResponse>
 800bdea:	4603      	mov	r3, r0
 800bdec:	0d1a      	lsrs	r2, r3, #20
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bdf2:	f107 0310 	add.w	r3, r7, #16
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f7ff fd6f 	bl	800b8dc <HAL_SD_GetCardCSD>
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d002      	beq.n	800be0a <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800be04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800be08:	e021      	b.n	800be4e <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6819      	ldr	r1, [r3, #0]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be12:	041b      	lsls	r3, r3, #16
 800be14:	2200      	movs	r2, #0
 800be16:	461c      	mov	r4, r3
 800be18:	4615      	mov	r5, r2
 800be1a:	4622      	mov	r2, r4
 800be1c:	462b      	mov	r3, r5
 800be1e:	4608      	mov	r0, r1
 800be20:	f002 f9f8 	bl	800e214 <SDMMC_CmdSelDesel>
 800be24:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800be26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d001      	beq.n	800be30 <SD_InitCard+0x176>
  {
    return errorstate;
 800be2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be2e:	e00e      	b.n	800be4e <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681d      	ldr	r5, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	466c      	mov	r4, sp
 800be38:	f103 0210 	add.w	r2, r3, #16
 800be3c:	ca07      	ldmia	r2, {r0, r1, r2}
 800be3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800be42:	3304      	adds	r3, #4
 800be44:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be46:	4628      	mov	r0, r5
 800be48:	f002 f846 	bl	800ded8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3740      	adds	r7, #64	@ 0x40
 800be52:	46bd      	mov	sp, r7
 800be54:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800be58 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b086      	sub	sp, #24
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be60:	2300      	movs	r3, #0
 800be62:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800be64:	2300      	movs	r3, #0
 800be66:	617b      	str	r3, [r7, #20]
 800be68:	2300      	movs	r3, #0
 800be6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4618      	mov	r0, r3
 800be72:	f002 f9f2 	bl	800e25a <SDMMC_CmdGoIdleState>
 800be76:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <SD_PowerON+0x2a>
  {
    return errorstate;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	e072      	b.n	800bf68 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4618      	mov	r0, r3
 800be88:	f002 fa05 	bl	800e296 <SDMMC_CmdOperCond>
 800be8c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00d      	beq.n	800beb0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f002 f9db 	bl	800e25a <SDMMC_CmdGoIdleState>
 800bea4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d004      	beq.n	800beb6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	e05b      	b.n	800bf68 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d137      	bne.n	800bf2e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2100      	movs	r1, #0
 800bec4:	4618      	mov	r0, r3
 800bec6:	f002 fa05 	bl	800e2d4 <SDMMC_CmdAppCommand>
 800beca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d02d      	beq.n	800bf2e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bed2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800bed6:	e047      	b.n	800bf68 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2100      	movs	r1, #0
 800bede:	4618      	mov	r0, r3
 800bee0:	f002 f9f8 	bl	800e2d4 <SDMMC_CmdAppCommand>
 800bee4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <SD_PowerON+0x98>
    {
      return errorstate;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	e03b      	b.n	800bf68 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	491e      	ldr	r1, [pc, #120]	@ (800bf70 <SD_PowerON+0x118>)
 800bef6:	4618      	mov	r0, r3
 800bef8:	f002 fa0e 	bl	800e318 <SDMMC_CmdAppOperCommand>
 800befc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d002      	beq.n	800bf0a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bf04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800bf08:	e02e      	b.n	800bf68 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2100      	movs	r1, #0
 800bf10:	4618      	mov	r0, r3
 800bf12:	f002 f876 	bl	800e002 <SDIO_GetResponse>
 800bf16:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	0fdb      	lsrs	r3, r3, #31
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d101      	bne.n	800bf24 <SD_PowerON+0xcc>
 800bf20:	2301      	movs	r3, #1
 800bf22:	e000      	b.n	800bf26 <SD_PowerON+0xce>
 800bf24:	2300      	movs	r3, #0
 800bf26:	613b      	str	r3, [r7, #16]

    count++;
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d802      	bhi.n	800bf3e <SD_PowerON+0xe6>
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d0cc      	beq.n	800bed8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d902      	bls.n	800bf4e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bf48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bf4c:	e00c      	b.n	800bf68 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d003      	beq.n	800bf60 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	645a      	str	r2, [r3, #68]	@ 0x44
 800bf5e:	e002      	b.n	800bf66 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3718      	adds	r7, #24
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	c1100000 	.word	0xc1100000

0800bf74 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d102      	bne.n	800bf8a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bf84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bf88:	e018      	b.n	800bfbc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf92:	041b      	lsls	r3, r3, #16
 800bf94:	4619      	mov	r1, r3
 800bf96:	4610      	mov	r0, r2
 800bf98:	f002 fa3f 	bl	800e41a <SDMMC_CmdSendStatus>
 800bf9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d001      	beq.n	800bfa8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	e009      	b.n	800bfbc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2100      	movs	r1, #0
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f002 f827 	bl	800e002 <SDIO_GetResponse>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e041      	b.n	800c05a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d106      	bne.n	800bff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7f9 ffd4 	bl	8005f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2202      	movs	r2, #2
 800bff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	3304      	adds	r3, #4
 800c000:	4619      	mov	r1, r3
 800c002:	4610      	mov	r0, r2
 800c004:	f000 fc56 	bl	800c8b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c058:	2300      	movs	r3, #0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3708      	adds	r7, #8
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
	...

0800c064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c072:	b2db      	uxtb	r3, r3
 800c074:	2b01      	cmp	r3, #1
 800c076:	d001      	beq.n	800c07c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	e044      	b.n	800c106 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2202      	movs	r2, #2
 800c080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	68da      	ldr	r2, [r3, #12]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f042 0201 	orr.w	r2, r2, #1
 800c092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a1d      	ldr	r2, [pc, #116]	@ (800c110 <HAL_TIM_Base_Start_IT+0xac>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d018      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x6c>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a1c      	ldr	r2, [pc, #112]	@ (800c114 <HAL_TIM_Base_Start_IT+0xb0>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d013      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0b0:	d00e      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a18      	ldr	r2, [pc, #96]	@ (800c118 <HAL_TIM_Base_Start_IT+0xb4>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d009      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a16      	ldr	r2, [pc, #88]	@ (800c11c <HAL_TIM_Base_Start_IT+0xb8>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d004      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a15      	ldr	r2, [pc, #84]	@ (800c120 <HAL_TIM_Base_Start_IT+0xbc>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d111      	bne.n	800c0f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	f003 0307 	and.w	r3, r3, #7
 800c0da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2b06      	cmp	r3, #6
 800c0e0:	d010      	beq.n	800c104 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f042 0201 	orr.w	r2, r2, #1
 800c0f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0f2:	e007      	b.n	800c104 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f042 0201 	orr.w	r2, r2, #1
 800c102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bc80      	pop	{r7}
 800c10e:	4770      	bx	lr
 800c110:	40012c00 	.word	0x40012c00
 800c114:	40013400 	.word	0x40013400
 800c118:	40000400 	.word	0x40000400
 800c11c:	40000800 	.word	0x40000800
 800c120:	40000c00 	.word	0x40000c00

0800c124 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d101      	bne.n	800c136 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c132:	2301      	movs	r3, #1
 800c134:	e041      	b.n	800c1ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d106      	bne.n	800c150 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f839 	bl	800c1c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2202      	movs	r2, #2
 800c154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	3304      	adds	r3, #4
 800c160:	4619      	mov	r1, r3
 800c162:	4610      	mov	r0, r2
 800c164:	f000 fba6 	bl	800c8b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2201      	movs	r2, #1
 800c18c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c1c2:	b480      	push	{r7}
 800c1c4:	b083      	sub	sp, #12
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c1ca:	bf00      	nop
 800c1cc:	370c      	adds	r7, #12
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bc80      	pop	{r7}
 800c1d2:	4770      	bx	lr

0800c1d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d109      	bne.n	800c1f8 <HAL_TIM_PWM_Start+0x24>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	bf14      	ite	ne
 800c1f0:	2301      	movne	r3, #1
 800c1f2:	2300      	moveq	r3, #0
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	e022      	b.n	800c23e <HAL_TIM_PWM_Start+0x6a>
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	2b04      	cmp	r3, #4
 800c1fc:	d109      	bne.n	800c212 <HAL_TIM_PWM_Start+0x3e>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c204:	b2db      	uxtb	r3, r3
 800c206:	2b01      	cmp	r3, #1
 800c208:	bf14      	ite	ne
 800c20a:	2301      	movne	r3, #1
 800c20c:	2300      	moveq	r3, #0
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	e015      	b.n	800c23e <HAL_TIM_PWM_Start+0x6a>
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	2b08      	cmp	r3, #8
 800c216:	d109      	bne.n	800c22c <HAL_TIM_PWM_Start+0x58>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b01      	cmp	r3, #1
 800c222:	bf14      	ite	ne
 800c224:	2301      	movne	r3, #1
 800c226:	2300      	moveq	r3, #0
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	e008      	b.n	800c23e <HAL_TIM_PWM_Start+0x6a>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c232:	b2db      	uxtb	r3, r3
 800c234:	2b01      	cmp	r3, #1
 800c236:	bf14      	ite	ne
 800c238:	2301      	movne	r3, #1
 800c23a:	2300      	moveq	r3, #0
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d001      	beq.n	800c246 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c242:	2301      	movs	r3, #1
 800c244:	e072      	b.n	800c32c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d104      	bne.n	800c256 <HAL_TIM_PWM_Start+0x82>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2202      	movs	r2, #2
 800c250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c254:	e013      	b.n	800c27e <HAL_TIM_PWM_Start+0xaa>
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	2b04      	cmp	r3, #4
 800c25a:	d104      	bne.n	800c266 <HAL_TIM_PWM_Start+0x92>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2202      	movs	r2, #2
 800c260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c264:	e00b      	b.n	800c27e <HAL_TIM_PWM_Start+0xaa>
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	2b08      	cmp	r3, #8
 800c26a:	d104      	bne.n	800c276 <HAL_TIM_PWM_Start+0xa2>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2202      	movs	r2, #2
 800c270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c274:	e003      	b.n	800c27e <HAL_TIM_PWM_Start+0xaa>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2202      	movs	r2, #2
 800c27a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2201      	movs	r2, #1
 800c284:	6839      	ldr	r1, [r7, #0]
 800c286:	4618      	mov	r0, r3
 800c288:	f000 fdd0 	bl	800ce2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a28      	ldr	r2, [pc, #160]	@ (800c334 <HAL_TIM_PWM_Start+0x160>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d004      	beq.n	800c2a0 <HAL_TIM_PWM_Start+0xcc>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a27      	ldr	r2, [pc, #156]	@ (800c338 <HAL_TIM_PWM_Start+0x164>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d101      	bne.n	800c2a4 <HAL_TIM_PWM_Start+0xd0>
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e000      	b.n	800c2a6 <HAL_TIM_PWM_Start+0xd2>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d007      	beq.n	800c2ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c2b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a1d      	ldr	r2, [pc, #116]	@ (800c334 <HAL_TIM_PWM_Start+0x160>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d018      	beq.n	800c2f6 <HAL_TIM_PWM_Start+0x122>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a1b      	ldr	r2, [pc, #108]	@ (800c338 <HAL_TIM_PWM_Start+0x164>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d013      	beq.n	800c2f6 <HAL_TIM_PWM_Start+0x122>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2d6:	d00e      	beq.n	800c2f6 <HAL_TIM_PWM_Start+0x122>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a17      	ldr	r2, [pc, #92]	@ (800c33c <HAL_TIM_PWM_Start+0x168>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d009      	beq.n	800c2f6 <HAL_TIM_PWM_Start+0x122>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a16      	ldr	r2, [pc, #88]	@ (800c340 <HAL_TIM_PWM_Start+0x16c>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d004      	beq.n	800c2f6 <HAL_TIM_PWM_Start+0x122>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a14      	ldr	r2, [pc, #80]	@ (800c344 <HAL_TIM_PWM_Start+0x170>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d111      	bne.n	800c31a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	f003 0307 	and.w	r3, r3, #7
 800c300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2b06      	cmp	r3, #6
 800c306:	d010      	beq.n	800c32a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f042 0201 	orr.w	r2, r2, #1
 800c316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c318:	e007      	b.n	800c32a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f042 0201 	orr.w	r2, r2, #1
 800c328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c32a:	2300      	movs	r3, #0
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	40012c00 	.word	0x40012c00
 800c338:	40013400 	.word	0x40013400
 800c33c:	40000400 	.word	0x40000400
 800c340:	40000800 	.word	0x40000800
 800c344:	40000c00 	.word	0x40000c00

0800c348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	f003 0302 	and.w	r3, r3, #2
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d122      	bne.n	800c3a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	f003 0302 	and.w	r3, r3, #2
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d11b      	bne.n	800c3a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f06f 0202 	mvn.w	r2, #2
 800c374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2201      	movs	r2, #1
 800c37a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	699b      	ldr	r3, [r3, #24]
 800c382:	f003 0303 	and.w	r3, r3, #3
 800c386:	2b00      	cmp	r3, #0
 800c388:	d003      	beq.n	800c392 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fa76 	bl	800c87c <HAL_TIM_IC_CaptureCallback>
 800c390:	e005      	b.n	800c39e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 fa69 	bl	800c86a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fa78 	bl	800c88e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	691b      	ldr	r3, [r3, #16]
 800c3aa:	f003 0304 	and.w	r3, r3, #4
 800c3ae:	2b04      	cmp	r3, #4
 800c3b0:	d122      	bne.n	800c3f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	f003 0304 	and.w	r3, r3, #4
 800c3bc:	2b04      	cmp	r3, #4
 800c3be:	d11b      	bne.n	800c3f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f06f 0204 	mvn.w	r2, #4
 800c3c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2202      	movs	r2, #2
 800c3ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	699b      	ldr	r3, [r3, #24]
 800c3d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d003      	beq.n	800c3e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fa4c 	bl	800c87c <HAL_TIM_IC_CaptureCallback>
 800c3e4:	e005      	b.n	800c3f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fa3f 	bl	800c86a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 fa4e 	bl	800c88e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	691b      	ldr	r3, [r3, #16]
 800c3fe:	f003 0308 	and.w	r3, r3, #8
 800c402:	2b08      	cmp	r3, #8
 800c404:	d122      	bne.n	800c44c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	f003 0308 	and.w	r3, r3, #8
 800c410:	2b08      	cmp	r3, #8
 800c412:	d11b      	bne.n	800c44c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f06f 0208 	mvn.w	r2, #8
 800c41c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2204      	movs	r2, #4
 800c422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	69db      	ldr	r3, [r3, #28]
 800c42a:	f003 0303 	and.w	r3, r3, #3
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d003      	beq.n	800c43a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 fa22 	bl	800c87c <HAL_TIM_IC_CaptureCallback>
 800c438:	e005      	b.n	800c446 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fa15 	bl	800c86a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 fa24 	bl	800c88e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	691b      	ldr	r3, [r3, #16]
 800c452:	f003 0310 	and.w	r3, r3, #16
 800c456:	2b10      	cmp	r3, #16
 800c458:	d122      	bne.n	800c4a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	f003 0310 	and.w	r3, r3, #16
 800c464:	2b10      	cmp	r3, #16
 800c466:	d11b      	bne.n	800c4a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f06f 0210 	mvn.w	r2, #16
 800c470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2208      	movs	r2, #8
 800c476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	69db      	ldr	r3, [r3, #28]
 800c47e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c482:	2b00      	cmp	r3, #0
 800c484:	d003      	beq.n	800c48e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 f9f8 	bl	800c87c <HAL_TIM_IC_CaptureCallback>
 800c48c:	e005      	b.n	800c49a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f9eb 	bl	800c86a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f000 f9fa 	bl	800c88e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	691b      	ldr	r3, [r3, #16]
 800c4a6:	f003 0301 	and.w	r3, r3, #1
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d10e      	bne.n	800c4cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	f003 0301 	and.w	r3, r3, #1
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d107      	bne.n	800c4cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f06f 0201 	mvn.w	r2, #1
 800c4c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f7f9 fab2 	bl	8005a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	691b      	ldr	r3, [r3, #16]
 800c4d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4d6:	2b80      	cmp	r3, #128	@ 0x80
 800c4d8:	d10e      	bne.n	800c4f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4e4:	2b80      	cmp	r3, #128	@ 0x80
 800c4e6:	d107      	bne.n	800c4f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c4f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 fd33 	bl	800cf5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	691b      	ldr	r3, [r3, #16]
 800c4fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c502:	2b40      	cmp	r3, #64	@ 0x40
 800c504:	d10e      	bne.n	800c524 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c510:	2b40      	cmp	r3, #64	@ 0x40
 800c512:	d107      	bne.n	800c524 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c51c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 f9be 	bl	800c8a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	f003 0320 	and.w	r3, r3, #32
 800c52e:	2b20      	cmp	r3, #32
 800c530:	d10e      	bne.n	800c550 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	f003 0320 	and.w	r3, r3, #32
 800c53c:	2b20      	cmp	r3, #32
 800c53e:	d107      	bne.n	800c550 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f06f 0220 	mvn.w	r2, #32
 800c548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 fcfe 	bl	800cf4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c550:	bf00      	nop
 800c552:	3708      	adds	r7, #8
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b086      	sub	sp, #24
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c564:	2300      	movs	r3, #0
 800c566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d101      	bne.n	800c576 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c572:	2302      	movs	r3, #2
 800c574:	e0ae      	b.n	800c6d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2201      	movs	r2, #1
 800c57a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2b0c      	cmp	r3, #12
 800c582:	f200 809f 	bhi.w	800c6c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c586:	a201      	add	r2, pc, #4	@ (adr r2, 800c58c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c58c:	0800c5c1 	.word	0x0800c5c1
 800c590:	0800c6c5 	.word	0x0800c6c5
 800c594:	0800c6c5 	.word	0x0800c6c5
 800c598:	0800c6c5 	.word	0x0800c6c5
 800c59c:	0800c601 	.word	0x0800c601
 800c5a0:	0800c6c5 	.word	0x0800c6c5
 800c5a4:	0800c6c5 	.word	0x0800c6c5
 800c5a8:	0800c6c5 	.word	0x0800c6c5
 800c5ac:	0800c643 	.word	0x0800c643
 800c5b0:	0800c6c5 	.word	0x0800c6c5
 800c5b4:	0800c6c5 	.word	0x0800c6c5
 800c5b8:	0800c6c5 	.word	0x0800c6c5
 800c5bc:	0800c683 	.word	0x0800c683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	68b9      	ldr	r1, [r7, #8]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 f9ee 	bl	800c9a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	699a      	ldr	r2, [r3, #24]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f042 0208 	orr.w	r2, r2, #8
 800c5da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	699a      	ldr	r2, [r3, #24]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f022 0204 	bic.w	r2, r2, #4
 800c5ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	6999      	ldr	r1, [r3, #24]
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	691a      	ldr	r2, [r3, #16]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	619a      	str	r2, [r3, #24]
      break;
 800c5fe:	e064      	b.n	800c6ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	68b9      	ldr	r1, [r7, #8]
 800c606:	4618      	mov	r0, r3
 800c608:	f000 fa3e 	bl	800ca88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	699a      	ldr	r2, [r3, #24]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c61a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	699a      	ldr	r2, [r3, #24]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c62a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	6999      	ldr	r1, [r3, #24]
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	021a      	lsls	r2, r3, #8
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	430a      	orrs	r2, r1
 800c63e:	619a      	str	r2, [r3, #24]
      break;
 800c640:	e043      	b.n	800c6ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	68b9      	ldr	r1, [r7, #8]
 800c648:	4618      	mov	r0, r3
 800c64a:	f000 fa91 	bl	800cb70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	69da      	ldr	r2, [r3, #28]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f042 0208 	orr.w	r2, r2, #8
 800c65c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	69da      	ldr	r2, [r3, #28]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f022 0204 	bic.w	r2, r2, #4
 800c66c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	69d9      	ldr	r1, [r3, #28]
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	691a      	ldr	r2, [r3, #16]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	430a      	orrs	r2, r1
 800c67e:	61da      	str	r2, [r3, #28]
      break;
 800c680:	e023      	b.n	800c6ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	68b9      	ldr	r1, [r7, #8]
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 fae5 	bl	800cc58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	69da      	ldr	r2, [r3, #28]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c69c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	69da      	ldr	r2, [r3, #28]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c6ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	69d9      	ldr	r1, [r3, #28]
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	021a      	lsls	r2, r3, #8
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	430a      	orrs	r2, r1
 800c6c0:	61da      	str	r2, [r3, #28]
      break;
 800c6c2:	e002      	b.n	800c6ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	75fb      	strb	r3, [r7, #23]
      break;
 800c6c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c6d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3718      	adds	r7, #24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d101      	bne.n	800c6f8 <HAL_TIM_ConfigClockSource+0x1c>
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	e0b4      	b.n	800c862 <HAL_TIM_ConfigClockSource+0x186>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2202      	movs	r2, #2
 800c704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c71e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	68ba      	ldr	r2, [r7, #8]
 800c726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c730:	d03e      	beq.n	800c7b0 <HAL_TIM_ConfigClockSource+0xd4>
 800c732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c736:	f200 8087 	bhi.w	800c848 <HAL_TIM_ConfigClockSource+0x16c>
 800c73a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c73e:	f000 8086 	beq.w	800c84e <HAL_TIM_ConfigClockSource+0x172>
 800c742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c746:	d87f      	bhi.n	800c848 <HAL_TIM_ConfigClockSource+0x16c>
 800c748:	2b70      	cmp	r3, #112	@ 0x70
 800c74a:	d01a      	beq.n	800c782 <HAL_TIM_ConfigClockSource+0xa6>
 800c74c:	2b70      	cmp	r3, #112	@ 0x70
 800c74e:	d87b      	bhi.n	800c848 <HAL_TIM_ConfigClockSource+0x16c>
 800c750:	2b60      	cmp	r3, #96	@ 0x60
 800c752:	d050      	beq.n	800c7f6 <HAL_TIM_ConfigClockSource+0x11a>
 800c754:	2b60      	cmp	r3, #96	@ 0x60
 800c756:	d877      	bhi.n	800c848 <HAL_TIM_ConfigClockSource+0x16c>
 800c758:	2b50      	cmp	r3, #80	@ 0x50
 800c75a:	d03c      	beq.n	800c7d6 <HAL_TIM_ConfigClockSource+0xfa>
 800c75c:	2b50      	cmp	r3, #80	@ 0x50
 800c75e:	d873      	bhi.n	800c848 <HAL_TIM_ConfigClockSource+0x16c>
 800c760:	2b40      	cmp	r3, #64	@ 0x40
 800c762:	d058      	beq.n	800c816 <HAL_TIM_ConfigClockSource+0x13a>
 800c764:	2b40      	cmp	r3, #64	@ 0x40
 800c766:	d86f      	bhi.n	800c848 <HAL_TIM_ConfigClockSource+0x16c>
 800c768:	2b30      	cmp	r3, #48	@ 0x30
 800c76a:	d064      	beq.n	800c836 <HAL_TIM_ConfigClockSource+0x15a>
 800c76c:	2b30      	cmp	r3, #48	@ 0x30
 800c76e:	d86b      	bhi.n	800c848 <HAL_TIM_ConfigClockSource+0x16c>
 800c770:	2b20      	cmp	r3, #32
 800c772:	d060      	beq.n	800c836 <HAL_TIM_ConfigClockSource+0x15a>
 800c774:	2b20      	cmp	r3, #32
 800c776:	d867      	bhi.n	800c848 <HAL_TIM_ConfigClockSource+0x16c>
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d05c      	beq.n	800c836 <HAL_TIM_ConfigClockSource+0x15a>
 800c77c:	2b10      	cmp	r3, #16
 800c77e:	d05a      	beq.n	800c836 <HAL_TIM_ConfigClockSource+0x15a>
 800c780:	e062      	b.n	800c848 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c792:	f000 fb2c 	bl	800cdee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c7a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	609a      	str	r2, [r3, #8]
      break;
 800c7ae:	e04f      	b.n	800c850 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c7c0:	f000 fb15 	bl	800cdee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	689a      	ldr	r2, [r3, #8]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c7d2:	609a      	str	r2, [r3, #8]
      break;
 800c7d4:	e03c      	b.n	800c850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	f000 fa8c 	bl	800cd00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2150      	movs	r1, #80	@ 0x50
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f000 fae3 	bl	800cdba <TIM_ITRx_SetConfig>
      break;
 800c7f4:	e02c      	b.n	800c850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c802:	461a      	mov	r2, r3
 800c804:	f000 faaa 	bl	800cd5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2160      	movs	r1, #96	@ 0x60
 800c80e:	4618      	mov	r0, r3
 800c810:	f000 fad3 	bl	800cdba <TIM_ITRx_SetConfig>
      break;
 800c814:	e01c      	b.n	800c850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c822:	461a      	mov	r2, r3
 800c824:	f000 fa6c 	bl	800cd00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2140      	movs	r1, #64	@ 0x40
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 fac3 	bl	800cdba <TIM_ITRx_SetConfig>
      break;
 800c834:	e00c      	b.n	800c850 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4619      	mov	r1, r3
 800c840:	4610      	mov	r0, r2
 800c842:	f000 faba 	bl	800cdba <TIM_ITRx_SetConfig>
      break;
 800c846:	e003      	b.n	800c850 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c848:	2301      	movs	r3, #1
 800c84a:	73fb      	strb	r3, [r7, #15]
      break;
 800c84c:	e000      	b.n	800c850 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c84e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c860:	7bfb      	ldrb	r3, [r7, #15]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c86a:	b480      	push	{r7}
 800c86c:	b083      	sub	sp, #12
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c872:	bf00      	nop
 800c874:	370c      	adds	r7, #12
 800c876:	46bd      	mov	sp, r7
 800c878:	bc80      	pop	{r7}
 800c87a:	4770      	bx	lr

0800c87c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c884:	bf00      	nop
 800c886:	370c      	adds	r7, #12
 800c888:	46bd      	mov	sp, r7
 800c88a:	bc80      	pop	{r7}
 800c88c:	4770      	bx	lr

0800c88e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c88e:	b480      	push	{r7}
 800c890:	b083      	sub	sp, #12
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c896:	bf00      	nop
 800c898:	370c      	adds	r7, #12
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bc80      	pop	{r7}
 800c89e:	4770      	bx	lr

0800c8a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c8a8:	bf00      	nop
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bc80      	pop	{r7}
 800c8b0:	4770      	bx	lr
	...

0800c8b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4a33      	ldr	r2, [pc, #204]	@ (800c994 <TIM_Base_SetConfig+0xe0>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d013      	beq.n	800c8f4 <TIM_Base_SetConfig+0x40>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4a32      	ldr	r2, [pc, #200]	@ (800c998 <TIM_Base_SetConfig+0xe4>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d00f      	beq.n	800c8f4 <TIM_Base_SetConfig+0x40>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8da:	d00b      	beq.n	800c8f4 <TIM_Base_SetConfig+0x40>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4a2f      	ldr	r2, [pc, #188]	@ (800c99c <TIM_Base_SetConfig+0xe8>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d007      	beq.n	800c8f4 <TIM_Base_SetConfig+0x40>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	4a2e      	ldr	r2, [pc, #184]	@ (800c9a0 <TIM_Base_SetConfig+0xec>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d003      	beq.n	800c8f4 <TIM_Base_SetConfig+0x40>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4a2d      	ldr	r2, [pc, #180]	@ (800c9a4 <TIM_Base_SetConfig+0xf0>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d108      	bne.n	800c906 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	4313      	orrs	r3, r2
 800c904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4a22      	ldr	r2, [pc, #136]	@ (800c994 <TIM_Base_SetConfig+0xe0>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d013      	beq.n	800c936 <TIM_Base_SetConfig+0x82>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4a21      	ldr	r2, [pc, #132]	@ (800c998 <TIM_Base_SetConfig+0xe4>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d00f      	beq.n	800c936 <TIM_Base_SetConfig+0x82>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c91c:	d00b      	beq.n	800c936 <TIM_Base_SetConfig+0x82>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	4a1e      	ldr	r2, [pc, #120]	@ (800c99c <TIM_Base_SetConfig+0xe8>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d007      	beq.n	800c936 <TIM_Base_SetConfig+0x82>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	4a1d      	ldr	r2, [pc, #116]	@ (800c9a0 <TIM_Base_SetConfig+0xec>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d003      	beq.n	800c936 <TIM_Base_SetConfig+0x82>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	4a1c      	ldr	r2, [pc, #112]	@ (800c9a4 <TIM_Base_SetConfig+0xf0>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d108      	bne.n	800c948 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c93c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	4313      	orrs	r3, r2
 800c946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	695b      	ldr	r3, [r3, #20]
 800c952:	4313      	orrs	r3, r2
 800c954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	689a      	ldr	r2, [r3, #8]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	4a09      	ldr	r2, [pc, #36]	@ (800c994 <TIM_Base_SetConfig+0xe0>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d003      	beq.n	800c97c <TIM_Base_SetConfig+0xc8>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	4a08      	ldr	r2, [pc, #32]	@ (800c998 <TIM_Base_SetConfig+0xe4>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d103      	bne.n	800c984 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	691a      	ldr	r2, [r3, #16]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2201      	movs	r2, #1
 800c988:	615a      	str	r2, [r3, #20]
}
 800c98a:	bf00      	nop
 800c98c:	3714      	adds	r7, #20
 800c98e:	46bd      	mov	sp, r7
 800c990:	bc80      	pop	{r7}
 800c992:	4770      	bx	lr
 800c994:	40012c00 	.word	0x40012c00
 800c998:	40013400 	.word	0x40013400
 800c99c:	40000400 	.word	0x40000400
 800c9a0:	40000800 	.word	0x40000800
 800c9a4:	40000c00 	.word	0x40000c00

0800c9a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b087      	sub	sp, #28
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6a1b      	ldr	r3, [r3, #32]
 800c9b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6a1b      	ldr	r3, [r3, #32]
 800c9bc:	f023 0201 	bic.w	r2, r3, #1
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	699b      	ldr	r3, [r3, #24]
 800c9ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f023 0303 	bic.w	r3, r3, #3
 800c9de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	f023 0302 	bic.w	r3, r3, #2
 800c9f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	697a      	ldr	r2, [r7, #20]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4a20      	ldr	r2, [pc, #128]	@ (800ca80 <TIM_OC1_SetConfig+0xd8>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d003      	beq.n	800ca0c <TIM_OC1_SetConfig+0x64>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a1f      	ldr	r2, [pc, #124]	@ (800ca84 <TIM_OC1_SetConfig+0xdc>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d10c      	bne.n	800ca26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	f023 0308 	bic.w	r3, r3, #8
 800ca12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	697a      	ldr	r2, [r7, #20]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	f023 0304 	bic.w	r3, r3, #4
 800ca24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a15      	ldr	r2, [pc, #84]	@ (800ca80 <TIM_OC1_SetConfig+0xd8>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d003      	beq.n	800ca36 <TIM_OC1_SetConfig+0x8e>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4a14      	ldr	r2, [pc, #80]	@ (800ca84 <TIM_OC1_SetConfig+0xdc>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d111      	bne.n	800ca5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ca44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	695b      	ldr	r3, [r3, #20]
 800ca4a:	693a      	ldr	r2, [r7, #16]
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	699b      	ldr	r3, [r3, #24]
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	693a      	ldr	r2, [r7, #16]
 800ca5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	68fa      	ldr	r2, [r7, #12]
 800ca64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	685a      	ldr	r2, [r3, #4]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	697a      	ldr	r2, [r7, #20]
 800ca72:	621a      	str	r2, [r3, #32]
}
 800ca74:	bf00      	nop
 800ca76:	371c      	adds	r7, #28
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bc80      	pop	{r7}
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	40012c00 	.word	0x40012c00
 800ca84:	40013400 	.word	0x40013400

0800ca88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b087      	sub	sp, #28
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6a1b      	ldr	r3, [r3, #32]
 800ca96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a1b      	ldr	r3, [r3, #32]
 800ca9c:	f023 0210 	bic.w	r2, r3, #16
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	699b      	ldr	r3, [r3, #24]
 800caae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cabe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	021b      	lsls	r3, r3, #8
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	4313      	orrs	r3, r2
 800caca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	f023 0320 	bic.w	r3, r3, #32
 800cad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	689b      	ldr	r3, [r3, #8]
 800cad8:	011b      	lsls	r3, r3, #4
 800cada:	697a      	ldr	r2, [r7, #20]
 800cadc:	4313      	orrs	r3, r2
 800cade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	4a21      	ldr	r2, [pc, #132]	@ (800cb68 <TIM_OC2_SetConfig+0xe0>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d003      	beq.n	800caf0 <TIM_OC2_SetConfig+0x68>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	4a20      	ldr	r2, [pc, #128]	@ (800cb6c <TIM_OC2_SetConfig+0xe4>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d10d      	bne.n	800cb0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800caf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	011b      	lsls	r3, r3, #4
 800cafe:	697a      	ldr	r2, [r7, #20]
 800cb00:	4313      	orrs	r3, r2
 800cb02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4a16      	ldr	r2, [pc, #88]	@ (800cb68 <TIM_OC2_SetConfig+0xe0>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d003      	beq.n	800cb1c <TIM_OC2_SetConfig+0x94>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4a15      	ldr	r2, [pc, #84]	@ (800cb6c <TIM_OC2_SetConfig+0xe4>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d113      	bne.n	800cb44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cb22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cb2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	695b      	ldr	r3, [r3, #20]
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	693a      	ldr	r2, [r7, #16]
 800cb34:	4313      	orrs	r3, r2
 800cb36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	693a      	ldr	r2, [r7, #16]
 800cb40:	4313      	orrs	r3, r2
 800cb42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	693a      	ldr	r2, [r7, #16]
 800cb48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	685a      	ldr	r2, [r3, #4]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	697a      	ldr	r2, [r7, #20]
 800cb5c:	621a      	str	r2, [r3, #32]
}
 800cb5e:	bf00      	nop
 800cb60:	371c      	adds	r7, #28
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bc80      	pop	{r7}
 800cb66:	4770      	bx	lr
 800cb68:	40012c00 	.word	0x40012c00
 800cb6c:	40013400 	.word	0x40013400

0800cb70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b087      	sub	sp, #28
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a1b      	ldr	r3, [r3, #32]
 800cb7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6a1b      	ldr	r3, [r3, #32]
 800cb84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	69db      	ldr	r3, [r3, #28]
 800cb96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f023 0303 	bic.w	r3, r3, #3
 800cba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	68fa      	ldr	r2, [r7, #12]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cbb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	021b      	lsls	r3, r3, #8
 800cbc0:	697a      	ldr	r2, [r7, #20]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	4a21      	ldr	r2, [pc, #132]	@ (800cc50 <TIM_OC3_SetConfig+0xe0>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d003      	beq.n	800cbd6 <TIM_OC3_SetConfig+0x66>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	4a20      	ldr	r2, [pc, #128]	@ (800cc54 <TIM_OC3_SetConfig+0xe4>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d10d      	bne.n	800cbf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cbdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	021b      	lsls	r3, r3, #8
 800cbe4:	697a      	ldr	r2, [r7, #20]
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cbf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a16      	ldr	r2, [pc, #88]	@ (800cc50 <TIM_OC3_SetConfig+0xe0>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d003      	beq.n	800cc02 <TIM_OC3_SetConfig+0x92>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a15      	ldr	r2, [pc, #84]	@ (800cc54 <TIM_OC3_SetConfig+0xe4>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d113      	bne.n	800cc2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cc10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	695b      	ldr	r3, [r3, #20]
 800cc16:	011b      	lsls	r3, r3, #4
 800cc18:	693a      	ldr	r2, [r7, #16]
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	699b      	ldr	r3, [r3, #24]
 800cc22:	011b      	lsls	r3, r3, #4
 800cc24:	693a      	ldr	r2, [r7, #16]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	693a      	ldr	r2, [r7, #16]
 800cc2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	68fa      	ldr	r2, [r7, #12]
 800cc34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	685a      	ldr	r2, [r3, #4]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	697a      	ldr	r2, [r7, #20]
 800cc42:	621a      	str	r2, [r3, #32]
}
 800cc44:	bf00      	nop
 800cc46:	371c      	adds	r7, #28
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bc80      	pop	{r7}
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop
 800cc50:	40012c00 	.word	0x40012c00
 800cc54:	40013400 	.word	0x40013400

0800cc58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b087      	sub	sp, #28
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a1b      	ldr	r3, [r3, #32]
 800cc66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6a1b      	ldr	r3, [r3, #32]
 800cc6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	69db      	ldr	r3, [r3, #28]
 800cc7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cc8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	021b      	lsls	r3, r3, #8
 800cc96:	68fa      	ldr	r2, [r7, #12]
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	031b      	lsls	r3, r3, #12
 800ccaa:	693a      	ldr	r2, [r7, #16]
 800ccac:	4313      	orrs	r3, r2
 800ccae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4a11      	ldr	r2, [pc, #68]	@ (800ccf8 <TIM_OC4_SetConfig+0xa0>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d003      	beq.n	800ccc0 <TIM_OC4_SetConfig+0x68>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4a10      	ldr	r2, [pc, #64]	@ (800ccfc <TIM_OC4_SetConfig+0xa4>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d109      	bne.n	800ccd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ccc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	695b      	ldr	r3, [r3, #20]
 800cccc:	019b      	lsls	r3, r3, #6
 800ccce:	697a      	ldr	r2, [r7, #20]
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	697a      	ldr	r2, [r7, #20]
 800ccd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	68fa      	ldr	r2, [r7, #12]
 800ccde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	685a      	ldr	r2, [r3, #4]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	693a      	ldr	r2, [r7, #16]
 800ccec:	621a      	str	r2, [r3, #32]
}
 800ccee:	bf00      	nop
 800ccf0:	371c      	adds	r7, #28
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bc80      	pop	{r7}
 800ccf6:	4770      	bx	lr
 800ccf8:	40012c00 	.word	0x40012c00
 800ccfc:	40013400 	.word	0x40013400

0800cd00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b087      	sub	sp, #28
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6a1b      	ldr	r3, [r3, #32]
 800cd10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	f023 0201 	bic.w	r2, r3, #1
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	699b      	ldr	r3, [r3, #24]
 800cd22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cd2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	011b      	lsls	r3, r3, #4
 800cd30:	693a      	ldr	r2, [r7, #16]
 800cd32:	4313      	orrs	r3, r2
 800cd34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	f023 030a 	bic.w	r3, r3, #10
 800cd3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cd3e:	697a      	ldr	r2, [r7, #20]
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	4313      	orrs	r3, r2
 800cd44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	693a      	ldr	r2, [r7, #16]
 800cd4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	697a      	ldr	r2, [r7, #20]
 800cd50:	621a      	str	r2, [r3, #32]
}
 800cd52:	bf00      	nop
 800cd54:	371c      	adds	r7, #28
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bc80      	pop	{r7}
 800cd5a:	4770      	bx	lr

0800cd5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b087      	sub	sp, #28
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	6a1b      	ldr	r3, [r3, #32]
 800cd6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6a1b      	ldr	r3, [r3, #32]
 800cd72:	f023 0210 	bic.w	r2, r3, #16
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	699b      	ldr	r3, [r3, #24]
 800cd7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cd86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	031b      	lsls	r3, r3, #12
 800cd8c:	693a      	ldr	r2, [r7, #16]
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cd98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	011b      	lsls	r3, r3, #4
 800cd9e:	697a      	ldr	r2, [r7, #20]
 800cda0:	4313      	orrs	r3, r2
 800cda2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	693a      	ldr	r2, [r7, #16]
 800cda8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	697a      	ldr	r2, [r7, #20]
 800cdae:	621a      	str	r2, [r3, #32]
}
 800cdb0:	bf00      	nop
 800cdb2:	371c      	adds	r7, #28
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bc80      	pop	{r7}
 800cdb8:	4770      	bx	lr

0800cdba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cdba:	b480      	push	{r7}
 800cdbc:	b085      	sub	sp, #20
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cdd2:	683a      	ldr	r2, [r7, #0]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	f043 0307 	orr.w	r3, r3, #7
 800cddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	609a      	str	r2, [r3, #8]
}
 800cde4:	bf00      	nop
 800cde6:	3714      	adds	r7, #20
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bc80      	pop	{r7}
 800cdec:	4770      	bx	lr

0800cdee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cdee:	b480      	push	{r7}
 800cdf0:	b087      	sub	sp, #28
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	60f8      	str	r0, [r7, #12]
 800cdf6:	60b9      	str	r1, [r7, #8]
 800cdf8:	607a      	str	r2, [r7, #4]
 800cdfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ce08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	021a      	lsls	r2, r3, #8
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	431a      	orrs	r2, r3
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	697a      	ldr	r2, [r7, #20]
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	609a      	str	r2, [r3, #8]
}
 800ce22:	bf00      	nop
 800ce24:	371c      	adds	r7, #28
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bc80      	pop	{r7}
 800ce2a:	4770      	bx	lr

0800ce2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b087      	sub	sp, #28
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	f003 031f 	and.w	r3, r3, #31
 800ce3e:	2201      	movs	r2, #1
 800ce40:	fa02 f303 	lsl.w	r3, r2, r3
 800ce44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	6a1a      	ldr	r2, [r3, #32]
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	43db      	mvns	r3, r3
 800ce4e:	401a      	ands	r2, r3
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6a1a      	ldr	r2, [r3, #32]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	f003 031f 	and.w	r3, r3, #31
 800ce5e:	6879      	ldr	r1, [r7, #4]
 800ce60:	fa01 f303 	lsl.w	r3, r1, r3
 800ce64:	431a      	orrs	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	621a      	str	r2, [r3, #32]
}
 800ce6a:	bf00      	nop
 800ce6c:	371c      	adds	r7, #28
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bc80      	pop	{r7}
 800ce72:	4770      	bx	lr

0800ce74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b085      	sub	sp, #20
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d101      	bne.n	800ce8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ce88:	2302      	movs	r3, #2
 800ce8a:	e050      	b.n	800cf2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2202      	movs	r2, #2
 800ce98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ceb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	68fa      	ldr	r2, [r7, #12]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a1b      	ldr	r2, [pc, #108]	@ (800cf38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d018      	beq.n	800cf02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a19      	ldr	r2, [pc, #100]	@ (800cf3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d013      	beq.n	800cf02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cee2:	d00e      	beq.n	800cf02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a15      	ldr	r2, [pc, #84]	@ (800cf40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d009      	beq.n	800cf02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a14      	ldr	r2, [pc, #80]	@ (800cf44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d004      	beq.n	800cf02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a12      	ldr	r2, [pc, #72]	@ (800cf48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d10c      	bne.n	800cf1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	4313      	orrs	r3, r2
 800cf12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cf2c:	2300      	movs	r3, #0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3714      	adds	r7, #20
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bc80      	pop	{r7}
 800cf36:	4770      	bx	lr
 800cf38:	40012c00 	.word	0x40012c00
 800cf3c:	40013400 	.word	0x40013400
 800cf40:	40000400 	.word	0x40000400
 800cf44:	40000800 	.word	0x40000800
 800cf48:	40000c00 	.word	0x40000c00

0800cf4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bc80      	pop	{r7}
 800cf5c:	4770      	bx	lr

0800cf5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cf5e:	b480      	push	{r7}
 800cf60:	b083      	sub	sp, #12
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf66:	bf00      	nop
 800cf68:	370c      	adds	r7, #12
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bc80      	pop	{r7}
 800cf6e:	4770      	bx	lr

0800cf70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d101      	bne.n	800cf82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e042      	b.n	800d008 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d106      	bne.n	800cf9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2200      	movs	r2, #0
 800cf92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f7f9 f90a 	bl	80061b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2224      	movs	r2, #36	@ 0x24
 800cfa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	68da      	ldr	r2, [r3, #12]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cfb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 ff01 	bl	800ddbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	691a      	ldr	r2, [r3, #16]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cfc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	695a      	ldr	r2, [r3, #20]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cfd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	68da      	ldr	r2, [r3, #12]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cfe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2200      	movs	r2, #0
 800cfee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2220      	movs	r2, #32
 800cff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2220      	movs	r2, #32
 800cffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3708      	adds	r7, #8
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b08a      	sub	sp, #40	@ 0x28
 800d014:	af02      	add	r7, sp, #8
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	603b      	str	r3, [r7, #0]
 800d01c:	4613      	mov	r3, r2
 800d01e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d020:	2300      	movs	r3, #0
 800d022:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	2b20      	cmp	r3, #32
 800d02e:	d16d      	bne.n	800d10c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d002      	beq.n	800d03c <HAL_UART_Transmit+0x2c>
 800d036:	88fb      	ldrh	r3, [r7, #6]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d101      	bne.n	800d040 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d03c:	2301      	movs	r3, #1
 800d03e:	e066      	b.n	800d10e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2200      	movs	r2, #0
 800d044:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2221      	movs	r2, #33	@ 0x21
 800d04a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d04e:	f7fa fe41 	bl	8007cd4 <HAL_GetTick>
 800d052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	88fa      	ldrh	r2, [r7, #6]
 800d058:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	88fa      	ldrh	r2, [r7, #6]
 800d05e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d068:	d108      	bne.n	800d07c <HAL_UART_Transmit+0x6c>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	691b      	ldr	r3, [r3, #16]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d104      	bne.n	800d07c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d072:	2300      	movs	r3, #0
 800d074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	61bb      	str	r3, [r7, #24]
 800d07a:	e003      	b.n	800d084 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d080:	2300      	movs	r3, #0
 800d082:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d084:	e02a      	b.n	800d0dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	2200      	movs	r2, #0
 800d08e:	2180      	movs	r1, #128	@ 0x80
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f000 fc29 	bl	800d8e8 <UART_WaitOnFlagUntilTimeout>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d001      	beq.n	800d0a0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800d09c:	2303      	movs	r3, #3
 800d09e:	e036      	b.n	800d10e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d10b      	bne.n	800d0be <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	881b      	ldrh	r3, [r3, #0]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d0b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	3302      	adds	r3, #2
 800d0ba:	61bb      	str	r3, [r7, #24]
 800d0bc:	e007      	b.n	800d0ce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	781a      	ldrb	r2, [r3, #0]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	3b01      	subs	r3, #1
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d1cf      	bne.n	800d086 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	2140      	movs	r1, #64	@ 0x40
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f000 fbf9 	bl	800d8e8 <UART_WaitOnFlagUntilTimeout>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d001      	beq.n	800d100 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800d0fc:	2303      	movs	r3, #3
 800d0fe:	e006      	b.n	800d10e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2220      	movs	r2, #32
 800d104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800d108:	2300      	movs	r3, #0
 800d10a:	e000      	b.n	800d10e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800d10c:	2302      	movs	r3, #2
  }
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3720      	adds	r7, #32
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b084      	sub	sp, #16
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	60f8      	str	r0, [r7, #12]
 800d11e:	60b9      	str	r1, [r7, #8]
 800d120:	4613      	mov	r3, r2
 800d122:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	2b20      	cmp	r3, #32
 800d12e:	d112      	bne.n	800d156 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d002      	beq.n	800d13c <HAL_UART_Receive_IT+0x26>
 800d136:	88fb      	ldrh	r3, [r7, #6]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d101      	bne.n	800d140 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d13c:	2301      	movs	r3, #1
 800d13e:	e00b      	b.n	800d158 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2200      	movs	r2, #0
 800d144:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d146:	88fb      	ldrh	r3, [r7, #6]
 800d148:	461a      	mov	r2, r3
 800d14a:	68b9      	ldr	r1, [r7, #8]
 800d14c:	68f8      	ldr	r0, [r7, #12]
 800d14e:	f000 fc39 	bl	800d9c4 <UART_Start_Receive_IT>
 800d152:	4603      	mov	r3, r0
 800d154:	e000      	b.n	800d158 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d156:	2302      	movs	r3, #2
  }
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b08c      	sub	sp, #48	@ 0x30
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	4613      	mov	r3, r2
 800d16c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d174:	b2db      	uxtb	r3, r3
 800d176:	2b20      	cmp	r3, #32
 800d178:	d156      	bne.n	800d228 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d002      	beq.n	800d186 <HAL_UART_Transmit_DMA+0x26>
 800d180:	88fb      	ldrh	r3, [r7, #6]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800d186:	2301      	movs	r3, #1
 800d188:	e04f      	b.n	800d22a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800d18a:	68ba      	ldr	r2, [r7, #8]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	88fa      	ldrh	r2, [r7, #6]
 800d194:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	88fa      	ldrh	r2, [r7, #6]
 800d19a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2221      	movs	r2, #33	@ 0x21
 800d1a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1ae:	4a21      	ldr	r2, [pc, #132]	@ (800d234 <HAL_UART_Transmit_DMA+0xd4>)
 800d1b0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1b6:	4a20      	ldr	r2, [pc, #128]	@ (800d238 <HAL_UART_Transmit_DMA+0xd8>)
 800d1b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1be:	4a1f      	ldr	r2, [pc, #124]	@ (800d23c <HAL_UART_Transmit_DMA+0xdc>)
 800d1c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800d1ca:	f107 0308 	add.w	r3, r7, #8
 800d1ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d6:	6819      	ldr	r1, [r3, #0]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3304      	adds	r3, #4
 800d1de:	461a      	mov	r2, r3
 800d1e0:	88fb      	ldrh	r3, [r7, #6]
 800d1e2:	f7fa fefb 	bl	8007fdc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d1ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	3314      	adds	r3, #20
 800d1f6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	e853 3f00 	ldrex	r3, [r3]
 800d1fe:	617b      	str	r3, [r7, #20]
   return(result);
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d206:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	3314      	adds	r3, #20
 800d20e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d210:	627a      	str	r2, [r7, #36]	@ 0x24
 800d212:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d214:	6a39      	ldr	r1, [r7, #32]
 800d216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d218:	e841 2300 	strex	r3, r2, [r1]
 800d21c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d1e5      	bne.n	800d1f0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800d224:	2300      	movs	r3, #0
 800d226:	e000      	b.n	800d22a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800d228:	2302      	movs	r3, #2
  }
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3730      	adds	r7, #48	@ 0x30
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	0800d79f 	.word	0x0800d79f
 800d238:	0800d839 	.word	0x0800d839
 800d23c:	0800d855 	.word	0x0800d855

0800d240 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b0ba      	sub	sp, #232	@ 0xe8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	695b      	ldr	r3, [r3, #20]
 800d262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d266:	2300      	movs	r3, #0
 800d268:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d26c:	2300      	movs	r3, #0
 800d26e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d276:	f003 030f 	and.w	r3, r3, #15
 800d27a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d27e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d282:	2b00      	cmp	r3, #0
 800d284:	d10f      	bne.n	800d2a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d28a:	f003 0320 	and.w	r3, r3, #32
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d009      	beq.n	800d2a6 <HAL_UART_IRQHandler+0x66>
 800d292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d296:	f003 0320 	and.w	r3, r3, #32
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d003      	beq.n	800d2a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f000 fccd 	bl	800dc3e <UART_Receive_IT>
      return;
 800d2a4:	e25b      	b.n	800d75e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d2a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	f000 80de 	beq.w	800d46c <HAL_UART_IRQHandler+0x22c>
 800d2b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d2b4:	f003 0301 	and.w	r3, r3, #1
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d106      	bne.n	800d2ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d2bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f000 80d1 	beq.w	800d46c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d2ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2ce:	f003 0301 	and.w	r3, r3, #1
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00b      	beq.n	800d2ee <HAL_UART_IRQHandler+0xae>
 800d2d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d005      	beq.n	800d2ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2e6:	f043 0201 	orr.w	r2, r3, #1
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2f2:	f003 0304 	and.w	r3, r3, #4
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00b      	beq.n	800d312 <HAL_UART_IRQHandler+0xd2>
 800d2fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d2fe:	f003 0301 	and.w	r3, r3, #1
 800d302:	2b00      	cmp	r3, #0
 800d304:	d005      	beq.n	800d312 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d30a:	f043 0202 	orr.w	r2, r3, #2
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d316:	f003 0302 	and.w	r3, r3, #2
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d00b      	beq.n	800d336 <HAL_UART_IRQHandler+0xf6>
 800d31e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d322:	f003 0301 	and.w	r3, r3, #1
 800d326:	2b00      	cmp	r3, #0
 800d328:	d005      	beq.n	800d336 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d32e:	f043 0204 	orr.w	r2, r3, #4
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d33a:	f003 0308 	and.w	r3, r3, #8
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d011      	beq.n	800d366 <HAL_UART_IRQHandler+0x126>
 800d342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d346:	f003 0320 	and.w	r3, r3, #32
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d105      	bne.n	800d35a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d34e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d352:	f003 0301 	and.w	r3, r3, #1
 800d356:	2b00      	cmp	r3, #0
 800d358:	d005      	beq.n	800d366 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d35e:	f043 0208 	orr.w	r2, r3, #8
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	f000 81f2 	beq.w	800d754 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d374:	f003 0320 	and.w	r3, r3, #32
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d008      	beq.n	800d38e <HAL_UART_IRQHandler+0x14e>
 800d37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d380:	f003 0320 	and.w	r3, r3, #32
 800d384:	2b00      	cmp	r3, #0
 800d386:	d002      	beq.n	800d38e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 fc58 	bl	800dc3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	695b      	ldr	r3, [r3, #20]
 800d394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d398:	2b00      	cmp	r3, #0
 800d39a:	bf14      	ite	ne
 800d39c:	2301      	movne	r3, #1
 800d39e:	2300      	moveq	r3, #0
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3aa:	f003 0308 	and.w	r3, r3, #8
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d103      	bne.n	800d3ba <HAL_UART_IRQHandler+0x17a>
 800d3b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d04f      	beq.n	800d45a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 fb62 	bl	800da84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	695b      	ldr	r3, [r3, #20]
 800d3c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d041      	beq.n	800d452 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	3314      	adds	r3, #20
 800d3d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d3dc:	e853 3f00 	ldrex	r3, [r3]
 800d3e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d3e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d3e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d3ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	3314      	adds	r3, #20
 800d3f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d3fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d3fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d40a:	e841 2300 	strex	r3, r2, [r1]
 800d40e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d1d9      	bne.n	800d3ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d013      	beq.n	800d44a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d426:	4a7e      	ldr	r2, [pc, #504]	@ (800d620 <HAL_UART_IRQHandler+0x3e0>)
 800d428:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fa fe70 	bl	8008114 <HAL_DMA_Abort_IT>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d016      	beq.n	800d468 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d43e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d444:	4610      	mov	r0, r2
 800d446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d448:	e00e      	b.n	800d468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 f993 	bl	800d776 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d450:	e00a      	b.n	800d468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 f98f 	bl	800d776 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d458:	e006      	b.n	800d468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 f98b 	bl	800d776 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2200      	movs	r2, #0
 800d464:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d466:	e175      	b.n	800d754 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d468:	bf00      	nop
    return;
 800d46a:	e173      	b.n	800d754 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d470:	2b01      	cmp	r3, #1
 800d472:	f040 814f 	bne.w	800d714 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d47a:	f003 0310 	and.w	r3, r3, #16
 800d47e:	2b00      	cmp	r3, #0
 800d480:	f000 8148 	beq.w	800d714 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d488:	f003 0310 	and.w	r3, r3, #16
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f000 8141 	beq.w	800d714 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d492:	2300      	movs	r3, #0
 800d494:	60bb      	str	r3, [r7, #8]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	60bb      	str	r3, [r7, #8]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	60bb      	str	r3, [r7, #8]
 800d4a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	695b      	ldr	r3, [r3, #20]
 800d4ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f000 80b6 	beq.w	800d624 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d4c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f000 8145 	beq.w	800d758 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d4d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	f080 813e 	bcs.w	800d758 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d4e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4e8:	699b      	ldr	r3, [r3, #24]
 800d4ea:	2b20      	cmp	r3, #32
 800d4ec:	f000 8088 	beq.w	800d600 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	330c      	adds	r3, #12
 800d4f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d4fe:	e853 3f00 	ldrex	r3, [r3]
 800d502:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d506:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d50a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d50e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	330c      	adds	r3, #12
 800d518:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d51c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d520:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d524:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d528:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d52c:	e841 2300 	strex	r3, r2, [r1]
 800d530:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1d9      	bne.n	800d4f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	3314      	adds	r3, #20
 800d542:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d544:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d546:	e853 3f00 	ldrex	r3, [r3]
 800d54a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d54c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d54e:	f023 0301 	bic.w	r3, r3, #1
 800d552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	3314      	adds	r3, #20
 800d55c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d560:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d564:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d566:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d568:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d56c:	e841 2300 	strex	r3, r2, [r1]
 800d570:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d572:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d574:	2b00      	cmp	r3, #0
 800d576:	d1e1      	bne.n	800d53c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	3314      	adds	r3, #20
 800d57e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d580:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d582:	e853 3f00 	ldrex	r3, [r3]
 800d586:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d588:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d58a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d58e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	3314      	adds	r3, #20
 800d598:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d59c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d59e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d5a2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d5a4:	e841 2300 	strex	r3, r2, [r1]
 800d5a8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d5aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d1e3      	bne.n	800d578 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2220      	movs	r2, #32
 800d5b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	330c      	adds	r3, #12
 800d5c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5c8:	e853 3f00 	ldrex	r3, [r3]
 800d5cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d5ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5d0:	f023 0310 	bic.w	r3, r3, #16
 800d5d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	330c      	adds	r3, #12
 800d5de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d5e2:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d5e4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d5e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d5ea:	e841 2300 	strex	r3, r2, [r1]
 800d5ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d5f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1e3      	bne.n	800d5be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7fa fd4e 	bl	800809c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2202      	movs	r2, #2
 800d604:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d60e:	b29b      	uxth	r3, r3
 800d610:	1ad3      	subs	r3, r2, r3
 800d612:	b29b      	uxth	r3, r3
 800d614:	4619      	mov	r1, r3
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 f8b6 	bl	800d788 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d61c:	e09c      	b.n	800d758 <HAL_UART_IRQHandler+0x518>
 800d61e:	bf00      	nop
 800d620:	0800db49 	.word	0x0800db49
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	1ad3      	subs	r3, r2, r3
 800d630:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d638:	b29b      	uxth	r3, r3
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f000 808e 	beq.w	800d75c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d644:	2b00      	cmp	r3, #0
 800d646:	f000 8089 	beq.w	800d75c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	330c      	adds	r3, #12
 800d650:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d654:	e853 3f00 	ldrex	r3, [r3]
 800d658:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d65a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d65c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d660:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	330c      	adds	r3, #12
 800d66a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d66e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d670:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d672:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d676:	e841 2300 	strex	r3, r2, [r1]
 800d67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d67c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d1e3      	bne.n	800d64a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	3314      	adds	r3, #20
 800d688:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68c:	e853 3f00 	ldrex	r3, [r3]
 800d690:	623b      	str	r3, [r7, #32]
   return(result);
 800d692:	6a3b      	ldr	r3, [r7, #32]
 800d694:	f023 0301 	bic.w	r3, r3, #1
 800d698:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	3314      	adds	r3, #20
 800d6a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d6a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800d6a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6ae:	e841 2300 	strex	r3, r2, [r1]
 800d6b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d1e3      	bne.n	800d682 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2220      	movs	r2, #32
 800d6be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	330c      	adds	r3, #12
 800d6ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	e853 3f00 	ldrex	r3, [r3]
 800d6d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f023 0310 	bic.w	r3, r3, #16
 800d6de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	330c      	adds	r3, #12
 800d6e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d6ec:	61fa      	str	r2, [r7, #28]
 800d6ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f0:	69b9      	ldr	r1, [r7, #24]
 800d6f2:	69fa      	ldr	r2, [r7, #28]
 800d6f4:	e841 2300 	strex	r3, r2, [r1]
 800d6f8:	617b      	str	r3, [r7, #20]
   return(result);
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1e3      	bne.n	800d6c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2202      	movs	r2, #2
 800d704:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d706:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d70a:	4619      	mov	r1, r3
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 f83b 	bl	800d788 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d712:	e023      	b.n	800d75c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d009      	beq.n	800d734 <HAL_UART_IRQHandler+0x4f4>
 800d720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d003      	beq.n	800d734 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f000 fa1f 	bl	800db70 <UART_Transmit_IT>
    return;
 800d732:	e014      	b.n	800d75e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d00e      	beq.n	800d75e <HAL_UART_IRQHandler+0x51e>
 800d740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d008      	beq.n	800d75e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 fa5e 	bl	800dc0e <UART_EndTransmit_IT>
    return;
 800d752:	e004      	b.n	800d75e <HAL_UART_IRQHandler+0x51e>
    return;
 800d754:	bf00      	nop
 800d756:	e002      	b.n	800d75e <HAL_UART_IRQHandler+0x51e>
      return;
 800d758:	bf00      	nop
 800d75a:	e000      	b.n	800d75e <HAL_UART_IRQHandler+0x51e>
      return;
 800d75c:	bf00      	nop
  }
}
 800d75e:	37e8      	adds	r7, #232	@ 0xe8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800d76c:	bf00      	nop
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	bc80      	pop	{r7}
 800d774:	4770      	bx	lr

0800d776 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d776:	b480      	push	{r7}
 800d778:	b083      	sub	sp, #12
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d77e:	bf00      	nop
 800d780:	370c      	adds	r7, #12
 800d782:	46bd      	mov	sp, r7
 800d784:	bc80      	pop	{r7}
 800d786:	4770      	bx	lr

0800d788 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	460b      	mov	r3, r1
 800d792:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d794:	bf00      	nop
 800d796:	370c      	adds	r7, #12
 800d798:	46bd      	mov	sp, r7
 800d79a:	bc80      	pop	{r7}
 800d79c:	4770      	bx	lr

0800d79e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d79e:	b580      	push	{r7, lr}
 800d7a0:	b090      	sub	sp, #64	@ 0x40
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f003 0320 	and.w	r3, r3, #32
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d137      	bne.n	800d82a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800d7ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7bc:	2200      	movs	r2, #0
 800d7be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d7c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	3314      	adds	r3, #20
 800d7c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ca:	e853 3f00 	ldrex	r3, [r3]
 800d7ce:	623b      	str	r3, [r7, #32]
   return(result);
 800d7d0:	6a3b      	ldr	r3, [r7, #32]
 800d7d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d7d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	3314      	adds	r3, #20
 800d7de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d7e0:	633a      	str	r2, [r7, #48]	@ 0x30
 800d7e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d7e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7e8:	e841 2300 	strex	r3, r2, [r1]
 800d7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d1e5      	bne.n	800d7c0 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d7f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	330c      	adds	r3, #12
 800d7fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	e853 3f00 	ldrex	r3, [r3]
 800d802:	60fb      	str	r3, [r7, #12]
   return(result);
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d80a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d80c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	330c      	adds	r3, #12
 800d812:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d814:	61fa      	str	r2, [r7, #28]
 800d816:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d818:	69b9      	ldr	r1, [r7, #24]
 800d81a:	69fa      	ldr	r2, [r7, #28]
 800d81c:	e841 2300 	strex	r3, r2, [r1]
 800d820:	617b      	str	r3, [r7, #20]
   return(result);
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d1e5      	bne.n	800d7f4 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d828:	e002      	b.n	800d830 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d82a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d82c:	f7f7 fa5a 	bl	8004ce4 <HAL_UART_TxCpltCallback>
}
 800d830:	bf00      	nop
 800d832:	3740      	adds	r7, #64	@ 0x40
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d844:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d846:	68f8      	ldr	r0, [r7, #12]
 800d848:	f7ff ff8c 	bl	800d764 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d84c:	bf00      	nop
 800d84e:	3710      	adds	r7, #16
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d85c:	2300      	movs	r3, #0
 800d85e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d864:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	695b      	ldr	r3, [r3, #20]
 800d86c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d870:	2b00      	cmp	r3, #0
 800d872:	bf14      	ite	ne
 800d874:	2301      	movne	r3, #1
 800d876:	2300      	moveq	r3, #0
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d882:	b2db      	uxtb	r3, r3
 800d884:	2b21      	cmp	r3, #33	@ 0x21
 800d886:	d108      	bne.n	800d89a <UART_DMAError+0x46>
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d005      	beq.n	800d89a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	2200      	movs	r2, #0
 800d892:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800d894:	68b8      	ldr	r0, [r7, #8]
 800d896:	f000 f8ce 	bl	800da36 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	695b      	ldr	r3, [r3, #20]
 800d8a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	bf14      	ite	ne
 800d8a8:	2301      	movne	r3, #1
 800d8aa:	2300      	moveq	r3, #0
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	2b22      	cmp	r3, #34	@ 0x22
 800d8ba:	d108      	bne.n	800d8ce <UART_DMAError+0x7a>
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d005      	beq.n	800d8ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800d8c8:	68b8      	ldr	r0, [r7, #8]
 800d8ca:	f000 f8db 	bl	800da84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8d2:	f043 0210 	orr.w	r2, r3, #16
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d8da:	68b8      	ldr	r0, [r7, #8]
 800d8dc:	f7ff ff4b 	bl	800d776 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8e0:	bf00      	nop
 800d8e2:	3710      	adds	r7, #16
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b090      	sub	sp, #64	@ 0x40
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	603b      	str	r3, [r7, #0]
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8f8:	e050      	b.n	800d99c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d900:	d04c      	beq.n	800d99c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d904:	2b00      	cmp	r3, #0
 800d906:	d007      	beq.n	800d918 <UART_WaitOnFlagUntilTimeout+0x30>
 800d908:	f7fa f9e4 	bl	8007cd4 <HAL_GetTick>
 800d90c:	4602      	mov	r2, r0
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d914:	429a      	cmp	r2, r3
 800d916:	d241      	bcs.n	800d99c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	330c      	adds	r3, #12
 800d91e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d922:	e853 3f00 	ldrex	r3, [r3]
 800d926:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d92a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	330c      	adds	r3, #12
 800d936:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d938:	637a      	str	r2, [r7, #52]	@ 0x34
 800d93a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d93c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d93e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d940:	e841 2300 	strex	r3, r2, [r1]
 800d944:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1e5      	bne.n	800d918 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	3314      	adds	r3, #20
 800d952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	e853 3f00 	ldrex	r3, [r3]
 800d95a:	613b      	str	r3, [r7, #16]
   return(result);
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	f023 0301 	bic.w	r3, r3, #1
 800d962:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	3314      	adds	r3, #20
 800d96a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d96c:	623a      	str	r2, [r7, #32]
 800d96e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d970:	69f9      	ldr	r1, [r7, #28]
 800d972:	6a3a      	ldr	r2, [r7, #32]
 800d974:	e841 2300 	strex	r3, r2, [r1]
 800d978:	61bb      	str	r3, [r7, #24]
   return(result);
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d1e5      	bne.n	800d94c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2220      	movs	r2, #32
 800d984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2220      	movs	r2, #32
 800d98c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2200      	movs	r2, #0
 800d994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800d998:	2303      	movs	r3, #3
 800d99a:	e00f      	b.n	800d9bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	68ba      	ldr	r2, [r7, #8]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	bf0c      	ite	eq
 800d9ac:	2301      	moveq	r3, #1
 800d9ae:	2300      	movne	r3, #0
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	79fb      	ldrb	r3, [r7, #7]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d09f      	beq.n	800d8fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d9ba:	2300      	movs	r3, #0
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3740      	adds	r7, #64	@ 0x40
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	88fa      	ldrh	r2, [r7, #6]
 800d9dc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	88fa      	ldrh	r2, [r7, #6]
 800d9e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2222      	movs	r2, #34	@ 0x22
 800d9ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	691b      	ldr	r3, [r3, #16]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d007      	beq.n	800da0a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	68da      	ldr	r2, [r3, #12]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800da08:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	695a      	ldr	r2, [r3, #20]
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f042 0201 	orr.w	r2, r2, #1
 800da18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	68da      	ldr	r2, [r3, #12]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f042 0220 	orr.w	r2, r2, #32
 800da28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800da2a:	2300      	movs	r3, #0
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3714      	adds	r7, #20
 800da30:	46bd      	mov	sp, r7
 800da32:	bc80      	pop	{r7}
 800da34:	4770      	bx	lr

0800da36 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800da36:	b480      	push	{r7}
 800da38:	b089      	sub	sp, #36	@ 0x24
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	330c      	adds	r3, #12
 800da44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	e853 3f00 	ldrex	r3, [r3]
 800da4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800da54:	61fb      	str	r3, [r7, #28]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	330c      	adds	r3, #12
 800da5c:	69fa      	ldr	r2, [r7, #28]
 800da5e:	61ba      	str	r2, [r7, #24]
 800da60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da62:	6979      	ldr	r1, [r7, #20]
 800da64:	69ba      	ldr	r2, [r7, #24]
 800da66:	e841 2300 	strex	r3, r2, [r1]
 800da6a:	613b      	str	r3, [r7, #16]
   return(result);
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d1e5      	bne.n	800da3e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2220      	movs	r2, #32
 800da76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800da7a:	bf00      	nop
 800da7c:	3724      	adds	r7, #36	@ 0x24
 800da7e:	46bd      	mov	sp, r7
 800da80:	bc80      	pop	{r7}
 800da82:	4770      	bx	lr

0800da84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da84:	b480      	push	{r7}
 800da86:	b095      	sub	sp, #84	@ 0x54
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	330c      	adds	r3, #12
 800da92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da96:	e853 3f00 	ldrex	r3, [r3]
 800da9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800da9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800daa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	330c      	adds	r3, #12
 800daaa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800daac:	643a      	str	r2, [r7, #64]	@ 0x40
 800daae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dab2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dab4:	e841 2300 	strex	r3, r2, [r1]
 800dab8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800daba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d1e5      	bne.n	800da8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	3314      	adds	r3, #20
 800dac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac8:	6a3b      	ldr	r3, [r7, #32]
 800daca:	e853 3f00 	ldrex	r3, [r3]
 800dace:	61fb      	str	r3, [r7, #28]
   return(result);
 800dad0:	69fb      	ldr	r3, [r7, #28]
 800dad2:	f023 0301 	bic.w	r3, r3, #1
 800dad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	3314      	adds	r3, #20
 800dade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dae0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dae8:	e841 2300 	strex	r3, r2, [r1]
 800daec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800daee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d1e5      	bne.n	800dac0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	d119      	bne.n	800db30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	330c      	adds	r3, #12
 800db02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	e853 3f00 	ldrex	r3, [r3]
 800db0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	f023 0310 	bic.w	r3, r3, #16
 800db12:	647b      	str	r3, [r7, #68]	@ 0x44
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	330c      	adds	r3, #12
 800db1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db1c:	61ba      	str	r2, [r7, #24]
 800db1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db20:	6979      	ldr	r1, [r7, #20]
 800db22:	69ba      	ldr	r2, [r7, #24]
 800db24:	e841 2300 	strex	r3, r2, [r1]
 800db28:	613b      	str	r3, [r7, #16]
   return(result);
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d1e5      	bne.n	800dafc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2220      	movs	r2, #32
 800db34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800db3e:	bf00      	nop
 800db40:	3754      	adds	r7, #84	@ 0x54
 800db42:	46bd      	mov	sp, r7
 800db44:	bc80      	pop	{r7}
 800db46:	4770      	bx	lr

0800db48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2200      	movs	r2, #0
 800db5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2200      	movs	r2, #0
 800db60:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db62:	68f8      	ldr	r0, [r7, #12]
 800db64:	f7ff fe07 	bl	800d776 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db68:	bf00      	nop
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800db70:	b480      	push	{r7}
 800db72:	b085      	sub	sp, #20
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	2b21      	cmp	r3, #33	@ 0x21
 800db82:	d13e      	bne.n	800dc02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db8c:	d114      	bne.n	800dbb8 <UART_Transmit_IT+0x48>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	691b      	ldr	r3, [r3, #16]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d110      	bne.n	800dbb8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6a1b      	ldr	r3, [r3, #32]
 800db9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	881b      	ldrh	r3, [r3, #0]
 800dba0:	461a      	mov	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dbaa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6a1b      	ldr	r3, [r3, #32]
 800dbb0:	1c9a      	adds	r2, r3, #2
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	621a      	str	r2, [r3, #32]
 800dbb6:	e008      	b.n	800dbca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6a1b      	ldr	r3, [r3, #32]
 800dbbc:	1c59      	adds	r1, r3, #1
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	6211      	str	r1, [r2, #32]
 800dbc2:	781a      	ldrb	r2, [r3, #0]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	3b01      	subs	r3, #1
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d10f      	bne.n	800dbfe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	68da      	ldr	r2, [r3, #12]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dbec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	68da      	ldr	r2, [r3, #12]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dbfc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	e000      	b.n	800dc04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dc02:	2302      	movs	r3, #2
  }
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3714      	adds	r7, #20
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bc80      	pop	{r7}
 800dc0c:	4770      	bx	lr

0800dc0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b082      	sub	sp, #8
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	68da      	ldr	r2, [r3, #12]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dc24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2220      	movs	r2, #32
 800dc2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f7f7 f858 	bl	8004ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3708      	adds	r7, #8
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}

0800dc3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dc3e:	b580      	push	{r7, lr}
 800dc40:	b08c      	sub	sp, #48	@ 0x30
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dc4c:	b2db      	uxtb	r3, r3
 800dc4e:	2b22      	cmp	r3, #34	@ 0x22
 800dc50:	f040 80ae 	bne.w	800ddb0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc5c:	d117      	bne.n	800dc8e <UART_Receive_IT+0x50>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	691b      	ldr	r3, [r3, #16]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d113      	bne.n	800dc8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800dc66:	2300      	movs	r3, #0
 800dc68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc7c:	b29a      	uxth	r2, r3
 800dc7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc86:	1c9a      	adds	r2, r3, #2
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	629a      	str	r2, [r3, #40]	@ 0x28
 800dc8c:	e026      	b.n	800dcdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800dc94:	2300      	movs	r3, #0
 800dc96:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dca0:	d007      	beq.n	800dcb2 <UART_Receive_IT+0x74>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	689b      	ldr	r3, [r3, #8]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d10a      	bne.n	800dcc0 <UART_Receive_IT+0x82>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	691b      	ldr	r3, [r3, #16]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d106      	bne.n	800dcc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	b2da      	uxtb	r2, r3
 800dcba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcbc:	701a      	strb	r2, [r3, #0]
 800dcbe:	e008      	b.n	800dcd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dccc:	b2da      	uxtb	r2, r3
 800dcce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcd6:	1c5a      	adds	r2, r3, #1
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	3b01      	subs	r3, #1
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	4619      	mov	r1, r3
 800dcea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d15d      	bne.n	800ddac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	68da      	ldr	r2, [r3, #12]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f022 0220 	bic.w	r2, r2, #32
 800dcfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	68da      	ldr	r2, [r3, #12]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dd0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	695a      	ldr	r2, [r3, #20]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f022 0201 	bic.w	r2, r2, #1
 800dd1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2220      	movs	r2, #32
 800dd24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d135      	bne.n	800dda2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	330c      	adds	r3, #12
 800dd42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	e853 3f00 	ldrex	r3, [r3]
 800dd4a:	613b      	str	r3, [r7, #16]
   return(result);
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	f023 0310 	bic.w	r3, r3, #16
 800dd52:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	330c      	adds	r3, #12
 800dd5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd5c:	623a      	str	r2, [r7, #32]
 800dd5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd60:	69f9      	ldr	r1, [r7, #28]
 800dd62:	6a3a      	ldr	r2, [r7, #32]
 800dd64:	e841 2300 	strex	r3, r2, [r1]
 800dd68:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd6a:	69bb      	ldr	r3, [r7, #24]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d1e5      	bne.n	800dd3c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f003 0310 	and.w	r3, r3, #16
 800dd7a:	2b10      	cmp	r3, #16
 800dd7c:	d10a      	bne.n	800dd94 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dd7e:	2300      	movs	r3, #0
 800dd80:	60fb      	str	r3, [r7, #12]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	60fb      	str	r3, [r7, #12]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	60fb      	str	r3, [r7, #12]
 800dd92:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800dd98:	4619      	mov	r1, r3
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7ff fcf4 	bl	800d788 <HAL_UARTEx_RxEventCallback>
 800dda0:	e002      	b.n	800dda8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f7f6 ff84 	bl	8004cb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	e002      	b.n	800ddb2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ddac:	2300      	movs	r3, #0
 800ddae:	e000      	b.n	800ddb2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ddb0:	2302      	movs	r3, #2
  }
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3730      	adds	r7, #48	@ 0x30
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}
	...

0800ddbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	691b      	ldr	r3, [r3, #16]
 800ddca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	68da      	ldr	r2, [r3, #12]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	430a      	orrs	r2, r1
 800ddd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	689a      	ldr	r2, [r3, #8]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	691b      	ldr	r3, [r3, #16]
 800dde2:	431a      	orrs	r2, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	695b      	ldr	r3, [r3, #20]
 800dde8:	4313      	orrs	r3, r2
 800ddea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	68db      	ldr	r3, [r3, #12]
 800ddf2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800ddf6:	f023 030c 	bic.w	r3, r3, #12
 800ddfa:	687a      	ldr	r2, [r7, #4]
 800ddfc:	6812      	ldr	r2, [r2, #0]
 800ddfe:	68b9      	ldr	r1, [r7, #8]
 800de00:	430b      	orrs	r3, r1
 800de02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	695b      	ldr	r3, [r3, #20]
 800de0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	699a      	ldr	r2, [r3, #24]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	430a      	orrs	r2, r1
 800de18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	4a2c      	ldr	r2, [pc, #176]	@ (800ded0 <UART_SetConfig+0x114>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d103      	bne.n	800de2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800de24:	f7fd f8e4 	bl	800aff0 <HAL_RCC_GetPCLK2Freq>
 800de28:	60f8      	str	r0, [r7, #12]
 800de2a:	e002      	b.n	800de32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800de2c:	f7fd f8cc 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 800de30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	4613      	mov	r3, r2
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	4413      	add	r3, r2
 800de3a:	009a      	lsls	r2, r3, #2
 800de3c:	441a      	add	r2, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	fbb2 f3f3 	udiv	r3, r2, r3
 800de48:	4a22      	ldr	r2, [pc, #136]	@ (800ded4 <UART_SetConfig+0x118>)
 800de4a:	fba2 2303 	umull	r2, r3, r2, r3
 800de4e:	095b      	lsrs	r3, r3, #5
 800de50:	0119      	lsls	r1, r3, #4
 800de52:	68fa      	ldr	r2, [r7, #12]
 800de54:	4613      	mov	r3, r2
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	4413      	add	r3, r2
 800de5a:	009a      	lsls	r2, r3, #2
 800de5c:	441a      	add	r2, r3
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	fbb2 f2f3 	udiv	r2, r2, r3
 800de68:	4b1a      	ldr	r3, [pc, #104]	@ (800ded4 <UART_SetConfig+0x118>)
 800de6a:	fba3 0302 	umull	r0, r3, r3, r2
 800de6e:	095b      	lsrs	r3, r3, #5
 800de70:	2064      	movs	r0, #100	@ 0x64
 800de72:	fb00 f303 	mul.w	r3, r0, r3
 800de76:	1ad3      	subs	r3, r2, r3
 800de78:	011b      	lsls	r3, r3, #4
 800de7a:	3332      	adds	r3, #50	@ 0x32
 800de7c:	4a15      	ldr	r2, [pc, #84]	@ (800ded4 <UART_SetConfig+0x118>)
 800de7e:	fba2 2303 	umull	r2, r3, r2, r3
 800de82:	095b      	lsrs	r3, r3, #5
 800de84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800de88:	4419      	add	r1, r3
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	4613      	mov	r3, r2
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	4413      	add	r3, r2
 800de92:	009a      	lsls	r2, r3, #2
 800de94:	441a      	add	r2, r3
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	fbb2 f2f3 	udiv	r2, r2, r3
 800dea0:	4b0c      	ldr	r3, [pc, #48]	@ (800ded4 <UART_SetConfig+0x118>)
 800dea2:	fba3 0302 	umull	r0, r3, r3, r2
 800dea6:	095b      	lsrs	r3, r3, #5
 800dea8:	2064      	movs	r0, #100	@ 0x64
 800deaa:	fb00 f303 	mul.w	r3, r0, r3
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	011b      	lsls	r3, r3, #4
 800deb2:	3332      	adds	r3, #50	@ 0x32
 800deb4:	4a07      	ldr	r2, [pc, #28]	@ (800ded4 <UART_SetConfig+0x118>)
 800deb6:	fba2 2303 	umull	r2, r3, r2, r3
 800deba:	095b      	lsrs	r3, r3, #5
 800debc:	f003 020f 	and.w	r2, r3, #15
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	440a      	add	r2, r1
 800dec6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800dec8:	bf00      	nop
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	40013800 	.word	0x40013800
 800ded4:	51eb851f 	.word	0x51eb851f

0800ded8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ded8:	b084      	sub	sp, #16
 800deda:	b480      	push	{r7}
 800dedc:	b085      	sub	sp, #20
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	f107 001c 	add.w	r0, r7, #28
 800dee6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800deea:	2300      	movs	r3, #0
 800deec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800deee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800def0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800def2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800def4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800def6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800def8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800defa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800defc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800defe:	431a      	orrs	r2, r3
             Init.ClockDiv
 800df00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800df02:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800df04:	68fa      	ldr	r2, [r7, #12]
 800df06:	4313      	orrs	r3, r2
 800df08:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800df12:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800df16:	68fa      	ldr	r2, [r7, #12]
 800df18:	431a      	orrs	r2, r3
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800df1e:	2300      	movs	r3, #0
}
 800df20:	4618      	mov	r0, r3
 800df22:	3714      	adds	r7, #20
 800df24:	46bd      	mov	sp, r7
 800df26:	bc80      	pop	{r7}
 800df28:	b004      	add	sp, #16
 800df2a:	4770      	bx	lr

0800df2c <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b083      	sub	sp, #12
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	370c      	adds	r7, #12
 800df3e:	46bd      	mov	sp, r7
 800df40:	bc80      	pop	{r7}
 800df42:	4770      	bx	lr

0800df44 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	370c      	adds	r7, #12
 800df5e:	46bd      	mov	sp, r7
 800df60:	bc80      	pop	{r7}
 800df62:	4770      	bx	lr

0800df64 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2203      	movs	r2, #3
 800df70:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800df72:	2300      	movs	r3, #0
}
 800df74:	4618      	mov	r0, r3
 800df76:	370c      	adds	r7, #12
 800df78:	46bd      	mov	sp, r7
 800df7a:	bc80      	pop	{r7}
 800df7c:	4770      	bx	lr

0800df7e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800df7e:	b480      	push	{r7}
 800df80:	b083      	sub	sp, #12
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f003 0303 	and.w	r3, r3, #3
}
 800df8e:	4618      	mov	r0, r3
 800df90:	370c      	adds	r7, #12
 800df92:	46bd      	mov	sp, r7
 800df94:	bc80      	pop	{r7}
 800df96:	4770      	bx	lr

0800df98 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800df98:	b480      	push	{r7}
 800df9a:	b085      	sub	sp, #20
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dfb6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800dfbc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800dfc2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dfc4:	68fa      	ldr	r2, [r7, #12]
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800dfd2:	f023 030f 	bic.w	r3, r3, #15
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	431a      	orrs	r2, r3
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800dfde:	2300      	movs	r3, #0
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3714      	adds	r7, #20
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bc80      	pop	{r7}
 800dfe8:	4770      	bx	lr

0800dfea <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800dfea:	b480      	push	{r7}
 800dfec:	b083      	sub	sp, #12
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	691b      	ldr	r3, [r3, #16]
 800dff6:	b2db      	uxtb	r3, r3
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	370c      	adds	r7, #12
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bc80      	pop	{r7}
 800e000:	4770      	bx	lr

0800e002 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e002:	b480      	push	{r7}
 800e004:	b085      	sub	sp, #20
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
 800e00a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	3314      	adds	r3, #20
 800e010:	461a      	mov	r2, r3
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	4413      	add	r3, r2
 800e016:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
}  
 800e01c:	4618      	mov	r0, r3
 800e01e:	3714      	adds	r7, #20
 800e020:	46bd      	mov	sp, r7
 800e022:	bc80      	pop	{r7}
 800e024:	4770      	bx	lr

0800e026 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e026:	b480      	push	{r7}
 800e028:	b085      	sub	sp, #20
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
 800e02e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e030:	2300      	movs	r3, #0
 800e032:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	685a      	ldr	r2, [r3, #4]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e04c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e052:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e058:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e05a:	68fa      	ldr	r2, [r7, #12]
 800e05c:	4313      	orrs	r3, r2
 800e05e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e064:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	431a      	orrs	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e070:	2300      	movs	r3, #0

}
 800e072:	4618      	mov	r0, r3
 800e074:	3714      	adds	r7, #20
 800e076:	46bd      	mov	sp, r7
 800e078:	bc80      	pop	{r7}
 800e07a:	4770      	bx	lr

0800e07c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b088      	sub	sp, #32
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e08a:	2310      	movs	r3, #16
 800e08c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e08e:	2340      	movs	r3, #64	@ 0x40
 800e090:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e092:	2300      	movs	r3, #0
 800e094:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e09a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e09c:	f107 0308 	add.w	r3, r7, #8
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f7ff ff78 	bl	800df98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e0a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e0ac:	2110      	movs	r1, #16
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 f9d6 	bl	800e460 <SDMMC_GetCmdResp1>
 800e0b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0b6:	69fb      	ldr	r3, [r7, #28]
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3720      	adds	r7, #32
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b088      	sub	sp, #32
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e0ce:	2311      	movs	r3, #17
 800e0d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0d2:	2340      	movs	r3, #64	@ 0x40
 800e0d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e0de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0e0:	f107 0308 	add.w	r3, r7, #8
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f7ff ff56 	bl	800df98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e0ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e0f0:	2111      	movs	r1, #17
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 f9b4 	bl	800e460 <SDMMC_GetCmdResp1>
 800e0f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0fa:	69fb      	ldr	r3, [r7, #28]
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3720      	adds	r7, #32
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b088      	sub	sp, #32
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e112:	2312      	movs	r3, #18
 800e114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e116:	2340      	movs	r3, #64	@ 0x40
 800e118:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e11a:	2300      	movs	r3, #0
 800e11c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e11e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e122:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e124:	f107 0308 	add.w	r3, r7, #8
 800e128:	4619      	mov	r1, r3
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f7ff ff34 	bl	800df98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e130:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e134:	2112      	movs	r1, #18
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 f992 	bl	800e460 <SDMMC_GetCmdResp1>
 800e13c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e13e:	69fb      	ldr	r3, [r7, #28]
}
 800e140:	4618      	mov	r0, r3
 800e142:	3720      	adds	r7, #32
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b088      	sub	sp, #32
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e156:	2318      	movs	r3, #24
 800e158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e15a:	2340      	movs	r3, #64	@ 0x40
 800e15c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e15e:	2300      	movs	r3, #0
 800e160:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e162:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e166:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e168:	f107 0308 	add.w	r3, r7, #8
 800e16c:	4619      	mov	r1, r3
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f7ff ff12 	bl	800df98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e174:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e178:	2118      	movs	r1, #24
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 f970 	bl	800e460 <SDMMC_GetCmdResp1>
 800e180:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e182:	69fb      	ldr	r3, [r7, #28]
}
 800e184:	4618      	mov	r0, r3
 800e186:	3720      	adds	r7, #32
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b088      	sub	sp, #32
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e19a:	2319      	movs	r3, #25
 800e19c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e19e:	2340      	movs	r3, #64	@ 0x40
 800e1a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e1aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1ac:	f107 0308 	add.w	r3, r7, #8
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f7ff fef0 	bl	800df98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e1b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e1bc:	2119      	movs	r1, #25
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f000 f94e 	bl	800e460 <SDMMC_GetCmdResp1>
 800e1c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1c6:	69fb      	ldr	r3, [r7, #28]
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3720      	adds	r7, #32
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b088      	sub	sp, #32
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e1dc:	230c      	movs	r3, #12
 800e1de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1e0:	2340      	movs	r3, #64	@ 0x40
 800e1e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e1ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1ee:	f107 0308 	add.w	r3, r7, #8
 800e1f2:	4619      	mov	r1, r3
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f7ff fecf 	bl	800df98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e1fa:	4a05      	ldr	r2, [pc, #20]	@ (800e210 <SDMMC_CmdStopTransfer+0x40>)
 800e1fc:	210c      	movs	r1, #12
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 f92e 	bl	800e460 <SDMMC_GetCmdResp1>
 800e204:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e206:	69fb      	ldr	r3, [r7, #28]
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3720      	adds	r7, #32
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}
 800e210:	05f5e100 	.word	0x05f5e100

0800e214 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b08a      	sub	sp, #40	@ 0x28
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e224:	2307      	movs	r3, #7
 800e226:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e228:	2340      	movs	r3, #64	@ 0x40
 800e22a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e22c:	2300      	movs	r3, #0
 800e22e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e230:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e234:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e236:	f107 0310 	add.w	r3, r7, #16
 800e23a:	4619      	mov	r1, r3
 800e23c:	68f8      	ldr	r0, [r7, #12]
 800e23e:	f7ff feab 	bl	800df98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e242:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e246:	2107      	movs	r1, #7
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f000 f909 	bl	800e460 <SDMMC_GetCmdResp1>
 800e24e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800e250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e252:	4618      	mov	r0, r3
 800e254:	3728      	adds	r7, #40	@ 0x28
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b088      	sub	sp, #32
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e262:	2300      	movs	r3, #0
 800e264:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e266:	2300      	movs	r3, #0
 800e268:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e26a:	2300      	movs	r3, #0
 800e26c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e26e:	2300      	movs	r3, #0
 800e270:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e276:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e278:	f107 0308 	add.w	r3, r7, #8
 800e27c:	4619      	mov	r1, r3
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f7ff fe8a 	bl	800df98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f000 fb21 	bl	800e8cc <SDMMC_GetCmdError>
 800e28a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e28c:	69fb      	ldr	r3, [r7, #28]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3720      	adds	r7, #32
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}

0800e296 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e296:	b580      	push	{r7, lr}
 800e298:	b088      	sub	sp, #32
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e29e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800e2a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e2a4:	2308      	movs	r3, #8
 800e2a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2a8:	2340      	movs	r3, #64	@ 0x40
 800e2aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2b6:	f107 0308 	add.w	r3, r7, #8
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f7ff fe6b 	bl	800df98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 fab4 	bl	800e830 <SDMMC_GetCmdResp7>
 800e2c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2ca:	69fb      	ldr	r3, [r7, #28]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3720      	adds	r7, #32
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b088      	sub	sp, #32
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e2e2:	2337      	movs	r3, #55	@ 0x37
 800e2e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2e6:	2340      	movs	r3, #64	@ 0x40
 800e2e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2f4:	f107 0308 	add.w	r3, r7, #8
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f7ff fe4c 	bl	800df98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e300:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e304:	2137      	movs	r1, #55	@ 0x37
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 f8aa 	bl	800e460 <SDMMC_GetCmdResp1>
 800e30c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e30e:	69fb      	ldr	r3, [r7, #28]
}
 800e310:	4618      	mov	r0, r3
 800e312:	3720      	adds	r7, #32
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b088      	sub	sp, #32
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e328:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e32c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e32e:	2329      	movs	r3, #41	@ 0x29
 800e330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e332:	2340      	movs	r3, #64	@ 0x40
 800e334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e336:	2300      	movs	r3, #0
 800e338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e33a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e33e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e340:	f107 0308 	add.w	r3, r7, #8
 800e344:	4619      	mov	r1, r3
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f7ff fe26 	bl	800df98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 f9bd 	bl	800e6cc <SDMMC_GetCmdResp3>
 800e352:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e354:	69fb      	ldr	r3, [r7, #28]
}
 800e356:	4618      	mov	r0, r3
 800e358:	3720      	adds	r7, #32
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e35e:	b580      	push	{r7, lr}
 800e360:	b088      	sub	sp, #32
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e366:	2300      	movs	r3, #0
 800e368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e36a:	2302      	movs	r3, #2
 800e36c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e36e:	23c0      	movs	r3, #192	@ 0xc0
 800e370:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e372:	2300      	movs	r3, #0
 800e374:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e37a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e37c:	f107 0308 	add.w	r3, r7, #8
 800e380:	4619      	mov	r1, r3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f7ff fe08 	bl	800df98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 f957 	bl	800e63c <SDMMC_GetCmdResp2>
 800e38e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e390:	69fb      	ldr	r3, [r7, #28]
}
 800e392:	4618      	mov	r0, r3
 800e394:	3720      	adds	r7, #32
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}

0800e39a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e39a:	b580      	push	{r7, lr}
 800e39c:	b088      	sub	sp, #32
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
 800e3a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e3a8:	2309      	movs	r3, #9
 800e3aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e3ac:	23c0      	movs	r3, #192	@ 0xc0
 800e3ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3ba:	f107 0308 	add.w	r3, r7, #8
 800e3be:	4619      	mov	r1, r3
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f7ff fde9 	bl	800df98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 f938 	bl	800e63c <SDMMC_GetCmdResp2>
 800e3cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3ce:	69fb      	ldr	r3, [r7, #28]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3720      	adds	r7, #32
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b088      	sub	sp, #32
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e3e6:	2303      	movs	r3, #3
 800e3e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3ea:	2340      	movs	r3, #64	@ 0x40
 800e3ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3f8:	f107 0308 	add.w	r3, r7, #8
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f7ff fdca 	bl	800df98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e404:	683a      	ldr	r2, [r7, #0]
 800e406:	2103      	movs	r1, #3
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f000 f99b 	bl	800e744 <SDMMC_GetCmdResp6>
 800e40e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e410:	69fb      	ldr	r3, [r7, #28]
}
 800e412:	4618      	mov	r0, r3
 800e414:	3720      	adds	r7, #32
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}

0800e41a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e41a:	b580      	push	{r7, lr}
 800e41c:	b088      	sub	sp, #32
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
 800e422:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e428:	230d      	movs	r3, #13
 800e42a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e42c:	2340      	movs	r3, #64	@ 0x40
 800e42e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e430:	2300      	movs	r3, #0
 800e432:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e434:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e438:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e43a:	f107 0308 	add.w	r3, r7, #8
 800e43e:	4619      	mov	r1, r3
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f7ff fda9 	bl	800df98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e44a:	210d      	movs	r1, #13
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f000 f807 	bl	800e460 <SDMMC_GetCmdResp1>
 800e452:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e454:	69fb      	ldr	r3, [r7, #28]
}
 800e456:	4618      	mov	r0, r3
 800e458:	3720      	adds	r7, #32
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}
	...

0800e460 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b088      	sub	sp, #32
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	460b      	mov	r3, r1
 800e46a:	607a      	str	r2, [r7, #4]
 800e46c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e46e:	4b70      	ldr	r3, [pc, #448]	@ (800e630 <SDMMC_GetCmdResp1+0x1d0>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	4a70      	ldr	r2, [pc, #448]	@ (800e634 <SDMMC_GetCmdResp1+0x1d4>)
 800e474:	fba2 2303 	umull	r2, r3, r2, r3
 800e478:	0a5a      	lsrs	r2, r3, #9
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	fb02 f303 	mul.w	r3, r2, r3
 800e480:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	1e5a      	subs	r2, r3, #1
 800e486:	61fa      	str	r2, [r7, #28]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d102      	bne.n	800e492 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e48c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e490:	e0c9      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e496:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e498:	69bb      	ldr	r3, [r7, #24]
 800e49a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d0ef      	beq.n	800e482 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e4a2:	69bb      	ldr	r3, [r7, #24]
 800e4a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d1ea      	bne.n	800e482 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4b0:	f003 0304 	and.w	r3, r3, #4
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d004      	beq.n	800e4c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2204      	movs	r2, #4
 800e4bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4be:	2304      	movs	r3, #4
 800e4c0:	e0b1      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4c6:	f003 0301 	and.w	r3, r3, #1
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d004      	beq.n	800e4d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	e0a6      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	22c5      	movs	r2, #197	@ 0xc5
 800e4dc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e4de:	68f8      	ldr	r0, [r7, #12]
 800e4e0:	f7ff fd83 	bl	800dfea <SDIO_GetCommandResponse>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	7afb      	ldrb	r3, [r7, #11]
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d001      	beq.n	800e4f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e099      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e4f2:	2100      	movs	r1, #0
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f7ff fd84 	bl	800e002 <SDIO_GetResponse>
 800e4fa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e4fc:	697a      	ldr	r2, [r7, #20]
 800e4fe:	4b4e      	ldr	r3, [pc, #312]	@ (800e638 <SDMMC_GetCmdResp1+0x1d8>)
 800e500:	4013      	ands	r3, r2
 800e502:	2b00      	cmp	r3, #0
 800e504:	d101      	bne.n	800e50a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e506:	2300      	movs	r3, #0
 800e508:	e08d      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	da02      	bge.n	800e516 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e510:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e514:	e087      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d001      	beq.n	800e524 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e520:	2340      	movs	r3, #64	@ 0x40
 800e522:	e080      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d001      	beq.n	800e532 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e52e:	2380      	movs	r3, #128	@ 0x80
 800e530:	e079      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d002      	beq.n	800e542 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e53c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e540:	e071      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d002      	beq.n	800e552 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e54c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e550:	e069      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d002      	beq.n	800e562 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e55c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e560:	e061      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d002      	beq.n	800e572 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e56c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e570:	e059      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d002      	beq.n	800e582 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e57c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e580:	e051      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d002      	beq.n	800e592 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e58c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e590:	e049      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d002      	beq.n	800e5a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e59c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e5a0:	e041      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e5ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e5b0:	e039      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d002      	beq.n	800e5c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e5bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e5c0:	e031      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d002      	beq.n	800e5d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e5cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800e5d0:	e029      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d002      	beq.n	800e5e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e5dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e5e0:	e021      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d002      	beq.n	800e5f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e5ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e5f0:	e019      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e5fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e600:	e011      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d002      	beq.n	800e612 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e60c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e610:	e009      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	f003 0308 	and.w	r3, r3, #8
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d002      	beq.n	800e622 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e61c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800e620:	e001      	b.n	800e626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e622:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e626:	4618      	mov	r0, r3
 800e628:	3720      	adds	r7, #32
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	20000028 	.word	0x20000028
 800e634:	10624dd3 	.word	0x10624dd3
 800e638:	fdffe008 	.word	0xfdffe008

0800e63c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e644:	4b1f      	ldr	r3, [pc, #124]	@ (800e6c4 <SDMMC_GetCmdResp2+0x88>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4a1f      	ldr	r2, [pc, #124]	@ (800e6c8 <SDMMC_GetCmdResp2+0x8c>)
 800e64a:	fba2 2303 	umull	r2, r3, r2, r3
 800e64e:	0a5b      	lsrs	r3, r3, #9
 800e650:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e654:	fb02 f303 	mul.w	r3, r2, r3
 800e658:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	1e5a      	subs	r2, r3, #1
 800e65e:	60fa      	str	r2, [r7, #12]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d102      	bne.n	800e66a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e664:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e668:	e026      	b.n	800e6b8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e66e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e676:	2b00      	cmp	r3, #0
 800e678:	d0ef      	beq.n	800e65a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e680:	2b00      	cmp	r3, #0
 800e682:	d1ea      	bne.n	800e65a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e688:	f003 0304 	and.w	r3, r3, #4
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d004      	beq.n	800e69a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2204      	movs	r2, #4
 800e694:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e696:	2304      	movs	r3, #4
 800e698:	e00e      	b.n	800e6b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e69e:	f003 0301 	and.w	r3, r3, #1
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d004      	beq.n	800e6b0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2201      	movs	r2, #1
 800e6aa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	e003      	b.n	800e6b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	22c5      	movs	r2, #197	@ 0xc5
 800e6b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e6b6:	2300      	movs	r3, #0
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3714      	adds	r7, #20
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bc80      	pop	{r7}
 800e6c0:	4770      	bx	lr
 800e6c2:	bf00      	nop
 800e6c4:	20000028 	.word	0x20000028
 800e6c8:	10624dd3 	.word	0x10624dd3

0800e6cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b085      	sub	sp, #20
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e6d4:	4b19      	ldr	r3, [pc, #100]	@ (800e73c <SDMMC_GetCmdResp3+0x70>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	4a19      	ldr	r2, [pc, #100]	@ (800e740 <SDMMC_GetCmdResp3+0x74>)
 800e6da:	fba2 2303 	umull	r2, r3, r2, r3
 800e6de:	0a5b      	lsrs	r3, r3, #9
 800e6e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e6e4:	fb02 f303 	mul.w	r3, r2, r3
 800e6e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	1e5a      	subs	r2, r3, #1
 800e6ee:	60fa      	str	r2, [r7, #12]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d102      	bne.n	800e6fa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e6f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e6f8:	e01b      	b.n	800e732 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e6fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e706:	2b00      	cmp	r3, #0
 800e708:	d0ef      	beq.n	800e6ea <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e710:	2b00      	cmp	r3, #0
 800e712:	d1ea      	bne.n	800e6ea <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e718:	f003 0304 	and.w	r3, r3, #4
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d004      	beq.n	800e72a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2204      	movs	r2, #4
 800e724:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e726:	2304      	movs	r3, #4
 800e728:	e003      	b.n	800e732 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	22c5      	movs	r2, #197	@ 0xc5
 800e72e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e730:	2300      	movs	r3, #0
}
 800e732:	4618      	mov	r0, r3
 800e734:	3714      	adds	r7, #20
 800e736:	46bd      	mov	sp, r7
 800e738:	bc80      	pop	{r7}
 800e73a:	4770      	bx	lr
 800e73c:	20000028 	.word	0x20000028
 800e740:	10624dd3 	.word	0x10624dd3

0800e744 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b088      	sub	sp, #32
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	460b      	mov	r3, r1
 800e74e:	607a      	str	r2, [r7, #4]
 800e750:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e752:	4b35      	ldr	r3, [pc, #212]	@ (800e828 <SDMMC_GetCmdResp6+0xe4>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	4a35      	ldr	r2, [pc, #212]	@ (800e82c <SDMMC_GetCmdResp6+0xe8>)
 800e758:	fba2 2303 	umull	r2, r3, r2, r3
 800e75c:	0a5b      	lsrs	r3, r3, #9
 800e75e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e762:	fb02 f303 	mul.w	r3, r2, r3
 800e766:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	1e5a      	subs	r2, r3, #1
 800e76c:	61fa      	str	r2, [r7, #28]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d102      	bne.n	800e778 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e772:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e776:	e052      	b.n	800e81e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e77c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e784:	2b00      	cmp	r3, #0
 800e786:	d0ef      	beq.n	800e768 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d1ea      	bne.n	800e768 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e796:	f003 0304 	and.w	r3, r3, #4
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d004      	beq.n	800e7a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2204      	movs	r2, #4
 800e7a2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7a4:	2304      	movs	r3, #4
 800e7a6:	e03a      	b.n	800e81e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7ac:	f003 0301 	and.w	r3, r3, #1
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d004      	beq.n	800e7be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e02f      	b.n	800e81e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f7ff fc13 	bl	800dfea <SDIO_GetCommandResponse>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	7afb      	ldrb	r3, [r7, #11]
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d001      	beq.n	800e7d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	e025      	b.n	800e81e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	22c5      	movs	r2, #197	@ 0xc5
 800e7d6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e7d8:	2100      	movs	r1, #0
 800e7da:	68f8      	ldr	r0, [r7, #12]
 800e7dc:	f7ff fc11 	bl	800e002 <SDIO_GetResponse>
 800e7e0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d106      	bne.n	800e7fa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	0c1b      	lsrs	r3, r3, #16
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	e011      	b.n	800e81e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e800:	2b00      	cmp	r3, #0
 800e802:	d002      	beq.n	800e80a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e804:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e808:	e009      	b.n	800e81e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e810:	2b00      	cmp	r3, #0
 800e812:	d002      	beq.n	800e81a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e814:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e818:	e001      	b.n	800e81e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e81a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3720      	adds	r7, #32
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	20000028 	.word	0x20000028
 800e82c:	10624dd3 	.word	0x10624dd3

0800e830 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e830:	b480      	push	{r7}
 800e832:	b085      	sub	sp, #20
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e838:	4b22      	ldr	r3, [pc, #136]	@ (800e8c4 <SDMMC_GetCmdResp7+0x94>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4a22      	ldr	r2, [pc, #136]	@ (800e8c8 <SDMMC_GetCmdResp7+0x98>)
 800e83e:	fba2 2303 	umull	r2, r3, r2, r3
 800e842:	0a5b      	lsrs	r3, r3, #9
 800e844:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e848:	fb02 f303 	mul.w	r3, r2, r3
 800e84c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	1e5a      	subs	r2, r3, #1
 800e852:	60fa      	str	r2, [r7, #12]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d102      	bne.n	800e85e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e858:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e85c:	e02c      	b.n	800e8b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e862:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d0ef      	beq.n	800e84e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e874:	2b00      	cmp	r3, #0
 800e876:	d1ea      	bne.n	800e84e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e87c:	f003 0304 	and.w	r3, r3, #4
 800e880:	2b00      	cmp	r3, #0
 800e882:	d004      	beq.n	800e88e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2204      	movs	r2, #4
 800e888:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e88a:	2304      	movs	r3, #4
 800e88c:	e014      	b.n	800e8b8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e892:	f003 0301 	and.w	r3, r3, #1
 800e896:	2b00      	cmp	r3, #0
 800e898:	d004      	beq.n	800e8a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2201      	movs	r2, #1
 800e89e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e009      	b.n	800e8b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d002      	beq.n	800e8b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2240      	movs	r2, #64	@ 0x40
 800e8b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e8b6:	2300      	movs	r3, #0
  
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3714      	adds	r7, #20
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bc80      	pop	{r7}
 800e8c0:	4770      	bx	lr
 800e8c2:	bf00      	nop
 800e8c4:	20000028 	.word	0x20000028
 800e8c8:	10624dd3 	.word	0x10624dd3

0800e8cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b085      	sub	sp, #20
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e8d4:	4b10      	ldr	r3, [pc, #64]	@ (800e918 <SDMMC_GetCmdError+0x4c>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a10      	ldr	r2, [pc, #64]	@ (800e91c <SDMMC_GetCmdError+0x50>)
 800e8da:	fba2 2303 	umull	r2, r3, r2, r3
 800e8de:	0a5b      	lsrs	r3, r3, #9
 800e8e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8e4:	fb02 f303 	mul.w	r3, r2, r3
 800e8e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	1e5a      	subs	r2, r3, #1
 800e8ee:	60fa      	str	r2, [r7, #12]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d102      	bne.n	800e8fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e8f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e8f8:	e009      	b.n	800e90e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e902:	2b00      	cmp	r3, #0
 800e904:	d0f1      	beq.n	800e8ea <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	22c5      	movs	r2, #197	@ 0xc5
 800e90a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800e90c:	2300      	movs	r3, #0
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3714      	adds	r7, #20
 800e912:	46bd      	mov	sp, r7
 800e914:	bc80      	pop	{r7}
 800e916:	4770      	bx	lr
 800e918:	20000028 	.word	0x20000028
 800e91c:	10624dd3 	.word	0x10624dd3

0800e920 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e924:	4904      	ldr	r1, [pc, #16]	@ (800e938 <MX_FATFS_Init+0x18>)
 800e926:	4805      	ldr	r0, [pc, #20]	@ (800e93c <MX_FATFS_Init+0x1c>)
 800e928:	f003 fc26 	bl	8012178 <FATFS_LinkDriver>
 800e92c:	4603      	mov	r3, r0
 800e92e:	461a      	mov	r2, r3
 800e930:	4b03      	ldr	r3, [pc, #12]	@ (800e940 <MX_FATFS_Init+0x20>)
 800e932:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e934:	bf00      	nop
 800e936:	bd80      	pop	{r7, pc}
 800e938:	20000eac 	.word	0x20000eac
 800e93c:	08016124 	.word	0x08016124
 800e940:	20000ea8 	.word	0x20000ea8

0800e944 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e944:	b480      	push	{r7}
 800e946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e948:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bc80      	pop	{r7}
 800e950:	4770      	bx	lr
	...

0800e954 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e95a:	2300      	movs	r3, #0
 800e95c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e95e:	f000 f86b 	bl	800ea38 <BSP_SD_IsDetected>
 800e962:	4603      	mov	r3, r0
 800e964:	2b01      	cmp	r3, #1
 800e966:	d001      	beq.n	800e96c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e968:	2301      	movs	r3, #1
 800e96a:	e005      	b.n	800e978 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e96c:	4804      	ldr	r0, [pc, #16]	@ (800e980 <BSP_SD_Init+0x2c>)
 800e96e:	f7fc fba1 	bl	800b0b4 <HAL_SD_Init>
 800e972:	4603      	mov	r3, r0
 800e974:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800e976:	79fb      	ldrb	r3, [r7, #7]
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3708      	adds	r7, #8
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	2000093c 	.word	0x2000093c

0800e984 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b088      	sub	sp, #32
 800e988:	af02      	add	r7, sp, #8
 800e98a:	60f8      	str	r0, [r7, #12]
 800e98c:	60b9      	str	r1, [r7, #8]
 800e98e:	607a      	str	r2, [r7, #4]
 800e990:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e992:	2300      	movs	r3, #0
 800e994:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	9300      	str	r3, [sp, #0]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	68ba      	ldr	r2, [r7, #8]
 800e99e:	68f9      	ldr	r1, [r7, #12]
 800e9a0:	4806      	ldr	r0, [pc, #24]	@ (800e9bc <BSP_SD_ReadBlocks+0x38>)
 800e9a2:	f7fc fc37 	bl	800b214 <HAL_SD_ReadBlocks>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d001      	beq.n	800e9b0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e9b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3718      	adds	r7, #24
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	2000093c 	.word	0x2000093c

0800e9c0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b088      	sub	sp, #32
 800e9c4:	af02      	add	r7, sp, #8
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	60b9      	str	r1, [r7, #8]
 800e9ca:	607a      	str	r2, [r7, #4]
 800e9cc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	9300      	str	r3, [sp, #0]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	68ba      	ldr	r2, [r7, #8]
 800e9da:	68f9      	ldr	r1, [r7, #12]
 800e9dc:	4806      	ldr	r0, [pc, #24]	@ (800e9f8 <BSP_SD_WriteBlocks+0x38>)
 800e9de:	f7fc fdf7 	bl	800b5d0 <HAL_SD_WriteBlocks>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e9ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3718      	adds	r7, #24
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	2000093c 	.word	0x2000093c

0800e9fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ea00:	4805      	ldr	r0, [pc, #20]	@ (800ea18 <BSP_SD_GetCardState+0x1c>)
 800ea02:	f7fd f93a 	bl	800bc7a <HAL_SD_GetCardState>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b04      	cmp	r3, #4
 800ea0a:	bf14      	ite	ne
 800ea0c:	2301      	movne	r3, #1
 800ea0e:	2300      	moveq	r3, #0
 800ea10:	b2db      	uxtb	r3, r3
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	2000093c 	.word	0x2000093c

0800ea1c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ea24:	6879      	ldr	r1, [r7, #4]
 800ea26:	4803      	ldr	r0, [pc, #12]	@ (800ea34 <BSP_SD_GetCardInfo+0x18>)
 800ea28:	f7fd f8fc 	bl	800bc24 <HAL_SD_GetCardInfo>
}
 800ea2c:	bf00      	nop
 800ea2e:	3708      	adds	r7, #8
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	2000093c 	.word	0x2000093c

0800ea38 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b083      	sub	sp, #12
 800ea3c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800ea42:	79fb      	ldrb	r3, [r7, #7]
 800ea44:	b2db      	uxtb	r3, r3
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	370c      	adds	r7, #12
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bc80      	pop	{r7}
 800ea4e:	4770      	bx	lr

0800ea50 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b084      	sub	sp, #16
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	4603      	mov	r3, r0
 800ea58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ea5a:	79fb      	ldrb	r3, [r7, #7]
 800ea5c:	4a08      	ldr	r2, [pc, #32]	@ (800ea80 <disk_status+0x30>)
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	4413      	add	r3, r2
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	79fa      	ldrb	r2, [r7, #7]
 800ea68:	4905      	ldr	r1, [pc, #20]	@ (800ea80 <disk_status+0x30>)
 800ea6a:	440a      	add	r2, r1
 800ea6c:	7a12      	ldrb	r2, [r2, #8]
 800ea6e:	4610      	mov	r0, r2
 800ea70:	4798      	blx	r3
 800ea72:	4603      	mov	r3, r0
 800ea74:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ea76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3710      	adds	r7, #16
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	20001330 	.word	0x20001330

0800ea84 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800ea92:	79fb      	ldrb	r3, [r7, #7]
 800ea94:	4a0d      	ldr	r2, [pc, #52]	@ (800eacc <disk_initialize+0x48>)
 800ea96:	5cd3      	ldrb	r3, [r2, r3]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d111      	bne.n	800eac0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800ea9c:	79fb      	ldrb	r3, [r7, #7]
 800ea9e:	4a0b      	ldr	r2, [pc, #44]	@ (800eacc <disk_initialize+0x48>)
 800eaa0:	2101      	movs	r1, #1
 800eaa2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800eaa4:	79fb      	ldrb	r3, [r7, #7]
 800eaa6:	4a09      	ldr	r2, [pc, #36]	@ (800eacc <disk_initialize+0x48>)
 800eaa8:	009b      	lsls	r3, r3, #2
 800eaaa:	4413      	add	r3, r2
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	79fa      	ldrb	r2, [r7, #7]
 800eab2:	4906      	ldr	r1, [pc, #24]	@ (800eacc <disk_initialize+0x48>)
 800eab4:	440a      	add	r2, r1
 800eab6:	7a12      	ldrb	r2, [r2, #8]
 800eab8:	4610      	mov	r0, r2
 800eaba:	4798      	blx	r3
 800eabc:	4603      	mov	r3, r0
 800eabe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800eac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	20001330 	.word	0x20001330

0800ead0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ead0:	b590      	push	{r4, r7, lr}
 800ead2:	b087      	sub	sp, #28
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60b9      	str	r1, [r7, #8]
 800ead8:	607a      	str	r2, [r7, #4]
 800eada:	603b      	str	r3, [r7, #0]
 800eadc:	4603      	mov	r3, r0
 800eade:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800eae0:	7bfb      	ldrb	r3, [r7, #15]
 800eae2:	4a0a      	ldr	r2, [pc, #40]	@ (800eb0c <disk_read+0x3c>)
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	4413      	add	r3, r2
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	689c      	ldr	r4, [r3, #8]
 800eaec:	7bfb      	ldrb	r3, [r7, #15]
 800eaee:	4a07      	ldr	r2, [pc, #28]	@ (800eb0c <disk_read+0x3c>)
 800eaf0:	4413      	add	r3, r2
 800eaf2:	7a18      	ldrb	r0, [r3, #8]
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	68b9      	ldr	r1, [r7, #8]
 800eafa:	47a0      	blx	r4
 800eafc:	4603      	mov	r3, r0
 800eafe:	75fb      	strb	r3, [r7, #23]
  return res;
 800eb00:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	371c      	adds	r7, #28
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd90      	pop	{r4, r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	20001330 	.word	0x20001330

0800eb10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800eb10:	b590      	push	{r4, r7, lr}
 800eb12:	b087      	sub	sp, #28
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	60b9      	str	r1, [r7, #8]
 800eb18:	607a      	str	r2, [r7, #4]
 800eb1a:	603b      	str	r3, [r7, #0]
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800eb20:	7bfb      	ldrb	r3, [r7, #15]
 800eb22:	4a0a      	ldr	r2, [pc, #40]	@ (800eb4c <disk_write+0x3c>)
 800eb24:	009b      	lsls	r3, r3, #2
 800eb26:	4413      	add	r3, r2
 800eb28:	685b      	ldr	r3, [r3, #4]
 800eb2a:	68dc      	ldr	r4, [r3, #12]
 800eb2c:	7bfb      	ldrb	r3, [r7, #15]
 800eb2e:	4a07      	ldr	r2, [pc, #28]	@ (800eb4c <disk_write+0x3c>)
 800eb30:	4413      	add	r3, r2
 800eb32:	7a18      	ldrb	r0, [r3, #8]
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	687a      	ldr	r2, [r7, #4]
 800eb38:	68b9      	ldr	r1, [r7, #8]
 800eb3a:	47a0      	blx	r4
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	75fb      	strb	r3, [r7, #23]
  return res;
 800eb40:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	371c      	adds	r7, #28
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd90      	pop	{r4, r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	20001330 	.word	0x20001330

0800eb50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	4603      	mov	r3, r0
 800eb58:	603a      	str	r2, [r7, #0]
 800eb5a:	71fb      	strb	r3, [r7, #7]
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800eb60:	79fb      	ldrb	r3, [r7, #7]
 800eb62:	4a09      	ldr	r2, [pc, #36]	@ (800eb88 <disk_ioctl+0x38>)
 800eb64:	009b      	lsls	r3, r3, #2
 800eb66:	4413      	add	r3, r2
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	691b      	ldr	r3, [r3, #16]
 800eb6c:	79fa      	ldrb	r2, [r7, #7]
 800eb6e:	4906      	ldr	r1, [pc, #24]	@ (800eb88 <disk_ioctl+0x38>)
 800eb70:	440a      	add	r2, r1
 800eb72:	7a10      	ldrb	r0, [r2, #8]
 800eb74:	79b9      	ldrb	r1, [r7, #6]
 800eb76:	683a      	ldr	r2, [r7, #0]
 800eb78:	4798      	blx	r3
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	73fb      	strb	r3, [r7, #15]
  return res;
 800eb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3710      	adds	r7, #16
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	20001330 	.word	0x20001330

0800eb8c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800eb8c:	b480      	push	{r7}
 800eb8e:	b087      	sub	sp, #28
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800eba0:	e007      	b.n	800ebb2 <mem_cpy+0x26>
		*d++ = *s++;
 800eba2:	693a      	ldr	r2, [r7, #16]
 800eba4:	1c53      	adds	r3, r2, #1
 800eba6:	613b      	str	r3, [r7, #16]
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	1c59      	adds	r1, r3, #1
 800ebac:	6179      	str	r1, [r7, #20]
 800ebae:	7812      	ldrb	r2, [r2, #0]
 800ebb0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	1e5a      	subs	r2, r3, #1
 800ebb6:	607a      	str	r2, [r7, #4]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d1f2      	bne.n	800eba2 <mem_cpy+0x16>
}
 800ebbc:	bf00      	nop
 800ebbe:	bf00      	nop
 800ebc0:	371c      	adds	r7, #28
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bc80      	pop	{r7}
 800ebc6:	4770      	bx	lr

0800ebc8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ebc8:	b480      	push	{r7}
 800ebca:	b087      	sub	sp, #28
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800ebd8:	e005      	b.n	800ebe6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	1c5a      	adds	r2, r3, #1
 800ebde:	617a      	str	r2, [r7, #20]
 800ebe0:	68ba      	ldr	r2, [r7, #8]
 800ebe2:	b2d2      	uxtb	r2, r2
 800ebe4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	1e5a      	subs	r2, r3, #1
 800ebea:	607a      	str	r2, [r7, #4]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1f4      	bne.n	800ebda <mem_set+0x12>
}
 800ebf0:	bf00      	nop
 800ebf2:	bf00      	nop
 800ebf4:	371c      	adds	r7, #28
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bc80      	pop	{r7}
 800ebfa:	4770      	bx	lr

0800ebfc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800ebfc:	b480      	push	{r7}
 800ebfe:	b089      	sub	sp, #36	@ 0x24
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	61fb      	str	r3, [r7, #28]
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ec10:	2300      	movs	r3, #0
 800ec12:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800ec14:	bf00      	nop
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	1e5a      	subs	r2, r3, #1
 800ec1a:	607a      	str	r2, [r7, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00d      	beq.n	800ec3c <mem_cmp+0x40>
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	1c5a      	adds	r2, r3, #1
 800ec24:	61fa      	str	r2, [r7, #28]
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	4619      	mov	r1, r3
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	1c5a      	adds	r2, r3, #1
 800ec2e:	61ba      	str	r2, [r7, #24]
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	1acb      	subs	r3, r1, r3
 800ec34:	617b      	str	r3, [r7, #20]
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d0ec      	beq.n	800ec16 <mem_cmp+0x1a>
	return r;
 800ec3c:	697b      	ldr	r3, [r7, #20]
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3724      	adds	r7, #36	@ 0x24
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bc80      	pop	{r7}
 800ec46:	4770      	bx	lr

0800ec48 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800ec48:	b480      	push	{r7}
 800ec4a:	b083      	sub	sp, #12
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ec52:	e002      	b.n	800ec5a <chk_chr+0x12>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	3301      	adds	r3, #1
 800ec58:	607b      	str	r3, [r7, #4]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d005      	beq.n	800ec6e <chk_chr+0x26>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	781b      	ldrb	r3, [r3, #0]
 800ec66:	461a      	mov	r2, r3
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d1f2      	bne.n	800ec54 <chk_chr+0xc>
	return *str;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	781b      	ldrb	r3, [r3, #0]
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	370c      	adds	r7, #12
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bc80      	pop	{r7}
 800ec7a:	4770      	bx	lr

0800ec7c <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f003 fc06 	bl	801249c <ff_req_grant>
 800ec90:	4603      	mov	r3, r0
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3708      	adds	r7, #8
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}

0800ec9a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ec9a:	b580      	push	{r7, lr}
 800ec9c:	b082      	sub	sp, #8
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	6078      	str	r0, [r7, #4]
 800eca2:	460b      	mov	r3, r1
 800eca4:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d011      	beq.n	800ecd0 <unlock_fs+0x36>
 800ecac:	78fb      	ldrb	r3, [r7, #3]
 800ecae:	2b0c      	cmp	r3, #12
 800ecb0:	d00e      	beq.n	800ecd0 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800ecb2:	78fb      	ldrb	r3, [r7, #3]
 800ecb4:	2b0b      	cmp	r3, #11
 800ecb6:	d00b      	beq.n	800ecd0 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800ecb8:	78fb      	ldrb	r3, [r7, #3]
 800ecba:	2b09      	cmp	r3, #9
 800ecbc:	d008      	beq.n	800ecd0 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800ecbe:	78fb      	ldrb	r3, [r7, #3]
 800ecc0:	2b0f      	cmp	r3, #15
 800ecc2:	d005      	beq.n	800ecd0 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800ecca:	4618      	mov	r0, r3
 800eccc:	f003 fbfb 	bl	80124c6 <ff_rel_grant>
	}
}
 800ecd0:	bf00      	nop
 800ecd2:	3708      	adds	r7, #8
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ece2:	2300      	movs	r3, #0
 800ece4:	60bb      	str	r3, [r7, #8]
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	60fb      	str	r3, [r7, #12]
 800ecea:	e038      	b.n	800ed5e <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800ecec:	492f      	ldr	r1, [pc, #188]	@ (800edac <chk_lock+0xd4>)
 800ecee:	68fa      	ldr	r2, [r7, #12]
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	005b      	lsls	r3, r3, #1
 800ecf4:	4413      	add	r3, r2
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	440b      	add	r3, r1
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d029      	beq.n	800ed54 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800ed00:	492a      	ldr	r1, [pc, #168]	@ (800edac <chk_lock+0xd4>)
 800ed02:	68fa      	ldr	r2, [r7, #12]
 800ed04:	4613      	mov	r3, r2
 800ed06:	005b      	lsls	r3, r3, #1
 800ed08:	4413      	add	r3, r2
 800ed0a:	009b      	lsls	r3, r3, #2
 800ed0c:	440b      	add	r3, r1
 800ed0e:	681a      	ldr	r2, [r3, #0]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d11e      	bne.n	800ed58 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800ed1a:	4924      	ldr	r1, [pc, #144]	@ (800edac <chk_lock+0xd4>)
 800ed1c:	68fa      	ldr	r2, [r7, #12]
 800ed1e:	4613      	mov	r3, r2
 800ed20:	005b      	lsls	r3, r3, #1
 800ed22:	4413      	add	r3, r2
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	440b      	add	r3, r1
 800ed28:	3304      	adds	r3, #4
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d110      	bne.n	800ed58 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800ed36:	491d      	ldr	r1, [pc, #116]	@ (800edac <chk_lock+0xd4>)
 800ed38:	68fa      	ldr	r2, [r7, #12]
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	005b      	lsls	r3, r3, #1
 800ed3e:	4413      	add	r3, r2
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	440b      	add	r3, r1
 800ed44:	3308      	adds	r3, #8
 800ed46:	881a      	ldrh	r2, [r3, #0]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d102      	bne.n	800ed58 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800ed52:	e007      	b.n	800ed64 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800ed54:	2301      	movs	r3, #1
 800ed56:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	60fb      	str	r3, [r7, #12]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d9c3      	bls.n	800ecec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	d109      	bne.n	800ed7e <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d102      	bne.n	800ed76 <chk_lock+0x9e>
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	2b02      	cmp	r3, #2
 800ed74:	d101      	bne.n	800ed7a <chk_lock+0xa2>
 800ed76:	2300      	movs	r3, #0
 800ed78:	e013      	b.n	800eda2 <chk_lock+0xca>
 800ed7a:	2312      	movs	r3, #18
 800ed7c:	e011      	b.n	800eda2 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d10b      	bne.n	800ed9c <chk_lock+0xc4>
 800ed84:	4909      	ldr	r1, [pc, #36]	@ (800edac <chk_lock+0xd4>)
 800ed86:	68fa      	ldr	r2, [r7, #12]
 800ed88:	4613      	mov	r3, r2
 800ed8a:	005b      	lsls	r3, r3, #1
 800ed8c:	4413      	add	r3, r2
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	440b      	add	r3, r1
 800ed92:	330a      	adds	r3, #10
 800ed94:	881b      	ldrh	r3, [r3, #0]
 800ed96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed9a:	d101      	bne.n	800eda0 <chk_lock+0xc8>
 800ed9c:	2310      	movs	r3, #16
 800ed9e:	e000      	b.n	800eda2 <chk_lock+0xca>
 800eda0:	2300      	movs	r3, #0
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3714      	adds	r7, #20
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bc80      	pop	{r7}
 800edaa:	4770      	bx	lr
 800edac:	20001318 	.word	0x20001318

0800edb0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800edb0:	b480      	push	{r7}
 800edb2:	b083      	sub	sp, #12
 800edb4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800edb6:	2300      	movs	r3, #0
 800edb8:	607b      	str	r3, [r7, #4]
 800edba:	e002      	b.n	800edc2 <enq_lock+0x12>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	3301      	adds	r3, #1
 800edc0:	607b      	str	r3, [r7, #4]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	d809      	bhi.n	800eddc <enq_lock+0x2c>
 800edc8:	490a      	ldr	r1, [pc, #40]	@ (800edf4 <enq_lock+0x44>)
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	4613      	mov	r3, r2
 800edce:	005b      	lsls	r3, r3, #1
 800edd0:	4413      	add	r3, r2
 800edd2:	009b      	lsls	r3, r3, #2
 800edd4:	440b      	add	r3, r1
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d1ef      	bne.n	800edbc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2b02      	cmp	r3, #2
 800ede0:	bf14      	ite	ne
 800ede2:	2301      	movne	r3, #1
 800ede4:	2300      	moveq	r3, #0
 800ede6:	b2db      	uxtb	r3, r3
}
 800ede8:	4618      	mov	r0, r3
 800edea:	370c      	adds	r7, #12
 800edec:	46bd      	mov	sp, r7
 800edee:	bc80      	pop	{r7}
 800edf0:	4770      	bx	lr
 800edf2:	bf00      	nop
 800edf4:	20001318 	.word	0x20001318

0800edf8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b085      	sub	sp, #20
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ee02:	2300      	movs	r3, #0
 800ee04:	60fb      	str	r3, [r7, #12]
 800ee06:	e02b      	b.n	800ee60 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800ee08:	4955      	ldr	r1, [pc, #340]	@ (800ef60 <inc_lock+0x168>)
 800ee0a:	68fa      	ldr	r2, [r7, #12]
 800ee0c:	4613      	mov	r3, r2
 800ee0e:	005b      	lsls	r3, r3, #1
 800ee10:	4413      	add	r3, r2
 800ee12:	009b      	lsls	r3, r3, #2
 800ee14:	440b      	add	r3, r1
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d11b      	bne.n	800ee5a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800ee22:	494f      	ldr	r1, [pc, #316]	@ (800ef60 <inc_lock+0x168>)
 800ee24:	68fa      	ldr	r2, [r7, #12]
 800ee26:	4613      	mov	r3, r2
 800ee28:	005b      	lsls	r3, r3, #1
 800ee2a:	4413      	add	r3, r2
 800ee2c:	009b      	lsls	r3, r3, #2
 800ee2e:	440b      	add	r3, r1
 800ee30:	3304      	adds	r3, #4
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d10d      	bne.n	800ee5a <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800ee3e:	4948      	ldr	r1, [pc, #288]	@ (800ef60 <inc_lock+0x168>)
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	4613      	mov	r3, r2
 800ee44:	005b      	lsls	r3, r3, #1
 800ee46:	4413      	add	r3, r2
 800ee48:	009b      	lsls	r3, r3, #2
 800ee4a:	440b      	add	r3, r1
 800ee4c:	3308      	adds	r3, #8
 800ee4e:	881a      	ldrh	r2, [r3, #0]
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d006      	beq.n	800ee68 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	60fb      	str	r3, [r7, #12]
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2b01      	cmp	r3, #1
 800ee64:	d9d0      	bls.n	800ee08 <inc_lock+0x10>
 800ee66:	e000      	b.n	800ee6a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800ee68:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	2b02      	cmp	r3, #2
 800ee6e:	d145      	bne.n	800eefc <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ee70:	2300      	movs	r3, #0
 800ee72:	60fb      	str	r3, [r7, #12]
 800ee74:	e002      	b.n	800ee7c <inc_lock+0x84>
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	3301      	adds	r3, #1
 800ee7a:	60fb      	str	r3, [r7, #12]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d809      	bhi.n	800ee96 <inc_lock+0x9e>
 800ee82:	4937      	ldr	r1, [pc, #220]	@ (800ef60 <inc_lock+0x168>)
 800ee84:	68fa      	ldr	r2, [r7, #12]
 800ee86:	4613      	mov	r3, r2
 800ee88:	005b      	lsls	r3, r3, #1
 800ee8a:	4413      	add	r3, r2
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	440b      	add	r3, r1
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d1ef      	bne.n	800ee76 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	2b02      	cmp	r3, #2
 800ee9a:	d101      	bne.n	800eea0 <inc_lock+0xa8>
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	e05a      	b.n	800ef56 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 800eea6:	482e      	ldr	r0, [pc, #184]	@ (800ef60 <inc_lock+0x168>)
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	4613      	mov	r3, r2
 800eeac:	005b      	lsls	r3, r3, #1
 800eeae:	4413      	add	r3, r2
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	4403      	add	r3, r0
 800eeb4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800eebc:	4828      	ldr	r0, [pc, #160]	@ (800ef60 <inc_lock+0x168>)
 800eebe:	68fa      	ldr	r2, [r7, #12]
 800eec0:	4613      	mov	r3, r2
 800eec2:	005b      	lsls	r3, r3, #1
 800eec4:	4413      	add	r3, r2
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	4403      	add	r3, r0
 800eeca:	3304      	adds	r3, #4
 800eecc:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 800eed4:	4922      	ldr	r1, [pc, #136]	@ (800ef60 <inc_lock+0x168>)
 800eed6:	68fa      	ldr	r2, [r7, #12]
 800eed8:	4613      	mov	r3, r2
 800eeda:	005b      	lsls	r3, r3, #1
 800eedc:	4413      	add	r3, r2
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	440b      	add	r3, r1
 800eee2:	3308      	adds	r3, #8
 800eee4:	4602      	mov	r2, r0
 800eee6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800eee8:	491d      	ldr	r1, [pc, #116]	@ (800ef60 <inc_lock+0x168>)
 800eeea:	68fa      	ldr	r2, [r7, #12]
 800eeec:	4613      	mov	r3, r2
 800eeee:	005b      	lsls	r3, r3, #1
 800eef0:	4413      	add	r3, r2
 800eef2:	009b      	lsls	r3, r3, #2
 800eef4:	440b      	add	r3, r1
 800eef6:	330a      	adds	r3, #10
 800eef8:	2200      	movs	r2, #0
 800eefa:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00c      	beq.n	800ef1c <inc_lock+0x124>
 800ef02:	4917      	ldr	r1, [pc, #92]	@ (800ef60 <inc_lock+0x168>)
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	4613      	mov	r3, r2
 800ef08:	005b      	lsls	r3, r3, #1
 800ef0a:	4413      	add	r3, r2
 800ef0c:	009b      	lsls	r3, r3, #2
 800ef0e:	440b      	add	r3, r1
 800ef10:	330a      	adds	r3, #10
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d001      	beq.n	800ef1c <inc_lock+0x124>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	e01c      	b.n	800ef56 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d10b      	bne.n	800ef3a <inc_lock+0x142>
 800ef22:	490f      	ldr	r1, [pc, #60]	@ (800ef60 <inc_lock+0x168>)
 800ef24:	68fa      	ldr	r2, [r7, #12]
 800ef26:	4613      	mov	r3, r2
 800ef28:	005b      	lsls	r3, r3, #1
 800ef2a:	4413      	add	r3, r2
 800ef2c:	009b      	lsls	r3, r3, #2
 800ef2e:	440b      	add	r3, r1
 800ef30:	330a      	adds	r3, #10
 800ef32:	881b      	ldrh	r3, [r3, #0]
 800ef34:	3301      	adds	r3, #1
 800ef36:	b299      	uxth	r1, r3
 800ef38:	e001      	b.n	800ef3e <inc_lock+0x146>
 800ef3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ef3e:	4808      	ldr	r0, [pc, #32]	@ (800ef60 <inc_lock+0x168>)
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	4613      	mov	r3, r2
 800ef44:	005b      	lsls	r3, r3, #1
 800ef46:	4413      	add	r3, r2
 800ef48:	009b      	lsls	r3, r3, #2
 800ef4a:	4403      	add	r3, r0
 800ef4c:	330a      	adds	r3, #10
 800ef4e:	460a      	mov	r2, r1
 800ef50:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	3301      	adds	r3, #1
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3714      	adds	r7, #20
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bc80      	pop	{r7}
 800ef5e:	4770      	bx	lr
 800ef60:	20001318 	.word	0x20001318

0800ef64 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b085      	sub	sp, #20
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	60fb      	str	r3, [r7, #12]
 800ef70:	e016      	b.n	800efa0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ef72:	4910      	ldr	r1, [pc, #64]	@ (800efb4 <clear_lock+0x50>)
 800ef74:	68fa      	ldr	r2, [r7, #12]
 800ef76:	4613      	mov	r3, r2
 800ef78:	005b      	lsls	r3, r3, #1
 800ef7a:	4413      	add	r3, r2
 800ef7c:	009b      	lsls	r3, r3, #2
 800ef7e:	440b      	add	r3, r1
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d108      	bne.n	800ef9a <clear_lock+0x36>
 800ef88:	490a      	ldr	r1, [pc, #40]	@ (800efb4 <clear_lock+0x50>)
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	4613      	mov	r3, r2
 800ef8e:	005b      	lsls	r3, r3, #1
 800ef90:	4413      	add	r3, r2
 800ef92:	009b      	lsls	r3, r3, #2
 800ef94:	440b      	add	r3, r1
 800ef96:	2200      	movs	r2, #0
 800ef98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	60fb      	str	r3, [r7, #12]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d9e5      	bls.n	800ef72 <clear_lock+0xe>
	}
}
 800efa6:	bf00      	nop
 800efa8:	bf00      	nop
 800efaa:	3714      	adds	r7, #20
 800efac:	46bd      	mov	sp, r7
 800efae:	bc80      	pop	{r7}
 800efb0:	4770      	bx	lr
 800efb2:	bf00      	nop
 800efb4:	20001318 	.word	0x20001318

0800efb8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b086      	sub	sp, #24
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800efc0:	2300      	movs	r3, #0
 800efc2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d038      	beq.n	800f040 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800efd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800efdc:	6879      	ldr	r1, [r7, #4]
 800efde:	2301      	movs	r3, #1
 800efe0:	697a      	ldr	r2, [r7, #20]
 800efe2:	f7ff fd95 	bl	800eb10 <disk_write>
 800efe6:	4603      	mov	r3, r0
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d002      	beq.n	800eff2 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800efec:	2301      	movs	r3, #1
 800efee:	73fb      	strb	r3, [r7, #15]
 800eff0:	e026      	b.n	800f040 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2200      	movs	r2, #0
 800eff6:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800f000:	697a      	ldr	r2, [r7, #20]
 800f002:	1ad2      	subs	r2, r2, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d218      	bcs.n	800f040 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800f014:	613b      	str	r3, [r7, #16]
 800f016:	e010      	b.n	800f03a <sync_window+0x82>
					wsect += fs->fsize;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800f01e:	697a      	ldr	r2, [r7, #20]
 800f020:	4413      	add	r3, r2
 800f022:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800f02a:	6879      	ldr	r1, [r7, #4]
 800f02c:	2301      	movs	r3, #1
 800f02e:	697a      	ldr	r2, [r7, #20]
 800f030:	f7ff fd6e 	bl	800eb10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	3b01      	subs	r3, #1
 800f038:	613b      	str	r3, [r7, #16]
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	d8eb      	bhi.n	800f018 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800f040:	7bfb      	ldrb	r3, [r7, #15]
}
 800f042:	4618      	mov	r0, r3
 800f044:	3718      	adds	r7, #24
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}

0800f04a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800f04a:	b580      	push	{r7, lr}
 800f04c:	b084      	sub	sp, #16
 800f04e:	af00      	add	r7, sp, #0
 800f050:	6078      	str	r0, [r7, #4]
 800f052:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f054:	2300      	movs	r3, #0
 800f056:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800f05e:	683a      	ldr	r2, [r7, #0]
 800f060:	429a      	cmp	r2, r3
 800f062:	d01b      	beq.n	800f09c <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f7ff ffa7 	bl	800efb8 <sync_window>
 800f06a:	4603      	mov	r3, r0
 800f06c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f06e:	7bfb      	ldrb	r3, [r7, #15]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d113      	bne.n	800f09c <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800f07a:	6879      	ldr	r1, [r7, #4]
 800f07c:	2301      	movs	r3, #1
 800f07e:	683a      	ldr	r2, [r7, #0]
 800f080:	f7ff fd26 	bl	800ead0 <disk_read>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d004      	beq.n	800f094 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f08a:	f04f 33ff 	mov.w	r3, #4294967295
 800f08e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f090:	2301      	movs	r3, #1
 800f092:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	683a      	ldr	r2, [r7, #0]
 800f098:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
		}
	}
	return res;
 800f09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3710      	adds	r7, #16
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}

0800f0a6 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800f0a6:	b580      	push	{r7, lr}
 800f0a8:	b084      	sub	sp, #16
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f7ff ff82 	bl	800efb8 <sync_window>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f0b8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	f040 809b 	bne.w	800f1f6 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f0c6:	2b03      	cmp	r3, #3
 800f0c8:	f040 8088 	bne.w	800f1dc <sync_fs+0x136>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	f040 8082 	bne.w	800f1dc <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f0de:	2100      	movs	r1, #0
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7ff fd71 	bl	800ebc8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2255      	movs	r2, #85	@ 0x55
 800f0ea:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	22aa      	movs	r2, #170	@ 0xaa
 800f0f2:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2252      	movs	r2, #82	@ 0x52
 800f0fa:	701a      	strb	r2, [r3, #0]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2252      	movs	r2, #82	@ 0x52
 800f100:	705a      	strb	r2, [r3, #1]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2261      	movs	r2, #97	@ 0x61
 800f106:	709a      	strb	r2, [r3, #2]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2241      	movs	r2, #65	@ 0x41
 800f10c:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2272      	movs	r2, #114	@ 0x72
 800f112:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2272      	movs	r2, #114	@ 0x72
 800f11a:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2241      	movs	r2, #65	@ 0x41
 800f122:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2261      	movs	r2, #97	@ 0x61
 800f12a:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f134:	b2da      	uxtb	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f142:	b29b      	uxth	r3, r3
 800f144:	0a1b      	lsrs	r3, r3, #8
 800f146:	b29b      	uxth	r3, r3
 800f148:	b2da      	uxtb	r2, r3
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f156:	0c1b      	lsrs	r3, r3, #16
 800f158:	b2da      	uxtb	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f166:	0e1b      	lsrs	r3, r3, #24
 800f168:	b2da      	uxtb	r2, r3
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f176:	b2da      	uxtb	r2, r3
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f184:	b29b      	uxth	r3, r3
 800f186:	0a1b      	lsrs	r3, r3, #8
 800f188:	b29b      	uxth	r3, r3
 800f18a:	b2da      	uxtb	r2, r3
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f198:	0c1b      	lsrs	r3, r3, #16
 800f19a:	b2da      	uxtb	r2, r3
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f1a8:	0e1b      	lsrs	r3, r3, #24
 800f1aa:	b2da      	uxtb	r2, r3
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800f1b8:	1c5a      	adds	r2, r3, #1
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800f1c6:	6879      	ldr	r1, [r7, #4]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	f7ff fc9e 	bl	800eb10 <disk_write>
			fs->fsi_flag = 0;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7ff fcb2 	bl	800eb50 <disk_ioctl>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d001      	beq.n	800f1f6 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3710      	adds	r7, #16
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f200:	b480      	push	{r7}
 800f202:	b083      	sub	sp, #12
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	3b02      	subs	r3, #2
 800f20e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f216:	3b02      	subs	r3, #2
 800f218:	683a      	ldr	r2, [r7, #0]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d301      	bcc.n	800f222 <clust2sect+0x22>
 800f21e:	2300      	movs	r3, #0
 800f220:	e00a      	b.n	800f238 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f228:	461a      	mov	r2, r3
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	fb03 f202 	mul.w	r2, r3, r2
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800f236:	4413      	add	r3, r2
}
 800f238:	4618      	mov	r0, r3
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bc80      	pop	{r7}
 800f240:	4770      	bx	lr

0800f242 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800f242:	b580      	push	{r7, lr}
 800f244:	b086      	sub	sp, #24
 800f246:	af00      	add	r7, sp, #0
 800f248:	6078      	str	r0, [r7, #4]
 800f24a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d905      	bls.n	800f25e <get_fat+0x1c>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f258:	683a      	ldr	r2, [r7, #0]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d302      	bcc.n	800f264 <get_fat+0x22>
		val = 1;	/* Internal error */
 800f25e:	2301      	movs	r3, #1
 800f260:	617b      	str	r3, [r7, #20]
 800f262:	e0a2      	b.n	800f3aa <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f264:	f04f 33ff 	mov.w	r3, #4294967295
 800f268:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f270:	2b03      	cmp	r3, #3
 800f272:	d067      	beq.n	800f344 <get_fat+0x102>
 800f274:	2b03      	cmp	r3, #3
 800f276:	f300 808e 	bgt.w	800f396 <get_fat+0x154>
 800f27a:	2b01      	cmp	r3, #1
 800f27c:	d002      	beq.n	800f284 <get_fat+0x42>
 800f27e:	2b02      	cmp	r3, #2
 800f280:	d03f      	beq.n	800f302 <get_fat+0xc0>
 800f282:	e088      	b.n	800f396 <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	60fb      	str	r3, [r7, #12]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	085b      	lsrs	r3, r3, #1
 800f28c:	68fa      	ldr	r2, [r7, #12]
 800f28e:	4413      	add	r3, r2
 800f290:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	0a5b      	lsrs	r3, r3, #9
 800f29c:	4413      	add	r3, r2
 800f29e:	4619      	mov	r1, r3
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f7ff fed2 	bl	800f04a <move_window>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d177      	bne.n	800f39c <get_fat+0x15a>
			wc = fs->win.d8[bc++ % SS(fs)];
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	1c5a      	adds	r2, r3, #1
 800f2b0:	60fa      	str	r2, [r7, #12]
 800f2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	5cd3      	ldrb	r3, [r2, r3]
 800f2ba:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	0a5b      	lsrs	r3, r3, #9
 800f2c6:	4413      	add	r3, r2
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7ff febd 	bl	800f04a <move_window>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d164      	bne.n	800f3a0 <get_fat+0x15e>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2dc:	687a      	ldr	r2, [r7, #4]
 800f2de:	5cd3      	ldrb	r3, [r2, r3]
 800f2e0:	021b      	lsls	r3, r3, #8
 800f2e2:	68ba      	ldr	r2, [r7, #8]
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	f003 0301 	and.w	r3, r3, #1
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d002      	beq.n	800f2f8 <get_fat+0xb6>
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	091b      	lsrs	r3, r3, #4
 800f2f6:	e002      	b.n	800f2fe <get_fat+0xbc>
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f2fe:	617b      	str	r3, [r7, #20]
			break;
 800f300:	e053      	b.n	800f3aa <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	0a1b      	lsrs	r3, r3, #8
 800f30c:	4413      	add	r3, r2
 800f30e:	4619      	mov	r1, r3
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f7ff fe9a 	bl	800f04a <move_window>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d143      	bne.n	800f3a4 <get_fat+0x162>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	005b      	lsls	r3, r3, #1
 800f320:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f324:	687a      	ldr	r2, [r7, #4]
 800f326:	4413      	add	r3, r2
 800f328:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	3301      	adds	r3, #1
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	021b      	lsls	r3, r3, #8
 800f332:	b21a      	sxth	r2, r3
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	b21b      	sxth	r3, r3
 800f33a:	4313      	orrs	r3, r2
 800f33c:	b21b      	sxth	r3, r3
 800f33e:	b29b      	uxth	r3, r3
 800f340:	617b      	str	r3, [r7, #20]
			break;
 800f342:	e032      	b.n	800f3aa <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	09db      	lsrs	r3, r3, #7
 800f34e:	4413      	add	r3, r2
 800f350:	4619      	mov	r1, r3
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f7ff fe79 	bl	800f04a <move_window>
 800f358:	4603      	mov	r3, r0
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d124      	bne.n	800f3a8 <get_fat+0x166>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	009b      	lsls	r3, r3, #2
 800f362:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	4413      	add	r3, r2
 800f36a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	3303      	adds	r3, #3
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	061a      	lsls	r2, r3, #24
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	3302      	adds	r3, #2
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	041b      	lsls	r3, r3, #16
 800f37c:	431a      	orrs	r2, r3
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	3301      	adds	r3, #1
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	021b      	lsls	r3, r3, #8
 800f386:	4313      	orrs	r3, r2
 800f388:	693a      	ldr	r2, [r7, #16]
 800f38a:	7812      	ldrb	r2, [r2, #0]
 800f38c:	4313      	orrs	r3, r2
 800f38e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f392:	617b      	str	r3, [r7, #20]
			break;
 800f394:	e009      	b.n	800f3aa <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 800f396:	2301      	movs	r3, #1
 800f398:	617b      	str	r3, [r7, #20]
 800f39a:	e006      	b.n	800f3aa <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f39c:	bf00      	nop
 800f39e:	e004      	b.n	800f3aa <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f3a0:	bf00      	nop
 800f3a2:	e002      	b.n	800f3aa <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f3a4:	bf00      	nop
 800f3a6:	e000      	b.n	800f3aa <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f3a8:	bf00      	nop
		}
	}

	return val;
 800f3aa:	697b      	ldr	r3, [r7, #20]
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3718      	adds	r7, #24
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}

0800f3b4 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b088      	sub	sp, #32
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	60f8      	str	r0, [r7, #12]
 800f3bc:	60b9      	str	r1, [r7, #8]
 800f3be:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	2b01      	cmp	r3, #1
 800f3c4:	d905      	bls.n	800f3d2 <put_fat+0x1e>
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f3cc:	68ba      	ldr	r2, [r7, #8]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d302      	bcc.n	800f3d8 <put_fat+0x24>
		res = FR_INT_ERR;
 800f3d2:	2302      	movs	r3, #2
 800f3d4:	77fb      	strb	r3, [r7, #31]
 800f3d6:	e0f6      	b.n	800f5c6 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f3de:	2b03      	cmp	r3, #3
 800f3e0:	f000 809e 	beq.w	800f520 <put_fat+0x16c>
 800f3e4:	2b03      	cmp	r3, #3
 800f3e6:	f300 80e4 	bgt.w	800f5b2 <put_fat+0x1fe>
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	d002      	beq.n	800f3f4 <put_fat+0x40>
 800f3ee:	2b02      	cmp	r3, #2
 800f3f0:	d06f      	beq.n	800f4d2 <put_fat+0x11e>
 800f3f2:	e0de      	b.n	800f5b2 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	617b      	str	r3, [r7, #20]
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	085b      	lsrs	r3, r3, #1
 800f3fc:	697a      	ldr	r2, [r7, #20]
 800f3fe:	4413      	add	r3, r2
 800f400:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	0a5b      	lsrs	r3, r3, #9
 800f40c:	4413      	add	r3, r2
 800f40e:	4619      	mov	r1, r3
 800f410:	68f8      	ldr	r0, [r7, #12]
 800f412:	f7ff fe1a 	bl	800f04a <move_window>
 800f416:	4603      	mov	r3, r0
 800f418:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f41a:	7ffb      	ldrb	r3, [r7, #31]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	f040 80cb 	bne.w	800f5b8 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	1c5a      	adds	r2, r3, #1
 800f426:	617a      	str	r2, [r7, #20]
 800f428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	4413      	add	r3, r2
 800f430:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	f003 0301 	and.w	r3, r3, #1
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d00d      	beq.n	800f458 <put_fat+0xa4>
 800f43c:	69bb      	ldr	r3, [r7, #24]
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	b25b      	sxtb	r3, r3
 800f442:	f003 030f 	and.w	r3, r3, #15
 800f446:	b25a      	sxtb	r2, r3
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	011b      	lsls	r3, r3, #4
 800f44e:	b25b      	sxtb	r3, r3
 800f450:	4313      	orrs	r3, r2
 800f452:	b25b      	sxtb	r3, r3
 800f454:	b2db      	uxtb	r3, r3
 800f456:	e001      	b.n	800f45c <put_fat+0xa8>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	b2db      	uxtb	r3, r3
 800f45c:	69ba      	ldr	r2, [r7, #24]
 800f45e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2201      	movs	r2, #1
 800f464:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	0a5b      	lsrs	r3, r3, #9
 800f472:	4413      	add	r3, r2
 800f474:	4619      	mov	r1, r3
 800f476:	68f8      	ldr	r0, [r7, #12]
 800f478:	f7ff fde7 	bl	800f04a <move_window>
 800f47c:	4603      	mov	r3, r0
 800f47e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f480:	7ffb      	ldrb	r3, [r7, #31]
 800f482:	2b00      	cmp	r3, #0
 800f484:	f040 809a 	bne.w	800f5bc <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f48e:	68fa      	ldr	r2, [r7, #12]
 800f490:	4413      	add	r3, r2
 800f492:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	f003 0301 	and.w	r3, r3, #1
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d003      	beq.n	800f4a6 <put_fat+0xf2>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	091b      	lsrs	r3, r3, #4
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	e00e      	b.n	800f4c4 <put_fat+0x110>
 800f4a6:	69bb      	ldr	r3, [r7, #24]
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	b25b      	sxtb	r3, r3
 800f4ac:	f023 030f 	bic.w	r3, r3, #15
 800f4b0:	b25a      	sxtb	r2, r3
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	0a1b      	lsrs	r3, r3, #8
 800f4b6:	b25b      	sxtb	r3, r3
 800f4b8:	f003 030f 	and.w	r3, r3, #15
 800f4bc:	b25b      	sxtb	r3, r3
 800f4be:	4313      	orrs	r3, r2
 800f4c0:	b25b      	sxtb	r3, r3
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	69ba      	ldr	r2, [r7, #24]
 800f4c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800f4d0:	e079      	b.n	800f5c6 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	0a1b      	lsrs	r3, r3, #8
 800f4dc:	4413      	add	r3, r2
 800f4de:	4619      	mov	r1, r3
 800f4e0:	68f8      	ldr	r0, [r7, #12]
 800f4e2:	f7ff fdb2 	bl	800f04a <move_window>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f4ea:	7ffb      	ldrb	r3, [r7, #31]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d167      	bne.n	800f5c0 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	005b      	lsls	r3, r3, #1
 800f4f4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f4f8:	68fa      	ldr	r2, [r7, #12]
 800f4fa:	4413      	add	r3, r2
 800f4fc:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	b2da      	uxtb	r2, r3
 800f502:	69bb      	ldr	r3, [r7, #24]
 800f504:	701a      	strb	r2, [r3, #0]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	b29b      	uxth	r3, r3
 800f50a:	0a1b      	lsrs	r3, r3, #8
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	69bb      	ldr	r3, [r7, #24]
 800f510:	3301      	adds	r3, #1
 800f512:	b2d2      	uxtb	r2, r2
 800f514:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2201      	movs	r2, #1
 800f51a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800f51e:	e052      	b.n	800f5c6 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	09db      	lsrs	r3, r3, #7
 800f52a:	4413      	add	r3, r2
 800f52c:	4619      	mov	r1, r3
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f7ff fd8b 	bl	800f04a <move_window>
 800f534:	4603      	mov	r3, r0
 800f536:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f538:	7ffb      	ldrb	r3, [r7, #31]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d142      	bne.n	800f5c4 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f546:	68fa      	ldr	r2, [r7, #12]
 800f548:	4413      	add	r3, r2
 800f54a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	3303      	adds	r3, #3
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	061a      	lsls	r2, r3, #24
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	3302      	adds	r3, #2
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	041b      	lsls	r3, r3, #16
 800f55c:	431a      	orrs	r2, r3
 800f55e:	69bb      	ldr	r3, [r7, #24]
 800f560:	3301      	adds	r3, #1
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	021b      	lsls	r3, r3, #8
 800f566:	4313      	orrs	r3, r2
 800f568:	69ba      	ldr	r2, [r7, #24]
 800f56a:	7812      	ldrb	r2, [r2, #0]
 800f56c:	4313      	orrs	r3, r2
 800f56e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	4313      	orrs	r3, r2
 800f576:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	b2da      	uxtb	r2, r3
 800f57c:	69bb      	ldr	r3, [r7, #24]
 800f57e:	701a      	strb	r2, [r3, #0]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	b29b      	uxth	r3, r3
 800f584:	0a1b      	lsrs	r3, r3, #8
 800f586:	b29a      	uxth	r2, r3
 800f588:	69bb      	ldr	r3, [r7, #24]
 800f58a:	3301      	adds	r3, #1
 800f58c:	b2d2      	uxtb	r2, r2
 800f58e:	701a      	strb	r2, [r3, #0]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	0c1a      	lsrs	r2, r3, #16
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	3302      	adds	r3, #2
 800f598:	b2d2      	uxtb	r2, r2
 800f59a:	701a      	strb	r2, [r3, #0]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	0e1a      	lsrs	r2, r3, #24
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	3303      	adds	r3, #3
 800f5a4:	b2d2      	uxtb	r2, r2
 800f5a6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800f5b0:	e009      	b.n	800f5c6 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800f5b2:	2302      	movs	r3, #2
 800f5b4:	77fb      	strb	r3, [r7, #31]
 800f5b6:	e006      	b.n	800f5c6 <put_fat+0x212>
			if (res != FR_OK) break;
 800f5b8:	bf00      	nop
 800f5ba:	e004      	b.n	800f5c6 <put_fat+0x212>
			if (res != FR_OK) break;
 800f5bc:	bf00      	nop
 800f5be:	e002      	b.n	800f5c6 <put_fat+0x212>
			if (res != FR_OK) break;
 800f5c0:	bf00      	nop
 800f5c2:	e000      	b.n	800f5c6 <put_fat+0x212>
			if (res != FR_OK) break;
 800f5c4:	bf00      	nop
		}
	}

	return res;
 800f5c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3720      	adds	r7, #32
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d905      	bls.n	800f5ec <remove_chain+0x1c>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f5e6:	683a      	ldr	r2, [r7, #0]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d302      	bcc.n	800f5f2 <remove_chain+0x22>
		res = FR_INT_ERR;
 800f5ec:	2302      	movs	r3, #2
 800f5ee:	73fb      	strb	r3, [r7, #15]
 800f5f0:	e043      	b.n	800f67a <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800f5f6:	e036      	b.n	800f666 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800f5f8:	6839      	ldr	r1, [r7, #0]
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f7ff fe21 	bl	800f242 <get_fat>
 800f600:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d035      	beq.n	800f674 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	d102      	bne.n	800f614 <remove_chain+0x44>
 800f60e:	2302      	movs	r3, #2
 800f610:	73fb      	strb	r3, [r7, #15]
 800f612:	e032      	b.n	800f67a <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f61a:	d102      	bne.n	800f622 <remove_chain+0x52>
 800f61c:	2301      	movs	r3, #1
 800f61e:	73fb      	strb	r3, [r7, #15]
 800f620:	e02b      	b.n	800f67a <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800f622:	2200      	movs	r2, #0
 800f624:	6839      	ldr	r1, [r7, #0]
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f7ff fec4 	bl	800f3b4 <put_fat>
 800f62c:	4603      	mov	r3, r0
 800f62e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f630:	7bfb      	ldrb	r3, [r7, #15]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d120      	bne.n	800f678 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f640:	d00f      	beq.n	800f662 <remove_chain+0x92>
				fs->free_clust++;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f648:	1c5a      	adds	r2, r3, #1
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				fs->fsi_flag |= 1;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800f656:	f043 0301 	orr.w	r3, r3, #1
 800f65a:	b2da      	uxtb	r2, r3
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f66c:	683a      	ldr	r2, [r7, #0]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d3c2      	bcc.n	800f5f8 <remove_chain+0x28>
 800f672:	e002      	b.n	800f67a <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800f674:	bf00      	nop
 800f676:	e000      	b.n	800f67a <remove_chain+0xaa>
			if (res != FR_OK) break;
 800f678:	bf00      	nop
		}
	}

	return res;
 800f67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3710      	adds	r7, #16
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b086      	sub	sp, #24
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d10f      	bne.n	800f6b4 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f69a:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d005      	beq.n	800f6ae <create_chain+0x2a>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f6a8:	693a      	ldr	r2, [r7, #16]
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d31c      	bcc.n	800f6e8 <create_chain+0x64>
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	613b      	str	r3, [r7, #16]
 800f6b2:	e019      	b.n	800f6e8 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800f6b4:	6839      	ldr	r1, [r7, #0]
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f7ff fdc3 	bl	800f242 <get_fat>
 800f6bc:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	d801      	bhi.n	800f6c8 <create_chain+0x44>
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	e076      	b.n	800f7b6 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ce:	d101      	bne.n	800f6d4 <create_chain+0x50>
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	e070      	b.n	800f7b6 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f6da:	68ba      	ldr	r2, [r7, #8]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d201      	bcs.n	800f6e4 <create_chain+0x60>
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	e068      	b.n	800f7b6 <create_chain+0x132>
		scl = clst;
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f6f8:	697a      	ldr	r2, [r7, #20]
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	d307      	bcc.n	800f70e <create_chain+0x8a>
			ncl = 2;
 800f6fe:	2302      	movs	r3, #2
 800f700:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800f702:	697a      	ldr	r2, [r7, #20]
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	429a      	cmp	r2, r3
 800f708:	d901      	bls.n	800f70e <create_chain+0x8a>
 800f70a:	2300      	movs	r3, #0
 800f70c:	e053      	b.n	800f7b6 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800f70e:	6979      	ldr	r1, [r7, #20]
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f7ff fd96 	bl	800f242 <get_fat>
 800f716:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00e      	beq.n	800f73c <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f724:	d002      	beq.n	800f72c <create_chain+0xa8>
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	2b01      	cmp	r3, #1
 800f72a:	d101      	bne.n	800f730 <create_chain+0xac>
			return cs;
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	e042      	b.n	800f7b6 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800f730:	697a      	ldr	r2, [r7, #20]
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	429a      	cmp	r2, r3
 800f736:	d1d9      	bne.n	800f6ec <create_chain+0x68>
 800f738:	2300      	movs	r3, #0
 800f73a:	e03c      	b.n	800f7b6 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800f73c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800f73e:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 800f742:	6979      	ldr	r1, [r7, #20]
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f7ff fe35 	bl	800f3b4 <put_fat>
 800f74a:	4603      	mov	r3, r0
 800f74c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800f74e:	7bfb      	ldrb	r3, [r7, #15]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d109      	bne.n	800f768 <create_chain+0xe4>
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d006      	beq.n	800f768 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800f75a:	697a      	ldr	r2, [r7, #20]
 800f75c:	6839      	ldr	r1, [r7, #0]
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f7ff fe28 	bl	800f3b4 <put_fat>
 800f764:	4603      	mov	r3, r0
 800f766:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800f768:	7bfb      	ldrb	r3, [r7, #15]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d11a      	bne.n	800f7a4 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	697a      	ldr	r2, [r7, #20]
 800f772:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f780:	d018      	beq.n	800f7b4 <create_chain+0x130>
			fs->free_clust--;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f788:	1e5a      	subs	r2, r3, #1
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			fs->fsi_flag |= 1;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800f796:	f043 0301 	orr.w	r3, r3, #1
 800f79a:	b2da      	uxtb	r2, r3
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 800f7a2:	e007      	b.n	800f7b4 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800f7a4:	7bfb      	ldrb	r3, [r7, #15]
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d102      	bne.n	800f7b0 <create_chain+0x12c>
 800f7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800f7ae:	e000      	b.n	800f7b2 <create_chain+0x12e>
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800f7b4:	697b      	ldr	r3, [r7, #20]
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	3718      	adds	r7, #24
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}

0800f7be <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800f7be:	b480      	push	{r7}
 800f7c0:	b087      	sub	sp, #28
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
 800f7c6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800f7ce:	3304      	adds	r3, #4
 800f7d0:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	0a5b      	lsrs	r3, r3, #9
 800f7d6:	687a      	ldr	r2, [r7, #4]
 800f7d8:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800f7dc:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800f7e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	1d1a      	adds	r2, r3, #4
 800f7ea:	613a      	str	r2, [r7, #16]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d101      	bne.n	800f7fa <clmt_clust+0x3c>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	e010      	b.n	800f81c <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800f7fa:	697a      	ldr	r2, [r7, #20]
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d307      	bcc.n	800f812 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800f802:	697a      	ldr	r2, [r7, #20]
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	1ad3      	subs	r3, r2, r3
 800f808:	617b      	str	r3, [r7, #20]
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	3304      	adds	r3, #4
 800f80e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f810:	e7e9      	b.n	800f7e6 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800f812:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	681a      	ldr	r2, [r3, #0]
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	4413      	add	r3, r2
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	371c      	adds	r7, #28
 800f820:	46bd      	mov	sp, r7
 800f822:	bc80      	pop	{r7}
 800f824:	4770      	bx	lr

0800f826 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800f826:	b580      	push	{r7, lr}
 800f828:	b086      	sub	sp, #24
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
 800f82e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	b29a      	uxth	r2, r3
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800f840:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	2b01      	cmp	r3, #1
 800f846:	d007      	beq.n	800f858 <dir_sdi+0x32>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f84e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f852:	697a      	ldr	r2, [r7, #20]
 800f854:	429a      	cmp	r2, r3
 800f856:	d301      	bcc.n	800f85c <dir_sdi+0x36>
		return FR_INT_ERR;
 800f858:	2302      	movs	r3, #2
 800f85a:	e074      	b.n	800f946 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d10c      	bne.n	800f87c <dir_sdi+0x56>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f868:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f86c:	2b03      	cmp	r3, #3
 800f86e:	d105      	bne.n	800f87c <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f876:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800f87a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d111      	bne.n	800f8a6 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f888:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800f88c:	461a      	mov	r2, r3
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	4293      	cmp	r3, r2
 800f892:	d301      	bcc.n	800f898 <dir_sdi+0x72>
			return FR_INT_ERR;
 800f894:	2302      	movs	r3, #2
 800f896:	e056      	b.n	800f946 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f89e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800f8a2:	613b      	str	r3, [r7, #16]
 800f8a4:	e032      	b.n	800f90c <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f8ac:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f8b0:	011b      	lsls	r3, r3, #4
 800f8b2:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800f8b4:	e01e      	b.n	800f8f4 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f8bc:	6979      	ldr	r1, [r7, #20]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7ff fcbf 	bl	800f242 <get_fat>
 800f8c4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8cc:	d101      	bne.n	800f8d2 <dir_sdi+0xac>
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	e039      	b.n	800f946 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	d907      	bls.n	800f8e8 <dir_sdi+0xc2>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f8de:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f8e2:	697a      	ldr	r2, [r7, #20]
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d301      	bcc.n	800f8ec <dir_sdi+0xc6>
				return FR_INT_ERR;
 800f8e8:	2302      	movs	r3, #2
 800f8ea:	e02c      	b.n	800f946 <dir_sdi+0x120>
			idx -= ic;
 800f8ec:	683a      	ldr	r2, [r7, #0]
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	1ad3      	subs	r3, r2, r3
 800f8f2:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800f8f4:	683a      	ldr	r2, [r7, #0]
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d2dc      	bcs.n	800f8b6 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f902:	6979      	ldr	r1, [r7, #20]
 800f904:	4618      	mov	r0, r3
 800f906:	f7ff fc7b 	bl	800f200 <clust2sect>
 800f90a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	697a      	ldr	r2, [r7, #20]
 800f910:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d101      	bne.n	800f91e <dir_sdi+0xf8>
 800f91a:	2302      	movs	r3, #2
 800f91c:	e013      	b.n	800f946 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	091a      	lsrs	r2, r3, #4
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	441a      	add	r2, r3
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f932:	461a      	mov	r2, r3
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	f003 030f 	and.w	r3, r3, #15
 800f93a:	015b      	lsls	r3, r3, #5
 800f93c:	441a      	add	r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800f944:	2300      	movs	r3, #0
}
 800f946:	4618      	mov	r0, r3
 800f948:	3718      	adds	r7, #24
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f94e:	b590      	push	{r4, r7, lr}
 800f950:	b087      	sub	sp, #28
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
 800f956:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800f95e:	3301      	adds	r3, #1
 800f960:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	b29b      	uxth	r3, r3
 800f966:	2b00      	cmp	r3, #0
 800f968:	d004      	beq.n	800f974 <dir_next+0x26>
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f970:	2b00      	cmp	r3, #0
 800f972:	d101      	bne.n	800f978 <dir_next+0x2a>
		return FR_NO_FILE;
 800f974:	2304      	movs	r3, #4
 800f976:	e0dd      	b.n	800fb34 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f003 030f 	and.w	r3, r3, #15
 800f97e:	2b00      	cmp	r3, #0
 800f980:	f040 80c6 	bne.w	800fb10 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f98a:	1c5a      	adds	r2, r3, #1
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d10b      	bne.n	800f9b4 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f9a2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	f0c0 80b0 	bcc.w	800fb10 <dir_next+0x1c2>
				return FR_NO_FILE;
 800f9b0:	2304      	movs	r3, #4
 800f9b2:	e0bf      	b.n	800fb34 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	091b      	lsrs	r3, r3, #4
 800f9b8:	687a      	ldr	r2, [r7, #4]
 800f9ba:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800f9be:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800f9c2:	3a01      	subs	r2, #1
 800f9c4:	4013      	ands	r3, r2
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	f040 80a2 	bne.w	800fb10 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800f9d8:	4619      	mov	r1, r3
 800f9da:	4610      	mov	r0, r2
 800f9dc:	f7ff fc31 	bl	800f242 <get_fat>
 800f9e0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	d801      	bhi.n	800f9ec <dir_next+0x9e>
 800f9e8:	2302      	movs	r3, #2
 800f9ea:	e0a3      	b.n	800fb34 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9f2:	d101      	bne.n	800f9f8 <dir_next+0xaa>
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	e09d      	b.n	800fb34 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f9fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800fa02:	697a      	ldr	r2, [r7, #20]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d374      	bcc.n	800faf2 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d101      	bne.n	800fa12 <dir_next+0xc4>
 800fa0e:	2304      	movs	r3, #4
 800fa10:	e090      	b.n	800fb34 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800fa1e:	4619      	mov	r1, r3
 800fa20:	4610      	mov	r0, r2
 800fa22:	f7ff fe2f 	bl	800f684 <create_chain>
 800fa26:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d101      	bne.n	800fa32 <dir_next+0xe4>
 800fa2e:	2307      	movs	r3, #7
 800fa30:	e080      	b.n	800fb34 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d101      	bne.n	800fa3c <dir_next+0xee>
 800fa38:	2302      	movs	r3, #2
 800fa3a:	e07b      	b.n	800fb34 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa42:	d101      	bne.n	800fa48 <dir_next+0xfa>
 800fa44:	2301      	movs	r3, #1
 800fa46:	e075      	b.n	800fb34 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7ff fab2 	bl	800efb8 <sync_window>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d001      	beq.n	800fa5e <dir_next+0x110>
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	e06a      	b.n	800fb34 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fa64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa68:	2100      	movs	r1, #0
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7ff f8ac 	bl	800ebc8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 800fa7c:	6979      	ldr	r1, [r7, #20]
 800fa7e:	4610      	mov	r0, r2
 800fa80:	f7ff fbbe 	bl	800f200 <clust2sect>
 800fa84:	4603      	mov	r3, r0
 800fa86:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	613b      	str	r3, [r7, #16]
 800fa8e:	e01b      	b.n	800fac8 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fa96:	2201      	movs	r2, #1
 800fa98:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7ff fa88 	bl	800efb8 <sync_window>
 800faa8:	4603      	mov	r3, r0
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d001      	beq.n	800fab2 <dir_next+0x164>
 800faae:	2301      	movs	r3, #1
 800fab0:	e040      	b.n	800fb34 <dir_next+0x1e6>
						dp->fs->winsect++;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fab8:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800fabc:	3201      	adds	r2, #1
 800fabe:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	3301      	adds	r3, #1
 800fac6:	613b      	str	r3, [r7, #16]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800face:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800fad2:	461a      	mov	r2, r3
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d3da      	bcc.n	800fa90 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fae0:	f8d3 1230 	ldr.w	r1, [r3, #560]	@ 0x230
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800faea:	693a      	ldr	r2, [r7, #16]
 800faec:	1a8a      	subs	r2, r1, r2
 800faee:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	697a      	ldr	r2, [r7, #20]
 800faf6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fb00:	6979      	ldr	r1, [r7, #20]
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7ff fb7c 	bl	800f200 <clust2sect>
 800fb08:	4602      	mov	r2, r0
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	b29a      	uxth	r2, r3
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fb20:	461a      	mov	r2, r3
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	f003 030f 	and.w	r3, r3, #15
 800fb28:	015b      	lsls	r3, r3, #5
 800fb2a:	441a      	add	r2, r3
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800fb32:	2300      	movs	r3, #0
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	371c      	adds	r7, #28
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd90      	pop	{r4, r7, pc}

0800fb3c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b084      	sub	sp, #16
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800fb46:	2100      	movs	r1, #0
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f7ff fe6c 	bl	800f826 <dir_sdi>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fb52:	7bfb      	ldrb	r3, [r7, #15]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d131      	bne.n	800fbbc <dir_alloc+0x80>
		n = 0;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fb68:	4619      	mov	r1, r3
 800fb6a:	4610      	mov	r0, r2
 800fb6c:	f7ff fa6d 	bl	800f04a <move_window>
 800fb70:	4603      	mov	r3, r0
 800fb72:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800fb74:	7bfb      	ldrb	r3, [r7, #15]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d11f      	bne.n	800fbba <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	2be5      	cmp	r3, #229	@ 0xe5
 800fb84:	d005      	beq.n	800fb92 <dir_alloc+0x56>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fb8c:	781b      	ldrb	r3, [r3, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d107      	bne.n	800fba2 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	3301      	adds	r3, #1
 800fb96:	60bb      	str	r3, [r7, #8]
 800fb98:	68ba      	ldr	r2, [r7, #8]
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d102      	bne.n	800fba6 <dir_alloc+0x6a>
 800fba0:	e00c      	b.n	800fbbc <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fba2:	2300      	movs	r3, #0
 800fba4:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800fba6:	2101      	movs	r1, #1
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f7ff fed0 	bl	800f94e <dir_next>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800fbb2:	7bfb      	ldrb	r3, [r7, #15]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d0d1      	beq.n	800fb5c <dir_alloc+0x20>
 800fbb8:	e000      	b.n	800fbbc <dir_alloc+0x80>
			if (res != FR_OK) break;
 800fbba:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fbbc:	7bfb      	ldrb	r3, [r7, #15]
 800fbbe:	2b04      	cmp	r3, #4
 800fbc0:	d101      	bne.n	800fbc6 <dir_alloc+0x8a>
 800fbc2:	2307      	movs	r3, #7
 800fbc4:	73fb      	strb	r3, [r7, #15]
	return res;
 800fbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3710      	adds	r7, #16
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b085      	sub	sp, #20
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	331b      	adds	r3, #27
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	021b      	lsls	r3, r3, #8
 800fbe2:	b21a      	sxth	r2, r3
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	331a      	adds	r3, #26
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	b21b      	sxth	r3, r3
 800fbec:	4313      	orrs	r3, r2
 800fbee:	b21b      	sxth	r3, r3
 800fbf0:	b29b      	uxth	r3, r3
 800fbf2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800fbfa:	2b03      	cmp	r3, #3
 800fbfc:	d10f      	bne.n	800fc1e <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	3315      	adds	r3, #21
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	021b      	lsls	r3, r3, #8
 800fc06:	b21a      	sxth	r2, r3
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	3314      	adds	r3, #20
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	b21b      	sxth	r3, r3
 800fc10:	4313      	orrs	r3, r2
 800fc12:	b21b      	sxth	r3, r3
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	041b      	lsls	r3, r3, #16
 800fc18:	68fa      	ldr	r2, [r7, #12]
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	60fb      	str	r3, [r7, #12]

	return cl;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	3714      	adds	r7, #20
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bc80      	pop	{r7}
 800fc28:	4770      	bx	lr

0800fc2a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800fc2a:	b480      	push	{r7}
 800fc2c:	b083      	sub	sp, #12
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	6078      	str	r0, [r7, #4]
 800fc32:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	331a      	adds	r3, #26
 800fc38:	683a      	ldr	r2, [r7, #0]
 800fc3a:	b2d2      	uxtb	r2, r2
 800fc3c:	701a      	strb	r2, [r3, #0]
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	b29b      	uxth	r3, r3
 800fc42:	0a1b      	lsrs	r3, r3, #8
 800fc44:	b29a      	uxth	r2, r3
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	331b      	adds	r3, #27
 800fc4a:	b2d2      	uxtb	r2, r2
 800fc4c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	0c1a      	lsrs	r2, r3, #16
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	3314      	adds	r3, #20
 800fc56:	b2d2      	uxtb	r2, r2
 800fc58:	701a      	strb	r2, [r3, #0]
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	0c1b      	lsrs	r3, r3, #16
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	0a1b      	lsrs	r3, r3, #8
 800fc62:	b29a      	uxth	r2, r3
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	3315      	adds	r3, #21
 800fc68:	b2d2      	uxtb	r2, r2
 800fc6a:	701a      	strb	r2, [r3, #0]
}
 800fc6c:	bf00      	nop
 800fc6e:	370c      	adds	r7, #12
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bc80      	pop	{r7}
 800fc74:	4770      	bx	lr
	...

0800fc78 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b086      	sub	sp, #24
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fc8a:	1e5a      	subs	r2, r3, #1
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	005b      	lsls	r3, r3, #1
 800fc90:	4413      	add	r3, r2
 800fc92:	009b      	lsls	r3, r3, #2
 800fc94:	4413      	add	r3, r2
 800fc96:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	613b      	str	r3, [r7, #16]
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800fca0:	4a2b      	ldr	r2, [pc, #172]	@ (800fd50 <cmp_lfn+0xd8>)
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	4413      	add	r3, r2
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	3301      	adds	r3, #1
 800fcaa:	683a      	ldr	r2, [r7, #0]
 800fcac:	4413      	add	r3, r2
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	021b      	lsls	r3, r3, #8
 800fcb2:	b21a      	sxth	r2, r3
 800fcb4:	4926      	ldr	r1, [pc, #152]	@ (800fd50 <cmp_lfn+0xd8>)
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	440b      	add	r3, r1
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	4619      	mov	r1, r3
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	440b      	add	r3, r1
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	b21b      	sxth	r3, r3
 800fcc6:	4313      	orrs	r3, r2
 800fcc8:	b21b      	sxth	r3, r3
 800fcca:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800fccc:	89fb      	ldrh	r3, [r7, #14]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d019      	beq.n	800fd06 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800fcd2:	89bb      	ldrh	r3, [r7, #12]
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f002 fb87 	bl	80123e8 <ff_wtoupper>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	2bfe      	cmp	r3, #254	@ 0xfe
 800fce2:	d80e      	bhi.n	800fd02 <cmp_lfn+0x8a>
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	1c5a      	adds	r2, r3, #1
 800fce8:	617a      	str	r2, [r7, #20]
 800fcea:	005b      	lsls	r3, r3, #1
 800fcec:	687a      	ldr	r2, [r7, #4]
 800fcee:	4413      	add	r3, r2
 800fcf0:	881b      	ldrh	r3, [r3, #0]
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f002 fb78 	bl	80123e8 <ff_wtoupper>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	89fb      	ldrh	r3, [r7, #14]
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d008      	beq.n	800fd14 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800fd02:	2300      	movs	r3, #0
 800fd04:	e01f      	b.n	800fd46 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800fd06:	89bb      	ldrh	r3, [r7, #12]
 800fd08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d001      	beq.n	800fd14 <cmp_lfn+0x9c>
 800fd10:	2300      	movs	r3, #0
 800fd12:	e018      	b.n	800fd46 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	3301      	adds	r3, #1
 800fd18:	613b      	str	r3, [r7, #16]
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	2b0c      	cmp	r3, #12
 800fd1e:	d9bf      	bls.n	800fca0 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d00b      	beq.n	800fd44 <cmp_lfn+0xcc>
 800fd2c:	89fb      	ldrh	r3, [r7, #14]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d008      	beq.n	800fd44 <cmp_lfn+0xcc>
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	005b      	lsls	r3, r3, #1
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	4413      	add	r3, r2
 800fd3a:	881b      	ldrh	r3, [r3, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d001      	beq.n	800fd44 <cmp_lfn+0xcc>
		return 0;
 800fd40:	2300      	movs	r3, #0
 800fd42:	e000      	b.n	800fd46 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800fd44:	2301      	movs	r3, #1
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3718      	adds	r7, #24
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	08016114 	.word	0x08016114

0800fd54 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b089      	sub	sp, #36	@ 0x24
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	60f8      	str	r0, [r7, #12]
 800fd5c:	60b9      	str	r1, [r7, #8]
 800fd5e:	4611      	mov	r1, r2
 800fd60:	461a      	mov	r2, r3
 800fd62:	460b      	mov	r3, r1
 800fd64:	71fb      	strb	r3, [r7, #7]
 800fd66:	4613      	mov	r3, r2
 800fd68:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	330d      	adds	r3, #13
 800fd6e:	79ba      	ldrb	r2, [r7, #6]
 800fd70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	330b      	adds	r3, #11
 800fd76:	220f      	movs	r2, #15
 800fd78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	330c      	adds	r3, #12
 800fd7e:	2200      	movs	r2, #0
 800fd80:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	331a      	adds	r3, #26
 800fd86:	2200      	movs	r2, #0
 800fd88:	701a      	strb	r2, [r3, #0]
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	331b      	adds	r3, #27
 800fd8e:	2200      	movs	r2, #0
 800fd90:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800fd92:	79fb      	ldrb	r3, [r7, #7]
 800fd94:	1e5a      	subs	r2, r3, #1
 800fd96:	4613      	mov	r3, r2
 800fd98:	005b      	lsls	r3, r3, #1
 800fd9a:	4413      	add	r3, r2
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	4413      	add	r3, r2
 800fda0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800fda2:	2300      	movs	r3, #0
 800fda4:	82fb      	strh	r3, [r7, #22]
 800fda6:	2300      	movs	r3, #0
 800fda8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800fdaa:	8afb      	ldrh	r3, [r7, #22]
 800fdac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	d007      	beq.n	800fdc4 <fit_lfn+0x70>
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	1c5a      	adds	r2, r3, #1
 800fdb8:	61fa      	str	r2, [r7, #28]
 800fdba:	005b      	lsls	r3, r3, #1
 800fdbc:	68fa      	ldr	r2, [r7, #12]
 800fdbe:	4413      	add	r3, r2
 800fdc0:	881b      	ldrh	r3, [r3, #0]
 800fdc2:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800fdc4:	4a1c      	ldr	r2, [pc, #112]	@ (800fe38 <fit_lfn+0xe4>)
 800fdc6:	69bb      	ldr	r3, [r7, #24]
 800fdc8:	4413      	add	r3, r2
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	461a      	mov	r2, r3
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	8afa      	ldrh	r2, [r7, #22]
 800fdd4:	b2d2      	uxtb	r2, r2
 800fdd6:	701a      	strb	r2, [r3, #0]
 800fdd8:	8afb      	ldrh	r3, [r7, #22]
 800fdda:	0a1b      	lsrs	r3, r3, #8
 800fddc:	b299      	uxth	r1, r3
 800fdde:	4a16      	ldr	r2, [pc, #88]	@ (800fe38 <fit_lfn+0xe4>)
 800fde0:	69bb      	ldr	r3, [r7, #24]
 800fde2:	4413      	add	r3, r2
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	3301      	adds	r3, #1
 800fde8:	68ba      	ldr	r2, [r7, #8]
 800fdea:	4413      	add	r3, r2
 800fdec:	b2ca      	uxtb	r2, r1
 800fdee:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800fdf0:	8afb      	ldrh	r3, [r7, #22]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d102      	bne.n	800fdfc <fit_lfn+0xa8>
 800fdf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fdfa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800fdfc:	69bb      	ldr	r3, [r7, #24]
 800fdfe:	3301      	adds	r3, #1
 800fe00:	61bb      	str	r3, [r7, #24]
 800fe02:	69bb      	ldr	r3, [r7, #24]
 800fe04:	2b0c      	cmp	r3, #12
 800fe06:	d9d0      	bls.n	800fdaa <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800fe08:	8afb      	ldrh	r3, [r7, #22]
 800fe0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d006      	beq.n	800fe20 <fit_lfn+0xcc>
 800fe12:	69fb      	ldr	r3, [r7, #28]
 800fe14:	005b      	lsls	r3, r3, #1
 800fe16:	68fa      	ldr	r2, [r7, #12]
 800fe18:	4413      	add	r3, r2
 800fe1a:	881b      	ldrh	r3, [r3, #0]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d103      	bne.n	800fe28 <fit_lfn+0xd4>
 800fe20:	79fb      	ldrb	r3, [r7, #7]
 800fe22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe26:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	79fa      	ldrb	r2, [r7, #7]
 800fe2c:	701a      	strb	r2, [r3, #0]
}
 800fe2e:	bf00      	nop
 800fe30:	3724      	adds	r7, #36	@ 0x24
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bc80      	pop	{r7}
 800fe36:	4770      	bx	lr
 800fe38:	08016114 	.word	0x08016114

0800fe3c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b08c      	sub	sp, #48	@ 0x30
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	60f8      	str	r0, [r7, #12]
 800fe44:	60b9      	str	r1, [r7, #8]
 800fe46:	607a      	str	r2, [r7, #4]
 800fe48:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800fe4a:	220b      	movs	r2, #11
 800fe4c:	68b9      	ldr	r1, [r7, #8]
 800fe4e:	68f8      	ldr	r0, [r7, #12]
 800fe50:	f7fe fe9c 	bl	800eb8c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	2b05      	cmp	r3, #5
 800fe58:	d92b      	bls.n	800feb2 <gen_numname+0x76>
		sr = seq;
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800fe5e:	e022      	b.n	800fea6 <gen_numname+0x6a>
			wc = *lfn++;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	1c9a      	adds	r2, r3, #2
 800fe64:	607a      	str	r2, [r7, #4]
 800fe66:	881b      	ldrh	r3, [r3, #0]
 800fe68:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fe6e:	e017      	b.n	800fea0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800fe70:	69fb      	ldr	r3, [r7, #28]
 800fe72:	005a      	lsls	r2, r3, #1
 800fe74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fe76:	f003 0301 	and.w	r3, r3, #1
 800fe7a:	4413      	add	r3, r2
 800fe7c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800fe7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fe80:	085b      	lsrs	r3, r3, #1
 800fe82:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800fe84:	69fb      	ldr	r3, [r7, #28]
 800fe86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d005      	beq.n	800fe9a <gen_numname+0x5e>
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800fe94:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800fe98:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800fe9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fea2:	2b0f      	cmp	r3, #15
 800fea4:	d9e4      	bls.n	800fe70 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	881b      	ldrh	r3, [r3, #0]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d1d8      	bne.n	800fe60 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800feae:	69fb      	ldr	r3, [r7, #28]
 800feb0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800feb2:	2307      	movs	r3, #7
 800feb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	f003 030f 	and.w	r3, r3, #15
 800febe:	b2db      	uxtb	r3, r3
 800fec0:	3330      	adds	r3, #48	@ 0x30
 800fec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800fec6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800feca:	2b39      	cmp	r3, #57	@ 0x39
 800fecc:	d904      	bls.n	800fed8 <gen_numname+0x9c>
 800fece:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fed2:	3307      	adds	r3, #7
 800fed4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800fed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feda:	1e5a      	subs	r2, r3, #1
 800fedc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fede:	3330      	adds	r3, #48	@ 0x30
 800fee0:	443b      	add	r3, r7
 800fee2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800fee6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	091b      	lsrs	r3, r3, #4
 800feee:	603b      	str	r3, [r7, #0]
	} while (seq);
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d1df      	bne.n	800feb6 <gen_numname+0x7a>
	ns[i] = '~';
 800fef6:	f107 0214 	add.w	r2, r7, #20
 800fefa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fefc:	4413      	add	r3, r2
 800fefe:	227e      	movs	r2, #126	@ 0x7e
 800ff00:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ff02:	2300      	movs	r3, #0
 800ff04:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff06:	e002      	b.n	800ff0e <gen_numname+0xd2>
 800ff08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d205      	bcs.n	800ff22 <gen_numname+0xe6>
 800ff16:	68fa      	ldr	r2, [r7, #12]
 800ff18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff1a:	4413      	add	r3, r2
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	2b20      	cmp	r3, #32
 800ff20:	d1f2      	bne.n	800ff08 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ff22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff24:	2b07      	cmp	r3, #7
 800ff26:	d807      	bhi.n	800ff38 <gen_numname+0xfc>
 800ff28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff2a:	1c5a      	adds	r2, r3, #1
 800ff2c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ff2e:	3330      	adds	r3, #48	@ 0x30
 800ff30:	443b      	add	r3, r7
 800ff32:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ff36:	e000      	b.n	800ff3a <gen_numname+0xfe>
 800ff38:	2120      	movs	r1, #32
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff3c:	1c5a      	adds	r2, r3, #1
 800ff3e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ff40:	68fa      	ldr	r2, [r7, #12]
 800ff42:	4413      	add	r3, r2
 800ff44:	460a      	mov	r2, r1
 800ff46:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ff48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff4a:	2b07      	cmp	r3, #7
 800ff4c:	d9e9      	bls.n	800ff22 <gen_numname+0xe6>
}
 800ff4e:	bf00      	nop
 800ff50:	bf00      	nop
 800ff52:	3730      	adds	r7, #48	@ 0x30
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ff60:	2300      	movs	r3, #0
 800ff62:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ff64:	230b      	movs	r3, #11
 800ff66:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800ff68:	7bfb      	ldrb	r3, [r7, #15]
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	0852      	lsrs	r2, r2, #1
 800ff6e:	01db      	lsls	r3, r3, #7
 800ff70:	4313      	orrs	r3, r2
 800ff72:	b2da      	uxtb	r2, r3
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	1c59      	adds	r1, r3, #1
 800ff78:	6079      	str	r1, [r7, #4]
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	4413      	add	r3, r2
 800ff7e:	73fb      	strb	r3, [r7, #15]
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	3b01      	subs	r3, #1
 800ff84:	60bb      	str	r3, [r7, #8]
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d1ed      	bne.n	800ff68 <sum_sfn+0x10>
	return sum;
 800ff8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3714      	adds	r7, #20
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bc80      	pop	{r7}
 800ff96:	4770      	bx	lr

0800ff98 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b086      	sub	sp, #24
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f7ff fc3f 	bl	800f826 <dir_sdi>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ffac:	7dfb      	ldrb	r3, [r7, #23]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d001      	beq.n	800ffb6 <dir_find+0x1e>
 800ffb2:	7dfb      	ldrb	r3, [r7, #23]
 800ffb4:	e0ac      	b.n	8010110 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ffb6:	23ff      	movs	r3, #255	@ 0xff
 800ffb8:	753b      	strb	r3, [r7, #20]
 800ffba:	7d3b      	ldrb	r3, [r7, #20]
 800ffbc:	757b      	strb	r3, [r7, #21]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ffc4:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	4610      	mov	r0, r2
 800ffd8:	f7ff f837 	bl	800f04a <move_window>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ffe0:	7dfb      	ldrb	r3, [r7, #23]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	f040 808e 	bne.w	8010104 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ffee:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	781b      	ldrb	r3, [r3, #0]
 800fff4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fff6:	7dbb      	ldrb	r3, [r7, #22]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d102      	bne.n	8010002 <dir_find+0x6a>
 800fffc:	2304      	movs	r3, #4
 800fffe:	75fb      	strb	r3, [r7, #23]
 8010000:	e085      	b.n	801010e <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	330b      	adds	r3, #11
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801000c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801000e:	7dbb      	ldrb	r3, [r7, #22]
 8010010:	2be5      	cmp	r3, #229	@ 0xe5
 8010012:	d007      	beq.n	8010024 <dir_find+0x8c>
 8010014:	7bfb      	ldrb	r3, [r7, #15]
 8010016:	f003 0308 	and.w	r3, r3, #8
 801001a:	2b00      	cmp	r3, #0
 801001c:	d00a      	beq.n	8010034 <dir_find+0x9c>
 801001e:	7bfb      	ldrb	r3, [r7, #15]
 8010020:	2b0f      	cmp	r3, #15
 8010022:	d007      	beq.n	8010034 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8010024:	23ff      	movs	r3, #255	@ 0xff
 8010026:	757b      	strb	r3, [r7, #21]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801002e:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
 8010032:	e05c      	b.n	80100ee <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010034:	7bfb      	ldrb	r3, [r7, #15]
 8010036:	2b0f      	cmp	r3, #15
 8010038:	d133      	bne.n	80100a2 <dir_find+0x10a>
				if (dp->lfn) {
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8010040:	2b00      	cmp	r3, #0
 8010042:	d054      	beq.n	80100ee <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010044:	7dbb      	ldrb	r3, [r7, #22]
 8010046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801004a:	2b00      	cmp	r3, #0
 801004c:	d00e      	beq.n	801006c <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	7b5b      	ldrb	r3, [r3, #13]
 8010052:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8010054:	7dbb      	ldrb	r3, [r7, #22]
 8010056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801005a:	75bb      	strb	r3, [r7, #22]
 801005c:	7dbb      	ldrb	r3, [r7, #22]
 801005e:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 801006c:	7dba      	ldrb	r2, [r7, #22]
 801006e:	7d7b      	ldrb	r3, [r7, #21]
 8010070:	429a      	cmp	r2, r3
 8010072:	d113      	bne.n	801009c <dir_find+0x104>
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	330d      	adds	r3, #13
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	7d3a      	ldrb	r2, [r7, #20]
 801007c:	429a      	cmp	r2, r3
 801007e:	d10d      	bne.n	801009c <dir_find+0x104>
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8010086:	6939      	ldr	r1, [r7, #16]
 8010088:	4618      	mov	r0, r3
 801008a:	f7ff fdf5 	bl	800fc78 <cmp_lfn>
 801008e:	4603      	mov	r3, r0
 8010090:	2b00      	cmp	r3, #0
 8010092:	d003      	beq.n	801009c <dir_find+0x104>
 8010094:	7d7b      	ldrb	r3, [r7, #21]
 8010096:	3b01      	subs	r3, #1
 8010098:	b2db      	uxtb	r3, r3
 801009a:	e000      	b.n	801009e <dir_find+0x106>
 801009c:	23ff      	movs	r3, #255	@ 0xff
 801009e:	757b      	strb	r3, [r7, #21]
 80100a0:	e025      	b.n	80100ee <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80100a2:	7d7b      	ldrb	r3, [r7, #21]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d107      	bne.n	80100b8 <dir_find+0x120>
 80100a8:	6938      	ldr	r0, [r7, #16]
 80100aa:	f7ff ff55 	bl	800ff58 <sum_sfn>
 80100ae:	4603      	mov	r3, r0
 80100b0:	461a      	mov	r2, r3
 80100b2:	7d3b      	ldrb	r3, [r7, #20]
 80100b4:	4293      	cmp	r3, r2
 80100b6:	d027      	beq.n	8010108 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80100be:	330b      	adds	r3, #11
 80100c0:	781b      	ldrb	r3, [r3, #0]
 80100c2:	f003 0301 	and.w	r3, r3, #1
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d10a      	bne.n	80100e0 <dir_find+0x148>
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80100d0:	220b      	movs	r2, #11
 80100d2:	4619      	mov	r1, r3
 80100d4:	6938      	ldr	r0, [r7, #16]
 80100d6:	f7fe fd91 	bl	800ebfc <mem_cmp>
 80100da:	4603      	mov	r3, r0
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d015      	beq.n	801010c <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80100e0:	23ff      	movs	r3, #255	@ 0xff
 80100e2:	757b      	strb	r3, [r7, #21]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80100ea:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80100ee:	2100      	movs	r1, #0
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f7ff fc2c 	bl	800f94e <dir_next>
 80100f6:	4603      	mov	r3, r0
 80100f8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80100fa:	7dfb      	ldrb	r3, [r7, #23]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	f43f af63 	beq.w	800ffc8 <dir_find+0x30>
 8010102:	e004      	b.n	801010e <dir_find+0x176>
		if (res != FR_OK) break;
 8010104:	bf00      	nop
 8010106:	e002      	b.n	801010e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8010108:	bf00      	nop
 801010a:	e000      	b.n	801010e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 801010c:	bf00      	nop

	return res;
 801010e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010110:	4618      	mov	r0, r3
 8010112:	3718      	adds	r7, #24
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}

08010118 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b08c      	sub	sp, #48	@ 0x30
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010126:	623b      	str	r3, [r7, #32]
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 801012e:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8010130:	f107 030c 	add.w	r3, r7, #12
 8010134:	220c      	movs	r2, #12
 8010136:	6a39      	ldr	r1, [r7, #32]
 8010138:	4618      	mov	r0, r3
 801013a:	f7fe fd27 	bl	800eb8c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801013e:	7dfb      	ldrb	r3, [r7, #23]
 8010140:	f003 0301 	and.w	r3, r3, #1
 8010144:	2b00      	cmp	r3, #0
 8010146:	d037      	beq.n	80101b8 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8010148:	6a3b      	ldr	r3, [r7, #32]
 801014a:	330b      	adds	r3, #11
 801014c:	2200      	movs	r2, #0
 801014e:	701a      	strb	r2, [r3, #0]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2200      	movs	r2, #0
 8010154:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		for (n = 1; n < 100; n++) {
 8010158:	2301      	movs	r3, #1
 801015a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801015c:	e013      	b.n	8010186 <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 801015e:	f107 010c 	add.w	r1, r7, #12
 8010162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010164:	69fa      	ldr	r2, [r7, #28]
 8010166:	6a38      	ldr	r0, [r7, #32]
 8010168:	f7ff fe68 	bl	800fe3c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f7ff ff13 	bl	800ff98 <dir_find>
 8010172:	4603      	mov	r3, r0
 8010174:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8010178:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801017c:	2b00      	cmp	r3, #0
 801017e:	d106      	bne.n	801018e <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 8010180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010182:	3301      	adds	r3, #1
 8010184:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010188:	2b63      	cmp	r3, #99	@ 0x63
 801018a:	d9e8      	bls.n	801015e <dir_register+0x46>
 801018c:	e000      	b.n	8010190 <dir_register+0x78>
			if (res != FR_OK) break;
 801018e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010192:	2b64      	cmp	r3, #100	@ 0x64
 8010194:	d101      	bne.n	801019a <dir_register+0x82>
 8010196:	2307      	movs	r3, #7
 8010198:	e0c5      	b.n	8010326 <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801019a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801019e:	2b04      	cmp	r3, #4
 80101a0:	d002      	beq.n	80101a8 <dir_register+0x90>
 80101a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80101a6:	e0be      	b.n	8010326 <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80101a8:	6a3b      	ldr	r3, [r7, #32]
 80101aa:	330b      	adds	r3, #11
 80101ac:	7dfa      	ldrb	r2, [r7, #23]
 80101ae:	701a      	strb	r2, [r3, #0]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	69fa      	ldr	r2, [r7, #28]
 80101b4:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80101b8:	7dfb      	ldrb	r3, [r7, #23]
 80101ba:	f003 0302 	and.w	r3, r3, #2
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d014      	beq.n	80101ec <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 80101c2:	2300      	movs	r3, #0
 80101c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80101c6:	e002      	b.n	80101ce <dir_register+0xb6>
 80101c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ca:	3301      	adds	r3, #1
 80101cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80101ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101d0:	005b      	lsls	r3, r3, #1
 80101d2:	69fa      	ldr	r2, [r7, #28]
 80101d4:	4413      	add	r3, r2
 80101d6:	881b      	ldrh	r3, [r3, #0]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d1f5      	bne.n	80101c8 <dir_register+0xb0>
		nent = (n + 25) / 13;
 80101dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101de:	3319      	adds	r3, #25
 80101e0:	4a53      	ldr	r2, [pc, #332]	@ (8010330 <dir_register+0x218>)
 80101e2:	fba2 2303 	umull	r2, r3, r2, r3
 80101e6:	089b      	lsrs	r3, r3, #2
 80101e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80101ea:	e001      	b.n	80101f0 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80101ec:	2301      	movs	r3, #1
 80101ee:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80101f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f7ff fca2 	bl	800fb3c <dir_alloc>
 80101f8:	4603      	mov	r3, r0
 80101fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80101fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010202:	2b00      	cmp	r3, #0
 8010204:	d153      	bne.n	80102ae <dir_register+0x196>
 8010206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010208:	3b01      	subs	r3, #1
 801020a:	627b      	str	r3, [r7, #36]	@ 0x24
 801020c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801020e:	2b00      	cmp	r3, #0
 8010210:	d04d      	beq.n	80102ae <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8010218:	461a      	mov	r2, r3
 801021a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801021c:	1ad3      	subs	r3, r2, r3
 801021e:	4619      	mov	r1, r3
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f7ff fb00 	bl	800f826 <dir_sdi>
 8010226:	4603      	mov	r3, r0
 8010228:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801022c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010230:	2b00      	cmp	r3, #0
 8010232:	d13c      	bne.n	80102ae <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 801023a:	4618      	mov	r0, r3
 801023c:	f7ff fe8c 	bl	800ff58 <sum_sfn>
 8010240:	4603      	mov	r3, r0
 8010242:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010250:	4619      	mov	r1, r3
 8010252:	4610      	mov	r0, r2
 8010254:	f7fe fef9 	bl	800f04a <move_window>
 8010258:	4603      	mov	r3, r0
 801025a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801025e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010262:	2b00      	cmp	r3, #0
 8010264:	d122      	bne.n	80102ac <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f8d3 1214 	ldr.w	r1, [r3, #532]	@ 0x214
 8010272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010274:	b2da      	uxtb	r2, r3
 8010276:	7efb      	ldrb	r3, [r7, #27]
 8010278:	f7ff fd6c 	bl	800fd54 <fit_lfn>
				dp->fs->wflag = 1;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010282:	2201      	movs	r2, #1
 8010284:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = dir_next(dp, 0);	/* Next entry */
 8010288:	2100      	movs	r1, #0
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f7ff fb5f 	bl	800f94e <dir_next>
 8010290:	4603      	mov	r3, r0
 8010292:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8010296:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801029a:	2b00      	cmp	r3, #0
 801029c:	d107      	bne.n	80102ae <dir_register+0x196>
 801029e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102a0:	3b01      	subs	r3, #1
 80102a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80102a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d1cc      	bne.n	8010244 <dir_register+0x12c>
 80102aa:	e000      	b.n	80102ae <dir_register+0x196>
				if (res != FR_OK) break;
 80102ac:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80102ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d135      	bne.n	8010322 <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80102c2:	4619      	mov	r1, r3
 80102c4:	4610      	mov	r0, r2
 80102c6:	f7fe fec0 	bl	800f04a <move_window>
 80102ca:	4603      	mov	r3, r0
 80102cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80102d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d124      	bne.n	8010322 <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80102de:	2220      	movs	r2, #32
 80102e0:	2100      	movs	r1, #0
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7fe fc70 	bl	800ebc8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80102f4:	220b      	movs	r2, #11
 80102f6:	4619      	mov	r1, r3
 80102f8:	f7fe fc48 	bl	800eb8c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010302:	330b      	adds	r3, #11
 8010304:	781a      	ldrb	r2, [r3, #0]
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801030c:	330c      	adds	r3, #12
 801030e:	f002 0218 	and.w	r2, r2, #24
 8010312:	b2d2      	uxtb	r2, r2
 8010314:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801031c:	2201      	movs	r2, #1
 801031e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 8010322:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010326:	4618      	mov	r0, r3
 8010328:	3730      	adds	r7, #48	@ 0x30
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
 801032e:	bf00      	nop
 8010330:	4ec4ec4f 	.word	0x4ec4ec4f

08010334 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b08a      	sub	sp, #40	@ 0x28
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	613b      	str	r3, [r7, #16]
 8010344:	e002      	b.n	801034c <create_name+0x18>
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	3301      	adds	r3, #1
 801034a:	613b      	str	r3, [r7, #16]
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	781b      	ldrb	r3, [r3, #0]
 8010350:	2b2f      	cmp	r3, #47	@ 0x2f
 8010352:	d0f8      	beq.n	8010346 <create_name+0x12>
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	2b5c      	cmp	r3, #92	@ 0x5c
 801035a:	d0f4      	beq.n	8010346 <create_name+0x12>
	lfn = dp->lfn;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8010362:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8010364:	2300      	movs	r3, #0
 8010366:	617b      	str	r3, [r7, #20]
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801036c:	69bb      	ldr	r3, [r7, #24]
 801036e:	1c5a      	adds	r2, r3, #1
 8010370:	61ba      	str	r2, [r7, #24]
 8010372:	693a      	ldr	r2, [r7, #16]
 8010374:	4413      	add	r3, r2
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 801037a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801037c:	2b1f      	cmp	r3, #31
 801037e:	d92f      	bls.n	80103e0 <create_name+0xac>
 8010380:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010382:	2b2f      	cmp	r3, #47	@ 0x2f
 8010384:	d02c      	beq.n	80103e0 <create_name+0xac>
 8010386:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010388:	2b5c      	cmp	r3, #92	@ 0x5c
 801038a:	d029      	beq.n	80103e0 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	2bfe      	cmp	r3, #254	@ 0xfe
 8010390:	d901      	bls.n	8010396 <create_name+0x62>
			return FR_INVALID_NAME;
 8010392:	2306      	movs	r3, #6
 8010394:	e182      	b.n	801069c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010396:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010398:	b2db      	uxtb	r3, r3
 801039a:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801039c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801039e:	2101      	movs	r1, #1
 80103a0:	4618      	mov	r0, r3
 80103a2:	f001 ffe7 	bl	8012374 <ff_convert>
 80103a6:	4603      	mov	r3, r0
 80103a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80103aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d101      	bne.n	80103b4 <create_name+0x80>
 80103b0:	2306      	movs	r3, #6
 80103b2:	e173      	b.n	801069c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80103b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80103b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80103b8:	d809      	bhi.n	80103ce <create_name+0x9a>
 80103ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80103bc:	4619      	mov	r1, r3
 80103be:	488e      	ldr	r0, [pc, #568]	@ (80105f8 <create_name+0x2c4>)
 80103c0:	f7fe fc42 	bl	800ec48 <chk_chr>
 80103c4:	4603      	mov	r3, r0
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d001      	beq.n	80103ce <create_name+0x9a>
			return FR_INVALID_NAME;
 80103ca:	2306      	movs	r3, #6
 80103cc:	e166      	b.n	801069c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	1c5a      	adds	r2, r3, #1
 80103d2:	617a      	str	r2, [r7, #20]
 80103d4:	005b      	lsls	r3, r3, #1
 80103d6:	68fa      	ldr	r2, [r7, #12]
 80103d8:	4413      	add	r3, r2
 80103da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80103dc:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80103de:	e7c5      	b.n	801036c <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80103e0:	693a      	ldr	r2, [r7, #16]
 80103e2:	69bb      	ldr	r3, [r7, #24]
 80103e4:	441a      	add	r2, r3
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80103ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80103ec:	2b1f      	cmp	r3, #31
 80103ee:	d801      	bhi.n	80103f4 <create_name+0xc0>
 80103f0:	2304      	movs	r3, #4
 80103f2:	e000      	b.n	80103f6 <create_name+0xc2>
 80103f4:	2300      	movs	r3, #0
 80103f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80103fa:	e011      	b.n	8010420 <create_name+0xec>
		w = lfn[di - 1];
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010402:	3b01      	subs	r3, #1
 8010404:	005b      	lsls	r3, r3, #1
 8010406:	68fa      	ldr	r2, [r7, #12]
 8010408:	4413      	add	r3, r2
 801040a:	881b      	ldrh	r3, [r3, #0]
 801040c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801040e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010410:	2b20      	cmp	r3, #32
 8010412:	d002      	beq.n	801041a <create_name+0xe6>
 8010414:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010416:	2b2e      	cmp	r3, #46	@ 0x2e
 8010418:	d106      	bne.n	8010428 <create_name+0xf4>
		di--;
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	3b01      	subs	r3, #1
 801041e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d1ea      	bne.n	80103fc <create_name+0xc8>
 8010426:	e000      	b.n	801042a <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 8010428:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d101      	bne.n	8010434 <create_name+0x100>
 8010430:	2306      	movs	r3, #6
 8010432:	e133      	b.n	801069c <create_name+0x368>

	lfn[di] = 0;						/* LFN is created */
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	005b      	lsls	r3, r3, #1
 8010438:	68fa      	ldr	r2, [r7, #12]
 801043a:	4413      	add	r3, r2
 801043c:	2200      	movs	r2, #0
 801043e:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010446:	220b      	movs	r2, #11
 8010448:	2120      	movs	r1, #32
 801044a:	4618      	mov	r0, r3
 801044c:	f7fe fbbc 	bl	800ebc8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010450:	2300      	movs	r3, #0
 8010452:	61bb      	str	r3, [r7, #24]
 8010454:	e002      	b.n	801045c <create_name+0x128>
 8010456:	69bb      	ldr	r3, [r7, #24]
 8010458:	3301      	adds	r3, #1
 801045a:	61bb      	str	r3, [r7, #24]
 801045c:	69bb      	ldr	r3, [r7, #24]
 801045e:	005b      	lsls	r3, r3, #1
 8010460:	68fa      	ldr	r2, [r7, #12]
 8010462:	4413      	add	r3, r2
 8010464:	881b      	ldrh	r3, [r3, #0]
 8010466:	2b20      	cmp	r3, #32
 8010468:	d0f5      	beq.n	8010456 <create_name+0x122>
 801046a:	69bb      	ldr	r3, [r7, #24]
 801046c:	005b      	lsls	r3, r3, #1
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	4413      	add	r3, r2
 8010472:	881b      	ldrh	r3, [r3, #0]
 8010474:	2b2e      	cmp	r3, #46	@ 0x2e
 8010476:	d0ee      	beq.n	8010456 <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010478:	69bb      	ldr	r3, [r7, #24]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d009      	beq.n	8010492 <create_name+0x15e>
 801047e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010482:	f043 0303 	orr.w	r3, r3, #3
 8010486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801048a:	e002      	b.n	8010492 <create_name+0x15e>
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	3b01      	subs	r3, #1
 8010490:	617b      	str	r3, [r7, #20]
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d009      	beq.n	80104ac <create_name+0x178>
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801049e:	3b01      	subs	r3, #1
 80104a0:	005b      	lsls	r3, r3, #1
 80104a2:	68fa      	ldr	r2, [r7, #12]
 80104a4:	4413      	add	r3, r2
 80104a6:	881b      	ldrh	r3, [r3, #0]
 80104a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80104aa:	d1ef      	bne.n	801048c <create_name+0x158>

	b = i = 0; ni = 8;
 80104ac:	2300      	movs	r3, #0
 80104ae:	623b      	str	r3, [r7, #32]
 80104b0:	2300      	movs	r3, #0
 80104b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80104b6:	2308      	movs	r3, #8
 80104b8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80104ba:	69bb      	ldr	r3, [r7, #24]
 80104bc:	1c5a      	adds	r2, r3, #1
 80104be:	61ba      	str	r2, [r7, #24]
 80104c0:	005b      	lsls	r3, r3, #1
 80104c2:	68fa      	ldr	r2, [r7, #12]
 80104c4:	4413      	add	r3, r2
 80104c6:	881b      	ldrh	r3, [r3, #0]
 80104c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80104ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	f000 8090 	beq.w	80105f2 <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80104d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80104d4:	2b20      	cmp	r3, #32
 80104d6:	d006      	beq.n	80104e6 <create_name+0x1b2>
 80104d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80104da:	2b2e      	cmp	r3, #46	@ 0x2e
 80104dc:	d10a      	bne.n	80104f4 <create_name+0x1c0>
 80104de:	69ba      	ldr	r2, [r7, #24]
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d006      	beq.n	80104f4 <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 80104e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104ea:	f043 0303 	orr.w	r3, r3, #3
 80104ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80104f2:	e07d      	b.n	80105f0 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80104f4:	6a3a      	ldr	r2, [r7, #32]
 80104f6:	69fb      	ldr	r3, [r7, #28]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d203      	bcs.n	8010504 <create_name+0x1d0>
 80104fc:	69ba      	ldr	r2, [r7, #24]
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	429a      	cmp	r2, r3
 8010502:	d123      	bne.n	801054c <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	2b0b      	cmp	r3, #11
 8010508:	d106      	bne.n	8010518 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 801050a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801050e:	f043 0303 	orr.w	r3, r3, #3
 8010512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010516:	e076      	b.n	8010606 <create_name+0x2d2>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8010518:	69ba      	ldr	r2, [r7, #24]
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	429a      	cmp	r2, r3
 801051e:	d005      	beq.n	801052c <create_name+0x1f8>
 8010520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010524:	f043 0303 	orr.w	r3, r3, #3
 8010528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801052c:	69ba      	ldr	r2, [r7, #24]
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	429a      	cmp	r2, r3
 8010532:	d867      	bhi.n	8010604 <create_name+0x2d0>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	61bb      	str	r3, [r7, #24]
 8010538:	2308      	movs	r3, #8
 801053a:	623b      	str	r3, [r7, #32]
 801053c:	230b      	movs	r3, #11
 801053e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010540:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010544:	009b      	lsls	r3, r3, #2
 8010546:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801054a:	e051      	b.n	80105f0 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801054c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801054e:	2b7f      	cmp	r3, #127	@ 0x7f
 8010550:	d914      	bls.n	801057c <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010552:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010554:	2100      	movs	r1, #0
 8010556:	4618      	mov	r0, r3
 8010558:	f001 ff0c 	bl	8012374 <ff_convert>
 801055c:	4603      	mov	r3, r0
 801055e:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010560:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010562:	2b00      	cmp	r3, #0
 8010564:	d004      	beq.n	8010570 <create_name+0x23c>
 8010566:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010568:	3b80      	subs	r3, #128	@ 0x80
 801056a:	4a24      	ldr	r2, [pc, #144]	@ (80105fc <create_name+0x2c8>)
 801056c:	5cd3      	ldrb	r3, [r2, r3]
 801056e:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010574:	f043 0302 	orr.w	r3, r3, #2
 8010578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801057c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801057e:	2b00      	cmp	r3, #0
 8010580:	d007      	beq.n	8010592 <create_name+0x25e>
 8010582:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010584:	4619      	mov	r1, r3
 8010586:	481e      	ldr	r0, [pc, #120]	@ (8010600 <create_name+0x2cc>)
 8010588:	f7fe fb5e 	bl	800ec48 <chk_chr>
 801058c:	4603      	mov	r3, r0
 801058e:	2b00      	cmp	r3, #0
 8010590:	d008      	beq.n	80105a4 <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010592:	235f      	movs	r3, #95	@ 0x5f
 8010594:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8010596:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801059a:	f043 0303 	orr.w	r3, r3, #3
 801059e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80105a2:	e01b      	b.n	80105dc <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80105a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105a6:	2b40      	cmp	r3, #64	@ 0x40
 80105a8:	d909      	bls.n	80105be <create_name+0x28a>
 80105aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105ac:	2b5a      	cmp	r3, #90	@ 0x5a
 80105ae:	d806      	bhi.n	80105be <create_name+0x28a>
					b |= 2;
 80105b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80105b4:	f043 0302 	orr.w	r3, r3, #2
 80105b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80105bc:	e00e      	b.n	80105dc <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80105be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105c0:	2b60      	cmp	r3, #96	@ 0x60
 80105c2:	d90b      	bls.n	80105dc <create_name+0x2a8>
 80105c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105c6:	2b7a      	cmp	r3, #122	@ 0x7a
 80105c8:	d808      	bhi.n	80105dc <create_name+0x2a8>
						b |= 1; w -= 0x20;
 80105ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80105ce:	f043 0301 	orr.w	r3, r3, #1
 80105d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80105d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105d8:	3b20      	subs	r3, #32
 80105da:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80105e2:	6a3b      	ldr	r3, [r7, #32]
 80105e4:	1c59      	adds	r1, r3, #1
 80105e6:	6239      	str	r1, [r7, #32]
 80105e8:	4413      	add	r3, r2
 80105ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80105ec:	b2d2      	uxtb	r2, r2
 80105ee:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80105f0:	e763      	b.n	80104ba <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 80105f2:	bf00      	nop
 80105f4:	e007      	b.n	8010606 <create_name+0x2d2>
 80105f6:	bf00      	nop
 80105f8:	08015f54 	.word	0x08015f54
 80105fc:	08016094 	.word	0x08016094
 8010600:	08015f60 	.word	0x08015f60
			if (si > di) break;			/* No extension */
 8010604:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 801060c:	781b      	ldrb	r3, [r3, #0]
 801060e:	2be5      	cmp	r3, #229	@ 0xe5
 8010610:	d104      	bne.n	801061c <create_name+0x2e8>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010618:	2205      	movs	r2, #5
 801061a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 801061c:	69fb      	ldr	r3, [r7, #28]
 801061e:	2b08      	cmp	r3, #8
 8010620:	d104      	bne.n	801062c <create_name+0x2f8>
 8010622:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010626:	009b      	lsls	r3, r3, #2
 8010628:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 801062c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010630:	f003 030c 	and.w	r3, r3, #12
 8010634:	2b0c      	cmp	r3, #12
 8010636:	d005      	beq.n	8010644 <create_name+0x310>
 8010638:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801063c:	f003 0303 	and.w	r3, r3, #3
 8010640:	2b03      	cmp	r3, #3
 8010642:	d105      	bne.n	8010650 <create_name+0x31c>
		cf |= NS_LFN;
 8010644:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010648:	f043 0302 	orr.w	r3, r3, #2
 801064c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010650:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010654:	f003 0302 	and.w	r3, r3, #2
 8010658:	2b00      	cmp	r3, #0
 801065a:	d117      	bne.n	801068c <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801065c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010660:	f003 0303 	and.w	r3, r3, #3
 8010664:	2b01      	cmp	r3, #1
 8010666:	d105      	bne.n	8010674 <create_name+0x340>
 8010668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801066c:	f043 0310 	orr.w	r3, r3, #16
 8010670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010674:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010678:	f003 030c 	and.w	r3, r3, #12
 801067c:	2b04      	cmp	r3, #4
 801067e:	d105      	bne.n	801068c <create_name+0x358>
 8010680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010684:	f043 0308 	orr.w	r3, r3, #8
 8010688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010692:	330b      	adds	r3, #11
 8010694:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010698:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801069a:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 801069c:	4618      	mov	r0, r3
 801069e:	3728      	adds	r7, #40	@ 0x28
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b084      	sub	sp, #16
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80106b4:	d003      	beq.n	80106be <follow_path+0x1a>
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	2b5c      	cmp	r3, #92	@ 0x5c
 80106bc:	d102      	bne.n	80106c4 <follow_path+0x20>
		path++;
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	3301      	adds	r3, #1
 80106c2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2200      	movs	r2, #0
 80106c8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	2b1f      	cmp	r3, #31
 80106d2:	d80a      	bhi.n	80106ea <follow_path+0x46>
		res = dir_sdi(dp, 0);
 80106d4:	2100      	movs	r1, #0
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f7ff f8a5 	bl	800f826 <dir_sdi>
 80106dc:	4603      	mov	r3, r0
 80106de:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2200      	movs	r2, #0
 80106e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80106e8:	e045      	b.n	8010776 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80106ea:	463b      	mov	r3, r7
 80106ec:	4619      	mov	r1, r3
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f7ff fe20 	bl	8010334 <create_name>
 80106f4:	4603      	mov	r3, r0
 80106f6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80106f8:	7bfb      	ldrb	r3, [r7, #15]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d136      	bne.n	801076c <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f7ff fc4a 	bl	800ff98 <dir_find>
 8010704:	4603      	mov	r3, r0
 8010706:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 801070e:	7adb      	ldrb	r3, [r3, #11]
 8010710:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8010712:	7bfb      	ldrb	r3, [r7, #15]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d00a      	beq.n	801072e <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010718:	7bfb      	ldrb	r3, [r7, #15]
 801071a:	2b04      	cmp	r3, #4
 801071c:	d128      	bne.n	8010770 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801071e:	7bbb      	ldrb	r3, [r7, #14]
 8010720:	f003 0304 	and.w	r3, r3, #4
 8010724:	2b00      	cmp	r3, #0
 8010726:	d123      	bne.n	8010770 <follow_path+0xcc>
 8010728:	2305      	movs	r3, #5
 801072a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 801072c:	e020      	b.n	8010770 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801072e:	7bbb      	ldrb	r3, [r7, #14]
 8010730:	f003 0304 	and.w	r3, r3, #4
 8010734:	2b00      	cmp	r3, #0
 8010736:	d11d      	bne.n	8010774 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801073e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	330b      	adds	r3, #11
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	f003 0310 	and.w	r3, r3, #16
 801074a:	2b00      	cmp	r3, #0
 801074c:	d102      	bne.n	8010754 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 801074e:	2305      	movs	r3, #5
 8010750:	73fb      	strb	r3, [r7, #15]
 8010752:	e010      	b.n	8010776 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801075a:	68b9      	ldr	r1, [r7, #8]
 801075c:	4618      	mov	r0, r3
 801075e:	f7ff fa37 	bl	800fbd0 <ld_clust>
 8010762:	4602      	mov	r2, r0
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801076a:	e7be      	b.n	80106ea <follow_path+0x46>
			if (res != FR_OK) break;
 801076c:	bf00      	nop
 801076e:	e002      	b.n	8010776 <follow_path+0xd2>
				break;
 8010770:	bf00      	nop
 8010772:	e000      	b.n	8010776 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010774:	bf00      	nop
		}
	}

	return res;
 8010776:	7bfb      	ldrb	r3, [r7, #15]
}
 8010778:	4618      	mov	r0, r3
 801077a:	3710      	adds	r7, #16
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010780:	b480      	push	{r7}
 8010782:	b087      	sub	sp, #28
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010788:	f04f 33ff 	mov.w	r3, #4294967295
 801078c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d031      	beq.n	80107fa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	617b      	str	r3, [r7, #20]
 801079c:	e002      	b.n	80107a4 <get_ldnumber+0x24>
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	3301      	adds	r3, #1
 80107a2:	617b      	str	r3, [r7, #20]
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	2b1f      	cmp	r3, #31
 80107aa:	d903      	bls.n	80107b4 <get_ldnumber+0x34>
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	2b3a      	cmp	r3, #58	@ 0x3a
 80107b2:	d1f4      	bne.n	801079e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	2b3a      	cmp	r3, #58	@ 0x3a
 80107ba:	d11c      	bne.n	80107f6 <get_ldnumber+0x76>
			tp = *path;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	1c5a      	adds	r2, r3, #1
 80107c6:	60fa      	str	r2, [r7, #12]
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	3b30      	subs	r3, #48	@ 0x30
 80107cc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	2b09      	cmp	r3, #9
 80107d2:	d80e      	bhi.n	80107f2 <get_ldnumber+0x72>
 80107d4:	68fa      	ldr	r2, [r7, #12]
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	429a      	cmp	r2, r3
 80107da:	d10a      	bne.n	80107f2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d107      	bne.n	80107f2 <get_ldnumber+0x72>
					vol = (int)i;
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	3301      	adds	r3, #1
 80107ea:	617b      	str	r3, [r7, #20]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	697a      	ldr	r2, [r7, #20]
 80107f0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80107f2:	693b      	ldr	r3, [r7, #16]
 80107f4:	e002      	b.n	80107fc <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80107f6:	2300      	movs	r3, #0
 80107f8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80107fa:	693b      	ldr	r3, [r7, #16]
}
 80107fc:	4618      	mov	r0, r3
 80107fe:	371c      	adds	r7, #28
 8010800:	46bd      	mov	sp, r7
 8010802:	bc80      	pop	{r7}
 8010804:	4770      	bx	lr
	...

08010808 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2200      	movs	r2, #0
 8010816:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f04f 32ff 	mov.w	r2, #4294967295
 8010820:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8010824:	6839      	ldr	r1, [r7, #0]
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f7fe fc0f 	bl	800f04a <move_window>
 801082c:	4603      	mov	r3, r0
 801082e:	2b00      	cmp	r3, #0
 8010830:	d001      	beq.n	8010836 <check_fs+0x2e>
		return 3;
 8010832:	2303      	movs	r3, #3
 8010834:	e04a      	b.n	80108cc <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801083c:	3301      	adds	r3, #1
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	021b      	lsls	r3, r3, #8
 8010842:	b21a      	sxth	r2, r3
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 801084a:	b21b      	sxth	r3, r3
 801084c:	4313      	orrs	r3, r2
 801084e:	b21b      	sxth	r3, r3
 8010850:	4a20      	ldr	r2, [pc, #128]	@ (80108d4 <check_fs+0xcc>)
 8010852:	4293      	cmp	r3, r2
 8010854:	d001      	beq.n	801085a <check_fs+0x52>
		return 2;
 8010856:	2302      	movs	r3, #2
 8010858:	e038      	b.n	80108cc <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	3336      	adds	r3, #54	@ 0x36
 801085e:	3303      	adds	r3, #3
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	061a      	lsls	r2, r3, #24
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	3336      	adds	r3, #54	@ 0x36
 8010868:	3302      	adds	r3, #2
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	041b      	lsls	r3, r3, #16
 801086e:	431a      	orrs	r2, r3
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	3336      	adds	r3, #54	@ 0x36
 8010874:	3301      	adds	r3, #1
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	021b      	lsls	r3, r3, #8
 801087a:	4313      	orrs	r3, r2
 801087c:	687a      	ldr	r2, [r7, #4]
 801087e:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8010882:	4313      	orrs	r3, r2
 8010884:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010888:	4a13      	ldr	r2, [pc, #76]	@ (80108d8 <check_fs+0xd0>)
 801088a:	4293      	cmp	r3, r2
 801088c:	d101      	bne.n	8010892 <check_fs+0x8a>
		return 0;
 801088e:	2300      	movs	r3, #0
 8010890:	e01c      	b.n	80108cc <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	3352      	adds	r3, #82	@ 0x52
 8010896:	3303      	adds	r3, #3
 8010898:	781b      	ldrb	r3, [r3, #0]
 801089a:	061a      	lsls	r2, r3, #24
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	3352      	adds	r3, #82	@ 0x52
 80108a0:	3302      	adds	r3, #2
 80108a2:	781b      	ldrb	r3, [r3, #0]
 80108a4:	041b      	lsls	r3, r3, #16
 80108a6:	431a      	orrs	r2, r3
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	3352      	adds	r3, #82	@ 0x52
 80108ac:	3301      	adds	r3, #1
 80108ae:	781b      	ldrb	r3, [r3, #0]
 80108b0:	021b      	lsls	r3, r3, #8
 80108b2:	4313      	orrs	r3, r2
 80108b4:	687a      	ldr	r2, [r7, #4]
 80108b6:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 80108ba:	4313      	orrs	r3, r2
 80108bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80108c0:	4a05      	ldr	r2, [pc, #20]	@ (80108d8 <check_fs+0xd0>)
 80108c2:	4293      	cmp	r3, r2
 80108c4:	d101      	bne.n	80108ca <check_fs+0xc2>
		return 0;
 80108c6:	2300      	movs	r3, #0
 80108c8:	e000      	b.n	80108cc <check_fs+0xc4>

	return 1;
 80108ca:	2301      	movs	r3, #1
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3708      	adds	r7, #8
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	ffffaa55 	.word	0xffffaa55
 80108d8:	00544146 	.word	0x00544146

080108dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b096      	sub	sp, #88	@ 0x58
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	60f8      	str	r0, [r7, #12]
 80108e4:	60b9      	str	r1, [r7, #8]
 80108e6:	4613      	mov	r3, r2
 80108e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2200      	movs	r2, #0
 80108ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80108f0:	68b8      	ldr	r0, [r7, #8]
 80108f2:	f7ff ff45 	bl	8010780 <get_ldnumber>
 80108f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80108f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	da01      	bge.n	8010902 <find_volume+0x26>
 80108fe:	230b      	movs	r3, #11
 8010900:	e2b0      	b.n	8010e64 <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010902:	4aa1      	ldr	r2, [pc, #644]	@ (8010b88 <find_volume+0x2ac>)
 8010904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801090a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801090c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801090e:	2b00      	cmp	r3, #0
 8010910:	d101      	bne.n	8010916 <find_volume+0x3a>
 8010912:	230c      	movs	r3, #12
 8010914:	e2a6      	b.n	8010e64 <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 8010916:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010918:	f7fe f9b0 	bl	800ec7c <lock_fs>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d101      	bne.n	8010926 <find_volume+0x4a>
 8010922:	230f      	movs	r3, #15
 8010924:	e29e      	b.n	8010e64 <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801092a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 801092c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801092e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010932:	2b00      	cmp	r3, #0
 8010934:	d01b      	beq.n	801096e <find_volume+0x92>
		stat = disk_status(fs->drv);
 8010936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010938:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801093c:	4618      	mov	r0, r3
 801093e:	f7fe f887 	bl	800ea50 <disk_status>
 8010942:	4603      	mov	r3, r0
 8010944:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010948:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801094c:	f003 0301 	and.w	r3, r3, #1
 8010950:	2b00      	cmp	r3, #0
 8010952:	d10c      	bne.n	801096e <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8010954:	79fb      	ldrb	r3, [r7, #7]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d007      	beq.n	801096a <find_volume+0x8e>
 801095a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801095e:	f003 0304 	and.w	r3, r3, #4
 8010962:	2b00      	cmp	r3, #0
 8010964:	d001      	beq.n	801096a <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 8010966:	230a      	movs	r3, #10
 8010968:	e27c      	b.n	8010e64 <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 801096a:	2300      	movs	r3, #0
 801096c:	e27a      	b.n	8010e64 <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801096e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010970:	2200      	movs	r2, #0
 8010972:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010978:	b2da      	uxtb	r2, r3
 801097a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801097c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010982:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010986:	4618      	mov	r0, r3
 8010988:	f7fe f87c 	bl	800ea84 <disk_initialize>
 801098c:	4603      	mov	r3, r0
 801098e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8010992:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010996:	f003 0301 	and.w	r3, r3, #1
 801099a:	2b00      	cmp	r3, #0
 801099c:	d001      	beq.n	80109a2 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801099e:	2303      	movs	r3, #3
 80109a0:	e260      	b.n	8010e64 <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80109a2:	79fb      	ldrb	r3, [r7, #7]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d007      	beq.n	80109b8 <find_volume+0xdc>
 80109a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80109ac:	f003 0304 	and.w	r3, r3, #4
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d001      	beq.n	80109b8 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 80109b4:	230a      	movs	r3, #10
 80109b6:	e255      	b.n	8010e64 <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80109b8:	2300      	movs	r3, #0
 80109ba:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80109bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80109be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80109c0:	f7ff ff22 	bl	8010808 <check_fs>
 80109c4:	4603      	mov	r3, r0
 80109c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80109ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	d153      	bne.n	8010a7a <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80109d2:	2300      	movs	r3, #0
 80109d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80109d6:	e028      	b.n	8010a2a <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80109d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80109da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109dc:	011b      	lsls	r3, r3, #4
 80109de:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80109e2:	4413      	add	r3, r2
 80109e4:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80109e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109e8:	3304      	adds	r3, #4
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d012      	beq.n	8010a16 <find_volume+0x13a>
 80109f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109f2:	330b      	adds	r3, #11
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	061a      	lsls	r2, r3, #24
 80109f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109fa:	330a      	adds	r3, #10
 80109fc:	781b      	ldrb	r3, [r3, #0]
 80109fe:	041b      	lsls	r3, r3, #16
 8010a00:	431a      	orrs	r2, r3
 8010a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a04:	3309      	adds	r3, #9
 8010a06:	781b      	ldrb	r3, [r3, #0]
 8010a08:	021b      	lsls	r3, r3, #8
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a0e:	3208      	adds	r2, #8
 8010a10:	7812      	ldrb	r2, [r2, #0]
 8010a12:	431a      	orrs	r2, r3
 8010a14:	e000      	b.n	8010a18 <find_volume+0x13c>
 8010a16:	2200      	movs	r2, #0
 8010a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	3358      	adds	r3, #88	@ 0x58
 8010a1e:	443b      	add	r3, r7
 8010a20:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8010a24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a26:	3301      	adds	r3, #1
 8010a28:	643b      	str	r3, [r7, #64]	@ 0x40
 8010a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a2c:	2b03      	cmp	r3, #3
 8010a2e:	d9d3      	bls.n	80109d8 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8010a30:	2300      	movs	r3, #0
 8010a32:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d002      	beq.n	8010a40 <find_volume+0x164>
 8010a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8010a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a42:	009b      	lsls	r3, r3, #2
 8010a44:	3358      	adds	r3, #88	@ 0x58
 8010a46:	443b      	add	r3, r7
 8010a48:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010a4c:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8010a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d005      	beq.n	8010a60 <find_volume+0x184>
 8010a54:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010a56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010a58:	f7ff fed6 	bl	8010808 <check_fs>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	e000      	b.n	8010a62 <find_volume+0x186>
 8010a60:	2302      	movs	r3, #2
 8010a62:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8010a66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d005      	beq.n	8010a7a <find_volume+0x19e>
 8010a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a70:	3301      	adds	r3, #1
 8010a72:	643b      	str	r3, [r7, #64]	@ 0x40
 8010a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a76:	2b03      	cmp	r3, #3
 8010a78:	d9e2      	bls.n	8010a40 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010a7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a7e:	2b03      	cmp	r3, #3
 8010a80:	d101      	bne.n	8010a86 <find_volume+0x1aa>
 8010a82:	2301      	movs	r3, #1
 8010a84:	e1ee      	b.n	8010e64 <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8010a86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d001      	beq.n	8010a92 <find_volume+0x1b6>
 8010a8e:	230d      	movs	r3, #13
 8010a90:	e1e8      	b.n	8010e64 <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a94:	7b1b      	ldrb	r3, [r3, #12]
 8010a96:	021b      	lsls	r3, r3, #8
 8010a98:	b21a      	sxth	r2, r3
 8010a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a9c:	7adb      	ldrb	r3, [r3, #11]
 8010a9e:	b21b      	sxth	r3, r3
 8010aa0:	4313      	orrs	r3, r2
 8010aa2:	b21b      	sxth	r3, r3
 8010aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010aa8:	d001      	beq.n	8010aae <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 8010aaa:	230d      	movs	r3, #13
 8010aac:	e1da      	b.n	8010e64 <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8010aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ab0:	7ddb      	ldrb	r3, [r3, #23]
 8010ab2:	021b      	lsls	r3, r3, #8
 8010ab4:	b21a      	sxth	r2, r3
 8010ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ab8:	7d9b      	ldrb	r3, [r3, #22]
 8010aba:	b21b      	sxth	r3, r3
 8010abc:	4313      	orrs	r3, r2
 8010abe:	b21b      	sxth	r3, r3
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8010ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d112      	bne.n	8010af0 <find_volume+0x214>
 8010aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010acc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8010ad0:	061a      	lsls	r2, r3, #24
 8010ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ad4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8010ad8:	041b      	lsls	r3, r3, #16
 8010ada:	431a      	orrs	r2, r3
 8010adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ade:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8010ae2:	021b      	lsls	r3, r3, #8
 8010ae4:	4313      	orrs	r3, r2
 8010ae6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ae8:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8010aec:	4313      	orrs	r3, r2
 8010aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8010af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010af2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010af4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8010af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010afa:	7c1a      	ldrb	r2, [r3, #16]
 8010afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010afe:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8010b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b04:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8010b08:	2b01      	cmp	r3, #1
 8010b0a:	d006      	beq.n	8010b1a <find_volume+0x23e>
 8010b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b0e:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8010b12:	2b02      	cmp	r3, #2
 8010b14:	d001      	beq.n	8010b1a <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 8010b16:	230d      	movs	r3, #13
 8010b18:	e1a4      	b.n	8010e64 <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8010b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b1c:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8010b20:	461a      	mov	r2, r3
 8010b22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b24:	fb02 f303 	mul.w	r3, r2, r3
 8010b28:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8010b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b2c:	7b5a      	ldrb	r2, [r3, #13]
 8010b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b30:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8010b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b36:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d00a      	beq.n	8010b54 <find_volume+0x278>
 8010b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b40:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8010b44:	461a      	mov	r2, r3
 8010b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b48:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8010b4c:	3b01      	subs	r3, #1
 8010b4e:	4013      	ands	r3, r2
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d001      	beq.n	8010b58 <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 8010b54:	230d      	movs	r3, #13
 8010b56:	e185      	b.n	8010e64 <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8010b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b5a:	7c9b      	ldrb	r3, [r3, #18]
 8010b5c:	021b      	lsls	r3, r3, #8
 8010b5e:	b21a      	sxth	r2, r3
 8010b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b62:	7c5b      	ldrb	r3, [r3, #17]
 8010b64:	b21b      	sxth	r3, r3
 8010b66:	4313      	orrs	r3, r2
 8010b68:	b21b      	sxth	r3, r3
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b6e:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8010b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b74:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8010b78:	f003 030f 	and.w	r3, r3, #15
 8010b7c:	b29b      	uxth	r3, r3
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d004      	beq.n	8010b8c <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 8010b82:	230d      	movs	r3, #13
 8010b84:	e16e      	b.n	8010e64 <find_volume+0x588>
 8010b86:	bf00      	nop
 8010b88:	20001310 	.word	0x20001310

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8010b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b8e:	7d1b      	ldrb	r3, [r3, #20]
 8010b90:	021b      	lsls	r3, r3, #8
 8010b92:	b21a      	sxth	r2, r3
 8010b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b96:	7cdb      	ldrb	r3, [r3, #19]
 8010b98:	b21b      	sxth	r3, r3
 8010b9a:	4313      	orrs	r3, r2
 8010b9c:	b21b      	sxth	r3, r3
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8010ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d112      	bne.n	8010bce <find_volume+0x2f2>
 8010ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010baa:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8010bae:	061a      	lsls	r2, r3, #24
 8010bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bb2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8010bb6:	041b      	lsls	r3, r3, #16
 8010bb8:	431a      	orrs	r2, r3
 8010bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bbc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010bc0:	021b      	lsls	r3, r3, #8
 8010bc2:	4313      	orrs	r3, r2
 8010bc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010bc6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8010bca:	4313      	orrs	r3, r2
 8010bcc:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8010bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bd0:	7bdb      	ldrb	r3, [r3, #15]
 8010bd2:	021b      	lsls	r3, r3, #8
 8010bd4:	b21a      	sxth	r2, r3
 8010bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bd8:	7b9b      	ldrb	r3, [r3, #14]
 8010bda:	b21b      	sxth	r3, r3
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	b21b      	sxth	r3, r3
 8010be0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8010be2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d101      	bne.n	8010bec <find_volume+0x310>
 8010be8:	230d      	movs	r3, #13
 8010bea:	e13b      	b.n	8010e64 <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8010bec:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010bf0:	4413      	add	r3, r2
 8010bf2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010bf4:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 8010bf8:	0912      	lsrs	r2, r2, #4
 8010bfa:	b292      	uxth	r2, r2
 8010bfc:	4413      	add	r3, r2
 8010bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010c00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d201      	bcs.n	8010c0c <find_volume+0x330>
 8010c08:	230d      	movs	r3, #13
 8010c0a:	e12b      	b.n	8010e64 <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8010c0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c10:	1ad3      	subs	r3, r2, r3
 8010c12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c14:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8010c18:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c1c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8010c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d101      	bne.n	8010c28 <find_volume+0x34c>
 8010c24:	230d      	movs	r3, #13
 8010c26:	e11d      	b.n	8010e64 <find_volume+0x588>
	fmt = FS_FAT12;
 8010c28:	2301      	movs	r3, #1
 8010c2a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8010c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c30:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010c34:	4293      	cmp	r3, r2
 8010c36:	d902      	bls.n	8010c3e <find_volume+0x362>
 8010c38:	2302      	movs	r3, #2
 8010c3a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8010c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c40:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010c44:	4293      	cmp	r3, r2
 8010c46:	d902      	bls.n	8010c4e <find_volume+0x372>
 8010c48:	2303      	movs	r3, #3
 8010c4a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8010c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c50:	1c9a      	adds	r2, r3, #2
 8010c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c54:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8010c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c5a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010c5c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8010c60:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010c62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c64:	441a      	add	r2, r3
 8010c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c68:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8010c6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c70:	441a      	add	r2, r3
 8010c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c74:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (fmt == FS_FAT32) {
 8010c78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010c7c:	2b03      	cmp	r3, #3
 8010c7e:	d121      	bne.n	8010cc4 <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8010c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c82:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d001      	beq.n	8010c8e <find_volume+0x3b2>
 8010c8a:	230d      	movs	r3, #13
 8010c8c:	e0ea      	b.n	8010e64 <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8010c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c90:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010c94:	061a      	lsls	r2, r3, #24
 8010c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c98:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8010c9c:	041b      	lsls	r3, r3, #16
 8010c9e:	431a      	orrs	r2, r3
 8010ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010ca6:	021b      	lsls	r3, r3, #8
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010cac:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8010cb0:	431a      	orrs	r2, r3
 8010cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cb4:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8010cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cba:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010cbe:	009b      	lsls	r3, r3, #2
 8010cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010cc2:	e025      	b.n	8010d10 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8010cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cc6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d101      	bne.n	8010cd2 <find_volume+0x3f6>
 8010cce:	230d      	movs	r3, #13
 8010cd0:	e0c8      	b.n	8010e64 <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8010cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cd4:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 8010cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cda:	441a      	add	r2, r3
 8010cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cde:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010ce2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010ce6:	2b02      	cmp	r3, #2
 8010ce8:	d104      	bne.n	8010cf4 <find_volume+0x418>
 8010cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cec:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010cf0:	005b      	lsls	r3, r3, #1
 8010cf2:	e00c      	b.n	8010d0e <find_volume+0x432>
 8010cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cf6:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8010cfa:	4613      	mov	r3, r2
 8010cfc:	005b      	lsls	r3, r3, #1
 8010cfe:	4413      	add	r3, r2
 8010d00:	085a      	lsrs	r2, r3, #1
 8010d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d04:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010d08:	f003 0301 	and.w	r3, r3, #1
 8010d0c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8010d0e:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8010d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d12:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8010d16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d18:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010d1c:	0a5b      	lsrs	r3, r3, #9
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d201      	bcs.n	8010d26 <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 8010d22:	230d      	movs	r3, #13
 8010d24:	e09e      	b.n	8010e64 <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8010d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d28:	f04f 32ff 	mov.w	r2, #4294967295
 8010d2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8010d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d32:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8010d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d38:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8010d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d3e:	2280      	movs	r2, #128	@ 0x80
 8010d40:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8010d44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d48:	2b03      	cmp	r3, #3
 8010d4a:	d177      	bne.n	8010e3c <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8010d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d4e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010d52:	021b      	lsls	r3, r3, #8
 8010d54:	b21a      	sxth	r2, r3
 8010d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010d5c:	b21b      	sxth	r3, r3
 8010d5e:	4313      	orrs	r3, r2
 8010d60:	b21b      	sxth	r3, r3
 8010d62:	2b01      	cmp	r3, #1
 8010d64:	d16a      	bne.n	8010e3c <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 8010d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d68:	3301      	adds	r3, #1
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010d6e:	f7fe f96c 	bl	800f04a <move_window>
 8010d72:	4603      	mov	r3, r0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d161      	bne.n	8010e3c <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 8010d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d82:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8010d86:	021b      	lsls	r3, r3, #8
 8010d88:	b21a      	sxth	r2, r3
 8010d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d8c:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8010d90:	b21b      	sxth	r3, r3
 8010d92:	4313      	orrs	r3, r2
 8010d94:	b21b      	sxth	r3, r3
 8010d96:	4a35      	ldr	r2, [pc, #212]	@ (8010e6c <find_volume+0x590>)
 8010d98:	4293      	cmp	r3, r2
 8010d9a:	d14f      	bne.n	8010e3c <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8010d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d9e:	78db      	ldrb	r3, [r3, #3]
 8010da0:	061a      	lsls	r2, r3, #24
 8010da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010da4:	789b      	ldrb	r3, [r3, #2]
 8010da6:	041b      	lsls	r3, r3, #16
 8010da8:	431a      	orrs	r2, r3
 8010daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dac:	785b      	ldrb	r3, [r3, #1]
 8010dae:	021b      	lsls	r3, r3, #8
 8010db0:	4313      	orrs	r3, r2
 8010db2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010db4:	7812      	ldrb	r2, [r2, #0]
 8010db6:	4313      	orrs	r3, r2
 8010db8:	4a2d      	ldr	r2, [pc, #180]	@ (8010e70 <find_volume+0x594>)
 8010dba:	4293      	cmp	r3, r2
 8010dbc:	d13e      	bne.n	8010e3c <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8010dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc0:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8010dc4:	061a      	lsls	r2, r3, #24
 8010dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc8:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8010dcc:	041b      	lsls	r3, r3, #16
 8010dce:	431a      	orrs	r2, r3
 8010dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dd2:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8010dd6:	021b      	lsls	r3, r3, #8
 8010dd8:	4313      	orrs	r3, r2
 8010dda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ddc:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8010de0:	4313      	orrs	r3, r2
 8010de2:	4a24      	ldr	r2, [pc, #144]	@ (8010e74 <find_volume+0x598>)
 8010de4:	4293      	cmp	r3, r2
 8010de6:	d129      	bne.n	8010e3c <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8010de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dea:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8010dee:	061a      	lsls	r2, r3, #24
 8010df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010df2:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8010df6:	041b      	lsls	r3, r3, #16
 8010df8:	431a      	orrs	r2, r3
 8010dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dfc:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8010e00:	021b      	lsls	r3, r3, #8
 8010e02:	4313      	orrs	r3, r2
 8010e04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010e06:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8010e0a:	431a      	orrs	r2, r3
 8010e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e0e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8010e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e14:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8010e18:	061a      	lsls	r2, r3, #24
 8010e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e1c:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8010e20:	041b      	lsls	r3, r3, #16
 8010e22:	431a      	orrs	r2, r3
 8010e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e26:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8010e2a:	021b      	lsls	r3, r3, #8
 8010e2c:	4313      	orrs	r3, r2
 8010e2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010e30:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8010e34:	431a      	orrs	r2, r3
 8010e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e38:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8010e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e3e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010e42:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8010e46:	4b0c      	ldr	r3, [pc, #48]	@ (8010e78 <find_volume+0x59c>)
 8010e48:	881b      	ldrh	r3, [r3, #0]
 8010e4a:	3301      	adds	r3, #1
 8010e4c:	b29a      	uxth	r2, r3
 8010e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8010e78 <find_volume+0x59c>)
 8010e50:	801a      	strh	r2, [r3, #0]
 8010e52:	4b09      	ldr	r3, [pc, #36]	@ (8010e78 <find_volume+0x59c>)
 8010e54:	881a      	ldrh	r2, [r3, #0]
 8010e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e58:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8010e5c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010e5e:	f7fe f881 	bl	800ef64 <clear_lock>
#endif

	return FR_OK;
 8010e62:	2300      	movs	r3, #0
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	3758      	adds	r7, #88	@ 0x58
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}
 8010e6c:	ffffaa55 	.word	0xffffaa55
 8010e70:	41615252 	.word	0x41615252
 8010e74:	61417272 	.word	0x61417272
 8010e78:	20001314 	.word	0x20001314

08010e7c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b084      	sub	sp, #16
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d022      	beq.n	8010ed4 <validate+0x58>
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d01d      	beq.n	8010ed4 <validate+0x58>
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010e9e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d016      	beq.n	8010ed4 <validate+0x58>
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010eac:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d10c      	bne.n	8010ed4 <validate+0x58>
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010ec0:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7fd fdc3 	bl	800ea50 <disk_status>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	f003 0301 	and.w	r3, r3, #1
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d001      	beq.n	8010ed8 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8010ed4:	2309      	movs	r3, #9
 8010ed6:	e00b      	b.n	8010ef0 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7fd fecc 	bl	800ec7c <lock_fs>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d101      	bne.n	8010eee <validate+0x72>
 8010eea:	230f      	movs	r3, #15
 8010eec:	e000      	b.n	8010ef0 <validate+0x74>

	return FR_OK;
 8010eee:	2300      	movs	r3, #0
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3710      	adds	r7, #16
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b088      	sub	sp, #32
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	4613      	mov	r3, r2
 8010f04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8010f0a:	f107 0310 	add.w	r3, r7, #16
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7ff fc36 	bl	8010780 <get_ldnumber>
 8010f14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010f16:	69fb      	ldr	r3, [r7, #28]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	da01      	bge.n	8010f20 <f_mount+0x28>
 8010f1c:	230b      	movs	r3, #11
 8010f1e:	e04c      	b.n	8010fba <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010f20:	4a28      	ldr	r2, [pc, #160]	@ (8010fc4 <f_mount+0xcc>)
 8010f22:	69fb      	ldr	r3, [r7, #28]
 8010f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010f2a:	69bb      	ldr	r3, [r7, #24]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d011      	beq.n	8010f54 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 8010f30:	69b8      	ldr	r0, [r7, #24]
 8010f32:	f7fe f817 	bl	800ef64 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010f36:	69bb      	ldr	r3, [r7, #24]
 8010f38:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f001 faa1 	bl	8012484 <ff_del_syncobj>
 8010f42:	4603      	mov	r3, r0
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d101      	bne.n	8010f4c <f_mount+0x54>
 8010f48:	2302      	movs	r3, #2
 8010f4a:	e036      	b.n	8010fba <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010f4c:	69bb      	ldr	r3, [r7, #24]
 8010f4e:	2200      	movs	r2, #0
 8010f50:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d011      	beq.n	8010f7e <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010f62:	69fb      	ldr	r3, [r7, #28]
 8010f64:	b2da      	uxtb	r2, r3
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8010f6c:	4619      	mov	r1, r3
 8010f6e:	4610      	mov	r0, r2
 8010f70:	f001 fa68 	bl	8012444 <ff_cre_syncobj>
 8010f74:	4603      	mov	r3, r0
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d101      	bne.n	8010f7e <f_mount+0x86>
 8010f7a:	2302      	movs	r3, #2
 8010f7c:	e01d      	b.n	8010fba <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010f7e:	68fa      	ldr	r2, [r7, #12]
 8010f80:	4910      	ldr	r1, [pc, #64]	@ (8010fc4 <f_mount+0xcc>)
 8010f82:	69fb      	ldr	r3, [r7, #28]
 8010f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d002      	beq.n	8010f94 <f_mount+0x9c>
 8010f8e:	79fb      	ldrb	r3, [r7, #7]
 8010f90:	2b01      	cmp	r3, #1
 8010f92:	d001      	beq.n	8010f98 <f_mount+0xa0>
 8010f94:	2300      	movs	r3, #0
 8010f96:	e010      	b.n	8010fba <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8010f98:	f107 0108 	add.w	r1, r7, #8
 8010f9c:	f107 030c 	add.w	r3, r7, #12
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7ff fc9a 	bl	80108dc <find_volume>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	7dfa      	ldrb	r2, [r7, #23]
 8010fb0:	4611      	mov	r1, r2
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7fd fe71 	bl	800ec9a <unlock_fs>
 8010fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3720      	adds	r7, #32
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	bf00      	nop
 8010fc4:	20001310 	.word	0x20001310

08010fc8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010fd4:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010fd8:	6018      	str	r0, [r3, #0]
 8010fda:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010fde:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8010fe2:	6019      	str	r1, [r3, #0]
 8010fe4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010fe8:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010fec:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8010fee:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010ff2:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d101      	bne.n	8011000 <f_open+0x38>
 8010ffc:	2309      	movs	r3, #9
 8010ffe:	e267      	b.n	80114d0 <f_open+0x508>
	fp->fs = 0;			/* Clear file object */
 8011000:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011004:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	2200      	movs	r2, #0
 801100c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8011010:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011014:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8011018:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 801101c:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 8011020:	7812      	ldrb	r2, [r2, #0]
 8011022:	f002 021f 	and.w	r2, r2, #31
 8011026:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8011028:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801102c:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	f023 0301 	bic.w	r3, r3, #1
 8011036:	b2da      	uxtb	r2, r3
 8011038:	f107 0108 	add.w	r1, r7, #8
 801103c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011040:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8011044:	4618      	mov	r0, r3
 8011046:	f7ff fc49 	bl	80108dc <find_volume>
 801104a:	4603      	mov	r3, r0
 801104c:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8011050:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8011054:	2b00      	cmp	r3, #0
 8011056:	f040 822d 	bne.w	80114b4 <f_open+0x4ec>
		INIT_BUF(dj);
 801105a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801105e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011062:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8011066:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 801106a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801106e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011072:	f107 0214 	add.w	r2, r7, #20
 8011076:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 801107a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801107e:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8011082:	681a      	ldr	r2, [r3, #0]
 8011084:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011088:	4611      	mov	r1, r2
 801108a:	4618      	mov	r0, r3
 801108c:	f7ff fb0a 	bl	80106a4 <follow_path>
 8011090:	4603      	mov	r3, r0
 8011092:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
		dir = dj.dir;
 8011096:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801109a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 801109e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80110a2:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80110a6:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d11b      	bne.n	80110e6 <f_open+0x11e>
			if (!dir)	/* Default directory itself */
 80110ae:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d103      	bne.n	80110be <f_open+0xf6>
				res = FR_INVALID_NAME;
 80110b6:	2306      	movs	r3, #6
 80110b8:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 80110bc:	e013      	b.n	80110e6 <f_open+0x11e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80110be:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80110c2:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	bf8c      	ite	hi
 80110cc:	2301      	movhi	r3, #1
 80110ce:	2300      	movls	r3, #0
 80110d0:	b2db      	uxtb	r3, r3
 80110d2:	461a      	mov	r2, r3
 80110d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80110d8:	4611      	mov	r1, r2
 80110da:	4618      	mov	r0, r3
 80110dc:	f7fd fdfc 	bl	800ecd8 <chk_lock>
 80110e0:	4603      	mov	r3, r0
 80110e2:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80110e6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80110ea:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	f003 031c 	and.w	r3, r3, #28
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	f000 80e6 	beq.w	80112c6 <f_open+0x2fe>
			if (res != FR_OK) {					/* No file, create new */
 80110fa:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d027      	beq.n	8011152 <f_open+0x18a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8011102:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8011106:	2b04      	cmp	r3, #4
 8011108:	d10e      	bne.n	8011128 <f_open+0x160>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801110a:	f7fd fe51 	bl	800edb0 <enq_lock>
 801110e:	4603      	mov	r3, r0
 8011110:	2b00      	cmp	r3, #0
 8011112:	d006      	beq.n	8011122 <f_open+0x15a>
 8011114:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011118:	4618      	mov	r0, r3
 801111a:	f7fe fffd 	bl	8010118 <dir_register>
 801111e:	4603      	mov	r3, r0
 8011120:	e000      	b.n	8011124 <f_open+0x15c>
 8011122:	2312      	movs	r3, #18
 8011124:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011128:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801112c:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8011130:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8011134:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 8011138:	7812      	ldrb	r2, [r2, #0]
 801113a:	f042 0208 	orr.w	r2, r2, #8
 801113e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8011140:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011144:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011148:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801114c:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
 8011150:	e017      	b.n	8011182 <f_open+0x1ba>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011152:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8011156:	330b      	adds	r3, #11
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	f003 0311 	and.w	r3, r3, #17
 801115e:	2b00      	cmp	r3, #0
 8011160:	d003      	beq.n	801116a <f_open+0x1a2>
					res = FR_DENIED;
 8011162:	2307      	movs	r3, #7
 8011164:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 8011168:	e00b      	b.n	8011182 <f_open+0x1ba>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 801116a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801116e:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	f003 0304 	and.w	r3, r3, #4
 8011178:	2b00      	cmp	r3, #0
 801117a:	d002      	beq.n	8011182 <f_open+0x1ba>
						res = FR_EXIST;
 801117c:	2308      	movs	r3, #8
 801117e:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011182:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8011186:	2b00      	cmp	r3, #0
 8011188:	f040 80c1 	bne.w	801130e <f_open+0x346>
 801118c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011190:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	f003 0308 	and.w	r3, r3, #8
 801119a:	2b00      	cmp	r3, #0
 801119c:	f000 80b7 	beq.w	801130e <f_open+0x346>
				dw = GET_FATTIME();				/* Created time */
 80111a0:	f7fd fbd0 	bl	800e944 <get_fattime>
 80111a4:	f8c7 044c 	str.w	r0, [r7, #1100]	@ 0x44c
				ST_DWORD(dir + DIR_CrtTime, dw);
 80111a8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80111ac:	330e      	adds	r3, #14
 80111ae:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 80111b2:	b2d2      	uxtb	r2, r2
 80111b4:	701a      	strb	r2, [r3, #0]
 80111b6:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80111ba:	b29b      	uxth	r3, r3
 80111bc:	0a1b      	lsrs	r3, r3, #8
 80111be:	b29a      	uxth	r2, r3
 80111c0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80111c4:	330f      	adds	r3, #15
 80111c6:	b2d2      	uxtb	r2, r2
 80111c8:	701a      	strb	r2, [r3, #0]
 80111ca:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80111ce:	0c1a      	lsrs	r2, r3, #16
 80111d0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80111d4:	3310      	adds	r3, #16
 80111d6:	b2d2      	uxtb	r2, r2
 80111d8:	701a      	strb	r2, [r3, #0]
 80111da:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80111de:	0e1a      	lsrs	r2, r3, #24
 80111e0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80111e4:	3311      	adds	r3, #17
 80111e6:	b2d2      	uxtb	r2, r2
 80111e8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80111ea:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80111ee:	330b      	adds	r3, #11
 80111f0:	2200      	movs	r2, #0
 80111f2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80111f4:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80111f8:	331c      	adds	r3, #28
 80111fa:	2200      	movs	r2, #0
 80111fc:	701a      	strb	r2, [r3, #0]
 80111fe:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8011202:	331d      	adds	r3, #29
 8011204:	2200      	movs	r2, #0
 8011206:	701a      	strb	r2, [r3, #0]
 8011208:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 801120c:	331e      	adds	r3, #30
 801120e:	2200      	movs	r2, #0
 8011210:	701a      	strb	r2, [r3, #0]
 8011212:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8011216:	331f      	adds	r3, #31
 8011218:	2200      	movs	r2, #0
 801121a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 801121c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011220:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011224:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011228:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 801122c:	4618      	mov	r0, r3
 801122e:	f7fe fccf 	bl	800fbd0 <ld_clust>
 8011232:	f8c7 0448 	str.w	r0, [r7, #1096]	@ 0x448
				st_clust(dir, 0);				/* cluster = 0 */
 8011236:	2100      	movs	r1, #0
 8011238:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 801123c:	f7fe fcf5 	bl	800fc2a <st_clust>
				dj.fs->wflag = 1;
 8011240:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011244:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011248:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801124c:	2201      	movs	r2, #1
 801124e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8011252:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8011256:	2b00      	cmp	r3, #0
 8011258:	d059      	beq.n	801130e <f_open+0x346>
					dw = dj.fs->winsect;
 801125a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801125e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011262:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011266:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 801126a:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
					res = remove_chain(dj.fs, cl);
 801126e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011272:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011276:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801127a:	f8d7 1448 	ldr.w	r1, [r7, #1096]	@ 0x448
 801127e:	4618      	mov	r0, r3
 8011280:	f7fe f9a6 	bl	800f5d0 <remove_chain>
 8011284:	4603      	mov	r3, r0
 8011286:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
					if (res == FR_OK) {
 801128a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 801128e:	2b00      	cmp	r3, #0
 8011290:	d13d      	bne.n	801130e <f_open+0x346>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8011292:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011296:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 801129a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801129e:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 80112a2:	3a01      	subs	r2, #1
 80112a4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
						res = move_window(dj.fs, dw);
 80112a8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80112ac:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80112b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80112b4:	f8d7 144c 	ldr.w	r1, [r7, #1100]	@ 0x44c
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7fd fec6 	bl	800f04a <move_window>
 80112be:	4603      	mov	r3, r0
 80112c0:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 80112c4:	e023      	b.n	801130e <f_open+0x346>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80112c6:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d11f      	bne.n	801130e <f_open+0x346>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80112ce:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80112d2:	330b      	adds	r3, #11
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	f003 0310 	and.w	r3, r3, #16
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d003      	beq.n	80112e6 <f_open+0x31e>
					res = FR_NO_FILE;
 80112de:	2304      	movs	r3, #4
 80112e0:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 80112e4:	e013      	b.n	801130e <f_open+0x346>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80112e6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80112ea:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	f003 0302 	and.w	r3, r3, #2
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d00a      	beq.n	801130e <f_open+0x346>
 80112f8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80112fc:	330b      	adds	r3, #11
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	f003 0301 	and.w	r3, r3, #1
 8011304:	2b00      	cmp	r3, #0
 8011306:	d002      	beq.n	801130e <f_open+0x346>
						res = FR_DENIED;
 8011308:	2307      	movs	r3, #7
 801130a:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
		}
		if (res == FR_OK) {
 801130e:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8011312:	2b00      	cmp	r3, #0
 8011314:	d151      	bne.n	80113ba <f_open+0x3f2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011316:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801131a:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 801131e:	781b      	ldrb	r3, [r3, #0]
 8011320:	f003 0308 	and.w	r3, r3, #8
 8011324:	2b00      	cmp	r3, #0
 8011326:	d00b      	beq.n	8011340 <f_open+0x378>
				mode |= FA__WRITTEN;
 8011328:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801132c:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8011330:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8011334:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 8011338:	7812      	ldrb	r2, [r2, #0]
 801133a:	f042 0220 	orr.w	r2, r2, #32
 801133e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8011340:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011344:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011348:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801134c:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 8011350:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011354:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 801135e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011362:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 801136c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011370:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011374:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	2b01      	cmp	r3, #1
 801137c:	bf8c      	ite	hi
 801137e:	2301      	movhi	r3, #1
 8011380:	2300      	movls	r3, #0
 8011382:	b2db      	uxtb	r3, r3
 8011384:	461a      	mov	r2, r3
 8011386:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801138a:	4611      	mov	r1, r2
 801138c:	4618      	mov	r0, r3
 801138e:	f7fd fd33 	bl	800edf8 <inc_lock>
 8011392:	4602      	mov	r2, r0
 8011394:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011398:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80113a2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80113a6:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d102      	bne.n	80113ba <f_open+0x3f2>
 80113b4:	2302      	movs	r3, #2
 80113b6:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80113ba:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d178      	bne.n	80114b4 <f_open+0x4ec>
			fp->flag = mode;					/* File access mode */
 80113c2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80113c6:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 80113d0:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 80113d4:	7812      	ldrb	r2, [r2, #0]
 80113d6:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 80113da:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80113de:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	2200      	movs	r2, #0
 80113e6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80113ea:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80113ee:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80113f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80113f6:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7fe fbe8 	bl	800fbd0 <ld_clust>
 8011400:	4602      	mov	r2, r0
 8011402:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011406:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8011410:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8011414:	331f      	adds	r3, #31
 8011416:	781b      	ldrb	r3, [r3, #0]
 8011418:	061a      	lsls	r2, r3, #24
 801141a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 801141e:	331e      	adds	r3, #30
 8011420:	781b      	ldrb	r3, [r3, #0]
 8011422:	041b      	lsls	r3, r3, #16
 8011424:	431a      	orrs	r2, r3
 8011426:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 801142a:	331d      	adds	r3, #29
 801142c:	781b      	ldrb	r3, [r3, #0]
 801142e:	021b      	lsls	r3, r3, #8
 8011430:	4313      	orrs	r3, r2
 8011432:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8011436:	321c      	adds	r2, #28
 8011438:	7812      	ldrb	r2, [r2, #0]
 801143a:	431a      	orrs	r2, r3
 801143c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011440:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 801144a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801144e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	2200      	movs	r2, #0
 8011456:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 801145a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801145e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	2200      	movs	r2, #0
 8011466:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 801146a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801146e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	2200      	movs	r2, #0
 8011476:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 801147a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801147e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011482:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8011486:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801148a:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 8011494:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011498:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80114a2:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80114a6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80114aa:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80114b4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80114b8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80114bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80114c0:	f897 2457 	ldrb.w	r2, [r7, #1111]	@ 0x457
 80114c4:	4611      	mov	r1, r2
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fd fbe7 	bl	800ec9a <unlock_fs>
 80114cc:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	f507 678b 	add.w	r7, r7, #1112	@ 0x458
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}

080114da <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80114da:	b580      	push	{r7, lr}
 80114dc:	b08a      	sub	sp, #40	@ 0x28
 80114de:	af00      	add	r7, sp, #0
 80114e0:	60f8      	str	r0, [r7, #12]
 80114e2:	60b9      	str	r1, [r7, #8]
 80114e4:	607a      	str	r2, [r7, #4]
 80114e6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	2200      	movs	r2, #0
 80114f0:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80114f2:	68f8      	ldr	r0, [r7, #12]
 80114f4:	f7ff fcc2 	bl	8010e7c <validate>
 80114f8:	4603      	mov	r3, r0
 80114fa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80114fc:	7dfb      	ldrb	r3, [r7, #23]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d009      	beq.n	8011516 <f_write+0x3c>
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011508:	7dfa      	ldrb	r2, [r7, #23]
 801150a:	4611      	mov	r1, r2
 801150c:	4618      	mov	r0, r3
 801150e:	f7fd fbc4 	bl	800ec9a <unlock_fs>
 8011512:	7dfb      	ldrb	r3, [r7, #23]
 8011514:	e1d4      	b.n	80118c0 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 801151c:	2b00      	cmp	r3, #0
 801151e:	d00d      	beq.n	801153c <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 801152c:	4619      	mov	r1, r3
 801152e:	4610      	mov	r0, r2
 8011530:	f7fd fbb3 	bl	800ec9a <unlock_fs>
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 801153a:	e1c1      	b.n	80118c0 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011542:	f003 0302 	and.w	r3, r3, #2
 8011546:	2b00      	cmp	r3, #0
 8011548:	d108      	bne.n	801155c <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011550:	2107      	movs	r1, #7
 8011552:	4618      	mov	r0, r3
 8011554:	f7fd fba1 	bl	800ec9a <unlock_fs>
 8011558:	2307      	movs	r3, #7
 801155a:	e1b1      	b.n	80118c0 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	441a      	add	r2, r3
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 801156c:	429a      	cmp	r2, r3
 801156e:	f080 8182 	bcs.w	8011876 <f_write+0x39c>
 8011572:	2300      	movs	r3, #0
 8011574:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8011576:	e17e      	b.n	8011876 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 801157e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011582:	2b00      	cmp	r3, #0
 8011584:	f040 813e 	bne.w	8011804 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 801158e:	0a5b      	lsrs	r3, r3, #9
 8011590:	b2da      	uxtb	r2, r3
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011598:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 801159c:	3b01      	subs	r3, #1
 801159e:	b2db      	uxtb	r3, r3
 80115a0:	4013      	ands	r3, r2
 80115a2:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80115a4:	7dbb      	ldrb	r3, [r7, #22]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d15f      	bne.n	801166a <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d10f      	bne.n	80115d4 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80115ba:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80115bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d121      	bne.n	8011606 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80115c8:	2100      	movs	r1, #0
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7fe f85a 	bl	800f684 <create_chain>
 80115d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80115d2:	e018      	b.n	8011606 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d008      	beq.n	80115f0 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80115e4:	4619      	mov	r1, r3
 80115e6:	68f8      	ldr	r0, [r7, #12]
 80115e8:	f7fe f8e9 	bl	800f7be <clmt_clust>
 80115ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80115ee:	e00a      	b.n	8011606 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80115fc:	4619      	mov	r1, r3
 80115fe:	4610      	mov	r0, r2
 8011600:	f7fe f840 	bl	800f684 <create_chain>
 8011604:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011608:	2b00      	cmp	r3, #0
 801160a:	f000 8139 	beq.w	8011880 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 801160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011610:	2b01      	cmp	r3, #1
 8011612:	d10c      	bne.n	801162e <f_write+0x154>
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	2202      	movs	r2, #2
 8011618:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011622:	2102      	movs	r1, #2
 8011624:	4618      	mov	r0, r3
 8011626:	f7fd fb38 	bl	800ec9a <unlock_fs>
 801162a:	2302      	movs	r3, #2
 801162c:	e148      	b.n	80118c0 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011634:	d10c      	bne.n	8011650 <f_write+0x176>
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	2201      	movs	r2, #1
 801163a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011644:	2101      	movs	r1, #1
 8011646:	4618      	mov	r0, r3
 8011648:	f7fd fb27 	bl	800ec9a <unlock_fs>
 801164c:	2301      	movs	r3, #1
 801164e:	e137      	b.n	80118c0 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011654:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801165e:	2b00      	cmp	r3, #0
 8011660:	d103      	bne.n	801166a <f_write+0x190>
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011666:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011674:	2b00      	cmp	r3, #0
 8011676:	d024      	beq.n	80116c2 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801167e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8011682:	68f9      	ldr	r1, [r7, #12]
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 801168a:	2301      	movs	r3, #1
 801168c:	f7fd fa40 	bl	800eb10 <disk_write>
 8011690:	4603      	mov	r3, r0
 8011692:	2b00      	cmp	r3, #0
 8011694:	d00c      	beq.n	80116b0 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	2201      	movs	r2, #1
 801169a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80116a4:	2101      	movs	r1, #1
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7fd faf7 	bl	800ec9a <unlock_fs>
 80116ac:	2301      	movs	r3, #1
 80116ae:	e107      	b.n	80118c0 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80116b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80116ba:	b2da      	uxtb	r2, r3
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80116ce:	4619      	mov	r1, r3
 80116d0:	4610      	mov	r0, r2
 80116d2:	f7fd fd95 	bl	800f200 <clust2sect>
 80116d6:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d10c      	bne.n	80116f8 <f_write+0x21e>
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2202      	movs	r2, #2
 80116e2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80116ec:	2102      	movs	r1, #2
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7fd fad3 	bl	800ec9a <unlock_fs>
 80116f4:	2302      	movs	r3, #2
 80116f6:	e0e3      	b.n	80118c0 <f_write+0x3e6>
			sect += csect;
 80116f8:	7dbb      	ldrb	r3, [r7, #22]
 80116fa:	693a      	ldr	r2, [r7, #16]
 80116fc:	4413      	add	r3, r2
 80116fe:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	0a5b      	lsrs	r3, r3, #9
 8011704:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011706:	69fb      	ldr	r3, [r7, #28]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d04f      	beq.n	80117ac <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 801170c:	7dba      	ldrb	r2, [r7, #22]
 801170e:	69fb      	ldr	r3, [r7, #28]
 8011710:	4413      	add	r3, r2
 8011712:	68fa      	ldr	r2, [r7, #12]
 8011714:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8011718:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 801171c:	4293      	cmp	r3, r2
 801171e:	d908      	bls.n	8011732 <f_write+0x258>
					cc = fp->fs->csize - csect;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011726:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 801172a:	461a      	mov	r2, r3
 801172c:	7dbb      	ldrb	r3, [r7, #22]
 801172e:	1ad3      	subs	r3, r2, r3
 8011730:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011738:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 801173c:	69fb      	ldr	r3, [r7, #28]
 801173e:	693a      	ldr	r2, [r7, #16]
 8011740:	69b9      	ldr	r1, [r7, #24]
 8011742:	f7fd f9e5 	bl	800eb10 <disk_write>
 8011746:	4603      	mov	r3, r0
 8011748:	2b00      	cmp	r3, #0
 801174a:	d00c      	beq.n	8011766 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2201      	movs	r2, #1
 8011750:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801175a:	2101      	movs	r1, #1
 801175c:	4618      	mov	r0, r3
 801175e:	f7fd fa9c 	bl	800ec9a <unlock_fs>
 8011762:	2301      	movs	r3, #1
 8011764:	e0ac      	b.n	80118c0 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	1ad3      	subs	r3, r2, r3
 8011770:	69fa      	ldr	r2, [r7, #28]
 8011772:	429a      	cmp	r2, r3
 8011774:	d916      	bls.n	80117a4 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8011776:	68f8      	ldr	r0, [r7, #12]
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 801177e:	693b      	ldr	r3, [r7, #16]
 8011780:	1ad3      	subs	r3, r2, r3
 8011782:	025b      	lsls	r3, r3, #9
 8011784:	69ba      	ldr	r2, [r7, #24]
 8011786:	4413      	add	r3, r2
 8011788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801178c:	4619      	mov	r1, r3
 801178e:	f7fd f9fd 	bl	800eb8c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011798:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801179c:	b2da      	uxtb	r2, r3
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80117a4:	69fb      	ldr	r3, [r7, #28]
 80117a6:	025b      	lsls	r3, r3, #9
 80117a8:	623b      	str	r3, [r7, #32]
				continue;
 80117aa:	e04e      	b.n	801184a <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80117b2:	693a      	ldr	r2, [r7, #16]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d021      	beq.n	80117fc <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80117c4:	429a      	cmp	r2, r3
 80117c6:	d219      	bcs.n	80117fc <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80117ce:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80117d2:	68f9      	ldr	r1, [r7, #12]
 80117d4:	2301      	movs	r3, #1
 80117d6:	693a      	ldr	r2, [r7, #16]
 80117d8:	f7fd f97a 	bl	800ead0 <disk_read>
 80117dc:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d00c      	beq.n	80117fc <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	2201      	movs	r2, #1
 80117e6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80117f0:	2101      	movs	r1, #1
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7fd fa51 	bl	800ec9a <unlock_fs>
 80117f8:	2301      	movs	r3, #1
 80117fa:	e061      	b.n	80118c0 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	693a      	ldr	r2, [r7, #16]
 8011800:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 801180a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801180e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011812:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8011814:	6a3a      	ldr	r2, [r7, #32]
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	429a      	cmp	r2, r3
 801181a:	d901      	bls.n	8011820 <f_write+0x346>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801182a:	68fa      	ldr	r2, [r7, #12]
 801182c:	4413      	add	r3, r2
 801182e:	6a3a      	ldr	r2, [r7, #32]
 8011830:	69b9      	ldr	r1, [r7, #24]
 8011832:	4618      	mov	r0, r3
 8011834:	f7fd f9aa 	bl	800eb8c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801183e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011842:	b2da      	uxtb	r2, r3
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 801184a:	69ba      	ldr	r2, [r7, #24]
 801184c:	6a3b      	ldr	r3, [r7, #32]
 801184e:	4413      	add	r3, r2
 8011850:	61bb      	str	r3, [r7, #24]
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011858:	6a3b      	ldr	r3, [r7, #32]
 801185a:	441a      	add	r2, r3
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	681a      	ldr	r2, [r3, #0]
 8011866:	6a3b      	ldr	r3, [r7, #32]
 8011868:	441a      	add	r2, r3
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	601a      	str	r2, [r3, #0]
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	6a3b      	ldr	r3, [r7, #32]
 8011872:	1ad3      	subs	r3, r2, r3
 8011874:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2b00      	cmp	r3, #0
 801187a:	f47f ae7d 	bne.w	8011578 <f_write+0x9e>
 801187e:	e000      	b.n	8011882 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011880:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801188e:	429a      	cmp	r2, r3
 8011890:	d905      	bls.n	801189e <f_write+0x3c4>
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80118a4:	f043 0320 	orr.w	r3, r3, #32
 80118a8:	b2da      	uxtb	r2, r3
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80118b6:	2100      	movs	r1, #0
 80118b8:	4618      	mov	r0, r3
 80118ba:	f7fd f9ee 	bl	800ec9a <unlock_fs>
 80118be:	2300      	movs	r3, #0
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3728      	adds	r7, #40	@ 0x28
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}

080118c8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b086      	sub	sp, #24
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f7ff fad3 	bl	8010e7c <validate>
 80118d6:	4603      	mov	r3, r0
 80118d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80118da:	7dfb      	ldrb	r3, [r7, #23]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	f040 80af 	bne.w	8011a40 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80118e8:	f003 0320 	and.w	r3, r3, #32
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	f000 80a7 	beq.w	8011a40 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80118f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d020      	beq.n	8011942 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011906:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 801190a:	6879      	ldr	r1, [r7, #4]
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8011912:	2301      	movs	r3, #1
 8011914:	f7fd f8fc 	bl	800eb10 <disk_write>
 8011918:	4603      	mov	r3, r0
 801191a:	2b00      	cmp	r3, #0
 801191c:	d008      	beq.n	8011930 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011924:	2101      	movs	r1, #1
 8011926:	4618      	mov	r0, r3
 8011928:	f7fd f9b7 	bl	800ec9a <unlock_fs>
 801192c:	2301      	movs	r3, #1
 801192e:	e090      	b.n	8011a52 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011936:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801193a:	b2da      	uxtb	r2, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 801194e:	4619      	mov	r1, r3
 8011950:	4610      	mov	r0, r2
 8011952:	f7fd fb7a 	bl	800f04a <move_window>
 8011956:	4603      	mov	r3, r0
 8011958:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 801195a:	7dfb      	ldrb	r3, [r7, #23]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d16f      	bne.n	8011a40 <f_sync+0x178>
				dir = fp->dir_ptr;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8011966:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8011968:	693b      	ldr	r3, [r7, #16]
 801196a:	330b      	adds	r3, #11
 801196c:	781a      	ldrb	r2, [r3, #0]
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	330b      	adds	r3, #11
 8011972:	f042 0220 	orr.w	r2, r2, #32
 8011976:	b2d2      	uxtb	r2, r2
 8011978:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8011980:	693b      	ldr	r3, [r7, #16]
 8011982:	331c      	adds	r3, #28
 8011984:	b2d2      	uxtb	r2, r2
 8011986:	701a      	strb	r2, [r3, #0]
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801198e:	b29b      	uxth	r3, r3
 8011990:	0a1b      	lsrs	r3, r3, #8
 8011992:	b29a      	uxth	r2, r3
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	331d      	adds	r3, #29
 8011998:	b2d2      	uxtb	r2, r2
 801199a:	701a      	strb	r2, [r3, #0]
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80119a2:	0c1a      	lsrs	r2, r3, #16
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	331e      	adds	r3, #30
 80119a8:	b2d2      	uxtb	r2, r2
 80119aa:	701a      	strb	r2, [r3, #0]
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80119b2:	0e1a      	lsrs	r2, r3, #24
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	331f      	adds	r3, #31
 80119b8:	b2d2      	uxtb	r2, r2
 80119ba:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80119c2:	4619      	mov	r1, r3
 80119c4:	6938      	ldr	r0, [r7, #16]
 80119c6:	f7fe f930 	bl	800fc2a <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80119ca:	f7fc ffbb 	bl	800e944 <get_fattime>
 80119ce:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	3316      	adds	r3, #22
 80119d4:	68fa      	ldr	r2, [r7, #12]
 80119d6:	b2d2      	uxtb	r2, r2
 80119d8:	701a      	strb	r2, [r3, #0]
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	b29b      	uxth	r3, r3
 80119de:	0a1b      	lsrs	r3, r3, #8
 80119e0:	b29a      	uxth	r2, r3
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	3317      	adds	r3, #23
 80119e6:	b2d2      	uxtb	r2, r2
 80119e8:	701a      	strb	r2, [r3, #0]
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	0c1a      	lsrs	r2, r3, #16
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	3318      	adds	r3, #24
 80119f2:	b2d2      	uxtb	r2, r2
 80119f4:	701a      	strb	r2, [r3, #0]
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	0e1a      	lsrs	r2, r3, #24
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	3319      	adds	r3, #25
 80119fe:	b2d2      	uxtb	r2, r2
 8011a00:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8011a02:	693b      	ldr	r3, [r7, #16]
 8011a04:	3312      	adds	r3, #18
 8011a06:	2200      	movs	r2, #0
 8011a08:	701a      	strb	r2, [r3, #0]
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	3313      	adds	r3, #19
 8011a0e:	2200      	movs	r2, #0
 8011a10:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011a18:	f023 0320 	bic.w	r3, r3, #32
 8011a1c:	b2da      	uxtb	r2, r3
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7fd fb35 	bl	800f0a6 <sync_fs>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011a46:	7dfa      	ldrb	r2, [r7, #23]
 8011a48:	4611      	mov	r1, r2
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fd f925 	bl	800ec9a <unlock_fs>
 8011a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3718      	adds	r7, #24
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}

08011a5a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8011a5a:	b580      	push	{r7, lr}
 8011a5c:	b090      	sub	sp, #64	@ 0x40
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	6078      	str	r0, [r7, #4]
 8011a62:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f7ff fa09 	bl	8010e7c <validate>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8011a70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d00b      	beq.n	8011a90 <f_lseek+0x36>
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011a7e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011a82:	4611      	mov	r1, r2
 8011a84:	4618      	mov	r0, r3
 8011a86:	f7fd f908 	bl	800ec9a <unlock_fs>
 8011a8a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011a8e:	e2af      	b.n	8011ff0 <f_lseek+0x596>
	if (fp->err)						/* Check error */
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d00d      	beq.n	8011ab6 <f_lseek+0x5c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8011aa6:	4619      	mov	r1, r3
 8011aa8:	4610      	mov	r0, r2
 8011aaa:	f7fd f8f6 	bl	800ec9a <unlock_fs>
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8011ab4:	e29c      	b.n	8011ff0 <f_lseek+0x596>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	f000 8115 	beq.w	8011cec <f_lseek+0x292>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ac8:	d172      	bne.n	8011bb0 <f_lseek+0x156>
			tbl = fp->cltbl;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8011ad0:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ad4:	1d1a      	adds	r2, r3, #4
 8011ad6:	627a      	str	r2, [r7, #36]	@ 0x24
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	617b      	str	r3, [r7, #20]
 8011adc:	2302      	movs	r3, #2
 8011ade:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011ae6:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8011ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d04f      	beq.n	8011b8e <f_lseek+0x134>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011af0:	613b      	str	r3, [r7, #16]
 8011af2:	2300      	movs	r3, #0
 8011af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011af8:	3302      	adds	r3, #2
 8011afa:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8011afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011afe:	60fb      	str	r3, [r7, #12]
 8011b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b02:	3301      	adds	r3, #1
 8011b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011b0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7fd fb97 	bl	800f242 <get_fat>
 8011b14:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8011b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b18:	2b01      	cmp	r3, #1
 8011b1a:	d80c      	bhi.n	8011b36 <f_lseek+0xdc>
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2202      	movs	r2, #2
 8011b20:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011b2a:	2102      	movs	r1, #2
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f7fd f8b4 	bl	800ec9a <unlock_fs>
 8011b32:	2302      	movs	r3, #2
 8011b34:	e25c      	b.n	8011ff0 <f_lseek+0x596>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b3c:	d10c      	bne.n	8011b58 <f_lseek+0xfe>
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2201      	movs	r2, #1
 8011b42:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011b4c:	2101      	movs	r1, #1
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fd f8a3 	bl	800ec9a <unlock_fs>
 8011b54:	2301      	movs	r3, #1
 8011b56:	e24b      	b.n	8011ff0 <f_lseek+0x596>
					} while (cl == pcl + 1);
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d0cc      	beq.n	8011afc <f_lseek+0xa2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011b62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d809      	bhi.n	8011b7e <f_lseek+0x124>
						*tbl++ = ncl; *tbl++ = tcl;
 8011b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b6c:	1d1a      	adds	r2, r3, #4
 8011b6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8011b70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b72:	601a      	str	r2, [r3, #0]
 8011b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b76:	1d1a      	adds	r2, r3, #4
 8011b78:	627a      	str	r2, [r7, #36]	@ 0x24
 8011b7a:	693a      	ldr	r2, [r7, #16]
 8011b7c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011b84:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d3af      	bcc.n	8011aee <f_lseek+0x94>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8011b94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b96:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8011b98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b9a:	697b      	ldr	r3, [r7, #20]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d803      	bhi.n	8011ba8 <f_lseek+0x14e>
				*tbl = 0;		/* Terminate table */
 8011ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	601a      	str	r2, [r3, #0]
 8011ba6:	e218      	b.n	8011fda <f_lseek+0x580>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011ba8:	2311      	movs	r3, #17
 8011baa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011bae:	e214      	b.n	8011fda <f_lseek+0x580>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011bb6:	683a      	ldr	r2, [r7, #0]
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d903      	bls.n	8011bc4 <f_lseek+0x16a>
				ofs = fp->fsize;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011bc2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	683a      	ldr	r2, [r7, #0]
 8011bc8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			if (ofs) {
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	f000 8203 	beq.w	8011fda <f_lseek+0x580>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	3b01      	subs	r3, #1
 8011bd8:	4619      	mov	r1, r3
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f7fd fdef 	bl	800f7be <clmt_clust>
 8011be0:	4602      	mov	r2, r0
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011bf4:	4619      	mov	r1, r3
 8011bf6:	4610      	mov	r0, r2
 8011bf8:	f7fd fb02 	bl	800f200 <clust2sect>
 8011bfc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8011bfe:	69bb      	ldr	r3, [r7, #24]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d10c      	bne.n	8011c1e <f_lseek+0x1c4>
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2202      	movs	r2, #2
 8011c08:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011c12:	2102      	movs	r1, #2
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7fd f840 	bl	800ec9a <unlock_fs>
 8011c1a:	2302      	movs	r3, #2
 8011c1c:	e1e8      	b.n	8011ff0 <f_lseek+0x596>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	3b01      	subs	r3, #1
 8011c22:	0a5b      	lsrs	r3, r3, #9
 8011c24:	687a      	ldr	r2, [r7, #4]
 8011c26:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8011c2a:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8011c2e:	3a01      	subs	r2, #1
 8011c30:	4013      	ands	r3, r2
 8011c32:	69ba      	ldr	r2, [r7, #24]
 8011c34:	4413      	add	r3, r2
 8011c36:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	f000 81c9 	beq.w	8011fda <f_lseek+0x580>
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011c4e:	69ba      	ldr	r2, [r7, #24]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	f000 81c2 	beq.w	8011fda <f_lseek+0x580>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d024      	beq.n	8011cae <f_lseek+0x254>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011c6a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8011c6e:	6879      	ldr	r1, [r7, #4]
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8011c76:	2301      	movs	r3, #1
 8011c78:	f7fc ff4a 	bl	800eb10 <disk_write>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d00c      	beq.n	8011c9c <f_lseek+0x242>
							ABORT(fp->fs, FR_DISK_ERR);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2201      	movs	r2, #1
 8011c86:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011c90:	2101      	movs	r1, #1
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7fd f801 	bl	800ec9a <unlock_fs>
 8011c98:	2301      	movs	r3, #1
 8011c9a:	e1a9      	b.n	8011ff0 <f_lseek+0x596>
						fp->flag &= ~FA__DIRTY;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011ca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011ca6:	b2da      	uxtb	r2, r3
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011cb4:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8011cb8:	6879      	ldr	r1, [r7, #4]
 8011cba:	2301      	movs	r3, #1
 8011cbc:	69ba      	ldr	r2, [r7, #24]
 8011cbe:	f7fc ff07 	bl	800ead0 <disk_read>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d00c      	beq.n	8011ce2 <f_lseek+0x288>
						ABORT(fp->fs, FR_DISK_ERR);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2201      	movs	r2, #1
 8011ccc:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011cd6:	2101      	movs	r1, #1
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7fc ffde 	bl	800ec9a <unlock_fs>
 8011cde:	2301      	movs	r3, #1
 8011ce0:	e186      	b.n	8011ff0 <f_lseek+0x596>
#endif
					fp->dsect = dsc;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	69ba      	ldr	r2, [r7, #24]
 8011ce6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 8011cea:	e176      	b.n	8011fda <f_lseek+0x580>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011cf2:	683a      	ldr	r2, [r7, #0]
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d90a      	bls.n	8011d0e <f_lseek+0x2b4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011cfe:	f003 0302 	and.w	r3, r3, #2
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d103      	bne.n	8011d0e <f_lseek+0x2b4>
#endif
			) ofs = fp->fsize;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011d0c:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011d14:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011d16:	2300      	movs	r3, #0
 8011d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d1e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
		if (ofs) {
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	f000 80ea 	beq.w	8011efe <f_lseek+0x4a4>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011d30:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8011d34:	025b      	lsls	r3, r3, #9
 8011d36:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011d38:	6a3b      	ldr	r3, [r7, #32]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d01e      	beq.n	8011d7c <f_lseek+0x322>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	1e5a      	subs	r2, r3, #1
 8011d42:	69fb      	ldr	r3, [r7, #28]
 8011d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8011d48:	6a3b      	ldr	r3, [r7, #32]
 8011d4a:	1e59      	subs	r1, r3, #1
 8011d4c:	69fb      	ldr	r3, [r7, #28]
 8011d4e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011d52:	429a      	cmp	r2, r3
 8011d54:	d312      	bcc.n	8011d7c <f_lseek+0x322>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8011d56:	6a3b      	ldr	r3, [r7, #32]
 8011d58:	1e5a      	subs	r2, r3, #1
 8011d5a:	69fb      	ldr	r3, [r7, #28]
 8011d5c:	425b      	negs	r3, r3
 8011d5e:	401a      	ands	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				ofs -= fp->fptr;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011d6c:	683a      	ldr	r2, [r7, #0]
 8011d6e:	1ad3      	subs	r3, r2, r3
 8011d70:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011d78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011d7a:	e037      	b.n	8011dec <f_lseek+0x392>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011d82:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d12c      	bne.n	8011de4 <f_lseek+0x38a>
					clst = create_chain(fp->fs, 0);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011d90:	2100      	movs	r1, #0
 8011d92:	4618      	mov	r0, r3
 8011d94:	f7fd fc76 	bl	800f684 <create_chain>
 8011d98:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8011d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d9c:	2b01      	cmp	r3, #1
 8011d9e:	d10c      	bne.n	8011dba <f_lseek+0x360>
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2202      	movs	r2, #2
 8011da4:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011dae:	2102      	movs	r1, #2
 8011db0:	4618      	mov	r0, r3
 8011db2:	f7fc ff72 	bl	800ec9a <unlock_fs>
 8011db6:	2302      	movs	r3, #2
 8011db8:	e11a      	b.n	8011ff0 <f_lseek+0x596>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dc0:	d10c      	bne.n	8011ddc <f_lseek+0x382>
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2201      	movs	r2, #1
 8011dc6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011dd0:	2101      	movs	r1, #1
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7fc ff61 	bl	800ec9a <unlock_fs>
 8011dd8:	2301      	movs	r3, #1
 8011dda:	e109      	b.n	8011ff0 <f_lseek+0x596>
					fp->sclust = clst;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011de0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				}
#endif
				fp->clust = clst;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011de8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			}
			if (clst != 0) {
 8011dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	f000 8085 	beq.w	8011efe <f_lseek+0x4a4>
				while (ofs > bcs) {						/* Cluster following loop */
 8011df4:	e055      	b.n	8011ea2 <f_lseek+0x448>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011dfc:	f003 0302 	and.w	r3, r3, #2
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d00d      	beq.n	8011e20 <f_lseek+0x3c6>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011e0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7fd fc39 	bl	800f684 <create_chain>
 8011e12:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8011e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d10a      	bne.n	8011e30 <f_lseek+0x3d6>
							ofs = bcs; break;
 8011e1a:	69fb      	ldr	r3, [r7, #28]
 8011e1c:	603b      	str	r3, [r7, #0]
 8011e1e:	e044      	b.n	8011eaa <f_lseek+0x450>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011e26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7fd fa0a 	bl	800f242 <get_fat>
 8011e2e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e36:	d10c      	bne.n	8011e52 <f_lseek+0x3f8>
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2201      	movs	r2, #1
 8011e3c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011e46:	2101      	movs	r1, #1
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f7fc ff26 	bl	800ec9a <unlock_fs>
 8011e4e:	2301      	movs	r3, #1
 8011e50:	e0ce      	b.n	8011ff0 <f_lseek+0x596>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8011e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e54:	2b01      	cmp	r3, #1
 8011e56:	d907      	bls.n	8011e68 <f_lseek+0x40e>
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011e5e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011e62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011e64:	429a      	cmp	r2, r3
 8011e66:	d30c      	bcc.n	8011e82 <f_lseek+0x428>
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2202      	movs	r2, #2
 8011e6c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011e76:	2102      	movs	r1, #2
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f7fc ff0e 	bl	800ec9a <unlock_fs>
 8011e7e:	2302      	movs	r3, #2
 8011e80:	e0b6      	b.n	8011ff0 <f_lseek+0x596>
					fp->clust = clst;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011e86:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
					fp->fptr += bcs;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011e90:	69fb      	ldr	r3, [r7, #28]
 8011e92:	441a      	add	r2, r3
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
					ofs -= bcs;
 8011e9a:	683a      	ldr	r2, [r7, #0]
 8011e9c:	69fb      	ldr	r3, [r7, #28]
 8011e9e:	1ad3      	subs	r3, r2, r3
 8011ea0:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8011ea2:	683a      	ldr	r2, [r7, #0]
 8011ea4:	69fb      	ldr	r3, [r7, #28]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d8a5      	bhi.n	8011df6 <f_lseek+0x39c>
				}
				fp->fptr += ofs;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	441a      	add	r2, r3
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				if (ofs % SS(fp->fs)) {
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d01c      	beq.n	8011efe <f_lseek+0x4a4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011eca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7fd f997 	bl	800f200 <clust2sect>
 8011ed2:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8011ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d10c      	bne.n	8011ef4 <f_lseek+0x49a>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2202      	movs	r2, #2
 8011ede:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011ee8:	2102      	movs	r1, #2
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7fc fed5 	bl	800ec9a <unlock_fs>
 8011ef0:	2302      	movs	r3, #2
 8011ef2:	e07d      	b.n	8011ff0 <f_lseek+0x596>
					nsect += ofs / SS(fp->fs);
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	0a5b      	lsrs	r3, r3, #9
 8011ef8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011efa:	4413      	add	r3, r2
 8011efc:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d04f      	beq.n	8011fac <f_lseek+0x552>
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011f12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d049      	beq.n	8011fac <f_lseek+0x552>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d024      	beq.n	8011f70 <f_lseek+0x516>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011f2c:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8011f30:	6879      	ldr	r1, [r7, #4]
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8011f38:	2301      	movs	r3, #1
 8011f3a:	f7fc fde9 	bl	800eb10 <disk_write>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d00c      	beq.n	8011f5e <f_lseek+0x504>
					ABORT(fp->fs, FR_DISK_ERR);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2201      	movs	r2, #1
 8011f48:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011f52:	2101      	movs	r1, #1
 8011f54:	4618      	mov	r0, r3
 8011f56:	f7fc fea0 	bl	800ec9a <unlock_fs>
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	e048      	b.n	8011ff0 <f_lseek+0x596>
				fp->flag &= ~FA__DIRTY;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011f68:	b2da      	uxtb	r2, r3
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011f76:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8011f7a:	6879      	ldr	r1, [r7, #4]
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f80:	f7fc fda6 	bl	800ead0 <disk_read>
 8011f84:	4603      	mov	r3, r0
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d00c      	beq.n	8011fa4 <f_lseek+0x54a>
				ABORT(fp->fs, FR_DISK_ERR);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	2201      	movs	r2, #1
 8011f8e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011f98:	2101      	movs	r1, #1
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f7fc fe7d 	bl	800ec9a <unlock_fs>
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	e025      	b.n	8011ff0 <f_lseek+0x596>
#endif
			fp->dsect = nsect;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011fa8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d90e      	bls.n	8011fda <f_lseek+0x580>
			fp->fsize = fp->fptr;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->flag |= FA__WRITTEN;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011fce:	f043 0320 	orr.w	r3, r3, #32
 8011fd2:	b2da      	uxtb	r2, r3
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011fe0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011fe4:	4611      	mov	r1, r2
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f7fc fe57 	bl	800ec9a <unlock_fs>
 8011fec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	3740      	adds	r7, #64	@ 0x40
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}

08011ff8 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b084      	sub	sp, #16
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
 8012000:	460b      	mov	r3, r1
 8012002:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8012004:	78fb      	ldrb	r3, [r7, #3]
 8012006:	2b0a      	cmp	r3, #10
 8012008:	d103      	bne.n	8012012 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801200a:	210d      	movs	r1, #13
 801200c:	6878      	ldr	r0, [r7, #4]
 801200e:	f7ff fff3 	bl	8011ff8 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	685b      	ldr	r3, [r3, #4]
 8012016:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2b00      	cmp	r3, #0
 801201c:	db25      	blt.n	801206a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	1c5a      	adds	r2, r3, #1
 8012022:	60fa      	str	r2, [r7, #12]
 8012024:	687a      	ldr	r2, [r7, #4]
 8012026:	4413      	add	r3, r2
 8012028:	78fa      	ldrb	r2, [r7, #3]
 801202a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	2b3c      	cmp	r3, #60	@ 0x3c
 8012030:	dd12      	ble.n	8012058 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	6818      	ldr	r0, [r3, #0]
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f103 010c 	add.w	r1, r3, #12
 801203c:	68fa      	ldr	r2, [r7, #12]
 801203e:	f107 0308 	add.w	r3, r7, #8
 8012042:	f7ff fa4a 	bl	80114da <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8012046:	68ba      	ldr	r2, [r7, #8]
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	429a      	cmp	r2, r3
 801204c:	d101      	bne.n	8012052 <putc_bfd+0x5a>
 801204e:	2300      	movs	r3, #0
 8012050:	e001      	b.n	8012056 <putc_bfd+0x5e>
 8012052:	f04f 33ff 	mov.w	r3, #4294967295
 8012056:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	68fa      	ldr	r2, [r7, #12]
 801205c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	689b      	ldr	r3, [r3, #8]
 8012062:	1c5a      	adds	r2, r3, #1
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	609a      	str	r2, [r3, #8]
 8012068:	e000      	b.n	801206c <putc_bfd+0x74>
	if (i < 0) return;
 801206a:	bf00      	nop
}
 801206c:	3710      	adds	r7, #16
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}

08012072 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8012072:	b590      	push	{r4, r7, lr}
 8012074:	b097      	sub	sp, #92	@ 0x5c
 8012076:	af00      	add	r7, sp, #0
 8012078:	6078      	str	r0, [r7, #4]
 801207a:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8012080:	2300      	movs	r3, #0
 8012082:	613b      	str	r3, [r7, #16]
 8012084:	693b      	ldr	r3, [r7, #16]
 8012086:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8012088:	e009      	b.n	801209e <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	1c5a      	adds	r2, r3, #1
 801208e:	607a      	str	r2, [r7, #4]
 8012090:	781a      	ldrb	r2, [r3, #0]
 8012092:	f107 030c 	add.w	r3, r7, #12
 8012096:	4611      	mov	r1, r2
 8012098:	4618      	mov	r0, r3
 801209a:	f7ff ffad 	bl	8011ff8 <putc_bfd>
	while (*str)			/* Put the string */
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d1f1      	bne.n	801208a <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	db15      	blt.n	80120d8 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80120ac:	68f8      	ldr	r0, [r7, #12]
 80120ae:	693b      	ldr	r3, [r7, #16]
 80120b0:	461c      	mov	r4, r3
 80120b2:	f107 0208 	add.w	r2, r7, #8
 80120b6:	f107 030c 	add.w	r3, r7, #12
 80120ba:	f103 010c 	add.w	r1, r3, #12
 80120be:	4613      	mov	r3, r2
 80120c0:	4622      	mov	r2, r4
 80120c2:	f7ff fa0a 	bl	80114da <f_write>
 80120c6:	4603      	mov	r3, r0
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d105      	bne.n	80120d8 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80120cc:	693b      	ldr	r3, [r7, #16]
 80120ce:	68ba      	ldr	r2, [r7, #8]
 80120d0:	4293      	cmp	r3, r2
 80120d2:	d101      	bne.n	80120d8 <f_puts+0x66>
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	e001      	b.n	80120dc <f_puts+0x6a>
	return EOF;
 80120d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80120dc:	4618      	mov	r0, r3
 80120de:	375c      	adds	r7, #92	@ 0x5c
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd90      	pop	{r4, r7, pc}

080120e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80120e4:	b480      	push	{r7}
 80120e6:	b087      	sub	sp, #28
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	60f8      	str	r0, [r7, #12]
 80120ec:	60b9      	str	r1, [r7, #8]
 80120ee:	4613      	mov	r3, r2
 80120f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80120f2:	2301      	movs	r3, #1
 80120f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80120f6:	2300      	movs	r3, #0
 80120f8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80120fa:	4b1e      	ldr	r3, [pc, #120]	@ (8012174 <FATFS_LinkDriverEx+0x90>)
 80120fc:	7a5b      	ldrb	r3, [r3, #9]
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	2b01      	cmp	r3, #1
 8012102:	d831      	bhi.n	8012168 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012104:	4b1b      	ldr	r3, [pc, #108]	@ (8012174 <FATFS_LinkDriverEx+0x90>)
 8012106:	7a5b      	ldrb	r3, [r3, #9]
 8012108:	b2db      	uxtb	r3, r3
 801210a:	461a      	mov	r2, r3
 801210c:	4b19      	ldr	r3, [pc, #100]	@ (8012174 <FATFS_LinkDriverEx+0x90>)
 801210e:	2100      	movs	r1, #0
 8012110:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8012112:	4b18      	ldr	r3, [pc, #96]	@ (8012174 <FATFS_LinkDriverEx+0x90>)
 8012114:	7a5b      	ldrb	r3, [r3, #9]
 8012116:	b2db      	uxtb	r3, r3
 8012118:	4a16      	ldr	r2, [pc, #88]	@ (8012174 <FATFS_LinkDriverEx+0x90>)
 801211a:	009b      	lsls	r3, r3, #2
 801211c:	4413      	add	r3, r2
 801211e:	68fa      	ldr	r2, [r7, #12]
 8012120:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8012122:	4b14      	ldr	r3, [pc, #80]	@ (8012174 <FATFS_LinkDriverEx+0x90>)
 8012124:	7a5b      	ldrb	r3, [r3, #9]
 8012126:	b2db      	uxtb	r3, r3
 8012128:	461a      	mov	r2, r3
 801212a:	4b12      	ldr	r3, [pc, #72]	@ (8012174 <FATFS_LinkDriverEx+0x90>)
 801212c:	4413      	add	r3, r2
 801212e:	79fa      	ldrb	r2, [r7, #7]
 8012130:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012132:	4b10      	ldr	r3, [pc, #64]	@ (8012174 <FATFS_LinkDriverEx+0x90>)
 8012134:	7a5b      	ldrb	r3, [r3, #9]
 8012136:	b2db      	uxtb	r3, r3
 8012138:	1c5a      	adds	r2, r3, #1
 801213a:	b2d1      	uxtb	r1, r2
 801213c:	4a0d      	ldr	r2, [pc, #52]	@ (8012174 <FATFS_LinkDriverEx+0x90>)
 801213e:	7251      	strb	r1, [r2, #9]
 8012140:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012142:	7dbb      	ldrb	r3, [r7, #22]
 8012144:	3330      	adds	r3, #48	@ 0x30
 8012146:	b2da      	uxtb	r2, r3
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	3301      	adds	r3, #1
 8012150:	223a      	movs	r2, #58	@ 0x3a
 8012152:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	3302      	adds	r3, #2
 8012158:	222f      	movs	r2, #47	@ 0x2f
 801215a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801215c:	68bb      	ldr	r3, [r7, #8]
 801215e:	3303      	adds	r3, #3
 8012160:	2200      	movs	r2, #0
 8012162:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012164:	2300      	movs	r3, #0
 8012166:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8012168:	7dfb      	ldrb	r3, [r7, #23]
}
 801216a:	4618      	mov	r0, r3
 801216c:	371c      	adds	r7, #28
 801216e:	46bd      	mov	sp, r7
 8012170:	bc80      	pop	{r7}
 8012172:	4770      	bx	lr
 8012174:	20001330 	.word	0x20001330

08012178 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012182:	2200      	movs	r2, #0
 8012184:	6839      	ldr	r1, [r7, #0]
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f7ff ffac 	bl	80120e4 <FATFS_LinkDriverEx>
 801218c:	4603      	mov	r3, r0
}
 801218e:	4618      	mov	r0, r3
 8012190:	3708      	adds	r7, #8
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
	...

08012198 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b082      	sub	sp, #8
 801219c:	af00      	add	r7, sp, #0
 801219e:	4603      	mov	r3, r0
 80121a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80121a2:	4b0b      	ldr	r3, [pc, #44]	@ (80121d0 <SD_initialize+0x38>)
 80121a4:	2201      	movs	r2, #1
 80121a6:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 80121a8:	f7fc fbd4 	bl	800e954 <BSP_SD_Init>
 80121ac:	4603      	mov	r3, r0
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d107      	bne.n	80121c2 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80121b2:	4b07      	ldr	r3, [pc, #28]	@ (80121d0 <SD_initialize+0x38>)
 80121b4:	781b      	ldrb	r3, [r3, #0]
 80121b6:	b2db      	uxtb	r3, r3
 80121b8:	f023 0301 	bic.w	r3, r3, #1
 80121bc:	b2da      	uxtb	r2, r3
 80121be:	4b04      	ldr	r3, [pc, #16]	@ (80121d0 <SD_initialize+0x38>)
 80121c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80121c2:	4b03      	ldr	r3, [pc, #12]	@ (80121d0 <SD_initialize+0x38>)
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	b2db      	uxtb	r3, r3
}
 80121c8:	4618      	mov	r0, r3
 80121ca:	3708      	adds	r7, #8
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd80      	pop	{r7, pc}
 80121d0:	20000081 	.word	0x20000081

080121d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
 80121da:	4603      	mov	r3, r0
 80121dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80121de:	4b0b      	ldr	r3, [pc, #44]	@ (801220c <SD_status+0x38>)
 80121e0:	2201      	movs	r2, #1
 80121e2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80121e4:	f7fc fc0a 	bl	800e9fc <BSP_SD_GetCardState>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d107      	bne.n	80121fe <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80121ee:	4b07      	ldr	r3, [pc, #28]	@ (801220c <SD_status+0x38>)
 80121f0:	781b      	ldrb	r3, [r3, #0]
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	f023 0301 	bic.w	r3, r3, #1
 80121f8:	b2da      	uxtb	r2, r3
 80121fa:	4b04      	ldr	r3, [pc, #16]	@ (801220c <SD_status+0x38>)
 80121fc:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 80121fe:	4b03      	ldr	r3, [pc, #12]	@ (801220c <SD_status+0x38>)
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	b2db      	uxtb	r3, r3
}
 8012204:	4618      	mov	r0, r3
 8012206:	3708      	adds	r7, #8
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}
 801220c:	20000081 	.word	0x20000081

08012210 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b086      	sub	sp, #24
 8012214:	af00      	add	r7, sp, #0
 8012216:	60b9      	str	r1, [r7, #8]
 8012218:	607a      	str	r2, [r7, #4]
 801221a:	603b      	str	r3, [r7, #0]
 801221c:	4603      	mov	r3, r0
 801221e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012220:	2301      	movs	r3, #1
 8012222:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8012224:	4b0f      	ldr	r3, [pc, #60]	@ (8012264 <SD_read+0x54>)
 8012226:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8012228:	4b0f      	ldr	r3, [pc, #60]	@ (8012268 <SD_read+0x58>)
 801222a:	683a      	ldr	r2, [r7, #0]
 801222c:	6879      	ldr	r1, [r7, #4]
 801222e:	68b8      	ldr	r0, [r7, #8]
 8012230:	f7fc fba8 	bl	800e984 <BSP_SD_ReadBlocks>
 8012234:	4603      	mov	r3, r0
 8012236:	2b00      	cmp	r3, #0
 8012238:	d10e      	bne.n	8012258 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 801223a:	e006      	b.n	801224a <SD_read+0x3a>
    {
      if (timeout-- == 0)
 801223c:	693b      	ldr	r3, [r7, #16]
 801223e:	1e5a      	subs	r2, r3, #1
 8012240:	613a      	str	r2, [r7, #16]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d101      	bne.n	801224a <SD_read+0x3a>
      {
        return RES_ERROR;
 8012246:	2301      	movs	r3, #1
 8012248:	e007      	b.n	801225a <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 801224a:	f7fc fbd7 	bl	800e9fc <BSP_SD_GetCardState>
 801224e:	4603      	mov	r3, r0
 8012250:	2b00      	cmp	r3, #0
 8012252:	d1f3      	bne.n	801223c <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8012254:	2300      	movs	r3, #0
 8012256:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8012258:	7dfb      	ldrb	r3, [r7, #23]
}
 801225a:	4618      	mov	r0, r3
 801225c:	3718      	adds	r7, #24
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop
 8012264:	000186a0 	.word	0x000186a0
 8012268:	05f5e100 	.word	0x05f5e100

0801226c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b086      	sub	sp, #24
 8012270:	af00      	add	r7, sp, #0
 8012272:	60b9      	str	r1, [r7, #8]
 8012274:	607a      	str	r2, [r7, #4]
 8012276:	603b      	str	r3, [r7, #0]
 8012278:	4603      	mov	r3, r0
 801227a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801227c:	2301      	movs	r3, #1
 801227e:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8012280:	4b0f      	ldr	r3, [pc, #60]	@ (80122c0 <SD_write+0x54>)
 8012282:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8012284:	4b0f      	ldr	r3, [pc, #60]	@ (80122c4 <SD_write+0x58>)
 8012286:	683a      	ldr	r2, [r7, #0]
 8012288:	6879      	ldr	r1, [r7, #4]
 801228a:	68b8      	ldr	r0, [r7, #8]
 801228c:	f7fc fb98 	bl	800e9c0 <BSP_SD_WriteBlocks>
 8012290:	4603      	mov	r3, r0
 8012292:	2b00      	cmp	r3, #0
 8012294:	d10e      	bne.n	80122b4 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012296:	e006      	b.n	80122a6 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8012298:	693b      	ldr	r3, [r7, #16]
 801229a:	1e5a      	subs	r2, r3, #1
 801229c:	613a      	str	r2, [r7, #16]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d101      	bne.n	80122a6 <SD_write+0x3a>
      {
        return RES_ERROR;
 80122a2:	2301      	movs	r3, #1
 80122a4:	e007      	b.n	80122b6 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80122a6:	f7fc fba9 	bl	800e9fc <BSP_SD_GetCardState>
 80122aa:	4603      	mov	r3, r0
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d1f3      	bne.n	8012298 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 80122b0:	2300      	movs	r3, #0
 80122b2:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80122b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	3718      	adds	r7, #24
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}
 80122be:	bf00      	nop
 80122c0:	000186a0 	.word	0x000186a0
 80122c4:	05f5e100 	.word	0x05f5e100

080122c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b08c      	sub	sp, #48	@ 0x30
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	4603      	mov	r3, r0
 80122d0:	603a      	str	r2, [r7, #0]
 80122d2:	71fb      	strb	r3, [r7, #7]
 80122d4:	460b      	mov	r3, r1
 80122d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80122d8:	2301      	movs	r3, #1
 80122da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80122de:	4b24      	ldr	r3, [pc, #144]	@ (8012370 <SD_ioctl+0xa8>)
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	b2db      	uxtb	r3, r3
 80122e4:	f003 0301 	and.w	r3, r3, #1
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d001      	beq.n	80122f0 <SD_ioctl+0x28>
 80122ec:	2303      	movs	r3, #3
 80122ee:	e03b      	b.n	8012368 <SD_ioctl+0xa0>
  
  switch (cmd)
 80122f0:	79bb      	ldrb	r3, [r7, #6]
 80122f2:	2b03      	cmp	r3, #3
 80122f4:	d833      	bhi.n	801235e <SD_ioctl+0x96>
 80122f6:	a201      	add	r2, pc, #4	@ (adr r2, 80122fc <SD_ioctl+0x34>)
 80122f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122fc:	0801230d 	.word	0x0801230d
 8012300:	08012315 	.word	0x08012315
 8012304:	0801232d 	.word	0x0801232d
 8012308:	08012347 	.word	0x08012347
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801230c:	2300      	movs	r3, #0
 801230e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012312:	e027      	b.n	8012364 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012314:	f107 030c 	add.w	r3, r7, #12
 8012318:	4618      	mov	r0, r3
 801231a:	f7fc fb7f 	bl	800ea1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801231e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012324:	2300      	movs	r3, #0
 8012326:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801232a:	e01b      	b.n	8012364 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801232c:	f107 030c 	add.w	r3, r7, #12
 8012330:	4618      	mov	r0, r3
 8012332:	f7fc fb73 	bl	800ea1c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012338:	b29a      	uxth	r2, r3
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801233e:	2300      	movs	r3, #0
 8012340:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012344:	e00e      	b.n	8012364 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012346:	f107 030c 	add.w	r3, r7, #12
 801234a:	4618      	mov	r0, r3
 801234c:	f7fc fb66 	bl	800ea1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8012350:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012356:	2300      	movs	r3, #0
 8012358:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801235c:	e002      	b.n	8012364 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 801235e:	2304      	movs	r3, #4
 8012360:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 8012364:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012368:	4618      	mov	r0, r3
 801236a:	3730      	adds	r7, #48	@ 0x30
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}
 8012370:	20000081 	.word	0x20000081

08012374 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8012374:	b480      	push	{r7}
 8012376:	b085      	sub	sp, #20
 8012378:	af00      	add	r7, sp, #0
 801237a:	4603      	mov	r3, r0
 801237c:	6039      	str	r1, [r7, #0]
 801237e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012380:	88fb      	ldrh	r3, [r7, #6]
 8012382:	2b7f      	cmp	r3, #127	@ 0x7f
 8012384:	d802      	bhi.n	801238c <ff_convert+0x18>
		c = chr;
 8012386:	88fb      	ldrh	r3, [r7, #6]
 8012388:	81fb      	strh	r3, [r7, #14]
 801238a:	e025      	b.n	80123d8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d00b      	beq.n	80123aa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012392:	88fb      	ldrh	r3, [r7, #6]
 8012394:	2bff      	cmp	r3, #255	@ 0xff
 8012396:	d805      	bhi.n	80123a4 <ff_convert+0x30>
 8012398:	88fb      	ldrh	r3, [r7, #6]
 801239a:	3b80      	subs	r3, #128	@ 0x80
 801239c:	4a11      	ldr	r2, [pc, #68]	@ (80123e4 <ff_convert+0x70>)
 801239e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80123a2:	e000      	b.n	80123a6 <ff_convert+0x32>
 80123a4:	2300      	movs	r3, #0
 80123a6:	81fb      	strh	r3, [r7, #14]
 80123a8:	e016      	b.n	80123d8 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80123aa:	2300      	movs	r3, #0
 80123ac:	81fb      	strh	r3, [r7, #14]
 80123ae:	e009      	b.n	80123c4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80123b0:	89fb      	ldrh	r3, [r7, #14]
 80123b2:	4a0c      	ldr	r2, [pc, #48]	@ (80123e4 <ff_convert+0x70>)
 80123b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80123b8:	88fa      	ldrh	r2, [r7, #6]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d006      	beq.n	80123cc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80123be:	89fb      	ldrh	r3, [r7, #14]
 80123c0:	3301      	adds	r3, #1
 80123c2:	81fb      	strh	r3, [r7, #14]
 80123c4:	89fb      	ldrh	r3, [r7, #14]
 80123c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80123c8:	d9f2      	bls.n	80123b0 <ff_convert+0x3c>
 80123ca:	e000      	b.n	80123ce <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80123cc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80123ce:	89fb      	ldrh	r3, [r7, #14]
 80123d0:	3380      	adds	r3, #128	@ 0x80
 80123d2:	b29b      	uxth	r3, r3
 80123d4:	b2db      	uxtb	r3, r3
 80123d6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80123d8:	89fb      	ldrh	r3, [r7, #14]
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3714      	adds	r7, #20
 80123de:	46bd      	mov	sp, r7
 80123e0:	bc80      	pop	{r7}
 80123e2:	4770      	bx	lr
 80123e4:	08016138 	.word	0x08016138

080123e8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80123e8:	b480      	push	{r7}
 80123ea:	b085      	sub	sp, #20
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	4603      	mov	r3, r0
 80123f0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80123f2:	2300      	movs	r3, #0
 80123f4:	60fb      	str	r3, [r7, #12]
 80123f6:	e002      	b.n	80123fe <ff_wtoupper+0x16>
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	3301      	adds	r3, #1
 80123fc:	60fb      	str	r3, [r7, #12]
 80123fe:	4a0f      	ldr	r2, [pc, #60]	@ (801243c <ff_wtoupper+0x54>)
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d006      	beq.n	8012418 <ff_wtoupper+0x30>
 801240a:	4a0c      	ldr	r2, [pc, #48]	@ (801243c <ff_wtoupper+0x54>)
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012412:	88fa      	ldrh	r2, [r7, #6]
 8012414:	429a      	cmp	r2, r3
 8012416:	d1ef      	bne.n	80123f8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8012418:	4a08      	ldr	r2, [pc, #32]	@ (801243c <ff_wtoupper+0x54>)
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d004      	beq.n	801242e <ff_wtoupper+0x46>
 8012424:	4a06      	ldr	r2, [pc, #24]	@ (8012440 <ff_wtoupper+0x58>)
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801242c:	e000      	b.n	8012430 <ff_wtoupper+0x48>
 801242e:	88fb      	ldrh	r3, [r7, #6]
}
 8012430:	4618      	mov	r0, r3
 8012432:	3714      	adds	r7, #20
 8012434:	46bd      	mov	sp, r7
 8012436:	bc80      	pop	{r7}
 8012438:	4770      	bx	lr
 801243a:	bf00      	nop
 801243c:	08016238 	.word	0x08016238
 8012440:	08016418 	.word	0x08016418

08012444 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b086      	sub	sp, #24
 8012448:	af00      	add	r7, sp, #0
 801244a:	4603      	mov	r3, r0
 801244c:	6039      	str	r1, [r7, #0]
 801244e:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8012450:	2300      	movs	r3, #0
 8012452:	60fb      	str	r3, [r7, #12]
 8012454:	2300      	movs	r3, #0
 8012456:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8012458:	f107 030c 	add.w	r3, r7, #12
 801245c:	2101      	movs	r1, #1
 801245e:	4618      	mov	r0, r3
 8012460:	f000 f8cb 	bl	80125fa <osSemaphoreCreate>
 8012464:	4602      	mov	r2, r0
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	2b00      	cmp	r3, #0
 8012470:	bf14      	ite	ne
 8012472:	2301      	movne	r3, #1
 8012474:	2300      	moveq	r3, #0
 8012476:	b2db      	uxtb	r3, r3
 8012478:	617b      	str	r3, [r7, #20]
  
  return ret;
 801247a:	697b      	ldr	r3, [r7, #20]
}
 801247c:	4618      	mov	r0, r3
 801247e:	3718      	adds	r7, #24
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f000 f96b 	bl	8012768 <osSemaphoreDelete>
  return 1;
 8012492:	2301      	movs	r3, #1
}
 8012494:	4618      	mov	r0, r3
 8012496:	3708      	adds	r7, #8
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}

0801249c <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b084      	sub	sp, #16
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80124a4:	2300      	movs	r3, #0
 80124a6:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80124a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f000 f8d7 	bl	8012660 <osSemaphoreWait>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d101      	bne.n	80124bc <ff_req_grant+0x20>
  {
    ret = 1;
 80124b8:	2301      	movs	r3, #1
 80124ba:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80124bc:	68fb      	ldr	r3, [r7, #12]
}
 80124be:	4618      	mov	r0, r3
 80124c0:	3710      	adds	r7, #16
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}

080124c6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80124c6:	b580      	push	{r7, lr}
 80124c8:	b082      	sub	sp, #8
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f000 f914 	bl	80126fc <osSemaphoreRelease>
}
 80124d4:	bf00      	nop
 80124d6:	3708      	adds	r7, #8
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80124dc:	b480      	push	{r7}
 80124de:	b085      	sub	sp, #20
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	4603      	mov	r3, r0
 80124e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80124e6:	2300      	movs	r3, #0
 80124e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80124ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124ee:	2b84      	cmp	r3, #132	@ 0x84
 80124f0:	d005      	beq.n	80124fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80124f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	4413      	add	r3, r2
 80124fa:	3303      	adds	r3, #3
 80124fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80124fe:	68fb      	ldr	r3, [r7, #12]
}
 8012500:	4618      	mov	r0, r3
 8012502:	3714      	adds	r7, #20
 8012504:	46bd      	mov	sp, r7
 8012506:	bc80      	pop	{r7}
 8012508:	4770      	bx	lr

0801250a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801250a:	b480      	push	{r7}
 801250c:	b083      	sub	sp, #12
 801250e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012510:	f3ef 8305 	mrs	r3, IPSR
 8012514:	607b      	str	r3, [r7, #4]
  return(result);
 8012516:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012518:	2b00      	cmp	r3, #0
 801251a:	bf14      	ite	ne
 801251c:	2301      	movne	r3, #1
 801251e:	2300      	moveq	r3, #0
 8012520:	b2db      	uxtb	r3, r3
}
 8012522:	4618      	mov	r0, r3
 8012524:	370c      	adds	r7, #12
 8012526:	46bd      	mov	sp, r7
 8012528:	bc80      	pop	{r7}
 801252a:	4770      	bx	lr

0801252c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012530:	f001 fb34 	bl	8013b9c <vTaskStartScheduler>
  
  return osOK;
 8012534:	2300      	movs	r3, #0
}
 8012536:	4618      	mov	r0, r3
 8012538:	bd80      	pop	{r7, pc}

0801253a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801253a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801253c:	b089      	sub	sp, #36	@ 0x24
 801253e:	af04      	add	r7, sp, #16
 8012540:	6078      	str	r0, [r7, #4]
 8012542:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	695b      	ldr	r3, [r3, #20]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d020      	beq.n	801258e <osThreadCreate+0x54>
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	699b      	ldr	r3, [r3, #24]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d01c      	beq.n	801258e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	685c      	ldr	r4, [r3, #4]
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	691e      	ldr	r6, [r3, #16]
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012566:	4618      	mov	r0, r3
 8012568:	f7ff ffb8 	bl	80124dc <makeFreeRtosPriority>
 801256c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	695b      	ldr	r3, [r3, #20]
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012576:	9202      	str	r2, [sp, #8]
 8012578:	9301      	str	r3, [sp, #4]
 801257a:	9100      	str	r1, [sp, #0]
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	4632      	mov	r2, r6
 8012580:	4629      	mov	r1, r5
 8012582:	4620      	mov	r0, r4
 8012584:	f000 ff90 	bl	80134a8 <xTaskCreateStatic>
 8012588:	4603      	mov	r3, r0
 801258a:	60fb      	str	r3, [r7, #12]
 801258c:	e01c      	b.n	80125c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	685c      	ldr	r4, [r3, #4]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801259a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7ff ff9a 	bl	80124dc <makeFreeRtosPriority>
 80125a8:	4602      	mov	r2, r0
 80125aa:	f107 030c 	add.w	r3, r7, #12
 80125ae:	9301      	str	r3, [sp, #4]
 80125b0:	9200      	str	r2, [sp, #0]
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	4632      	mov	r2, r6
 80125b6:	4629      	mov	r1, r5
 80125b8:	4620      	mov	r0, r4
 80125ba:	f000 ffd4 	bl	8013566 <xTaskCreate>
 80125be:	4603      	mov	r3, r0
 80125c0:	2b01      	cmp	r3, #1
 80125c2:	d001      	beq.n	80125c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80125c4:	2300      	movs	r3, #0
 80125c6:	e000      	b.n	80125ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80125c8:	68fb      	ldr	r3, [r7, #12]
}
 80125ca:	4618      	mov	r0, r3
 80125cc:	3714      	adds	r7, #20
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080125d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80125d2:	b580      	push	{r7, lr}
 80125d4:	b084      	sub	sp, #16
 80125d6:	af00      	add	r7, sp, #0
 80125d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d001      	beq.n	80125e8 <osDelay+0x16>
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	e000      	b.n	80125ea <osDelay+0x18>
 80125e8:	2301      	movs	r3, #1
 80125ea:	4618      	mov	r0, r3
 80125ec:	f001 f972 	bl	80138d4 <vTaskDelay>
  
  return osOK;
 80125f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3710      	adds	r7, #16
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}

080125fa <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80125fa:	b580      	push	{r7, lr}
 80125fc:	b086      	sub	sp, #24
 80125fe:	af02      	add	r7, sp, #8
 8012600:	6078      	str	r0, [r7, #4]
 8012602:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	685b      	ldr	r3, [r3, #4]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d00f      	beq.n	801262c <osSemaphoreCreate+0x32>
    if (count == 1) {
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	2b01      	cmp	r3, #1
 8012610:	d10a      	bne.n	8012628 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	2203      	movs	r2, #3
 8012618:	9200      	str	r2, [sp, #0]
 801261a:	2200      	movs	r2, #0
 801261c:	2100      	movs	r1, #0
 801261e:	2001      	movs	r0, #1
 8012620:	f000 f9ce 	bl	80129c0 <xQueueGenericCreateStatic>
 8012624:	4603      	mov	r3, r0
 8012626:	e016      	b.n	8012656 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8012628:	2300      	movs	r3, #0
 801262a:	e014      	b.n	8012656 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	2b01      	cmp	r3, #1
 8012630:	d110      	bne.n	8012654 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8012632:	2203      	movs	r2, #3
 8012634:	2100      	movs	r1, #0
 8012636:	2001      	movs	r0, #1
 8012638:	f000 fa3e 	bl	8012ab8 <xQueueGenericCreate>
 801263c:	60f8      	str	r0, [r7, #12]
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d005      	beq.n	8012650 <osSemaphoreCreate+0x56>
 8012644:	2300      	movs	r3, #0
 8012646:	2200      	movs	r2, #0
 8012648:	2100      	movs	r1, #0
 801264a:	68f8      	ldr	r0, [r7, #12]
 801264c:	f000 fa92 	bl	8012b74 <xQueueGenericSend>
      return sema;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	e000      	b.n	8012656 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8012654:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8012656:	4618      	mov	r0, r3
 8012658:	3710      	adds	r7, #16
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}
	...

08012660 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b084      	sub	sp, #16
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801266a:	2300      	movs	r3, #0
 801266c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d101      	bne.n	8012678 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8012674:	2380      	movs	r3, #128	@ 0x80
 8012676:	e03a      	b.n	80126ee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8012678:	2300      	movs	r3, #0
 801267a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801267c:	683b      	ldr	r3, [r7, #0]
 801267e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012682:	d103      	bne.n	801268c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8012684:	f04f 33ff 	mov.w	r3, #4294967295
 8012688:	60fb      	str	r3, [r7, #12]
 801268a:	e009      	b.n	80126a0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d006      	beq.n	80126a0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d101      	bne.n	80126a0 <osSemaphoreWait+0x40>
      ticks = 1;
 801269c:	2301      	movs	r3, #1
 801269e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80126a0:	f7ff ff33 	bl	801250a <inHandlerMode>
 80126a4:	4603      	mov	r3, r0
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d017      	beq.n	80126da <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80126aa:	f107 0308 	add.w	r3, r7, #8
 80126ae:	461a      	mov	r2, r3
 80126b0:	2100      	movs	r1, #0
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f000 fd00 	bl	80130b8 <xQueueReceiveFromISR>
 80126b8:	4603      	mov	r3, r0
 80126ba:	2b01      	cmp	r3, #1
 80126bc:	d001      	beq.n	80126c2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80126be:	23ff      	movs	r3, #255	@ 0xff
 80126c0:	e015      	b.n	80126ee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d011      	beq.n	80126ec <osSemaphoreWait+0x8c>
 80126c8:	4b0b      	ldr	r3, [pc, #44]	@ (80126f8 <osSemaphoreWait+0x98>)
 80126ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80126ce:	601a      	str	r2, [r3, #0]
 80126d0:	f3bf 8f4f 	dsb	sy
 80126d4:	f3bf 8f6f 	isb	sy
 80126d8:	e008      	b.n	80126ec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80126da:	68f9      	ldr	r1, [r7, #12]
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f000 fbdb 	bl	8012e98 <xQueueSemaphoreTake>
 80126e2:	4603      	mov	r3, r0
 80126e4:	2b01      	cmp	r3, #1
 80126e6:	d001      	beq.n	80126ec <osSemaphoreWait+0x8c>
    return osErrorOS;
 80126e8:	23ff      	movs	r3, #255	@ 0xff
 80126ea:	e000      	b.n	80126ee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80126ec:	2300      	movs	r3, #0
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3710      	adds	r7, #16
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}
 80126f6:	bf00      	nop
 80126f8:	e000ed04 	.word	0xe000ed04

080126fc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b084      	sub	sp, #16
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012704:	2300      	movs	r3, #0
 8012706:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012708:	2300      	movs	r3, #0
 801270a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801270c:	f7ff fefd 	bl	801250a <inHandlerMode>
 8012710:	4603      	mov	r3, r0
 8012712:	2b00      	cmp	r3, #0
 8012714:	d016      	beq.n	8012744 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012716:	f107 0308 	add.w	r3, r7, #8
 801271a:	4619      	mov	r1, r3
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f000 fb2b 	bl	8012d78 <xQueueGiveFromISR>
 8012722:	4603      	mov	r3, r0
 8012724:	2b01      	cmp	r3, #1
 8012726:	d001      	beq.n	801272c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8012728:	23ff      	movs	r3, #255	@ 0xff
 801272a:	e017      	b.n	801275c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d013      	beq.n	801275a <osSemaphoreRelease+0x5e>
 8012732:	4b0c      	ldr	r3, [pc, #48]	@ (8012764 <osSemaphoreRelease+0x68>)
 8012734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012738:	601a      	str	r2, [r3, #0]
 801273a:	f3bf 8f4f 	dsb	sy
 801273e:	f3bf 8f6f 	isb	sy
 8012742:	e00a      	b.n	801275a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012744:	2300      	movs	r3, #0
 8012746:	2200      	movs	r2, #0
 8012748:	2100      	movs	r1, #0
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f000 fa12 	bl	8012b74 <xQueueGenericSend>
 8012750:	4603      	mov	r3, r0
 8012752:	2b01      	cmp	r3, #1
 8012754:	d001      	beq.n	801275a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8012756:	23ff      	movs	r3, #255	@ 0xff
 8012758:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801275a:	68fb      	ldr	r3, [r7, #12]
}
 801275c:	4618      	mov	r0, r3
 801275e:	3710      	adds	r7, #16
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}
 8012764:	e000ed04 	.word	0xe000ed04

08012768 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b082      	sub	sp, #8
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012770:	f7ff fecb 	bl	801250a <inHandlerMode>
 8012774:	4603      	mov	r3, r0
 8012776:	2b00      	cmp	r3, #0
 8012778:	d001      	beq.n	801277e <osSemaphoreDelete+0x16>
    return osErrorISR;
 801277a:	2382      	movs	r3, #130	@ 0x82
 801277c:	e003      	b.n	8012786 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f000 fd1c 	bl	80131bc <vQueueDelete>

  return osOK; 
 8012784:	2300      	movs	r3, #0
}
 8012786:	4618      	mov	r0, r3
 8012788:	3708      	adds	r7, #8
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}

0801278e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801278e:	b480      	push	{r7}
 8012790:	b083      	sub	sp, #12
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	f103 0208 	add.w	r2, r3, #8
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f04f 32ff 	mov.w	r2, #4294967295
 80127a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f103 0208 	add.w	r2, r3, #8
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f103 0208 	add.w	r2, r3, #8
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2200      	movs	r2, #0
 80127c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80127c2:	bf00      	nop
 80127c4:	370c      	adds	r7, #12
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bc80      	pop	{r7}
 80127ca:	4770      	bx	lr

080127cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80127cc:	b480      	push	{r7}
 80127ce:	b083      	sub	sp, #12
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2200      	movs	r2, #0
 80127d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80127da:	bf00      	nop
 80127dc:	370c      	adds	r7, #12
 80127de:	46bd      	mov	sp, r7
 80127e0:	bc80      	pop	{r7}
 80127e2:	4770      	bx	lr

080127e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80127e4:	b480      	push	{r7}
 80127e6:	b085      	sub	sp, #20
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	68fa      	ldr	r2, [r7, #12]
 80127f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	689a      	ldr	r2, [r3, #8]
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	689b      	ldr	r3, [r3, #8]
 8012806:	683a      	ldr	r2, [r7, #0]
 8012808:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	683a      	ldr	r2, [r7, #0]
 801280e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	687a      	ldr	r2, [r7, #4]
 8012814:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	1c5a      	adds	r2, r3, #1
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	601a      	str	r2, [r3, #0]
}
 8012820:	bf00      	nop
 8012822:	3714      	adds	r7, #20
 8012824:	46bd      	mov	sp, r7
 8012826:	bc80      	pop	{r7}
 8012828:	4770      	bx	lr

0801282a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801282a:	b480      	push	{r7}
 801282c:	b085      	sub	sp, #20
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
 8012832:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012840:	d103      	bne.n	801284a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	691b      	ldr	r3, [r3, #16]
 8012846:	60fb      	str	r3, [r7, #12]
 8012848:	e00c      	b.n	8012864 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	3308      	adds	r3, #8
 801284e:	60fb      	str	r3, [r7, #12]
 8012850:	e002      	b.n	8012858 <vListInsert+0x2e>
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	685b      	ldr	r3, [r3, #4]
 8012856:	60fb      	str	r3, [r7, #12]
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	685b      	ldr	r3, [r3, #4]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	68ba      	ldr	r2, [r7, #8]
 8012860:	429a      	cmp	r2, r3
 8012862:	d2f6      	bcs.n	8012852 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	685a      	ldr	r2, [r3, #4]
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	683a      	ldr	r2, [r7, #0]
 8012872:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	68fa      	ldr	r2, [r7, #12]
 8012878:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	683a      	ldr	r2, [r7, #0]
 801287e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	687a      	ldr	r2, [r7, #4]
 8012884:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	1c5a      	adds	r2, r3, #1
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	601a      	str	r2, [r3, #0]
}
 8012890:	bf00      	nop
 8012892:	3714      	adds	r7, #20
 8012894:	46bd      	mov	sp, r7
 8012896:	bc80      	pop	{r7}
 8012898:	4770      	bx	lr

0801289a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801289a:	b480      	push	{r7}
 801289c:	b085      	sub	sp, #20
 801289e:	af00      	add	r7, sp, #0
 80128a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	691b      	ldr	r3, [r3, #16]
 80128a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	685b      	ldr	r3, [r3, #4]
 80128ac:	687a      	ldr	r2, [r7, #4]
 80128ae:	6892      	ldr	r2, [r2, #8]
 80128b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	689b      	ldr	r3, [r3, #8]
 80128b6:	687a      	ldr	r2, [r7, #4]
 80128b8:	6852      	ldr	r2, [r2, #4]
 80128ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	685b      	ldr	r3, [r3, #4]
 80128c0:	687a      	ldr	r2, [r7, #4]
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d103      	bne.n	80128ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	689a      	ldr	r2, [r3, #8]
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2200      	movs	r2, #0
 80128d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	1e5a      	subs	r2, r3, #1
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	681b      	ldr	r3, [r3, #0]
}
 80128e2:	4618      	mov	r0, r3
 80128e4:	3714      	adds	r7, #20
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bc80      	pop	{r7}
 80128ea:	4770      	bx	lr

080128ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b084      	sub	sp, #16
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
 80128f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d10b      	bne.n	8012918 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012904:	f383 8811 	msr	BASEPRI, r3
 8012908:	f3bf 8f6f 	isb	sy
 801290c:	f3bf 8f4f 	dsb	sy
 8012910:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012912:	bf00      	nop
 8012914:	bf00      	nop
 8012916:	e7fd      	b.n	8012914 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012918:	f002 f8d0 	bl	8014abc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	681a      	ldr	r2, [r3, #0]
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012924:	68f9      	ldr	r1, [r7, #12]
 8012926:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012928:	fb01 f303 	mul.w	r3, r1, r3
 801292c:	441a      	add	r2, r3
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	2200      	movs	r2, #0
 8012936:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	681a      	ldr	r2, [r3, #0]
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	681a      	ldr	r2, [r3, #0]
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012948:	3b01      	subs	r3, #1
 801294a:	68f9      	ldr	r1, [r7, #12]
 801294c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801294e:	fb01 f303 	mul.w	r3, r1, r3
 8012952:	441a      	add	r2, r3
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	22ff      	movs	r2, #255	@ 0xff
 801295c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	22ff      	movs	r2, #255	@ 0xff
 8012964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d114      	bne.n	8012998 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	691b      	ldr	r3, [r3, #16]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d01a      	beq.n	80129ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	3310      	adds	r3, #16
 801297a:	4618      	mov	r0, r3
 801297c:	f001 fb6a 	bl	8014054 <xTaskRemoveFromEventList>
 8012980:	4603      	mov	r3, r0
 8012982:	2b00      	cmp	r3, #0
 8012984:	d012      	beq.n	80129ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012986:	4b0d      	ldr	r3, [pc, #52]	@ (80129bc <xQueueGenericReset+0xd0>)
 8012988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801298c:	601a      	str	r2, [r3, #0]
 801298e:	f3bf 8f4f 	dsb	sy
 8012992:	f3bf 8f6f 	isb	sy
 8012996:	e009      	b.n	80129ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	3310      	adds	r3, #16
 801299c:	4618      	mov	r0, r3
 801299e:	f7ff fef6 	bl	801278e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	3324      	adds	r3, #36	@ 0x24
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7ff fef1 	bl	801278e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80129ac:	f002 f8b6 	bl	8014b1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80129b0:	2301      	movs	r3, #1
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3710      	adds	r7, #16
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	bf00      	nop
 80129bc:	e000ed04 	.word	0xe000ed04

080129c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b08e      	sub	sp, #56	@ 0x38
 80129c4:	af02      	add	r7, sp, #8
 80129c6:	60f8      	str	r0, [r7, #12]
 80129c8:	60b9      	str	r1, [r7, #8]
 80129ca:	607a      	str	r2, [r7, #4]
 80129cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d10b      	bne.n	80129ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80129d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129d8:	f383 8811 	msr	BASEPRI, r3
 80129dc:	f3bf 8f6f 	isb	sy
 80129e0:	f3bf 8f4f 	dsb	sy
 80129e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80129e6:	bf00      	nop
 80129e8:	bf00      	nop
 80129ea:	e7fd      	b.n	80129e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80129ec:	683b      	ldr	r3, [r7, #0]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d10b      	bne.n	8012a0a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80129f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129f6:	f383 8811 	msr	BASEPRI, r3
 80129fa:	f3bf 8f6f 	isb	sy
 80129fe:	f3bf 8f4f 	dsb	sy
 8012a02:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012a04:	bf00      	nop
 8012a06:	bf00      	nop
 8012a08:	e7fd      	b.n	8012a06 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d002      	beq.n	8012a16 <xQueueGenericCreateStatic+0x56>
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d001      	beq.n	8012a1a <xQueueGenericCreateStatic+0x5a>
 8012a16:	2301      	movs	r3, #1
 8012a18:	e000      	b.n	8012a1c <xQueueGenericCreateStatic+0x5c>
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d10b      	bne.n	8012a38 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8012a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a24:	f383 8811 	msr	BASEPRI, r3
 8012a28:	f3bf 8f6f 	isb	sy
 8012a2c:	f3bf 8f4f 	dsb	sy
 8012a30:	623b      	str	r3, [r7, #32]
}
 8012a32:	bf00      	nop
 8012a34:	bf00      	nop
 8012a36:	e7fd      	b.n	8012a34 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d102      	bne.n	8012a44 <xQueueGenericCreateStatic+0x84>
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d101      	bne.n	8012a48 <xQueueGenericCreateStatic+0x88>
 8012a44:	2301      	movs	r3, #1
 8012a46:	e000      	b.n	8012a4a <xQueueGenericCreateStatic+0x8a>
 8012a48:	2300      	movs	r3, #0
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d10b      	bne.n	8012a66 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8012a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a52:	f383 8811 	msr	BASEPRI, r3
 8012a56:	f3bf 8f6f 	isb	sy
 8012a5a:	f3bf 8f4f 	dsb	sy
 8012a5e:	61fb      	str	r3, [r7, #28]
}
 8012a60:	bf00      	nop
 8012a62:	bf00      	nop
 8012a64:	e7fd      	b.n	8012a62 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012a66:	2348      	movs	r3, #72	@ 0x48
 8012a68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	2b48      	cmp	r3, #72	@ 0x48
 8012a6e:	d00b      	beq.n	8012a88 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8012a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a74:	f383 8811 	msr	BASEPRI, r3
 8012a78:	f3bf 8f6f 	isb	sy
 8012a7c:	f3bf 8f4f 	dsb	sy
 8012a80:	61bb      	str	r3, [r7, #24]
}
 8012a82:	bf00      	nop
 8012a84:	bf00      	nop
 8012a86:	e7fd      	b.n	8012a84 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d00d      	beq.n	8012aae <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a94:	2201      	movs	r2, #1
 8012a96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012a9a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aa0:	9300      	str	r3, [sp, #0]
 8012aa2:	4613      	mov	r3, r2
 8012aa4:	687a      	ldr	r2, [r7, #4]
 8012aa6:	68b9      	ldr	r1, [r7, #8]
 8012aa8:	68f8      	ldr	r0, [r7, #12]
 8012aaa:	f000 f844 	bl	8012b36 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8012aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3730      	adds	r7, #48	@ 0x30
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}

08012ab8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b08a      	sub	sp, #40	@ 0x28
 8012abc:	af02      	add	r7, sp, #8
 8012abe:	60f8      	str	r0, [r7, #12]
 8012ac0:	60b9      	str	r1, [r7, #8]
 8012ac2:	4613      	mov	r3, r2
 8012ac4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d10b      	bne.n	8012ae4 <xQueueGenericCreate+0x2c>
	__asm volatile
 8012acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ad0:	f383 8811 	msr	BASEPRI, r3
 8012ad4:	f3bf 8f6f 	isb	sy
 8012ad8:	f3bf 8f4f 	dsb	sy
 8012adc:	613b      	str	r3, [r7, #16]
}
 8012ade:	bf00      	nop
 8012ae0:	bf00      	nop
 8012ae2:	e7fd      	b.n	8012ae0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d102      	bne.n	8012af0 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012aea:	2300      	movs	r3, #0
 8012aec:	61fb      	str	r3, [r7, #28]
 8012aee:	e004      	b.n	8012afa <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	68ba      	ldr	r2, [r7, #8]
 8012af4:	fb02 f303 	mul.w	r3, r2, r3
 8012af8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8012afa:	69fb      	ldr	r3, [r7, #28]
 8012afc:	3348      	adds	r3, #72	@ 0x48
 8012afe:	4618      	mov	r0, r3
 8012b00:	f002 f8de 	bl	8014cc0 <pvPortMalloc>
 8012b04:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012b06:	69bb      	ldr	r3, [r7, #24]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d00f      	beq.n	8012b2c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8012b0c:	69bb      	ldr	r3, [r7, #24]
 8012b0e:	3348      	adds	r3, #72	@ 0x48
 8012b10:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012b12:	69bb      	ldr	r3, [r7, #24]
 8012b14:	2200      	movs	r2, #0
 8012b16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012b1a:	79fa      	ldrb	r2, [r7, #7]
 8012b1c:	69bb      	ldr	r3, [r7, #24]
 8012b1e:	9300      	str	r3, [sp, #0]
 8012b20:	4613      	mov	r3, r2
 8012b22:	697a      	ldr	r2, [r7, #20]
 8012b24:	68b9      	ldr	r1, [r7, #8]
 8012b26:	68f8      	ldr	r0, [r7, #12]
 8012b28:	f000 f805 	bl	8012b36 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8012b2c:	69bb      	ldr	r3, [r7, #24]
	}
 8012b2e:	4618      	mov	r0, r3
 8012b30:	3720      	adds	r7, #32
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}

08012b36 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012b36:	b580      	push	{r7, lr}
 8012b38:	b084      	sub	sp, #16
 8012b3a:	af00      	add	r7, sp, #0
 8012b3c:	60f8      	str	r0, [r7, #12]
 8012b3e:	60b9      	str	r1, [r7, #8]
 8012b40:	607a      	str	r2, [r7, #4]
 8012b42:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d103      	bne.n	8012b52 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012b4a:	69bb      	ldr	r3, [r7, #24]
 8012b4c:	69ba      	ldr	r2, [r7, #24]
 8012b4e:	601a      	str	r2, [r3, #0]
 8012b50:	e002      	b.n	8012b58 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012b52:	69bb      	ldr	r3, [r7, #24]
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012b58:	69bb      	ldr	r3, [r7, #24]
 8012b5a:	68fa      	ldr	r2, [r7, #12]
 8012b5c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012b5e:	69bb      	ldr	r3, [r7, #24]
 8012b60:	68ba      	ldr	r2, [r7, #8]
 8012b62:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012b64:	2101      	movs	r1, #1
 8012b66:	69b8      	ldr	r0, [r7, #24]
 8012b68:	f7ff fec0 	bl	80128ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012b6c:	bf00      	nop
 8012b6e:	3710      	adds	r7, #16
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}

08012b74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b08e      	sub	sp, #56	@ 0x38
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	60f8      	str	r0, [r7, #12]
 8012b7c:	60b9      	str	r1, [r7, #8]
 8012b7e:	607a      	str	r2, [r7, #4]
 8012b80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012b82:	2300      	movs	r3, #0
 8012b84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d10b      	bne.n	8012ba8 <xQueueGenericSend+0x34>
	__asm volatile
 8012b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b94:	f383 8811 	msr	BASEPRI, r3
 8012b98:	f3bf 8f6f 	isb	sy
 8012b9c:	f3bf 8f4f 	dsb	sy
 8012ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012ba2:	bf00      	nop
 8012ba4:	bf00      	nop
 8012ba6:	e7fd      	b.n	8012ba4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d103      	bne.n	8012bb6 <xQueueGenericSend+0x42>
 8012bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d101      	bne.n	8012bba <xQueueGenericSend+0x46>
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	e000      	b.n	8012bbc <xQueueGenericSend+0x48>
 8012bba:	2300      	movs	r3, #0
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d10b      	bne.n	8012bd8 <xQueueGenericSend+0x64>
	__asm volatile
 8012bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bc4:	f383 8811 	msr	BASEPRI, r3
 8012bc8:	f3bf 8f6f 	isb	sy
 8012bcc:	f3bf 8f4f 	dsb	sy
 8012bd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012bd2:	bf00      	nop
 8012bd4:	bf00      	nop
 8012bd6:	e7fd      	b.n	8012bd4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	2b02      	cmp	r3, #2
 8012bdc:	d103      	bne.n	8012be6 <xQueueGenericSend+0x72>
 8012bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012be2:	2b01      	cmp	r3, #1
 8012be4:	d101      	bne.n	8012bea <xQueueGenericSend+0x76>
 8012be6:	2301      	movs	r3, #1
 8012be8:	e000      	b.n	8012bec <xQueueGenericSend+0x78>
 8012bea:	2300      	movs	r3, #0
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d10b      	bne.n	8012c08 <xQueueGenericSend+0x94>
	__asm volatile
 8012bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bf4:	f383 8811 	msr	BASEPRI, r3
 8012bf8:	f3bf 8f6f 	isb	sy
 8012bfc:	f3bf 8f4f 	dsb	sy
 8012c00:	623b      	str	r3, [r7, #32]
}
 8012c02:	bf00      	nop
 8012c04:	bf00      	nop
 8012c06:	e7fd      	b.n	8012c04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012c08:	f001 fc20 	bl	801444c <xTaskGetSchedulerState>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d102      	bne.n	8012c18 <xQueueGenericSend+0xa4>
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d101      	bne.n	8012c1c <xQueueGenericSend+0xa8>
 8012c18:	2301      	movs	r3, #1
 8012c1a:	e000      	b.n	8012c1e <xQueueGenericSend+0xaa>
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d10b      	bne.n	8012c3a <xQueueGenericSend+0xc6>
	__asm volatile
 8012c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c26:	f383 8811 	msr	BASEPRI, r3
 8012c2a:	f3bf 8f6f 	isb	sy
 8012c2e:	f3bf 8f4f 	dsb	sy
 8012c32:	61fb      	str	r3, [r7, #28]
}
 8012c34:	bf00      	nop
 8012c36:	bf00      	nop
 8012c38:	e7fd      	b.n	8012c36 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012c3a:	f001 ff3f 	bl	8014abc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012c46:	429a      	cmp	r2, r3
 8012c48:	d302      	bcc.n	8012c50 <xQueueGenericSend+0xdc>
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	2b02      	cmp	r3, #2
 8012c4e:	d129      	bne.n	8012ca4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012c50:	683a      	ldr	r2, [r7, #0]
 8012c52:	68b9      	ldr	r1, [r7, #8]
 8012c54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012c56:	f000 faec 	bl	8013232 <prvCopyDataToQueue>
 8012c5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d010      	beq.n	8012c86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c66:	3324      	adds	r3, #36	@ 0x24
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f001 f9f3 	bl	8014054 <xTaskRemoveFromEventList>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d013      	beq.n	8012c9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012c74:	4b3f      	ldr	r3, [pc, #252]	@ (8012d74 <xQueueGenericSend+0x200>)
 8012c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c7a:	601a      	str	r2, [r3, #0]
 8012c7c:	f3bf 8f4f 	dsb	sy
 8012c80:	f3bf 8f6f 	isb	sy
 8012c84:	e00a      	b.n	8012c9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d007      	beq.n	8012c9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012c8c:	4b39      	ldr	r3, [pc, #228]	@ (8012d74 <xQueueGenericSend+0x200>)
 8012c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c92:	601a      	str	r2, [r3, #0]
 8012c94:	f3bf 8f4f 	dsb	sy
 8012c98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012c9c:	f001 ff3e 	bl	8014b1c <vPortExitCritical>
				return pdPASS;
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	e063      	b.n	8012d6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d103      	bne.n	8012cb2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012caa:	f001 ff37 	bl	8014b1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	e05c      	b.n	8012d6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d106      	bne.n	8012cc6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012cb8:	f107 0314 	add.w	r3, r7, #20
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f001 fa2d 	bl	801411c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012cc2:	2301      	movs	r3, #1
 8012cc4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012cc6:	f001 ff29 	bl	8014b1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012cca:	f000 ffc9 	bl	8013c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012cce:	f001 fef5 	bl	8014abc <vPortEnterCritical>
 8012cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012cd8:	b25b      	sxtb	r3, r3
 8012cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cde:	d103      	bne.n	8012ce8 <xQueueGenericSend+0x174>
 8012ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012cee:	b25b      	sxtb	r3, r3
 8012cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cf4:	d103      	bne.n	8012cfe <xQueueGenericSend+0x18a>
 8012cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012cfe:	f001 ff0d 	bl	8014b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012d02:	1d3a      	adds	r2, r7, #4
 8012d04:	f107 0314 	add.w	r3, r7, #20
 8012d08:	4611      	mov	r1, r2
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f001 fa1c 	bl	8014148 <xTaskCheckForTimeOut>
 8012d10:	4603      	mov	r3, r0
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d124      	bne.n	8012d60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012d16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012d18:	f000 fb83 	bl	8013422 <prvIsQueueFull>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d018      	beq.n	8012d54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d24:	3310      	adds	r3, #16
 8012d26:	687a      	ldr	r2, [r7, #4]
 8012d28:	4611      	mov	r1, r2
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f001 f96c 	bl	8014008 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012d32:	f000 fb0e 	bl	8013352 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012d36:	f000 ffa1 	bl	8013c7c <xTaskResumeAll>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	f47f af7c 	bne.w	8012c3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8012d42:	4b0c      	ldr	r3, [pc, #48]	@ (8012d74 <xQueueGenericSend+0x200>)
 8012d44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d48:	601a      	str	r2, [r3, #0]
 8012d4a:	f3bf 8f4f 	dsb	sy
 8012d4e:	f3bf 8f6f 	isb	sy
 8012d52:	e772      	b.n	8012c3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012d54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012d56:	f000 fafc 	bl	8013352 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012d5a:	f000 ff8f 	bl	8013c7c <xTaskResumeAll>
 8012d5e:	e76c      	b.n	8012c3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012d60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012d62:	f000 faf6 	bl	8013352 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012d66:	f000 ff89 	bl	8013c7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012d6a:	2300      	movs	r3, #0
		}
	}
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	3738      	adds	r7, #56	@ 0x38
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}
 8012d74:	e000ed04 	.word	0xe000ed04

08012d78 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b08e      	sub	sp, #56	@ 0x38
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
 8012d80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d10b      	bne.n	8012da4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8012d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d90:	f383 8811 	msr	BASEPRI, r3
 8012d94:	f3bf 8f6f 	isb	sy
 8012d98:	f3bf 8f4f 	dsb	sy
 8012d9c:	623b      	str	r3, [r7, #32]
}
 8012d9e:	bf00      	nop
 8012da0:	bf00      	nop
 8012da2:	e7fd      	b.n	8012da0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d00b      	beq.n	8012dc4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8012dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012db0:	f383 8811 	msr	BASEPRI, r3
 8012db4:	f3bf 8f6f 	isb	sy
 8012db8:	f3bf 8f4f 	dsb	sy
 8012dbc:	61fb      	str	r3, [r7, #28]
}
 8012dbe:	bf00      	nop
 8012dc0:	bf00      	nop
 8012dc2:	e7fd      	b.n	8012dc0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8012dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d103      	bne.n	8012dd4 <xQueueGiveFromISR+0x5c>
 8012dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dce:	685b      	ldr	r3, [r3, #4]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d101      	bne.n	8012dd8 <xQueueGiveFromISR+0x60>
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	e000      	b.n	8012dda <xQueueGiveFromISR+0x62>
 8012dd8:	2300      	movs	r3, #0
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d10b      	bne.n	8012df6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8012dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012de2:	f383 8811 	msr	BASEPRI, r3
 8012de6:	f3bf 8f6f 	isb	sy
 8012dea:	f3bf 8f4f 	dsb	sy
 8012dee:	61bb      	str	r3, [r7, #24]
}
 8012df0:	bf00      	nop
 8012df2:	bf00      	nop
 8012df4:	e7fd      	b.n	8012df2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012df6:	f001 ff23 	bl	8014c40 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012dfa:	f3ef 8211 	mrs	r2, BASEPRI
 8012dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e02:	f383 8811 	msr	BASEPRI, r3
 8012e06:	f3bf 8f6f 	isb	sy
 8012e0a:	f3bf 8f4f 	dsb	sy
 8012e0e:	617a      	str	r2, [r7, #20]
 8012e10:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012e12:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e1a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d22b      	bcs.n	8012e7e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012e2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e32:	1c5a      	adds	r2, r3, #1
 8012e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e36:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012e38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e40:	d112      	bne.n	8012e68 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d016      	beq.n	8012e78 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e4c:	3324      	adds	r3, #36	@ 0x24
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f001 f900 	bl	8014054 <xTaskRemoveFromEventList>
 8012e54:	4603      	mov	r3, r0
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d00e      	beq.n	8012e78 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012e5a:	683b      	ldr	r3, [r7, #0]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d00b      	beq.n	8012e78 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	2201      	movs	r2, #1
 8012e64:	601a      	str	r2, [r3, #0]
 8012e66:	e007      	b.n	8012e78 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012e6c:	3301      	adds	r3, #1
 8012e6e:	b2db      	uxtb	r3, r3
 8012e70:	b25a      	sxtb	r2, r3
 8012e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012e78:	2301      	movs	r3, #1
 8012e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e7c:	e001      	b.n	8012e82 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e84:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012e8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012e90:	4618      	mov	r0, r3
 8012e92:	3738      	adds	r7, #56	@ 0x38
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}

08012e98 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b08e      	sub	sp, #56	@ 0x38
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
 8012ea0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d10b      	bne.n	8012ecc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8012eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012eb8:	f383 8811 	msr	BASEPRI, r3
 8012ebc:	f3bf 8f6f 	isb	sy
 8012ec0:	f3bf 8f4f 	dsb	sy
 8012ec4:	623b      	str	r3, [r7, #32]
}
 8012ec6:	bf00      	nop
 8012ec8:	bf00      	nop
 8012eca:	e7fd      	b.n	8012ec8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d00b      	beq.n	8012eec <xQueueSemaphoreTake+0x54>
	__asm volatile
 8012ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ed8:	f383 8811 	msr	BASEPRI, r3
 8012edc:	f3bf 8f6f 	isb	sy
 8012ee0:	f3bf 8f4f 	dsb	sy
 8012ee4:	61fb      	str	r3, [r7, #28]
}
 8012ee6:	bf00      	nop
 8012ee8:	bf00      	nop
 8012eea:	e7fd      	b.n	8012ee8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012eec:	f001 faae 	bl	801444c <xTaskGetSchedulerState>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d102      	bne.n	8012efc <xQueueSemaphoreTake+0x64>
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d101      	bne.n	8012f00 <xQueueSemaphoreTake+0x68>
 8012efc:	2301      	movs	r3, #1
 8012efe:	e000      	b.n	8012f02 <xQueueSemaphoreTake+0x6a>
 8012f00:	2300      	movs	r3, #0
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d10b      	bne.n	8012f1e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8012f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f0a:	f383 8811 	msr	BASEPRI, r3
 8012f0e:	f3bf 8f6f 	isb	sy
 8012f12:	f3bf 8f4f 	dsb	sy
 8012f16:	61bb      	str	r3, [r7, #24]
}
 8012f18:	bf00      	nop
 8012f1a:	bf00      	nop
 8012f1c:	e7fd      	b.n	8012f1a <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012f1e:	f001 fdcd 	bl	8014abc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f26:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d024      	beq.n	8012f78 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f30:	1e5a      	subs	r2, r3, #1
 8012f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f34:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d104      	bne.n	8012f48 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012f3e:	f001 fc53 	bl	80147e8 <pvTaskIncrementMutexHeldCount>
 8012f42:	4602      	mov	r2, r0
 8012f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f46:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f4a:	691b      	ldr	r3, [r3, #16]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d00f      	beq.n	8012f70 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f52:	3310      	adds	r3, #16
 8012f54:	4618      	mov	r0, r3
 8012f56:	f001 f87d 	bl	8014054 <xTaskRemoveFromEventList>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d007      	beq.n	8012f70 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012f60:	4b54      	ldr	r3, [pc, #336]	@ (80130b4 <xQueueSemaphoreTake+0x21c>)
 8012f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012f66:	601a      	str	r2, [r3, #0]
 8012f68:	f3bf 8f4f 	dsb	sy
 8012f6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012f70:	f001 fdd4 	bl	8014b1c <vPortExitCritical>
				return pdPASS;
 8012f74:	2301      	movs	r3, #1
 8012f76:	e098      	b.n	80130aa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d112      	bne.n	8012fa4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d00b      	beq.n	8012f9c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8012f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f88:	f383 8811 	msr	BASEPRI, r3
 8012f8c:	f3bf 8f6f 	isb	sy
 8012f90:	f3bf 8f4f 	dsb	sy
 8012f94:	617b      	str	r3, [r7, #20]
}
 8012f96:	bf00      	nop
 8012f98:	bf00      	nop
 8012f9a:	e7fd      	b.n	8012f98 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012f9c:	f001 fdbe 	bl	8014b1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	e082      	b.n	80130aa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d106      	bne.n	8012fb8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012faa:	f107 030c 	add.w	r3, r7, #12
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f001 f8b4 	bl	801411c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012fb4:	2301      	movs	r3, #1
 8012fb6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012fb8:	f001 fdb0 	bl	8014b1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012fbc:	f000 fe50 	bl	8013c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012fc0:	f001 fd7c 	bl	8014abc <vPortEnterCritical>
 8012fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fc6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012fca:	b25b      	sxtb	r3, r3
 8012fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fd0:	d103      	bne.n	8012fda <xQueueSemaphoreTake+0x142>
 8012fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012fe0:	b25b      	sxtb	r3, r3
 8012fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fe6:	d103      	bne.n	8012ff0 <xQueueSemaphoreTake+0x158>
 8012fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fea:	2200      	movs	r2, #0
 8012fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012ff0:	f001 fd94 	bl	8014b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012ff4:	463a      	mov	r2, r7
 8012ff6:	f107 030c 	add.w	r3, r7, #12
 8012ffa:	4611      	mov	r1, r2
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f001 f8a3 	bl	8014148 <xTaskCheckForTimeOut>
 8013002:	4603      	mov	r3, r0
 8013004:	2b00      	cmp	r3, #0
 8013006:	d132      	bne.n	801306e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013008:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801300a:	f000 f9f4 	bl	80133f6 <prvIsQueueEmpty>
 801300e:	4603      	mov	r3, r0
 8013010:	2b00      	cmp	r3, #0
 8013012:	d026      	beq.n	8013062 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d109      	bne.n	8013030 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801301c:	f001 fd4e 	bl	8014abc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8013020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013022:	685b      	ldr	r3, [r3, #4]
 8013024:	4618      	mov	r0, r3
 8013026:	f001 fa2f 	bl	8014488 <xTaskPriorityInherit>
 801302a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801302c:	f001 fd76 	bl	8014b1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013032:	3324      	adds	r3, #36	@ 0x24
 8013034:	683a      	ldr	r2, [r7, #0]
 8013036:	4611      	mov	r1, r2
 8013038:	4618      	mov	r0, r3
 801303a:	f000 ffe5 	bl	8014008 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801303e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013040:	f000 f987 	bl	8013352 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013044:	f000 fe1a 	bl	8013c7c <xTaskResumeAll>
 8013048:	4603      	mov	r3, r0
 801304a:	2b00      	cmp	r3, #0
 801304c:	f47f af67 	bne.w	8012f1e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013050:	4b18      	ldr	r3, [pc, #96]	@ (80130b4 <xQueueSemaphoreTake+0x21c>)
 8013052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013056:	601a      	str	r2, [r3, #0]
 8013058:	f3bf 8f4f 	dsb	sy
 801305c:	f3bf 8f6f 	isb	sy
 8013060:	e75d      	b.n	8012f1e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013062:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013064:	f000 f975 	bl	8013352 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013068:	f000 fe08 	bl	8013c7c <xTaskResumeAll>
 801306c:	e757      	b.n	8012f1e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801306e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013070:	f000 f96f 	bl	8013352 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013074:	f000 fe02 	bl	8013c7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013078:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801307a:	f000 f9bc 	bl	80133f6 <prvIsQueueEmpty>
 801307e:	4603      	mov	r3, r0
 8013080:	2b00      	cmp	r3, #0
 8013082:	f43f af4c 	beq.w	8012f1e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013088:	2b00      	cmp	r3, #0
 801308a:	d00d      	beq.n	80130a8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801308c:	f001 fd16 	bl	8014abc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013090:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013092:	f000 f8b7 	bl	8013204 <prvGetDisinheritPriorityAfterTimeout>
 8013096:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8013098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801309a:	685b      	ldr	r3, [r3, #4]
 801309c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801309e:	4618      	mov	r0, r3
 80130a0:	f001 fb00 	bl	80146a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80130a4:	f001 fd3a 	bl	8014b1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80130a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3738      	adds	r7, #56	@ 0x38
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}
 80130b2:	bf00      	nop
 80130b4:	e000ed04 	.word	0xe000ed04

080130b8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b08e      	sub	sp, #56	@ 0x38
 80130bc:	af00      	add	r7, sp, #0
 80130be:	60f8      	str	r0, [r7, #12]
 80130c0:	60b9      	str	r1, [r7, #8]
 80130c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80130c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d10b      	bne.n	80130e6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80130ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130d2:	f383 8811 	msr	BASEPRI, r3
 80130d6:	f3bf 8f6f 	isb	sy
 80130da:	f3bf 8f4f 	dsb	sy
 80130de:	623b      	str	r3, [r7, #32]
}
 80130e0:	bf00      	nop
 80130e2:	bf00      	nop
 80130e4:	e7fd      	b.n	80130e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80130e6:	68bb      	ldr	r3, [r7, #8]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d103      	bne.n	80130f4 <xQueueReceiveFromISR+0x3c>
 80130ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d101      	bne.n	80130f8 <xQueueReceiveFromISR+0x40>
 80130f4:	2301      	movs	r3, #1
 80130f6:	e000      	b.n	80130fa <xQueueReceiveFromISR+0x42>
 80130f8:	2300      	movs	r3, #0
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d10b      	bne.n	8013116 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80130fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013102:	f383 8811 	msr	BASEPRI, r3
 8013106:	f3bf 8f6f 	isb	sy
 801310a:	f3bf 8f4f 	dsb	sy
 801310e:	61fb      	str	r3, [r7, #28]
}
 8013110:	bf00      	nop
 8013112:	bf00      	nop
 8013114:	e7fd      	b.n	8013112 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013116:	f001 fd93 	bl	8014c40 <vPortValidateInterruptPriority>
	__asm volatile
 801311a:	f3ef 8211 	mrs	r2, BASEPRI
 801311e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013122:	f383 8811 	msr	BASEPRI, r3
 8013126:	f3bf 8f6f 	isb	sy
 801312a:	f3bf 8f4f 	dsb	sy
 801312e:	61ba      	str	r2, [r7, #24]
 8013130:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013132:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013134:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801313a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801313c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801313e:	2b00      	cmp	r3, #0
 8013140:	d02f      	beq.n	80131a2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013144:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013148:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801314c:	68b9      	ldr	r1, [r7, #8]
 801314e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013150:	f000 f8d9 	bl	8013306 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013156:	1e5a      	subs	r2, r3, #1
 8013158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801315a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801315c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013164:	d112      	bne.n	801318c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013168:	691b      	ldr	r3, [r3, #16]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d016      	beq.n	801319c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801316e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013170:	3310      	adds	r3, #16
 8013172:	4618      	mov	r0, r3
 8013174:	f000 ff6e 	bl	8014054 <xTaskRemoveFromEventList>
 8013178:	4603      	mov	r3, r0
 801317a:	2b00      	cmp	r3, #0
 801317c:	d00e      	beq.n	801319c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d00b      	beq.n	801319c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	2201      	movs	r2, #1
 8013188:	601a      	str	r2, [r3, #0]
 801318a:	e007      	b.n	801319c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801318c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013190:	3301      	adds	r3, #1
 8013192:	b2db      	uxtb	r3, r3
 8013194:	b25a      	sxtb	r2, r3
 8013196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801319c:	2301      	movs	r3, #1
 801319e:	637b      	str	r3, [r7, #52]	@ 0x34
 80131a0:	e001      	b.n	80131a6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80131a2:	2300      	movs	r3, #0
 80131a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80131a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80131aa:	693b      	ldr	r3, [r7, #16]
 80131ac:	f383 8811 	msr	BASEPRI, r3
}
 80131b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80131b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80131b4:	4618      	mov	r0, r3
 80131b6:	3738      	adds	r7, #56	@ 0x38
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}

080131bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b084      	sub	sp, #16
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d10b      	bne.n	80131e6 <vQueueDelete+0x2a>
	__asm volatile
 80131ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131d2:	f383 8811 	msr	BASEPRI, r3
 80131d6:	f3bf 8f6f 	isb	sy
 80131da:	f3bf 8f4f 	dsb	sy
 80131de:	60bb      	str	r3, [r7, #8]
}
 80131e0:	bf00      	nop
 80131e2:	bf00      	nop
 80131e4:	e7fd      	b.n	80131e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80131e6:	68f8      	ldr	r0, [r7, #12]
 80131e8:	f000 f934 	bl	8013454 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d102      	bne.n	80131fc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80131f6:	68f8      	ldr	r0, [r7, #12]
 80131f8:	f001 fe2a 	bl	8014e50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80131fc:	bf00      	nop
 80131fe:	3710      	adds	r7, #16
 8013200:	46bd      	mov	sp, r7
 8013202:	bd80      	pop	{r7, pc}

08013204 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013204:	b480      	push	{r7}
 8013206:	b085      	sub	sp, #20
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013210:	2b00      	cmp	r3, #0
 8013212:	d006      	beq.n	8013222 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	f1c3 0307 	rsb	r3, r3, #7
 801321e:	60fb      	str	r3, [r7, #12]
 8013220:	e001      	b.n	8013226 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013222:	2300      	movs	r3, #0
 8013224:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013226:	68fb      	ldr	r3, [r7, #12]
	}
 8013228:	4618      	mov	r0, r3
 801322a:	3714      	adds	r7, #20
 801322c:	46bd      	mov	sp, r7
 801322e:	bc80      	pop	{r7}
 8013230:	4770      	bx	lr

08013232 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013232:	b580      	push	{r7, lr}
 8013234:	b086      	sub	sp, #24
 8013236:	af00      	add	r7, sp, #0
 8013238:	60f8      	str	r0, [r7, #12]
 801323a:	60b9      	str	r1, [r7, #8]
 801323c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801323e:	2300      	movs	r3, #0
 8013240:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013246:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801324c:	2b00      	cmp	r3, #0
 801324e:	d10d      	bne.n	801326c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d14d      	bne.n	80132f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	685b      	ldr	r3, [r3, #4]
 801325c:	4618      	mov	r0, r3
 801325e:	f001 f999 	bl	8014594 <xTaskPriorityDisinherit>
 8013262:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	2200      	movs	r2, #0
 8013268:	605a      	str	r2, [r3, #4]
 801326a:	e043      	b.n	80132f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d119      	bne.n	80132a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	6898      	ldr	r0, [r3, #8]
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801327a:	461a      	mov	r2, r3
 801327c:	68b9      	ldr	r1, [r7, #8]
 801327e:	f002 f80b 	bl	8015298 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	689a      	ldr	r2, [r3, #8]
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801328a:	441a      	add	r2, r3
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	689a      	ldr	r2, [r3, #8]
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	429a      	cmp	r2, r3
 801329a:	d32b      	bcc.n	80132f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	681a      	ldr	r2, [r3, #0]
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	609a      	str	r2, [r3, #8]
 80132a4:	e026      	b.n	80132f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	68d8      	ldr	r0, [r3, #12]
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132ae:	461a      	mov	r2, r3
 80132b0:	68b9      	ldr	r1, [r7, #8]
 80132b2:	f001 fff1 	bl	8015298 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	68da      	ldr	r2, [r3, #12]
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132be:	425b      	negs	r3, r3
 80132c0:	441a      	add	r2, r3
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	68da      	ldr	r2, [r3, #12]
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d207      	bcs.n	80132e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	685a      	ldr	r2, [r3, #4]
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132da:	425b      	negs	r3, r3
 80132dc:	441a      	add	r2, r3
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	2b02      	cmp	r3, #2
 80132e6:	d105      	bne.n	80132f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80132e8:	693b      	ldr	r3, [r7, #16]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d002      	beq.n	80132f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80132ee:	693b      	ldr	r3, [r7, #16]
 80132f0:	3b01      	subs	r3, #1
 80132f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80132f4:	693b      	ldr	r3, [r7, #16]
 80132f6:	1c5a      	adds	r2, r3, #1
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80132fc:	697b      	ldr	r3, [r7, #20]
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3718      	adds	r7, #24
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}

08013306 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013306:	b580      	push	{r7, lr}
 8013308:	b082      	sub	sp, #8
 801330a:	af00      	add	r7, sp, #0
 801330c:	6078      	str	r0, [r7, #4]
 801330e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013314:	2b00      	cmp	r3, #0
 8013316:	d018      	beq.n	801334a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	68da      	ldr	r2, [r3, #12]
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013320:	441a      	add	r2, r3
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	68da      	ldr	r2, [r3, #12]
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	685b      	ldr	r3, [r3, #4]
 801332e:	429a      	cmp	r2, r3
 8013330:	d303      	bcc.n	801333a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681a      	ldr	r2, [r3, #0]
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	68d9      	ldr	r1, [r3, #12]
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013342:	461a      	mov	r2, r3
 8013344:	6838      	ldr	r0, [r7, #0]
 8013346:	f001 ffa7 	bl	8015298 <memcpy>
	}
}
 801334a:	bf00      	nop
 801334c:	3708      	adds	r7, #8
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}

08013352 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013352:	b580      	push	{r7, lr}
 8013354:	b084      	sub	sp, #16
 8013356:	af00      	add	r7, sp, #0
 8013358:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801335a:	f001 fbaf 	bl	8014abc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013364:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013366:	e011      	b.n	801338c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801336c:	2b00      	cmp	r3, #0
 801336e:	d012      	beq.n	8013396 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	3324      	adds	r3, #36	@ 0x24
 8013374:	4618      	mov	r0, r3
 8013376:	f000 fe6d 	bl	8014054 <xTaskRemoveFromEventList>
 801337a:	4603      	mov	r3, r0
 801337c:	2b00      	cmp	r3, #0
 801337e:	d001      	beq.n	8013384 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013380:	f000 ff46 	bl	8014210 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013384:	7bfb      	ldrb	r3, [r7, #15]
 8013386:	3b01      	subs	r3, #1
 8013388:	b2db      	uxtb	r3, r3
 801338a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801338c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013390:	2b00      	cmp	r3, #0
 8013392:	dce9      	bgt.n	8013368 <prvUnlockQueue+0x16>
 8013394:	e000      	b.n	8013398 <prvUnlockQueue+0x46>
					break;
 8013396:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	22ff      	movs	r2, #255	@ 0xff
 801339c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80133a0:	f001 fbbc 	bl	8014b1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80133a4:	f001 fb8a 	bl	8014abc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80133ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80133b0:	e011      	b.n	80133d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	691b      	ldr	r3, [r3, #16]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d012      	beq.n	80133e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	3310      	adds	r3, #16
 80133be:	4618      	mov	r0, r3
 80133c0:	f000 fe48 	bl	8014054 <xTaskRemoveFromEventList>
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d001      	beq.n	80133ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80133ca:	f000 ff21 	bl	8014210 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80133ce:	7bbb      	ldrb	r3, [r7, #14]
 80133d0:	3b01      	subs	r3, #1
 80133d2:	b2db      	uxtb	r3, r3
 80133d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80133d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	dce9      	bgt.n	80133b2 <prvUnlockQueue+0x60>
 80133de:	e000      	b.n	80133e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80133e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	22ff      	movs	r2, #255	@ 0xff
 80133e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80133ea:	f001 fb97 	bl	8014b1c <vPortExitCritical>
}
 80133ee:	bf00      	nop
 80133f0:	3710      	adds	r7, #16
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}

080133f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80133f6:	b580      	push	{r7, lr}
 80133f8:	b084      	sub	sp, #16
 80133fa:	af00      	add	r7, sp, #0
 80133fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80133fe:	f001 fb5d 	bl	8014abc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013406:	2b00      	cmp	r3, #0
 8013408:	d102      	bne.n	8013410 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801340a:	2301      	movs	r3, #1
 801340c:	60fb      	str	r3, [r7, #12]
 801340e:	e001      	b.n	8013414 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013410:	2300      	movs	r3, #0
 8013412:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013414:	f001 fb82 	bl	8014b1c <vPortExitCritical>

	return xReturn;
 8013418:	68fb      	ldr	r3, [r7, #12]
}
 801341a:	4618      	mov	r0, r3
 801341c:	3710      	adds	r7, #16
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}

08013422 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013422:	b580      	push	{r7, lr}
 8013424:	b084      	sub	sp, #16
 8013426:	af00      	add	r7, sp, #0
 8013428:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801342a:	f001 fb47 	bl	8014abc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013436:	429a      	cmp	r2, r3
 8013438:	d102      	bne.n	8013440 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801343a:	2301      	movs	r3, #1
 801343c:	60fb      	str	r3, [r7, #12]
 801343e:	e001      	b.n	8013444 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013440:	2300      	movs	r3, #0
 8013442:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013444:	f001 fb6a 	bl	8014b1c <vPortExitCritical>

	return xReturn;
 8013448:	68fb      	ldr	r3, [r7, #12]
}
 801344a:	4618      	mov	r0, r3
 801344c:	3710      	adds	r7, #16
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
	...

08013454 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013454:	b480      	push	{r7}
 8013456:	b085      	sub	sp, #20
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801345c:	2300      	movs	r3, #0
 801345e:	60fb      	str	r3, [r7, #12]
 8013460:	e016      	b.n	8013490 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013462:	4a10      	ldr	r2, [pc, #64]	@ (80134a4 <vQueueUnregisterQueue+0x50>)
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	00db      	lsls	r3, r3, #3
 8013468:	4413      	add	r3, r2
 801346a:	685b      	ldr	r3, [r3, #4]
 801346c:	687a      	ldr	r2, [r7, #4]
 801346e:	429a      	cmp	r2, r3
 8013470:	d10b      	bne.n	801348a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013472:	4a0c      	ldr	r2, [pc, #48]	@ (80134a4 <vQueueUnregisterQueue+0x50>)
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	2100      	movs	r1, #0
 8013478:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801347c:	4a09      	ldr	r2, [pc, #36]	@ (80134a4 <vQueueUnregisterQueue+0x50>)
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	00db      	lsls	r3, r3, #3
 8013482:	4413      	add	r3, r2
 8013484:	2200      	movs	r2, #0
 8013486:	605a      	str	r2, [r3, #4]
				break;
 8013488:	e006      	b.n	8013498 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	3301      	adds	r3, #1
 801348e:	60fb      	str	r3, [r7, #12]
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	2b07      	cmp	r3, #7
 8013494:	d9e5      	bls.n	8013462 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013496:	bf00      	nop
 8013498:	bf00      	nop
 801349a:	3714      	adds	r7, #20
 801349c:	46bd      	mov	sp, r7
 801349e:	bc80      	pop	{r7}
 80134a0:	4770      	bx	lr
 80134a2:	bf00      	nop
 80134a4:	2000133c 	.word	0x2000133c

080134a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b08e      	sub	sp, #56	@ 0x38
 80134ac:	af04      	add	r7, sp, #16
 80134ae:	60f8      	str	r0, [r7, #12]
 80134b0:	60b9      	str	r1, [r7, #8]
 80134b2:	607a      	str	r2, [r7, #4]
 80134b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80134b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d10b      	bne.n	80134d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80134bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134c0:	f383 8811 	msr	BASEPRI, r3
 80134c4:	f3bf 8f6f 	isb	sy
 80134c8:	f3bf 8f4f 	dsb	sy
 80134cc:	623b      	str	r3, [r7, #32]
}
 80134ce:	bf00      	nop
 80134d0:	bf00      	nop
 80134d2:	e7fd      	b.n	80134d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80134d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d10b      	bne.n	80134f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80134da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134de:	f383 8811 	msr	BASEPRI, r3
 80134e2:	f3bf 8f6f 	isb	sy
 80134e6:	f3bf 8f4f 	dsb	sy
 80134ea:	61fb      	str	r3, [r7, #28]
}
 80134ec:	bf00      	nop
 80134ee:	bf00      	nop
 80134f0:	e7fd      	b.n	80134ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80134f2:	2354      	movs	r3, #84	@ 0x54
 80134f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80134f6:	693b      	ldr	r3, [r7, #16]
 80134f8:	2b54      	cmp	r3, #84	@ 0x54
 80134fa:	d00b      	beq.n	8013514 <xTaskCreateStatic+0x6c>
	__asm volatile
 80134fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013500:	f383 8811 	msr	BASEPRI, r3
 8013504:	f3bf 8f6f 	isb	sy
 8013508:	f3bf 8f4f 	dsb	sy
 801350c:	61bb      	str	r3, [r7, #24]
}
 801350e:	bf00      	nop
 8013510:	bf00      	nop
 8013512:	e7fd      	b.n	8013510 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013516:	2b00      	cmp	r3, #0
 8013518:	d01e      	beq.n	8013558 <xTaskCreateStatic+0xb0>
 801351a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801351c:	2b00      	cmp	r3, #0
 801351e:	d01b      	beq.n	8013558 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013522:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013526:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013528:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801352c:	2202      	movs	r2, #2
 801352e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013532:	2300      	movs	r3, #0
 8013534:	9303      	str	r3, [sp, #12]
 8013536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013538:	9302      	str	r3, [sp, #8]
 801353a:	f107 0314 	add.w	r3, r7, #20
 801353e:	9301      	str	r3, [sp, #4]
 8013540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013542:	9300      	str	r3, [sp, #0]
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	687a      	ldr	r2, [r7, #4]
 8013548:	68b9      	ldr	r1, [r7, #8]
 801354a:	68f8      	ldr	r0, [r7, #12]
 801354c:	f000 f850 	bl	80135f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013550:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013552:	f000 f8d5 	bl	8013700 <prvAddNewTaskToReadyList>
 8013556:	e001      	b.n	801355c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8013558:	2300      	movs	r3, #0
 801355a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801355c:	697b      	ldr	r3, [r7, #20]
	}
 801355e:	4618      	mov	r0, r3
 8013560:	3728      	adds	r7, #40	@ 0x28
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}

08013566 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013566:	b580      	push	{r7, lr}
 8013568:	b08c      	sub	sp, #48	@ 0x30
 801356a:	af04      	add	r7, sp, #16
 801356c:	60f8      	str	r0, [r7, #12]
 801356e:	60b9      	str	r1, [r7, #8]
 8013570:	603b      	str	r3, [r7, #0]
 8013572:	4613      	mov	r3, r2
 8013574:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013576:	88fb      	ldrh	r3, [r7, #6]
 8013578:	009b      	lsls	r3, r3, #2
 801357a:	4618      	mov	r0, r3
 801357c:	f001 fba0 	bl	8014cc0 <pvPortMalloc>
 8013580:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013582:	697b      	ldr	r3, [r7, #20]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d00e      	beq.n	80135a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8013588:	2054      	movs	r0, #84	@ 0x54
 801358a:	f001 fb99 	bl	8014cc0 <pvPortMalloc>
 801358e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013590:	69fb      	ldr	r3, [r7, #28]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d003      	beq.n	801359e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013596:	69fb      	ldr	r3, [r7, #28]
 8013598:	697a      	ldr	r2, [r7, #20]
 801359a:	631a      	str	r2, [r3, #48]	@ 0x30
 801359c:	e005      	b.n	80135aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801359e:	6978      	ldr	r0, [r7, #20]
 80135a0:	f001 fc56 	bl	8014e50 <vPortFree>
 80135a4:	e001      	b.n	80135aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80135a6:	2300      	movs	r3, #0
 80135a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80135aa:	69fb      	ldr	r3, [r7, #28]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d017      	beq.n	80135e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80135b0:	69fb      	ldr	r3, [r7, #28]
 80135b2:	2200      	movs	r2, #0
 80135b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80135b8:	88fa      	ldrh	r2, [r7, #6]
 80135ba:	2300      	movs	r3, #0
 80135bc:	9303      	str	r3, [sp, #12]
 80135be:	69fb      	ldr	r3, [r7, #28]
 80135c0:	9302      	str	r3, [sp, #8]
 80135c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135c4:	9301      	str	r3, [sp, #4]
 80135c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135c8:	9300      	str	r3, [sp, #0]
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	68b9      	ldr	r1, [r7, #8]
 80135ce:	68f8      	ldr	r0, [r7, #12]
 80135d0:	f000 f80e 	bl	80135f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80135d4:	69f8      	ldr	r0, [r7, #28]
 80135d6:	f000 f893 	bl	8013700 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80135da:	2301      	movs	r3, #1
 80135dc:	61bb      	str	r3, [r7, #24]
 80135de:	e002      	b.n	80135e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80135e0:	f04f 33ff 	mov.w	r3, #4294967295
 80135e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80135e6:	69bb      	ldr	r3, [r7, #24]
	}
 80135e8:	4618      	mov	r0, r3
 80135ea:	3720      	adds	r7, #32
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}

080135f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b088      	sub	sp, #32
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	60f8      	str	r0, [r7, #12]
 80135f8:	60b9      	str	r1, [r7, #8]
 80135fa:	607a      	str	r2, [r7, #4]
 80135fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80135fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013600:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	009b      	lsls	r3, r3, #2
 8013606:	461a      	mov	r2, r3
 8013608:	21a5      	movs	r1, #165	@ 0xa5
 801360a:	f001 fe01 	bl	8015210 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801360e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013610:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013618:	3b01      	subs	r3, #1
 801361a:	009b      	lsls	r3, r3, #2
 801361c:	4413      	add	r3, r2
 801361e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8013620:	69bb      	ldr	r3, [r7, #24]
 8013622:	f023 0307 	bic.w	r3, r3, #7
 8013626:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013628:	69bb      	ldr	r3, [r7, #24]
 801362a:	f003 0307 	and.w	r3, r3, #7
 801362e:	2b00      	cmp	r3, #0
 8013630:	d00b      	beq.n	801364a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8013632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013636:	f383 8811 	msr	BASEPRI, r3
 801363a:	f3bf 8f6f 	isb	sy
 801363e:	f3bf 8f4f 	dsb	sy
 8013642:	617b      	str	r3, [r7, #20]
}
 8013644:	bf00      	nop
 8013646:	bf00      	nop
 8013648:	e7fd      	b.n	8013646 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801364a:	2300      	movs	r3, #0
 801364c:	61fb      	str	r3, [r7, #28]
 801364e:	e012      	b.n	8013676 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013650:	68ba      	ldr	r2, [r7, #8]
 8013652:	69fb      	ldr	r3, [r7, #28]
 8013654:	4413      	add	r3, r2
 8013656:	7819      	ldrb	r1, [r3, #0]
 8013658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801365a:	69fb      	ldr	r3, [r7, #28]
 801365c:	4413      	add	r3, r2
 801365e:	3334      	adds	r3, #52	@ 0x34
 8013660:	460a      	mov	r2, r1
 8013662:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8013664:	68ba      	ldr	r2, [r7, #8]
 8013666:	69fb      	ldr	r3, [r7, #28]
 8013668:	4413      	add	r3, r2
 801366a:	781b      	ldrb	r3, [r3, #0]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d006      	beq.n	801367e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013670:	69fb      	ldr	r3, [r7, #28]
 8013672:	3301      	adds	r3, #1
 8013674:	61fb      	str	r3, [r7, #28]
 8013676:	69fb      	ldr	r3, [r7, #28]
 8013678:	2b0f      	cmp	r3, #15
 801367a:	d9e9      	bls.n	8013650 <prvInitialiseNewTask+0x60>
 801367c:	e000      	b.n	8013680 <prvInitialiseNewTask+0x90>
		{
			break;
 801367e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013682:	2200      	movs	r2, #0
 8013684:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801368a:	2b06      	cmp	r3, #6
 801368c:	d901      	bls.n	8013692 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801368e:	2306      	movs	r3, #6
 8013690:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013694:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013696:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801369a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801369c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801369e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136a0:	2200      	movs	r2, #0
 80136a2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80136a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136a6:	3304      	adds	r3, #4
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7ff f88f 	bl	80127cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80136ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136b0:	3318      	adds	r3, #24
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7ff f88a 	bl	80127cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80136b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136c0:	f1c3 0207 	rsb	r2, r3, #7
 80136c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80136c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80136ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136d0:	2200      	movs	r2, #0
 80136d2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80136d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136d6:	2200      	movs	r2, #0
 80136d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80136dc:	683a      	ldr	r2, [r7, #0]
 80136de:	68f9      	ldr	r1, [r7, #12]
 80136e0:	69b8      	ldr	r0, [r7, #24]
 80136e2:	f001 f8fb 	bl	80148dc <pxPortInitialiseStack>
 80136e6:	4602      	mov	r2, r0
 80136e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80136ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d002      	beq.n	80136f8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80136f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80136f8:	bf00      	nop
 80136fa:	3720      	adds	r7, #32
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013708:	f001 f9d8 	bl	8014abc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801370c:	4b2a      	ldr	r3, [pc, #168]	@ (80137b8 <prvAddNewTaskToReadyList+0xb8>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	3301      	adds	r3, #1
 8013712:	4a29      	ldr	r2, [pc, #164]	@ (80137b8 <prvAddNewTaskToReadyList+0xb8>)
 8013714:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013716:	4b29      	ldr	r3, [pc, #164]	@ (80137bc <prvAddNewTaskToReadyList+0xbc>)
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d109      	bne.n	8013732 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801371e:	4a27      	ldr	r2, [pc, #156]	@ (80137bc <prvAddNewTaskToReadyList+0xbc>)
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013724:	4b24      	ldr	r3, [pc, #144]	@ (80137b8 <prvAddNewTaskToReadyList+0xb8>)
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	2b01      	cmp	r3, #1
 801372a:	d110      	bne.n	801374e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801372c:	f000 fd94 	bl	8014258 <prvInitialiseTaskLists>
 8013730:	e00d      	b.n	801374e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013732:	4b23      	ldr	r3, [pc, #140]	@ (80137c0 <prvAddNewTaskToReadyList+0xc0>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d109      	bne.n	801374e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801373a:	4b20      	ldr	r3, [pc, #128]	@ (80137bc <prvAddNewTaskToReadyList+0xbc>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013744:	429a      	cmp	r2, r3
 8013746:	d802      	bhi.n	801374e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013748:	4a1c      	ldr	r2, [pc, #112]	@ (80137bc <prvAddNewTaskToReadyList+0xbc>)
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801374e:	4b1d      	ldr	r3, [pc, #116]	@ (80137c4 <prvAddNewTaskToReadyList+0xc4>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	3301      	adds	r3, #1
 8013754:	4a1b      	ldr	r2, [pc, #108]	@ (80137c4 <prvAddNewTaskToReadyList+0xc4>)
 8013756:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801375c:	2201      	movs	r2, #1
 801375e:	409a      	lsls	r2, r3
 8013760:	4b19      	ldr	r3, [pc, #100]	@ (80137c8 <prvAddNewTaskToReadyList+0xc8>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	4313      	orrs	r3, r2
 8013766:	4a18      	ldr	r2, [pc, #96]	@ (80137c8 <prvAddNewTaskToReadyList+0xc8>)
 8013768:	6013      	str	r3, [r2, #0]
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801376e:	4613      	mov	r3, r2
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	4413      	add	r3, r2
 8013774:	009b      	lsls	r3, r3, #2
 8013776:	4a15      	ldr	r2, [pc, #84]	@ (80137cc <prvAddNewTaskToReadyList+0xcc>)
 8013778:	441a      	add	r2, r3
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	3304      	adds	r3, #4
 801377e:	4619      	mov	r1, r3
 8013780:	4610      	mov	r0, r2
 8013782:	f7ff f82f 	bl	80127e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013786:	f001 f9c9 	bl	8014b1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801378a:	4b0d      	ldr	r3, [pc, #52]	@ (80137c0 <prvAddNewTaskToReadyList+0xc0>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d00e      	beq.n	80137b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013792:	4b0a      	ldr	r3, [pc, #40]	@ (80137bc <prvAddNewTaskToReadyList+0xbc>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801379c:	429a      	cmp	r2, r3
 801379e:	d207      	bcs.n	80137b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80137a0:	4b0b      	ldr	r3, [pc, #44]	@ (80137d0 <prvAddNewTaskToReadyList+0xd0>)
 80137a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80137a6:	601a      	str	r2, [r3, #0]
 80137a8:	f3bf 8f4f 	dsb	sy
 80137ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80137b0:	bf00      	nop
 80137b2:	3708      	adds	r7, #8
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}
 80137b8:	2000147c 	.word	0x2000147c
 80137bc:	2000137c 	.word	0x2000137c
 80137c0:	20001488 	.word	0x20001488
 80137c4:	20001498 	.word	0x20001498
 80137c8:	20001484 	.word	0x20001484
 80137cc:	20001380 	.word	0x20001380
 80137d0:	e000ed04 	.word	0xe000ed04

080137d4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b08a      	sub	sp, #40	@ 0x28
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80137de:	2300      	movs	r3, #0
 80137e0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d10b      	bne.n	8013800 <vTaskDelayUntil+0x2c>
	__asm volatile
 80137e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137ec:	f383 8811 	msr	BASEPRI, r3
 80137f0:	f3bf 8f6f 	isb	sy
 80137f4:	f3bf 8f4f 	dsb	sy
 80137f8:	617b      	str	r3, [r7, #20]
}
 80137fa:	bf00      	nop
 80137fc:	bf00      	nop
 80137fe:	e7fd      	b.n	80137fc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d10b      	bne.n	801381e <vTaskDelayUntil+0x4a>
	__asm volatile
 8013806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801380a:	f383 8811 	msr	BASEPRI, r3
 801380e:	f3bf 8f6f 	isb	sy
 8013812:	f3bf 8f4f 	dsb	sy
 8013816:	613b      	str	r3, [r7, #16]
}
 8013818:	bf00      	nop
 801381a:	bf00      	nop
 801381c:	e7fd      	b.n	801381a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 801381e:	4b2a      	ldr	r3, [pc, #168]	@ (80138c8 <vTaskDelayUntil+0xf4>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d00b      	beq.n	801383e <vTaskDelayUntil+0x6a>
	__asm volatile
 8013826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801382a:	f383 8811 	msr	BASEPRI, r3
 801382e:	f3bf 8f6f 	isb	sy
 8013832:	f3bf 8f4f 	dsb	sy
 8013836:	60fb      	str	r3, [r7, #12]
}
 8013838:	bf00      	nop
 801383a:	bf00      	nop
 801383c:	e7fd      	b.n	801383a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 801383e:	f000 fa0f 	bl	8013c60 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8013842:	4b22      	ldr	r3, [pc, #136]	@ (80138cc <vTaskDelayUntil+0xf8>)
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	683a      	ldr	r2, [r7, #0]
 801384e:	4413      	add	r3, r2
 8013850:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	6a3a      	ldr	r2, [r7, #32]
 8013858:	429a      	cmp	r2, r3
 801385a:	d20b      	bcs.n	8013874 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	69fa      	ldr	r2, [r7, #28]
 8013862:	429a      	cmp	r2, r3
 8013864:	d211      	bcs.n	801388a <vTaskDelayUntil+0xb6>
 8013866:	69fa      	ldr	r2, [r7, #28]
 8013868:	6a3b      	ldr	r3, [r7, #32]
 801386a:	429a      	cmp	r2, r3
 801386c:	d90d      	bls.n	801388a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801386e:	2301      	movs	r3, #1
 8013870:	627b      	str	r3, [r7, #36]	@ 0x24
 8013872:	e00a      	b.n	801388a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	69fa      	ldr	r2, [r7, #28]
 801387a:	429a      	cmp	r2, r3
 801387c:	d303      	bcc.n	8013886 <vTaskDelayUntil+0xb2>
 801387e:	69fa      	ldr	r2, [r7, #28]
 8013880:	6a3b      	ldr	r3, [r7, #32]
 8013882:	429a      	cmp	r2, r3
 8013884:	d901      	bls.n	801388a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8013886:	2301      	movs	r3, #1
 8013888:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	69fa      	ldr	r2, [r7, #28]
 801388e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8013890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013892:	2b00      	cmp	r3, #0
 8013894:	d006      	beq.n	80138a4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8013896:	69fa      	ldr	r2, [r7, #28]
 8013898:	6a3b      	ldr	r3, [r7, #32]
 801389a:	1ad3      	subs	r3, r2, r3
 801389c:	2100      	movs	r1, #0
 801389e:	4618      	mov	r0, r3
 80138a0:	f000 ffb6 	bl	8014810 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80138a4:	f000 f9ea 	bl	8013c7c <xTaskResumeAll>
 80138a8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80138aa:	69bb      	ldr	r3, [r7, #24]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d107      	bne.n	80138c0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80138b0:	4b07      	ldr	r3, [pc, #28]	@ (80138d0 <vTaskDelayUntil+0xfc>)
 80138b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80138b6:	601a      	str	r2, [r3, #0]
 80138b8:	f3bf 8f4f 	dsb	sy
 80138bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80138c0:	bf00      	nop
 80138c2:	3728      	adds	r7, #40	@ 0x28
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}
 80138c8:	200014a4 	.word	0x200014a4
 80138cc:	20001480 	.word	0x20001480
 80138d0:	e000ed04 	.word	0xe000ed04

080138d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b084      	sub	sp, #16
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80138dc:	2300      	movs	r3, #0
 80138de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d018      	beq.n	8013918 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80138e6:	4b14      	ldr	r3, [pc, #80]	@ (8013938 <vTaskDelay+0x64>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d00b      	beq.n	8013906 <vTaskDelay+0x32>
	__asm volatile
 80138ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138f2:	f383 8811 	msr	BASEPRI, r3
 80138f6:	f3bf 8f6f 	isb	sy
 80138fa:	f3bf 8f4f 	dsb	sy
 80138fe:	60bb      	str	r3, [r7, #8]
}
 8013900:	bf00      	nop
 8013902:	bf00      	nop
 8013904:	e7fd      	b.n	8013902 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013906:	f000 f9ab 	bl	8013c60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801390a:	2100      	movs	r1, #0
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f000 ff7f 	bl	8014810 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013912:	f000 f9b3 	bl	8013c7c <xTaskResumeAll>
 8013916:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d107      	bne.n	801392e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801391e:	4b07      	ldr	r3, [pc, #28]	@ (801393c <vTaskDelay+0x68>)
 8013920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013924:	601a      	str	r2, [r3, #0]
 8013926:	f3bf 8f4f 	dsb	sy
 801392a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801392e:	bf00      	nop
 8013930:	3710      	adds	r7, #16
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}
 8013936:	bf00      	nop
 8013938:	200014a4 	.word	0x200014a4
 801393c:	e000ed04 	.word	0xe000ed04

08013940 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8013940:	b580      	push	{r7, lr}
 8013942:	b084      	sub	sp, #16
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013948:	f001 f8b8 	bl	8014abc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d102      	bne.n	8013958 <vTaskSuspend+0x18>
 8013952:	4b3d      	ldr	r3, [pc, #244]	@ (8013a48 <vTaskSuspend+0x108>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	e000      	b.n	801395a <vTaskSuspend+0x1a>
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	3304      	adds	r3, #4
 8013960:	4618      	mov	r0, r3
 8013962:	f7fe ff9a 	bl	801289a <uxListRemove>
 8013966:	4603      	mov	r3, r0
 8013968:	2b00      	cmp	r3, #0
 801396a:	d115      	bne.n	8013998 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013970:	4936      	ldr	r1, [pc, #216]	@ (8013a4c <vTaskSuspend+0x10c>)
 8013972:	4613      	mov	r3, r2
 8013974:	009b      	lsls	r3, r3, #2
 8013976:	4413      	add	r3, r2
 8013978:	009b      	lsls	r3, r3, #2
 801397a:	440b      	add	r3, r1
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d10a      	bne.n	8013998 <vTaskSuspend+0x58>
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013986:	2201      	movs	r2, #1
 8013988:	fa02 f303 	lsl.w	r3, r2, r3
 801398c:	43da      	mvns	r2, r3
 801398e:	4b30      	ldr	r3, [pc, #192]	@ (8013a50 <vTaskSuspend+0x110>)
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	4013      	ands	r3, r2
 8013994:	4a2e      	ldr	r2, [pc, #184]	@ (8013a50 <vTaskSuspend+0x110>)
 8013996:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801399c:	2b00      	cmp	r3, #0
 801399e:	d004      	beq.n	80139aa <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	3318      	adds	r3, #24
 80139a4:	4618      	mov	r0, r3
 80139a6:	f7fe ff78 	bl	801289a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	3304      	adds	r3, #4
 80139ae:	4619      	mov	r1, r3
 80139b0:	4828      	ldr	r0, [pc, #160]	@ (8013a54 <vTaskSuspend+0x114>)
 80139b2:	f7fe ff17 	bl	80127e4 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80139bc:	b2db      	uxtb	r3, r3
 80139be:	2b01      	cmp	r3, #1
 80139c0:	d103      	bne.n	80139ca <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	2200      	movs	r2, #0
 80139c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80139ca:	f001 f8a7 	bl	8014b1c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80139ce:	4b22      	ldr	r3, [pc, #136]	@ (8013a58 <vTaskSuspend+0x118>)
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d005      	beq.n	80139e2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80139d6:	f001 f871 	bl	8014abc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80139da:	f000 fd13 	bl	8014404 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80139de:	f001 f89d 	bl	8014b1c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80139e2:	4b19      	ldr	r3, [pc, #100]	@ (8013a48 <vTaskSuspend+0x108>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	68fa      	ldr	r2, [r7, #12]
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d128      	bne.n	8013a3e <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80139ec:	4b1a      	ldr	r3, [pc, #104]	@ (8013a58 <vTaskSuspend+0x118>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d018      	beq.n	8013a26 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80139f4:	4b19      	ldr	r3, [pc, #100]	@ (8013a5c <vTaskSuspend+0x11c>)
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d00b      	beq.n	8013a14 <vTaskSuspend+0xd4>
	__asm volatile
 80139fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a00:	f383 8811 	msr	BASEPRI, r3
 8013a04:	f3bf 8f6f 	isb	sy
 8013a08:	f3bf 8f4f 	dsb	sy
 8013a0c:	60bb      	str	r3, [r7, #8]
}
 8013a0e:	bf00      	nop
 8013a10:	bf00      	nop
 8013a12:	e7fd      	b.n	8013a10 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8013a14:	4b12      	ldr	r3, [pc, #72]	@ (8013a60 <vTaskSuspend+0x120>)
 8013a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a1a:	601a      	str	r2, [r3, #0]
 8013a1c:	f3bf 8f4f 	dsb	sy
 8013a20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013a24:	e00b      	b.n	8013a3e <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8013a26:	4b0b      	ldr	r3, [pc, #44]	@ (8013a54 <vTaskSuspend+0x114>)
 8013a28:	681a      	ldr	r2, [r3, #0]
 8013a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8013a64 <vTaskSuspend+0x124>)
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	d103      	bne.n	8013a3a <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8013a32:	4b05      	ldr	r3, [pc, #20]	@ (8013a48 <vTaskSuspend+0x108>)
 8013a34:	2200      	movs	r2, #0
 8013a36:	601a      	str	r2, [r3, #0]
	}
 8013a38:	e001      	b.n	8013a3e <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8013a3a:	f000 fa89 	bl	8013f50 <vTaskSwitchContext>
	}
 8013a3e:	bf00      	nop
 8013a40:	3710      	adds	r7, #16
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}
 8013a46:	bf00      	nop
 8013a48:	2000137c 	.word	0x2000137c
 8013a4c:	20001380 	.word	0x20001380
 8013a50:	20001484 	.word	0x20001484
 8013a54:	20001468 	.word	0x20001468
 8013a58:	20001488 	.word	0x20001488
 8013a5c:	200014a4 	.word	0x200014a4
 8013a60:	e000ed04 	.word	0xe000ed04
 8013a64:	2000147c 	.word	0x2000147c

08013a68 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8013a68:	b480      	push	{r7}
 8013a6a:	b087      	sub	sp, #28
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013a70:	2300      	movs	r3, #0
 8013a72:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d10b      	bne.n	8013a96 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8013a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a82:	f383 8811 	msr	BASEPRI, r3
 8013a86:	f3bf 8f6f 	isb	sy
 8013a8a:	f3bf 8f4f 	dsb	sy
 8013a8e:	60fb      	str	r3, [r7, #12]
}
 8013a90:	bf00      	nop
 8013a92:	bf00      	nop
 8013a94:	e7fd      	b.n	8013a92 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013a96:	693b      	ldr	r3, [r7, #16]
 8013a98:	695b      	ldr	r3, [r3, #20]
 8013a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8013ad8 <prvTaskIsTaskSuspended+0x70>)
 8013a9c:	4293      	cmp	r3, r2
 8013a9e:	d101      	bne.n	8013aa4 <prvTaskIsTaskSuspended+0x3c>
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	e000      	b.n	8013aa6 <prvTaskIsTaskSuspended+0x3e>
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d00f      	beq.n	8013aca <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8013aaa:	693b      	ldr	r3, [r7, #16]
 8013aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013aae:	4a0b      	ldr	r2, [pc, #44]	@ (8013adc <prvTaskIsTaskSuspended+0x74>)
 8013ab0:	4293      	cmp	r3, r2
 8013ab2:	d00a      	beq.n	8013aca <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8013ab4:	693b      	ldr	r3, [r7, #16]
 8013ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d101      	bne.n	8013ac0 <prvTaskIsTaskSuspended+0x58>
 8013abc:	2301      	movs	r3, #1
 8013abe:	e000      	b.n	8013ac2 <prvTaskIsTaskSuspended+0x5a>
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d001      	beq.n	8013aca <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013aca:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013acc:	4618      	mov	r0, r3
 8013ace:	371c      	adds	r7, #28
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bc80      	pop	{r7}
 8013ad4:	4770      	bx	lr
 8013ad6:	bf00      	nop
 8013ad8:	20001468 	.word	0x20001468
 8013adc:	2000143c 	.word	0x2000143c

08013ae0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b084      	sub	sp, #16
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d10b      	bne.n	8013b0a <vTaskResume+0x2a>
	__asm volatile
 8013af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013af6:	f383 8811 	msr	BASEPRI, r3
 8013afa:	f3bf 8f6f 	isb	sy
 8013afe:	f3bf 8f4f 	dsb	sy
 8013b02:	60bb      	str	r3, [r7, #8]
}
 8013b04:	bf00      	nop
 8013b06:	bf00      	nop
 8013b08:	e7fd      	b.n	8013b06 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d039      	beq.n	8013b84 <vTaskResume+0xa4>
 8013b10:	4b1e      	ldr	r3, [pc, #120]	@ (8013b8c <vTaskResume+0xac>)
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	68fa      	ldr	r2, [r7, #12]
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d034      	beq.n	8013b84 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8013b1a:	f000 ffcf 	bl	8014abc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8013b1e:	68f8      	ldr	r0, [r7, #12]
 8013b20:	f7ff ffa2 	bl	8013a68 <prvTaskIsTaskSuspended>
 8013b24:	4603      	mov	r3, r0
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d02a      	beq.n	8013b80 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	3304      	adds	r3, #4
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f7fe feb3 	bl	801289a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b38:	2201      	movs	r2, #1
 8013b3a:	409a      	lsls	r2, r3
 8013b3c:	4b14      	ldr	r3, [pc, #80]	@ (8013b90 <vTaskResume+0xb0>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	4313      	orrs	r3, r2
 8013b42:	4a13      	ldr	r2, [pc, #76]	@ (8013b90 <vTaskResume+0xb0>)
 8013b44:	6013      	str	r3, [r2, #0]
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b4a:	4613      	mov	r3, r2
 8013b4c:	009b      	lsls	r3, r3, #2
 8013b4e:	4413      	add	r3, r2
 8013b50:	009b      	lsls	r3, r3, #2
 8013b52:	4a10      	ldr	r2, [pc, #64]	@ (8013b94 <vTaskResume+0xb4>)
 8013b54:	441a      	add	r2, r3
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	3304      	adds	r3, #4
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	4610      	mov	r0, r2
 8013b5e:	f7fe fe41 	bl	80127e4 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b66:	4b09      	ldr	r3, [pc, #36]	@ (8013b8c <vTaskResume+0xac>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d307      	bcc.n	8013b80 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8013b70:	4b09      	ldr	r3, [pc, #36]	@ (8013b98 <vTaskResume+0xb8>)
 8013b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013b76:	601a      	str	r2, [r3, #0]
 8013b78:	f3bf 8f4f 	dsb	sy
 8013b7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8013b80:	f000 ffcc 	bl	8014b1c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013b84:	bf00      	nop
 8013b86:	3710      	adds	r7, #16
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}
 8013b8c:	2000137c 	.word	0x2000137c
 8013b90:	20001484 	.word	0x20001484
 8013b94:	20001380 	.word	0x20001380
 8013b98:	e000ed04 	.word	0xe000ed04

08013b9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b08a      	sub	sp, #40	@ 0x28
 8013ba0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013baa:	463a      	mov	r2, r7
 8013bac:	1d39      	adds	r1, r7, #4
 8013bae:	f107 0308 	add.w	r3, r7, #8
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f7f1 f8a6 	bl	8004d04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013bb8:	6839      	ldr	r1, [r7, #0]
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	68ba      	ldr	r2, [r7, #8]
 8013bbe:	9202      	str	r2, [sp, #8]
 8013bc0:	9301      	str	r3, [sp, #4]
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	9300      	str	r3, [sp, #0]
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	460a      	mov	r2, r1
 8013bca:	491f      	ldr	r1, [pc, #124]	@ (8013c48 <vTaskStartScheduler+0xac>)
 8013bcc:	481f      	ldr	r0, [pc, #124]	@ (8013c4c <vTaskStartScheduler+0xb0>)
 8013bce:	f7ff fc6b 	bl	80134a8 <xTaskCreateStatic>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8013c50 <vTaskStartScheduler+0xb4>)
 8013bd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8013c50 <vTaskStartScheduler+0xb4>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d002      	beq.n	8013be6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013be0:	2301      	movs	r3, #1
 8013be2:	617b      	str	r3, [r7, #20]
 8013be4:	e001      	b.n	8013bea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013be6:	2300      	movs	r3, #0
 8013be8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013bea:	697b      	ldr	r3, [r7, #20]
 8013bec:	2b01      	cmp	r3, #1
 8013bee:	d116      	bne.n	8013c1e <vTaskStartScheduler+0x82>
	__asm volatile
 8013bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bf4:	f383 8811 	msr	BASEPRI, r3
 8013bf8:	f3bf 8f6f 	isb	sy
 8013bfc:	f3bf 8f4f 	dsb	sy
 8013c00:	613b      	str	r3, [r7, #16]
}
 8013c02:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013c04:	4b13      	ldr	r3, [pc, #76]	@ (8013c54 <vTaskStartScheduler+0xb8>)
 8013c06:	f04f 32ff 	mov.w	r2, #4294967295
 8013c0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013c0c:	4b12      	ldr	r3, [pc, #72]	@ (8013c58 <vTaskStartScheduler+0xbc>)
 8013c0e:	2201      	movs	r2, #1
 8013c10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8013c12:	4b12      	ldr	r3, [pc, #72]	@ (8013c5c <vTaskStartScheduler+0xc0>)
 8013c14:	2200      	movs	r2, #0
 8013c16:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013c18:	f000 fede 	bl	80149d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013c1c:	e00f      	b.n	8013c3e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c24:	d10b      	bne.n	8013c3e <vTaskStartScheduler+0xa2>
	__asm volatile
 8013c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c2a:	f383 8811 	msr	BASEPRI, r3
 8013c2e:	f3bf 8f6f 	isb	sy
 8013c32:	f3bf 8f4f 	dsb	sy
 8013c36:	60fb      	str	r3, [r7, #12]
}
 8013c38:	bf00      	nop
 8013c3a:	bf00      	nop
 8013c3c:	e7fd      	b.n	8013c3a <vTaskStartScheduler+0x9e>
}
 8013c3e:	bf00      	nop
 8013c40:	3718      	adds	r7, #24
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bd80      	pop	{r7, pc}
 8013c46:	bf00      	nop
 8013c48:	08015f9c 	.word	0x08015f9c
 8013c4c:	08014229 	.word	0x08014229
 8013c50:	200014a0 	.word	0x200014a0
 8013c54:	2000149c 	.word	0x2000149c
 8013c58:	20001488 	.word	0x20001488
 8013c5c:	20001480 	.word	0x20001480

08013c60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013c60:	b480      	push	{r7}
 8013c62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013c64:	4b04      	ldr	r3, [pc, #16]	@ (8013c78 <vTaskSuspendAll+0x18>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	3301      	adds	r3, #1
 8013c6a:	4a03      	ldr	r2, [pc, #12]	@ (8013c78 <vTaskSuspendAll+0x18>)
 8013c6c:	6013      	str	r3, [r2, #0]
}
 8013c6e:	bf00      	nop
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bc80      	pop	{r7}
 8013c74:	4770      	bx	lr
 8013c76:	bf00      	nop
 8013c78:	200014a4 	.word	0x200014a4

08013c7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b084      	sub	sp, #16
 8013c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013c82:	2300      	movs	r3, #0
 8013c84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013c86:	2300      	movs	r3, #0
 8013c88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013c8a:	4b42      	ldr	r3, [pc, #264]	@ (8013d94 <xTaskResumeAll+0x118>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d10b      	bne.n	8013caa <xTaskResumeAll+0x2e>
	__asm volatile
 8013c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c96:	f383 8811 	msr	BASEPRI, r3
 8013c9a:	f3bf 8f6f 	isb	sy
 8013c9e:	f3bf 8f4f 	dsb	sy
 8013ca2:	603b      	str	r3, [r7, #0]
}
 8013ca4:	bf00      	nop
 8013ca6:	bf00      	nop
 8013ca8:	e7fd      	b.n	8013ca6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013caa:	f000 ff07 	bl	8014abc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013cae:	4b39      	ldr	r3, [pc, #228]	@ (8013d94 <xTaskResumeAll+0x118>)
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	3b01      	subs	r3, #1
 8013cb4:	4a37      	ldr	r2, [pc, #220]	@ (8013d94 <xTaskResumeAll+0x118>)
 8013cb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cb8:	4b36      	ldr	r3, [pc, #216]	@ (8013d94 <xTaskResumeAll+0x118>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d161      	bne.n	8013d84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013cc0:	4b35      	ldr	r3, [pc, #212]	@ (8013d98 <xTaskResumeAll+0x11c>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d05d      	beq.n	8013d84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013cc8:	e02e      	b.n	8013d28 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8013cca:	4b34      	ldr	r3, [pc, #208]	@ (8013d9c <xTaskResumeAll+0x120>)
 8013ccc:	68db      	ldr	r3, [r3, #12]
 8013cce:	68db      	ldr	r3, [r3, #12]
 8013cd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	3318      	adds	r3, #24
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7fe fddf 	bl	801289a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	3304      	adds	r3, #4
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7fe fdda 	bl	801289a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cea:	2201      	movs	r2, #1
 8013cec:	409a      	lsls	r2, r3
 8013cee:	4b2c      	ldr	r3, [pc, #176]	@ (8013da0 <xTaskResumeAll+0x124>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	4313      	orrs	r3, r2
 8013cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8013da0 <xTaskResumeAll+0x124>)
 8013cf6:	6013      	str	r3, [r2, #0]
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013cfc:	4613      	mov	r3, r2
 8013cfe:	009b      	lsls	r3, r3, #2
 8013d00:	4413      	add	r3, r2
 8013d02:	009b      	lsls	r3, r3, #2
 8013d04:	4a27      	ldr	r2, [pc, #156]	@ (8013da4 <xTaskResumeAll+0x128>)
 8013d06:	441a      	add	r2, r3
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	3304      	adds	r3, #4
 8013d0c:	4619      	mov	r1, r3
 8013d0e:	4610      	mov	r0, r2
 8013d10:	f7fe fd68 	bl	80127e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d18:	4b23      	ldr	r3, [pc, #140]	@ (8013da8 <xTaskResumeAll+0x12c>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d302      	bcc.n	8013d28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013d22:	4b22      	ldr	r3, [pc, #136]	@ (8013dac <xTaskResumeAll+0x130>)
 8013d24:	2201      	movs	r2, #1
 8013d26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013d28:	4b1c      	ldr	r3, [pc, #112]	@ (8013d9c <xTaskResumeAll+0x120>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d1cc      	bne.n	8013cca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d001      	beq.n	8013d3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013d36:	f000 fb65 	bl	8014404 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8013db0 <xTaskResumeAll+0x134>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d010      	beq.n	8013d68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013d46:	f000 f845 	bl	8013dd4 <xTaskIncrementTick>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d002      	beq.n	8013d56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013d50:	4b16      	ldr	r3, [pc, #88]	@ (8013dac <xTaskResumeAll+0x130>)
 8013d52:	2201      	movs	r2, #1
 8013d54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	3b01      	subs	r3, #1
 8013d5a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d1f1      	bne.n	8013d46 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8013d62:	4b13      	ldr	r3, [pc, #76]	@ (8013db0 <xTaskResumeAll+0x134>)
 8013d64:	2200      	movs	r2, #0
 8013d66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013d68:	4b10      	ldr	r3, [pc, #64]	@ (8013dac <xTaskResumeAll+0x130>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d009      	beq.n	8013d84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013d70:	2301      	movs	r3, #1
 8013d72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013d74:	4b0f      	ldr	r3, [pc, #60]	@ (8013db4 <xTaskResumeAll+0x138>)
 8013d76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d7a:	601a      	str	r2, [r3, #0]
 8013d7c:	f3bf 8f4f 	dsb	sy
 8013d80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013d84:	f000 feca 	bl	8014b1c <vPortExitCritical>

	return xAlreadyYielded;
 8013d88:	68bb      	ldr	r3, [r7, #8]
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3710      	adds	r7, #16
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}
 8013d92:	bf00      	nop
 8013d94:	200014a4 	.word	0x200014a4
 8013d98:	2000147c 	.word	0x2000147c
 8013d9c:	2000143c 	.word	0x2000143c
 8013da0:	20001484 	.word	0x20001484
 8013da4:	20001380 	.word	0x20001380
 8013da8:	2000137c 	.word	0x2000137c
 8013dac:	20001490 	.word	0x20001490
 8013db0:	2000148c 	.word	0x2000148c
 8013db4:	e000ed04 	.word	0xe000ed04

08013db8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013db8:	b480      	push	{r7}
 8013dba:	b083      	sub	sp, #12
 8013dbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013dbe:	4b04      	ldr	r3, [pc, #16]	@ (8013dd0 <xTaskGetTickCount+0x18>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013dc4:	687b      	ldr	r3, [r7, #4]
}
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	370c      	adds	r7, #12
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bc80      	pop	{r7}
 8013dce:	4770      	bx	lr
 8013dd0:	20001480 	.word	0x20001480

08013dd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b086      	sub	sp, #24
 8013dd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013dda:	2300      	movs	r3, #0
 8013ddc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013dde:	4b51      	ldr	r3, [pc, #324]	@ (8013f24 <xTaskIncrementTick+0x150>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	f040 808e 	bne.w	8013f04 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013de8:	4b4f      	ldr	r3, [pc, #316]	@ (8013f28 <xTaskIncrementTick+0x154>)
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	3301      	adds	r3, #1
 8013dee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013df0:	4a4d      	ldr	r2, [pc, #308]	@ (8013f28 <xTaskIncrementTick+0x154>)
 8013df2:	693b      	ldr	r3, [r7, #16]
 8013df4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d121      	bne.n	8013e40 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8013dfc:	4b4b      	ldr	r3, [pc, #300]	@ (8013f2c <xTaskIncrementTick+0x158>)
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d00b      	beq.n	8013e1e <xTaskIncrementTick+0x4a>
	__asm volatile
 8013e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e0a:	f383 8811 	msr	BASEPRI, r3
 8013e0e:	f3bf 8f6f 	isb	sy
 8013e12:	f3bf 8f4f 	dsb	sy
 8013e16:	603b      	str	r3, [r7, #0]
}
 8013e18:	bf00      	nop
 8013e1a:	bf00      	nop
 8013e1c:	e7fd      	b.n	8013e1a <xTaskIncrementTick+0x46>
 8013e1e:	4b43      	ldr	r3, [pc, #268]	@ (8013f2c <xTaskIncrementTick+0x158>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	60fb      	str	r3, [r7, #12]
 8013e24:	4b42      	ldr	r3, [pc, #264]	@ (8013f30 <xTaskIncrementTick+0x15c>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	4a40      	ldr	r2, [pc, #256]	@ (8013f2c <xTaskIncrementTick+0x158>)
 8013e2a:	6013      	str	r3, [r2, #0]
 8013e2c:	4a40      	ldr	r2, [pc, #256]	@ (8013f30 <xTaskIncrementTick+0x15c>)
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	6013      	str	r3, [r2, #0]
 8013e32:	4b40      	ldr	r3, [pc, #256]	@ (8013f34 <xTaskIncrementTick+0x160>)
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	3301      	adds	r3, #1
 8013e38:	4a3e      	ldr	r2, [pc, #248]	@ (8013f34 <xTaskIncrementTick+0x160>)
 8013e3a:	6013      	str	r3, [r2, #0]
 8013e3c:	f000 fae2 	bl	8014404 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013e40:	4b3d      	ldr	r3, [pc, #244]	@ (8013f38 <xTaskIncrementTick+0x164>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	693a      	ldr	r2, [r7, #16]
 8013e46:	429a      	cmp	r2, r3
 8013e48:	d34d      	bcc.n	8013ee6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e4a:	4b38      	ldr	r3, [pc, #224]	@ (8013f2c <xTaskIncrementTick+0x158>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d101      	bne.n	8013e58 <xTaskIncrementTick+0x84>
 8013e54:	2301      	movs	r3, #1
 8013e56:	e000      	b.n	8013e5a <xTaskIncrementTick+0x86>
 8013e58:	2300      	movs	r3, #0
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d004      	beq.n	8013e68 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e5e:	4b36      	ldr	r3, [pc, #216]	@ (8013f38 <xTaskIncrementTick+0x164>)
 8013e60:	f04f 32ff 	mov.w	r2, #4294967295
 8013e64:	601a      	str	r2, [r3, #0]
					break;
 8013e66:	e03e      	b.n	8013ee6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013e68:	4b30      	ldr	r3, [pc, #192]	@ (8013f2c <xTaskIncrementTick+0x158>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	68db      	ldr	r3, [r3, #12]
 8013e6e:	68db      	ldr	r3, [r3, #12]
 8013e70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013e72:	68bb      	ldr	r3, [r7, #8]
 8013e74:	685b      	ldr	r3, [r3, #4]
 8013e76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013e78:	693a      	ldr	r2, [r7, #16]
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	429a      	cmp	r2, r3
 8013e7e:	d203      	bcs.n	8013e88 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013e80:	4a2d      	ldr	r2, [pc, #180]	@ (8013f38 <xTaskIncrementTick+0x164>)
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6013      	str	r3, [r2, #0]
						break;
 8013e86:	e02e      	b.n	8013ee6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	3304      	adds	r3, #4
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7fe fd04 	bl	801289a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d004      	beq.n	8013ea4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013e9a:	68bb      	ldr	r3, [r7, #8]
 8013e9c:	3318      	adds	r3, #24
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7fe fcfb 	bl	801289a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ea8:	2201      	movs	r2, #1
 8013eaa:	409a      	lsls	r2, r3
 8013eac:	4b23      	ldr	r3, [pc, #140]	@ (8013f3c <xTaskIncrementTick+0x168>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	4313      	orrs	r3, r2
 8013eb2:	4a22      	ldr	r2, [pc, #136]	@ (8013f3c <xTaskIncrementTick+0x168>)
 8013eb4:	6013      	str	r3, [r2, #0]
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013eba:	4613      	mov	r3, r2
 8013ebc:	009b      	lsls	r3, r3, #2
 8013ebe:	4413      	add	r3, r2
 8013ec0:	009b      	lsls	r3, r3, #2
 8013ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8013f40 <xTaskIncrementTick+0x16c>)
 8013ec4:	441a      	add	r2, r3
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	3304      	adds	r3, #4
 8013eca:	4619      	mov	r1, r3
 8013ecc:	4610      	mov	r0, r2
 8013ece:	f7fe fc89 	bl	80127e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ed2:	68bb      	ldr	r3, [r7, #8]
 8013ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8013f44 <xTaskIncrementTick+0x170>)
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013edc:	429a      	cmp	r2, r3
 8013ede:	d3b4      	bcc.n	8013e4a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013ee0:	2301      	movs	r3, #1
 8013ee2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ee4:	e7b1      	b.n	8013e4a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013ee6:	4b17      	ldr	r3, [pc, #92]	@ (8013f44 <xTaskIncrementTick+0x170>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013eec:	4914      	ldr	r1, [pc, #80]	@ (8013f40 <xTaskIncrementTick+0x16c>)
 8013eee:	4613      	mov	r3, r2
 8013ef0:	009b      	lsls	r3, r3, #2
 8013ef2:	4413      	add	r3, r2
 8013ef4:	009b      	lsls	r3, r3, #2
 8013ef6:	440b      	add	r3, r1
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	2b01      	cmp	r3, #1
 8013efc:	d907      	bls.n	8013f0e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8013efe:	2301      	movs	r3, #1
 8013f00:	617b      	str	r3, [r7, #20]
 8013f02:	e004      	b.n	8013f0e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013f04:	4b10      	ldr	r3, [pc, #64]	@ (8013f48 <xTaskIncrementTick+0x174>)
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	3301      	adds	r3, #1
 8013f0a:	4a0f      	ldr	r2, [pc, #60]	@ (8013f48 <xTaskIncrementTick+0x174>)
 8013f0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8013f4c <xTaskIncrementTick+0x178>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d001      	beq.n	8013f1a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8013f16:	2301      	movs	r3, #1
 8013f18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013f1a:	697b      	ldr	r3, [r7, #20]
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3718      	adds	r7, #24
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}
 8013f24:	200014a4 	.word	0x200014a4
 8013f28:	20001480 	.word	0x20001480
 8013f2c:	20001434 	.word	0x20001434
 8013f30:	20001438 	.word	0x20001438
 8013f34:	20001494 	.word	0x20001494
 8013f38:	2000149c 	.word	0x2000149c
 8013f3c:	20001484 	.word	0x20001484
 8013f40:	20001380 	.word	0x20001380
 8013f44:	2000137c 	.word	0x2000137c
 8013f48:	2000148c 	.word	0x2000148c
 8013f4c:	20001490 	.word	0x20001490

08013f50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013f50:	b480      	push	{r7}
 8013f52:	b087      	sub	sp, #28
 8013f54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013f56:	4b27      	ldr	r3, [pc, #156]	@ (8013ff4 <vTaskSwitchContext+0xa4>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d003      	beq.n	8013f66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013f5e:	4b26      	ldr	r3, [pc, #152]	@ (8013ff8 <vTaskSwitchContext+0xa8>)
 8013f60:	2201      	movs	r2, #1
 8013f62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013f64:	e040      	b.n	8013fe8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8013f66:	4b24      	ldr	r3, [pc, #144]	@ (8013ff8 <vTaskSwitchContext+0xa8>)
 8013f68:	2200      	movs	r2, #0
 8013f6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8013f6c:	4b23      	ldr	r3, [pc, #140]	@ (8013ffc <vTaskSwitchContext+0xac>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	fab3 f383 	clz	r3, r3
 8013f78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013f7a:	7afb      	ldrb	r3, [r7, #11]
 8013f7c:	f1c3 031f 	rsb	r3, r3, #31
 8013f80:	617b      	str	r3, [r7, #20]
 8013f82:	491f      	ldr	r1, [pc, #124]	@ (8014000 <vTaskSwitchContext+0xb0>)
 8013f84:	697a      	ldr	r2, [r7, #20]
 8013f86:	4613      	mov	r3, r2
 8013f88:	009b      	lsls	r3, r3, #2
 8013f8a:	4413      	add	r3, r2
 8013f8c:	009b      	lsls	r3, r3, #2
 8013f8e:	440b      	add	r3, r1
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d10b      	bne.n	8013fae <vTaskSwitchContext+0x5e>
	__asm volatile
 8013f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f9a:	f383 8811 	msr	BASEPRI, r3
 8013f9e:	f3bf 8f6f 	isb	sy
 8013fa2:	f3bf 8f4f 	dsb	sy
 8013fa6:	607b      	str	r3, [r7, #4]
}
 8013fa8:	bf00      	nop
 8013faa:	bf00      	nop
 8013fac:	e7fd      	b.n	8013faa <vTaskSwitchContext+0x5a>
 8013fae:	697a      	ldr	r2, [r7, #20]
 8013fb0:	4613      	mov	r3, r2
 8013fb2:	009b      	lsls	r3, r3, #2
 8013fb4:	4413      	add	r3, r2
 8013fb6:	009b      	lsls	r3, r3, #2
 8013fb8:	4a11      	ldr	r2, [pc, #68]	@ (8014000 <vTaskSwitchContext+0xb0>)
 8013fba:	4413      	add	r3, r2
 8013fbc:	613b      	str	r3, [r7, #16]
 8013fbe:	693b      	ldr	r3, [r7, #16]
 8013fc0:	685b      	ldr	r3, [r3, #4]
 8013fc2:	685a      	ldr	r2, [r3, #4]
 8013fc4:	693b      	ldr	r3, [r7, #16]
 8013fc6:	605a      	str	r2, [r3, #4]
 8013fc8:	693b      	ldr	r3, [r7, #16]
 8013fca:	685a      	ldr	r2, [r3, #4]
 8013fcc:	693b      	ldr	r3, [r7, #16]
 8013fce:	3308      	adds	r3, #8
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d104      	bne.n	8013fde <vTaskSwitchContext+0x8e>
 8013fd4:	693b      	ldr	r3, [r7, #16]
 8013fd6:	685b      	ldr	r3, [r3, #4]
 8013fd8:	685a      	ldr	r2, [r3, #4]
 8013fda:	693b      	ldr	r3, [r7, #16]
 8013fdc:	605a      	str	r2, [r3, #4]
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	685b      	ldr	r3, [r3, #4]
 8013fe2:	68db      	ldr	r3, [r3, #12]
 8013fe4:	4a07      	ldr	r2, [pc, #28]	@ (8014004 <vTaskSwitchContext+0xb4>)
 8013fe6:	6013      	str	r3, [r2, #0]
}
 8013fe8:	bf00      	nop
 8013fea:	371c      	adds	r7, #28
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bc80      	pop	{r7}
 8013ff0:	4770      	bx	lr
 8013ff2:	bf00      	nop
 8013ff4:	200014a4 	.word	0x200014a4
 8013ff8:	20001490 	.word	0x20001490
 8013ffc:	20001484 	.word	0x20001484
 8014000:	20001380 	.word	0x20001380
 8014004:	2000137c 	.word	0x2000137c

08014008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b084      	sub	sp, #16
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d10b      	bne.n	8014030 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8014018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801401c:	f383 8811 	msr	BASEPRI, r3
 8014020:	f3bf 8f6f 	isb	sy
 8014024:	f3bf 8f4f 	dsb	sy
 8014028:	60fb      	str	r3, [r7, #12]
}
 801402a:	bf00      	nop
 801402c:	bf00      	nop
 801402e:	e7fd      	b.n	801402c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014030:	4b07      	ldr	r3, [pc, #28]	@ (8014050 <vTaskPlaceOnEventList+0x48>)
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	3318      	adds	r3, #24
 8014036:	4619      	mov	r1, r3
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f7fe fbf6 	bl	801282a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801403e:	2101      	movs	r1, #1
 8014040:	6838      	ldr	r0, [r7, #0]
 8014042:	f000 fbe5 	bl	8014810 <prvAddCurrentTaskToDelayedList>
}
 8014046:	bf00      	nop
 8014048:	3710      	adds	r7, #16
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}
 801404e:	bf00      	nop
 8014050:	2000137c 	.word	0x2000137c

08014054 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014054:	b580      	push	{r7, lr}
 8014056:	b086      	sub	sp, #24
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	68db      	ldr	r3, [r3, #12]
 8014060:	68db      	ldr	r3, [r3, #12]
 8014062:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d10b      	bne.n	8014082 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801406a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801406e:	f383 8811 	msr	BASEPRI, r3
 8014072:	f3bf 8f6f 	isb	sy
 8014076:	f3bf 8f4f 	dsb	sy
 801407a:	60fb      	str	r3, [r7, #12]
}
 801407c:	bf00      	nop
 801407e:	bf00      	nop
 8014080:	e7fd      	b.n	801407e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	3318      	adds	r3, #24
 8014086:	4618      	mov	r0, r3
 8014088:	f7fe fc07 	bl	801289a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801408c:	4b1d      	ldr	r3, [pc, #116]	@ (8014104 <xTaskRemoveFromEventList+0xb0>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d11c      	bne.n	80140ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014094:	693b      	ldr	r3, [r7, #16]
 8014096:	3304      	adds	r3, #4
 8014098:	4618      	mov	r0, r3
 801409a:	f7fe fbfe 	bl	801289a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801409e:	693b      	ldr	r3, [r7, #16]
 80140a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140a2:	2201      	movs	r2, #1
 80140a4:	409a      	lsls	r2, r3
 80140a6:	4b18      	ldr	r3, [pc, #96]	@ (8014108 <xTaskRemoveFromEventList+0xb4>)
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	4313      	orrs	r3, r2
 80140ac:	4a16      	ldr	r2, [pc, #88]	@ (8014108 <xTaskRemoveFromEventList+0xb4>)
 80140ae:	6013      	str	r3, [r2, #0]
 80140b0:	693b      	ldr	r3, [r7, #16]
 80140b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140b4:	4613      	mov	r3, r2
 80140b6:	009b      	lsls	r3, r3, #2
 80140b8:	4413      	add	r3, r2
 80140ba:	009b      	lsls	r3, r3, #2
 80140bc:	4a13      	ldr	r2, [pc, #76]	@ (801410c <xTaskRemoveFromEventList+0xb8>)
 80140be:	441a      	add	r2, r3
 80140c0:	693b      	ldr	r3, [r7, #16]
 80140c2:	3304      	adds	r3, #4
 80140c4:	4619      	mov	r1, r3
 80140c6:	4610      	mov	r0, r2
 80140c8:	f7fe fb8c 	bl	80127e4 <vListInsertEnd>
 80140cc:	e005      	b.n	80140da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80140ce:	693b      	ldr	r3, [r7, #16]
 80140d0:	3318      	adds	r3, #24
 80140d2:	4619      	mov	r1, r3
 80140d4:	480e      	ldr	r0, [pc, #56]	@ (8014110 <xTaskRemoveFromEventList+0xbc>)
 80140d6:	f7fe fb85 	bl	80127e4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80140da:	693b      	ldr	r3, [r7, #16]
 80140dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140de:	4b0d      	ldr	r3, [pc, #52]	@ (8014114 <xTaskRemoveFromEventList+0xc0>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140e4:	429a      	cmp	r2, r3
 80140e6:	d905      	bls.n	80140f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80140e8:	2301      	movs	r3, #1
 80140ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80140ec:	4b0a      	ldr	r3, [pc, #40]	@ (8014118 <xTaskRemoveFromEventList+0xc4>)
 80140ee:	2201      	movs	r2, #1
 80140f0:	601a      	str	r2, [r3, #0]
 80140f2:	e001      	b.n	80140f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80140f4:	2300      	movs	r3, #0
 80140f6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80140f8:	697b      	ldr	r3, [r7, #20]
}
 80140fa:	4618      	mov	r0, r3
 80140fc:	3718      	adds	r7, #24
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}
 8014102:	bf00      	nop
 8014104:	200014a4 	.word	0x200014a4
 8014108:	20001484 	.word	0x20001484
 801410c:	20001380 	.word	0x20001380
 8014110:	2000143c 	.word	0x2000143c
 8014114:	2000137c 	.word	0x2000137c
 8014118:	20001490 	.word	0x20001490

0801411c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801411c:	b480      	push	{r7}
 801411e:	b083      	sub	sp, #12
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014124:	4b06      	ldr	r3, [pc, #24]	@ (8014140 <vTaskInternalSetTimeOutState+0x24>)
 8014126:	681a      	ldr	r2, [r3, #0]
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801412c:	4b05      	ldr	r3, [pc, #20]	@ (8014144 <vTaskInternalSetTimeOutState+0x28>)
 801412e:	681a      	ldr	r2, [r3, #0]
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	605a      	str	r2, [r3, #4]
}
 8014134:	bf00      	nop
 8014136:	370c      	adds	r7, #12
 8014138:	46bd      	mov	sp, r7
 801413a:	bc80      	pop	{r7}
 801413c:	4770      	bx	lr
 801413e:	bf00      	nop
 8014140:	20001494 	.word	0x20001494
 8014144:	20001480 	.word	0x20001480

08014148 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b088      	sub	sp, #32
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
 8014150:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d10b      	bne.n	8014170 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8014158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801415c:	f383 8811 	msr	BASEPRI, r3
 8014160:	f3bf 8f6f 	isb	sy
 8014164:	f3bf 8f4f 	dsb	sy
 8014168:	613b      	str	r3, [r7, #16]
}
 801416a:	bf00      	nop
 801416c:	bf00      	nop
 801416e:	e7fd      	b.n	801416c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014170:	683b      	ldr	r3, [r7, #0]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d10b      	bne.n	801418e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801417a:	f383 8811 	msr	BASEPRI, r3
 801417e:	f3bf 8f6f 	isb	sy
 8014182:	f3bf 8f4f 	dsb	sy
 8014186:	60fb      	str	r3, [r7, #12]
}
 8014188:	bf00      	nop
 801418a:	bf00      	nop
 801418c:	e7fd      	b.n	801418a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801418e:	f000 fc95 	bl	8014abc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014192:	4b1d      	ldr	r3, [pc, #116]	@ (8014208 <xTaskCheckForTimeOut+0xc0>)
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	685b      	ldr	r3, [r3, #4]
 801419c:	69ba      	ldr	r2, [r7, #24]
 801419e:	1ad3      	subs	r3, r2, r3
 80141a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80141a2:	683b      	ldr	r3, [r7, #0]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141aa:	d102      	bne.n	80141b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80141ac:	2300      	movs	r3, #0
 80141ae:	61fb      	str	r3, [r7, #28]
 80141b0:	e023      	b.n	80141fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	681a      	ldr	r2, [r3, #0]
 80141b6:	4b15      	ldr	r3, [pc, #84]	@ (801420c <xTaskCheckForTimeOut+0xc4>)
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	429a      	cmp	r2, r3
 80141bc:	d007      	beq.n	80141ce <xTaskCheckForTimeOut+0x86>
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	685b      	ldr	r3, [r3, #4]
 80141c2:	69ba      	ldr	r2, [r7, #24]
 80141c4:	429a      	cmp	r2, r3
 80141c6:	d302      	bcc.n	80141ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80141c8:	2301      	movs	r3, #1
 80141ca:	61fb      	str	r3, [r7, #28]
 80141cc:	e015      	b.n	80141fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	697a      	ldr	r2, [r7, #20]
 80141d4:	429a      	cmp	r2, r3
 80141d6:	d20b      	bcs.n	80141f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	681a      	ldr	r2, [r3, #0]
 80141dc:	697b      	ldr	r3, [r7, #20]
 80141de:	1ad2      	subs	r2, r2, r3
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f7ff ff99 	bl	801411c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80141ea:	2300      	movs	r3, #0
 80141ec:	61fb      	str	r3, [r7, #28]
 80141ee:	e004      	b.n	80141fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	2200      	movs	r2, #0
 80141f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80141f6:	2301      	movs	r3, #1
 80141f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80141fa:	f000 fc8f 	bl	8014b1c <vPortExitCritical>

	return xReturn;
 80141fe:	69fb      	ldr	r3, [r7, #28]
}
 8014200:	4618      	mov	r0, r3
 8014202:	3720      	adds	r7, #32
 8014204:	46bd      	mov	sp, r7
 8014206:	bd80      	pop	{r7, pc}
 8014208:	20001480 	.word	0x20001480
 801420c:	20001494 	.word	0x20001494

08014210 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014210:	b480      	push	{r7}
 8014212:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014214:	4b03      	ldr	r3, [pc, #12]	@ (8014224 <vTaskMissedYield+0x14>)
 8014216:	2201      	movs	r2, #1
 8014218:	601a      	str	r2, [r3, #0]
}
 801421a:	bf00      	nop
 801421c:	46bd      	mov	sp, r7
 801421e:	bc80      	pop	{r7}
 8014220:	4770      	bx	lr
 8014222:	bf00      	nop
 8014224:	20001490 	.word	0x20001490

08014228 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b082      	sub	sp, #8
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014230:	f000 f852 	bl	80142d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014234:	4b06      	ldr	r3, [pc, #24]	@ (8014250 <prvIdleTask+0x28>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	2b01      	cmp	r3, #1
 801423a:	d9f9      	bls.n	8014230 <prvIdleTask+0x8>
			{
				taskYIELD();
 801423c:	4b05      	ldr	r3, [pc, #20]	@ (8014254 <prvIdleTask+0x2c>)
 801423e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014242:	601a      	str	r2, [r3, #0]
 8014244:	f3bf 8f4f 	dsb	sy
 8014248:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801424c:	e7f0      	b.n	8014230 <prvIdleTask+0x8>
 801424e:	bf00      	nop
 8014250:	20001380 	.word	0x20001380
 8014254:	e000ed04 	.word	0xe000ed04

08014258 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b082      	sub	sp, #8
 801425c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801425e:	2300      	movs	r3, #0
 8014260:	607b      	str	r3, [r7, #4]
 8014262:	e00c      	b.n	801427e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014264:	687a      	ldr	r2, [r7, #4]
 8014266:	4613      	mov	r3, r2
 8014268:	009b      	lsls	r3, r3, #2
 801426a:	4413      	add	r3, r2
 801426c:	009b      	lsls	r3, r3, #2
 801426e:	4a12      	ldr	r2, [pc, #72]	@ (80142b8 <prvInitialiseTaskLists+0x60>)
 8014270:	4413      	add	r3, r2
 8014272:	4618      	mov	r0, r3
 8014274:	f7fe fa8b 	bl	801278e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	3301      	adds	r3, #1
 801427c:	607b      	str	r3, [r7, #4]
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	2b06      	cmp	r3, #6
 8014282:	d9ef      	bls.n	8014264 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014284:	480d      	ldr	r0, [pc, #52]	@ (80142bc <prvInitialiseTaskLists+0x64>)
 8014286:	f7fe fa82 	bl	801278e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801428a:	480d      	ldr	r0, [pc, #52]	@ (80142c0 <prvInitialiseTaskLists+0x68>)
 801428c:	f7fe fa7f 	bl	801278e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014290:	480c      	ldr	r0, [pc, #48]	@ (80142c4 <prvInitialiseTaskLists+0x6c>)
 8014292:	f7fe fa7c 	bl	801278e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014296:	480c      	ldr	r0, [pc, #48]	@ (80142c8 <prvInitialiseTaskLists+0x70>)
 8014298:	f7fe fa79 	bl	801278e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801429c:	480b      	ldr	r0, [pc, #44]	@ (80142cc <prvInitialiseTaskLists+0x74>)
 801429e:	f7fe fa76 	bl	801278e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80142a2:	4b0b      	ldr	r3, [pc, #44]	@ (80142d0 <prvInitialiseTaskLists+0x78>)
 80142a4:	4a05      	ldr	r2, [pc, #20]	@ (80142bc <prvInitialiseTaskLists+0x64>)
 80142a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80142a8:	4b0a      	ldr	r3, [pc, #40]	@ (80142d4 <prvInitialiseTaskLists+0x7c>)
 80142aa:	4a05      	ldr	r2, [pc, #20]	@ (80142c0 <prvInitialiseTaskLists+0x68>)
 80142ac:	601a      	str	r2, [r3, #0]
}
 80142ae:	bf00      	nop
 80142b0:	3708      	adds	r7, #8
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}
 80142b6:	bf00      	nop
 80142b8:	20001380 	.word	0x20001380
 80142bc:	2000140c 	.word	0x2000140c
 80142c0:	20001420 	.word	0x20001420
 80142c4:	2000143c 	.word	0x2000143c
 80142c8:	20001450 	.word	0x20001450
 80142cc:	20001468 	.word	0x20001468
 80142d0:	20001434 	.word	0x20001434
 80142d4:	20001438 	.word	0x20001438

080142d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80142de:	e019      	b.n	8014314 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80142e0:	f000 fbec 	bl	8014abc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80142e4:	4b10      	ldr	r3, [pc, #64]	@ (8014328 <prvCheckTasksWaitingTermination+0x50>)
 80142e6:	68db      	ldr	r3, [r3, #12]
 80142e8:	68db      	ldr	r3, [r3, #12]
 80142ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	3304      	adds	r3, #4
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7fe fad2 	bl	801289a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80142f6:	4b0d      	ldr	r3, [pc, #52]	@ (801432c <prvCheckTasksWaitingTermination+0x54>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	3b01      	subs	r3, #1
 80142fc:	4a0b      	ldr	r2, [pc, #44]	@ (801432c <prvCheckTasksWaitingTermination+0x54>)
 80142fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014300:	4b0b      	ldr	r3, [pc, #44]	@ (8014330 <prvCheckTasksWaitingTermination+0x58>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	3b01      	subs	r3, #1
 8014306:	4a0a      	ldr	r2, [pc, #40]	@ (8014330 <prvCheckTasksWaitingTermination+0x58>)
 8014308:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801430a:	f000 fc07 	bl	8014b1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f000 f848 	bl	80143a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014314:	4b06      	ldr	r3, [pc, #24]	@ (8014330 <prvCheckTasksWaitingTermination+0x58>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d1e1      	bne.n	80142e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801431c:	bf00      	nop
 801431e:	bf00      	nop
 8014320:	3708      	adds	r7, #8
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}
 8014326:	bf00      	nop
 8014328:	20001450 	.word	0x20001450
 801432c:	2000147c 	.word	0x2000147c
 8014330:	20001464 	.word	0x20001464

08014334 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8014334:	b480      	push	{r7}
 8014336:	b085      	sub	sp, #20
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 801433c:	2300      	movs	r3, #0
 801433e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014340:	e005      	b.n	801434e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	3301      	adds	r3, #1
 8014346:	607b      	str	r3, [r7, #4]
			ulCount++;
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	3301      	adds	r3, #1
 801434c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	2ba5      	cmp	r3, #165	@ 0xa5
 8014354:	d0f5      	beq.n	8014342 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	089b      	lsrs	r3, r3, #2
 801435a:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	b29b      	uxth	r3, r3
	}
 8014360:	4618      	mov	r0, r3
 8014362:	3714      	adds	r7, #20
 8014364:	46bd      	mov	sp, r7
 8014366:	bc80      	pop	{r7}
 8014368:	4770      	bx	lr
	...

0801436c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 801436c:	b580      	push	{r7, lr}
 801436e:	b086      	sub	sp, #24
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d102      	bne.n	8014380 <uxTaskGetStackHighWaterMark+0x14>
 801437a:	4b09      	ldr	r3, [pc, #36]	@ (80143a0 <uxTaskGetStackHighWaterMark+0x34>)
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	e000      	b.n	8014382 <uxTaskGetStackHighWaterMark+0x16>
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014388:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 801438a:	6938      	ldr	r0, [r7, #16]
 801438c:	f7ff ffd2 	bl	8014334 <prvTaskCheckFreeStackSpace>
 8014390:	4603      	mov	r3, r0
 8014392:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8014394:	68fb      	ldr	r3, [r7, #12]
	}
 8014396:	4618      	mov	r0, r3
 8014398:	3718      	adds	r7, #24
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}
 801439e:	bf00      	nop
 80143a0:	2000137c 	.word	0x2000137c

080143a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b084      	sub	sp, #16
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d108      	bne.n	80143c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143ba:	4618      	mov	r0, r3
 80143bc:	f000 fd48 	bl	8014e50 <vPortFree>
				vPortFree( pxTCB );
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f000 fd45 	bl	8014e50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80143c6:	e019      	b.n	80143fc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80143ce:	2b01      	cmp	r3, #1
 80143d0:	d103      	bne.n	80143da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f000 fd3c 	bl	8014e50 <vPortFree>
	}
 80143d8:	e010      	b.n	80143fc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80143e0:	2b02      	cmp	r3, #2
 80143e2:	d00b      	beq.n	80143fc <prvDeleteTCB+0x58>
	__asm volatile
 80143e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143e8:	f383 8811 	msr	BASEPRI, r3
 80143ec:	f3bf 8f6f 	isb	sy
 80143f0:	f3bf 8f4f 	dsb	sy
 80143f4:	60fb      	str	r3, [r7, #12]
}
 80143f6:	bf00      	nop
 80143f8:	bf00      	nop
 80143fa:	e7fd      	b.n	80143f8 <prvDeleteTCB+0x54>
	}
 80143fc:	bf00      	nop
 80143fe:	3710      	adds	r7, #16
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}

08014404 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014404:	b480      	push	{r7}
 8014406:	b083      	sub	sp, #12
 8014408:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801440a:	4b0e      	ldr	r3, [pc, #56]	@ (8014444 <prvResetNextTaskUnblockTime+0x40>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d101      	bne.n	8014418 <prvResetNextTaskUnblockTime+0x14>
 8014414:	2301      	movs	r3, #1
 8014416:	e000      	b.n	801441a <prvResetNextTaskUnblockTime+0x16>
 8014418:	2300      	movs	r3, #0
 801441a:	2b00      	cmp	r3, #0
 801441c:	d004      	beq.n	8014428 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801441e:	4b0a      	ldr	r3, [pc, #40]	@ (8014448 <prvResetNextTaskUnblockTime+0x44>)
 8014420:	f04f 32ff 	mov.w	r2, #4294967295
 8014424:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014426:	e008      	b.n	801443a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8014428:	4b06      	ldr	r3, [pc, #24]	@ (8014444 <prvResetNextTaskUnblockTime+0x40>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	68db      	ldr	r3, [r3, #12]
 801442e:	68db      	ldr	r3, [r3, #12]
 8014430:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	685b      	ldr	r3, [r3, #4]
 8014436:	4a04      	ldr	r2, [pc, #16]	@ (8014448 <prvResetNextTaskUnblockTime+0x44>)
 8014438:	6013      	str	r3, [r2, #0]
}
 801443a:	bf00      	nop
 801443c:	370c      	adds	r7, #12
 801443e:	46bd      	mov	sp, r7
 8014440:	bc80      	pop	{r7}
 8014442:	4770      	bx	lr
 8014444:	20001434 	.word	0x20001434
 8014448:	2000149c 	.word	0x2000149c

0801444c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801444c:	b480      	push	{r7}
 801444e:	b083      	sub	sp, #12
 8014450:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014452:	4b0b      	ldr	r3, [pc, #44]	@ (8014480 <xTaskGetSchedulerState+0x34>)
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d102      	bne.n	8014460 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801445a:	2301      	movs	r3, #1
 801445c:	607b      	str	r3, [r7, #4]
 801445e:	e008      	b.n	8014472 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014460:	4b08      	ldr	r3, [pc, #32]	@ (8014484 <xTaskGetSchedulerState+0x38>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d102      	bne.n	801446e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014468:	2302      	movs	r3, #2
 801446a:	607b      	str	r3, [r7, #4]
 801446c:	e001      	b.n	8014472 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801446e:	2300      	movs	r3, #0
 8014470:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014472:	687b      	ldr	r3, [r7, #4]
	}
 8014474:	4618      	mov	r0, r3
 8014476:	370c      	adds	r7, #12
 8014478:	46bd      	mov	sp, r7
 801447a:	bc80      	pop	{r7}
 801447c:	4770      	bx	lr
 801447e:	bf00      	nop
 8014480:	20001488 	.word	0x20001488
 8014484:	200014a4 	.word	0x200014a4

08014488 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014488:	b580      	push	{r7, lr}
 801448a:	b084      	sub	sp, #16
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014494:	2300      	movs	r3, #0
 8014496:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d06e      	beq.n	801457c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801449e:	68bb      	ldr	r3, [r7, #8]
 80144a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144a2:	4b39      	ldr	r3, [pc, #228]	@ (8014588 <xTaskPriorityInherit+0x100>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144a8:	429a      	cmp	r2, r3
 80144aa:	d25e      	bcs.n	801456a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	699b      	ldr	r3, [r3, #24]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	db06      	blt.n	80144c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80144b4:	4b34      	ldr	r3, [pc, #208]	@ (8014588 <xTaskPriorityInherit+0x100>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144ba:	f1c3 0207 	rsb	r2, r3, #7
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	6959      	ldr	r1, [r3, #20]
 80144c6:	68bb      	ldr	r3, [r7, #8]
 80144c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144ca:	4613      	mov	r3, r2
 80144cc:	009b      	lsls	r3, r3, #2
 80144ce:	4413      	add	r3, r2
 80144d0:	009b      	lsls	r3, r3, #2
 80144d2:	4a2e      	ldr	r2, [pc, #184]	@ (801458c <xTaskPriorityInherit+0x104>)
 80144d4:	4413      	add	r3, r2
 80144d6:	4299      	cmp	r1, r3
 80144d8:	d101      	bne.n	80144de <xTaskPriorityInherit+0x56>
 80144da:	2301      	movs	r3, #1
 80144dc:	e000      	b.n	80144e0 <xTaskPriorityInherit+0x58>
 80144de:	2300      	movs	r3, #0
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d03a      	beq.n	801455a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	3304      	adds	r3, #4
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7fe f9d6 	bl	801289a <uxListRemove>
 80144ee:	4603      	mov	r3, r0
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d115      	bne.n	8014520 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144f8:	4924      	ldr	r1, [pc, #144]	@ (801458c <xTaskPriorityInherit+0x104>)
 80144fa:	4613      	mov	r3, r2
 80144fc:	009b      	lsls	r3, r3, #2
 80144fe:	4413      	add	r3, r2
 8014500:	009b      	lsls	r3, r3, #2
 8014502:	440b      	add	r3, r1
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d10a      	bne.n	8014520 <xTaskPriorityInherit+0x98>
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801450e:	2201      	movs	r2, #1
 8014510:	fa02 f303 	lsl.w	r3, r2, r3
 8014514:	43da      	mvns	r2, r3
 8014516:	4b1e      	ldr	r3, [pc, #120]	@ (8014590 <xTaskPriorityInherit+0x108>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	4013      	ands	r3, r2
 801451c:	4a1c      	ldr	r2, [pc, #112]	@ (8014590 <xTaskPriorityInherit+0x108>)
 801451e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014520:	4b19      	ldr	r3, [pc, #100]	@ (8014588 <xTaskPriorityInherit+0x100>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801452a:	68bb      	ldr	r3, [r7, #8]
 801452c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801452e:	2201      	movs	r2, #1
 8014530:	409a      	lsls	r2, r3
 8014532:	4b17      	ldr	r3, [pc, #92]	@ (8014590 <xTaskPriorityInherit+0x108>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	4313      	orrs	r3, r2
 8014538:	4a15      	ldr	r2, [pc, #84]	@ (8014590 <xTaskPriorityInherit+0x108>)
 801453a:	6013      	str	r3, [r2, #0]
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014540:	4613      	mov	r3, r2
 8014542:	009b      	lsls	r3, r3, #2
 8014544:	4413      	add	r3, r2
 8014546:	009b      	lsls	r3, r3, #2
 8014548:	4a10      	ldr	r2, [pc, #64]	@ (801458c <xTaskPriorityInherit+0x104>)
 801454a:	441a      	add	r2, r3
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	3304      	adds	r3, #4
 8014550:	4619      	mov	r1, r3
 8014552:	4610      	mov	r0, r2
 8014554:	f7fe f946 	bl	80127e4 <vListInsertEnd>
 8014558:	e004      	b.n	8014564 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801455a:	4b0b      	ldr	r3, [pc, #44]	@ (8014588 <xTaskPriorityInherit+0x100>)
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014564:	2301      	movs	r3, #1
 8014566:	60fb      	str	r3, [r7, #12]
 8014568:	e008      	b.n	801457c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801456e:	4b06      	ldr	r3, [pc, #24]	@ (8014588 <xTaskPriorityInherit+0x100>)
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014574:	429a      	cmp	r2, r3
 8014576:	d201      	bcs.n	801457c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014578:	2301      	movs	r3, #1
 801457a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801457c:	68fb      	ldr	r3, [r7, #12]
	}
 801457e:	4618      	mov	r0, r3
 8014580:	3710      	adds	r7, #16
 8014582:	46bd      	mov	sp, r7
 8014584:	bd80      	pop	{r7, pc}
 8014586:	bf00      	nop
 8014588:	2000137c 	.word	0x2000137c
 801458c:	20001380 	.word	0x20001380
 8014590:	20001484 	.word	0x20001484

08014594 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014594:	b580      	push	{r7, lr}
 8014596:	b086      	sub	sp, #24
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80145a0:	2300      	movs	r3, #0
 80145a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d070      	beq.n	801468c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80145aa:	4b3b      	ldr	r3, [pc, #236]	@ (8014698 <xTaskPriorityDisinherit+0x104>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	693a      	ldr	r2, [r7, #16]
 80145b0:	429a      	cmp	r2, r3
 80145b2:	d00b      	beq.n	80145cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80145b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145b8:	f383 8811 	msr	BASEPRI, r3
 80145bc:	f3bf 8f6f 	isb	sy
 80145c0:	f3bf 8f4f 	dsb	sy
 80145c4:	60fb      	str	r3, [r7, #12]
}
 80145c6:	bf00      	nop
 80145c8:	bf00      	nop
 80145ca:	e7fd      	b.n	80145c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80145cc:	693b      	ldr	r3, [r7, #16]
 80145ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d10b      	bne.n	80145ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80145d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145d8:	f383 8811 	msr	BASEPRI, r3
 80145dc:	f3bf 8f6f 	isb	sy
 80145e0:	f3bf 8f4f 	dsb	sy
 80145e4:	60bb      	str	r3, [r7, #8]
}
 80145e6:	bf00      	nop
 80145e8:	bf00      	nop
 80145ea:	e7fd      	b.n	80145e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80145ec:	693b      	ldr	r3, [r7, #16]
 80145ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80145f0:	1e5a      	subs	r2, r3, #1
 80145f2:	693b      	ldr	r3, [r7, #16]
 80145f4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80145f6:	693b      	ldr	r3, [r7, #16]
 80145f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80145fe:	429a      	cmp	r2, r3
 8014600:	d044      	beq.n	801468c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014602:	693b      	ldr	r3, [r7, #16]
 8014604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014606:	2b00      	cmp	r3, #0
 8014608:	d140      	bne.n	801468c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801460a:	693b      	ldr	r3, [r7, #16]
 801460c:	3304      	adds	r3, #4
 801460e:	4618      	mov	r0, r3
 8014610:	f7fe f943 	bl	801289a <uxListRemove>
 8014614:	4603      	mov	r3, r0
 8014616:	2b00      	cmp	r3, #0
 8014618:	d115      	bne.n	8014646 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801461a:	693b      	ldr	r3, [r7, #16]
 801461c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801461e:	491f      	ldr	r1, [pc, #124]	@ (801469c <xTaskPriorityDisinherit+0x108>)
 8014620:	4613      	mov	r3, r2
 8014622:	009b      	lsls	r3, r3, #2
 8014624:	4413      	add	r3, r2
 8014626:	009b      	lsls	r3, r3, #2
 8014628:	440b      	add	r3, r1
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d10a      	bne.n	8014646 <xTaskPriorityDisinherit+0xb2>
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014634:	2201      	movs	r2, #1
 8014636:	fa02 f303 	lsl.w	r3, r2, r3
 801463a:	43da      	mvns	r2, r3
 801463c:	4b18      	ldr	r3, [pc, #96]	@ (80146a0 <xTaskPriorityDisinherit+0x10c>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	4013      	ands	r3, r2
 8014642:	4a17      	ldr	r2, [pc, #92]	@ (80146a0 <xTaskPriorityDisinherit+0x10c>)
 8014644:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014646:	693b      	ldr	r3, [r7, #16]
 8014648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801464a:	693b      	ldr	r3, [r7, #16]
 801464c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801464e:	693b      	ldr	r3, [r7, #16]
 8014650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014652:	f1c3 0207 	rsb	r2, r3, #7
 8014656:	693b      	ldr	r3, [r7, #16]
 8014658:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801465a:	693b      	ldr	r3, [r7, #16]
 801465c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801465e:	2201      	movs	r2, #1
 8014660:	409a      	lsls	r2, r3
 8014662:	4b0f      	ldr	r3, [pc, #60]	@ (80146a0 <xTaskPriorityDisinherit+0x10c>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	4313      	orrs	r3, r2
 8014668:	4a0d      	ldr	r2, [pc, #52]	@ (80146a0 <xTaskPriorityDisinherit+0x10c>)
 801466a:	6013      	str	r3, [r2, #0]
 801466c:	693b      	ldr	r3, [r7, #16]
 801466e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014670:	4613      	mov	r3, r2
 8014672:	009b      	lsls	r3, r3, #2
 8014674:	4413      	add	r3, r2
 8014676:	009b      	lsls	r3, r3, #2
 8014678:	4a08      	ldr	r2, [pc, #32]	@ (801469c <xTaskPriorityDisinherit+0x108>)
 801467a:	441a      	add	r2, r3
 801467c:	693b      	ldr	r3, [r7, #16]
 801467e:	3304      	adds	r3, #4
 8014680:	4619      	mov	r1, r3
 8014682:	4610      	mov	r0, r2
 8014684:	f7fe f8ae 	bl	80127e4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014688:	2301      	movs	r3, #1
 801468a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801468c:	697b      	ldr	r3, [r7, #20]
	}
 801468e:	4618      	mov	r0, r3
 8014690:	3718      	adds	r7, #24
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	2000137c 	.word	0x2000137c
 801469c:	20001380 	.word	0x20001380
 80146a0:	20001484 	.word	0x20001484

080146a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b088      	sub	sp, #32
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80146b2:	2301      	movs	r3, #1
 80146b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	f000 808a 	beq.w	80147d2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80146be:	69bb      	ldr	r3, [r7, #24]
 80146c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d10b      	bne.n	80146de <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80146c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146ca:	f383 8811 	msr	BASEPRI, r3
 80146ce:	f3bf 8f6f 	isb	sy
 80146d2:	f3bf 8f4f 	dsb	sy
 80146d6:	60fb      	str	r3, [r7, #12]
}
 80146d8:	bf00      	nop
 80146da:	bf00      	nop
 80146dc:	e7fd      	b.n	80146da <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80146de:	69bb      	ldr	r3, [r7, #24]
 80146e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80146e2:	683a      	ldr	r2, [r7, #0]
 80146e4:	429a      	cmp	r2, r3
 80146e6:	d902      	bls.n	80146ee <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	61fb      	str	r3, [r7, #28]
 80146ec:	e002      	b.n	80146f4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80146ee:	69bb      	ldr	r3, [r7, #24]
 80146f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80146f2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80146f4:	69bb      	ldr	r3, [r7, #24]
 80146f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146f8:	69fa      	ldr	r2, [r7, #28]
 80146fa:	429a      	cmp	r2, r3
 80146fc:	d069      	beq.n	80147d2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80146fe:	69bb      	ldr	r3, [r7, #24]
 8014700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014702:	697a      	ldr	r2, [r7, #20]
 8014704:	429a      	cmp	r2, r3
 8014706:	d164      	bne.n	80147d2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014708:	4b34      	ldr	r3, [pc, #208]	@ (80147dc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	69ba      	ldr	r2, [r7, #24]
 801470e:	429a      	cmp	r2, r3
 8014710:	d10b      	bne.n	801472a <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8014712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014716:	f383 8811 	msr	BASEPRI, r3
 801471a:	f3bf 8f6f 	isb	sy
 801471e:	f3bf 8f4f 	dsb	sy
 8014722:	60bb      	str	r3, [r7, #8]
}
 8014724:	bf00      	nop
 8014726:	bf00      	nop
 8014728:	e7fd      	b.n	8014726 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801472a:	69bb      	ldr	r3, [r7, #24]
 801472c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801472e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014730:	69bb      	ldr	r3, [r7, #24]
 8014732:	69fa      	ldr	r2, [r7, #28]
 8014734:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014736:	69bb      	ldr	r3, [r7, #24]
 8014738:	699b      	ldr	r3, [r3, #24]
 801473a:	2b00      	cmp	r3, #0
 801473c:	db04      	blt.n	8014748 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801473e:	69fb      	ldr	r3, [r7, #28]
 8014740:	f1c3 0207 	rsb	r2, r3, #7
 8014744:	69bb      	ldr	r3, [r7, #24]
 8014746:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014748:	69bb      	ldr	r3, [r7, #24]
 801474a:	6959      	ldr	r1, [r3, #20]
 801474c:	693a      	ldr	r2, [r7, #16]
 801474e:	4613      	mov	r3, r2
 8014750:	009b      	lsls	r3, r3, #2
 8014752:	4413      	add	r3, r2
 8014754:	009b      	lsls	r3, r3, #2
 8014756:	4a22      	ldr	r2, [pc, #136]	@ (80147e0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014758:	4413      	add	r3, r2
 801475a:	4299      	cmp	r1, r3
 801475c:	d101      	bne.n	8014762 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 801475e:	2301      	movs	r3, #1
 8014760:	e000      	b.n	8014764 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8014762:	2300      	movs	r3, #0
 8014764:	2b00      	cmp	r3, #0
 8014766:	d034      	beq.n	80147d2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014768:	69bb      	ldr	r3, [r7, #24]
 801476a:	3304      	adds	r3, #4
 801476c:	4618      	mov	r0, r3
 801476e:	f7fe f894 	bl	801289a <uxListRemove>
 8014772:	4603      	mov	r3, r0
 8014774:	2b00      	cmp	r3, #0
 8014776:	d115      	bne.n	80147a4 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014778:	69bb      	ldr	r3, [r7, #24]
 801477a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801477c:	4918      	ldr	r1, [pc, #96]	@ (80147e0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801477e:	4613      	mov	r3, r2
 8014780:	009b      	lsls	r3, r3, #2
 8014782:	4413      	add	r3, r2
 8014784:	009b      	lsls	r3, r3, #2
 8014786:	440b      	add	r3, r1
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d10a      	bne.n	80147a4 <vTaskPriorityDisinheritAfterTimeout+0x100>
 801478e:	69bb      	ldr	r3, [r7, #24]
 8014790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014792:	2201      	movs	r2, #1
 8014794:	fa02 f303 	lsl.w	r3, r2, r3
 8014798:	43da      	mvns	r2, r3
 801479a:	4b12      	ldr	r3, [pc, #72]	@ (80147e4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	4013      	ands	r3, r2
 80147a0:	4a10      	ldr	r2, [pc, #64]	@ (80147e4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80147a2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80147a4:	69bb      	ldr	r3, [r7, #24]
 80147a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147a8:	2201      	movs	r2, #1
 80147aa:	409a      	lsls	r2, r3
 80147ac:	4b0d      	ldr	r3, [pc, #52]	@ (80147e4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	4313      	orrs	r3, r2
 80147b2:	4a0c      	ldr	r2, [pc, #48]	@ (80147e4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80147b4:	6013      	str	r3, [r2, #0]
 80147b6:	69bb      	ldr	r3, [r7, #24]
 80147b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147ba:	4613      	mov	r3, r2
 80147bc:	009b      	lsls	r3, r3, #2
 80147be:	4413      	add	r3, r2
 80147c0:	009b      	lsls	r3, r3, #2
 80147c2:	4a07      	ldr	r2, [pc, #28]	@ (80147e0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80147c4:	441a      	add	r2, r3
 80147c6:	69bb      	ldr	r3, [r7, #24]
 80147c8:	3304      	adds	r3, #4
 80147ca:	4619      	mov	r1, r3
 80147cc:	4610      	mov	r0, r2
 80147ce:	f7fe f809 	bl	80127e4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80147d2:	bf00      	nop
 80147d4:	3720      	adds	r7, #32
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	2000137c 	.word	0x2000137c
 80147e0:	20001380 	.word	0x20001380
 80147e4:	20001484 	.word	0x20001484

080147e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80147e8:	b480      	push	{r7}
 80147ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80147ec:	4b07      	ldr	r3, [pc, #28]	@ (801480c <pvTaskIncrementMutexHeldCount+0x24>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d004      	beq.n	80147fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80147f4:	4b05      	ldr	r3, [pc, #20]	@ (801480c <pvTaskIncrementMutexHeldCount+0x24>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80147fa:	3201      	adds	r2, #1
 80147fc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80147fe:	4b03      	ldr	r3, [pc, #12]	@ (801480c <pvTaskIncrementMutexHeldCount+0x24>)
 8014800:	681b      	ldr	r3, [r3, #0]
	}
 8014802:	4618      	mov	r0, r3
 8014804:	46bd      	mov	sp, r7
 8014806:	bc80      	pop	{r7}
 8014808:	4770      	bx	lr
 801480a:	bf00      	nop
 801480c:	2000137c 	.word	0x2000137c

08014810 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b084      	sub	sp, #16
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801481a:	4b29      	ldr	r3, [pc, #164]	@ (80148c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014820:	4b28      	ldr	r3, [pc, #160]	@ (80148c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	3304      	adds	r3, #4
 8014826:	4618      	mov	r0, r3
 8014828:	f7fe f837 	bl	801289a <uxListRemove>
 801482c:	4603      	mov	r3, r0
 801482e:	2b00      	cmp	r3, #0
 8014830:	d10b      	bne.n	801484a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8014832:	4b24      	ldr	r3, [pc, #144]	@ (80148c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014838:	2201      	movs	r2, #1
 801483a:	fa02 f303 	lsl.w	r3, r2, r3
 801483e:	43da      	mvns	r2, r3
 8014840:	4b21      	ldr	r3, [pc, #132]	@ (80148c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	4013      	ands	r3, r2
 8014846:	4a20      	ldr	r2, [pc, #128]	@ (80148c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014848:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014850:	d10a      	bne.n	8014868 <prvAddCurrentTaskToDelayedList+0x58>
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d007      	beq.n	8014868 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014858:	4b1a      	ldr	r3, [pc, #104]	@ (80148c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	3304      	adds	r3, #4
 801485e:	4619      	mov	r1, r3
 8014860:	481a      	ldr	r0, [pc, #104]	@ (80148cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8014862:	f7fd ffbf 	bl	80127e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014866:	e026      	b.n	80148b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014868:	68fa      	ldr	r2, [r7, #12]
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	4413      	add	r3, r2
 801486e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014870:	4b14      	ldr	r3, [pc, #80]	@ (80148c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	68ba      	ldr	r2, [r7, #8]
 8014876:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014878:	68ba      	ldr	r2, [r7, #8]
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	429a      	cmp	r2, r3
 801487e:	d209      	bcs.n	8014894 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014880:	4b13      	ldr	r3, [pc, #76]	@ (80148d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014882:	681a      	ldr	r2, [r3, #0]
 8014884:	4b0f      	ldr	r3, [pc, #60]	@ (80148c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	3304      	adds	r3, #4
 801488a:	4619      	mov	r1, r3
 801488c:	4610      	mov	r0, r2
 801488e:	f7fd ffcc 	bl	801282a <vListInsert>
}
 8014892:	e010      	b.n	80148b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014894:	4b0f      	ldr	r3, [pc, #60]	@ (80148d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014896:	681a      	ldr	r2, [r3, #0]
 8014898:	4b0a      	ldr	r3, [pc, #40]	@ (80148c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	3304      	adds	r3, #4
 801489e:	4619      	mov	r1, r3
 80148a0:	4610      	mov	r0, r2
 80148a2:	f7fd ffc2 	bl	801282a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80148a6:	4b0c      	ldr	r3, [pc, #48]	@ (80148d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	68ba      	ldr	r2, [r7, #8]
 80148ac:	429a      	cmp	r2, r3
 80148ae:	d202      	bcs.n	80148b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80148b0:	4a09      	ldr	r2, [pc, #36]	@ (80148d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80148b2:	68bb      	ldr	r3, [r7, #8]
 80148b4:	6013      	str	r3, [r2, #0]
}
 80148b6:	bf00      	nop
 80148b8:	3710      	adds	r7, #16
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
 80148be:	bf00      	nop
 80148c0:	20001480 	.word	0x20001480
 80148c4:	2000137c 	.word	0x2000137c
 80148c8:	20001484 	.word	0x20001484
 80148cc:	20001468 	.word	0x20001468
 80148d0:	20001438 	.word	0x20001438
 80148d4:	20001434 	.word	0x20001434
 80148d8:	2000149c 	.word	0x2000149c

080148dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80148dc:	b480      	push	{r7}
 80148de:	b085      	sub	sp, #20
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	60f8      	str	r0, [r7, #12]
 80148e4:	60b9      	str	r1, [r7, #8]
 80148e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	3b04      	subs	r3, #4
 80148ec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80148f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	3b04      	subs	r3, #4
 80148fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	f023 0201 	bic.w	r2, r3, #1
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	3b04      	subs	r3, #4
 801490a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801490c:	4a08      	ldr	r2, [pc, #32]	@ (8014930 <pxPortInitialiseStack+0x54>)
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	3b14      	subs	r3, #20
 8014916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014918:	687a      	ldr	r2, [r7, #4]
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	3b20      	subs	r3, #32
 8014922:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014924:	68fb      	ldr	r3, [r7, #12]
}
 8014926:	4618      	mov	r0, r3
 8014928:	3714      	adds	r7, #20
 801492a:	46bd      	mov	sp, r7
 801492c:	bc80      	pop	{r7}
 801492e:	4770      	bx	lr
 8014930:	08014935 	.word	0x08014935

08014934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014934:	b480      	push	{r7}
 8014936:	b085      	sub	sp, #20
 8014938:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801493a:	2300      	movs	r3, #0
 801493c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801493e:	4b12      	ldr	r3, [pc, #72]	@ (8014988 <prvTaskExitError+0x54>)
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014946:	d00b      	beq.n	8014960 <prvTaskExitError+0x2c>
	__asm volatile
 8014948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801494c:	f383 8811 	msr	BASEPRI, r3
 8014950:	f3bf 8f6f 	isb	sy
 8014954:	f3bf 8f4f 	dsb	sy
 8014958:	60fb      	str	r3, [r7, #12]
}
 801495a:	bf00      	nop
 801495c:	bf00      	nop
 801495e:	e7fd      	b.n	801495c <prvTaskExitError+0x28>
	__asm volatile
 8014960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014964:	f383 8811 	msr	BASEPRI, r3
 8014968:	f3bf 8f6f 	isb	sy
 801496c:	f3bf 8f4f 	dsb	sy
 8014970:	60bb      	str	r3, [r7, #8]
}
 8014972:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014974:	bf00      	nop
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d0fc      	beq.n	8014976 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801497c:	bf00      	nop
 801497e:	bf00      	nop
 8014980:	3714      	adds	r7, #20
 8014982:	46bd      	mov	sp, r7
 8014984:	bc80      	pop	{r7}
 8014986:	4770      	bx	lr
 8014988:	20000084 	.word	0x20000084
 801498c:	00000000 	.word	0x00000000

08014990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014990:	4b07      	ldr	r3, [pc, #28]	@ (80149b0 <pxCurrentTCBConst2>)
 8014992:	6819      	ldr	r1, [r3, #0]
 8014994:	6808      	ldr	r0, [r1, #0]
 8014996:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801499a:	f380 8809 	msr	PSP, r0
 801499e:	f3bf 8f6f 	isb	sy
 80149a2:	f04f 0000 	mov.w	r0, #0
 80149a6:	f380 8811 	msr	BASEPRI, r0
 80149aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80149ae:	4770      	bx	lr

080149b0 <pxCurrentTCBConst2>:
 80149b0:	2000137c 	.word	0x2000137c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80149b4:	bf00      	nop
 80149b6:	bf00      	nop

080149b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80149b8:	4806      	ldr	r0, [pc, #24]	@ (80149d4 <prvPortStartFirstTask+0x1c>)
 80149ba:	6800      	ldr	r0, [r0, #0]
 80149bc:	6800      	ldr	r0, [r0, #0]
 80149be:	f380 8808 	msr	MSP, r0
 80149c2:	b662      	cpsie	i
 80149c4:	b661      	cpsie	f
 80149c6:	f3bf 8f4f 	dsb	sy
 80149ca:	f3bf 8f6f 	isb	sy
 80149ce:	df00      	svc	0
 80149d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80149d2:	bf00      	nop
 80149d4:	e000ed08 	.word	0xe000ed08

080149d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b084      	sub	sp, #16
 80149dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80149de:	4b32      	ldr	r3, [pc, #200]	@ (8014aa8 <xPortStartScheduler+0xd0>)
 80149e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	781b      	ldrb	r3, [r3, #0]
 80149e6:	b2db      	uxtb	r3, r3
 80149e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	22ff      	movs	r2, #255	@ 0xff
 80149ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	b2db      	uxtb	r3, r3
 80149f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80149f8:	78fb      	ldrb	r3, [r7, #3]
 80149fa:	b2db      	uxtb	r3, r3
 80149fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014a00:	b2da      	uxtb	r2, r3
 8014a02:	4b2a      	ldr	r3, [pc, #168]	@ (8014aac <xPortStartScheduler+0xd4>)
 8014a04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014a06:	4b2a      	ldr	r3, [pc, #168]	@ (8014ab0 <xPortStartScheduler+0xd8>)
 8014a08:	2207      	movs	r2, #7
 8014a0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014a0c:	e009      	b.n	8014a22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014a0e:	4b28      	ldr	r3, [pc, #160]	@ (8014ab0 <xPortStartScheduler+0xd8>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	3b01      	subs	r3, #1
 8014a14:	4a26      	ldr	r2, [pc, #152]	@ (8014ab0 <xPortStartScheduler+0xd8>)
 8014a16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014a18:	78fb      	ldrb	r3, [r7, #3]
 8014a1a:	b2db      	uxtb	r3, r3
 8014a1c:	005b      	lsls	r3, r3, #1
 8014a1e:	b2db      	uxtb	r3, r3
 8014a20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014a22:	78fb      	ldrb	r3, [r7, #3]
 8014a24:	b2db      	uxtb	r3, r3
 8014a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014a2a:	2b80      	cmp	r3, #128	@ 0x80
 8014a2c:	d0ef      	beq.n	8014a0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014a2e:	4b20      	ldr	r3, [pc, #128]	@ (8014ab0 <xPortStartScheduler+0xd8>)
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	f1c3 0307 	rsb	r3, r3, #7
 8014a36:	2b04      	cmp	r3, #4
 8014a38:	d00b      	beq.n	8014a52 <xPortStartScheduler+0x7a>
	__asm volatile
 8014a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a3e:	f383 8811 	msr	BASEPRI, r3
 8014a42:	f3bf 8f6f 	isb	sy
 8014a46:	f3bf 8f4f 	dsb	sy
 8014a4a:	60bb      	str	r3, [r7, #8]
}
 8014a4c:	bf00      	nop
 8014a4e:	bf00      	nop
 8014a50:	e7fd      	b.n	8014a4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014a52:	4b17      	ldr	r3, [pc, #92]	@ (8014ab0 <xPortStartScheduler+0xd8>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	021b      	lsls	r3, r3, #8
 8014a58:	4a15      	ldr	r2, [pc, #84]	@ (8014ab0 <xPortStartScheduler+0xd8>)
 8014a5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014a5c:	4b14      	ldr	r3, [pc, #80]	@ (8014ab0 <xPortStartScheduler+0xd8>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014a64:	4a12      	ldr	r2, [pc, #72]	@ (8014ab0 <xPortStartScheduler+0xd8>)
 8014a66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	b2da      	uxtb	r2, r3
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014a70:	4b10      	ldr	r3, [pc, #64]	@ (8014ab4 <xPortStartScheduler+0xdc>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	4a0f      	ldr	r2, [pc, #60]	@ (8014ab4 <xPortStartScheduler+0xdc>)
 8014a76:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014a7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8014ab4 <xPortStartScheduler+0xdc>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	4a0c      	ldr	r2, [pc, #48]	@ (8014ab4 <xPortStartScheduler+0xdc>)
 8014a82:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014a86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014a88:	f000 f8b8 	bl	8014bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8014ab8 <xPortStartScheduler+0xe0>)
 8014a8e:	2200      	movs	r2, #0
 8014a90:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014a92:	f7ff ff91 	bl	80149b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014a96:	f7ff fa5b 	bl	8013f50 <vTaskSwitchContext>
	prvTaskExitError();
 8014a9a:	f7ff ff4b 	bl	8014934 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014a9e:	2300      	movs	r3, #0
}
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	3710      	adds	r7, #16
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}
 8014aa8:	e000e400 	.word	0xe000e400
 8014aac:	200014a8 	.word	0x200014a8
 8014ab0:	200014ac 	.word	0x200014ac
 8014ab4:	e000ed20 	.word	0xe000ed20
 8014ab8:	20000084 	.word	0x20000084

08014abc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014abc:	b480      	push	{r7}
 8014abe:	b083      	sub	sp, #12
 8014ac0:	af00      	add	r7, sp, #0
	__asm volatile
 8014ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ac6:	f383 8811 	msr	BASEPRI, r3
 8014aca:	f3bf 8f6f 	isb	sy
 8014ace:	f3bf 8f4f 	dsb	sy
 8014ad2:	607b      	str	r3, [r7, #4]
}
 8014ad4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8014b14 <vPortEnterCritical+0x58>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	3301      	adds	r3, #1
 8014adc:	4a0d      	ldr	r2, [pc, #52]	@ (8014b14 <vPortEnterCritical+0x58>)
 8014ade:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8014b14 <vPortEnterCritical+0x58>)
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	2b01      	cmp	r3, #1
 8014ae6:	d110      	bne.n	8014b0a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8014b18 <vPortEnterCritical+0x5c>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	b2db      	uxtb	r3, r3
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d00b      	beq.n	8014b0a <vPortEnterCritical+0x4e>
	__asm volatile
 8014af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014af6:	f383 8811 	msr	BASEPRI, r3
 8014afa:	f3bf 8f6f 	isb	sy
 8014afe:	f3bf 8f4f 	dsb	sy
 8014b02:	603b      	str	r3, [r7, #0]
}
 8014b04:	bf00      	nop
 8014b06:	bf00      	nop
 8014b08:	e7fd      	b.n	8014b06 <vPortEnterCritical+0x4a>
	}
}
 8014b0a:	bf00      	nop
 8014b0c:	370c      	adds	r7, #12
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bc80      	pop	{r7}
 8014b12:	4770      	bx	lr
 8014b14:	20000084 	.word	0x20000084
 8014b18:	e000ed04 	.word	0xe000ed04

08014b1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014b1c:	b480      	push	{r7}
 8014b1e:	b083      	sub	sp, #12
 8014b20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014b22:	4b12      	ldr	r3, [pc, #72]	@ (8014b6c <vPortExitCritical+0x50>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d10b      	bne.n	8014b42 <vPortExitCritical+0x26>
	__asm volatile
 8014b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b2e:	f383 8811 	msr	BASEPRI, r3
 8014b32:	f3bf 8f6f 	isb	sy
 8014b36:	f3bf 8f4f 	dsb	sy
 8014b3a:	607b      	str	r3, [r7, #4]
}
 8014b3c:	bf00      	nop
 8014b3e:	bf00      	nop
 8014b40:	e7fd      	b.n	8014b3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014b42:	4b0a      	ldr	r3, [pc, #40]	@ (8014b6c <vPortExitCritical+0x50>)
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	3b01      	subs	r3, #1
 8014b48:	4a08      	ldr	r2, [pc, #32]	@ (8014b6c <vPortExitCritical+0x50>)
 8014b4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014b4c:	4b07      	ldr	r3, [pc, #28]	@ (8014b6c <vPortExitCritical+0x50>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d105      	bne.n	8014b60 <vPortExitCritical+0x44>
 8014b54:	2300      	movs	r3, #0
 8014b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	f383 8811 	msr	BASEPRI, r3
}
 8014b5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014b60:	bf00      	nop
 8014b62:	370c      	adds	r7, #12
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bc80      	pop	{r7}
 8014b68:	4770      	bx	lr
 8014b6a:	bf00      	nop
 8014b6c:	20000084 	.word	0x20000084

08014b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014b70:	f3ef 8009 	mrs	r0, PSP
 8014b74:	f3bf 8f6f 	isb	sy
 8014b78:	4b0d      	ldr	r3, [pc, #52]	@ (8014bb0 <pxCurrentTCBConst>)
 8014b7a:	681a      	ldr	r2, [r3, #0]
 8014b7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014b80:	6010      	str	r0, [r2, #0]
 8014b82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8014b86:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014b8a:	f380 8811 	msr	BASEPRI, r0
 8014b8e:	f7ff f9df 	bl	8013f50 <vTaskSwitchContext>
 8014b92:	f04f 0000 	mov.w	r0, #0
 8014b96:	f380 8811 	msr	BASEPRI, r0
 8014b9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014b9e:	6819      	ldr	r1, [r3, #0]
 8014ba0:	6808      	ldr	r0, [r1, #0]
 8014ba2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014ba6:	f380 8809 	msr	PSP, r0
 8014baa:	f3bf 8f6f 	isb	sy
 8014bae:	4770      	bx	lr

08014bb0 <pxCurrentTCBConst>:
 8014bb0:	2000137c 	.word	0x2000137c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014bb4:	bf00      	nop
 8014bb6:	bf00      	nop

08014bb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b082      	sub	sp, #8
 8014bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8014bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bc2:	f383 8811 	msr	BASEPRI, r3
 8014bc6:	f3bf 8f6f 	isb	sy
 8014bca:	f3bf 8f4f 	dsb	sy
 8014bce:	607b      	str	r3, [r7, #4]
}
 8014bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014bd2:	f7ff f8ff 	bl	8013dd4 <xTaskIncrementTick>
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d003      	beq.n	8014be4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014bdc:	4b06      	ldr	r3, [pc, #24]	@ (8014bf8 <SysTick_Handler+0x40>)
 8014bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014be2:	601a      	str	r2, [r3, #0]
 8014be4:	2300      	movs	r3, #0
 8014be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	f383 8811 	msr	BASEPRI, r3
}
 8014bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014bf0:	bf00      	nop
 8014bf2:	3708      	adds	r7, #8
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}
 8014bf8:	e000ed04 	.word	0xe000ed04

08014bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014bfc:	b480      	push	{r7}
 8014bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014c00:	4b0a      	ldr	r3, [pc, #40]	@ (8014c2c <vPortSetupTimerInterrupt+0x30>)
 8014c02:	2200      	movs	r2, #0
 8014c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014c06:	4b0a      	ldr	r3, [pc, #40]	@ (8014c30 <vPortSetupTimerInterrupt+0x34>)
 8014c08:	2200      	movs	r2, #0
 8014c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014c0c:	4b09      	ldr	r3, [pc, #36]	@ (8014c34 <vPortSetupTimerInterrupt+0x38>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	4a09      	ldr	r2, [pc, #36]	@ (8014c38 <vPortSetupTimerInterrupt+0x3c>)
 8014c12:	fba2 2303 	umull	r2, r3, r2, r3
 8014c16:	099b      	lsrs	r3, r3, #6
 8014c18:	4a08      	ldr	r2, [pc, #32]	@ (8014c3c <vPortSetupTimerInterrupt+0x40>)
 8014c1a:	3b01      	subs	r3, #1
 8014c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014c1e:	4b03      	ldr	r3, [pc, #12]	@ (8014c2c <vPortSetupTimerInterrupt+0x30>)
 8014c20:	2207      	movs	r2, #7
 8014c22:	601a      	str	r2, [r3, #0]
}
 8014c24:	bf00      	nop
 8014c26:	46bd      	mov	sp, r7
 8014c28:	bc80      	pop	{r7}
 8014c2a:	4770      	bx	lr
 8014c2c:	e000e010 	.word	0xe000e010
 8014c30:	e000e018 	.word	0xe000e018
 8014c34:	20000028 	.word	0x20000028
 8014c38:	10624dd3 	.word	0x10624dd3
 8014c3c:	e000e014 	.word	0xe000e014

08014c40 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014c40:	b480      	push	{r7}
 8014c42:	b085      	sub	sp, #20
 8014c44:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014c46:	f3ef 8305 	mrs	r3, IPSR
 8014c4a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	2b0f      	cmp	r3, #15
 8014c50:	d915      	bls.n	8014c7e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014c52:	4a17      	ldr	r2, [pc, #92]	@ (8014cb0 <vPortValidateInterruptPriority+0x70>)
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	4413      	add	r3, r2
 8014c58:	781b      	ldrb	r3, [r3, #0]
 8014c5a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014c5c:	4b15      	ldr	r3, [pc, #84]	@ (8014cb4 <vPortValidateInterruptPriority+0x74>)
 8014c5e:	781b      	ldrb	r3, [r3, #0]
 8014c60:	7afa      	ldrb	r2, [r7, #11]
 8014c62:	429a      	cmp	r2, r3
 8014c64:	d20b      	bcs.n	8014c7e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8014c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c6a:	f383 8811 	msr	BASEPRI, r3
 8014c6e:	f3bf 8f6f 	isb	sy
 8014c72:	f3bf 8f4f 	dsb	sy
 8014c76:	607b      	str	r3, [r7, #4]
}
 8014c78:	bf00      	nop
 8014c7a:	bf00      	nop
 8014c7c:	e7fd      	b.n	8014c7a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8014cb8 <vPortValidateInterruptPriority+0x78>)
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014c86:	4b0d      	ldr	r3, [pc, #52]	@ (8014cbc <vPortValidateInterruptPriority+0x7c>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	429a      	cmp	r2, r3
 8014c8c:	d90b      	bls.n	8014ca6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8014c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c92:	f383 8811 	msr	BASEPRI, r3
 8014c96:	f3bf 8f6f 	isb	sy
 8014c9a:	f3bf 8f4f 	dsb	sy
 8014c9e:	603b      	str	r3, [r7, #0]
}
 8014ca0:	bf00      	nop
 8014ca2:	bf00      	nop
 8014ca4:	e7fd      	b.n	8014ca2 <vPortValidateInterruptPriority+0x62>
	}
 8014ca6:	bf00      	nop
 8014ca8:	3714      	adds	r7, #20
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bc80      	pop	{r7}
 8014cae:	4770      	bx	lr
 8014cb0:	e000e3f0 	.word	0xe000e3f0
 8014cb4:	200014a8 	.word	0x200014a8
 8014cb8:	e000ed0c 	.word	0xe000ed0c
 8014cbc:	200014ac 	.word	0x200014ac

08014cc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b08a      	sub	sp, #40	@ 0x28
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014cc8:	2300      	movs	r3, #0
 8014cca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014ccc:	f7fe ffc8 	bl	8013c60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8014e3c <pvPortMalloc+0x17c>)
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d101      	bne.n	8014cdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014cd8:	f000 f916 	bl	8014f08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014cdc:	4b58      	ldr	r3, [pc, #352]	@ (8014e40 <pvPortMalloc+0x180>)
 8014cde:	681a      	ldr	r2, [r3, #0]
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	4013      	ands	r3, r2
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	f040 8090 	bne.w	8014e0a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d01e      	beq.n	8014d2e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8014cf0:	2208      	movs	r2, #8
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	4413      	add	r3, r2
 8014cf6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f003 0307 	and.w	r3, r3, #7
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d015      	beq.n	8014d2e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f023 0307 	bic.w	r3, r3, #7
 8014d08:	3308      	adds	r3, #8
 8014d0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f003 0307 	and.w	r3, r3, #7
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d00b      	beq.n	8014d2e <pvPortMalloc+0x6e>
	__asm volatile
 8014d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d1a:	f383 8811 	msr	BASEPRI, r3
 8014d1e:	f3bf 8f6f 	isb	sy
 8014d22:	f3bf 8f4f 	dsb	sy
 8014d26:	617b      	str	r3, [r7, #20]
}
 8014d28:	bf00      	nop
 8014d2a:	bf00      	nop
 8014d2c:	e7fd      	b.n	8014d2a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d06a      	beq.n	8014e0a <pvPortMalloc+0x14a>
 8014d34:	4b43      	ldr	r3, [pc, #268]	@ (8014e44 <pvPortMalloc+0x184>)
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	687a      	ldr	r2, [r7, #4]
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d865      	bhi.n	8014e0a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014d3e:	4b42      	ldr	r3, [pc, #264]	@ (8014e48 <pvPortMalloc+0x188>)
 8014d40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014d42:	4b41      	ldr	r3, [pc, #260]	@ (8014e48 <pvPortMalloc+0x188>)
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014d48:	e004      	b.n	8014d54 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8014d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d56:	685b      	ldr	r3, [r3, #4]
 8014d58:	687a      	ldr	r2, [r7, #4]
 8014d5a:	429a      	cmp	r2, r3
 8014d5c:	d903      	bls.n	8014d66 <pvPortMalloc+0xa6>
 8014d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d1f1      	bne.n	8014d4a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014d66:	4b35      	ldr	r3, [pc, #212]	@ (8014e3c <pvPortMalloc+0x17c>)
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d04c      	beq.n	8014e0a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014d70:	6a3b      	ldr	r3, [r7, #32]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	2208      	movs	r2, #8
 8014d76:	4413      	add	r3, r2
 8014d78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d7c:	681a      	ldr	r2, [r3, #0]
 8014d7e:	6a3b      	ldr	r3, [r7, #32]
 8014d80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d84:	685a      	ldr	r2, [r3, #4]
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	1ad2      	subs	r2, r2, r3
 8014d8a:	2308      	movs	r3, #8
 8014d8c:	005b      	lsls	r3, r3, #1
 8014d8e:	429a      	cmp	r2, r3
 8014d90:	d920      	bls.n	8014dd4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	4413      	add	r3, r2
 8014d98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014d9a:	69bb      	ldr	r3, [r7, #24]
 8014d9c:	f003 0307 	and.w	r3, r3, #7
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d00b      	beq.n	8014dbc <pvPortMalloc+0xfc>
	__asm volatile
 8014da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014da8:	f383 8811 	msr	BASEPRI, r3
 8014dac:	f3bf 8f6f 	isb	sy
 8014db0:	f3bf 8f4f 	dsb	sy
 8014db4:	613b      	str	r3, [r7, #16]
}
 8014db6:	bf00      	nop
 8014db8:	bf00      	nop
 8014dba:	e7fd      	b.n	8014db8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dbe:	685a      	ldr	r2, [r3, #4]
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	1ad2      	subs	r2, r2, r3
 8014dc4:	69bb      	ldr	r3, [r7, #24]
 8014dc6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dca:	687a      	ldr	r2, [r7, #4]
 8014dcc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014dce:	69b8      	ldr	r0, [r7, #24]
 8014dd0:	f000 f8fc 	bl	8014fcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8014e44 <pvPortMalloc+0x184>)
 8014dd6:	681a      	ldr	r2, [r3, #0]
 8014dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dda:	685b      	ldr	r3, [r3, #4]
 8014ddc:	1ad3      	subs	r3, r2, r3
 8014dde:	4a19      	ldr	r2, [pc, #100]	@ (8014e44 <pvPortMalloc+0x184>)
 8014de0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014de2:	4b18      	ldr	r3, [pc, #96]	@ (8014e44 <pvPortMalloc+0x184>)
 8014de4:	681a      	ldr	r2, [r3, #0]
 8014de6:	4b19      	ldr	r3, [pc, #100]	@ (8014e4c <pvPortMalloc+0x18c>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	429a      	cmp	r2, r3
 8014dec:	d203      	bcs.n	8014df6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014dee:	4b15      	ldr	r3, [pc, #84]	@ (8014e44 <pvPortMalloc+0x184>)
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	4a16      	ldr	r2, [pc, #88]	@ (8014e4c <pvPortMalloc+0x18c>)
 8014df4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014df8:	685a      	ldr	r2, [r3, #4]
 8014dfa:	4b11      	ldr	r3, [pc, #68]	@ (8014e40 <pvPortMalloc+0x180>)
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	431a      	orrs	r2, r3
 8014e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e06:	2200      	movs	r2, #0
 8014e08:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014e0a:	f7fe ff37 	bl	8013c7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014e0e:	69fb      	ldr	r3, [r7, #28]
 8014e10:	f003 0307 	and.w	r3, r3, #7
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d00b      	beq.n	8014e30 <pvPortMalloc+0x170>
	__asm volatile
 8014e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e1c:	f383 8811 	msr	BASEPRI, r3
 8014e20:	f3bf 8f6f 	isb	sy
 8014e24:	f3bf 8f4f 	dsb	sy
 8014e28:	60fb      	str	r3, [r7, #12]
}
 8014e2a:	bf00      	nop
 8014e2c:	bf00      	nop
 8014e2e:	e7fd      	b.n	8014e2c <pvPortMalloc+0x16c>
	return pvReturn;
 8014e30:	69fb      	ldr	r3, [r7, #28]
}
 8014e32:	4618      	mov	r0, r3
 8014e34:	3728      	adds	r7, #40	@ 0x28
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bd80      	pop	{r7, pc}
 8014e3a:	bf00      	nop
 8014e3c:	20002cb8 	.word	0x20002cb8
 8014e40:	20002cc4 	.word	0x20002cc4
 8014e44:	20002cbc 	.word	0x20002cbc
 8014e48:	20002cb0 	.word	0x20002cb0
 8014e4c:	20002cc0 	.word	0x20002cc0

08014e50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b086      	sub	sp, #24
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d04a      	beq.n	8014ef8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014e62:	2308      	movs	r3, #8
 8014e64:	425b      	negs	r3, r3
 8014e66:	697a      	ldr	r2, [r7, #20]
 8014e68:	4413      	add	r3, r2
 8014e6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014e6c:	697b      	ldr	r3, [r7, #20]
 8014e6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014e70:	693b      	ldr	r3, [r7, #16]
 8014e72:	685a      	ldr	r2, [r3, #4]
 8014e74:	4b22      	ldr	r3, [pc, #136]	@ (8014f00 <vPortFree+0xb0>)
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	4013      	ands	r3, r2
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d10b      	bne.n	8014e96 <vPortFree+0x46>
	__asm volatile
 8014e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e82:	f383 8811 	msr	BASEPRI, r3
 8014e86:	f3bf 8f6f 	isb	sy
 8014e8a:	f3bf 8f4f 	dsb	sy
 8014e8e:	60fb      	str	r3, [r7, #12]
}
 8014e90:	bf00      	nop
 8014e92:	bf00      	nop
 8014e94:	e7fd      	b.n	8014e92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014e96:	693b      	ldr	r3, [r7, #16]
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d00b      	beq.n	8014eb6 <vPortFree+0x66>
	__asm volatile
 8014e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ea2:	f383 8811 	msr	BASEPRI, r3
 8014ea6:	f3bf 8f6f 	isb	sy
 8014eaa:	f3bf 8f4f 	dsb	sy
 8014eae:	60bb      	str	r3, [r7, #8]
}
 8014eb0:	bf00      	nop
 8014eb2:	bf00      	nop
 8014eb4:	e7fd      	b.n	8014eb2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014eb6:	693b      	ldr	r3, [r7, #16]
 8014eb8:	685a      	ldr	r2, [r3, #4]
 8014eba:	4b11      	ldr	r3, [pc, #68]	@ (8014f00 <vPortFree+0xb0>)
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	4013      	ands	r3, r2
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d019      	beq.n	8014ef8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014ec4:	693b      	ldr	r3, [r7, #16]
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d115      	bne.n	8014ef8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014ecc:	693b      	ldr	r3, [r7, #16]
 8014ece:	685a      	ldr	r2, [r3, #4]
 8014ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8014f00 <vPortFree+0xb0>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	43db      	mvns	r3, r3
 8014ed6:	401a      	ands	r2, r3
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014edc:	f7fe fec0 	bl	8013c60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014ee0:	693b      	ldr	r3, [r7, #16]
 8014ee2:	685a      	ldr	r2, [r3, #4]
 8014ee4:	4b07      	ldr	r3, [pc, #28]	@ (8014f04 <vPortFree+0xb4>)
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	4413      	add	r3, r2
 8014eea:	4a06      	ldr	r2, [pc, #24]	@ (8014f04 <vPortFree+0xb4>)
 8014eec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014eee:	6938      	ldr	r0, [r7, #16]
 8014ef0:	f000 f86c 	bl	8014fcc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014ef4:	f7fe fec2 	bl	8013c7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014ef8:	bf00      	nop
 8014efa:	3718      	adds	r7, #24
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd80      	pop	{r7, pc}
 8014f00:	20002cc4 	.word	0x20002cc4
 8014f04:	20002cbc 	.word	0x20002cbc

08014f08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014f08:	b480      	push	{r7}
 8014f0a:	b085      	sub	sp, #20
 8014f0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014f0e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8014f12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014f14:	4b27      	ldr	r3, [pc, #156]	@ (8014fb4 <prvHeapInit+0xac>)
 8014f16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	f003 0307 	and.w	r3, r3, #7
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d00c      	beq.n	8014f3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	3307      	adds	r3, #7
 8014f26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	f023 0307 	bic.w	r3, r3, #7
 8014f2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014f30:	68ba      	ldr	r2, [r7, #8]
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	1ad3      	subs	r3, r2, r3
 8014f36:	4a1f      	ldr	r2, [pc, #124]	@ (8014fb4 <prvHeapInit+0xac>)
 8014f38:	4413      	add	r3, r2
 8014f3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014f40:	4a1d      	ldr	r2, [pc, #116]	@ (8014fb8 <prvHeapInit+0xb0>)
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014f46:	4b1c      	ldr	r3, [pc, #112]	@ (8014fb8 <prvHeapInit+0xb0>)
 8014f48:	2200      	movs	r2, #0
 8014f4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	68ba      	ldr	r2, [r7, #8]
 8014f50:	4413      	add	r3, r2
 8014f52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014f54:	2208      	movs	r2, #8
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	1a9b      	subs	r3, r3, r2
 8014f5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	f023 0307 	bic.w	r3, r3, #7
 8014f62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	4a15      	ldr	r2, [pc, #84]	@ (8014fbc <prvHeapInit+0xb4>)
 8014f68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014f6a:	4b14      	ldr	r3, [pc, #80]	@ (8014fbc <prvHeapInit+0xb4>)
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	2200      	movs	r2, #0
 8014f70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014f72:	4b12      	ldr	r3, [pc, #72]	@ (8014fbc <prvHeapInit+0xb4>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	2200      	movs	r2, #0
 8014f78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	68fa      	ldr	r2, [r7, #12]
 8014f82:	1ad2      	subs	r2, r2, r3
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014f88:	4b0c      	ldr	r3, [pc, #48]	@ (8014fbc <prvHeapInit+0xb4>)
 8014f8a:	681a      	ldr	r2, [r3, #0]
 8014f8c:	683b      	ldr	r3, [r7, #0]
 8014f8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	685b      	ldr	r3, [r3, #4]
 8014f94:	4a0a      	ldr	r2, [pc, #40]	@ (8014fc0 <prvHeapInit+0xb8>)
 8014f96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	685b      	ldr	r3, [r3, #4]
 8014f9c:	4a09      	ldr	r2, [pc, #36]	@ (8014fc4 <prvHeapInit+0xbc>)
 8014f9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014fa0:	4b09      	ldr	r3, [pc, #36]	@ (8014fc8 <prvHeapInit+0xc0>)
 8014fa2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8014fa6:	601a      	str	r2, [r3, #0]
}
 8014fa8:	bf00      	nop
 8014faa:	3714      	adds	r7, #20
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bc80      	pop	{r7}
 8014fb0:	4770      	bx	lr
 8014fb2:	bf00      	nop
 8014fb4:	200014b0 	.word	0x200014b0
 8014fb8:	20002cb0 	.word	0x20002cb0
 8014fbc:	20002cb8 	.word	0x20002cb8
 8014fc0:	20002cc0 	.word	0x20002cc0
 8014fc4:	20002cbc 	.word	0x20002cbc
 8014fc8:	20002cc4 	.word	0x20002cc4

08014fcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014fcc:	b480      	push	{r7}
 8014fce:	b085      	sub	sp, #20
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014fd4:	4b27      	ldr	r3, [pc, #156]	@ (8015074 <prvInsertBlockIntoFreeList+0xa8>)
 8014fd6:	60fb      	str	r3, [r7, #12]
 8014fd8:	e002      	b.n	8014fe0 <prvInsertBlockIntoFreeList+0x14>
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	60fb      	str	r3, [r7, #12]
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	687a      	ldr	r2, [r7, #4]
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d8f7      	bhi.n	8014fda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	685b      	ldr	r3, [r3, #4]
 8014ff2:	68ba      	ldr	r2, [r7, #8]
 8014ff4:	4413      	add	r3, r2
 8014ff6:	687a      	ldr	r2, [r7, #4]
 8014ff8:	429a      	cmp	r2, r3
 8014ffa:	d108      	bne.n	801500e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	685a      	ldr	r2, [r3, #4]
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	685b      	ldr	r3, [r3, #4]
 8015004:	441a      	add	r2, r3
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	685b      	ldr	r3, [r3, #4]
 8015016:	68ba      	ldr	r2, [r7, #8]
 8015018:	441a      	add	r2, r3
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	429a      	cmp	r2, r3
 8015020:	d118      	bne.n	8015054 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	681a      	ldr	r2, [r3, #0]
 8015026:	4b14      	ldr	r3, [pc, #80]	@ (8015078 <prvInsertBlockIntoFreeList+0xac>)
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	429a      	cmp	r2, r3
 801502c:	d00d      	beq.n	801504a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	685a      	ldr	r2, [r3, #4]
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	685b      	ldr	r3, [r3, #4]
 8015038:	441a      	add	r2, r3
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	681a      	ldr	r2, [r3, #0]
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	601a      	str	r2, [r3, #0]
 8015048:	e008      	b.n	801505c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801504a:	4b0b      	ldr	r3, [pc, #44]	@ (8015078 <prvInsertBlockIntoFreeList+0xac>)
 801504c:	681a      	ldr	r2, [r3, #0]
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	601a      	str	r2, [r3, #0]
 8015052:	e003      	b.n	801505c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	681a      	ldr	r2, [r3, #0]
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801505c:	68fa      	ldr	r2, [r7, #12]
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	429a      	cmp	r2, r3
 8015062:	d002      	beq.n	801506a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	687a      	ldr	r2, [r7, #4]
 8015068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801506a:	bf00      	nop
 801506c:	3714      	adds	r7, #20
 801506e:	46bd      	mov	sp, r7
 8015070:	bc80      	pop	{r7}
 8015072:	4770      	bx	lr
 8015074:	20002cb0 	.word	0x20002cb0
 8015078:	20002cb8 	.word	0x20002cb8

0801507c <calloc>:
 801507c:	4b02      	ldr	r3, [pc, #8]	@ (8015088 <calloc+0xc>)
 801507e:	460a      	mov	r2, r1
 8015080:	4601      	mov	r1, r0
 8015082:	6818      	ldr	r0, [r3, #0]
 8015084:	f000 b802 	b.w	801508c <_calloc_r>
 8015088:	20000088 	.word	0x20000088

0801508c <_calloc_r>:
 801508c:	b570      	push	{r4, r5, r6, lr}
 801508e:	fba1 5402 	umull	r5, r4, r1, r2
 8015092:	b93c      	cbnz	r4, 80150a4 <_calloc_r+0x18>
 8015094:	4629      	mov	r1, r5
 8015096:	f000 f82f 	bl	80150f8 <_malloc_r>
 801509a:	4606      	mov	r6, r0
 801509c:	b928      	cbnz	r0, 80150aa <_calloc_r+0x1e>
 801509e:	2600      	movs	r6, #0
 80150a0:	4630      	mov	r0, r6
 80150a2:	bd70      	pop	{r4, r5, r6, pc}
 80150a4:	220c      	movs	r2, #12
 80150a6:	6002      	str	r2, [r0, #0]
 80150a8:	e7f9      	b.n	801509e <_calloc_r+0x12>
 80150aa:	462a      	mov	r2, r5
 80150ac:	4621      	mov	r1, r4
 80150ae:	f000 f8af 	bl	8015210 <memset>
 80150b2:	e7f5      	b.n	80150a0 <_calloc_r+0x14>

080150b4 <sbrk_aligned>:
 80150b4:	b570      	push	{r4, r5, r6, lr}
 80150b6:	4e0f      	ldr	r6, [pc, #60]	@ (80150f4 <sbrk_aligned+0x40>)
 80150b8:	460c      	mov	r4, r1
 80150ba:	6831      	ldr	r1, [r6, #0]
 80150bc:	4605      	mov	r5, r0
 80150be:	b911      	cbnz	r1, 80150c6 <sbrk_aligned+0x12>
 80150c0:	f000 f8ae 	bl	8015220 <_sbrk_r>
 80150c4:	6030      	str	r0, [r6, #0]
 80150c6:	4621      	mov	r1, r4
 80150c8:	4628      	mov	r0, r5
 80150ca:	f000 f8a9 	bl	8015220 <_sbrk_r>
 80150ce:	1c43      	adds	r3, r0, #1
 80150d0:	d103      	bne.n	80150da <sbrk_aligned+0x26>
 80150d2:	f04f 34ff 	mov.w	r4, #4294967295
 80150d6:	4620      	mov	r0, r4
 80150d8:	bd70      	pop	{r4, r5, r6, pc}
 80150da:	1cc4      	adds	r4, r0, #3
 80150dc:	f024 0403 	bic.w	r4, r4, #3
 80150e0:	42a0      	cmp	r0, r4
 80150e2:	d0f8      	beq.n	80150d6 <sbrk_aligned+0x22>
 80150e4:	1a21      	subs	r1, r4, r0
 80150e6:	4628      	mov	r0, r5
 80150e8:	f000 f89a 	bl	8015220 <_sbrk_r>
 80150ec:	3001      	adds	r0, #1
 80150ee:	d1f2      	bne.n	80150d6 <sbrk_aligned+0x22>
 80150f0:	e7ef      	b.n	80150d2 <sbrk_aligned+0x1e>
 80150f2:	bf00      	nop
 80150f4:	20002cc8 	.word	0x20002cc8

080150f8 <_malloc_r>:
 80150f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150fc:	1ccd      	adds	r5, r1, #3
 80150fe:	f025 0503 	bic.w	r5, r5, #3
 8015102:	3508      	adds	r5, #8
 8015104:	2d0c      	cmp	r5, #12
 8015106:	bf38      	it	cc
 8015108:	250c      	movcc	r5, #12
 801510a:	2d00      	cmp	r5, #0
 801510c:	4606      	mov	r6, r0
 801510e:	db01      	blt.n	8015114 <_malloc_r+0x1c>
 8015110:	42a9      	cmp	r1, r5
 8015112:	d904      	bls.n	801511e <_malloc_r+0x26>
 8015114:	230c      	movs	r3, #12
 8015116:	6033      	str	r3, [r6, #0]
 8015118:	2000      	movs	r0, #0
 801511a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801511e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80151f4 <_malloc_r+0xfc>
 8015122:	f000 f869 	bl	80151f8 <__malloc_lock>
 8015126:	f8d8 3000 	ldr.w	r3, [r8]
 801512a:	461c      	mov	r4, r3
 801512c:	bb44      	cbnz	r4, 8015180 <_malloc_r+0x88>
 801512e:	4629      	mov	r1, r5
 8015130:	4630      	mov	r0, r6
 8015132:	f7ff ffbf 	bl	80150b4 <sbrk_aligned>
 8015136:	1c43      	adds	r3, r0, #1
 8015138:	4604      	mov	r4, r0
 801513a:	d158      	bne.n	80151ee <_malloc_r+0xf6>
 801513c:	f8d8 4000 	ldr.w	r4, [r8]
 8015140:	4627      	mov	r7, r4
 8015142:	2f00      	cmp	r7, #0
 8015144:	d143      	bne.n	80151ce <_malloc_r+0xd6>
 8015146:	2c00      	cmp	r4, #0
 8015148:	d04b      	beq.n	80151e2 <_malloc_r+0xea>
 801514a:	6823      	ldr	r3, [r4, #0]
 801514c:	4639      	mov	r1, r7
 801514e:	4630      	mov	r0, r6
 8015150:	eb04 0903 	add.w	r9, r4, r3
 8015154:	f000 f864 	bl	8015220 <_sbrk_r>
 8015158:	4581      	cmp	r9, r0
 801515a:	d142      	bne.n	80151e2 <_malloc_r+0xea>
 801515c:	6821      	ldr	r1, [r4, #0]
 801515e:	4630      	mov	r0, r6
 8015160:	1a6d      	subs	r5, r5, r1
 8015162:	4629      	mov	r1, r5
 8015164:	f7ff ffa6 	bl	80150b4 <sbrk_aligned>
 8015168:	3001      	adds	r0, #1
 801516a:	d03a      	beq.n	80151e2 <_malloc_r+0xea>
 801516c:	6823      	ldr	r3, [r4, #0]
 801516e:	442b      	add	r3, r5
 8015170:	6023      	str	r3, [r4, #0]
 8015172:	f8d8 3000 	ldr.w	r3, [r8]
 8015176:	685a      	ldr	r2, [r3, #4]
 8015178:	bb62      	cbnz	r2, 80151d4 <_malloc_r+0xdc>
 801517a:	f8c8 7000 	str.w	r7, [r8]
 801517e:	e00f      	b.n	80151a0 <_malloc_r+0xa8>
 8015180:	6822      	ldr	r2, [r4, #0]
 8015182:	1b52      	subs	r2, r2, r5
 8015184:	d420      	bmi.n	80151c8 <_malloc_r+0xd0>
 8015186:	2a0b      	cmp	r2, #11
 8015188:	d917      	bls.n	80151ba <_malloc_r+0xc2>
 801518a:	1961      	adds	r1, r4, r5
 801518c:	42a3      	cmp	r3, r4
 801518e:	6025      	str	r5, [r4, #0]
 8015190:	bf18      	it	ne
 8015192:	6059      	strne	r1, [r3, #4]
 8015194:	6863      	ldr	r3, [r4, #4]
 8015196:	bf08      	it	eq
 8015198:	f8c8 1000 	streq.w	r1, [r8]
 801519c:	5162      	str	r2, [r4, r5]
 801519e:	604b      	str	r3, [r1, #4]
 80151a0:	4630      	mov	r0, r6
 80151a2:	f000 f82f 	bl	8015204 <__malloc_unlock>
 80151a6:	f104 000b 	add.w	r0, r4, #11
 80151aa:	1d23      	adds	r3, r4, #4
 80151ac:	f020 0007 	bic.w	r0, r0, #7
 80151b0:	1ac2      	subs	r2, r0, r3
 80151b2:	bf1c      	itt	ne
 80151b4:	1a1b      	subne	r3, r3, r0
 80151b6:	50a3      	strne	r3, [r4, r2]
 80151b8:	e7af      	b.n	801511a <_malloc_r+0x22>
 80151ba:	6862      	ldr	r2, [r4, #4]
 80151bc:	42a3      	cmp	r3, r4
 80151be:	bf0c      	ite	eq
 80151c0:	f8c8 2000 	streq.w	r2, [r8]
 80151c4:	605a      	strne	r2, [r3, #4]
 80151c6:	e7eb      	b.n	80151a0 <_malloc_r+0xa8>
 80151c8:	4623      	mov	r3, r4
 80151ca:	6864      	ldr	r4, [r4, #4]
 80151cc:	e7ae      	b.n	801512c <_malloc_r+0x34>
 80151ce:	463c      	mov	r4, r7
 80151d0:	687f      	ldr	r7, [r7, #4]
 80151d2:	e7b6      	b.n	8015142 <_malloc_r+0x4a>
 80151d4:	461a      	mov	r2, r3
 80151d6:	685b      	ldr	r3, [r3, #4]
 80151d8:	42a3      	cmp	r3, r4
 80151da:	d1fb      	bne.n	80151d4 <_malloc_r+0xdc>
 80151dc:	2300      	movs	r3, #0
 80151de:	6053      	str	r3, [r2, #4]
 80151e0:	e7de      	b.n	80151a0 <_malloc_r+0xa8>
 80151e2:	230c      	movs	r3, #12
 80151e4:	4630      	mov	r0, r6
 80151e6:	6033      	str	r3, [r6, #0]
 80151e8:	f000 f80c 	bl	8015204 <__malloc_unlock>
 80151ec:	e794      	b.n	8015118 <_malloc_r+0x20>
 80151ee:	6005      	str	r5, [r0, #0]
 80151f0:	e7d6      	b.n	80151a0 <_malloc_r+0xa8>
 80151f2:	bf00      	nop
 80151f4:	20002ccc 	.word	0x20002ccc

080151f8 <__malloc_lock>:
 80151f8:	4801      	ldr	r0, [pc, #4]	@ (8015200 <__malloc_lock+0x8>)
 80151fa:	f000 b84b 	b.w	8015294 <__retarget_lock_acquire_recursive>
 80151fe:	bf00      	nop
 8015200:	20002e0c 	.word	0x20002e0c

08015204 <__malloc_unlock>:
 8015204:	4801      	ldr	r0, [pc, #4]	@ (801520c <__malloc_unlock+0x8>)
 8015206:	f000 b846 	b.w	8015296 <__retarget_lock_release_recursive>
 801520a:	bf00      	nop
 801520c:	20002e0c 	.word	0x20002e0c

08015210 <memset>:
 8015210:	4603      	mov	r3, r0
 8015212:	4402      	add	r2, r0
 8015214:	4293      	cmp	r3, r2
 8015216:	d100      	bne.n	801521a <memset+0xa>
 8015218:	4770      	bx	lr
 801521a:	f803 1b01 	strb.w	r1, [r3], #1
 801521e:	e7f9      	b.n	8015214 <memset+0x4>

08015220 <_sbrk_r>:
 8015220:	b538      	push	{r3, r4, r5, lr}
 8015222:	2300      	movs	r3, #0
 8015224:	4d05      	ldr	r5, [pc, #20]	@ (801523c <_sbrk_r+0x1c>)
 8015226:	4604      	mov	r4, r0
 8015228:	4608      	mov	r0, r1
 801522a:	602b      	str	r3, [r5, #0]
 801522c:	f7f0 fdb6 	bl	8005d9c <_sbrk>
 8015230:	1c43      	adds	r3, r0, #1
 8015232:	d102      	bne.n	801523a <_sbrk_r+0x1a>
 8015234:	682b      	ldr	r3, [r5, #0]
 8015236:	b103      	cbz	r3, 801523a <_sbrk_r+0x1a>
 8015238:	6023      	str	r3, [r4, #0]
 801523a:	bd38      	pop	{r3, r4, r5, pc}
 801523c:	20002e08 	.word	0x20002e08

08015240 <__errno>:
 8015240:	4b01      	ldr	r3, [pc, #4]	@ (8015248 <__errno+0x8>)
 8015242:	6818      	ldr	r0, [r3, #0]
 8015244:	4770      	bx	lr
 8015246:	bf00      	nop
 8015248:	20000088 	.word	0x20000088

0801524c <__libc_init_array>:
 801524c:	b570      	push	{r4, r5, r6, lr}
 801524e:	2600      	movs	r6, #0
 8015250:	4d0c      	ldr	r5, [pc, #48]	@ (8015284 <__libc_init_array+0x38>)
 8015252:	4c0d      	ldr	r4, [pc, #52]	@ (8015288 <__libc_init_array+0x3c>)
 8015254:	1b64      	subs	r4, r4, r5
 8015256:	10a4      	asrs	r4, r4, #2
 8015258:	42a6      	cmp	r6, r4
 801525a:	d109      	bne.n	8015270 <__libc_init_array+0x24>
 801525c:	f000 fdd0 	bl	8015e00 <_init>
 8015260:	2600      	movs	r6, #0
 8015262:	4d0a      	ldr	r5, [pc, #40]	@ (801528c <__libc_init_array+0x40>)
 8015264:	4c0a      	ldr	r4, [pc, #40]	@ (8015290 <__libc_init_array+0x44>)
 8015266:	1b64      	subs	r4, r4, r5
 8015268:	10a4      	asrs	r4, r4, #2
 801526a:	42a6      	cmp	r6, r4
 801526c:	d105      	bne.n	801527a <__libc_init_array+0x2e>
 801526e:	bd70      	pop	{r4, r5, r6, pc}
 8015270:	f855 3b04 	ldr.w	r3, [r5], #4
 8015274:	4798      	blx	r3
 8015276:	3601      	adds	r6, #1
 8015278:	e7ee      	b.n	8015258 <__libc_init_array+0xc>
 801527a:	f855 3b04 	ldr.w	r3, [r5], #4
 801527e:	4798      	blx	r3
 8015280:	3601      	adds	r6, #1
 8015282:	e7f2      	b.n	801526a <__libc_init_array+0x1e>
 8015284:	08016618 	.word	0x08016618
 8015288:	08016618 	.word	0x08016618
 801528c:	08016618 	.word	0x08016618
 8015290:	0801661c 	.word	0x0801661c

08015294 <__retarget_lock_acquire_recursive>:
 8015294:	4770      	bx	lr

08015296 <__retarget_lock_release_recursive>:
 8015296:	4770      	bx	lr

08015298 <memcpy>:
 8015298:	440a      	add	r2, r1
 801529a:	4291      	cmp	r1, r2
 801529c:	f100 33ff 	add.w	r3, r0, #4294967295
 80152a0:	d100      	bne.n	80152a4 <memcpy+0xc>
 80152a2:	4770      	bx	lr
 80152a4:	b510      	push	{r4, lr}
 80152a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80152aa:	4291      	cmp	r1, r2
 80152ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80152b0:	d1f9      	bne.n	80152a6 <memcpy+0xe>
 80152b2:	bd10      	pop	{r4, pc}

080152b4 <sqrt>:
 80152b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152b6:	4606      	mov	r6, r0
 80152b8:	460f      	mov	r7, r1
 80152ba:	f000 f88f 	bl	80153dc <__ieee754_sqrt>
 80152be:	4632      	mov	r2, r6
 80152c0:	4604      	mov	r4, r0
 80152c2:	460d      	mov	r5, r1
 80152c4:	463b      	mov	r3, r7
 80152c6:	4630      	mov	r0, r6
 80152c8:	4639      	mov	r1, r7
 80152ca:	f7eb fc07 	bl	8000adc <__aeabi_dcmpun>
 80152ce:	b990      	cbnz	r0, 80152f6 <sqrt+0x42>
 80152d0:	2200      	movs	r2, #0
 80152d2:	2300      	movs	r3, #0
 80152d4:	4630      	mov	r0, r6
 80152d6:	4639      	mov	r1, r7
 80152d8:	f7eb fbd8 	bl	8000a8c <__aeabi_dcmplt>
 80152dc:	b158      	cbz	r0, 80152f6 <sqrt+0x42>
 80152de:	f7ff ffaf 	bl	8015240 <__errno>
 80152e2:	2321      	movs	r3, #33	@ 0x21
 80152e4:	2200      	movs	r2, #0
 80152e6:	6003      	str	r3, [r0, #0]
 80152e8:	2300      	movs	r3, #0
 80152ea:	4610      	mov	r0, r2
 80152ec:	4619      	mov	r1, r3
 80152ee:	f7eb fa85 	bl	80007fc <__aeabi_ddiv>
 80152f2:	4604      	mov	r4, r0
 80152f4:	460d      	mov	r5, r1
 80152f6:	4620      	mov	r0, r4
 80152f8:	4629      	mov	r1, r5
 80152fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080152fc <powf>:
 80152fc:	b570      	push	{r4, r5, r6, lr}
 80152fe:	460c      	mov	r4, r1
 8015300:	4606      	mov	r6, r0
 8015302:	f000 f9b1 	bl	8015668 <__ieee754_powf>
 8015306:	4621      	mov	r1, r4
 8015308:	4605      	mov	r5, r0
 801530a:	4620      	mov	r0, r4
 801530c:	f7eb ff68 	bl	80011e0 <__aeabi_fcmpun>
 8015310:	bb68      	cbnz	r0, 801536e <powf+0x72>
 8015312:	2100      	movs	r1, #0
 8015314:	4630      	mov	r0, r6
 8015316:	f7eb ff31 	bl	800117c <__aeabi_fcmpeq>
 801531a:	b190      	cbz	r0, 8015342 <powf+0x46>
 801531c:	2100      	movs	r1, #0
 801531e:	4620      	mov	r0, r4
 8015320:	f7eb ff2c 	bl	800117c <__aeabi_fcmpeq>
 8015324:	2800      	cmp	r0, #0
 8015326:	d133      	bne.n	8015390 <powf+0x94>
 8015328:	4620      	mov	r0, r4
 801532a:	f000 f84e 	bl	80153ca <finitef>
 801532e:	b1f0      	cbz	r0, 801536e <powf+0x72>
 8015330:	2100      	movs	r1, #0
 8015332:	4620      	mov	r0, r4
 8015334:	f7eb ff2c 	bl	8001190 <__aeabi_fcmplt>
 8015338:	b1c8      	cbz	r0, 801536e <powf+0x72>
 801533a:	f7ff ff81 	bl	8015240 <__errno>
 801533e:	2322      	movs	r3, #34	@ 0x22
 8015340:	e014      	b.n	801536c <powf+0x70>
 8015342:	4628      	mov	r0, r5
 8015344:	f000 f841 	bl	80153ca <finitef>
 8015348:	b998      	cbnz	r0, 8015372 <powf+0x76>
 801534a:	4630      	mov	r0, r6
 801534c:	f000 f83d 	bl	80153ca <finitef>
 8015350:	b178      	cbz	r0, 8015372 <powf+0x76>
 8015352:	4620      	mov	r0, r4
 8015354:	f000 f839 	bl	80153ca <finitef>
 8015358:	b158      	cbz	r0, 8015372 <powf+0x76>
 801535a:	4629      	mov	r1, r5
 801535c:	4628      	mov	r0, r5
 801535e:	f7eb ff3f 	bl	80011e0 <__aeabi_fcmpun>
 8015362:	2800      	cmp	r0, #0
 8015364:	d0e9      	beq.n	801533a <powf+0x3e>
 8015366:	f7ff ff6b 	bl	8015240 <__errno>
 801536a:	2321      	movs	r3, #33	@ 0x21
 801536c:	6003      	str	r3, [r0, #0]
 801536e:	4628      	mov	r0, r5
 8015370:	bd70      	pop	{r4, r5, r6, pc}
 8015372:	2100      	movs	r1, #0
 8015374:	4628      	mov	r0, r5
 8015376:	f7eb ff01 	bl	800117c <__aeabi_fcmpeq>
 801537a:	2800      	cmp	r0, #0
 801537c:	d0f7      	beq.n	801536e <powf+0x72>
 801537e:	4630      	mov	r0, r6
 8015380:	f000 f823 	bl	80153ca <finitef>
 8015384:	2800      	cmp	r0, #0
 8015386:	d0f2      	beq.n	801536e <powf+0x72>
 8015388:	4620      	mov	r0, r4
 801538a:	f000 f81e 	bl	80153ca <finitef>
 801538e:	e7d3      	b.n	8015338 <powf+0x3c>
 8015390:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8015394:	e7eb      	b.n	801536e <powf+0x72>

08015396 <sqrtf>:
 8015396:	b538      	push	{r3, r4, r5, lr}
 8015398:	4605      	mov	r5, r0
 801539a:	f000 f8f5 	bl	8015588 <__ieee754_sqrtf>
 801539e:	4629      	mov	r1, r5
 80153a0:	4604      	mov	r4, r0
 80153a2:	4628      	mov	r0, r5
 80153a4:	f7eb ff1c 	bl	80011e0 <__aeabi_fcmpun>
 80153a8:	b968      	cbnz	r0, 80153c6 <sqrtf+0x30>
 80153aa:	2100      	movs	r1, #0
 80153ac:	4628      	mov	r0, r5
 80153ae:	f7eb feef 	bl	8001190 <__aeabi_fcmplt>
 80153b2:	b140      	cbz	r0, 80153c6 <sqrtf+0x30>
 80153b4:	f7ff ff44 	bl	8015240 <__errno>
 80153b8:	2321      	movs	r3, #33	@ 0x21
 80153ba:	2100      	movs	r1, #0
 80153bc:	6003      	str	r3, [r0, #0]
 80153be:	4608      	mov	r0, r1
 80153c0:	f7eb fdfc 	bl	8000fbc <__aeabi_fdiv>
 80153c4:	4604      	mov	r4, r0
 80153c6:	4620      	mov	r0, r4
 80153c8:	bd38      	pop	{r3, r4, r5, pc}

080153ca <finitef>:
 80153ca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80153ce:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80153d2:	bfac      	ite	ge
 80153d4:	2000      	movge	r0, #0
 80153d6:	2001      	movlt	r0, #1
 80153d8:	4770      	bx	lr
	...

080153dc <__ieee754_sqrt>:
 80153dc:	4a67      	ldr	r2, [pc, #412]	@ (801557c <__ieee754_sqrt+0x1a0>)
 80153de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153e2:	438a      	bics	r2, r1
 80153e4:	4606      	mov	r6, r0
 80153e6:	460f      	mov	r7, r1
 80153e8:	460b      	mov	r3, r1
 80153ea:	4604      	mov	r4, r0
 80153ec:	d10e      	bne.n	801540c <__ieee754_sqrt+0x30>
 80153ee:	4602      	mov	r2, r0
 80153f0:	f7eb f8da 	bl	80005a8 <__aeabi_dmul>
 80153f4:	4602      	mov	r2, r0
 80153f6:	460b      	mov	r3, r1
 80153f8:	4630      	mov	r0, r6
 80153fa:	4639      	mov	r1, r7
 80153fc:	f7ea ff1e 	bl	800023c <__adddf3>
 8015400:	4606      	mov	r6, r0
 8015402:	460f      	mov	r7, r1
 8015404:	4630      	mov	r0, r6
 8015406:	4639      	mov	r1, r7
 8015408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801540c:	2900      	cmp	r1, #0
 801540e:	dc0c      	bgt.n	801542a <__ieee754_sqrt+0x4e>
 8015410:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8015414:	4302      	orrs	r2, r0
 8015416:	d0f5      	beq.n	8015404 <__ieee754_sqrt+0x28>
 8015418:	b189      	cbz	r1, 801543e <__ieee754_sqrt+0x62>
 801541a:	4602      	mov	r2, r0
 801541c:	f7ea ff0c 	bl	8000238 <__aeabi_dsub>
 8015420:	4602      	mov	r2, r0
 8015422:	460b      	mov	r3, r1
 8015424:	f7eb f9ea 	bl	80007fc <__aeabi_ddiv>
 8015428:	e7ea      	b.n	8015400 <__ieee754_sqrt+0x24>
 801542a:	150a      	asrs	r2, r1, #20
 801542c:	d115      	bne.n	801545a <__ieee754_sqrt+0x7e>
 801542e:	2100      	movs	r1, #0
 8015430:	e009      	b.n	8015446 <__ieee754_sqrt+0x6a>
 8015432:	0ae3      	lsrs	r3, r4, #11
 8015434:	3a15      	subs	r2, #21
 8015436:	0564      	lsls	r4, r4, #21
 8015438:	2b00      	cmp	r3, #0
 801543a:	d0fa      	beq.n	8015432 <__ieee754_sqrt+0x56>
 801543c:	e7f7      	b.n	801542e <__ieee754_sqrt+0x52>
 801543e:	460a      	mov	r2, r1
 8015440:	e7fa      	b.n	8015438 <__ieee754_sqrt+0x5c>
 8015442:	005b      	lsls	r3, r3, #1
 8015444:	3101      	adds	r1, #1
 8015446:	02d8      	lsls	r0, r3, #11
 8015448:	d5fb      	bpl.n	8015442 <__ieee754_sqrt+0x66>
 801544a:	1e48      	subs	r0, r1, #1
 801544c:	1a12      	subs	r2, r2, r0
 801544e:	f1c1 0020 	rsb	r0, r1, #32
 8015452:	fa24 f000 	lsr.w	r0, r4, r0
 8015456:	4303      	orrs	r3, r0
 8015458:	408c      	lsls	r4, r1
 801545a:	2600      	movs	r6, #0
 801545c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8015460:	2116      	movs	r1, #22
 8015462:	07d2      	lsls	r2, r2, #31
 8015464:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8015468:	4632      	mov	r2, r6
 801546a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801546e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015472:	bf5c      	itt	pl
 8015474:	005b      	lslpl	r3, r3, #1
 8015476:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 801547a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801547e:	bf58      	it	pl
 8015480:	0064      	lslpl	r4, r4, #1
 8015482:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8015486:	107f      	asrs	r7, r7, #1
 8015488:	0064      	lsls	r4, r4, #1
 801548a:	1815      	adds	r5, r2, r0
 801548c:	429d      	cmp	r5, r3
 801548e:	bfde      	ittt	le
 8015490:	182a      	addle	r2, r5, r0
 8015492:	1b5b      	suble	r3, r3, r5
 8015494:	1836      	addle	r6, r6, r0
 8015496:	0fe5      	lsrs	r5, r4, #31
 8015498:	3901      	subs	r1, #1
 801549a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801549e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80154a2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80154a6:	d1f0      	bne.n	801548a <__ieee754_sqrt+0xae>
 80154a8:	460d      	mov	r5, r1
 80154aa:	f04f 0a20 	mov.w	sl, #32
 80154ae:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80154b2:	429a      	cmp	r2, r3
 80154b4:	eb01 0c00 	add.w	ip, r1, r0
 80154b8:	db02      	blt.n	80154c0 <__ieee754_sqrt+0xe4>
 80154ba:	d113      	bne.n	80154e4 <__ieee754_sqrt+0x108>
 80154bc:	45a4      	cmp	ip, r4
 80154be:	d811      	bhi.n	80154e4 <__ieee754_sqrt+0x108>
 80154c0:	f1bc 0f00 	cmp.w	ip, #0
 80154c4:	eb0c 0100 	add.w	r1, ip, r0
 80154c8:	da42      	bge.n	8015550 <__ieee754_sqrt+0x174>
 80154ca:	2900      	cmp	r1, #0
 80154cc:	db40      	blt.n	8015550 <__ieee754_sqrt+0x174>
 80154ce:	f102 0e01 	add.w	lr, r2, #1
 80154d2:	1a9b      	subs	r3, r3, r2
 80154d4:	4672      	mov	r2, lr
 80154d6:	45a4      	cmp	ip, r4
 80154d8:	bf88      	it	hi
 80154da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80154de:	eba4 040c 	sub.w	r4, r4, ip
 80154e2:	4405      	add	r5, r0
 80154e4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80154e8:	f1ba 0a01 	subs.w	sl, sl, #1
 80154ec:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80154f0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80154f4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80154f8:	d1db      	bne.n	80154b2 <__ieee754_sqrt+0xd6>
 80154fa:	431c      	orrs	r4, r3
 80154fc:	d01a      	beq.n	8015534 <__ieee754_sqrt+0x158>
 80154fe:	4c20      	ldr	r4, [pc, #128]	@ (8015580 <__ieee754_sqrt+0x1a4>)
 8015500:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8015584 <__ieee754_sqrt+0x1a8>
 8015504:	e9d4 0100 	ldrd	r0, r1, [r4]
 8015508:	e9db 2300 	ldrd	r2, r3, [fp]
 801550c:	f7ea fe94 	bl	8000238 <__aeabi_dsub>
 8015510:	e9d4 8900 	ldrd	r8, r9, [r4]
 8015514:	4602      	mov	r2, r0
 8015516:	460b      	mov	r3, r1
 8015518:	4640      	mov	r0, r8
 801551a:	4649      	mov	r1, r9
 801551c:	f7eb fac0 	bl	8000aa0 <__aeabi_dcmple>
 8015520:	b140      	cbz	r0, 8015534 <__ieee754_sqrt+0x158>
 8015522:	e9d4 0100 	ldrd	r0, r1, [r4]
 8015526:	e9db 2300 	ldrd	r2, r3, [fp]
 801552a:	f1b5 3fff 	cmp.w	r5, #4294967295
 801552e:	d111      	bne.n	8015554 <__ieee754_sqrt+0x178>
 8015530:	4655      	mov	r5, sl
 8015532:	3601      	adds	r6, #1
 8015534:	1072      	asrs	r2, r6, #1
 8015536:	086b      	lsrs	r3, r5, #1
 8015538:	07f1      	lsls	r1, r6, #31
 801553a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801553e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8015542:	bf48      	it	mi
 8015544:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8015548:	4618      	mov	r0, r3
 801554a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 801554e:	e757      	b.n	8015400 <__ieee754_sqrt+0x24>
 8015550:	4696      	mov	lr, r2
 8015552:	e7be      	b.n	80154d2 <__ieee754_sqrt+0xf6>
 8015554:	f7ea fe72 	bl	800023c <__adddf3>
 8015558:	e9d4 8900 	ldrd	r8, r9, [r4]
 801555c:	4602      	mov	r2, r0
 801555e:	460b      	mov	r3, r1
 8015560:	4640      	mov	r0, r8
 8015562:	4649      	mov	r1, r9
 8015564:	f7eb fa92 	bl	8000a8c <__aeabi_dcmplt>
 8015568:	b120      	cbz	r0, 8015574 <__ieee754_sqrt+0x198>
 801556a:	1ca8      	adds	r0, r5, #2
 801556c:	bf08      	it	eq
 801556e:	3601      	addeq	r6, #1
 8015570:	3502      	adds	r5, #2
 8015572:	e7df      	b.n	8015534 <__ieee754_sqrt+0x158>
 8015574:	1c6b      	adds	r3, r5, #1
 8015576:	f023 0501 	bic.w	r5, r3, #1
 801557a:	e7db      	b.n	8015534 <__ieee754_sqrt+0x158>
 801557c:	7ff00000 	.word	0x7ff00000
 8015580:	200000e0 	.word	0x200000e0
 8015584:	200000d8 	.word	0x200000d8

08015588 <__ieee754_sqrtf>:
 8015588:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 801558c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8015590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015594:	4603      	mov	r3, r0
 8015596:	4604      	mov	r4, r0
 8015598:	d30a      	bcc.n	80155b0 <__ieee754_sqrtf+0x28>
 801559a:	4601      	mov	r1, r0
 801559c:	f7eb fc5a 	bl	8000e54 <__aeabi_fmul>
 80155a0:	4601      	mov	r1, r0
 80155a2:	4620      	mov	r0, r4
 80155a4:	f7eb fb4e 	bl	8000c44 <__addsf3>
 80155a8:	4604      	mov	r4, r0
 80155aa:	4620      	mov	r0, r4
 80155ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155b0:	2a00      	cmp	r2, #0
 80155b2:	d0fa      	beq.n	80155aa <__ieee754_sqrtf+0x22>
 80155b4:	2800      	cmp	r0, #0
 80155b6:	da06      	bge.n	80155c6 <__ieee754_sqrtf+0x3e>
 80155b8:	4601      	mov	r1, r0
 80155ba:	f7eb fb41 	bl	8000c40 <__aeabi_fsub>
 80155be:	4601      	mov	r1, r0
 80155c0:	f7eb fcfc 	bl	8000fbc <__aeabi_fdiv>
 80155c4:	e7f0      	b.n	80155a8 <__ieee754_sqrtf+0x20>
 80155c6:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 80155ca:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80155ce:	d03e      	beq.n	801564e <__ieee754_sqrtf+0xc6>
 80155d0:	2400      	movs	r4, #0
 80155d2:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 80155d6:	07ca      	lsls	r2, r1, #31
 80155d8:	f04f 0019 	mov.w	r0, #25
 80155dc:	4626      	mov	r6, r4
 80155de:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80155e2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80155e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80155ea:	bf58      	it	pl
 80155ec:	005b      	lslpl	r3, r3, #1
 80155ee:	106d      	asrs	r5, r5, #1
 80155f0:	005b      	lsls	r3, r3, #1
 80155f2:	1872      	adds	r2, r6, r1
 80155f4:	429a      	cmp	r2, r3
 80155f6:	bfcf      	iteee	gt
 80155f8:	461a      	movgt	r2, r3
 80155fa:	1856      	addle	r6, r2, r1
 80155fc:	1864      	addle	r4, r4, r1
 80155fe:	1a9a      	suble	r2, r3, r2
 8015600:	3801      	subs	r0, #1
 8015602:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8015606:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801560a:	d1f2      	bne.n	80155f2 <__ieee754_sqrtf+0x6a>
 801560c:	b1ba      	cbz	r2, 801563e <__ieee754_sqrtf+0xb6>
 801560e:	4e14      	ldr	r6, [pc, #80]	@ (8015660 <__ieee754_sqrtf+0xd8>)
 8015610:	4f14      	ldr	r7, [pc, #80]	@ (8015664 <__ieee754_sqrtf+0xdc>)
 8015612:	6830      	ldr	r0, [r6, #0]
 8015614:	6839      	ldr	r1, [r7, #0]
 8015616:	f7eb fb13 	bl	8000c40 <__aeabi_fsub>
 801561a:	f8d6 8000 	ldr.w	r8, [r6]
 801561e:	4601      	mov	r1, r0
 8015620:	4640      	mov	r0, r8
 8015622:	f7eb fdbf 	bl	80011a4 <__aeabi_fcmple>
 8015626:	b150      	cbz	r0, 801563e <__ieee754_sqrtf+0xb6>
 8015628:	6830      	ldr	r0, [r6, #0]
 801562a:	6839      	ldr	r1, [r7, #0]
 801562c:	f7eb fb0a 	bl	8000c44 <__addsf3>
 8015630:	6836      	ldr	r6, [r6, #0]
 8015632:	4601      	mov	r1, r0
 8015634:	4630      	mov	r0, r6
 8015636:	f7eb fdab 	bl	8001190 <__aeabi_fcmplt>
 801563a:	b168      	cbz	r0, 8015658 <__ieee754_sqrtf+0xd0>
 801563c:	3402      	adds	r4, #2
 801563e:	1064      	asrs	r4, r4, #1
 8015640:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8015644:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8015648:	e7af      	b.n	80155aa <__ieee754_sqrtf+0x22>
 801564a:	005b      	lsls	r3, r3, #1
 801564c:	3201      	adds	r2, #1
 801564e:	0218      	lsls	r0, r3, #8
 8015650:	d5fb      	bpl.n	801564a <__ieee754_sqrtf+0xc2>
 8015652:	3a01      	subs	r2, #1
 8015654:	1a89      	subs	r1, r1, r2
 8015656:	e7bb      	b.n	80155d0 <__ieee754_sqrtf+0x48>
 8015658:	3401      	adds	r4, #1
 801565a:	f024 0401 	bic.w	r4, r4, #1
 801565e:	e7ee      	b.n	801563e <__ieee754_sqrtf+0xb6>
 8015660:	200000ec 	.word	0x200000ec
 8015664:	200000e8 	.word	0x200000e8

08015668 <__ieee754_powf>:
 8015668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801566c:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8015670:	4680      	mov	r8, r0
 8015672:	460f      	mov	r7, r1
 8015674:	4606      	mov	r6, r0
 8015676:	460c      	mov	r4, r1
 8015678:	b087      	sub	sp, #28
 801567a:	d10c      	bne.n	8015696 <__ieee754_powf+0x2e>
 801567c:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8015680:	0076      	lsls	r6, r6, #1
 8015682:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8015686:	f240 8336 	bls.w	8015cf6 <__ieee754_powf+0x68e>
 801568a:	4639      	mov	r1, r7
 801568c:	4640      	mov	r0, r8
 801568e:	f7eb fad9 	bl	8000c44 <__addsf3>
 8015692:	4601      	mov	r1, r0
 8015694:	e03e      	b.n	8015714 <__ieee754_powf+0xac>
 8015696:	f020 4900 	bic.w	r9, r0, #2147483648	@ 0x80000000
 801569a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801569e:	d802      	bhi.n	80156a6 <__ieee754_powf+0x3e>
 80156a0:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80156a4:	d908      	bls.n	80156b8 <__ieee754_powf+0x50>
 80156a6:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80156aa:	d1ee      	bne.n	801568a <__ieee754_powf+0x22>
 80156ac:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80156b0:	0064      	lsls	r4, r4, #1
 80156b2:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80156b6:	e7e6      	b.n	8015686 <__ieee754_powf+0x1e>
 80156b8:	2800      	cmp	r0, #0
 80156ba:	da1e      	bge.n	80156fa <__ieee754_powf+0x92>
 80156bc:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 80156c0:	d22c      	bcs.n	801571c <__ieee754_powf+0xb4>
 80156c2:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80156c6:	d333      	bcc.n	8015730 <__ieee754_powf+0xc8>
 80156c8:	ea4f 53eb 	mov.w	r3, fp, asr #23
 80156cc:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80156d0:	fa4b f503 	asr.w	r5, fp, r3
 80156d4:	fa05 f303 	lsl.w	r3, r5, r3
 80156d8:	455b      	cmp	r3, fp
 80156da:	d127      	bne.n	801572c <__ieee754_powf+0xc4>
 80156dc:	f005 0501 	and.w	r5, r5, #1
 80156e0:	f1c5 0502 	rsb	r5, r5, #2
 80156e4:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80156e8:	d123      	bne.n	8015732 <__ieee754_powf+0xca>
 80156ea:	2c00      	cmp	r4, #0
 80156ec:	4641      	mov	r1, r8
 80156ee:	da11      	bge.n	8015714 <__ieee754_powf+0xac>
 80156f0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80156f4:	f7eb fc62 	bl	8000fbc <__aeabi_fdiv>
 80156f8:	e7cb      	b.n	8015692 <__ieee754_powf+0x2a>
 80156fa:	2500      	movs	r5, #0
 80156fc:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8015700:	d1f0      	bne.n	80156e4 <__ieee754_powf+0x7c>
 8015702:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8015706:	f000 82f6 	beq.w	8015cf6 <__ieee754_powf+0x68e>
 801570a:	d909      	bls.n	8015720 <__ieee754_powf+0xb8>
 801570c:	2c00      	cmp	r4, #0
 801570e:	f2c0 82f5 	blt.w	8015cfc <__ieee754_powf+0x694>
 8015712:	4639      	mov	r1, r7
 8015714:	4608      	mov	r0, r1
 8015716:	b007      	add	sp, #28
 8015718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801571c:	2502      	movs	r5, #2
 801571e:	e7ed      	b.n	80156fc <__ieee754_powf+0x94>
 8015720:	2c00      	cmp	r4, #0
 8015722:	f280 82eb 	bge.w	8015cfc <__ieee754_powf+0x694>
 8015726:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 801572a:	e7f3      	b.n	8015714 <__ieee754_powf+0xac>
 801572c:	2500      	movs	r5, #0
 801572e:	e7d9      	b.n	80156e4 <__ieee754_powf+0x7c>
 8015730:	2500      	movs	r5, #0
 8015732:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8015736:	d104      	bne.n	8015742 <__ieee754_powf+0xda>
 8015738:	4641      	mov	r1, r8
 801573a:	4640      	mov	r0, r8
 801573c:	f7eb fb8a 	bl	8000e54 <__aeabi_fmul>
 8015740:	e7a7      	b.n	8015692 <__ieee754_powf+0x2a>
 8015742:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8015746:	d107      	bne.n	8015758 <__ieee754_powf+0xf0>
 8015748:	2e00      	cmp	r6, #0
 801574a:	db05      	blt.n	8015758 <__ieee754_powf+0xf0>
 801574c:	4640      	mov	r0, r8
 801574e:	b007      	add	sp, #28
 8015750:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015754:	f7ff bf18 	b.w	8015588 <__ieee754_sqrtf>
 8015758:	4640      	mov	r0, r8
 801575a:	f000 fae3 	bl	8015d24 <fabsf>
 801575e:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8015762:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8015766:	46ca      	mov	sl, r9
 8015768:	4601      	mov	r1, r0
 801576a:	d002      	beq.n	8015772 <__ieee754_powf+0x10a>
 801576c:	f1b9 0f00 	cmp.w	r9, #0
 8015770:	d117      	bne.n	80157a2 <__ieee754_powf+0x13a>
 8015772:	2c00      	cmp	r4, #0
 8015774:	da04      	bge.n	8015780 <__ieee754_powf+0x118>
 8015776:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 801577a:	f7eb fc1f 	bl	8000fbc <__aeabi_fdiv>
 801577e:	4601      	mov	r1, r0
 8015780:	2e00      	cmp	r6, #0
 8015782:	dac7      	bge.n	8015714 <__ieee754_powf+0xac>
 8015784:	f1a9 597e 	sub.w	r9, r9, #1065353216	@ 0x3f800000
 8015788:	ea59 0905 	orrs.w	r9, r9, r5
 801578c:	d104      	bne.n	8015798 <__ieee754_powf+0x130>
 801578e:	4608      	mov	r0, r1
 8015790:	f7eb fa56 	bl	8000c40 <__aeabi_fsub>
 8015794:	4601      	mov	r1, r0
 8015796:	e7ad      	b.n	80156f4 <__ieee754_powf+0x8c>
 8015798:	2d01      	cmp	r5, #1
 801579a:	d1bb      	bne.n	8015714 <__ieee754_powf+0xac>
 801579c:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80157a0:	e777      	b.n	8015692 <__ieee754_powf+0x2a>
 80157a2:	0ff3      	lsrs	r3, r6, #31
 80157a4:	3b01      	subs	r3, #1
 80157a6:	9303      	str	r3, [sp, #12]
 80157a8:	432b      	orrs	r3, r5
 80157aa:	d101      	bne.n	80157b0 <__ieee754_powf+0x148>
 80157ac:	4641      	mov	r1, r8
 80157ae:	e7ee      	b.n	801578e <__ieee754_powf+0x126>
 80157b0:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 80157b4:	f240 809e 	bls.w	80158f4 <__ieee754_powf+0x28c>
 80157b8:	4b47      	ldr	r3, [pc, #284]	@ (80158d8 <__ieee754_powf+0x270>)
 80157ba:	4599      	cmp	r9, r3
 80157bc:	d807      	bhi.n	80157ce <__ieee754_powf+0x166>
 80157be:	2c00      	cmp	r4, #0
 80157c0:	da0a      	bge.n	80157d8 <__ieee754_powf+0x170>
 80157c2:	2000      	movs	r0, #0
 80157c4:	b007      	add	sp, #28
 80157c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157ca:	f000 bb14 	b.w	8015df6 <__math_oflowf>
 80157ce:	4b43      	ldr	r3, [pc, #268]	@ (80158dc <__ieee754_powf+0x274>)
 80157d0:	4599      	cmp	r9, r3
 80157d2:	d907      	bls.n	80157e4 <__ieee754_powf+0x17c>
 80157d4:	2c00      	cmp	r4, #0
 80157d6:	dcf4      	bgt.n	80157c2 <__ieee754_powf+0x15a>
 80157d8:	2000      	movs	r0, #0
 80157da:	b007      	add	sp, #28
 80157dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e0:	f000 bb05 	b.w	8015dee <__math_uflowf>
 80157e4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80157e8:	f7eb fa2a 	bl	8000c40 <__aeabi_fsub>
 80157ec:	493c      	ldr	r1, [pc, #240]	@ (80158e0 <__ieee754_powf+0x278>)
 80157ee:	4606      	mov	r6, r0
 80157f0:	f7eb fb30 	bl	8000e54 <__aeabi_fmul>
 80157f4:	493b      	ldr	r1, [pc, #236]	@ (80158e4 <__ieee754_powf+0x27c>)
 80157f6:	4680      	mov	r8, r0
 80157f8:	4630      	mov	r0, r6
 80157fa:	f7eb fb2b 	bl	8000e54 <__aeabi_fmul>
 80157fe:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8015802:	4681      	mov	r9, r0
 8015804:	4630      	mov	r0, r6
 8015806:	f7eb fb25 	bl	8000e54 <__aeabi_fmul>
 801580a:	4601      	mov	r1, r0
 801580c:	4836      	ldr	r0, [pc, #216]	@ (80158e8 <__ieee754_powf+0x280>)
 801580e:	f7eb fa17 	bl	8000c40 <__aeabi_fsub>
 8015812:	4631      	mov	r1, r6
 8015814:	f7eb fb1e 	bl	8000e54 <__aeabi_fmul>
 8015818:	4601      	mov	r1, r0
 801581a:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 801581e:	f7eb fa0f 	bl	8000c40 <__aeabi_fsub>
 8015822:	4631      	mov	r1, r6
 8015824:	4682      	mov	sl, r0
 8015826:	4630      	mov	r0, r6
 8015828:	f7eb fb14 	bl	8000e54 <__aeabi_fmul>
 801582c:	4601      	mov	r1, r0
 801582e:	4650      	mov	r0, sl
 8015830:	f7eb fb10 	bl	8000e54 <__aeabi_fmul>
 8015834:	492d      	ldr	r1, [pc, #180]	@ (80158ec <__ieee754_powf+0x284>)
 8015836:	f7eb fb0d 	bl	8000e54 <__aeabi_fmul>
 801583a:	4601      	mov	r1, r0
 801583c:	4648      	mov	r0, r9
 801583e:	f7eb f9ff 	bl	8000c40 <__aeabi_fsub>
 8015842:	4601      	mov	r1, r0
 8015844:	4606      	mov	r6, r0
 8015846:	4640      	mov	r0, r8
 8015848:	f7eb f9fc 	bl	8000c44 <__addsf3>
 801584c:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8015850:	f02b 0b0f 	bic.w	fp, fp, #15
 8015854:	4641      	mov	r1, r8
 8015856:	4658      	mov	r0, fp
 8015858:	f7eb f9f2 	bl	8000c40 <__aeabi_fsub>
 801585c:	4601      	mov	r1, r0
 801585e:	4630      	mov	r0, r6
 8015860:	f7eb f9ee 	bl	8000c40 <__aeabi_fsub>
 8015864:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8015868:	9b03      	ldr	r3, [sp, #12]
 801586a:	3d01      	subs	r5, #1
 801586c:	f024 040f 	bic.w	r4, r4, #15
 8015870:	431d      	orrs	r5, r3
 8015872:	4606      	mov	r6, r0
 8015874:	4621      	mov	r1, r4
 8015876:	4638      	mov	r0, r7
 8015878:	bf14      	ite	ne
 801587a:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 801587e:	4d1c      	ldreq	r5, [pc, #112]	@ (80158f0 <__ieee754_powf+0x288>)
 8015880:	f7eb f9de 	bl	8000c40 <__aeabi_fsub>
 8015884:	4659      	mov	r1, fp
 8015886:	f7eb fae5 	bl	8000e54 <__aeabi_fmul>
 801588a:	4639      	mov	r1, r7
 801588c:	4680      	mov	r8, r0
 801588e:	4630      	mov	r0, r6
 8015890:	f7eb fae0 	bl	8000e54 <__aeabi_fmul>
 8015894:	4601      	mov	r1, r0
 8015896:	4640      	mov	r0, r8
 8015898:	f7eb f9d4 	bl	8000c44 <__addsf3>
 801589c:	4621      	mov	r1, r4
 801589e:	4606      	mov	r6, r0
 80158a0:	4658      	mov	r0, fp
 80158a2:	f7eb fad7 	bl	8000e54 <__aeabi_fmul>
 80158a6:	4601      	mov	r1, r0
 80158a8:	4607      	mov	r7, r0
 80158aa:	4630      	mov	r0, r6
 80158ac:	f7eb f9ca 	bl	8000c44 <__addsf3>
 80158b0:	2800      	cmp	r0, #0
 80158b2:	4604      	mov	r4, r0
 80158b4:	4680      	mov	r8, r0
 80158b6:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80158ba:	f340 8141 	ble.w	8015b40 <__ieee754_powf+0x4d8>
 80158be:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80158c2:	f240 812a 	bls.w	8015b1a <__ieee754_powf+0x4b2>
 80158c6:	2100      	movs	r1, #0
 80158c8:	4628      	mov	r0, r5
 80158ca:	f7eb fc61 	bl	8001190 <__aeabi_fcmplt>
 80158ce:	3800      	subs	r0, #0
 80158d0:	bf18      	it	ne
 80158d2:	2001      	movne	r0, #1
 80158d4:	e776      	b.n	80157c4 <__ieee754_powf+0x15c>
 80158d6:	bf00      	nop
 80158d8:	3f7ffff3 	.word	0x3f7ffff3
 80158dc:	3f800007 	.word	0x3f800007
 80158e0:	3fb8aa00 	.word	0x3fb8aa00
 80158e4:	36eca570 	.word	0x36eca570
 80158e8:	3eaaaaab 	.word	0x3eaaaaab
 80158ec:	3fb8aa3b 	.word	0x3fb8aa3b
 80158f0:	bf800000 	.word	0xbf800000
 80158f4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80158f8:	f040 810b 	bne.w	8015b12 <__ieee754_powf+0x4aa>
 80158fc:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8015900:	f7eb faa8 	bl	8000e54 <__aeabi_fmul>
 8015904:	f06f 0217 	mvn.w	r2, #23
 8015908:	4682      	mov	sl, r0
 801590a:	ea4f 53ea 	mov.w	r3, sl, asr #23
 801590e:	3b7f      	subs	r3, #127	@ 0x7f
 8015910:	441a      	add	r2, r3
 8015912:	4b96      	ldr	r3, [pc, #600]	@ (8015b6c <__ieee754_powf+0x504>)
 8015914:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8015918:	459a      	cmp	sl, r3
 801591a:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 801591e:	dd06      	ble.n	801592e <__ieee754_powf+0x2c6>
 8015920:	4b93      	ldr	r3, [pc, #588]	@ (8015b70 <__ieee754_powf+0x508>)
 8015922:	459a      	cmp	sl, r3
 8015924:	f340 80f7 	ble.w	8015b16 <__ieee754_powf+0x4ae>
 8015928:	3201      	adds	r2, #1
 801592a:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 801592e:	2300      	movs	r3, #0
 8015930:	9301      	str	r3, [sp, #4]
 8015932:	9205      	str	r2, [sp, #20]
 8015934:	4b8f      	ldr	r3, [pc, #572]	@ (8015b74 <__ieee754_powf+0x50c>)
 8015936:	9a01      	ldr	r2, [sp, #4]
 8015938:	4630      	mov	r0, r6
 801593a:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 801593e:	46b2      	mov	sl, r6
 8015940:	4659      	mov	r1, fp
 8015942:	f7eb f97d 	bl	8000c40 <__aeabi_fsub>
 8015946:	4631      	mov	r1, r6
 8015948:	4681      	mov	r9, r0
 801594a:	4658      	mov	r0, fp
 801594c:	f7eb f97a 	bl	8000c44 <__addsf3>
 8015950:	4601      	mov	r1, r0
 8015952:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8015956:	f7eb fb31 	bl	8000fbc <__aeabi_fdiv>
 801595a:	4601      	mov	r1, r0
 801595c:	9004      	str	r0, [sp, #16]
 801595e:	4648      	mov	r0, r9
 8015960:	f7eb fa78 	bl	8000e54 <__aeabi_fmul>
 8015964:	9002      	str	r0, [sp, #8]
 8015966:	9b02      	ldr	r3, [sp, #8]
 8015968:	1076      	asrs	r6, r6, #1
 801596a:	f423 687f 	bic.w	r8, r3, #4080	@ 0xff0
 801596e:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8015972:	9b01      	ldr	r3, [sp, #4]
 8015974:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8015978:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 801597c:	f028 080f 	bic.w	r8, r8, #15
 8015980:	4631      	mov	r1, r6
 8015982:	4640      	mov	r0, r8
 8015984:	f7eb fa66 	bl	8000e54 <__aeabi_fmul>
 8015988:	4601      	mov	r1, r0
 801598a:	4648      	mov	r0, r9
 801598c:	f7eb f958 	bl	8000c40 <__aeabi_fsub>
 8015990:	4659      	mov	r1, fp
 8015992:	4681      	mov	r9, r0
 8015994:	4630      	mov	r0, r6
 8015996:	f7eb f953 	bl	8000c40 <__aeabi_fsub>
 801599a:	4601      	mov	r1, r0
 801599c:	4650      	mov	r0, sl
 801599e:	f7eb f94f 	bl	8000c40 <__aeabi_fsub>
 80159a2:	4641      	mov	r1, r8
 80159a4:	f7eb fa56 	bl	8000e54 <__aeabi_fmul>
 80159a8:	4601      	mov	r1, r0
 80159aa:	4648      	mov	r0, r9
 80159ac:	f7eb f948 	bl	8000c40 <__aeabi_fsub>
 80159b0:	9b04      	ldr	r3, [sp, #16]
 80159b2:	4619      	mov	r1, r3
 80159b4:	f7eb fa4e 	bl	8000e54 <__aeabi_fmul>
 80159b8:	9902      	ldr	r1, [sp, #8]
 80159ba:	4683      	mov	fp, r0
 80159bc:	4608      	mov	r0, r1
 80159be:	f7eb fa49 	bl	8000e54 <__aeabi_fmul>
 80159c2:	4606      	mov	r6, r0
 80159c4:	496c      	ldr	r1, [pc, #432]	@ (8015b78 <__ieee754_powf+0x510>)
 80159c6:	f7eb fa45 	bl	8000e54 <__aeabi_fmul>
 80159ca:	496c      	ldr	r1, [pc, #432]	@ (8015b7c <__ieee754_powf+0x514>)
 80159cc:	f7eb f93a 	bl	8000c44 <__addsf3>
 80159d0:	4631      	mov	r1, r6
 80159d2:	f7eb fa3f 	bl	8000e54 <__aeabi_fmul>
 80159d6:	496a      	ldr	r1, [pc, #424]	@ (8015b80 <__ieee754_powf+0x518>)
 80159d8:	f7eb f934 	bl	8000c44 <__addsf3>
 80159dc:	4631      	mov	r1, r6
 80159de:	f7eb fa39 	bl	8000e54 <__aeabi_fmul>
 80159e2:	4968      	ldr	r1, [pc, #416]	@ (8015b84 <__ieee754_powf+0x51c>)
 80159e4:	f7eb f92e 	bl	8000c44 <__addsf3>
 80159e8:	4631      	mov	r1, r6
 80159ea:	f7eb fa33 	bl	8000e54 <__aeabi_fmul>
 80159ee:	4966      	ldr	r1, [pc, #408]	@ (8015b88 <__ieee754_powf+0x520>)
 80159f0:	f7eb f928 	bl	8000c44 <__addsf3>
 80159f4:	4631      	mov	r1, r6
 80159f6:	f7eb fa2d 	bl	8000e54 <__aeabi_fmul>
 80159fa:	4964      	ldr	r1, [pc, #400]	@ (8015b8c <__ieee754_powf+0x524>)
 80159fc:	f7eb f922 	bl	8000c44 <__addsf3>
 8015a00:	4631      	mov	r1, r6
 8015a02:	4681      	mov	r9, r0
 8015a04:	4630      	mov	r0, r6
 8015a06:	f7eb fa25 	bl	8000e54 <__aeabi_fmul>
 8015a0a:	4601      	mov	r1, r0
 8015a0c:	4648      	mov	r0, r9
 8015a0e:	f7eb fa21 	bl	8000e54 <__aeabi_fmul>
 8015a12:	4606      	mov	r6, r0
 8015a14:	4641      	mov	r1, r8
 8015a16:	9802      	ldr	r0, [sp, #8]
 8015a18:	f7eb f914 	bl	8000c44 <__addsf3>
 8015a1c:	4659      	mov	r1, fp
 8015a1e:	f7eb fa19 	bl	8000e54 <__aeabi_fmul>
 8015a22:	4631      	mov	r1, r6
 8015a24:	f7eb f90e 	bl	8000c44 <__addsf3>
 8015a28:	4641      	mov	r1, r8
 8015a2a:	4681      	mov	r9, r0
 8015a2c:	4640      	mov	r0, r8
 8015a2e:	f7eb fa11 	bl	8000e54 <__aeabi_fmul>
 8015a32:	4957      	ldr	r1, [pc, #348]	@ (8015b90 <__ieee754_powf+0x528>)
 8015a34:	4682      	mov	sl, r0
 8015a36:	f7eb f905 	bl	8000c44 <__addsf3>
 8015a3a:	4649      	mov	r1, r9
 8015a3c:	f7eb f902 	bl	8000c44 <__addsf3>
 8015a40:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8015a44:	f026 060f 	bic.w	r6, r6, #15
 8015a48:	4631      	mov	r1, r6
 8015a4a:	4640      	mov	r0, r8
 8015a4c:	f7eb fa02 	bl	8000e54 <__aeabi_fmul>
 8015a50:	494f      	ldr	r1, [pc, #316]	@ (8015b90 <__ieee754_powf+0x528>)
 8015a52:	4680      	mov	r8, r0
 8015a54:	4630      	mov	r0, r6
 8015a56:	f7eb f8f3 	bl	8000c40 <__aeabi_fsub>
 8015a5a:	4651      	mov	r1, sl
 8015a5c:	f7eb f8f0 	bl	8000c40 <__aeabi_fsub>
 8015a60:	4601      	mov	r1, r0
 8015a62:	4648      	mov	r0, r9
 8015a64:	f7eb f8ec 	bl	8000c40 <__aeabi_fsub>
 8015a68:	9902      	ldr	r1, [sp, #8]
 8015a6a:	f7eb f9f3 	bl	8000e54 <__aeabi_fmul>
 8015a6e:	4631      	mov	r1, r6
 8015a70:	4681      	mov	r9, r0
 8015a72:	4658      	mov	r0, fp
 8015a74:	f7eb f9ee 	bl	8000e54 <__aeabi_fmul>
 8015a78:	4601      	mov	r1, r0
 8015a7a:	4648      	mov	r0, r9
 8015a7c:	f7eb f8e2 	bl	8000c44 <__addsf3>
 8015a80:	4682      	mov	sl, r0
 8015a82:	4601      	mov	r1, r0
 8015a84:	4640      	mov	r0, r8
 8015a86:	f7eb f8dd 	bl	8000c44 <__addsf3>
 8015a8a:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8015a8e:	f026 060f 	bic.w	r6, r6, #15
 8015a92:	4630      	mov	r0, r6
 8015a94:	493f      	ldr	r1, [pc, #252]	@ (8015b94 <__ieee754_powf+0x52c>)
 8015a96:	f7eb f9dd 	bl	8000e54 <__aeabi_fmul>
 8015a9a:	4641      	mov	r1, r8
 8015a9c:	4681      	mov	r9, r0
 8015a9e:	4630      	mov	r0, r6
 8015aa0:	f7eb f8ce 	bl	8000c40 <__aeabi_fsub>
 8015aa4:	4601      	mov	r1, r0
 8015aa6:	4650      	mov	r0, sl
 8015aa8:	f7eb f8ca 	bl	8000c40 <__aeabi_fsub>
 8015aac:	493a      	ldr	r1, [pc, #232]	@ (8015b98 <__ieee754_powf+0x530>)
 8015aae:	f7eb f9d1 	bl	8000e54 <__aeabi_fmul>
 8015ab2:	493a      	ldr	r1, [pc, #232]	@ (8015b9c <__ieee754_powf+0x534>)
 8015ab4:	4680      	mov	r8, r0
 8015ab6:	4630      	mov	r0, r6
 8015ab8:	f7eb f9cc 	bl	8000e54 <__aeabi_fmul>
 8015abc:	4601      	mov	r1, r0
 8015abe:	4640      	mov	r0, r8
 8015ac0:	f7eb f8c0 	bl	8000c44 <__addsf3>
 8015ac4:	4b36      	ldr	r3, [pc, #216]	@ (8015ba0 <__ieee754_powf+0x538>)
 8015ac6:	9a01      	ldr	r2, [sp, #4]
 8015ac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015acc:	f7eb f8ba 	bl	8000c44 <__addsf3>
 8015ad0:	9a05      	ldr	r2, [sp, #20]
 8015ad2:	4606      	mov	r6, r0
 8015ad4:	4610      	mov	r0, r2
 8015ad6:	f7eb f969 	bl	8000dac <__aeabi_i2f>
 8015ada:	4680      	mov	r8, r0
 8015adc:	4b31      	ldr	r3, [pc, #196]	@ (8015ba4 <__ieee754_powf+0x53c>)
 8015ade:	9a01      	ldr	r2, [sp, #4]
 8015ae0:	4631      	mov	r1, r6
 8015ae2:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8015ae6:	4648      	mov	r0, r9
 8015ae8:	f7eb f8ac 	bl	8000c44 <__addsf3>
 8015aec:	4651      	mov	r1, sl
 8015aee:	f7eb f8a9 	bl	8000c44 <__addsf3>
 8015af2:	4641      	mov	r1, r8
 8015af4:	f7eb f8a6 	bl	8000c44 <__addsf3>
 8015af8:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8015afc:	f02b 0b0f 	bic.w	fp, fp, #15
 8015b00:	4641      	mov	r1, r8
 8015b02:	4658      	mov	r0, fp
 8015b04:	f7eb f89c 	bl	8000c40 <__aeabi_fsub>
 8015b08:	4651      	mov	r1, sl
 8015b0a:	f7eb f899 	bl	8000c40 <__aeabi_fsub>
 8015b0e:	4649      	mov	r1, r9
 8015b10:	e6a2      	b.n	8015858 <__ieee754_powf+0x1f0>
 8015b12:	2200      	movs	r2, #0
 8015b14:	e6f9      	b.n	801590a <__ieee754_powf+0x2a2>
 8015b16:	2301      	movs	r3, #1
 8015b18:	e70a      	b.n	8015930 <__ieee754_powf+0x2c8>
 8015b1a:	d149      	bne.n	8015bb0 <__ieee754_powf+0x548>
 8015b1c:	4922      	ldr	r1, [pc, #136]	@ (8015ba8 <__ieee754_powf+0x540>)
 8015b1e:	4630      	mov	r0, r6
 8015b20:	f7eb f890 	bl	8000c44 <__addsf3>
 8015b24:	4639      	mov	r1, r7
 8015b26:	4681      	mov	r9, r0
 8015b28:	4620      	mov	r0, r4
 8015b2a:	f7eb f889 	bl	8000c40 <__aeabi_fsub>
 8015b2e:	4601      	mov	r1, r0
 8015b30:	4648      	mov	r0, r9
 8015b32:	f7eb fb4b 	bl	80011cc <__aeabi_fcmpgt>
 8015b36:	2800      	cmp	r0, #0
 8015b38:	f47f aec5 	bne.w	80158c6 <__ieee754_powf+0x25e>
 8015b3c:	2386      	movs	r3, #134	@ 0x86
 8015b3e:	e03c      	b.n	8015bba <__ieee754_powf+0x552>
 8015b40:	4a1a      	ldr	r2, [pc, #104]	@ (8015bac <__ieee754_powf+0x544>)
 8015b42:	4293      	cmp	r3, r2
 8015b44:	d907      	bls.n	8015b56 <__ieee754_powf+0x4ee>
 8015b46:	2100      	movs	r1, #0
 8015b48:	4628      	mov	r0, r5
 8015b4a:	f7eb fb21 	bl	8001190 <__aeabi_fcmplt>
 8015b4e:	3800      	subs	r0, #0
 8015b50:	bf18      	it	ne
 8015b52:	2001      	movne	r0, #1
 8015b54:	e641      	b.n	80157da <__ieee754_powf+0x172>
 8015b56:	d12b      	bne.n	8015bb0 <__ieee754_powf+0x548>
 8015b58:	4639      	mov	r1, r7
 8015b5a:	f7eb f871 	bl	8000c40 <__aeabi_fsub>
 8015b5e:	4631      	mov	r1, r6
 8015b60:	f7eb fb2a 	bl	80011b8 <__aeabi_fcmpge>
 8015b64:	2800      	cmp	r0, #0
 8015b66:	d0e9      	beq.n	8015b3c <__ieee754_powf+0x4d4>
 8015b68:	e7ed      	b.n	8015b46 <__ieee754_powf+0x4de>
 8015b6a:	bf00      	nop
 8015b6c:	001cc471 	.word	0x001cc471
 8015b70:	005db3d6 	.word	0x005db3d6
 8015b74:	08016608 	.word	0x08016608
 8015b78:	3e53f142 	.word	0x3e53f142
 8015b7c:	3e6c3255 	.word	0x3e6c3255
 8015b80:	3e8ba305 	.word	0x3e8ba305
 8015b84:	3eaaaaab 	.word	0x3eaaaaab
 8015b88:	3edb6db7 	.word	0x3edb6db7
 8015b8c:	3f19999a 	.word	0x3f19999a
 8015b90:	40400000 	.word	0x40400000
 8015b94:	3f763800 	.word	0x3f763800
 8015b98:	3f76384f 	.word	0x3f76384f
 8015b9c:	369dc3a0 	.word	0x369dc3a0
 8015ba0:	080165f8 	.word	0x080165f8
 8015ba4:	08016600 	.word	0x08016600
 8015ba8:	3338aa3c 	.word	0x3338aa3c
 8015bac:	43160000 	.word	0x43160000
 8015bb0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8015bb4:	f240 809b 	bls.w	8015cee <__ieee754_powf+0x686>
 8015bb8:	15db      	asrs	r3, r3, #23
 8015bba:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8015bbe:	3b7e      	subs	r3, #126	@ 0x7e
 8015bc0:	411c      	asrs	r4, r3
 8015bc2:	4444      	add	r4, r8
 8015bc4:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8015bc8:	494d      	ldr	r1, [pc, #308]	@ (8015d00 <__ieee754_powf+0x698>)
 8015bca:	3b7f      	subs	r3, #127	@ 0x7f
 8015bcc:	4119      	asrs	r1, r3
 8015bce:	4021      	ands	r1, r4
 8015bd0:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8015bd4:	f1c3 0317 	rsb	r3, r3, #23
 8015bd8:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8015bdc:	4638      	mov	r0, r7
 8015bde:	411c      	asrs	r4, r3
 8015be0:	f1b8 0f00 	cmp.w	r8, #0
 8015be4:	bfb8      	it	lt
 8015be6:	4264      	neglt	r4, r4
 8015be8:	f7eb f82a 	bl	8000c40 <__aeabi_fsub>
 8015bec:	4607      	mov	r7, r0
 8015bee:	4631      	mov	r1, r6
 8015bf0:	4638      	mov	r0, r7
 8015bf2:	f7eb f827 	bl	8000c44 <__addsf3>
 8015bf6:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8015bfa:	f028 080f 	bic.w	r8, r8, #15
 8015bfe:	4640      	mov	r0, r8
 8015c00:	4940      	ldr	r1, [pc, #256]	@ (8015d04 <__ieee754_powf+0x69c>)
 8015c02:	f7eb f927 	bl	8000e54 <__aeabi_fmul>
 8015c06:	4639      	mov	r1, r7
 8015c08:	4681      	mov	r9, r0
 8015c0a:	4640      	mov	r0, r8
 8015c0c:	f7eb f818 	bl	8000c40 <__aeabi_fsub>
 8015c10:	4601      	mov	r1, r0
 8015c12:	4630      	mov	r0, r6
 8015c14:	f7eb f814 	bl	8000c40 <__aeabi_fsub>
 8015c18:	493b      	ldr	r1, [pc, #236]	@ (8015d08 <__ieee754_powf+0x6a0>)
 8015c1a:	f7eb f91b 	bl	8000e54 <__aeabi_fmul>
 8015c1e:	493b      	ldr	r1, [pc, #236]	@ (8015d0c <__ieee754_powf+0x6a4>)
 8015c20:	4606      	mov	r6, r0
 8015c22:	4640      	mov	r0, r8
 8015c24:	f7eb f916 	bl	8000e54 <__aeabi_fmul>
 8015c28:	4601      	mov	r1, r0
 8015c2a:	4630      	mov	r0, r6
 8015c2c:	f7eb f80a 	bl	8000c44 <__addsf3>
 8015c30:	4607      	mov	r7, r0
 8015c32:	4601      	mov	r1, r0
 8015c34:	4648      	mov	r0, r9
 8015c36:	f7eb f805 	bl	8000c44 <__addsf3>
 8015c3a:	4649      	mov	r1, r9
 8015c3c:	4606      	mov	r6, r0
 8015c3e:	f7ea ffff 	bl	8000c40 <__aeabi_fsub>
 8015c42:	4601      	mov	r1, r0
 8015c44:	4638      	mov	r0, r7
 8015c46:	f7ea fffb 	bl	8000c40 <__aeabi_fsub>
 8015c4a:	4631      	mov	r1, r6
 8015c4c:	4680      	mov	r8, r0
 8015c4e:	4630      	mov	r0, r6
 8015c50:	f7eb f900 	bl	8000e54 <__aeabi_fmul>
 8015c54:	4607      	mov	r7, r0
 8015c56:	492e      	ldr	r1, [pc, #184]	@ (8015d10 <__ieee754_powf+0x6a8>)
 8015c58:	f7eb f8fc 	bl	8000e54 <__aeabi_fmul>
 8015c5c:	492d      	ldr	r1, [pc, #180]	@ (8015d14 <__ieee754_powf+0x6ac>)
 8015c5e:	f7ea ffef 	bl	8000c40 <__aeabi_fsub>
 8015c62:	4639      	mov	r1, r7
 8015c64:	f7eb f8f6 	bl	8000e54 <__aeabi_fmul>
 8015c68:	492b      	ldr	r1, [pc, #172]	@ (8015d18 <__ieee754_powf+0x6b0>)
 8015c6a:	f7ea ffeb 	bl	8000c44 <__addsf3>
 8015c6e:	4639      	mov	r1, r7
 8015c70:	f7eb f8f0 	bl	8000e54 <__aeabi_fmul>
 8015c74:	4929      	ldr	r1, [pc, #164]	@ (8015d1c <__ieee754_powf+0x6b4>)
 8015c76:	f7ea ffe3 	bl	8000c40 <__aeabi_fsub>
 8015c7a:	4639      	mov	r1, r7
 8015c7c:	f7eb f8ea 	bl	8000e54 <__aeabi_fmul>
 8015c80:	4927      	ldr	r1, [pc, #156]	@ (8015d20 <__ieee754_powf+0x6b8>)
 8015c82:	f7ea ffdf 	bl	8000c44 <__addsf3>
 8015c86:	4639      	mov	r1, r7
 8015c88:	f7eb f8e4 	bl	8000e54 <__aeabi_fmul>
 8015c8c:	4601      	mov	r1, r0
 8015c8e:	4630      	mov	r0, r6
 8015c90:	f7ea ffd6 	bl	8000c40 <__aeabi_fsub>
 8015c94:	4607      	mov	r7, r0
 8015c96:	4601      	mov	r1, r0
 8015c98:	4630      	mov	r0, r6
 8015c9a:	f7eb f8db 	bl	8000e54 <__aeabi_fmul>
 8015c9e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8015ca2:	4681      	mov	r9, r0
 8015ca4:	4638      	mov	r0, r7
 8015ca6:	f7ea ffcb 	bl	8000c40 <__aeabi_fsub>
 8015caa:	4601      	mov	r1, r0
 8015cac:	4648      	mov	r0, r9
 8015cae:	f7eb f985 	bl	8000fbc <__aeabi_fdiv>
 8015cb2:	4641      	mov	r1, r8
 8015cb4:	4607      	mov	r7, r0
 8015cb6:	4630      	mov	r0, r6
 8015cb8:	f7eb f8cc 	bl	8000e54 <__aeabi_fmul>
 8015cbc:	4641      	mov	r1, r8
 8015cbe:	f7ea ffc1 	bl	8000c44 <__addsf3>
 8015cc2:	4601      	mov	r1, r0
 8015cc4:	4638      	mov	r0, r7
 8015cc6:	f7ea ffbb 	bl	8000c40 <__aeabi_fsub>
 8015cca:	4631      	mov	r1, r6
 8015ccc:	f7ea ffb8 	bl	8000c40 <__aeabi_fsub>
 8015cd0:	4601      	mov	r1, r0
 8015cd2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8015cd6:	f7ea ffb3 	bl	8000c40 <__aeabi_fsub>
 8015cda:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8015cde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015ce2:	da06      	bge.n	8015cf2 <__ieee754_powf+0x68a>
 8015ce4:	4621      	mov	r1, r4
 8015ce6:	f000 f821 	bl	8015d2c <scalbnf>
 8015cea:	4629      	mov	r1, r5
 8015cec:	e526      	b.n	801573c <__ieee754_powf+0xd4>
 8015cee:	2400      	movs	r4, #0
 8015cf0:	e77d      	b.n	8015bee <__ieee754_powf+0x586>
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	e7f9      	b.n	8015cea <__ieee754_powf+0x682>
 8015cf6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8015cfa:	e50b      	b.n	8015714 <__ieee754_powf+0xac>
 8015cfc:	2100      	movs	r1, #0
 8015cfe:	e509      	b.n	8015714 <__ieee754_powf+0xac>
 8015d00:	ff800000 	.word	0xff800000
 8015d04:	3f317200 	.word	0x3f317200
 8015d08:	3f317218 	.word	0x3f317218
 8015d0c:	35bfbe8c 	.word	0x35bfbe8c
 8015d10:	3331bb4c 	.word	0x3331bb4c
 8015d14:	35ddea0e 	.word	0x35ddea0e
 8015d18:	388ab355 	.word	0x388ab355
 8015d1c:	3b360b61 	.word	0x3b360b61
 8015d20:	3e2aaaab 	.word	0x3e2aaaab

08015d24 <fabsf>:
 8015d24:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015d28:	4770      	bx	lr
	...

08015d2c <scalbnf>:
 8015d2c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8015d30:	b538      	push	{r3, r4, r5, lr}
 8015d32:	4603      	mov	r3, r0
 8015d34:	460d      	mov	r5, r1
 8015d36:	4604      	mov	r4, r0
 8015d38:	d02e      	beq.n	8015d98 <scalbnf+0x6c>
 8015d3a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8015d3e:	d304      	bcc.n	8015d4a <scalbnf+0x1e>
 8015d40:	4601      	mov	r1, r0
 8015d42:	f7ea ff7f 	bl	8000c44 <__addsf3>
 8015d46:	4603      	mov	r3, r0
 8015d48:	e026      	b.n	8015d98 <scalbnf+0x6c>
 8015d4a:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8015d4e:	d118      	bne.n	8015d82 <scalbnf+0x56>
 8015d50:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8015d54:	f7eb f87e 	bl	8000e54 <__aeabi_fmul>
 8015d58:	4a17      	ldr	r2, [pc, #92]	@ (8015db8 <scalbnf+0x8c>)
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	4295      	cmp	r5, r2
 8015d5e:	db0c      	blt.n	8015d7a <scalbnf+0x4e>
 8015d60:	4604      	mov	r4, r0
 8015d62:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8015d66:	3a19      	subs	r2, #25
 8015d68:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8015d6c:	428d      	cmp	r5, r1
 8015d6e:	dd0a      	ble.n	8015d86 <scalbnf+0x5a>
 8015d70:	4912      	ldr	r1, [pc, #72]	@ (8015dbc <scalbnf+0x90>)
 8015d72:	4618      	mov	r0, r3
 8015d74:	f361 001e 	bfi	r0, r1, #0, #31
 8015d78:	e000      	b.n	8015d7c <scalbnf+0x50>
 8015d7a:	4911      	ldr	r1, [pc, #68]	@ (8015dc0 <scalbnf+0x94>)
 8015d7c:	f7eb f86a 	bl	8000e54 <__aeabi_fmul>
 8015d80:	e7e1      	b.n	8015d46 <scalbnf+0x1a>
 8015d82:	0dd2      	lsrs	r2, r2, #23
 8015d84:	e7f0      	b.n	8015d68 <scalbnf+0x3c>
 8015d86:	1951      	adds	r1, r2, r5
 8015d88:	29fe      	cmp	r1, #254	@ 0xfe
 8015d8a:	dcf1      	bgt.n	8015d70 <scalbnf+0x44>
 8015d8c:	2900      	cmp	r1, #0
 8015d8e:	dd05      	ble.n	8015d9c <scalbnf+0x70>
 8015d90:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8015d94:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8015d98:	4618      	mov	r0, r3
 8015d9a:	bd38      	pop	{r3, r4, r5, pc}
 8015d9c:	f111 0f16 	cmn.w	r1, #22
 8015da0:	da01      	bge.n	8015da6 <scalbnf+0x7a>
 8015da2:	4907      	ldr	r1, [pc, #28]	@ (8015dc0 <scalbnf+0x94>)
 8015da4:	e7e5      	b.n	8015d72 <scalbnf+0x46>
 8015da6:	f101 0019 	add.w	r0, r1, #25
 8015daa:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8015dae:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8015db2:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8015db6:	e7e1      	b.n	8015d7c <scalbnf+0x50>
 8015db8:	ffff3cb0 	.word	0xffff3cb0
 8015dbc:	7149f2ca 	.word	0x7149f2ca
 8015dc0:	0da24260 	.word	0x0da24260

08015dc4 <with_errnof>:
 8015dc4:	b538      	push	{r3, r4, r5, lr}
 8015dc6:	4604      	mov	r4, r0
 8015dc8:	460d      	mov	r5, r1
 8015dca:	f7ff fa39 	bl	8015240 <__errno>
 8015dce:	6005      	str	r5, [r0, #0]
 8015dd0:	4620      	mov	r0, r4
 8015dd2:	bd38      	pop	{r3, r4, r5, pc}

08015dd4 <xflowf>:
 8015dd4:	b508      	push	{r3, lr}
 8015dd6:	b140      	cbz	r0, 8015dea <xflowf+0x16>
 8015dd8:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8015ddc:	f7eb f83a 	bl	8000e54 <__aeabi_fmul>
 8015de0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015de4:	2122      	movs	r1, #34	@ 0x22
 8015de6:	f7ff bfed 	b.w	8015dc4 <with_errnof>
 8015dea:	4608      	mov	r0, r1
 8015dec:	e7f6      	b.n	8015ddc <xflowf+0x8>

08015dee <__math_uflowf>:
 8015dee:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8015df2:	f7ff bfef 	b.w	8015dd4 <xflowf>

08015df6 <__math_oflowf>:
 8015df6:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8015dfa:	f7ff bfeb 	b.w	8015dd4 <xflowf>
	...

08015e00 <_init>:
 8015e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e02:	bf00      	nop
 8015e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e06:	bc08      	pop	{r3}
 8015e08:	469e      	mov	lr, r3
 8015e0a:	4770      	bx	lr

08015e0c <_fini>:
 8015e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e0e:	bf00      	nop
 8015e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e12:	bc08      	pop	{r3}
 8015e14:	469e      	mov	lr, r3
 8015e16:	4770      	bx	lr
