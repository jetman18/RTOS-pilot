
RTOSpilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014064  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  08014254  08014254  00015254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a14  08014a14  000160b0  2**0
                  CONTENTS
  4 .ARM          00000000  08014a14  08014a14  000160b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014a14  08014a14  000160b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014a14  08014a14  00015a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014a18  08014a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  08014a1c  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cf4  200000b0  08014acc  000160b0  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20002da4  08014acc  00016da4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000160b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029a7a  00000000  00000000  000160d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000717a  00000000  00000000  0003fb53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022e8  00000000  00000000  00046cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ade  00000000  00000000  00048fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b7b9  00000000  00000000  0004aa96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034284  00000000  00000000  0005624f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2a24  00000000  00000000  0008a4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015cef7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095bc  00000000  00000000  0015cf3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001664f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000b0 	.word	0x200000b0
 800020c:	00000000 	.word	0x00000000
 8000210:	0801423c 	.word	0x0801423c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000b4 	.word	0x200000b4
 800022c:	0801423c 	.word	0x0801423c

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	@ 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fmul>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d06f      	beq.n	8000f4c <__aeabi_fmul+0xf8>
 8000e6c:	441a      	add	r2, r3
 8000e6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e7a:	d01e      	beq.n	8000eba <__aeabi_fmul+0x66>
 8000e7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e88:	fba0 3101 	umull	r3, r1, r0, r1
 8000e8c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e90:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e94:	bf3e      	ittt	cc
 8000e96:	0049      	lslcc	r1, r1, #1
 8000e98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ea2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ea6:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea8:	d81d      	bhi.n	8000ee6 <__aeabi_fmul+0x92>
 8000eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb2:	bf08      	it	eq
 8000eb4:	f020 0001 	biceq.w	r0, r0, #1
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ec2:	bf08      	it	eq
 8000ec4:	0249      	lsleq	r1, r1, #9
 8000ec6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ece:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed0:	bfc2      	ittt	gt
 8000ed2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ed6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eda:	4770      	bxgt	lr
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	dc5d      	bgt.n	8000fa4 <__aeabi_fmul+0x150>
 8000ee8:	f112 0f19 	cmn.w	r2, #25
 8000eec:	bfdc      	itt	le
 8000eee:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ef2:	4770      	bxle	lr
 8000ef4:	f1c2 0200 	rsb	r2, r2, #0
 8000ef8:	0041      	lsls	r1, r0, #1
 8000efa:	fa21 f102 	lsr.w	r1, r1, r2
 8000efe:	f1c2 0220 	rsb	r2, r2, #32
 8000f02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f0a:	f140 0000 	adc.w	r0, r0, #0
 8000f0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f12:	bf08      	it	eq
 8000f14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f18:	4770      	bx	lr
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fmul+0xce>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fmul+0xe6>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e78f      	b.n	8000e6c <__aeabi_fmul+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	bf18      	it	ne
 8000f56:	ea93 0f0c 	teqne	r3, ip
 8000f5a:	d00a      	beq.n	8000f72 <__aeabi_fmul+0x11e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	d1d8      	bne.n	8000f1a <__aeabi_fmul+0xc6>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f70:	4770      	bx	lr
 8000f72:	f090 0f00 	teq	r0, #0
 8000f76:	bf17      	itett	ne
 8000f78:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f7c:	4608      	moveq	r0, r1
 8000f7e:	f091 0f00 	teqne	r1, #0
 8000f82:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f86:	d014      	beq.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_fmul+0x13e>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d10f      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f92:	ea93 0f0c 	teq	r3, ip
 8000f96:	d103      	bne.n	8000fa0 <__aeabi_fmul+0x14c>
 8000f98:	024b      	lsls	r3, r1, #9
 8000f9a:	bf18      	it	ne
 8000f9c:	4608      	movne	r0, r1
 8000f9e:	d108      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000fa0:	ea80 0001 	eor.w	r0, r0, r1
 8000fa4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fa8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb0:	4770      	bx	lr
 8000fb2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_fdiv>:
 8000fbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fc4:	bf1e      	ittt	ne
 8000fc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fca:	ea92 0f0c 	teqne	r2, ip
 8000fce:	ea93 0f0c 	teqne	r3, ip
 8000fd2:	d069      	beq.n	80010a8 <__aeabi_fdiv+0xec>
 8000fd4:	eba2 0203 	sub.w	r2, r2, r3
 8000fd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fe2:	d037      	beq.n	8001054 <__aeabi_fdiv+0x98>
 8000fe4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fe8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf38      	it	cc
 8000ff8:	005b      	lslcc	r3, r3, #1
 8000ffa:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ffe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001002:	428b      	cmp	r3, r1
 8001004:	bf24      	itt	cs
 8001006:	1a5b      	subcs	r3, r3, r1
 8001008:	ea40 000c 	orrcs.w	r0, r0, ip
 800100c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001010:	bf24      	itt	cs
 8001012:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001016:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800101a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800101e:	bf24      	itt	cs
 8001020:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001028:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800102c:	bf24      	itt	cs
 800102e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001032:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	bf18      	it	ne
 800103a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800103e:	d1e0      	bne.n	8001002 <__aeabi_fdiv+0x46>
 8001040:	2afd      	cmp	r2, #253	@ 0xfd
 8001042:	f63f af50 	bhi.w	8000ee6 <__aeabi_fmul+0x92>
 8001046:	428b      	cmp	r3, r1
 8001048:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800104c:	bf08      	it	eq
 800104e:	f020 0001 	biceq.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001058:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800105c:	327f      	adds	r2, #127	@ 0x7f
 800105e:	bfc2      	ittt	gt
 8001060:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001064:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001068:	4770      	bxgt	lr
 800106a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	3a01      	subs	r2, #1
 8001074:	e737      	b.n	8000ee6 <__aeabi_fmul+0x92>
 8001076:	f092 0f00 	teq	r2, #0
 800107a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800107e:	bf02      	ittt	eq
 8001080:	0040      	lsleq	r0, r0, #1
 8001082:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001086:	3a01      	subeq	r2, #1
 8001088:	d0f9      	beq.n	800107e <__aeabi_fdiv+0xc2>
 800108a:	ea40 000c 	orr.w	r0, r0, ip
 800108e:	f093 0f00 	teq	r3, #0
 8001092:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0049      	lsleq	r1, r1, #1
 800109a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800109e:	3b01      	subeq	r3, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fdiv+0xda>
 80010a2:	ea41 010c 	orr.w	r1, r1, ip
 80010a6:	e795      	b.n	8000fd4 <__aeabi_fdiv+0x18>
 80010a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010ac:	ea92 0f0c 	teq	r2, ip
 80010b0:	d108      	bne.n	80010c4 <__aeabi_fdiv+0x108>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	f47f af7d 	bne.w	8000fb2 <__aeabi_fmul+0x15e>
 80010b8:	ea93 0f0c 	teq	r3, ip
 80010bc:	f47f af70 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010c0:	4608      	mov	r0, r1
 80010c2:	e776      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010c4:	ea93 0f0c 	teq	r3, ip
 80010c8:	d104      	bne.n	80010d4 <__aeabi_fdiv+0x118>
 80010ca:	024b      	lsls	r3, r1, #9
 80010cc:	f43f af4c 	beq.w	8000f68 <__aeabi_fmul+0x114>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e76e      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010d4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010d8:	bf18      	it	ne
 80010da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010de:	d1ca      	bne.n	8001076 <__aeabi_fdiv+0xba>
 80010e0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010e4:	f47f af5c 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010e8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ec:	f47f af3c 	bne.w	8000f68 <__aeabi_fmul+0x114>
 80010f0:	e75f      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010f2:	bf00      	nop

080010f4 <__gesf2>:
 80010f4:	f04f 3cff 	mov.w	ip, #4294967295
 80010f8:	e006      	b.n	8001108 <__cmpsf2+0x4>
 80010fa:	bf00      	nop

080010fc <__lesf2>:
 80010fc:	f04f 0c01 	mov.w	ip, #1
 8001100:	e002      	b.n	8001108 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__cmpsf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	f84d cd04 	str.w	ip, [sp, #-4]!
 800110c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001110:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001114:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001118:	bf18      	it	ne
 800111a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800111e:	d011      	beq.n	8001144 <__cmpsf2+0x40>
 8001120:	b001      	add	sp, #4
 8001122:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001126:	bf18      	it	ne
 8001128:	ea90 0f01 	teqne	r0, r1
 800112c:	bf58      	it	pl
 800112e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001132:	bf88      	it	hi
 8001134:	17c8      	asrhi	r0, r1, #31
 8001136:	bf38      	it	cc
 8001138:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800113c:	bf18      	it	ne
 800113e:	f040 0001 	orrne.w	r0, r0, #1
 8001142:	4770      	bx	lr
 8001144:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001148:	d102      	bne.n	8001150 <__cmpsf2+0x4c>
 800114a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800114e:	d105      	bne.n	800115c <__cmpsf2+0x58>
 8001150:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001154:	d1e4      	bne.n	8001120 <__cmpsf2+0x1c>
 8001156:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800115a:	d0e1      	beq.n	8001120 <__cmpsf2+0x1c>
 800115c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <__aeabi_cfrcmple>:
 8001164:	4684      	mov	ip, r0
 8001166:	4608      	mov	r0, r1
 8001168:	4661      	mov	r1, ip
 800116a:	e7ff      	b.n	800116c <__aeabi_cfcmpeq>

0800116c <__aeabi_cfcmpeq>:
 800116c:	b50f      	push	{r0, r1, r2, r3, lr}
 800116e:	f7ff ffc9 	bl	8001104 <__cmpsf2>
 8001172:	2800      	cmp	r0, #0
 8001174:	bf48      	it	mi
 8001176:	f110 0f00 	cmnmi.w	r0, #0
 800117a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800117c <__aeabi_fcmpeq>:
 800117c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001180:	f7ff fff4 	bl	800116c <__aeabi_cfcmpeq>
 8001184:	bf0c      	ite	eq
 8001186:	2001      	moveq	r0, #1
 8001188:	2000      	movne	r0, #0
 800118a:	f85d fb08 	ldr.w	pc, [sp], #8
 800118e:	bf00      	nop

08001190 <__aeabi_fcmplt>:
 8001190:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001194:	f7ff ffea 	bl	800116c <__aeabi_cfcmpeq>
 8001198:	bf34      	ite	cc
 800119a:	2001      	movcc	r0, #1
 800119c:	2000      	movcs	r0, #0
 800119e:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a2:	bf00      	nop

080011a4 <__aeabi_fcmple>:
 80011a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a8:	f7ff ffe0 	bl	800116c <__aeabi_cfcmpeq>
 80011ac:	bf94      	ite	ls
 80011ae:	2001      	movls	r0, #1
 80011b0:	2000      	movhi	r0, #0
 80011b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b6:	bf00      	nop

080011b8 <__aeabi_fcmpge>:
 80011b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011bc:	f7ff ffd2 	bl	8001164 <__aeabi_cfrcmple>
 80011c0:	bf94      	ite	ls
 80011c2:	2001      	movls	r0, #1
 80011c4:	2000      	movhi	r0, #0
 80011c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ca:	bf00      	nop

080011cc <__aeabi_fcmpgt>:
 80011cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d0:	f7ff ffc8 	bl	8001164 <__aeabi_cfrcmple>
 80011d4:	bf34      	ite	cc
 80011d6:	2001      	movcc	r0, #1
 80011d8:	2000      	movcs	r0, #0
 80011da:	f85d fb08 	ldr.w	pc, [sp], #8
 80011de:	bf00      	nop

080011e0 <__aeabi_fcmpun>:
 80011e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011ec:	d102      	bne.n	80011f4 <__aeabi_fcmpun+0x14>
 80011ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011f2:	d108      	bne.n	8001206 <__aeabi_fcmpun+0x26>
 80011f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011f8:	d102      	bne.n	8001200 <__aeabi_fcmpun+0x20>
 80011fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011fe:	d102      	bne.n	8001206 <__aeabi_fcmpun+0x26>
 8001200:	f04f 0000 	mov.w	r0, #0
 8001204:	4770      	bx	lr
 8001206:	f04f 0001 	mov.w	r0, #1
 800120a:	4770      	bx	lr

0800120c <__aeabi_f2iz>:
 800120c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001210:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001214:	d30f      	bcc.n	8001236 <__aeabi_f2iz+0x2a>
 8001216:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800121a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800121e:	d90d      	bls.n	800123c <__aeabi_f2iz+0x30>
 8001220:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001224:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001228:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800122c:	fa23 f002 	lsr.w	r0, r3, r2
 8001230:	bf18      	it	ne
 8001232:	4240      	negne	r0, r0
 8001234:	4770      	bx	lr
 8001236:	f04f 0000 	mov.w	r0, #0
 800123a:	4770      	bx	lr
 800123c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001240:	d101      	bne.n	8001246 <__aeabi_f2iz+0x3a>
 8001242:	0242      	lsls	r2, r0, #9
 8001244:	d105      	bne.n	8001252 <__aeabi_f2iz+0x46>
 8001246:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800124a:	bf08      	it	eq
 800124c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001250:	4770      	bx	lr
 8001252:	f04f 0000 	mov.w	r0, #0
 8001256:	4770      	bx	lr

08001258 <__aeabi_f2uiz>:
 8001258:	0042      	lsls	r2, r0, #1
 800125a:	d20e      	bcs.n	800127a <__aeabi_f2uiz+0x22>
 800125c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001260:	d30b      	bcc.n	800127a <__aeabi_f2uiz+0x22>
 8001262:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001266:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800126a:	d409      	bmi.n	8001280 <__aeabi_f2uiz+0x28>
 800126c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001270:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001274:	fa23 f002 	lsr.w	r0, r3, r2
 8001278:	4770      	bx	lr
 800127a:	f04f 0000 	mov.w	r0, #0
 800127e:	4770      	bx	lr
 8001280:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001284:	d101      	bne.n	800128a <__aeabi_f2uiz+0x32>
 8001286:	0242      	lsls	r2, r0, #9
 8001288:	d102      	bne.n	8001290 <__aeabi_f2uiz+0x38>
 800128a:	f04f 30ff 	mov.w	r0, #4294967295
 800128e:	4770      	bx	lr
 8001290:	f04f 0000 	mov.w	r0, #0
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop

08001298 <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	e008      	b.n	80012b8 <ibus_init+0x20>
      ibusChannelData[i] = 1000;
 80012a6:	4a0d      	ldr	r2, [pc, #52]	@ (80012dc <ibus_init+0x44>)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	3301      	adds	r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b0d      	cmp	r3, #13
 80012bc:	ddf3      	ble.n	80012a6 <ibus_init+0xe>
    }
	uart = uartt;
 80012be:	4a08      	ldr	r2, [pc, #32]	@ (80012e0 <ibus_init+0x48>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <ibus_init+0x48>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2201      	movs	r2, #1
 80012ca:	4906      	ldr	r1, [pc, #24]	@ (80012e4 <ibus_init+0x4c>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00a fd62 	bl	800bd96 <HAL_UART_Receive_IT>
#endif
}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200000d0 	.word	0x200000d0
 80012e0:	2000012c 	.word	0x2000012c
 80012e4:	20000128 	.word	0x20000128

080012e8 <ibus_uart_port>:

UART_HandleTypeDef *ibus_uart_port(){
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
   return uart;
 80012ec:	4b02      	ldr	r3, [pc, #8]	@ (80012f8 <ibus_uart_port+0x10>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	2000012c 	.word	0x2000012c

080012fc <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <ibus_calback+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f80d 	bl	8001324 <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 800130a:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <ibus_calback+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2201      	movs	r2, #1
 8001310:	4902      	ldr	r1, [pc, #8]	@ (800131c <ibus_calback+0x20>)
 8001312:	4618      	mov	r0, r3
 8001314:	f00a fd3f 	bl	800bd96 <HAL_UART_Receive_IT>
#endif

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000128 	.word	0x20000128
 8001320:	2000012c 	.word	0x2000012c

08001324 <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 800132e:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <ibusDataReceive+0x78>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001336:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <ibusDataReceive+0x7c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <ibusDataReceive+0x80>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800134a:	4293      	cmp	r3, r2
 800134c:	d902      	bls.n	8001354 <ibusDataReceive+0x30>
        ibusFramePosition = 0;
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <ibusDataReceive+0x84>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 8001354:	4a13      	ldr	r2, [pc, #76]	@ (80013a4 <ibusDataReceive+0x80>)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 800135a:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <ibusDataReceive+0x84>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <ibusDataReceive+0x44>
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b20      	cmp	r3, #32
 8001366:	d114      	bne.n	8001392 <ibusDataReceive+0x6e>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <ibusDataReceive+0x84>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	4a0f      	ldr	r2, [pc, #60]	@ (80013ac <ibusDataReceive+0x88>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <ibusDataReceive+0x84>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b1f      	cmp	r3, #31
 800137a:	d103      	bne.n	8001384 <ibusDataReceive+0x60>
        ibusFrameDone = TRUE;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <ibusDataReceive+0x8c>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e007      	b.n	8001394 <ibusDataReceive+0x70>
    } else {
        ibusFramePosition++;
 8001384:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <ibusDataReceive+0x84>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <ibusDataReceive+0x84>)
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	e000      	b.n	8001394 <ibusDataReceive+0x70>
        return;
 8001392:	bf00      	nop
    }
}
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	20000544 	.word	0x20000544
 80013a0:	20000548 	.word	0x20000548
 80013a4:	20000130 	.word	0x20000130
 80013a8:	20000134 	.word	0x20000134
 80013ac:	20000108 	.word	0x20000108
 80013b0:	200000cc 	.word	0x200000cc

080013b4 <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 80013ba:	4b63      	ldr	r3, [pc, #396]	@ (8001548 <ibusFrameComplete+0x194>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 80bb 	beq.w	800153a <ibusFrameComplete+0x186>
        ibusFrameDone = FALSE;
 80013c4:	4b60      	ldr	r3, [pc, #384]	@ (8001548 <ibusFrameComplete+0x194>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 80013ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013ce:	81bb      	strh	r3, [r7, #12]

        for (i = 0; i < 30; i++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e009      	b.n	80013ea <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	4a5c      	ldr	r2, [pc, #368]	@ (800154c <ibusFrameComplete+0x198>)
 80013da:	5cd3      	ldrb	r3, [r2, r3]
 80013dc:	461a      	mov	r2, r3
 80013de:	89bb      	ldrh	r3, [r7, #12]
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 30; i++)
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	3301      	adds	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2b1d      	cmp	r3, #29
 80013ee:	d9f2      	bls.n	80013d6 <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 80013f0:	4b56      	ldr	r3, [pc, #344]	@ (800154c <ibusFrameComplete+0x198>)
 80013f2:	7f9b      	ldrb	r3, [r3, #30]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b55      	ldr	r3, [pc, #340]	@ (800154c <ibusFrameComplete+0x198>)
 80013f8:	7fdb      	ldrb	r3, [r3, #31]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	4413      	add	r3, r2
 8001400:	80fb      	strh	r3, [r7, #6]

        if (chksum == rxsum) {
 8001402:	89ba      	ldrh	r2, [r7, #12]
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	429a      	cmp	r2, r3
 8001408:	f040 8097 	bne.w	800153a <ibusFrameComplete+0x186>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 800140c:	4b4f      	ldr	r3, [pc, #316]	@ (800154c <ibusFrameComplete+0x198>)
 800140e:	78db      	ldrb	r3, [r3, #3]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	4a4e      	ldr	r2, [pc, #312]	@ (800154c <ibusFrameComplete+0x198>)
 8001414:	7892      	ldrb	r2, [r2, #2]
 8001416:	4413      	add	r3, r2
 8001418:	461a      	mov	r2, r3
 800141a:	4b4d      	ldr	r3, [pc, #308]	@ (8001550 <ibusFrameComplete+0x19c>)
 800141c:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 800141e:	4b4b      	ldr	r3, [pc, #300]	@ (800154c <ibusFrameComplete+0x198>)
 8001420:	795b      	ldrb	r3, [r3, #5]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	4a49      	ldr	r2, [pc, #292]	@ (800154c <ibusFrameComplete+0x198>)
 8001426:	7912      	ldrb	r2, [r2, #4]
 8001428:	4413      	add	r3, r2
 800142a:	461a      	mov	r2, r3
 800142c:	4b48      	ldr	r3, [pc, #288]	@ (8001550 <ibusFrameComplete+0x19c>)
 800142e:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 8001430:	4b46      	ldr	r3, [pc, #280]	@ (800154c <ibusFrameComplete+0x198>)
 8001432:	79db      	ldrb	r3, [r3, #7]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	4a45      	ldr	r2, [pc, #276]	@ (800154c <ibusFrameComplete+0x198>)
 8001438:	7992      	ldrb	r2, [r2, #6]
 800143a:	4413      	add	r3, r2
 800143c:	461a      	mov	r2, r3
 800143e:	4b44      	ldr	r3, [pc, #272]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001440:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 8001442:	4b42      	ldr	r3, [pc, #264]	@ (800154c <ibusFrameComplete+0x198>)
 8001444:	7a5b      	ldrb	r3, [r3, #9]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	4a40      	ldr	r2, [pc, #256]	@ (800154c <ibusFrameComplete+0x198>)
 800144a:	7a12      	ldrb	r2, [r2, #8]
 800144c:	4413      	add	r3, r2
 800144e:	461a      	mov	r2, r3
 8001450:	4b3f      	ldr	r3, [pc, #252]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001452:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 8001454:	4b3d      	ldr	r3, [pc, #244]	@ (800154c <ibusFrameComplete+0x198>)
 8001456:	7adb      	ldrb	r3, [r3, #11]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	4a3c      	ldr	r2, [pc, #240]	@ (800154c <ibusFrameComplete+0x198>)
 800145c:	7a92      	ldrb	r2, [r2, #10]
 800145e:	4413      	add	r3, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4b3b      	ldr	r3, [pc, #236]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001464:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 8001466:	4b39      	ldr	r3, [pc, #228]	@ (800154c <ibusFrameComplete+0x198>)
 8001468:	7b5b      	ldrb	r3, [r3, #13]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	4a37      	ldr	r2, [pc, #220]	@ (800154c <ibusFrameComplete+0x198>)
 800146e:	7b12      	ldrb	r2, [r2, #12]
 8001470:	4413      	add	r3, r2
 8001472:	461a      	mov	r2, r3
 8001474:	4b36      	ldr	r3, [pc, #216]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001476:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 8001478:	4b34      	ldr	r3, [pc, #208]	@ (800154c <ibusFrameComplete+0x198>)
 800147a:	7bdb      	ldrb	r3, [r3, #15]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	4a33      	ldr	r2, [pc, #204]	@ (800154c <ibusFrameComplete+0x198>)
 8001480:	7b92      	ldrb	r2, [r2, #14]
 8001482:	4413      	add	r3, r2
 8001484:	461a      	mov	r2, r3
 8001486:	4b32      	ldr	r3, [pc, #200]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001488:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 800148a:	4b30      	ldr	r3, [pc, #192]	@ (800154c <ibusFrameComplete+0x198>)
 800148c:	7c5b      	ldrb	r3, [r3, #17]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	4a2e      	ldr	r2, [pc, #184]	@ (800154c <ibusFrameComplete+0x198>)
 8001492:	7c12      	ldrb	r2, [r2, #16]
 8001494:	4413      	add	r3, r2
 8001496:	461a      	mov	r2, r3
 8001498:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <ibusFrameComplete+0x19c>)
 800149a:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 800149c:	4b2b      	ldr	r3, [pc, #172]	@ (800154c <ibusFrameComplete+0x198>)
 800149e:	7cdb      	ldrb	r3, [r3, #19]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	4a2a      	ldr	r2, [pc, #168]	@ (800154c <ibusFrameComplete+0x198>)
 80014a4:	7c92      	ldrb	r2, [r2, #18]
 80014a6:	4413      	add	r3, r2
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <ibusFrameComplete+0x19c>)
 80014ac:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 80014ae:	4b27      	ldr	r3, [pc, #156]	@ (800154c <ibusFrameComplete+0x198>)
 80014b0:	7d5b      	ldrb	r3, [r3, #21]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	4a25      	ldr	r2, [pc, #148]	@ (800154c <ibusFrameComplete+0x198>)
 80014b6:	7d12      	ldrb	r2, [r2, #20]
 80014b8:	4413      	add	r3, r2
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <ibusFrameComplete+0x19c>)
 80014be:	625a      	str	r2, [r3, #36]	@ 0x24
            ibusChannelData[10] = (ibus[23] << 8) + ibus[22];
 80014c0:	4b22      	ldr	r3, [pc, #136]	@ (800154c <ibusFrameComplete+0x198>)
 80014c2:	7ddb      	ldrb	r3, [r3, #23]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	4a21      	ldr	r2, [pc, #132]	@ (800154c <ibusFrameComplete+0x198>)
 80014c8:	7d92      	ldrb	r2, [r2, #22]
 80014ca:	4413      	add	r3, r2
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <ibusFrameComplete+0x19c>)
 80014d0:	629a      	str	r2, [r3, #40]	@ 0x28
			ibusChannelData[11] = (ibus[25] << 8) + ibus[24];
 80014d2:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <ibusFrameComplete+0x198>)
 80014d4:	7e5b      	ldrb	r3, [r3, #25]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	4a1c      	ldr	r2, [pc, #112]	@ (800154c <ibusFrameComplete+0x198>)
 80014da:	7e12      	ldrb	r2, [r2, #24]
 80014dc:	4413      	add	r3, r2
 80014de:	461a      	mov	r2, r3
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <ibusFrameComplete+0x19c>)
 80014e2:	62da      	str	r2, [r3, #44]	@ 0x2c
			ibusChannelData[12] = (ibus[27] << 8) + ibus[26];
 80014e4:	4b19      	ldr	r3, [pc, #100]	@ (800154c <ibusFrameComplete+0x198>)
 80014e6:	7edb      	ldrb	r3, [r3, #27]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	4a18      	ldr	r2, [pc, #96]	@ (800154c <ibusFrameComplete+0x198>)
 80014ec:	7e92      	ldrb	r2, [r2, #26]
 80014ee:	4413      	add	r3, r2
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <ibusFrameComplete+0x19c>)
 80014f4:	631a      	str	r2, [r3, #48]	@ 0x30
			ibusChannelData[13] = (ibus[29] << 8) + ibus[28];
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <ibusFrameComplete+0x198>)
 80014f8:	7f5b      	ldrb	r3, [r3, #29]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	4a13      	ldr	r2, [pc, #76]	@ (800154c <ibusFrameComplete+0x198>)
 80014fe:	7f12      	ldrb	r2, [r2, #28]
 8001500:	4413      	add	r3, r2
 8001502:	461a      	mov	r2, r3
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001506:	635a      	str	r2, [r3, #52]	@ 0x34
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	e010      	b.n	8001530 <ibusFrameComplete+0x17c>
			    if(ibusChannelData[i] > 2100){
 800150e:	4a10      	ldr	r2, [pc, #64]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	f640 0234 	movw	r2, #2100	@ 0x834
 800151a:	4293      	cmp	r3, r2
 800151c:	d905      	bls.n	800152a <ibusFrameComplete+0x176>
				    ibusChannelData[i] = 1000;
 800151e:	4a0c      	ldr	r2, [pc, #48]	@ (8001550 <ibusFrameComplete+0x19c>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001526:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3301      	adds	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b0d      	cmp	r3, #13
 8001534:	ddeb      	ble.n	800150e <ibusFrameComplete+0x15a>
				}
			}
            return TRUE;
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <ibusFrameComplete+0x188>
        }
    }
    return FALSE;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	200000cc 	.word	0x200000cc
 800154c:	20000108 	.word	0x20000108
 8001550:	200000d0 	.word	0x200000d0

08001554 <mpu6050Connection>:

/* Check mpu6050 connection
 * return 1 -> not connected
 * return 0 -> connected
 */ 
int8_t mpu6050Connection(){
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
    isConnected = HAL_I2C_IsDeviceReady(i2c,IMU_DEV_ADDRES, 3, 5);
 8001558:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <mpu6050Connection+0x24>)
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	2305      	movs	r3, #5
 800155e:	2203      	movs	r2, #3
 8001560:	21d0      	movs	r1, #208	@ 0xd0
 8001562:	f007 f975 	bl	8008850 <HAL_I2C_IsDeviceReady>
 8001566:	4603      	mov	r3, r0
 8001568:	b25a      	sxtb	r2, r3
 800156a:	4b04      	ldr	r3, [pc, #16]	@ (800157c <mpu6050Connection+0x28>)
 800156c:	701a      	strb	r2, [r3, #0]
    return isConnected;
 800156e:	4b03      	ldr	r3, [pc, #12]	@ (800157c <mpu6050Connection+0x28>)
 8001570:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001574:	4618      	mov	r0, r3
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000138 	.word	0x20000138
 800157c:	2000013c 	.word	0x2000013c

08001580 <mpu6050_init>:
}

/* configuration mpu6050*/


int8_t mpu6050_init(I2C_HandleTypeDef *hi2c){
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af02      	add	r7, sp, #8
 8001586:	6078      	str	r0, [r7, #4]
	data[1] = (uint8_t)(ACC_2G<<3);
    SPI_write(&data,2);
	return 0;
#endif
#ifdef I2C
  i2c = hi2c;	
 8001588:	4a25      	ldr	r2, [pc, #148]	@ (8001620 <mpu6050_init+0xa0>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
	int8_t k = mpu6050Connection();
 800158e:	f7ff ffe1 	bl	8001554 <mpu6050Connection>
 8001592:	4603      	mov	r3, r0
 8001594:	73fb      	strb	r3, [r7, #15]
	if(!k){
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d13a      	bne.n	8001614 <mpu6050_init+0x94>
		uint8_t buffer[6];	
		buffer[0] = MPU_RA_PWR_MGMT_1; 
 800159e:	236b      	movs	r3, #107	@ 0x6b
 80015a0:	723b      	strb	r3, [r7, #8]
		buffer[1] = RESET_REG;
 80015a2:	2300      	movs	r3, #0
 80015a4:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80015a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <mpu6050_init+0xa0>)
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	f107 0208 	add.w	r2, r7, #8
 80015ae:	2301      	movs	r3, #1
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2302      	movs	r3, #2
 80015b4:	21d0      	movs	r1, #208	@ 0xd0
 80015b6:	f006 fa7f 	bl	8007ab8 <HAL_I2C_Master_Transmit>
		
		//buffer[0] = CONFIGURATION;
		//buffer[1] = (HZ_5<<0);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);

		buffer[0] = GYRO_REG_CONFIG;
 80015ba:	231b      	movs	r3, #27
 80015bc:	723b      	strb	r3, [r7, #8]
		buffer[1] = (GYRO_1000dps<<3);
 80015be:	2310      	movs	r3, #16
 80015c0:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80015c2:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <mpu6050_init+0xa0>)
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	f107 0208 	add.w	r2, r7, #8
 80015ca:	2301      	movs	r3, #1
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2302      	movs	r3, #2
 80015d0:	21d0      	movs	r1, #208	@ 0xd0
 80015d2:	f006 fa71 	bl	8007ab8 <HAL_I2C_Master_Transmit>

		buffer[0] = ACC_REG_CONFIG;
 80015d6:	231c      	movs	r3, #28
 80015d8:	723b      	strb	r3, [r7, #8]
		buffer[1] = (ACC_16G<<3);
 80015da:	2318      	movs	r3, #24
 80015dc:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <mpu6050_init+0xa0>)
 80015e0:	6818      	ldr	r0, [r3, #0]
 80015e2:	f107 0208 	add.w	r2, r7, #8
 80015e6:	2301      	movs	r3, #1
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2302      	movs	r3, #2
 80015ec:	21d0      	movs	r1, #208	@ 0xd0
 80015ee:	f006 fa63 	bl	8007ab8 <HAL_I2C_Master_Transmit>
		//buffer[1] &= ~(1<<5);
		//buffer[1] |= (1<<5);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
		
		// set aux i2c pass through mode 
		buffer[0] = INT_PIN_CFG;
 80015f2:	2337      	movs	r3, #55	@ 0x37
 80015f4:	723b      	strb	r3, [r7, #8]
		buffer[1] |= (1<<1);
 80015f6:	7a7b      	ldrb	r3, [r7, #9]
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001600:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <mpu6050_init+0xa0>)
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	f107 0208 	add.w	r2, r7, #8
 8001608:	2301      	movs	r3, #1
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2302      	movs	r3, #2
 800160e:	21d0      	movs	r1, #208	@ 0xd0
 8001610:	f006 fa52 	bl	8007ab8 <HAL_I2C_Master_Transmit>

	}
	return k;
 8001614:	f997 300f 	ldrsb.w	r3, [r7, #15]
#endif

}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000138 	.word	0x20000138

08001624 <mpu6050_gyro_get_raw>:
/* Gyro get raw data (Lbs/s)
 * x - rate
 * y - rate
 * z - rate   
 */
void mpu6050_gyro_get_raw(axis3_t *raw){
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af02      	add	r7, sp, #8
 800162a:	6078      	str	r0, [r7, #4]
	  uint8_t buffe[6];
	  buffe[0] = (uint8_t)GYRO_DATA_REG;
 800162c:	2343      	movs	r3, #67	@ 0x43
 800162e:	723b      	strb	r3, [r7, #8]

#ifdef I2C
	  HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 8001630:	4b19      	ldr	r3, [pc, #100]	@ (8001698 <mpu6050_gyro_get_raw+0x74>)
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	f107 0208 	add.w	r2, r7, #8
 8001638:	2301      	movs	r3, #1
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	21d0      	movs	r1, #208	@ 0xd0
 8001640:	f006 fa3a 	bl	8007ab8 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 8001644:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <mpu6050_gyro_get_raw+0x74>)
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	f107 0208 	add.w	r2, r7, #8
 800164c:	2301      	movs	r3, #1
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2306      	movs	r3, #6
 8001652:	21d0      	movs	r1, #208	@ 0xd0
 8001654:	f006 fb2e 	bl	8007cb4 <HAL_I2C_Master_Receive>
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&SPI_PORT,&buffe[0],1,1);
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
#endif
	  raw->x = (int16_t)buffe[0]<<8|buffe[1];
 8001658:	7a3b      	ldrb	r3, [r7, #8]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21a      	sxth	r2, r3
 800165e:	7a7b      	ldrb	r3, [r7, #9]
 8001660:	b21b      	sxth	r3, r3
 8001662:	4313      	orrs	r3, r2
 8001664:	b21a      	sxth	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	801a      	strh	r2, [r3, #0]
	  raw->y = (int16_t)buffe[2]<<8|buffe[3];
 800166a:	7abb      	ldrb	r3, [r7, #10]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	b21a      	sxth	r2, r3
 8001670:	7afb      	ldrb	r3, [r7, #11]
 8001672:	b21b      	sxth	r3, r3
 8001674:	4313      	orrs	r3, r2
 8001676:	b21a      	sxth	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	805a      	strh	r2, [r3, #2]
	  raw->z = (int16_t)buffe[4]<<8|buffe[5];
 800167c:	7b3b      	ldrb	r3, [r7, #12]
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	b21a      	sxth	r2, r3
 8001682:	7b7b      	ldrb	r3, [r7, #13]
 8001684:	b21b      	sxth	r3, r3
 8001686:	4313      	orrs	r3, r2
 8001688:	b21a      	sxth	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	809a      	strh	r2, [r3, #4]
	}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000138 	.word	0x20000138

0800169c <mpu6050_acc_get_raw>:
/* Acc get raw data
	*  x - axis
	*  y - axis
	*  z - axis   
	*/
void mpu6050_acc_get_raw(axis3_t *k){
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	6078      	str	r0, [r7, #4]
	axis3_t p_val =*k;
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	6810      	ldr	r0, [r2, #0]
 80016ac:	6018      	str	r0, [r3, #0]
 80016ae:	8892      	ldrh	r2, [r2, #4]
 80016b0:	809a      	strh	r2, [r3, #4]
	uint8_t buffe[6];
	buffe[0] = (uint8_t)ACC_DATA_REG;
 80016b2:	233b      	movs	r3, #59	@ 0x3b
 80016b4:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 80016b6:	4b19      	ldr	r3, [pc, #100]	@ (800171c <mpu6050_acc_get_raw+0x80>)
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	f107 0208 	add.w	r2, r7, #8
 80016be:	2301      	movs	r3, #1
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	21d0      	movs	r1, #208	@ 0xd0
 80016c6:	f006 f9f7 	bl	8007ab8 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 80016ca:	4b14      	ldr	r3, [pc, #80]	@ (800171c <mpu6050_acc_get_raw+0x80>)
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	f107 0208 	add.w	r2, r7, #8
 80016d2:	2301      	movs	r3, #1
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2306      	movs	r3, #6
 80016d8:	21d0      	movs	r1, #208	@ 0xd0
 80016da:	f006 faeb 	bl	8007cb4 <HAL_I2C_Master_Receive>
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
*/
      SPI_read(buffe[0],buffe,14);
#endif
	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 80016de:	7a3b      	ldrb	r3, [r7, #8]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	7a7b      	ldrb	r3, [r7, #9]
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 80016f0:	7abb      	ldrb	r3, [r7, #10]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	7afb      	ldrb	r3, [r7, #11]
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 8001702:	7b3b      	ldrb	r3, [r7, #12]
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	b21a      	sxth	r2, r3
 8001708:	7b7b      	ldrb	r3, [r7, #13]
 800170a:	b21b      	sxth	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b21a      	sxth	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	809a      	strh	r2, [r3, #4]
}
 8001714:	bf00      	nop
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000138 	.word	0x20000138

08001720 <qmc5883_init>:
#include "../Lib/axis.h"

const uint8_t qmc_addres = (0x0d<<1);
static I2C_HandleTypeDef *qmc_i2cport;

void qmc5883_init(I2C_HandleTypeDef *i2cport){
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af02      	add	r7, sp, #8
 8001726:	6078      	str	r0, [r7, #4]
	qmc_i2cport = i2cport;
 8001728:	4a12      	ldr	r2, [pc, #72]	@ (8001774 <qmc5883_init+0x54>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
    uint8_t buf[2];
    buf[0]=0x0b;
 800172e:	230b      	movs	r3, #11
 8001730:	733b      	strb	r3, [r7, #12]
    buf[1]=0X01;
 8001732:	2301      	movs	r3, #1
 8001734:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8001736:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <qmc5883_init+0x54>)
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	231a      	movs	r3, #26
 800173c:	4619      	mov	r1, r3
 800173e:	f107 020c 	add.w	r2, r7, #12
 8001742:	2301      	movs	r3, #1
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2302      	movs	r3, #2
 8001748:	f006 f9b6 	bl	8007ab8 <HAL_I2C_Master_Transmit>
    buf[0]=0x09;
 800174c:	2309      	movs	r3, #9
 800174e:	733b      	strb	r3, [r7, #12]
    buf[1]=0X1D;
 8001750:	231d      	movs	r3, #29
 8001752:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8001754:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <qmc5883_init+0x54>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	231a      	movs	r3, #26
 800175a:	4619      	mov	r1, r3
 800175c:	f107 020c 	add.w	r2, r7, #12
 8001760:	2301      	movs	r3, #1
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2302      	movs	r3, #2
 8001766:	f006 f9a7 	bl	8007ab8 <HAL_I2C_Master_Transmit>
}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000140 	.word	0x20000140

08001778 <qmc_get_raw>:

void qmc_get_raw(axis3_t *axis){
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af04      	add	r7, sp, #16
 800177e:	6078      	str	r0, [r7, #4]
	  uint8_t buf[6]={0};
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	2300      	movs	r3, #0
 8001786:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(qmc_i2cport,qmc_addres,0x00,1,buf,6,1);
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <qmc_get_raw+0x6c>)
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	231a      	movs	r3, #26
 800178e:	4619      	mov	r1, r3
 8001790:	2301      	movs	r3, #1
 8001792:	9302      	str	r3, [sp, #8]
 8001794:	2306      	movs	r3, #6
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2301      	movs	r3, #1
 80017a0:	2200      	movs	r2, #0
 80017a2:	f006 fded 	bl	8008380 <HAL_I2C_Mem_Read>
	  axis->x=((int16_t)buf[1]<<8|buf[0]) ;
 80017a6:	7a7b      	ldrb	r3, [r7, #9]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	7a3b      	ldrb	r3, [r7, #8]
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	801a      	strh	r2, [r3, #0]
	  axis->y=((int16_t)buf[3]<<8|buf[2]);
 80017b8:	7afb      	ldrb	r3, [r7, #11]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21a      	sxth	r2, r3
 80017be:	7abb      	ldrb	r3, [r7, #10]
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	4313      	orrs	r3, r2
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	805a      	strh	r2, [r3, #2]
	  axis->z=((int16_t)buf[5]<<8|buf[4]);
 80017ca:	7b7b      	ldrb	r3, [r7, #13]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b21a      	sxth	r2, r3
 80017d0:	7b3b      	ldrb	r3, [r7, #12]
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b21a      	sxth	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	809a      	strh	r2, [r3, #4]
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000140 	.word	0x20000140

080017e8 <black_box_init>:
FRESULT open_state;
int32_t puts_state;
/*
 * init black box
 */
void black_box_init(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	fs.file = &SDFile;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <black_box_init+0x40>)
 80017ee:	4a0f      	ldr	r2, [pc, #60]	@ (800182c <black_box_init+0x44>)
 80017f0:	605a      	str	r2, [r3, #4]
    mount_state = f_mount(&SDFatFS,"",1);
 80017f2:	2201      	movs	r2, #1
 80017f4:	490e      	ldr	r1, [pc, #56]	@ (8001830 <black_box_init+0x48>)
 80017f6:	480f      	ldr	r0, [pc, #60]	@ (8001834 <black_box_init+0x4c>)
 80017f8:	f00e f9be 	bl	800fb78 <f_mount>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	4b0d      	ldr	r3, [pc, #52]	@ (8001838 <black_box_init+0x50>)
 8001802:	701a      	strb	r2, [r3, #0]
    open_state = f_open(&SDFile,"flight.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001804:	2213      	movs	r2, #19
 8001806:	490d      	ldr	r1, [pc, #52]	@ (800183c <black_box_init+0x54>)
 8001808:	4808      	ldr	r0, [pc, #32]	@ (800182c <black_box_init+0x44>)
 800180a:	f00e fa1d 	bl	800fc48 <f_open>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <black_box_init+0x58>)
 8001814:	701a      	strb	r2, [r3, #0]
    f_lseek (&SDFile,SDFile.fsize);
 8001816:	4b05      	ldr	r3, [pc, #20]	@ (800182c <black_box_init+0x44>)
 8001818:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800181c:	4619      	mov	r1, r3
 800181e:	4803      	ldr	r0, [pc, #12]	@ (800182c <black_box_init+0x44>)
 8001820:	f00e ff5b 	bl	80106da <f_lseek>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000144 	.word	0x20000144
 800182c:	20001078 	.word	0x20001078
 8001830:	08014254 	.word	0x08014254
 8001834:	20000e44 	.word	0x20000e44
 8001838:	20000350 	.word	0x20000350
 800183c:	08014258 	.word	0x08014258
 8001840:	20000351 	.word	0x20000351

08001844 <black_box_get_file_size>:

uint32_t black_box_get_file_size(){
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
    return SDFile.fsize;
 8001848:	4b03      	ldr	r3, [pc, #12]	@ (8001858 <black_box_get_file_size+0x14>)
 800184a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20001078 	.word	0x20001078

0800185c <black_box_pack_int>:
    fs.buffer_index += index;
}



void black_box_pack_int(int val){
 800185c:	b580      	push	{r7, lr}
 800185e:	b08c      	sub	sp, #48	@ 0x30
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

	fs.indexx=0;
 8001864:	4b48      	ldr	r3, [pc, #288]	@ (8001988 <black_box_pack_int+0x12c>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
	int len_str;
	int val_ = val;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	617b      	str	r3, [r7, #20]
	char str_[11];
	memset(str_,0,11);
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	220b      	movs	r2, #11
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f012 fb0a 	bl	8013e90 <memset>
	if(val != 0){
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d02a      	beq.n	80018d8 <black_box_pack_int+0x7c>
		val = abs(val);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	bfb8      	it	lt
 8001888:	425b      	neglt	r3, r3
 800188a:	607b      	str	r3, [r7, #4]
		len_str = intToStr(val,str_,0);
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	2200      	movs	r2, #0
 8001892:	4619      	mov	r1, r3
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f91b 	bl	8001ad0 <intToStr>
 800189a:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(val_ < 0){
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da2a      	bge.n	80018f8 <black_box_pack_int+0x9c>
			for(int i = len_str; i > 0; i--){
 80018a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018a6:	e00e      	b.n	80018c6 <black_box_pack_int+0x6a>
				str_[i] = str_[i - 1];
 80018a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018aa:	3b01      	subs	r3, #1
 80018ac:	3330      	adds	r3, #48	@ 0x30
 80018ae:	443b      	add	r3, r7
 80018b0:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80018b4:	f107 0208 	add.w	r2, r7, #8
 80018b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ba:	4413      	add	r3, r2
 80018bc:	460a      	mov	r2, r1
 80018be:	701a      	strb	r2, [r3, #0]
			for(int i = len_str; i > 0; i--){
 80018c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c2:	3b01      	subs	r3, #1
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	dced      	bgt.n	80018a8 <black_box_pack_int+0x4c>
			}
			len_str ++;
 80018cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ce:	3301      	adds	r3, #1
 80018d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			str_[0] = '-';
 80018d2:	232d      	movs	r3, #45	@ 0x2d
 80018d4:	723b      	strb	r3, [r7, #8]
 80018d6:	e00f      	b.n	80018f8 <black_box_pack_int+0x9c>
		}
	}
	else{
	   fs.buffer[fs.buffer_index] ='0';
 80018d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001988 <black_box_pack_int+0x12c>)
 80018da:	891b      	ldrh	r3, [r3, #8]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b2a      	ldr	r3, [pc, #168]	@ (8001988 <black_box_pack_int+0x12c>)
 80018e0:	4413      	add	r3, r2
 80018e2:	2230      	movs	r2, #48	@ 0x30
 80018e4:	729a      	strb	r2, [r3, #10]
	   len_str = 1;
 80018e6:	2301      	movs	r3, #1
 80018e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	   fs.buffer_index ++;
 80018ea:	4b27      	ldr	r3, [pc, #156]	@ (8001988 <black_box_pack_int+0x12c>)
 80018ec:	891b      	ldrh	r3, [r3, #8]
 80018ee:	3301      	adds	r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b25      	ldr	r3, [pc, #148]	@ (8001988 <black_box_pack_int+0x12c>)
 80018f4:	811a      	strh	r2, [r3, #8]
 80018f6:	e044      	b.n	8001982 <black_box_pack_int+0x126>
		return;
	}
	// copy str to buffer
	int str_idx = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
	int index_flag;
	int max_index = fs.buffer_index + len_str;
 80018fc:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <black_box_pack_int+0x12c>)
 80018fe:	891b      	ldrh	r3, [r3, #8]
 8001900:	461a      	mov	r2, r3
 8001902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001904:	4413      	add	r3, r2
 8001906:	61fb      	str	r3, [r7, #28]
	if(max_index <=  MAX_BUFFER_SIZE){
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800190e:	dc08      	bgt.n	8001922 <black_box_pack_int+0xc6>
		max_index = fs.buffer_index + len_str;
 8001910:	4b1d      	ldr	r3, [pc, #116]	@ (8001988 <black_box_pack_int+0x12c>)
 8001912:	891b      	ldrh	r3, [r3, #8]
 8001914:	461a      	mov	r2, r3
 8001916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001918:	4413      	add	r3, r2
 800191a:	61fb      	str	r3, [r7, #28]
		index_flag = 1;
 800191c:	2301      	movs	r3, #1
 800191e:	623b      	str	r3, [r7, #32]
 8001920:	e004      	b.n	800192c <black_box_pack_int+0xd0>
	}
	else{
		max_index = MAX_BUFFER_SIZE;
 8001922:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001926:	61fb      	str	r3, [r7, #28]
		index_flag = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
	}
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 800192c:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <black_box_pack_int+0x12c>)
 800192e:	891b      	ldrh	r3, [r3, #8]
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	e00f      	b.n	8001954 <black_box_pack_int+0xf8>
			fs.buffer[j] = str_[str_idx ++];
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	627a      	str	r2, [r7, #36]	@ 0x24
 800193a:	3330      	adds	r3, #48	@ 0x30
 800193c:	443b      	add	r3, r7
 800193e:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 8001942:	4a11      	ldr	r2, [pc, #68]	@ (8001988 <black_box_pack_int+0x12c>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	4413      	add	r3, r2
 8001948:	330a      	adds	r3, #10
 800194a:	460a      	mov	r2, r1
 800194c:	701a      	strb	r2, [r3, #0]
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	3301      	adds	r3, #1
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	429a      	cmp	r2, r3
 800195a:	dbeb      	blt.n	8001934 <black_box_pack_int+0xd8>
	}
	
	if(index_flag){
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <black_box_pack_int+0x118>
		fs.buffer_index += len_str;
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <black_box_pack_int+0x12c>)
 8001964:	891a      	ldrh	r2, [r3, #8]
 8001966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001968:	b29b      	uxth	r3, r3
 800196a:	4413      	add	r3, r2
 800196c:	b29a      	uxth	r2, r3
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <black_box_pack_int+0x12c>)
 8001970:	811a      	strh	r2, [r3, #8]
 8001972:	e006      	b.n	8001982 <black_box_pack_int+0x126>
	}
	else{
		fs.buffer_index += MAX_BUFFER_SIZE;
 8001974:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <black_box_pack_int+0x12c>)
 8001976:	891b      	ldrh	r3, [r3, #8]
 8001978:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b02      	ldr	r3, [pc, #8]	@ (8001988 <black_box_pack_int+0x12c>)
 8001980:	811a      	strh	r2, [r3, #8]
	}
}
 8001982:	3730      	adds	r7, #48	@ 0x30
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000144 	.word	0x20000144

0800198c <black_box_pack_str>:


void black_box_pack_str(char *c){
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

    int i = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 8001998:	e01c      	b.n	80019d4 <black_box_pack_str+0x48>
        if((fs.buffer_index + i) > MAX_BUFFER_SIZE){
 800199a:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <black_box_pack_str+0x6c>)
 800199c:	891b      	ldrh	r3, [r3, #8]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019a8:	dd04      	ble.n	80019b4 <black_box_pack_str+0x28>
                fs.buffer_index = MAX_BUFFER_SIZE;
 80019aa:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <black_box_pack_str+0x6c>)
 80019ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019b0:	811a      	strh	r2, [r3, #8]
                return;
 80019b2:	e01d      	b.n	80019f0 <black_box_pack_str+0x64>
        }
        fs.buffer[fs.buffer_index + i] = c[i];
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	441a      	add	r2, r3
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <black_box_pack_str+0x6c>)
 80019bc:	891b      	ldrh	r3, [r3, #8]
 80019be:	4619      	mov	r1, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	440b      	add	r3, r1
 80019c4:	7811      	ldrb	r1, [r2, #0]
 80019c6:	4a0c      	ldr	r2, [pc, #48]	@ (80019f8 <black_box_pack_str+0x6c>)
 80019c8:	4413      	add	r3, r2
 80019ca:	460a      	mov	r2, r1
 80019cc:	729a      	strb	r2, [r3, #10]
        i ++;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3301      	adds	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1dc      	bne.n	800199a <black_box_pack_str+0xe>
    }
    fs.buffer_index += i;
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <black_box_pack_str+0x6c>)
 80019e2:	891a      	ldrh	r2, [r3, #8]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	4b02      	ldr	r3, [pc, #8]	@ (80019f8 <black_box_pack_str+0x6c>)
 80019ee:	811a      	strh	r2, [r3, #8]
}
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	20000144 	.word	0x20000144

080019fc <black_box_pack_char>:

void black_box_pack_char(char c){
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
    fs.buffer[fs.buffer_index ] = c;
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <black_box_pack_char+0x30>)
 8001a08:	891b      	ldrh	r3, [r3, #8]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <black_box_pack_char+0x30>)
 8001a0e:	4413      	add	r3, r2
 8001a10:	79fa      	ldrb	r2, [r7, #7]
 8001a12:	729a      	strb	r2, [r3, #10]
    fs.buffer_index ++;
 8001a14:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <black_box_pack_char+0x30>)
 8001a16:	891b      	ldrh	r3, [r3, #8]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <black_box_pack_char+0x30>)
 8001a1e:	811a      	strh	r2, [r3, #8]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000144 	.word	0x20000144

08001a30 <black_box_load>:



void black_box_load()
 {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	  puts_state = f_puts(fs.buffer,fs.file);
 8001a34:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <black_box_load+0x38>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <black_box_load+0x3c>)
 8001a3c:	f00f f959 	bl	8010cf2 <f_puts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4a0b      	ldr	r2, [pc, #44]	@ (8001a70 <black_box_load+0x40>)
 8001a44:	6013      	str	r3, [r2, #0]
      f_sync(fs.file);
 8001a46:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <black_box_load+0x38>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f00e fd7c 	bl	8010548 <f_sync>
      memset(fs.buffer,0,MAX_BUFFER_SIZE);
 8001a50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a54:	2100      	movs	r1, #0
 8001a56:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <black_box_load+0x3c>)
 8001a58:	f012 fa1a 	bl	8013e90 <memset>
      fs.buffer_index = 0;
 8001a5c:	4b02      	ldr	r3, [pc, #8]	@ (8001a68 <black_box_load+0x38>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	811a      	strh	r2, [r3, #8]
 }
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000144 	.word	0x20000144
 8001a6c:	2000014e 	.word	0x2000014e
 8001a70:	20000354 	.word	0x20000354

08001a74 <reverse>:




static void reverse( char *str, int len)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001a88:	e018      	b.n	8001abc <reverse+0x48>
        temp = str[i];
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	441a      	add	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	440b      	add	r3, r1
 8001aa0:	7812      	ldrb	r2, [r2, #0]
 8001aa2:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	701a      	strb	r2, [r3, #0]
        i++;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	617b      	str	r3, [r7, #20]
        j--;
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbe2      	blt.n	8001a8a <reverse+0x16>
    }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	371c      	adds	r7, #28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <intToStr>:

 static int intToStr(int x,  char *str, int d)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
    while (x) {
 8001adc:	e01f      	b.n	8001b1e <intToStr+0x4e>
        str[fs.indexx++] = (x % 10) + '0';
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <intToStr+0x8c>)
 8001ae2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ae6:	1099      	asrs	r1, r3, #2
 8001ae8:	17d3      	asrs	r3, r2, #31
 8001aea:	1ac9      	subs	r1, r1, r3
 8001aec:	460b      	mov	r3, r1
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	1ad1      	subs	r1, r2, r3
 8001af6:	b2ca      	uxtb	r2, r1
 8001af8:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <intToStr+0x90>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	1c59      	adds	r1, r3, #1
 8001afe:	4818      	ldr	r0, [pc, #96]	@ (8001b60 <intToStr+0x90>)
 8001b00:	6001      	str	r1, [r0, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	440b      	add	r3, r1
 8001b08:	3230      	adds	r2, #48	@ 0x30
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4a12      	ldr	r2, [pc, #72]	@ (8001b5c <intToStr+0x8c>)
 8001b12:	fb82 1203 	smull	r1, r2, r2, r3
 8001b16:	1092      	asrs	r2, r2, #2
 8001b18:	17db      	asrs	r3, r3, #31
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	60fb      	str	r3, [r7, #12]
    while (x) {
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1dc      	bne.n	8001ade <intToStr+0xe>
    }

    while (fs.indexx < d)
 8001b24:	e009      	b.n	8001b3a <intToStr+0x6a>
        str[fs.indexx++] = '0';
 8001b26:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <intToStr+0x90>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	490c      	ldr	r1, [pc, #48]	@ (8001b60 <intToStr+0x90>)
 8001b2e:	600a      	str	r2, [r1, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	4413      	add	r3, r2
 8001b36:	2230      	movs	r2, #48	@ 0x30
 8001b38:	701a      	strb	r2, [r3, #0]
    while (fs.indexx < d)
 8001b3a:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <intToStr+0x90>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dcf0      	bgt.n	8001b26 <intToStr+0x56>
    reverse(str,fs.indexx);
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <intToStr+0x90>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	68b8      	ldr	r0, [r7, #8]
 8001b4c:	f7ff ff92 	bl	8001a74 <reverse>
    return fs.indexx;
 8001b50:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <intToStr+0x90>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	66666667 	.word	0x66666667
 8001b60:	20000144 	.word	0x20000144

08001b64 <compassInit>:
int8_t file_open;


/*  Init compass
 */
void compassInit(){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  calibrate_value.scale_factor_axis[X] = 1.0f;
 8001b68:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <compassInit+0x64>)
 8001b6a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b6e:	60da      	str	r2, [r3, #12]
  calibrate_value.scale_factor_axis[Y] = 1.0f;
 8001b70:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <compassInit+0x64>)
 8001b72:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b76:	611a      	str	r2, [r3, #16]
  calibrate_value.scale_factor_axis[Z] = 1.0f;
 8001b78:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <compassInit+0x64>)
 8001b7a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b7e:	615a      	str	r2, [r3, #20]

  calibrate_value.hard_iron_calibrate_value[X] = 0;
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <compassInit+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
  calibrate_value.hard_iron_calibrate_value[Y] = 0;
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <compassInit+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	605a      	str	r2, [r3, #4]
  calibrate_value.hard_iron_calibrate_value[Z] = 0;
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <compassInit+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
	
  //file_open = black_box_create_file(&calib_file,file_name);
	 
 // epprom init
  AT24Cxx_init(&device_array, 0x00, &hi2c2);
 8001b92:	4a0e      	ldr	r2, [pc, #56]	@ (8001bcc <compassInit+0x68>)
 8001b94:	2100      	movs	r1, #0
 8001b96:	480e      	ldr	r0, [pc, #56]	@ (8001bd0 <compassInit+0x6c>)
 8001b98:	f003 fc32 	bl	8005400 <AT24Cxx_init>
  AT24Cxx_add_dev(&device_array, 0x01, &hi2c2);
 8001b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bcc <compassInit+0x68>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	480b      	ldr	r0, [pc, #44]	@ (8001bd0 <compassInit+0x6c>)
 8001ba2:	f003 fc6d 	bl	8005480 <AT24Cxx_add_dev>

  // init sensor
#ifdef QMC5883
  qmc5883_init(&hi2c1);
 8001ba6:	480b      	ldr	r0, [pc, #44]	@ (8001bd4 <compassInit+0x70>)
 8001ba8:	f7ff fdba 	bl	8001720 <qmc5883_init>
#else
  hmc5883_init(&hi2c2);
#endif
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 8001bac:	2120      	movs	r1, #32
 8001bae:	480a      	ldr	r0, [pc, #40]	@ (8001bd8 <compassInit+0x74>)
 8001bb0:	f005 fdf6 	bl	80077a0 <HAL_GPIO_ReadPin>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <compassInit+0x5c>
      compass_calibrate();
 8001bba:	f000 f8f3 	bl	8001da4 <compass_calibrate>
  }
  else{
      read_calibrate_file();
  }
}
 8001bbe:	e001      	b.n	8001bc4 <compassInit+0x60>
      read_calibrate_file();
 8001bc0:	f000 f87c 	bl	8001cbc <read_calibrate_file>
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000380 	.word	0x20000380
 8001bcc:	20000840 	.word	0x20000840
 8001bd0:	2000035c 	.word	0x2000035c
 8001bd4:	200007ec 	.word	0x200007ec
 8001bd8:	40010c00 	.word	0x40010c00

08001bdc <compass_get>:

void compass_get(axis3_t *out){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	axis3_t as;
#ifdef QMC5883
         qmc_get_raw(&as);
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fdc5 	bl	8001778 <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
    // calibrate ouput
	out->x = (as.x - calibrate_value.hard_iron_calibrate_value[X]);
 8001bee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	4b30      	ldr	r3, [pc, #192]	@ (8001cb8 <compass_get+0xdc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	b21a      	sxth	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	801a      	strh	r2, [r3, #0]
	out->y = (as.y - calibrate_value.hard_iron_calibrate_value[Y]);
 8001c04:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb8 <compass_get+0xdc>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	805a      	strh	r2, [r3, #2]
	out->z = (as.z - calibrate_value.hard_iron_calibrate_value[Z]);
 8001c1a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <compass_get+0xdc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	b21a      	sxth	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	809a      	strh	r2, [r3, #4]

    out->x *= calibrate_value.scale_factor_axis[X];
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff f8b8 	bl	8000dac <__aeabi_i2f>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <compass_get+0xdc>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	4619      	mov	r1, r3
 8001c44:	4610      	mov	r0, r2
 8001c46:	f7ff f905 	bl	8000e54 <__aeabi_fmul>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fadd 	bl	800120c <__aeabi_f2iz>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b21a      	sxth	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	801a      	strh	r2, [r3, #0]
    out->y *= calibrate_value.scale_factor_axis[Y];
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f8a3 	bl	8000dac <__aeabi_i2f>
 8001c66:	4602      	mov	r2, r0
 8001c68:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <compass_get+0xdc>)
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4610      	mov	r0, r2
 8001c70:	f7ff f8f0 	bl	8000e54 <__aeabi_fmul>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fac8 	bl	800120c <__aeabi_f2iz>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	b21a      	sxth	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	805a      	strh	r2, [r3, #2]
    out->z *= calibrate_value.scale_factor_axis[Z];
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f88e 	bl	8000dac <__aeabi_i2f>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <compass_get+0xdc>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f7ff f8db 	bl	8000e54 <__aeabi_fmul>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fab3 	bl	800120c <__aeabi_f2iz>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b21a      	sxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	809a      	strh	r2, [r3, #4]
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000380 	.word	0x20000380

08001cbc <read_calibrate_file>:

/* read calibrate data from eprrom
 * 
 */

void read_calibrate_file(){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
	int32_t sum_all = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
    AT24Cxx_read_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_value,0x0010,sizeof(cali_mag_t));
 8001cc6:	4b33      	ldr	r3, [pc, #204]	@ (8001d94 <read_calibrate_file+0xd8>)
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	231c      	movs	r3, #28
 8001ccc:	2210      	movs	r2, #16
 8001cce:	4932      	ldr	r1, [pc, #200]	@ (8001d98 <read_calibrate_file+0xdc>)
 8001cd0:	f003 fd2f 	bl	8005732 <AT24Cxx_read_byte_buffer>
   	sum_all += calibrate_value.scale_factor_axis[X];
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff f869 	bl	8000dac <__aeabi_i2f>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d98 <read_calibrate_file+0xdc>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	f7fe ffae 	bl	8000c44 <__addsf3>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fa8e 	bl	800120c <__aeabi_f2iz>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Y];
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff f859 	bl	8000dac <__aeabi_i2f>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	4b26      	ldr	r3, [pc, #152]	@ (8001d98 <read_calibrate_file+0xdc>)
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f7fe ff9e 	bl	8000c44 <__addsf3>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fa7e 	bl	800120c <__aeabi_f2iz>
 8001d10:	4603      	mov	r3, r0
 8001d12:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Z];
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff f849 	bl	8000dac <__aeabi_i2f>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d98 <read_calibrate_file+0xdc>)
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	4619      	mov	r1, r3
 8001d22:	4610      	mov	r0, r2
 8001d24:	f7fe ff8e 	bl	8000c44 <__addsf3>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fa6e 	bl	800120c <__aeabi_f2iz>
 8001d30:	4603      	mov	r3, r0
 8001d32:	607b      	str	r3, [r7, #4]

    sum_all += (int)calibrate_value.hard_iron_calibrate_value[X];
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <read_calibrate_file+0xdc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Y];
 8001d3e:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <read_calibrate_file+0xdc>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Z];
 8001d48:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <read_calibrate_file+0xdc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	607b      	str	r3, [r7, #4]

    if(ABS(sum_all - (int)calibrate_value.sum_all_value) > 40){
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <read_calibrate_file+0xdc>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bfb8      	it	lt
 8001d62:	425b      	neglt	r3, r3
 8001d64:	2b28      	cmp	r3, #40	@ 0x28
 8001d66:	dd11      	ble.n	8001d8c <read_calibrate_file+0xd0>
      while(1){
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d6c:	480b      	ldr	r0, [pc, #44]	@ (8001d9c <read_calibrate_file+0xe0>)
 8001d6e:	f005 fd46 	bl	80077fe <HAL_GPIO_TogglePin>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d72:	2120      	movs	r1, #32
 8001d74:	480a      	ldr	r0, [pc, #40]	@ (8001da0 <read_calibrate_file+0xe4>)
 8001d76:	f005 fd42 	bl	80077fe <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001d7a:	2110      	movs	r1, #16
 8001d7c:	4808      	ldr	r0, [pc, #32]	@ (8001da0 <read_calibrate_file+0xe4>)
 8001d7e:	f005 fd3e 	bl	80077fe <HAL_GPIO_TogglePin>
       HAL_Delay(50); // 10 Hz loop
 8001d82:	2032      	movs	r0, #50	@ 0x32
 8001d84:	f004 fdf0 	bl	8006968 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d88:	bf00      	nop
 8001d8a:	e7ed      	b.n	8001d68 <read_calibrate_file+0xac>
      }
    }
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	2000035c 	.word	0x2000035c
 8001d98:	20000380 	.word	0x20000380
 8001d9c:	40011000 	.word	0x40011000
 8001da0:	40010800 	.word	0x40010800

08001da4 <compass_calibrate>:


/* Calibrate function
 * write calibrate value to sd card
 */
static void compass_calibrate(){
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b095      	sub	sp, #84	@ 0x54
 8001da8:	af00      	add	r7, sp, #0
    int16_t max_val[] = {-32767,-32767,-32767};
 8001daa:	4a9f      	ldr	r2, [pc, #636]	@ (8002028 <compass_calibrate+0x284>)
 8001dac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001db0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001db4:	6018      	str	r0, [r3, #0]
 8001db6:	3304      	adds	r3, #4
 8001db8:	8019      	strh	r1, [r3, #0]
    int16_t min_val[] = {32767, 32767, 32767};
 8001dba:	4a9c      	ldr	r2, [pc, #624]	@ (800202c <compass_calibrate+0x288>)
 8001dbc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001dc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dc4:	6018      	str	r0, [r3, #0]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	8019      	strh	r1, [r3, #0]
    uint8_t fist_data = TRUE;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    cali_mag_t calibrate_temp;
    ignore_data = 0;
 8001dd0:	4b97      	ldr	r3, [pc, #604]	@ (8002030 <compass_calibrate+0x28c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	801a      	strh	r2, [r3, #0]
    int16_t last_axis[3];
    axis3_t as;

	while(!file_open){
 8001dd6:	e0b5      	b.n	8001f44 <compass_calibrate+0x1a0>
 // read data from sensor
#ifdef QMC5883
         qmc_get_raw(&as);
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fccc 	bl	8001778 <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
        if(fist_data){
 8001de0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00c      	beq.n	8001e02 <compass_calibrate+0x5e>
          last_axis[X] = as.x;
 8001de8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dec:	81bb      	strh	r3, [r7, #12]
          last_axis[Y] = as.y;
 8001dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df2:	81fb      	strh	r3, [r7, #14]
          last_axis[Z] = as.z;
 8001df4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001df8:	823b      	strh	r3, [r7, #16]
          fist_data = FALSE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          continue;
 8001e00:	e0a0      	b.n	8001f44 <compass_calibrate+0x1a0>
        }
        int16_t delta_x_ = as.x -  last_axis[X];
 8001e02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        int16_t delta_y_ = as.y -  last_axis[Y];
 8001e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        int16_t delta_z_ = as.z -  last_axis[Z];
 8001e2a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        // ignore wrong value and set to zero
        int16_t ckec = sqrt(sq(delta_x_) + sq(delta_y_) + sq(delta_z_));
 8001e3e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001e42:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8001e46:	fb03 f202 	mul.w	r2, r3, r2
 8001e4a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8001e4e:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	@ 0x48
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	441a      	add	r2, r3
 8001e58:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001e5c:	f9b7 1046 	ldrsh.w	r1, [r7, #70]	@ 0x46
 8001e60:	fb01 f303 	mul.w	r3, r1, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fb34 	bl	80004d4 <__aeabi_i2d>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	f012 f85e 	bl	8013f34 <sqrt>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f7fe fe42 	bl	8000b08 <__aeabi_d2iz>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        if(ckec > max_change){
 8001e8a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001e8e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001e92:	4293      	cmp	r3, r2
 8001e94:	dd09      	ble.n	8001eaa <compass_calibrate+0x106>
            fist_data = TRUE; 
 8001e96:	2301      	movs	r3, #1
 8001e98:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            ignore_data ++;
 8001e9c:	4b64      	ldr	r3, [pc, #400]	@ (8002030 <compass_calibrate+0x28c>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	4b62      	ldr	r3, [pc, #392]	@ (8002030 <compass_calibrate+0x28c>)
 8001ea6:	801a      	strh	r2, [r3, #0]
            continue;
 8001ea8:	e04c      	b.n	8001f44 <compass_calibrate+0x1a0>
        }
        last_axis[X] = as.x;
 8001eaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eae:	81bb      	strh	r3, [r7, #12]
        last_axis[Y] = as.y;
 8001eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb4:	81fb      	strh	r3, [r7, #14]
        last_axis[Z] = as.z;
 8001eb6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001eba:	823b      	strh	r3, [r7, #16]
        // get max value each axis
        if(as.x > max_val[X]) max_val[X] = as.x;
 8001ebc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ec0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dd02      	ble.n	8001ece <compass_calibrate+0x12a>
 8001ec8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ecc:	873b      	strh	r3, [r7, #56]	@ 0x38
        if(as.y > max_val[Y]) max_val[Y] = as.y;
 8001ece:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ed2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	dd02      	ble.n	8001ee0 <compass_calibrate+0x13c>
 8001eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ede:	877b      	strh	r3, [r7, #58]	@ 0x3a
        if(as.z > max_val[Z]) max_val[Z] = as.z;
 8001ee0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ee4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dd02      	ble.n	8001ef2 <compass_calibrate+0x14e>
 8001eec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ef0:	87bb      	strh	r3, [r7, #60]	@ 0x3c

        // min value
        if(as.x < min_val[X]) min_val[X] = as.x;
 8001ef2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ef6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001efa:	429a      	cmp	r2, r3
 8001efc:	da02      	bge.n	8001f04 <compass_calibrate+0x160>
 8001efe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f02:	863b      	strh	r3, [r7, #48]	@ 0x30
        if(as.y < min_val[Y]) min_val[Y] = as.y;
 8001f04:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f08:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	da02      	bge.n	8001f16 <compass_calibrate+0x172>
 8001f10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f14:	867b      	strh	r3, [r7, #50]	@ 0x32
        if(as.z < min_val[Z]) min_val[Z] = as.z;
 8001f16:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f1a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	da02      	bge.n	8001f28 <compass_calibrate+0x184>
 8001f22:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001f26:	86bb      	strh	r3, [r7, #52]	@ 0x34
        black_box_pack_str(&calib_file,"\n");
		
		black_box_load(&calib_file);
        black_box_sync(&calib_file);
        */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001f28:	2110      	movs	r1, #16
 8001f2a:	4842      	ldr	r0, [pc, #264]	@ (8002034 <compass_calibrate+0x290>)
 8001f2c:	f005 fc67 	bl	80077fe <HAL_GPIO_TogglePin>
        HAL_Delay(20); // 10 Hz loop
 8001f30:	2014      	movs	r0, #20
 8001f32:	f004 fd19 	bl	8006968 <HAL_Delay>

       if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5) == 0){
 8001f36:	2120      	movs	r1, #32
 8001f38:	483f      	ldr	r0, [pc, #252]	@ (8002038 <compass_calibrate+0x294>)
 8001f3a:	f005 fc31 	bl	80077a0 <HAL_GPIO_ReadPin>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <compass_calibrate+0x1ae>
	while(!file_open){
 8001f44:	4b3d      	ldr	r3, [pc, #244]	@ (800203c <compass_calibrate+0x298>)
 8001f46:	f993 3000 	ldrsb.w	r3, [r3]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f43f af44 	beq.w	8001dd8 <compass_calibrate+0x34>
 8001f50:	e000      	b.n	8001f54 <compass_calibrate+0x1b0>
              break;
 8001f52:	bf00      	nop
          }
	  }

    // check all min value is negative sign
    if(min_val[X] > 0 || min_val[Y] > 0 || min_val[Z] > 0){
 8001f54:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	dc02      	bgt.n	8001f62 <compass_calibrate+0x1be>
 8001f5c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001f60:	2b00      	cmp	r3, #0
          // error
    }
    // check all max value is positive sign
    if(max_val[X] < 0 || max_val[Y] < 0 || max_val[Z] < 0){
 8001f62:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	db02      	blt.n	8001f70 <compass_calibrate+0x1cc>
 8001f6a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001f6e:	2b00      	cmp	r3, #0
          // error
    }
    // calibrate value for each axis
    calibrate_temp.hard_iron_calibrate_value[X] = (int)(max_val[X] + min_val[X])/2;
 8001f70:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f74:	461a      	mov	r2, r3
 8001f76:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001f7a:	4413      	add	r3, r2
 8001f7c:	0fda      	lsrs	r2, r3, #31
 8001f7e:	4413      	add	r3, r2
 8001f80:	105b      	asrs	r3, r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
    calibrate_temp.hard_iron_calibrate_value[Y] = (int)(max_val[Y] + min_val[Y])/2;
 8001f84:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001f8e:	4413      	add	r3, r2
 8001f90:	0fda      	lsrs	r2, r3, #31
 8001f92:	4413      	add	r3, r2
 8001f94:	105b      	asrs	r3, r3, #1
 8001f96:	61bb      	str	r3, [r7, #24]
    calibrate_temp.hard_iron_calibrate_value[Z] = (int)(max_val[Z] + min_val[Z])/2;
 8001f98:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001fa2:	4413      	add	r3, r2
 8001fa4:	0fda      	lsrs	r2, r3, #31
 8001fa6:	4413      	add	r3, r2
 8001fa8:	105b      	asrs	r3, r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]

    // calculate scale factor for each axis
    int16_t x_ = abs(max_val[X]) + abs(min_val[X]);
 8001fac:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bfb8      	it	lt
 8001fb4:	425b      	neglt	r3, r3
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bfb8      	it	lt
 8001fc0:	425b      	neglt	r3, r3
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t y_ = abs(max_val[Y]) + abs(min_val[Y]);
 8001fcc:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bfb8      	it	lt
 8001fd4:	425b      	neglt	r3, r3
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bfb8      	it	lt
 8001fe0:	425b      	neglt	r3, r3
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    int16_t z_ = abs(max_val[Z]) + abs(min_val[Z]);
 8001fec:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bfb8      	it	lt
 8001ff4:	425b      	neglt	r3, r3
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bfb8      	it	lt
 8002000:	425b      	neglt	r3, r3
 8002002:	b29b      	uxth	r3, r3
 8002004:	4413      	add	r3, r2
 8002006:	b29b      	uxth	r3, r3
 8002008:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    // get largest value
    int16_t max_value = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(x_ > y_)
 8002010:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8002014:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8002018:	429a      	cmp	r2, r3
 800201a:	dd11      	ble.n	8002040 <compass_calibrate+0x29c>
        max_value = x_;
 800201c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002020:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8002024:	e010      	b.n	8002048 <compass_calibrate+0x2a4>
 8002026:	bf00      	nop
 8002028:	08014264 	.word	0x08014264
 800202c:	0801426c 	.word	0x0801426c
 8002030:	20000358 	.word	0x20000358
 8002034:	40010800 	.word	0x40010800
 8002038:	40010c00 	.word	0x40010c00
 800203c:	2000039c 	.word	0x2000039c
    else
        max_value = y_;
 8002040:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002044:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(max_value < z_)
 8002048:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 800204c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002050:	429a      	cmp	r2, r3
 8002052:	da02      	bge.n	800205a <compass_calibrate+0x2b6>
        max_value = z_;
 8002054:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002056:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

    // caculate scale
    calibrate_temp.scale_factor_axis[X] = (float)x_/max_value;
 800205a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fea4 	bl	8000dac <__aeabi_i2f>
 8002064:	4604      	mov	r4, r0
 8002066:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fe9e 	bl	8000dac <__aeabi_i2f>
 8002070:	4603      	mov	r3, r0
 8002072:	4619      	mov	r1, r3
 8002074:	4620      	mov	r0, r4
 8002076:	f7fe ffa1 	bl	8000fbc <__aeabi_fdiv>
 800207a:	4603      	mov	r3, r0
 800207c:	623b      	str	r3, [r7, #32]
    calibrate_temp.scale_factor_axis[Y] = (float)y_/max_value;
 800207e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fe92 	bl	8000dac <__aeabi_i2f>
 8002088:	4604      	mov	r4, r0
 800208a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fe8c 	bl	8000dac <__aeabi_i2f>
 8002094:	4603      	mov	r3, r0
 8002096:	4619      	mov	r1, r3
 8002098:	4620      	mov	r0, r4
 800209a:	f7fe ff8f 	bl	8000fbc <__aeabi_fdiv>
 800209e:	4603      	mov	r3, r0
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24
    calibrate_temp.scale_factor_axis[Z] = (float)z_/max_value;
 80020a2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fe80 	bl	8000dac <__aeabi_i2f>
 80020ac:	4604      	mov	r4, r0
 80020ae:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fe7a 	bl	8000dac <__aeabi_i2f>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4619      	mov	r1, r3
 80020bc:	4620      	mov	r0, r4
 80020be:	f7fe ff7d 	bl	8000fbc <__aeabi_fdiv>
 80020c2:	4603      	mov	r3, r0
 80020c4:	62bb      	str	r3, [r7, #40]	@ 0x28

    calibrate_temp.sum_all_value = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[X];
 80020ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fe6d 	bl	8000dac <__aeabi_i2f>
 80020d2:	4602      	mov	r2, r0
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	4619      	mov	r1, r3
 80020d8:	4610      	mov	r0, r2
 80020da:	f7fe fdb3 	bl	8000c44 <__addsf3>
 80020de:	4603      	mov	r3, r0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff f893 	bl	800120c <__aeabi_f2iz>
 80020e6:	4603      	mov	r3, r0
 80020e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Y];
 80020ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fe5d 	bl	8000dac <__aeabi_i2f>
 80020f2:	4602      	mov	r2, r0
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	4619      	mov	r1, r3
 80020f8:	4610      	mov	r0, r2
 80020fa:	f7fe fda3 	bl	8000c44 <__addsf3>
 80020fe:	4603      	mov	r3, r0
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff f883 	bl	800120c <__aeabi_f2iz>
 8002106:	4603      	mov	r3, r0
 8002108:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Z];
 800210a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fe4d 	bl	8000dac <__aeabi_i2f>
 8002112:	4602      	mov	r2, r0
 8002114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002116:	4619      	mov	r1, r3
 8002118:	4610      	mov	r0, r2
 800211a:	f7fe fd93 	bl	8000c44 <__addsf3>
 800211e:	4603      	mov	r3, r0
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff f873 	bl	800120c <__aeabi_f2iz>
 8002126:	4603      	mov	r3, r0
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c

    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[X];
 800212a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	4413      	add	r3, r2
 8002130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Y];
 8002132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	4413      	add	r3, r2
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Z];
 800213a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	4413      	add	r3, r2
 8002140:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // write data to eprrom
    AT24Cxx_write_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_temp, 0x0010, sizeof(cali_mag_t));
 8002142:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <compass_calibrate+0x3c4>)
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	f107 0114 	add.w	r1, r7, #20
 800214a:	231c      	movs	r3, #28
 800214c:	2210      	movs	r2, #16
 800214e:	f003 f9ee 	bl	800552e <AT24Cxx_write_byte_buffer>
  
   // black_box_load(&calib_file);
   // black_box_close(&calib_file);
	
	while(1){
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002152:	2120      	movs	r1, #32
 8002154:	4805      	ldr	r0, [pc, #20]	@ (800216c <compass_calibrate+0x3c8>)
 8002156:	f005 fb52 	bl	80077fe <HAL_GPIO_TogglePin>
      HAL_Delay(1000); // 10 Hz loop
 800215a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800215e:	f004 fc03 	bl	8006968 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002162:	bf00      	nop
 8002164:	e7f5      	b.n	8002152 <compass_calibrate+0x3ae>
 8002166:	bf00      	nop
 8002168:	2000035c 	.word	0x2000035c
 800216c:	40010800 	.word	0x40010800

08002170 <gps_init>:

/*  
 * Init function 
 */
void gps_init(UART_HandleTypeDef *uart,uint32_t baudrate)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
	_gpsUartPort = uart;
 800217a:	4a27      	ldr	r2, [pc, #156]	@ (8002218 <gps_init+0xa8>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6013      	str	r3, [r2, #0]
    _gps.timer_ = millis();
 8002180:	4b26      	ldr	r3, [pc, #152]	@ (800221c <gps_init+0xac>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002188:	4b25      	ldr	r3, [pc, #148]	@ (8002220 <gps_init+0xb0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4413      	add	r3, r2
 800218e:	4a25      	ldr	r2, [pc, #148]	@ (8002224 <gps_init+0xb4>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	099b      	lsrs	r3, r3, #6
 8002196:	4a24      	ldr	r2, [pc, #144]	@ (8002228 <gps_init+0xb8>)
 8002198:	62d3      	str	r3, [r2, #44]	@ 0x2c
    // reset all viriables
    _payload_length = 0;
 800219a:	4b24      	ldr	r3, [pc, #144]	@ (800222c <gps_init+0xbc>)
 800219c:	2200      	movs	r2, #0
 800219e:	801a      	strh	r2, [r3, #0]
    _payload_counter = 0;
 80021a0:	4b23      	ldr	r3, [pc, #140]	@ (8002230 <gps_init+0xc0>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	801a      	strh	r2, [r3, #0]
    _msg_id = 0;
 80021a6:	4b23      	ldr	r3, [pc, #140]	@ (8002234 <gps_init+0xc4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]

    // Configuration _gps module
    HAL_UART_Transmit(_gpsUartPort,ubloxInit,sizeof(ubloxInit),1000);
 80021ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <gps_init+0xa8>)
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021b4:	22a8      	movs	r2, #168	@ 0xa8
 80021b6:	4920      	ldr	r1, [pc, #128]	@ (8002238 <gps_init+0xc8>)
 80021b8:	f009 fd6a 	bl	800bc90 <HAL_UART_Transmit>
    HAL_Delay(10);
 80021bc:	200a      	movs	r0, #10
 80021be:	f004 fbd3 	bl	8006968 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,ubloxSbasInit,sizeof(ubloxSbasInit),1000);
 80021c2:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <gps_init+0xa8>)
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ca:	2210      	movs	r2, #16
 80021cc:	491b      	ldr	r1, [pc, #108]	@ (800223c <gps_init+0xcc>)
 80021ce:	f009 fd5f 	bl	800bc90 <HAL_UART_Transmit>
    HAL_Delay(10);
 80021d2:	200a      	movs	r0, #10
 80021d4:	f004 fbc8 	bl	8006968 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,uart57600,sizeof(uart57600),1000);
 80021d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <gps_init+0xa8>)
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021e0:	221c      	movs	r2, #28
 80021e2:	4917      	ldr	r1, [pc, #92]	@ (8002240 <gps_init+0xd0>)
 80021e4:	f009 fd54 	bl	800bc90 <HAL_UART_Transmit>
    HAL_Delay(10);
 80021e8:	200a      	movs	r0, #10
 80021ea:	f004 fbbd 	bl	8006968 <HAL_Delay>
    // set baudrate
    _gpsUartPort->Init.BaudRate = baudrate;
 80021ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <gps_init+0xa8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(_gpsUartPort); 
 80021f6:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <gps_init+0xa8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f009 fcf8 	bl	800bbf0 <HAL_UART_Init>

    // read gps using interrup
	HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <gps_init+0xa8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2201      	movs	r2, #1
 8002206:	490f      	ldr	r1, [pc, #60]	@ (8002244 <gps_init+0xd4>)
 8002208:	4618      	mov	r0, r3
 800220a:	f009 fdc4 	bl	800bd96 <HAL_UART_Receive_IT>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200003d8 	.word	0x200003d8
 800221c:	20000544 	.word	0x20000544
 8002220:	20000548 	.word	0x20000548
 8002224:	10624dd3 	.word	0x10624dd3
 8002228:	200003a0 	.word	0x200003a0
 800222c:	200003e6 	.word	0x200003e6
 8002230:	200003e8 	.word	0x200003e8
 8002234:	200003e4 	.word	0x200003e4
 8002238:	080143c0 	.word	0x080143c0
 800223c:	20000000 	.word	0x20000000
 8002240:	08014468 	.word	0x08014468
 8002244:	200003dc 	.word	0x200003dc

08002248 <gps_uart_port>:

UART_HandleTypeDef *gps_uart_port(){
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
    return _gpsUartPort;
 800224c:	4b02      	ldr	r3, [pc, #8]	@ (8002258 <gps_uart_port+0x10>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	200003d8 	.word	0x200003d8

0800225c <gps_callback>:
/* 
 * REad gps by using interrup
 */
uint32_t gps_interrupt_count;
void gps_callback()
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
   // parse data
   gps_interrupt_count++;
 8002260:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <gps_callback+0x2c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	4a08      	ldr	r2, [pc, #32]	@ (8002288 <gps_callback+0x2c>)
 8002268:	6013      	str	r3, [r2, #0]
   newdata(_char);
 800226a:	4b08      	ldr	r3, [pc, #32]	@ (800228c <gps_callback+0x30>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f8f6 	bl	8002460 <newdata>
   HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 8002274:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <gps_callback+0x34>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2201      	movs	r2, #1
 800227a:	4904      	ldr	r1, [pc, #16]	@ (800228c <gps_callback+0x30>)
 800227c:	4618      	mov	r0, r3
 800227e:	f009 fd8a 	bl	800bd96 <HAL_UART_Receive_IT>
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200004b4 	.word	0x200004b4
 800228c:	200003dc 	.word	0x200003dc
 8002290:	200003d8 	.word	0x200003d8

08002294 <parse_msg>:
        *ck_a += *data;
        *ck_b += *ck_a;
        data++;
    }
}
static uint8_t parse_msg(){
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
    static uint8_t _new_speed;
    static uint8_t next_fix;
    static uint32_t lastPosUpdateTime;
    static uint8_t _new_position;
    switch (_msg_id) {
 8002298:	4b67      	ldr	r3, [pc, #412]	@ (8002438 <parse_msg+0x1a4>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b12      	cmp	r3, #18
 800229e:	dc2b      	bgt.n	80022f8 <parse_msg+0x64>
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	f2c0 80ad 	blt.w	8002400 <parse_msg+0x16c>
 80022a6:	3b02      	subs	r3, #2
 80022a8:	2b10      	cmp	r3, #16
 80022aa:	f200 80a9 	bhi.w	8002400 <parse_msg+0x16c>
 80022ae:	a201      	add	r2, pc, #4	@ (adr r2, 80022b4 <parse_msg+0x20>)
 80022b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b4:	08002301 	.word	0x08002301
 80022b8:	08002375 	.word	0x08002375
 80022bc:	08002401 	.word	0x08002401
 80022c0:	08002401 	.word	0x08002401
 80022c4:	080023a1 	.word	0x080023a1
 80022c8:	08002401 	.word	0x08002401
 80022cc:	08002401 	.word	0x08002401
 80022d0:	08002401 	.word	0x08002401
 80022d4:	08002401 	.word	0x08002401
 80022d8:	08002401 	.word	0x08002401
 80022dc:	08002401 	.word	0x08002401
 80022e0:	08002401 	.word	0x08002401
 80022e4:	08002401 	.word	0x08002401
 80022e8:	08002401 	.word	0x08002401
 80022ec:	08002401 	.word	0x08002401
 80022f0:	08002401 	.word	0x08002401
 80022f4:	080023b9 	.word	0x080023b9
 80022f8:	2b30      	cmp	r3, #48	@ 0x30
 80022fa:	f000 8083 	beq.w	8002404 <parse_msg+0x170>
 80022fe:	e07f      	b.n	8002400 <parse_msg+0x16c>
        case MSG_POSLLH:
            _gps.position[LON] = _buffer.posllh.longitude;
 8002300:	4b4e      	ldr	r3, [pc, #312]	@ (800243c <parse_msg+0x1a8>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4a4e      	ldr	r2, [pc, #312]	@ (8002440 <parse_msg+0x1ac>)
 8002306:	6013      	str	r3, [r2, #0]
            _gps.position[LAT] = _buffer.posllh.latitude;
 8002308:	4b4c      	ldr	r3, [pc, #304]	@ (800243c <parse_msg+0x1a8>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a4c      	ldr	r2, [pc, #304]	@ (8002440 <parse_msg+0x1ac>)
 800230e:	6053      	str	r3, [r2, #4]
            _gps.altitude_msl = _buffer.posllh.altitude_msl;
 8002310:	4b4a      	ldr	r3, [pc, #296]	@ (800243c <parse_msg+0x1a8>)
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	b29a      	uxth	r2, r3
 8002316:	4b4a      	ldr	r3, [pc, #296]	@ (8002440 <parse_msg+0x1ac>)
 8002318:	861a      	strh	r2, [r3, #48]	@ 0x30
            _gps.horizontalAccuracy = _buffer.posllh.horizontal_accuracy;
 800231a:	4b48      	ldr	r3, [pc, #288]	@ (800243c <parse_msg+0x1a8>)
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	4a48      	ldr	r2, [pc, #288]	@ (8002440 <parse_msg+0x1ac>)
 8002320:	6213      	str	r3, [r2, #32]
            _gps.VerticalAccuracy = _buffer.posllh.vertical_accuracy;
 8002322:	4b46      	ldr	r3, [pc, #280]	@ (800243c <parse_msg+0x1a8>)
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	4a46      	ldr	r2, [pc, #280]	@ (8002440 <parse_msg+0x1ac>)
 8002328:	6253      	str	r3, [r2, #36]	@ 0x24
            /* time update position */
            if(lastPosUpdateTime == 0){
 800232a:	4b46      	ldr	r3, [pc, #280]	@ (8002444 <parse_msg+0x1b0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d06a      	beq.n	8002408 <parse_msg+0x174>
                break;
                lastPosUpdateTime = millis();
            }
            _gps.posUpdateTime = millis() - lastPosUpdateTime;
 8002332:	4b45      	ldr	r3, [pc, #276]	@ (8002448 <parse_msg+0x1b4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800233a:	4b44      	ldr	r3, [pc, #272]	@ (800244c <parse_msg+0x1b8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a43      	ldr	r2, [pc, #268]	@ (8002450 <parse_msg+0x1bc>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	099a      	lsrs	r2, r3, #6
 8002348:	4b3e      	ldr	r3, [pc, #248]	@ (8002444 <parse_msg+0x1b0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	4a3c      	ldr	r2, [pc, #240]	@ (8002440 <parse_msg+0x1ac>)
 8002350:	6293      	str	r3, [r2, #40]	@ 0x28
            lastPosUpdateTime = millis();
 8002352:	4b3d      	ldr	r3, [pc, #244]	@ (8002448 <parse_msg+0x1b4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800235a:	4b3c      	ldr	r3, [pc, #240]	@ (800244c <parse_msg+0x1b8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4413      	add	r3, r2
 8002360:	4a3b      	ldr	r2, [pc, #236]	@ (8002450 <parse_msg+0x1bc>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	099b      	lsrs	r3, r3, #6
 8002368:	4a36      	ldr	r2, [pc, #216]	@ (8002444 <parse_msg+0x1b0>)
 800236a:	6013      	str	r3, [r2, #0]
            /* flag set */
            _new_position = TRUE;
 800236c:	4b39      	ldr	r3, [pc, #228]	@ (8002454 <parse_msg+0x1c0>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
            break;
 8002372:	e04a      	b.n	800240a <parse_msg+0x176>
        case MSG_STATUS:
            next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type == FIX_3D);
 8002374:	4b31      	ldr	r3, [pc, #196]	@ (800243c <parse_msg+0x1a8>)
 8002376:	795b      	ldrb	r3, [r3, #5]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <parse_msg+0xf8>
 8002380:	4b2e      	ldr	r3, [pc, #184]	@ (800243c <parse_msg+0x1a8>)
 8002382:	791b      	ldrb	r3, [r3, #4]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d101      	bne.n	800238c <parse_msg+0xf8>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <parse_msg+0xfa>
 800238c:	2300      	movs	r3, #0
 800238e:	b2da      	uxtb	r2, r3
 8002390:	4b31      	ldr	r3, [pc, #196]	@ (8002458 <parse_msg+0x1c4>)
 8002392:	701a      	strb	r2, [r3, #0]
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.status.fix_type;
 8002394:	4b29      	ldr	r3, [pc, #164]	@ (800243c <parse_msg+0x1a8>)
 8002396:	791a      	ldrb	r2, [r3, #4]
 8002398:	4b29      	ldr	r3, [pc, #164]	@ (8002440 <parse_msg+0x1ac>)
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            break;
 800239e:	e034      	b.n	800240a <parse_msg+0x176>
        case MSG_SOL:
            //next_fix = (_buffer.solution.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.solution.fix_type == FIX_3D);
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.solution.fix_type;
 80023a0:	4b26      	ldr	r3, [pc, #152]	@ (800243c <parse_msg+0x1a8>)
 80023a2:	7a9a      	ldrb	r2, [r3, #10]
 80023a4:	4b26      	ldr	r3, [pc, #152]	@ (8002440 <parse_msg+0x1ac>)
 80023a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            _gps.numSat = _buffer.solution.satellites;
 80023aa:	4b24      	ldr	r3, [pc, #144]	@ (800243c <parse_msg+0x1a8>)
 80023ac:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80023b0:	4b23      	ldr	r3, [pc, #140]	@ (8002440 <parse_msg+0x1ac>)
 80023b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            break;
 80023b6:	e028      	b.n	800240a <parse_msg+0x176>
        case MSG_VELNED:
            _gps.velocity[LAT] = _buffer.velned.ned_north;
 80023b8:	4b20      	ldr	r3, [pc, #128]	@ (800243c <parse_msg+0x1a8>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a20      	ldr	r2, [pc, #128]	@ (8002440 <parse_msg+0x1ac>)
 80023be:	60d3      	str	r3, [r2, #12]
            _gps.velocity[LON] = _buffer.velned.ned_east;
 80023c0:	4b1e      	ldr	r3, [pc, #120]	@ (800243c <parse_msg+0x1a8>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002440 <parse_msg+0x1ac>)
 80023c6:	6093      	str	r3, [r2, #8]
            _gps.velocity[DOWN] = _buffer.velned.ned_down;
 80023c8:	4b1c      	ldr	r3, [pc, #112]	@ (800243c <parse_msg+0x1a8>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002440 <parse_msg+0x1ac>)
 80023ce:	6113      	str	r3, [r2, #16]
            _gps.Gspeed = _buffer.velned.speed_2d;
 80023d0:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <parse_msg+0x1a8>)
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <parse_msg+0x1ac>)
 80023d8:	615a      	str	r2, [r3, #20]
            _gps.ground_course = _buffer.velned.heading_2d;
 80023da:	4b18      	ldr	r3, [pc, #96]	@ (800243c <parse_msg+0x1a8>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	4b17      	ldr	r3, [pc, #92]	@ (8002440 <parse_msg+0x1ac>)
 80023e2:	865a      	strh	r2, [r3, #50]	@ 0x32
            _gps.speedAccuracy = _buffer.velned.speed_accuracy;
 80023e4:	4b15      	ldr	r3, [pc, #84]	@ (800243c <parse_msg+0x1a8>)
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <parse_msg+0x1ac>)
 80023ec:	619a      	str	r2, [r3, #24]
            _gps.headingAccuracy = _buffer.velned.heading_accuracy;
 80023ee:	4b13      	ldr	r3, [pc, #76]	@ (800243c <parse_msg+0x1a8>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	461a      	mov	r2, r3
 80023f4:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <parse_msg+0x1ac>)
 80023f6:	61da      	str	r2, [r3, #28]
            _new_speed = TRUE;
 80023f8:	4b18      	ldr	r3, [pc, #96]	@ (800245c <parse_msg+0x1c8>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
            break;
 80023fe:	e004      	b.n	800240a <parse_msg+0x176>
            svinfo_rate[0] = svinfo_rate[1];
            svinfo_rate[1] = millis();
            */
            break;
        default:
            return FALSE;
 8002400:	2300      	movs	r3, #0
 8002402:	e014      	b.n	800242e <parse_msg+0x19a>
            break;
 8002404:	bf00      	nop
 8002406:	e000      	b.n	800240a <parse_msg+0x176>
                break;
 8002408:	bf00      	nop
    }
    if (_new_position && _new_speed) {
 800240a:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <parse_msg+0x1c0>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00c      	beq.n	800242c <parse_msg+0x198>
 8002412:	4b12      	ldr	r3, [pc, #72]	@ (800245c <parse_msg+0x1c8>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <parse_msg+0x198>
        _new_speed = _new_position = FALSE;
 800241a:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <parse_msg+0x1c0>)
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <parse_msg+0x1c0>)
 8002422:	781a      	ldrb	r2, [r3, #0]
 8002424:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <parse_msg+0x1c8>)
 8002426:	701a      	strb	r2, [r3, #0]
        return TRUE;
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <parse_msg+0x19a>
    }
    return FALSE;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	200003e4 	.word	0x200003e4
 800243c:	200003ec 	.word	0x200003ec
 8002440:	200003a0 	.word	0x200003a0
 8002444:	200004b8 	.word	0x200004b8
 8002448:	20000544 	.word	0x20000544
 800244c:	20000548 	.word	0x20000548
 8002450:	10624dd3 	.word	0x10624dd3
 8002454:	200004bc 	.word	0x200004bc
 8002458:	200004bd 	.word	0x200004bd
 800245c:	200004be 	.word	0x200004be

08002460 <newdata>:

int parse_ok;
static uint8_t newdata(uint8_t data){
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
    uint8_t parsed = FALSE;
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]
    static uint8_t _ck_a;
    static uint8_t _ck_b;
    static uint8_t _step = 0;
    static uint32_t current_time_ms = 0;
    switch (_step) {
 800246e:	4b85      	ldr	r3, [pc, #532]	@ (8002684 <newdata+0x224>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b08      	cmp	r3, #8
 8002474:	f200 8100 	bhi.w	8002678 <newdata+0x218>
 8002478:	a201      	add	r2, pc, #4	@ (adr r2, 8002480 <newdata+0x20>)
 800247a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247e:	bf00      	nop
 8002480:	080024a5 	.word	0x080024a5
 8002484:	080024bb 	.word	0x080024bb
 8002488:	080024cf 	.word	0x080024cf
 800248c:	080024eb 	.word	0x080024eb
 8002490:	0800251d 	.word	0x0800251d
 8002494:	08002551 	.word	0x08002551
 8002498:	080025ab 	.word	0x080025ab
 800249c:	08002603 	.word	0x08002603
 80024a0:	08002621 	.word	0x08002621
        case 0: // Sync char 1 (0xB5)
            if (PREAMBLE1 == data)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2bb5      	cmp	r3, #181	@ 0xb5
 80024a8:	f040 80df 	bne.w	800266a <newdata+0x20a>
                _step++;
 80024ac:	4b75      	ldr	r3, [pc, #468]	@ (8002684 <newdata+0x224>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	4b73      	ldr	r3, [pc, #460]	@ (8002684 <newdata+0x224>)
 80024b6:	701a      	strb	r2, [r3, #0]
            break;
 80024b8:	e0d7      	b.n	800266a <newdata+0x20a>
        case 1: // Sync char 2 (0x62)
            if (PREAMBLE2 == data) {
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	2b62      	cmp	r3, #98	@ 0x62
 80024be:	d106      	bne.n	80024ce <newdata+0x6e>
                _step++;
 80024c0:	4b70      	ldr	r3, [pc, #448]	@ (8002684 <newdata+0x224>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b6e      	ldr	r3, [pc, #440]	@ (8002684 <newdata+0x224>)
 80024ca:	701a      	strb	r2, [r3, #0]
                break;
 80024cc:	e0d4      	b.n	8002678 <newdata+0x218>
            }
        case 2: // Class
            _step++;
 80024ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002684 <newdata+0x224>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	3301      	adds	r3, #1
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4b6b      	ldr	r3, [pc, #428]	@ (8002684 <newdata+0x224>)
 80024d8:	701a      	strb	r2, [r3, #0]
            _ck_b = _ck_a = data;  
 80024da:	4a6b      	ldr	r2, [pc, #428]	@ (8002688 <newdata+0x228>)
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	7013      	strb	r3, [r2, #0]
 80024e0:	4b69      	ldr	r3, [pc, #420]	@ (8002688 <newdata+0x228>)
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	4b69      	ldr	r3, [pc, #420]	@ (800268c <newdata+0x22c>)
 80024e6:	701a      	strb	r2, [r3, #0]
            break;
 80024e8:	e0c6      	b.n	8002678 <newdata+0x218>
        case 3: // ID
            _step++;
 80024ea:	4b66      	ldr	r3, [pc, #408]	@ (8002684 <newdata+0x224>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	3301      	adds	r3, #1
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4b64      	ldr	r3, [pc, #400]	@ (8002684 <newdata+0x224>)
 80024f4:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 80024f6:	4b64      	ldr	r3, [pc, #400]	@ (8002688 <newdata+0x228>)
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	4413      	add	r3, r2
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b61      	ldr	r3, [pc, #388]	@ (8002688 <newdata+0x228>)
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	4b60      	ldr	r3, [pc, #384]	@ (8002688 <newdata+0x228>)
 8002506:	781a      	ldrb	r2, [r3, #0]
 8002508:	4b60      	ldr	r3, [pc, #384]	@ (800268c <newdata+0x22c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4413      	add	r3, r2
 800250e:	b2da      	uxtb	r2, r3
 8002510:	4b5e      	ldr	r3, [pc, #376]	@ (800268c <newdata+0x22c>)
 8002512:	701a      	strb	r2, [r3, #0]
            _msg_id = data;
 8002514:	4a5e      	ldr	r2, [pc, #376]	@ (8002690 <newdata+0x230>)
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	7013      	strb	r3, [r2, #0]
            break;
 800251a:	e0ad      	b.n	8002678 <newdata+0x218>
        case 4: 
            _step++;
 800251c:	4b59      	ldr	r3, [pc, #356]	@ (8002684 <newdata+0x224>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	b2da      	uxtb	r2, r3
 8002524:	4b57      	ldr	r3, [pc, #348]	@ (8002684 <newdata+0x224>)
 8002526:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8002528:	4b57      	ldr	r3, [pc, #348]	@ (8002688 <newdata+0x228>)
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	4413      	add	r3, r2
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4b55      	ldr	r3, [pc, #340]	@ (8002688 <newdata+0x228>)
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	4b54      	ldr	r3, [pc, #336]	@ (8002688 <newdata+0x228>)
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	4b54      	ldr	r3, [pc, #336]	@ (800268c <newdata+0x22c>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	4413      	add	r3, r2
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4b52      	ldr	r3, [pc, #328]	@ (800268c <newdata+0x22c>)
 8002544:	701a      	strb	r2, [r3, #0]
            _payload_length = data; 
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	b29a      	uxth	r2, r3
 800254a:	4b52      	ldr	r3, [pc, #328]	@ (8002694 <newdata+0x234>)
 800254c:	801a      	strh	r2, [r3, #0]
            break;
 800254e:	e093      	b.n	8002678 <newdata+0x218>
        case 5: 
            _step++;
 8002550:	4b4c      	ldr	r3, [pc, #304]	@ (8002684 <newdata+0x224>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	3301      	adds	r3, #1
 8002556:	b2da      	uxtb	r2, r3
 8002558:	4b4a      	ldr	r3, [pc, #296]	@ (8002684 <newdata+0x224>)
 800255a:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);      
 800255c:	4b4a      	ldr	r3, [pc, #296]	@ (8002688 <newdata+0x228>)
 800255e:	781a      	ldrb	r2, [r3, #0]
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	4413      	add	r3, r2
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b48      	ldr	r3, [pc, #288]	@ (8002688 <newdata+0x228>)
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	4b47      	ldr	r3, [pc, #284]	@ (8002688 <newdata+0x228>)
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	4b47      	ldr	r3, [pc, #284]	@ (800268c <newdata+0x22c>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	4413      	add	r3, r2
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4b45      	ldr	r3, [pc, #276]	@ (800268c <newdata+0x22c>)
 8002578:	701a      	strb	r2, [r3, #0]
            _payload_length += (uint16_t)(data << 8);
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	b29b      	uxth	r3, r3
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	b29a      	uxth	r2, r3
 8002582:	4b44      	ldr	r3, [pc, #272]	@ (8002694 <newdata+0x234>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	4413      	add	r3, r2
 8002588:	b29a      	uxth	r2, r3
 800258a:	4b42      	ldr	r3, [pc, #264]	@ (8002694 <newdata+0x234>)
 800258c:	801a      	strh	r2, [r3, #0]
            if (_payload_length > UBLOX_BUFFER_SIZE) {
 800258e:	4b41      	ldr	r3, [pc, #260]	@ (8002694 <newdata+0x234>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	2bc8      	cmp	r3, #200	@ 0xc8
 8002594:	d905      	bls.n	80025a2 <newdata+0x142>
                _payload_length = 0;
 8002596:	4b3f      	ldr	r3, [pc, #252]	@ (8002694 <newdata+0x234>)
 8002598:	2200      	movs	r2, #0
 800259a:	801a      	strh	r2, [r3, #0]
                _step = 0;
 800259c:	4b39      	ldr	r3, [pc, #228]	@ (8002684 <newdata+0x224>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
            }
            _payload_counter = 0;   
 80025a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002698 <newdata+0x238>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	801a      	strh	r2, [r3, #0]
            break;
 80025a8:	e066      	b.n	8002678 <newdata+0x218>
        case 6:
            _ck_b += (_ck_a += data);     
 80025aa:	4b37      	ldr	r3, [pc, #220]	@ (8002688 <newdata+0x228>)
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	4413      	add	r3, r2
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4b34      	ldr	r3, [pc, #208]	@ (8002688 <newdata+0x228>)
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	4b33      	ldr	r3, [pc, #204]	@ (8002688 <newdata+0x228>)
 80025ba:	781a      	ldrb	r2, [r3, #0]
 80025bc:	4b33      	ldr	r3, [pc, #204]	@ (800268c <newdata+0x22c>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	4b31      	ldr	r3, [pc, #196]	@ (800268c <newdata+0x22c>)
 80025c6:	701a      	strb	r2, [r3, #0]
            if (_payload_counter < UBLOX_BUFFER_SIZE) {
 80025c8:	4b33      	ldr	r3, [pc, #204]	@ (8002698 <newdata+0x238>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80025ce:	d805      	bhi.n	80025dc <newdata+0x17c>
                _buffer.bytes[_payload_counter] = data;
 80025d0:	4b31      	ldr	r3, [pc, #196]	@ (8002698 <newdata+0x238>)
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	4619      	mov	r1, r3
 80025d6:	4a31      	ldr	r2, [pc, #196]	@ (800269c <newdata+0x23c>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	5453      	strb	r3, [r2, r1]
            }
            if (++_payload_counter == _payload_length)
 80025dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002698 <newdata+0x238>)
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	3301      	adds	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002698 <newdata+0x238>)
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002698 <newdata+0x238>)
 80025ea:	881a      	ldrh	r2, [r3, #0]
 80025ec:	4b29      	ldr	r3, [pc, #164]	@ (8002694 <newdata+0x234>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d13c      	bne.n	800266e <newdata+0x20e>
                _step++;
 80025f4:	4b23      	ldr	r3, [pc, #140]	@ (8002684 <newdata+0x224>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	4b21      	ldr	r3, [pc, #132]	@ (8002684 <newdata+0x224>)
 80025fe:	701a      	strb	r2, [r3, #0]
            break;
 8002600:	e035      	b.n	800266e <newdata+0x20e>
        case 7:
            _step++;
 8002602:	4b20      	ldr	r3, [pc, #128]	@ (8002684 <newdata+0x224>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	3301      	adds	r3, #1
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4b1e      	ldr	r3, [pc, #120]	@ (8002684 <newdata+0x224>)
 800260c:	701a      	strb	r2, [r3, #0]
            if (_ck_a != data)
 800260e:	4b1e      	ldr	r3, [pc, #120]	@ (8002688 <newdata+0x228>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	79fa      	ldrb	r2, [r7, #7]
 8002614:	429a      	cmp	r2, r3
 8002616:	d02c      	beq.n	8002672 <newdata+0x212>
                _step = 0;         
 8002618:	4b1a      	ldr	r3, [pc, #104]	@ (8002684 <newdata+0x224>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
            break;
 800261e:	e028      	b.n	8002672 <newdata+0x212>
        case 8:
            _step = 0;
 8002620:	4b18      	ldr	r3, [pc, #96]	@ (8002684 <newdata+0x224>)
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
            if (_ck_b != data)
 8002626:	4b19      	ldr	r3, [pc, #100]	@ (800268c <newdata+0x22c>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	79fa      	ldrb	r2, [r7, #7]
 800262c:	429a      	cmp	r2, r3
 800262e:	d122      	bne.n	8002676 <newdata+0x216>
                break;   
			 _therad_read_time_ms = micros() - current_time_ms;
 8002630:	4b1b      	ldr	r3, [pc, #108]	@ (80026a0 <newdata+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002638:	4b1a      	ldr	r3, [pc, #104]	@ (80026a4 <newdata+0x244>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	441a      	add	r2, r3
 800263e:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <newdata+0x248>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	4a19      	ldr	r2, [pc, #100]	@ (80026ac <newdata+0x24c>)
 8002646:	6013      	str	r3, [r2, #0]
			 current_time_ms = micros();
 8002648:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <newdata+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002650:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <newdata+0x244>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4413      	add	r3, r2
 8002656:	4a14      	ldr	r2, [pc, #80]	@ (80026a8 <newdata+0x248>)
 8002658:	6013      	str	r3, [r2, #0]
            if (parse_msg())
 800265a:	f7ff fe1b 	bl	8002294 <parse_msg>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d009      	beq.n	8002678 <newdata+0x218>
            {
                parsed = TRUE;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
 8002668:	e006      	b.n	8002678 <newdata+0x218>
            break;
 800266a:	bf00      	nop
 800266c:	e004      	b.n	8002678 <newdata+0x218>
            break;
 800266e:	bf00      	nop
 8002670:	e002      	b.n	8002678 <newdata+0x218>
            break;
 8002672:	bf00      	nop
 8002674:	e000      	b.n	8002678 <newdata+0x218>
                break;   
 8002676:	bf00      	nop
            }
    } 
    return parsed;
 8002678:	7bfb      	ldrb	r3, [r7, #15]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200004bf 	.word	0x200004bf
 8002688:	200004c0 	.word	0x200004c0
 800268c:	200004c1 	.word	0x200004c1
 8002690:	200003e4 	.word	0x200003e4
 8002694:	200003e6 	.word	0x200003e6
 8002698:	200003e8 	.word	0x200003e8
 800269c:	200003ec 	.word	0x200003ec
 80026a0:	20000544 	.word	0x20000544
 80026a4:	20000548 	.word	0x20000548
 80026a8:	200004c4 	.word	0x200004c4
 80026ac:	200003e0 	.word	0x200003e0

080026b0 <imu_calibrate>:
  .gyr_lsb = 32.8f
};


static int32_t store_gyro[3];
void imu_calibrate(int16_t *offsx,int16_t *offsy,int16_t *offsz){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
	axis3_t gyro_;
	integralFBx = 0;
 80026bc:	4b32      	ldr	r3, [pc, #200]	@ (8002788 <imu_calibrate+0xd8>)
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
	integralFBy = 0;
 80026c4:	4b31      	ldr	r3, [pc, #196]	@ (800278c <imu_calibrate+0xdc>)
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
	integralFBz = 0;
 80026cc:	4b30      	ldr	r3, [pc, #192]	@ (8002790 <imu_calibrate+0xe0>)
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < OFFSET_CYCLE; i++){
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	e01f      	b.n	800271a <imu_calibrate+0x6a>
		mpu6050_gyro_get_raw(&gyro_);
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe ffa0 	bl	8001624 <mpu6050_gyro_get_raw>
		store_gyro[X] += gyro_.x;
 80026e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002794 <imu_calibrate+0xe4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a29      	ldr	r2, [pc, #164]	@ (8002794 <imu_calibrate+0xe4>)
 80026f0:	6013      	str	r3, [r2, #0]
    	store_gyro[Y] += gyro_.y;
 80026f2:	4b28      	ldr	r3, [pc, #160]	@ (8002794 <imu_calibrate+0xe4>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80026fa:	4413      	add	r3, r2
 80026fc:	4a25      	ldr	r2, [pc, #148]	@ (8002794 <imu_calibrate+0xe4>)
 80026fe:	6053      	str	r3, [r2, #4]
    	store_gyro[Z] += gyro_.z;
 8002700:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <imu_calibrate+0xe4>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002708:	4413      	add	r3, r2
 800270a:	4a22      	ldr	r2, [pc, #136]	@ (8002794 <imu_calibrate+0xe4>)
 800270c:	6093      	str	r3, [r2, #8]
		HAL_Delay(1); // delay 1 ms
 800270e:	2001      	movs	r0, #1
 8002710:	f004 f92a 	bl	8006968 <HAL_Delay>
	for(int i = 0;i < OFFSET_CYCLE; i++){
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	3301      	adds	r3, #1
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002720:	dbdb      	blt.n	80026da <imu_calibrate+0x2a>
	}
	*offsx = store_gyro[X] / OFFSET_CYCLE;
 8002722:	4b1c      	ldr	r3, [pc, #112]	@ (8002794 <imu_calibrate+0xe4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1c      	ldr	r2, [pc, #112]	@ (8002798 <imu_calibrate+0xe8>)
 8002728:	fb82 1203 	smull	r1, r2, r2, r3
 800272c:	1192      	asrs	r2, r2, #6
 800272e:	17db      	asrs	r3, r3, #31
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	b21a      	sxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	801a      	strh	r2, [r3, #0]
	*offsy = store_gyro[Y] / OFFSET_CYCLE;
 8002738:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <imu_calibrate+0xe4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a16      	ldr	r2, [pc, #88]	@ (8002798 <imu_calibrate+0xe8>)
 800273e:	fb82 1203 	smull	r1, r2, r2, r3
 8002742:	1192      	asrs	r2, r2, #6
 8002744:	17db      	asrs	r3, r3, #31
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	b21a      	sxth	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	801a      	strh	r2, [r3, #0]
	*offsz = store_gyro[Z] / OFFSET_CYCLE;
 800274e:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <imu_calibrate+0xe4>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	4a11      	ldr	r2, [pc, #68]	@ (8002798 <imu_calibrate+0xe8>)
 8002754:	fb82 1203 	smull	r1, r2, r2, r3
 8002758:	1192      	asrs	r2, r2, #6
 800275a:	17db      	asrs	r3, r3, #31
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	b21a      	sxth	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	801a      	strh	r2, [r3, #0]
	init_us = millis();
 8002764:	4b0d      	ldr	r3, [pc, #52]	@ (800279c <imu_calibrate+0xec>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800276c:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <imu_calibrate+0xf0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4413      	add	r3, r2
 8002772:	4a09      	ldr	r2, [pc, #36]	@ (8002798 <imu_calibrate+0xe8>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	4a0a      	ldr	r2, [pc, #40]	@ (80027a4 <imu_calibrate+0xf4>)
 800277c:	6013      	str	r3, [r2, #0]
}
 800277e:	bf00      	nop
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200004e0 	.word	0x200004e0
 800278c:	200004e4 	.word	0x200004e4
 8002790:	200004e8 	.word	0x200004e8
 8002794:	2000052c 	.word	0x2000052c
 8002798:	10624dd3 	.word	0x10624dd3
 800279c:	20000544 	.word	0x20000544
 80027a0:	20000548 	.word	0x20000548
 80027a4:	20000528 	.word	0x20000528

080027a8 <update_ahrs>:
	m->roll   = atan2_approx(-acc.x, (1/invSqrt_(acc.y * acc.y + acc.z * acc.z)))*180/M_PIf;
}

static int8_t reset_state = 1;
// mahony filter
void update_ahrs(int16_t gx_, int16_t gy_, int16_t gz_, int16_t accx_, int16_t accy_, int16_t accz_,int16_t magx,int16_t magy,int16_t magz,float dt){
 80027a8:	b5b0      	push	{r4, r5, r7, lr}
 80027aa:	b0a6      	sub	sp, #152	@ 0x98
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4604      	mov	r4, r0
 80027b0:	4608      	mov	r0, r1
 80027b2:	4611      	mov	r1, r2
 80027b4:	461a      	mov	r2, r3
 80027b6:	4623      	mov	r3, r4
 80027b8:	80fb      	strh	r3, [r7, #6]
 80027ba:	4603      	mov	r3, r0
 80027bc:	80bb      	strh	r3, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	807b      	strh	r3, [r7, #2]
 80027c2:	4613      	mov	r3, r2
 80027c4:	803b      	strh	r3, [r7, #0]
    float acc_x,acc_y,acc_z;
    float vx, vy, vz;
    float emz,wx,wy;
    float mx,my,mz,hx,hy,bx,bz;

	gx = (gx_/config.gyr_lsb) * RAD;
 80027c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe faee 	bl	8000dac <__aeabi_i2f>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4baf      	ldr	r3, [pc, #700]	@ (8002a90 <update_ahrs+0x2e8>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	4619      	mov	r1, r3
 80027d8:	4610      	mov	r0, r2
 80027da:	f7fe fbef 	bl	8000fbc <__aeabi_fdiv>
 80027de:	4603      	mov	r3, r0
 80027e0:	49ac      	ldr	r1, [pc, #688]	@ (8002a94 <update_ahrs+0x2ec>)
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fb36 	bl	8000e54 <__aeabi_fmul>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	gy = (gy_/config.gyr_lsb) * RAD;
 80027ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fada 	bl	8000dac <__aeabi_i2f>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4ba5      	ldr	r3, [pc, #660]	@ (8002a90 <update_ahrs+0x2e8>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	4619      	mov	r1, r3
 8002800:	4610      	mov	r0, r2
 8002802:	f7fe fbdb 	bl	8000fbc <__aeabi_fdiv>
 8002806:	4603      	mov	r3, r0
 8002808:	49a2      	ldr	r1, [pc, #648]	@ (8002a94 <update_ahrs+0x2ec>)
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fb22 	bl	8000e54 <__aeabi_fmul>
 8002810:	4603      	mov	r3, r0
 8002812:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	gz = (gz_/config.gyr_lsb) * RAD;
 8002816:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fac6 	bl	8000dac <__aeabi_i2f>
 8002820:	4602      	mov	r2, r0
 8002822:	4b9b      	ldr	r3, [pc, #620]	@ (8002a90 <update_ahrs+0x2e8>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	4619      	mov	r1, r3
 8002828:	4610      	mov	r0, r2
 800282a:	f7fe fbc7 	bl	8000fbc <__aeabi_fdiv>
 800282e:	4603      	mov	r3, r0
 8002830:	4998      	ldr	r1, [pc, #608]	@ (8002a94 <update_ahrs+0x2ec>)
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fb0e 	bl	8000e54 <__aeabi_fmul>
 8002838:	4603      	mov	r3, r0
 800283a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	if(!((accx_ == 0) && (accy_ == 0) && ( accz_ == 0))) {
 800283e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d108      	bne.n	8002858 <update_ahrs+0xb0>
 8002846:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <update_ahrs+0xb0>
 800284e:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8255 	beq.w	8002d02 <update_ahrs+0x55a>
		norm = invSqrt_(accx_ * accx_ + accy_ * accy_ + accz_ * accz_);
 8002858:	f9b7 3000 	ldrsh.w	r3, [r7]
 800285c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002860:	fb03 f202 	mul.w	r2, r3, r2
 8002864:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 8002868:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	@ 0xa8
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	441a      	add	r2, r3
 8002872:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 8002876:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	4413      	add	r3, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe fa93 	bl	8000dac <__aeabi_i2f>
 8002886:	4603      	mov	r3, r0
 8002888:	4618      	mov	r0, r3
 800288a:	f000 ffdb 	bl	8003844 <invSqrt_>
 800288e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
		acc_x = (float)accx_ * norm;
 8002892:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fa88 	bl	8000dac <__aeabi_i2f>
 800289c:	4603      	mov	r3, r0
 800289e:	4619      	mov	r1, r3
 80028a0:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80028a4:	f7fe fad6 	bl	8000e54 <__aeabi_fmul>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		acc_y = (float)accy_ * norm;
 80028ae:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fa7a 	bl	8000dac <__aeabi_i2f>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4619      	mov	r1, r3
 80028bc:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80028c0:	f7fe fac8 	bl	8000e54 <__aeabi_fmul>
 80028c4:	4603      	mov	r3, r0
 80028c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
		acc_z = (float)accz_ * norm;
 80028c8:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fe fa6d 	bl	8000dac <__aeabi_i2f>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4619      	mov	r1, r3
 80028d6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80028da:	f7fe fabb 	bl	8000e54 <__aeabi_fmul>
 80028de:	4603      	mov	r3, r0
 80028e0:	67bb      	str	r3, [r7, #120]	@ 0x78

		if(reset_state){
 80028e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a98 <update_ahrs+0x2f0>)
 80028e4:	f993 3000 	ldrsb.w	r3, [r3]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00c      	beq.n	8002906 <update_ahrs+0x15e>
			dcm[0][2] = acc_x;
 80028ec:	4a6b      	ldr	r2, [pc, #428]	@ (8002a9c <update_ahrs+0x2f4>)
 80028ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028f2:	6093      	str	r3, [r2, #8]
			dcm[1][2] = acc_y;
 80028f4:	4a69      	ldr	r2, [pc, #420]	@ (8002a9c <update_ahrs+0x2f4>)
 80028f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028f8:	6153      	str	r3, [r2, #20]
			dcm[2][2] = acc_z;
 80028fa:	4a68      	ldr	r2, [pc, #416]	@ (8002a9c <update_ahrs+0x2f4>)
 80028fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028fe:	6213      	str	r3, [r2, #32]
			reset_state = 0;
 8002900:	4b65      	ldr	r3, [pc, #404]	@ (8002a98 <update_ahrs+0x2f0>)
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
		}

        if(USE_MAG){
			norm = invSqrt_(magx * magx + magy * magy + magz * magz);
 8002906:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800290a:	f9b7 20b0 	ldrsh.w	r2, [r7, #176]	@ 0xb0
 800290e:	fb03 f202 	mul.w	r2, r3, r2
 8002912:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 8002916:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	@ 0xb4
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	441a      	add	r2, r3
 8002920:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 8002924:	f9b7 10b8 	ldrsh.w	r1, [r7, #184]	@ 0xb8
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fa3c 	bl	8000dac <__aeabi_i2f>
 8002934:	4603      	mov	r3, r0
 8002936:	4618      	mov	r0, r3
 8002938:	f000 ff84 	bl	8003844 <invSqrt_>
 800293c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
			mx = magx * norm;
 8002940:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fa31 	bl	8000dac <__aeabi_i2f>
 800294a:	4603      	mov	r3, r0
 800294c:	4619      	mov	r1, r3
 800294e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002952:	f7fe fa7f 	bl	8000e54 <__aeabi_fmul>
 8002956:	4603      	mov	r3, r0
 8002958:	677b      	str	r3, [r7, #116]	@ 0x74
			my = magy * norm;
 800295a:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fa24 	bl	8000dac <__aeabi_i2f>
 8002964:	4603      	mov	r3, r0
 8002966:	4619      	mov	r1, r3
 8002968:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800296c:	f7fe fa72 	bl	8000e54 <__aeabi_fmul>
 8002970:	4603      	mov	r3, r0
 8002972:	673b      	str	r3, [r7, #112]	@ 0x70
			mz = magz * norm;
 8002974:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fa17 	bl	8000dac <__aeabi_i2f>
 800297e:	4603      	mov	r3, r0
 8002980:	4619      	mov	r1, r3
 8002982:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002986:	f7fe fa65 	bl	8000e54 <__aeabi_fmul>
 800298a:	4603      	mov	r3, r0
 800298c:	66fb      	str	r3, [r7, #108]	@ 0x6c

			hx = mx * dcm[0][0] + my * dcm[1][0] + mz * dcm[2][0];
 800298e:	4b43      	ldr	r3, [pc, #268]	@ (8002a9c <update_ahrs+0x2f4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe fa5d 	bl	8000e54 <__aeabi_fmul>
 800299a:	4603      	mov	r3, r0
 800299c:	461c      	mov	r4, r3
 800299e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a9c <update_ahrs+0x2f4>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe fa55 	bl	8000e54 <__aeabi_fmul>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4619      	mov	r1, r3
 80029ae:	4620      	mov	r0, r4
 80029b0:	f7fe f948 	bl	8000c44 <__addsf3>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461c      	mov	r4, r3
 80029b8:	4b38      	ldr	r3, [pc, #224]	@ (8002a9c <update_ahrs+0x2f4>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fa48 	bl	8000e54 <__aeabi_fmul>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4619      	mov	r1, r3
 80029c8:	4620      	mov	r0, r4
 80029ca:	f7fe f93b 	bl	8000c44 <__addsf3>
 80029ce:	4603      	mov	r3, r0
 80029d0:	66bb      	str	r3, [r7, #104]	@ 0x68
			hy = mx * dcm[0][1] + my * dcm[1][1] + mz * dcm[2][1];
 80029d2:	4b32      	ldr	r3, [pc, #200]	@ (8002a9c <update_ahrs+0x2f4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe fa3b 	bl	8000e54 <__aeabi_fmul>
 80029de:	4603      	mov	r3, r0
 80029e0:	461c      	mov	r4, r3
 80029e2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a9c <update_ahrs+0x2f4>)
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe fa33 	bl	8000e54 <__aeabi_fmul>
 80029ee:	4603      	mov	r3, r0
 80029f0:	4619      	mov	r1, r3
 80029f2:	4620      	mov	r0, r4
 80029f4:	f7fe f926 	bl	8000c44 <__addsf3>
 80029f8:	4603      	mov	r3, r0
 80029fa:	461c      	mov	r4, r3
 80029fc:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <update_ahrs+0x2f4>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe fa26 	bl	8000e54 <__aeabi_fmul>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f7fe f919 	bl	8000c44 <__addsf3>
 8002a12:	4603      	mov	r3, r0
 8002a14:	667b      	str	r3, [r7, #100]	@ 0x64
			bz = mx * dcm[0][2] + my * dcm[1][2] + mz * dcm[2][2];
 8002a16:	4b21      	ldr	r3, [pc, #132]	@ (8002a9c <update_ahrs+0x2f4>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe fa19 	bl	8000e54 <__aeabi_fmul>
 8002a22:	4603      	mov	r3, r0
 8002a24:	461c      	mov	r4, r3
 8002a26:	4b1d      	ldr	r3, [pc, #116]	@ (8002a9c <update_ahrs+0x2f4>)
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe fa11 	bl	8000e54 <__aeabi_fmul>
 8002a32:	4603      	mov	r3, r0
 8002a34:	4619      	mov	r1, r3
 8002a36:	4620      	mov	r0, r4
 8002a38:	f7fe f904 	bl	8000c44 <__addsf3>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	461c      	mov	r4, r3
 8002a40:	4b16      	ldr	r3, [pc, #88]	@ (8002a9c <update_ahrs+0x2f4>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fa04 	bl	8000e54 <__aeabi_fmul>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4620      	mov	r0, r4
 8002a52:	f7fe f8f7 	bl	8000c44 <__addsf3>
 8002a56:	4603      	mov	r3, r0
 8002a58:	663b      	str	r3, [r7, #96]	@ 0x60

			bx = sqrtf(hx * hx + hy * hy);
 8002a5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a5c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002a5e:	f7fe f9f9 	bl	8000e54 <__aeabi_fmul>
 8002a62:	4603      	mov	r3, r0
 8002a64:	461c      	mov	r4, r3
 8002a66:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002a68:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002a6a:	f7fe f9f3 	bl	8000e54 <__aeabi_fmul>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4619      	mov	r1, r3
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7fe f8e6 	bl	8000c44 <__addsf3>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f011 fa7e 	bl	8013f7c <sqrtf>
 8002a80:	65f8      	str	r0, [r7, #92]	@ 0x5c

			wx = bx * dcm[0][0] + bz * dcm[0][2];
 8002a82:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <update_ahrs+0x2f4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe f9e3 	bl	8000e54 <__aeabi_fmul>
 8002a8e:	e007      	b.n	8002aa0 <update_ahrs+0x2f8>
 8002a90:	20000018 	.word	0x20000018
 8002a94:	3c8efa35 	.word	0x3c8efa35
 8002a98:	20000024 	.word	0x20000024
 8002a9c:	20000504 	.word	0x20000504
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	461c      	mov	r4, r3
 8002aa4:	4b70      	ldr	r3, [pc, #448]	@ (8002c68 <update_ahrs+0x4c0>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe f9d2 	bl	8000e54 <__aeabi_fmul>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	f7fe f8c5 	bl	8000c44 <__addsf3>
 8002aba:	4603      	mov	r3, r0
 8002abc:	65bb      	str	r3, [r7, #88]	@ 0x58
			wy = bx * dcm[1][0] + bz * dcm[1][2];
 8002abe:	4b6a      	ldr	r3, [pc, #424]	@ (8002c68 <update_ahrs+0x4c0>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe f9c5 	bl	8000e54 <__aeabi_fmul>
 8002aca:	4603      	mov	r3, r0
 8002acc:	461c      	mov	r4, r3
 8002ace:	4b66      	ldr	r3, [pc, #408]	@ (8002c68 <update_ahrs+0x4c0>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe f9bd 	bl	8000e54 <__aeabi_fmul>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4619      	mov	r1, r3
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7fe f8b0 	bl	8000c44 <__addsf3>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	657b      	str	r3, [r7, #84]	@ 0x54
			emz = mx * wy - my * wx;
 8002ae8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002aea:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002aec:	f7fe f9b2 	bl	8000e54 <__aeabi_fmul>
 8002af0:	4603      	mov	r3, r0
 8002af2:	461c      	mov	r4, r3
 8002af4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002af6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002af8:	f7fe f9ac 	bl	8000e54 <__aeabi_fmul>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4619      	mov	r1, r3
 8002b00:	4620      	mov	r0, r4
 8002b02:	f7fe f89d 	bl	8000c40 <__aeabi_fsub>
 8002b06:	4603      	mov	r3, r0
 8002b08:	653b      	str	r3, [r7, #80]	@ 0x50
		}
		else{
			emz = 0.0f;
		}

		vx = dcm[0][2];
 8002b0a:	4b57      	ldr	r3, [pc, #348]	@ (8002c68 <update_ahrs+0x4c0>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		vy = dcm[1][2];
 8002b10:	4b55      	ldr	r3, [pc, #340]	@ (8002c68 <update_ahrs+0x4c0>)
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	64bb      	str	r3, [r7, #72]	@ 0x48
		vz = dcm[2][2];
 8002b16:	4b54      	ldr	r3, [pc, #336]	@ (8002c68 <update_ahrs+0x4c0>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	647b      	str	r3, [r7, #68]	@ 0x44

		ex = acc_y * vz - acc_z * vy;
 8002b1c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002b1e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002b20:	f7fe f998 	bl	8000e54 <__aeabi_fmul>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461c      	mov	r4, r3
 8002b28:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002b2a:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002b2c:	f7fe f992 	bl	8000e54 <__aeabi_fmul>
 8002b30:	4603      	mov	r3, r0
 8002b32:	4619      	mov	r1, r3
 8002b34:	4620      	mov	r0, r4
 8002b36:	f7fe f883 	bl	8000c40 <__aeabi_fsub>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	643b      	str	r3, [r7, #64]	@ 0x40
		ey = acc_z * vx - acc_x * vz;
 8002b3e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002b40:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002b42:	f7fe f987 	bl	8000e54 <__aeabi_fmul>
 8002b46:	4603      	mov	r3, r0
 8002b48:	461c      	mov	r4, r3
 8002b4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002b4c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002b50:	f7fe f980 	bl	8000e54 <__aeabi_fmul>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4619      	mov	r1, r3
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f7fe f871 	bl	8000c40 <__aeabi_fsub>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
		ez = acc_x * vy - acc_y * vx;
 8002b62:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002b64:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002b68:	f7fe f974 	bl	8000e54 <__aeabi_fmul>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461c      	mov	r4, r3
 8002b70:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002b72:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002b74:	f7fe f96e 	bl	8000e54 <__aeabi_fmul>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f7fe f85f 	bl	8000c40 <__aeabi_fsub>
 8002b82:	4603      	mov	r3, r0
 8002b84:	63bb      	str	r3, [r7, #56]	@ 0x38

		if( Ki_imu  > 0.0f) {
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	f04f 0100 	mov.w	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fb1c 	bl	80011cc <__aeabi_fcmpgt>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d06e      	beq.n	8002c78 <update_ahrs+0x4d0>
			integralFBx +=  Ki_imu  * ex * dt;
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe f957 	bl	8000e54 <__aeabi_fmul>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fe f951 	bl	8000e54 <__aeabi_fmul>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c6c <update_ahrs+0x4c4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	f7fe f841 	bl	8000c44 <__addsf3>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b29      	ldr	r3, [pc, #164]	@ (8002c6c <update_ahrs+0x4c4>)
 8002bc8:	601a      	str	r2, [r3, #0]
			integralFBy +=  Ki_imu  * ey * dt;
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe f93f 	bl	8000e54 <__aeabi_fmul>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fe f939 	bl	8000e54 <__aeabi_fmul>
 8002be2:	4603      	mov	r3, r0
 8002be4:	461a      	mov	r2, r3
 8002be6:	4b22      	ldr	r3, [pc, #136]	@ (8002c70 <update_ahrs+0x4c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4619      	mov	r1, r3
 8002bec:	4610      	mov	r0, r2
 8002bee:	f7fe f829 	bl	8000c44 <__addsf3>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c70 <update_ahrs+0x4c8>)
 8002bf8:	601a      	str	r2, [r3, #0]
			integralFBz +=  Ki_imu  * ez * dt;
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe f927 	bl	8000e54 <__aeabi_fmul>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe f921 	bl	8000e54 <__aeabi_fmul>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b17      	ldr	r3, [pc, #92]	@ (8002c74 <update_ahrs+0x4cc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	f7fe f811 	bl	8000c44 <__addsf3>
 8002c22:	4603      	mov	r3, r0
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b13      	ldr	r3, [pc, #76]	@ (8002c74 <update_ahrs+0x4cc>)
 8002c28:	601a      	str	r2, [r3, #0]
			gx += integralFBx;
 8002c2a:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <update_ahrs+0x4c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002c34:	f7fe f806 	bl	8000c44 <__addsf3>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			gy += integralFBy;
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <update_ahrs+0x4c8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4619      	mov	r1, r3
 8002c44:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002c48:	f7fd fffc 	bl	8000c44 <__addsf3>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			gz += integralFBz;
 8002c52:	4b08      	ldr	r3, [pc, #32]	@ (8002c74 <update_ahrs+0x4cc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4619      	mov	r1, r3
 8002c58:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002c5c:	f7fd fff2 	bl	8000c44 <__addsf3>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002c66:	e013      	b.n	8002c90 <update_ahrs+0x4e8>
 8002c68:	20000504 	.word	0x20000504
 8002c6c:	200004e0 	.word	0x200004e0
 8002c70:	200004e4 	.word	0x200004e4
 8002c74:	200004e8 	.word	0x200004e8
		} else {
			integralFBx = 0.0f;
 8002c78:	4ba4      	ldr	r3, [pc, #656]	@ (8002f0c <update_ahrs+0x764>)
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8002c80:	4ba3      	ldr	r3, [pc, #652]	@ (8002f10 <update_ahrs+0x768>)
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8002c88:	4ba2      	ldr	r3, [pc, #648]	@ (8002f14 <update_ahrs+0x76c>)
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
		}

		gx += Kp_imu * ex;
 8002c90:	4ba1      	ldr	r3, [pc, #644]	@ (8002f18 <update_ahrs+0x770>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe f8dc 	bl	8000e54 <__aeabi_fmul>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002ca4:	f7fd ffce 	bl	8000c44 <__addsf3>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		gy += Kp_imu * ey;
 8002cae:	4b9a      	ldr	r3, [pc, #616]	@ (8002f18 <update_ahrs+0x770>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe f8cd 	bl	8000e54 <__aeabi_fmul>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002cc2:	f7fd ffbf 	bl	8000c44 <__addsf3>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		gz += Kp_imu * ez + emz * Kp_mag;
 8002ccc:	4b92      	ldr	r3, [pc, #584]	@ (8002f18 <update_ahrs+0x770>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe f8be 	bl	8000e54 <__aeabi_fmul>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	461c      	mov	r4, r3
 8002cdc:	4b8f      	ldr	r3, [pc, #572]	@ (8002f1c <update_ahrs+0x774>)
 8002cde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe f8b7 	bl	8000e54 <__aeabi_fmul>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4620      	mov	r0, r4
 8002cec:	f7fd ffaa 	bl	8000c44 <__addsf3>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002cf8:	f7fd ffa4 	bl	8000c44 <__addsf3>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	}

	gx *= (0.5f * dt);
 8002d02:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002d06:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8002d0a:	f7fe f8a3 	bl	8000e54 <__aeabi_fmul>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4619      	mov	r1, r3
 8002d12:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002d16:	f7fe f89d 	bl	8000e54 <__aeabi_fmul>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	gy *= (0.5f * dt);
 8002d20:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002d24:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8002d28:	f7fe f894 	bl	8000e54 <__aeabi_fmul>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002d34:	f7fe f88e 	bl	8000e54 <__aeabi_fmul>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	gz *= (0.5f * dt);
 8002d3e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002d42:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8002d46:	f7fe f885 	bl	8000e54 <__aeabi_fmul>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002d52:	f7fe f87f 	bl	8000e54 <__aeabi_fmul>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	q0 += (-q1 * gx - q2 * gy - q3 * gz);
 8002d5c:	4b70      	ldr	r3, [pc, #448]	@ (8002f20 <update_ahrs+0x778>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002d64:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe f873 	bl	8000e54 <__aeabi_fmul>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	461c      	mov	r4, r3
 8002d72:	4b6c      	ldr	r3, [pc, #432]	@ (8002f24 <update_ahrs+0x77c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe f86a 	bl	8000e54 <__aeabi_fmul>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4619      	mov	r1, r3
 8002d84:	4620      	mov	r0, r4
 8002d86:	f7fd ff5b 	bl	8000c40 <__aeabi_fsub>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	461c      	mov	r4, r3
 8002d8e:	4b66      	ldr	r3, [pc, #408]	@ (8002f28 <update_ahrs+0x780>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe f85c 	bl	8000e54 <__aeabi_fmul>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4620      	mov	r0, r4
 8002da2:	f7fd ff4d 	bl	8000c40 <__aeabi_fsub>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b60      	ldr	r3, [pc, #384]	@ (8002f2c <update_ahrs+0x784>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4619      	mov	r1, r3
 8002db0:	4610      	mov	r0, r2
 8002db2:	f7fd ff47 	bl	8000c44 <__addsf3>
 8002db6:	4603      	mov	r3, r0
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b5c      	ldr	r3, [pc, #368]	@ (8002f2c <update_ahrs+0x784>)
 8002dbc:	601a      	str	r2, [r3, #0]
	q1 += ( q0 * gx + q2 * gz - q3 * gy);
 8002dbe:	4b5b      	ldr	r3, [pc, #364]	@ (8002f2c <update_ahrs+0x784>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe f844 	bl	8000e54 <__aeabi_fmul>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461c      	mov	r4, r3
 8002dd0:	4b54      	ldr	r3, [pc, #336]	@ (8002f24 <update_ahrs+0x77c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe f83b 	bl	8000e54 <__aeabi_fmul>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4619      	mov	r1, r3
 8002de2:	4620      	mov	r0, r4
 8002de4:	f7fd ff2e 	bl	8000c44 <__addsf3>
 8002de8:	4603      	mov	r3, r0
 8002dea:	461c      	mov	r4, r3
 8002dec:	4b4e      	ldr	r3, [pc, #312]	@ (8002f28 <update_ahrs+0x780>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe f82d 	bl	8000e54 <__aeabi_fmul>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f7fd ff1e 	bl	8000c40 <__aeabi_fsub>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b45      	ldr	r3, [pc, #276]	@ (8002f20 <update_ahrs+0x778>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f7fd ff18 	bl	8000c44 <__addsf3>
 8002e14:	4603      	mov	r3, r0
 8002e16:	461a      	mov	r2, r3
 8002e18:	4b41      	ldr	r3, [pc, #260]	@ (8002f20 <update_ahrs+0x778>)
 8002e1a:	601a      	str	r2, [r3, #0]
	q2 += ( q0 * gy - q1 * gz + q3 * gx);
 8002e1c:	4b43      	ldr	r3, [pc, #268]	@ (8002f2c <update_ahrs+0x784>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe f815 	bl	8000e54 <__aeabi_fmul>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461c      	mov	r4, r3
 8002e2e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f20 <update_ahrs+0x778>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe f80c 	bl	8000e54 <__aeabi_fmul>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4620      	mov	r0, r4
 8002e42:	f7fd fefd 	bl	8000c40 <__aeabi_fsub>
 8002e46:	4603      	mov	r3, r0
 8002e48:	461c      	mov	r4, r3
 8002e4a:	4b37      	ldr	r3, [pc, #220]	@ (8002f28 <update_ahrs+0x780>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fffe 	bl	8000e54 <__aeabi_fmul>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7fd fef1 	bl	8000c44 <__addsf3>
 8002e62:	4603      	mov	r3, r0
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b2f      	ldr	r3, [pc, #188]	@ (8002f24 <update_ahrs+0x77c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	f7fd fee9 	bl	8000c44 <__addsf3>
 8002e72:	4603      	mov	r3, r0
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b2b      	ldr	r3, [pc, #172]	@ (8002f24 <update_ahrs+0x77c>)
 8002e78:	601a      	str	r2, [r3, #0]
	q3 += ( q0 * gz + q1 * gy - q2 * gx);
 8002e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f2c <update_ahrs+0x784>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd ffe6 	bl	8000e54 <__aeabi_fmul>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	461c      	mov	r4, r3
 8002e8c:	4b24      	ldr	r3, [pc, #144]	@ (8002f20 <update_ahrs+0x778>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd ffdd 	bl	8000e54 <__aeabi_fmul>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7fd fed0 	bl	8000c44 <__addsf3>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461c      	mov	r4, r3
 8002ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f24 <update_ahrs+0x77c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd ffcf 	bl	8000e54 <__aeabi_fmul>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f7fd fec0 	bl	8000c40 <__aeabi_fsub>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4b18      	ldr	r3, [pc, #96]	@ (8002f28 <update_ahrs+0x780>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f7fd feba 	bl	8000c44 <__addsf3>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4b14      	ldr	r3, [pc, #80]	@ (8002f28 <update_ahrs+0x780>)
 8002ed6:	601a      	str	r2, [r3, #0]

	norm = invSqrt_(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002ed8:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <update_ahrs+0x784>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a13      	ldr	r2, [pc, #76]	@ (8002f2c <update_ahrs+0x784>)
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd ffb6 	bl	8000e54 <__aeabi_fmul>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	461c      	mov	r4, r3
 8002eec:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <update_ahrs+0x778>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8002f20 <update_ahrs+0x778>)
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd ffac 	bl	8000e54 <__aeabi_fmul>
 8002efc:	4603      	mov	r3, r0
 8002efe:	4619      	mov	r1, r3
 8002f00:	4620      	mov	r0, r4
 8002f02:	f7fd fe9f 	bl	8000c44 <__addsf3>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461c      	mov	r4, r3
 8002f0a:	e011      	b.n	8002f30 <update_ahrs+0x788>
 8002f0c:	200004e0 	.word	0x200004e0
 8002f10:	200004e4 	.word	0x200004e4
 8002f14:	200004e8 	.word	0x200004e8
 8002f18:	20000010 	.word	0x20000010
 8002f1c:	40a00000 	.word	0x40a00000
 8002f20:	200004f8 	.word	0x200004f8
 8002f24:	200004fc 	.word	0x200004fc
 8002f28:	20000500 	.word	0x20000500
 8002f2c:	20000014 	.word	0x20000014
 8002f30:	4b96      	ldr	r3, [pc, #600]	@ (800318c <update_ahrs+0x9e4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a95      	ldr	r2, [pc, #596]	@ (800318c <update_ahrs+0x9e4>)
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd ff8a 	bl	8000e54 <__aeabi_fmul>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4619      	mov	r1, r3
 8002f44:	4620      	mov	r0, r4
 8002f46:	f7fd fe7d 	bl	8000c44 <__addsf3>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	461c      	mov	r4, r3
 8002f4e:	4b90      	ldr	r3, [pc, #576]	@ (8003190 <update_ahrs+0x9e8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a8f      	ldr	r2, [pc, #572]	@ (8003190 <update_ahrs+0x9e8>)
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd ff7b 	bl	8000e54 <__aeabi_fmul>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4619      	mov	r1, r3
 8002f62:	4620      	mov	r0, r4
 8002f64:	f7fd fe6e 	bl	8000c44 <__addsf3>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fc6a 	bl	8003844 <invSqrt_>
 8002f70:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	q0 *= norm;
 8002f74:	4b87      	ldr	r3, [pc, #540]	@ (8003194 <update_ahrs+0x9ec>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd ff69 	bl	8000e54 <__aeabi_fmul>
 8002f82:	4603      	mov	r3, r0
 8002f84:	461a      	mov	r2, r3
 8002f86:	4b83      	ldr	r3, [pc, #524]	@ (8003194 <update_ahrs+0x9ec>)
 8002f88:	601a      	str	r2, [r3, #0]
	q1 *= norm;
 8002f8a:	4b83      	ldr	r3, [pc, #524]	@ (8003198 <update_ahrs+0x9f0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd ff5e 	bl	8000e54 <__aeabi_fmul>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4b7e      	ldr	r3, [pc, #504]	@ (8003198 <update_ahrs+0x9f0>)
 8002f9e:	601a      	str	r2, [r3, #0]
	q2 *= norm;
 8002fa0:	4b7a      	ldr	r3, [pc, #488]	@ (800318c <update_ahrs+0x9e4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd ff53 	bl	8000e54 <__aeabi_fmul>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b76      	ldr	r3, [pc, #472]	@ (800318c <update_ahrs+0x9e4>)
 8002fb4:	601a      	str	r2, [r3, #0]
	q3 *= norm;
 8002fb6:	4b76      	ldr	r3, [pc, #472]	@ (8003190 <update_ahrs+0x9e8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd ff48 	bl	8000e54 <__aeabi_fmul>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4b71      	ldr	r3, [pc, #452]	@ (8003190 <update_ahrs+0x9e8>)
 8002fca:	601a      	str	r2, [r3, #0]
	
	float q0q1 = q0*q1;
 8002fcc:	4b71      	ldr	r3, [pc, #452]	@ (8003194 <update_ahrs+0x9ec>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a71      	ldr	r2, [pc, #452]	@ (8003198 <update_ahrs+0x9f0>)
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd ff3c 	bl	8000e54 <__aeabi_fmul>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	637b      	str	r3, [r7, #52]	@ 0x34
	float q0q2 = q0*q2;
 8002fe0:	4b6c      	ldr	r3, [pc, #432]	@ (8003194 <update_ahrs+0x9ec>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a69      	ldr	r2, [pc, #420]	@ (800318c <update_ahrs+0x9e4>)
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd ff32 	bl	8000e54 <__aeabi_fmul>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	633b      	str	r3, [r7, #48]	@ 0x30
	float q0q3 = q0*q3;
 8002ff4:	4b67      	ldr	r3, [pc, #412]	@ (8003194 <update_ahrs+0x9ec>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a65      	ldr	r2, [pc, #404]	@ (8003190 <update_ahrs+0x9e8>)
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd ff28 	bl	8000e54 <__aeabi_fmul>
 8003004:	4603      	mov	r3, r0
 8003006:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float q1q1 = q1*q1;
 8003008:	4b63      	ldr	r3, [pc, #396]	@ (8003198 <update_ahrs+0x9f0>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a62      	ldr	r2, [pc, #392]	@ (8003198 <update_ahrs+0x9f0>)
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd ff1e 	bl	8000e54 <__aeabi_fmul>
 8003018:	4603      	mov	r3, r0
 800301a:	62bb      	str	r3, [r7, #40]	@ 0x28
	float q1q2 = q1*q2;
 800301c:	4b5e      	ldr	r3, [pc, #376]	@ (8003198 <update_ahrs+0x9f0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a5a      	ldr	r2, [pc, #360]	@ (800318c <update_ahrs+0x9e4>)
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd ff14 	bl	8000e54 <__aeabi_fmul>
 800302c:	4603      	mov	r3, r0
 800302e:	627b      	str	r3, [r7, #36]	@ 0x24
	float q1q3 = q1*q3;
 8003030:	4b59      	ldr	r3, [pc, #356]	@ (8003198 <update_ahrs+0x9f0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a56      	ldr	r2, [pc, #344]	@ (8003190 <update_ahrs+0x9e8>)
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd ff0a 	bl	8000e54 <__aeabi_fmul>
 8003040:	4603      	mov	r3, r0
 8003042:	623b      	str	r3, [r7, #32]
	float q2q2 = q2*q2;
 8003044:	4b51      	ldr	r3, [pc, #324]	@ (800318c <update_ahrs+0x9e4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a50      	ldr	r2, [pc, #320]	@ (800318c <update_ahrs+0x9e4>)
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd ff00 	bl	8000e54 <__aeabi_fmul>
 8003054:	4603      	mov	r3, r0
 8003056:	61fb      	str	r3, [r7, #28]
	float q2q3 = q2*q3;
 8003058:	4b4c      	ldr	r3, [pc, #304]	@ (800318c <update_ahrs+0x9e4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a4c      	ldr	r2, [pc, #304]	@ (8003190 <update_ahrs+0x9e8>)
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fef6 	bl	8000e54 <__aeabi_fmul>
 8003068:	4603      	mov	r3, r0
 800306a:	61bb      	str	r3, [r7, #24]
	float q3q3 = q3*q3;
 800306c:	4b48      	ldr	r3, [pc, #288]	@ (8003190 <update_ahrs+0x9e8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a47      	ldr	r2, [pc, #284]	@ (8003190 <update_ahrs+0x9e8>)
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd feec 	bl	8000e54 <__aeabi_fmul>
 800307c:	4603      	mov	r3, r0
 800307e:	617b      	str	r3, [r7, #20]

	// Quaternion to Rotation matrix
	dcm[0][0] = 2.0f*(0.5f - q2q2  - q3q3);
 8003080:	69f9      	ldr	r1, [r7, #28]
 8003082:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8003086:	f7fd fddb 	bl	8000c40 <__aeabi_fsub>
 800308a:	4603      	mov	r3, r0
 800308c:	6979      	ldr	r1, [r7, #20]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fdd6 	bl	8000c40 <__aeabi_fsub>
 8003094:	4603      	mov	r3, r0
 8003096:	4619      	mov	r1, r3
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fdd3 	bl	8000c44 <__addsf3>
 800309e:	4603      	mov	r3, r0
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b3e      	ldr	r3, [pc, #248]	@ (800319c <update_ahrs+0x9f4>)
 80030a4:	601a      	str	r2, [r3, #0]
	dcm[1][0] = 2.0f*(q1q2 - q0q3);
 80030a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80030aa:	f7fd fdc9 	bl	8000c40 <__aeabi_fsub>
 80030ae:	4603      	mov	r3, r0
 80030b0:	4619      	mov	r1, r3
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fdc6 	bl	8000c44 <__addsf3>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b37      	ldr	r3, [pc, #220]	@ (800319c <update_ahrs+0x9f4>)
 80030be:	60da      	str	r2, [r3, #12]
	dcm[2][0] = 2.0f*(q1q3 + q0q2);
 80030c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030c2:	6a38      	ldr	r0, [r7, #32]
 80030c4:	f7fd fdbe 	bl	8000c44 <__addsf3>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4619      	mov	r1, r3
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fd fdb9 	bl	8000c44 <__addsf3>
 80030d2:	4603      	mov	r3, r0
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b31      	ldr	r3, [pc, #196]	@ (800319c <update_ahrs+0x9f4>)
 80030d8:	619a      	str	r2, [r3, #24]
	dcm[0][1] = 2.0f*(q1q2 + q0q3);
 80030da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80030de:	f7fd fdb1 	bl	8000c44 <__addsf3>
 80030e2:	4603      	mov	r3, r0
 80030e4:	4619      	mov	r1, r3
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd fdac 	bl	8000c44 <__addsf3>
 80030ec:	4603      	mov	r3, r0
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b2a      	ldr	r3, [pc, #168]	@ (800319c <update_ahrs+0x9f4>)
 80030f2:	605a      	str	r2, [r3, #4]
	dcm[1][1] = 2.0f*(0.5f - q1q1 - q3q3);
 80030f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030f6:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80030fa:	f7fd fda1 	bl	8000c40 <__aeabi_fsub>
 80030fe:	4603      	mov	r3, r0
 8003100:	6979      	ldr	r1, [r7, #20]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fd9c 	bl	8000c40 <__aeabi_fsub>
 8003108:	4603      	mov	r3, r0
 800310a:	4619      	mov	r1, r3
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd fd99 	bl	8000c44 <__addsf3>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	4b21      	ldr	r3, [pc, #132]	@ (800319c <update_ahrs+0x9f4>)
 8003118:	611a      	str	r2, [r3, #16]
	dcm[2][1] = 2.0f*(q2q3 - q0q1);
 800311a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800311c:	69b8      	ldr	r0, [r7, #24]
 800311e:	f7fd fd8f 	bl	8000c40 <__aeabi_fsub>
 8003122:	4603      	mov	r3, r0
 8003124:	4619      	mov	r1, r3
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd fd8c 	bl	8000c44 <__addsf3>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	4b1a      	ldr	r3, [pc, #104]	@ (800319c <update_ahrs+0x9f4>)
 8003132:	61da      	str	r2, [r3, #28]
	dcm[0][2] = 2.0f*(q1q3 - q0q2);
 8003134:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003136:	6a38      	ldr	r0, [r7, #32]
 8003138:	f7fd fd82 	bl	8000c40 <__aeabi_fsub>
 800313c:	4603      	mov	r3, r0
 800313e:	4619      	mov	r1, r3
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd fd7f 	bl	8000c44 <__addsf3>
 8003146:	4603      	mov	r3, r0
 8003148:	461a      	mov	r2, r3
 800314a:	4b14      	ldr	r3, [pc, #80]	@ (800319c <update_ahrs+0x9f4>)
 800314c:	609a      	str	r2, [r3, #8]
	dcm[1][2] = 2.0f*(q2q3 + q0q1);
 800314e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003150:	69b8      	ldr	r0, [r7, #24]
 8003152:	f7fd fd77 	bl	8000c44 <__addsf3>
 8003156:	4603      	mov	r3, r0
 8003158:	4619      	mov	r1, r3
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd fd72 	bl	8000c44 <__addsf3>
 8003160:	4603      	mov	r3, r0
 8003162:	461a      	mov	r2, r3
 8003164:	4b0d      	ldr	r3, [pc, #52]	@ (800319c <update_ahrs+0x9f4>)
 8003166:	615a      	str	r2, [r3, #20]
	dcm[2][2] = 2.0f*(0.5f - q1q1 - q2q2);
 8003168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800316a:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800316e:	f7fd fd67 	bl	8000c40 <__aeabi_fsub>
 8003172:	4603      	mov	r3, r0
 8003174:	69f9      	ldr	r1, [r7, #28]
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd fd62 	bl	8000c40 <__aeabi_fsub>
 800317c:	4603      	mov	r3, r0
 800317e:	4619      	mov	r1, r3
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd fd5f 	bl	8000c44 <__addsf3>
 8003186:	4603      	mov	r3, r0
 8003188:	461a      	mov	r2, r3
 800318a:	e009      	b.n	80031a0 <update_ahrs+0x9f8>
 800318c:	200004fc 	.word	0x200004fc
 8003190:	20000500 	.word	0x20000500
 8003194:	20000014 	.word	0x20000014
 8003198:	200004f8 	.word	0x200004f8
 800319c:	20000504 	.word	0x20000504
 80031a0:	4ba3      	ldr	r3, [pc, #652]	@ (8003430 <update_ahrs+0xc88>)
 80031a2:	621a      	str	r2, [r3, #32]
	
    // Rotate acceleration from Body frame to earth frame
	int16_t acc_Eframex = dcm[0][0]*accx_ + dcm[1][0]*accy_ + dcm[2][0]*accz_;
 80031a4:	4ba2      	ldr	r3, [pc, #648]	@ (8003430 <update_ahrs+0xc88>)
 80031a6:	681c      	ldr	r4, [r3, #0]
 80031a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd fdfd 	bl	8000dac <__aeabi_i2f>
 80031b2:	4603      	mov	r3, r0
 80031b4:	4619      	mov	r1, r3
 80031b6:	4620      	mov	r0, r4
 80031b8:	f7fd fe4c 	bl	8000e54 <__aeabi_fmul>
 80031bc:	4603      	mov	r3, r0
 80031be:	461d      	mov	r5, r3
 80031c0:	4b9b      	ldr	r3, [pc, #620]	@ (8003430 <update_ahrs+0xc88>)
 80031c2:	68dc      	ldr	r4, [r3, #12]
 80031c4:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd fdef 	bl	8000dac <__aeabi_i2f>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4619      	mov	r1, r3
 80031d2:	4620      	mov	r0, r4
 80031d4:	f7fd fe3e 	bl	8000e54 <__aeabi_fmul>
 80031d8:	4603      	mov	r3, r0
 80031da:	4619      	mov	r1, r3
 80031dc:	4628      	mov	r0, r5
 80031de:	f7fd fd31 	bl	8000c44 <__addsf3>
 80031e2:	4603      	mov	r3, r0
 80031e4:	461d      	mov	r5, r3
 80031e6:	4b92      	ldr	r3, [pc, #584]	@ (8003430 <update_ahrs+0xc88>)
 80031e8:	699c      	ldr	r4, [r3, #24]
 80031ea:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd fddc 	bl	8000dac <__aeabi_i2f>
 80031f4:	4603      	mov	r3, r0
 80031f6:	4619      	mov	r1, r3
 80031f8:	4620      	mov	r0, r4
 80031fa:	f7fd fe2b 	bl	8000e54 <__aeabi_fmul>
 80031fe:	4603      	mov	r3, r0
 8003200:	4619      	mov	r1, r3
 8003202:	4628      	mov	r0, r5
 8003204:	f7fd fd1e 	bl	8000c44 <__addsf3>
 8003208:	4603      	mov	r3, r0
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd fffe 	bl	800120c <__aeabi_f2iz>
 8003210:	4603      	mov	r3, r0
 8003212:	827b      	strh	r3, [r7, #18]
	int16_t acc_Eframey = dcm[0][1]*accx_ + dcm[1][1]*accy_ + dcm[2][1]*accz_;
 8003214:	4b86      	ldr	r3, [pc, #536]	@ (8003430 <update_ahrs+0xc88>)
 8003216:	685c      	ldr	r4, [r3, #4]
 8003218:	f9b7 3000 	ldrsh.w	r3, [r7]
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd fdc5 	bl	8000dac <__aeabi_i2f>
 8003222:	4603      	mov	r3, r0
 8003224:	4619      	mov	r1, r3
 8003226:	4620      	mov	r0, r4
 8003228:	f7fd fe14 	bl	8000e54 <__aeabi_fmul>
 800322c:	4603      	mov	r3, r0
 800322e:	461d      	mov	r5, r3
 8003230:	4b7f      	ldr	r3, [pc, #508]	@ (8003430 <update_ahrs+0xc88>)
 8003232:	691c      	ldr	r4, [r3, #16]
 8003234:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 8003238:	4618      	mov	r0, r3
 800323a:	f7fd fdb7 	bl	8000dac <__aeabi_i2f>
 800323e:	4603      	mov	r3, r0
 8003240:	4619      	mov	r1, r3
 8003242:	4620      	mov	r0, r4
 8003244:	f7fd fe06 	bl	8000e54 <__aeabi_fmul>
 8003248:	4603      	mov	r3, r0
 800324a:	4619      	mov	r1, r3
 800324c:	4628      	mov	r0, r5
 800324e:	f7fd fcf9 	bl	8000c44 <__addsf3>
 8003252:	4603      	mov	r3, r0
 8003254:	461d      	mov	r5, r3
 8003256:	4b76      	ldr	r3, [pc, #472]	@ (8003430 <update_ahrs+0xc88>)
 8003258:	69dc      	ldr	r4, [r3, #28]
 800325a:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fda4 	bl	8000dac <__aeabi_i2f>
 8003264:	4603      	mov	r3, r0
 8003266:	4619      	mov	r1, r3
 8003268:	4620      	mov	r0, r4
 800326a:	f7fd fdf3 	bl	8000e54 <__aeabi_fmul>
 800326e:	4603      	mov	r3, r0
 8003270:	4619      	mov	r1, r3
 8003272:	4628      	mov	r0, r5
 8003274:	f7fd fce6 	bl	8000c44 <__addsf3>
 8003278:	4603      	mov	r3, r0
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd ffc6 	bl	800120c <__aeabi_f2iz>
 8003280:	4603      	mov	r3, r0
 8003282:	823b      	strh	r3, [r7, #16]
	int16_t acc_Eframez = dcm[0][2]*accx_ + dcm[1][2]*accy_ + dcm[2][2]*accz_;
 8003284:	4b6a      	ldr	r3, [pc, #424]	@ (8003430 <update_ahrs+0xc88>)
 8003286:	689c      	ldr	r4, [r3, #8]
 8003288:	f9b7 3000 	ldrsh.w	r3, [r7]
 800328c:	4618      	mov	r0, r3
 800328e:	f7fd fd8d 	bl	8000dac <__aeabi_i2f>
 8003292:	4603      	mov	r3, r0
 8003294:	4619      	mov	r1, r3
 8003296:	4620      	mov	r0, r4
 8003298:	f7fd fddc 	bl	8000e54 <__aeabi_fmul>
 800329c:	4603      	mov	r3, r0
 800329e:	461d      	mov	r5, r3
 80032a0:	4b63      	ldr	r3, [pc, #396]	@ (8003430 <update_ahrs+0xc88>)
 80032a2:	695c      	ldr	r4, [r3, #20]
 80032a4:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd fd7f 	bl	8000dac <__aeabi_i2f>
 80032ae:	4603      	mov	r3, r0
 80032b0:	4619      	mov	r1, r3
 80032b2:	4620      	mov	r0, r4
 80032b4:	f7fd fdce 	bl	8000e54 <__aeabi_fmul>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4619      	mov	r1, r3
 80032bc:	4628      	mov	r0, r5
 80032be:	f7fd fcc1 	bl	8000c44 <__addsf3>
 80032c2:	4603      	mov	r3, r0
 80032c4:	461d      	mov	r5, r3
 80032c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003430 <update_ahrs+0xc88>)
 80032c8:	6a1c      	ldr	r4, [r3, #32]
 80032ca:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd fd6c 	bl	8000dac <__aeabi_i2f>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4619      	mov	r1, r3
 80032d8:	4620      	mov	r0, r4
 80032da:	f7fd fdbb 	bl	8000e54 <__aeabi_fmul>
 80032de:	4603      	mov	r3, r0
 80032e0:	4619      	mov	r1, r3
 80032e2:	4628      	mov	r0, r5
 80032e4:	f7fd fcae 	bl	8000c44 <__addsf3>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd ff8e 	bl	800120c <__aeabi_f2iz>
 80032f0:	4603      	mov	r3, r0
 80032f2:	81fb      	strh	r3, [r7, #14]
	acc_Eframez -= 2000;
 80032f4:	89fb      	ldrh	r3, [r7, #14]
 80032f6:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	81fb      	strh	r3, [r7, #14]


	const float accTrueScale = 9.81f/2000.0f; // 2048
 80032fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003434 <update_ahrs+0xc8c>)
 8003300:	60bb      	str	r3, [r7, #8]
	acc_Eframe[X] = acc_Eframex*accTrueScale;
 8003302:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd fd50 	bl	8000dac <__aeabi_i2f>
 800330c:	4603      	mov	r3, r0
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd fd9f 	bl	8000e54 <__aeabi_fmul>
 8003316:	4603      	mov	r3, r0
 8003318:	461a      	mov	r2, r3
 800331a:	4b47      	ldr	r3, [pc, #284]	@ (8003438 <update_ahrs+0xc90>)
 800331c:	601a      	str	r2, [r3, #0]
	acc_Eframe[Y] = acc_Eframey*accTrueScale;
 800331e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd fd42 	bl	8000dac <__aeabi_i2f>
 8003328:	4603      	mov	r3, r0
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd fd91 	bl	8000e54 <__aeabi_fmul>
 8003332:	4603      	mov	r3, r0
 8003334:	461a      	mov	r2, r3
 8003336:	4b40      	ldr	r3, [pc, #256]	@ (8003438 <update_ahrs+0xc90>)
 8003338:	605a      	str	r2, [r3, #4]
	acc_Eframe[Z] = acc_Eframez*accTrueScale;
 800333a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd fd34 	bl	8000dac <__aeabi_i2f>
 8003344:	4603      	mov	r3, r0
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd fd83 	bl	8000e54 <__aeabi_fmul>
 800334e:	4603      	mov	r3, r0
 8003350:	461a      	mov	r2, r3
 8003352:	4b39      	ldr	r3, [pc, #228]	@ (8003438 <update_ahrs+0xc90>)
 8003354:	609a      	str	r2, [r3, #8]

	acc_Eframe[X] = fapplyDeadband(acc_Eframe[X],0.02);
 8003356:	4b38      	ldr	r3, [pc, #224]	@ (8003438 <update_ahrs+0xc90>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4938      	ldr	r1, [pc, #224]	@ (800343c <update_ahrs+0xc94>)
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fa47 	bl	80037f0 <fapplyDeadband>
 8003362:	4603      	mov	r3, r0
 8003364:	4a34      	ldr	r2, [pc, #208]	@ (8003438 <update_ahrs+0xc90>)
 8003366:	6013      	str	r3, [r2, #0]
	acc_Eframe[Y] = fapplyDeadband(acc_Eframe[Y],0.02);
 8003368:	4b33      	ldr	r3, [pc, #204]	@ (8003438 <update_ahrs+0xc90>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4933      	ldr	r1, [pc, #204]	@ (800343c <update_ahrs+0xc94>)
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fa3e 	bl	80037f0 <fapplyDeadband>
 8003374:	4603      	mov	r3, r0
 8003376:	4a30      	ldr	r2, [pc, #192]	@ (8003438 <update_ahrs+0xc90>)
 8003378:	6053      	str	r3, [r2, #4]
	acc_Eframe[Z] = fapplyDeadband(acc_Eframe[Z],0.02);
 800337a:	4b2f      	ldr	r3, [pc, #188]	@ (8003438 <update_ahrs+0xc90>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	492f      	ldr	r1, [pc, #188]	@ (800343c <update_ahrs+0xc94>)
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fa35 	bl	80037f0 <fapplyDeadband>
 8003386:	4603      	mov	r3, r0
 8003388:	4a2b      	ldr	r2, [pc, #172]	@ (8003438 <update_ahrs+0xc90>)
 800338a:	6093      	str	r3, [r2, #8]

    if(millis() - init_us < 5000){
 800338c:	4b2c      	ldr	r3, [pc, #176]	@ (8003440 <update_ahrs+0xc98>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003394:	4b2b      	ldr	r3, [pc, #172]	@ (8003444 <update_ahrs+0xc9c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4413      	add	r3, r2
 800339a:	4a2b      	ldr	r2, [pc, #172]	@ (8003448 <update_ahrs+0xca0>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	099a      	lsrs	r2, r3, #6
 80033a2:	4b2a      	ldr	r3, [pc, #168]	@ (800344c <update_ahrs+0xca4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d80b      	bhi.n	80033c8 <update_ahrs+0xc20>
    	acc_Eframe[X] = 0;
 80033b0:	4b21      	ldr	r3, [pc, #132]	@ (8003438 <update_ahrs+0xc90>)
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
    	acc_Eframe[Y] = 0;
 80033b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003438 <update_ahrs+0xc90>)
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	605a      	str	r2, [r3, #4]
    	acc_Eframe[Z] = 0;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003438 <update_ahrs+0xc90>)
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]

	//position_test += velocity_test*0.01f + 0.5* acc_Eframe[Z]* 0.01f * 0.01f;

	//velocity_test += acc_Eframe[Z]*0.01f;

	AHRS.pitch = -atan2_approx(-dcm[0][2],sqrtf(1 - dcm[0][2]*dcm[0][2]))*DEG;
 80033c8:	4b19      	ldr	r3, [pc, #100]	@ (8003430 <update_ahrs+0xc88>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80033d0:	4b17      	ldr	r3, [pc, #92]	@ (8003430 <update_ahrs+0xc88>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	4a16      	ldr	r2, [pc, #88]	@ (8003430 <update_ahrs+0xc88>)
 80033d6:	6892      	ldr	r2, [r2, #8]
 80033d8:	4611      	mov	r1, r2
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd fd3a 	bl	8000e54 <__aeabi_fmul>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4619      	mov	r1, r3
 80033e4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80033e8:	f7fd fc2a 	bl	8000c40 <__aeabi_fsub>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f010 fdc4 	bl	8013f7c <sqrtf>
 80033f4:	4603      	mov	r3, r0
 80033f6:	4619      	mov	r1, r3
 80033f8:	4620      	mov	r0, r4
 80033fa:	f000 f939 	bl	8003670 <atan2_approx>
 80033fe:	4603      	mov	r3, r0
 8003400:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003404:	4912      	ldr	r1, [pc, #72]	@ (8003450 <update_ahrs+0xca8>)
 8003406:	4618      	mov	r0, r3
 8003408:	f7fd fd24 	bl	8000e54 <__aeabi_fmul>
 800340c:	4603      	mov	r3, r0
 800340e:	461a      	mov	r2, r3
 8003410:	4b10      	ldr	r3, [pc, #64]	@ (8003454 <update_ahrs+0xcac>)
 8003412:	605a      	str	r2, [r3, #4]
	AHRS.roll = -atan2_approx(-dcm[1][2],dcm[2][2])*DEG;
 8003414:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <update_ahrs+0xc88>)
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800341c:	4a04      	ldr	r2, [pc, #16]	@ (8003430 <update_ahrs+0xc88>)
 800341e:	6a12      	ldr	r2, [r2, #32]
 8003420:	4611      	mov	r1, r2
 8003422:	4618      	mov	r0, r3
 8003424:	f000 f924 	bl	8003670 <atan2_approx>
 8003428:	4603      	mov	r3, r0
 800342a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800342e:	e013      	b.n	8003458 <update_ahrs+0xcb0>
 8003430:	20000504 	.word	0x20000504
 8003434:	3ba0ba20 	.word	0x3ba0ba20
 8003438:	200004ec 	.word	0x200004ec
 800343c:	3ca3d70a 	.word	0x3ca3d70a
 8003440:	20000544 	.word	0x20000544
 8003444:	20000548 	.word	0x20000548
 8003448:	10624dd3 	.word	0x10624dd3
 800344c:	20000528 	.word	0x20000528
 8003450:	42652ee0 	.word	0x42652ee0
 8003454:	200004c8 	.word	0x200004c8
 8003458:	4932      	ldr	r1, [pc, #200]	@ (8003524 <update_ahrs+0xd7c>)
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd fcfa 	bl	8000e54 <__aeabi_fmul>
 8003460:	4603      	mov	r3, r0
 8003462:	461a      	mov	r2, r3
 8003464:	4b30      	ldr	r3, [pc, #192]	@ (8003528 <update_ahrs+0xd80>)
 8003466:	601a      	str	r2, [r3, #0]
	float yaw_ = -atan2_approx(dcm[0][1],dcm[0][0])*DEG;
 8003468:	4b30      	ldr	r3, [pc, #192]	@ (800352c <update_ahrs+0xd84>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4a2f      	ldr	r2, [pc, #188]	@ (800352c <update_ahrs+0xd84>)
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f8fc 	bl	8003670 <atan2_approx>
 8003478:	4603      	mov	r3, r0
 800347a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800347e:	4929      	ldr	r1, [pc, #164]	@ (8003524 <update_ahrs+0xd7c>)
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd fce7 	bl	8000e54 <__aeabi_fmul>
 8003486:	4603      	mov	r3, r0
 8003488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	if(yaw_ < 0){
 800348c:	f04f 0100 	mov.w	r1, #0
 8003490:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003494:	f7fd fe7c 	bl	8001190 <__aeabi_fcmplt>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <update_ahrs+0xd06>
		 yaw_ = 360 + yaw_;
 800349e:	4924      	ldr	r1, [pc, #144]	@ (8003530 <update_ahrs+0xd88>)
 80034a0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80034a4:	f7fd fbce 	bl	8000c44 <__addsf3>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	}
	AHRS.yaw =  yaw_;
 80034ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003528 <update_ahrs+0xd80>)
 80034b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034b4:	6093      	str	r3, [r2, #8]
	AHRS.roll_rate  = gx_/config.gyr_lsb;
 80034b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd fc76 	bl	8000dac <__aeabi_i2f>
 80034c0:	4602      	mov	r2, r0
 80034c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003534 <update_ahrs+0xd8c>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	4619      	mov	r1, r3
 80034c8:	4610      	mov	r0, r2
 80034ca:	f7fd fd77 	bl	8000fbc <__aeabi_fdiv>
 80034ce:	4603      	mov	r3, r0
 80034d0:	461a      	mov	r2, r3
 80034d2:	4b15      	ldr	r3, [pc, #84]	@ (8003528 <update_ahrs+0xd80>)
 80034d4:	60da      	str	r2, [r3, #12]
	AHRS.pitch_rate = -gy_/config.gyr_lsb;
 80034d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034da:	425b      	negs	r3, r3
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd fc65 	bl	8000dac <__aeabi_i2f>
 80034e2:	4602      	mov	r2, r0
 80034e4:	4b13      	ldr	r3, [pc, #76]	@ (8003534 <update_ahrs+0xd8c>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4619      	mov	r1, r3
 80034ea:	4610      	mov	r0, r2
 80034ec:	f7fd fd66 	bl	8000fbc <__aeabi_fdiv>
 80034f0:	4603      	mov	r3, r0
 80034f2:	461a      	mov	r2, r3
 80034f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <update_ahrs+0xd80>)
 80034f6:	611a      	str	r2, [r3, #16]
	AHRS.yaw_rate   = -gz_/config.gyr_lsb;
 80034f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034fc:	425b      	negs	r3, r3
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fd fc54 	bl	8000dac <__aeabi_i2f>
 8003504:	4602      	mov	r2, r0
 8003506:	4b0b      	ldr	r3, [pc, #44]	@ (8003534 <update_ahrs+0xd8c>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f7fd fd55 	bl	8000fbc <__aeabi_fdiv>
 8003512:	4603      	mov	r3, r0
 8003514:	461a      	mov	r2, r3
 8003516:	4b04      	ldr	r3, [pc, #16]	@ (8003528 <update_ahrs+0xd80>)
 8003518:	615a      	str	r2, [r3, #20]

}
 800351a:	bf00      	nop
 800351c:	3798      	adds	r7, #152	@ 0x98
 800351e:	46bd      	mov	sp, r7
 8003520:	bdb0      	pop	{r4, r5, r7, pc}
 8003522:	bf00      	nop
 8003524:	42652ee0 	.word	0x42652ee0
 8003528:	200004c8 	.word	0x200004c8
 800352c:	20000504 	.word	0x20000504
 8003530:	43b40000 	.word	0x43b40000
 8003534:	20000018 	.word	0x20000018

08003538 <sin_approx>:
#define sinPolyCoef5  8.333017292e-3f                                          // Double:  8.333017291562218127986291618761571373087e-3
#define sinPolyCoef7 -1.980661520e-4f                                          // Double: -1.980661520135080504411629636078917643846e-4
#define sinPolyCoef9  2.600054768e-6f                                          // Double:  2.600054767890361277123254766503271638682e-6
#endif
float sin_approx(float x)
{
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
    int32_t xint = x;
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7fd fe63 	bl	800120c <__aeabi_f2iz>
 8003546:	4603      	mov	r3, r0
 8003548:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f113 0f20 	cmn.w	r3, #32
 8003550:	db02      	blt.n	8003558 <sin_approx+0x20>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b20      	cmp	r3, #32
 8003556:	dd08      	ble.n	800356a <sin_approx+0x32>
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	e074      	b.n	8003648 <sin_approx+0x110>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 800355e:	493c      	ldr	r1, [pc, #240]	@ (8003650 <sin_approx+0x118>)
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7fd fb6d 	bl	8000c40 <__aeabi_fsub>
 8003566:	4603      	mov	r3, r0
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	493a      	ldr	r1, [pc, #232]	@ (8003654 <sin_approx+0x11c>)
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7fd fe2d 	bl	80011cc <__aeabi_fcmpgt>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f2      	bne.n	800355e <sin_approx+0x26>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 8003578:	e005      	b.n	8003586 <sin_approx+0x4e>
 800357a:	4935      	ldr	r1, [pc, #212]	@ (8003650 <sin_approx+0x118>)
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7fd fb61 	bl	8000c44 <__addsf3>
 8003582:	4603      	mov	r3, r0
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	4934      	ldr	r1, [pc, #208]	@ (8003658 <sin_approx+0x120>)
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7fd fe01 	bl	8001190 <__aeabi_fcmplt>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f2      	bne.n	800357a <sin_approx+0x42>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 8003594:	4931      	ldr	r1, [pc, #196]	@ (800365c <sin_approx+0x124>)
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fe18 	bl	80011cc <__aeabi_fcmpgt>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00b      	beq.n	80035ba <sin_approx+0x82>
 80035a2:	492e      	ldr	r1, [pc, #184]	@ (800365c <sin_approx+0x124>)
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd fb4b 	bl	8000c40 <__aeabi_fsub>
 80035aa:	4603      	mov	r3, r0
 80035ac:	4619      	mov	r1, r3
 80035ae:	482b      	ldr	r0, [pc, #172]	@ (800365c <sin_approx+0x124>)
 80035b0:	f7fd fb46 	bl	8000c40 <__aeabi_fsub>
 80035b4:	4603      	mov	r3, r0
 80035b6:	607b      	str	r3, [r7, #4]
 80035b8:	e011      	b.n	80035de <sin_approx+0xa6>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 80035ba:	4929      	ldr	r1, [pc, #164]	@ (8003660 <sin_approx+0x128>)
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7fd fde7 	bl	8001190 <__aeabi_fcmplt>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <sin_approx+0xa6>
 80035c8:	4924      	ldr	r1, [pc, #144]	@ (800365c <sin_approx+0x124>)
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fb3a 	bl	8000c44 <__addsf3>
 80035d0:	4603      	mov	r3, r0
 80035d2:	4619      	mov	r1, r3
 80035d4:	4822      	ldr	r0, [pc, #136]	@ (8003660 <sin_approx+0x128>)
 80035d6:	f7fd fb33 	bl	8000c40 <__aeabi_fsub>
 80035da:	4603      	mov	r3, r0
 80035dc:	607b      	str	r3, [r7, #4]
    float x2 = x * x;
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7fd fc37 	bl	8000e54 <__aeabi_fmul>
 80035e6:	4603      	mov	r3, r0
 80035e8:	60bb      	str	r3, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7fd fc31 	bl	8000e54 <__aeabi_fmul>
 80035f2:	4603      	mov	r3, r0
 80035f4:	461c      	mov	r4, r3
 80035f6:	f04f 0100 	mov.w	r1, #0
 80035fa:	68b8      	ldr	r0, [r7, #8]
 80035fc:	f7fd fc2a 	bl	8000e54 <__aeabi_fmul>
 8003600:	4603      	mov	r3, r0
 8003602:	4918      	ldr	r1, [pc, #96]	@ (8003664 <sin_approx+0x12c>)
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd fb1b 	bl	8000c40 <__aeabi_fsub>
 800360a:	4603      	mov	r3, r0
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd fc20 	bl	8000e54 <__aeabi_fmul>
 8003614:	4603      	mov	r3, r0
 8003616:	4914      	ldr	r1, [pc, #80]	@ (8003668 <sin_approx+0x130>)
 8003618:	4618      	mov	r0, r3
 800361a:	f7fd fb13 	bl	8000c44 <__addsf3>
 800361e:	4603      	mov	r3, r0
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fd fc16 	bl	8000e54 <__aeabi_fmul>
 8003628:	4603      	mov	r3, r0
 800362a:	4910      	ldr	r1, [pc, #64]	@ (800366c <sin_approx+0x134>)
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd fb07 	bl	8000c40 <__aeabi_fsub>
 8003632:	4603      	mov	r3, r0
 8003634:	4619      	mov	r1, r3
 8003636:	4620      	mov	r0, r4
 8003638:	f7fd fc0c 	bl	8000e54 <__aeabi_fmul>
 800363c:	4603      	mov	r3, r0
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4618      	mov	r0, r3
 8003642:	f7fd faff 	bl	8000c44 <__addsf3>
 8003646:	4603      	mov	r3, r0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	bd90      	pop	{r4, r7, pc}
 8003650:	40c90fdb 	.word	0x40c90fdb
 8003654:	40490fdb 	.word	0x40490fdb
 8003658:	c0490fdb 	.word	0xc0490fdb
 800365c:	3fc90fdb 	.word	0x3fc90fdb
 8003660:	bfc90fdb 	.word	0xbfc90fdb
 8003664:	3941e792 	.word	0x3941e792
 8003668:	3c083097 	.word	0x3c083097
 800366c:	3e2aa815 	.word	0x3e2aa815

08003670 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b08b      	sub	sp, #44	@ 0x2c
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003680:	623b      	str	r3, [r7, #32]
    absY = fabsf(y);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003688:	61fb      	str	r3, [r7, #28]
    res  = MAX(absX, absY);
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	6979      	ldr	r1, [r7, #20]
 8003694:	69b8      	ldr	r0, [r7, #24]
 8003696:	f7fd fd99 	bl	80011cc <__aeabi_fcmpgt>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <atan2_approx+0x34>
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	e000      	b.n	80036a6 <atan2_approx+0x36>
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (res) res = MIN(absX, absY) / res;
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036ae:	f7fd fd65 	bl	800117c <__aeabi_fcmpeq>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d114      	bne.n	80036e2 <atan2_approx+0x72>
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68f9      	ldr	r1, [r7, #12]
 80036c2:	6938      	ldr	r0, [r7, #16]
 80036c4:	f7fd fd64 	bl	8001190 <__aeabi_fcmplt>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <atan2_approx+0x62>
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	e000      	b.n	80036d4 <atan2_approx+0x64>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd fc70 	bl	8000fbc <__aeabi_fdiv>
 80036dc:	4603      	mov	r3, r0
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
 80036e0:	e002      	b.n	80036e8 <atan2_approx+0x78>
    else res = 0.0f;
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	627b      	str	r3, [r7, #36]	@ 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 80036e8:	4938      	ldr	r1, [pc, #224]	@ (80037cc <atan2_approx+0x15c>)
 80036ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036ec:	f7fd fbb2 	bl	8000e54 <__aeabi_fmul>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4937      	ldr	r1, [pc, #220]	@ (80037d0 <atan2_approx+0x160>)
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fd faa3 	bl	8000c40 <__aeabi_fsub>
 80036fa:	4603      	mov	r3, r0
 80036fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fd fba8 	bl	8000e54 <__aeabi_fmul>
 8003704:	4603      	mov	r3, r0
 8003706:	4933      	ldr	r1, [pc, #204]	@ (80037d4 <atan2_approx+0x164>)
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd fa99 	bl	8000c40 <__aeabi_fsub>
 800370e:	4603      	mov	r3, r0
 8003710:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd fb9e 	bl	8000e54 <__aeabi_fmul>
 8003718:	4603      	mov	r3, r0
 800371a:	492f      	ldr	r1, [pc, #188]	@ (80037d8 <atan2_approx+0x168>)
 800371c:	4618      	mov	r0, r3
 800371e:	f7fd fa8f 	bl	8000c40 <__aeabi_fsub>
 8003722:	4603      	mov	r3, r0
 8003724:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd fb94 	bl	8000e54 <__aeabi_fmul>
 800372c:	4603      	mov	r3, r0
 800372e:	492b      	ldr	r1, [pc, #172]	@ (80037dc <atan2_approx+0x16c>)
 8003730:	4618      	mov	r0, r3
 8003732:	f7fd fa85 	bl	8000c40 <__aeabi_fsub>
 8003736:	4603      	mov	r3, r0
 8003738:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 800373c:	4928      	ldr	r1, [pc, #160]	@ (80037e0 <atan2_approx+0x170>)
 800373e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003740:	f7fd fb88 	bl	8000e54 <__aeabi_fmul>
 8003744:	4603      	mov	r3, r0
 8003746:	4927      	ldr	r1, [pc, #156]	@ (80037e4 <atan2_approx+0x174>)
 8003748:	4618      	mov	r0, r3
 800374a:	f7fd fa7b 	bl	8000c44 <__addsf3>
 800374e:	4603      	mov	r3, r0
 8003750:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003752:	4618      	mov	r0, r3
 8003754:	f7fd fb7e 	bl	8000e54 <__aeabi_fmul>
 8003758:	4603      	mov	r3, r0
 800375a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800375e:	4618      	mov	r0, r3
 8003760:	f7fd fa70 	bl	8000c44 <__addsf3>
 8003764:	4603      	mov	r3, r0
 8003766:	4619      	mov	r1, r3
 8003768:	4620      	mov	r0, r4
 800376a:	f7fd fc27 	bl	8000fbc <__aeabi_fdiv>
 800376e:	4603      	mov	r3, r0
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8003772:	6a39      	ldr	r1, [r7, #32]
 8003774:	69f8      	ldr	r0, [r7, #28]
 8003776:	f7fd fd29 	bl	80011cc <__aeabi_fcmpgt>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <atan2_approx+0x11c>
 8003780:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003782:	4819      	ldr	r0, [pc, #100]	@ (80037e8 <atan2_approx+0x178>)
 8003784:	f7fd fa5c 	bl	8000c40 <__aeabi_fsub>
 8003788:	4603      	mov	r3, r0
 800378a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (x < 0) res = M_PIf - res;
 800378c:	f04f 0100 	mov.w	r1, #0
 8003790:	6838      	ldr	r0, [r7, #0]
 8003792:	f7fd fcfd 	bl	8001190 <__aeabi_fcmplt>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <atan2_approx+0x138>
 800379c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800379e:	4813      	ldr	r0, [pc, #76]	@ (80037ec <atan2_approx+0x17c>)
 80037a0:	f7fd fa4e 	bl	8000c40 <__aeabi_fsub>
 80037a4:	4603      	mov	r3, r0
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) res = -res;
 80037a8:	f04f 0100 	mov.w	r1, #0
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7fd fcef 	bl	8001190 <__aeabi_fcmplt>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <atan2_approx+0x150>
 80037b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ba:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
    return res;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	372c      	adds	r7, #44	@ 0x2c
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd90      	pop	{r4, r7, pc}
 80037ca:	bf00      	nop
 80037cc:	3d4e0939 	.word	0x3d4e0939
 80037d0:	3e9eb5e3 	.word	0x3e9eb5e3
 80037d4:	3e16fa88 	.word	0x3e16fa88
 80037d8:	3f7ffe45 	.word	0x3f7ffe45
 80037dc:	34a8dfa7 	.word	0x34a8dfa7
 80037e0:	3f24fb99 	.word	0x3f24fb99
 80037e4:	3e16a269 	.word	0x3e16a269
 80037e8:	3fc90fdb 	.word	0x3fc90fdb
 80037ec:	40490fdb 	.word	0x40490fdb

080037f0 <fapplyDeadband>:

    return value >= 0 ? value - deadband : value + deadband;
}

float fapplyDeadband(const float value, const float deadband)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
    if (fabsf(value) < deadband) {
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003800:	4619      	mov	r1, r3
 8003802:	6838      	ldr	r0, [r7, #0]
 8003804:	f7fd fce2 	bl	80011cc <__aeabi_fcmpgt>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <fapplyDeadband+0x24>
        return 0;
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	e012      	b.n	800383a <fapplyDeadband+0x4a>
    }

    return value >= 0 ? value - deadband : value + deadband;
 8003814:	f04f 0100 	mov.w	r1, #0
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7fd fccd 	bl	80011b8 <__aeabi_fcmpge>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <fapplyDeadband+0x40>
 8003824:	6839      	ldr	r1, [r7, #0]
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd fa0a 	bl	8000c40 <__aeabi_fsub>
 800382c:	4603      	mov	r3, r0
 800382e:	e004      	b.n	800383a <fapplyDeadband+0x4a>
 8003830:	6839      	ldr	r1, [r7, #0]
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd fa06 	bl	8000c44 <__addsf3>
 8003838:	4603      	mov	r3, r0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <invSqrt_>:
    return (num << 12) / den;
}


float invSqrt_(float x)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 800384c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7fd faff 	bl	8000e54 <__aeabi_fmul>
 8003856:	4603      	mov	r3, r0
 8003858:	617b      	str	r3, [r7, #20]
	float y = x;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800385e:	f107 0310 	add.w	r3, r7, #16
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	105a      	asrs	r2, r3, #1
 800386a:	4b13      	ldr	r3, [pc, #76]	@ (80038b8 <invSqrt_+0x74>)
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8003870:	f107 030c 	add.w	r3, r7, #12
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	6979      	ldr	r1, [r7, #20]
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd fae9 	bl	8000e54 <__aeabi_fmul>
 8003882:	4603      	mov	r3, r0
 8003884:	461a      	mov	r2, r3
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4619      	mov	r1, r3
 800388a:	4610      	mov	r0, r2
 800388c:	f7fd fae2 	bl	8000e54 <__aeabi_fmul>
 8003890:	4603      	mov	r3, r0
 8003892:	4619      	mov	r1, r3
 8003894:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8003898:	f7fd f9d2 	bl	8000c40 <__aeabi_fsub>
 800389c:	4603      	mov	r3, r0
 800389e:	461a      	mov	r2, r3
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4619      	mov	r1, r3
 80038a4:	4610      	mov	r0, r2
 80038a6:	f7fd fad5 	bl	8000e54 <__aeabi_fmul>
 80038aa:	4603      	mov	r3, r0
 80038ac:	613b      	str	r3, [r7, #16]
	//y = y * (1.5f - (halfx * y * y));
	return y;
 80038ae:	693b      	ldr	r3, [r7, #16]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	5f3759df 	.word	0x5f3759df

080038bc <constrainf>:
    else
        return amt;
}

static inline float constrainf(float amt, float low, float high)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7fd fc60 	bl	8001190 <__aeabi_fcmplt>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <constrainf+0x1e>
        return low;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	e009      	b.n	80038ee <constrainf+0x32>
    else if (amt > high)
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f7fd fc75 	bl	80011cc <__aeabi_fcmpgt>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <constrainf+0x30>
        return high;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	e000      	b.n	80038ee <constrainf+0x32>
    else
        return amt;
 80038ec:	68fb      	ldr	r3, [r7, #12]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <pid_init>:
#include "string.h"

#define usTosec(x)    (x *(1e-06f))
#define MAX_WAIT_TIME 500000

void pid_init(pid_t  *pid_in,float kp, float ki, float kd, float f_cut_D, float maxI){
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	603b      	str	r3, [r7, #0]
  memset(pid_in,0,sizeof(pid_t));
 8003904:	2224      	movs	r2, #36	@ 0x24
 8003906:	2100      	movs	r1, #0
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f010 fac1 	bl	8013e90 <memset>
  pid_in->kp = kp;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	601a      	str	r2, [r3, #0]
  pid_in->ki = ki;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	605a      	str	r2, [r3, #4]
  pid_in->kd = kd;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	609a      	str	r2, [r3, #8]
  pid_in->f_cut_D = f_cut_D;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	61da      	str	r2, [r3, #28]
  pid_in->I_range = maxI;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	619a      	str	r2, [r3, #24]
  pid_in->last_input = 0;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	611a      	str	r2, [r3, #16]
  pid_in->D_filted = 0;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	615a      	str	r2, [r3, #20]
  pid_in->init = 1;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <pid_calculate>:

float pid_calculate(pid_t *pid_in,float input, float setpoint,float scaler,float dt){
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b08b      	sub	sp, #44	@ 0x2c
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
   if(pid_in->init){
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d009      	beq.n	8003978 <pid_calculate+0x2c>
       pid_in->last_input = input;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	611a      	str	r2, [r3, #16]
       pid_in->init = 0;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2020 	strb.w	r2, [r3, #32]
       return 0.0f;
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	e0a8      	b.n	8003aca <pid_calculate+0x17e>
   }

   float error = setpoint - input;
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fd f960 	bl	8000c40 <__aeabi_fsub>
 8003980:	4603      	mov	r3, r0
 8003982:	623b      	str	r3, [r7, #32]
   float output = error*pid_in->kp*scaler;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6a39      	ldr	r1, [r7, #32]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd fa62 	bl	8000e54 <__aeabi_fmul>
 8003990:	4603      	mov	r3, r0
 8003992:	4619      	mov	r1, r3
 8003994:	6838      	ldr	r0, [r7, #0]
 8003996:	f7fd fa5d 	bl	8000e54 <__aeabi_fmul>
 800399a:	4603      	mov	r3, r0
 800399c:	627b      	str	r3, [r7, #36]	@ 0x24

   if(pid_in->ki > 0){
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f04f 0100 	mov.w	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fd fc10 	bl	80011cc <__aeabi_fcmpgt>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d02b      	beq.n	8003a0a <pid_calculate+0xbe>
      pid_in->i_term += error *pid_in->ki *dt;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	68dc      	ldr	r4, [r3, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	6a39      	ldr	r1, [r7, #32]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fd fa49 	bl	8000e54 <__aeabi_fmul>
 80039c2:	4603      	mov	r3, r0
 80039c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fd fa44 	bl	8000e54 <__aeabi_fmul>
 80039cc:	4603      	mov	r3, r0
 80039ce:	4619      	mov	r1, r3
 80039d0:	4620      	mov	r0, r4
 80039d2:	f7fd f937 	bl	8000c44 <__addsf3>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461a      	mov	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	60da      	str	r2, [r3, #12]
      pid_in->i_term = constrainf(pid_in->i_term,-pid_in->I_range,pid_in->I_range);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	68d8      	ldr	r0, [r3, #12]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f7ff ff64 	bl	80038bc <constrainf>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	60da      	str	r2, [r3, #12]
      output += pid_in->i_term;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	4619      	mov	r1, r3
 8003a00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a02:	f7fd f91f 	bl	8000c44 <__addsf3>
 8003a06:	4603      	mov	r3, r0
 8003a08:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   if(pid_in->kd > 0){
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f04f 0100 	mov.w	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd fbda 	bl	80011cc <__aeabi_fcmpgt>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d054      	beq.n	8003ac8 <pid_calculate+0x17c>
        // low pass filter
        float RC = 1.0f / (2 *M_PIf *pid_in->f_cut_D);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	492c      	ldr	r1, [pc, #176]	@ (8003ad4 <pid_calculate+0x188>)
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fd fa15 	bl	8000e54 <__aeabi_fmul>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003a32:	f7fd fac3 	bl	8000fbc <__aeabi_fdiv>
 8003a36:	4603      	mov	r3, r0
 8003a38:	61fb      	str	r3, [r7, #28]
        float gain_lpf = dt/(RC + dt);
 8003a3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a3c:	69f8      	ldr	r0, [r7, #28]
 8003a3e:	f7fd f901 	bl	8000c44 <__addsf3>
 8003a42:	4603      	mov	r3, r0
 8003a44:	4619      	mov	r1, r3
 8003a46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003a48:	f7fd fab8 	bl	8000fbc <__aeabi_fdiv>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	61bb      	str	r3, [r7, #24]
        float delta =  (input - pid_in->last_input)*pid_in->kd;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	4619      	mov	r1, r3
 8003a56:	68b8      	ldr	r0, [r7, #8]
 8003a58:	f7fd f8f2 	bl	8000c40 <__aeabi_fsub>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f7fd f9f4 	bl	8000e54 <__aeabi_fmul>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	617b      	str	r3, [r7, #20]
        pid_in->last_input = input;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	611a      	str	r2, [r3, #16]
        delta /= dt;
 8003a76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a78:	6978      	ldr	r0, [r7, #20]
 8003a7a:	f7fd fa9f 	bl	8000fbc <__aeabi_fdiv>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	617b      	str	r3, [r7, #20]
        pid_in->D_filted += gain_lpf*(delta - pid_in->D_filted);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	695c      	ldr	r4, [r3, #20]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	6978      	ldr	r0, [r7, #20]
 8003a8e:	f7fd f8d7 	bl	8000c40 <__aeabi_fsub>
 8003a92:	4603      	mov	r3, r0
 8003a94:	69b9      	ldr	r1, [r7, #24]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fd f9dc 	bl	8000e54 <__aeabi_fmul>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f7fd f8cf 	bl	8000c44 <__addsf3>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	615a      	str	r2, [r3, #20]
        output -= pid_in->D_filted*scaler;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	6839      	ldr	r1, [r7, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fd f9cd 	bl	8000e54 <__aeabi_fmul>
 8003aba:	4603      	mov	r3, r0
 8003abc:	4619      	mov	r1, r3
 8003abe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ac0:	f7fd f8be 	bl	8000c40 <__aeabi_fsub>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   return output;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	372c      	adds	r7, #44	@ 0x2c
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd90      	pop	{r4, r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40c90fdb 	.word	0x40c90fdb

08003ad8 <constrain>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	da01      	bge.n	8003af0 <constrain+0x18>
        return low;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	e006      	b.n	8003afe <constrain+0x26>
    else if (amt > high)
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	dd01      	ble.n	8003afc <constrain+0x24>
        return high;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	e000      	b.n	8003afe <constrain+0x26>
        return amt;
 8003afc:	68fb      	ldr	r3, [r7, #12]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <initPWM>:
uint8_t pwm_lock_status;

/*
 * init pwm 
 */
void initPWM(TIM_HandleTypeDef *htim){
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	htimm = htim;
 8003b10:	4a1c      	ldr	r2, [pc, #112]	@ (8003b84 <initPWM+0x7c>)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6013      	str	r3, [r2, #0]
	pr_status = 1;
 8003b16:	4b1c      	ldr	r3, [pc, #112]	@ (8003b88 <initPWM+0x80>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	701a      	strb	r2, [r3, #0]
	pwm_lock_status = 0;
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b8c <initPWM+0x84>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]
	pwm_last_update_ms= 0;
 8003b22:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <initPWM+0x88>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch1);
 8003b28:	2100      	movs	r1, #0
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f007 f992 	bl	800ae54 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch2);
 8003b30:	2104      	movs	r1, #4
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f007 f98e 	bl	800ae54 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch3);
 8003b38:	2108      	movs	r1, #8
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f007 f98a 	bl	800ae54 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim,ch4);
	__HAL_TIM_SetAutoreload(htimm,PWM_RELOAD_AFFTER);
 8003b40:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <initPWM+0x7c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b84 <initPWM+0x7c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b54:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SetCompare (htimm,ch1,1000);
 8003b56:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <initPWM+0x7c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b60:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare (htimm,ch2,1500);
 8003b62:	4b08      	ldr	r3, [pc, #32]	@ (8003b84 <initPWM+0x7c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003b6c:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare (htimm,ch3,1500);
 8003b6e:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <initPWM+0x7c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003b78:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000538 	.word	0x20000538
 8003b88:	20000540 	.word	0x20000540
 8003b8c:	20000541 	.word	0x20000541
 8003b90:	2000053c 	.word	0x2000053c

08003b94 <writePwm>:


void writePwm(uint32_t Channel,int16_t dulty,int8_t invert)
{     if( invert){
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	707b      	strb	r3, [r7, #1]
 8003ba4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <writePwm+0x2c>
	    dulty -= 1000;
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	807b      	strh	r3, [r7, #2]
	    dulty  = 2000 - dulty; 
 8003bb6:	887b      	ldrh	r3, [r7, #2]
 8003bb8:	f5c3 63fa 	rsb	r3, r3, #2000	@ 0x7d0
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	807b      	strh	r3, [r7, #2]
      }
	  dulty = constrain(dulty,1000,2000);
 8003bc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bc4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003bc8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff ff83 	bl	8003ad8 <constrain>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <writePwm+0x56>
 8003bdc:	4b12      	ldr	r3, [pc, #72]	@ (8003c28 <writePwm+0x94>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003be6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003be8:	e019      	b.n	8003c1e <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d106      	bne.n	8003bfe <writePwm+0x6a>
 8003bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8003c28 <writePwm+0x94>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bfa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003bfc:	e00f      	b.n	8003c1e <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d106      	bne.n	8003c12 <writePwm+0x7e>
 8003c04:	4b08      	ldr	r3, [pc, #32]	@ (8003c28 <writePwm+0x94>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c0e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003c10:	e005      	b.n	8003c1e <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003c12:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <writePwm+0x94>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c1c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000538 	.word	0x20000538

08003c2c <write_pwm_ctrl>:

void write_pwm_ctrl(uint16_t throtlle,uint16_t servoL,uint16_t servoR){
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	80fb      	strh	r3, [r7, #6]
 8003c36:	460b      	mov	r3, r1
 8003c38:	80bb      	strh	r3, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	807b      	strh	r3, [r7, #2]
      if(pr_status || pwm_lock_status){
 8003c3e:	4b17      	ldr	r3, [pc, #92]	@ (8003c9c <write_pwm_ctrl+0x70>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d103      	bne.n	8003c4e <write_pwm_ctrl+0x22>
 8003c46:	4b16      	ldr	r3, [pc, #88]	@ (8003ca0 <write_pwm_ctrl+0x74>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <write_pwm_ctrl+0x34>
           pwm_last_update_ms = HAL_GetTick();
 8003c4e:	f002 fe81 	bl	8006954 <HAL_GetTick>
 8003c52:	4603      	mov	r3, r0
 8003c54:	4a13      	ldr	r2, [pc, #76]	@ (8003ca4 <write_pwm_ctrl+0x78>)
 8003c56:	6013      	str	r3, [r2, #0]
		   pr_status = 0;
 8003c58:	4b10      	ldr	r3, [pc, #64]	@ (8003c9c <write_pwm_ctrl+0x70>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	701a      	strb	r2, [r3, #0]
		   return;
 8003c5e:	e019      	b.n	8003c94 <write_pwm_ctrl+0x68>
	  }
	 writePwm(TIM_CHANNEL_1,throtlle,INVERT);
 8003c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c64:	2201      	movs	r2, #1
 8003c66:	4619      	mov	r1, r3
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f7ff ff93 	bl	8003b94 <writePwm>
     writePwm(TIM_CHANNEL_2,servoL,INVERT);
 8003c6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	4619      	mov	r1, r3
 8003c76:	2004      	movs	r0, #4
 8003c78:	f7ff ff8c 	bl	8003b94 <writePwm>
     writePwm(TIM_CHANNEL_3,servoR,NOT_INVERT);
 8003c7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c80:	2200      	movs	r2, #0
 8003c82:	4619      	mov	r1, r3
 8003c84:	2008      	movs	r0, #8
 8003c86:	f7ff ff85 	bl	8003b94 <writePwm>
	pwm_last_update_ms = HAL_GetTick();
 8003c8a:	f002 fe63 	bl	8006954 <HAL_GetTick>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4a04      	ldr	r2, [pc, #16]	@ (8003ca4 <write_pwm_ctrl+0x78>)
 8003c92:	6013      	str	r3, [r2, #0]
}
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000540 	.word	0x20000540
 8003ca0:	20000541 	.word	0x20000541
 8003ca4:	2000053c 	.word	0x2000053c

08003ca8 <timer_start>:
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}

void timer_start(TIM_HandleTypeDef *htimz){
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	htimmz = htimz;
 8003cb0:	4a05      	ldr	r2, [pc, #20]	@ (8003cc8 <timer_start+0x20>)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htimmz);
 8003cb6:	4b04      	ldr	r3, [pc, #16]	@ (8003cc8 <timer_start+0x20>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f007 f812 	bl	800ace4 <HAL_TIM_Base_Start_IT>
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000544 	.word	0x20000544

08003ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003d04 <MX_DMA_Init+0x38>)
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	4a0b      	ldr	r2, [pc, #44]	@ (8003d04 <MX_DMA_Init+0x38>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6153      	str	r3, [r2, #20]
 8003cde:	4b09      	ldr	r3, [pc, #36]	@ (8003d04 <MX_DMA_Init+0x38>)
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	607b      	str	r3, [r7, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8003cea:	2200      	movs	r2, #0
 8003cec:	2105      	movs	r1, #5
 8003cee:	200e      	movs	r0, #14
 8003cf0:	f002 ff13 	bl	8006b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003cf4:	200e      	movs	r0, #14
 8003cf6:	f002 ff2c 	bl	8006b52 <HAL_NVIC_EnableIRQ>

}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40021000 	.word	0x40021000

08003d08 <HAL_UART_RxCpltCallback>:
#include "../flight/plane.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
    if(huart == ibus_uart_port())
 8003d10:	f7fd faea 	bl	80012e8 <ibus_uart_port>
 8003d14:	4602      	mov	r2, r0
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d102      	bne.n	8003d22 <HAL_UART_RxCpltCallback+0x1a>
	{
		ibus_calback();
 8003d1c:	f7fd faee 	bl	80012fc <ibus_calback>
    }
    else if(huart == gps_uart_port()){
        gps_callback();
    }
}
 8003d20:	e007      	b.n	8003d32 <HAL_UART_RxCpltCallback+0x2a>
    else if(huart == gps_uart_port()){
 8003d22:	f7fe fa91 	bl	8002248 <gps_uart_port>
 8003d26:	4602      	mov	r2, r0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_RxCpltCallback+0x2a>
        gps_callback();
 8003d2e:	f7fe fa95 	bl	800225c <gps_callback>
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
    if(huart == &huart1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a04      	ldr	r2, [pc, #16]	@ (8003d58 <HAL_UART_TxCpltCallback+0x1c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d101      	bne.n	8003d50 <HAL_UART_TxCpltCallback+0x14>
	{
		mavlink_tx_cpl_callback();
 8003d4c:	f002 fdce 	bl	80068ec <mavlink_tx_cpl_callback>
    }
}
 8003d50:	bf00      	nop
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	200009f4 	.word	0x200009f4

08003d5c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4a06      	ldr	r2, [pc, #24]	@ (8003d84 <vApplicationGetIdleTaskMemory+0x28>)
 8003d6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4a05      	ldr	r2, [pc, #20]	@ (8003d88 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2280      	movs	r2, #128	@ 0x80
 8003d78:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003d7a:	bf00      	nop
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr
 8003d84:	20000560 	.word	0x20000560
 8003d88:	200005b4 	.word	0x200005b4

08003d8c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003d8c:	b5b0      	push	{r4, r5, r7, lr}
 8003d8e:	b0a4      	sub	sp, #144	@ 0x90
 8003d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	 timer_start(&htim7);
 8003d92:	4832      	ldr	r0, [pc, #200]	@ (8003e5c <MX_FREERTOS_Init+0xd0>)
 8003d94:	f7ff ff88 	bl	8003ca8 <timer_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, ahrs_task, osPriorityHigh, 0, 128);
 8003d98:	4b31      	ldr	r3, [pc, #196]	@ (8003e60 <MX_FREERTOS_Init+0xd4>)
 8003d9a:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8003d9e:	461d      	mov	r5, r3
 8003da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003da4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003da8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8003dac:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f00d fa01 	bl	80111ba <osThreadCreate>
 8003db8:	4603      	mov	r3, r0
 8003dba:	4a2a      	ldr	r2, [pc, #168]	@ (8003e64 <MX_FREERTOS_Init+0xd8>)
 8003dbc:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, blackbox, osPriorityLow, 0, 512);
 8003dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8003e68 <MX_FREERTOS_Init+0xdc>)
 8003dc0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8003dc4:	461d      	mov	r5, r3
 8003dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003dce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8003dd2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f00d f9ee 	bl	80111ba <osThreadCreate>
 8003dde:	4603      	mov	r3, r0
 8003de0:	4a22      	ldr	r2, [pc, #136]	@ (8003e6c <MX_FREERTOS_Init+0xe0>)
 8003de2:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, led_indicate, osPriorityLow, 0, 128);
 8003de4:	4b22      	ldr	r3, [pc, #136]	@ (8003e70 <MX_FREERTOS_Init+0xe4>)
 8003de6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8003dea:	461d      	mov	r5, r3
 8003dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003df0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003df4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8003df8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f00d f9db 	bl	80111ba <osThreadCreate>
 8003e04:	4603      	mov	r3, r0
 8003e06:	4a1b      	ldr	r2, [pc, #108]	@ (8003e74 <MX_FREERTOS_Init+0xe8>)
 8003e08:	6013      	str	r3, [r2, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, read_sensor, osPriorityRealtime, 0, 128);
 8003e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003e78 <MX_FREERTOS_Init+0xec>)
 8003e0c:	f107 0420 	add.w	r4, r7, #32
 8003e10:	461d      	mov	r5, r3
 8003e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 8003e1e:	f107 0320 	add.w	r3, r7, #32
 8003e22:	2100      	movs	r1, #0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f00d f9c8 	bl	80111ba <osThreadCreate>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4a13      	ldr	r2, [pc, #76]	@ (8003e7c <MX_FREERTOS_Init+0xf0>)
 8003e2e:	6013      	str	r3, [r2, #0]

  /* definition and creation of task5 */
  osThreadDef(task5, mavlinkOSD, osPriorityNormal, 0, 128);
 8003e30:	4b13      	ldr	r3, [pc, #76]	@ (8003e80 <MX_FREERTOS_Init+0xf4>)
 8003e32:	1d3c      	adds	r4, r7, #4
 8003e34:	461d      	mov	r5, r3
 8003e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task5Handle = osThreadCreate(osThread(task5), NULL);
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f00d f9b7 	bl	80111ba <osThreadCreate>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4a0d      	ldr	r2, [pc, #52]	@ (8003e84 <MX_FREERTOS_Init+0xf8>)
 8003e50:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003e52:	bf00      	nop
 8003e54:	3790      	adds	r7, #144	@ 0x90
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bdb0      	pop	{r4, r5, r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200009ac 	.word	0x200009ac
 8003e60:	0801427c 	.word	0x0801427c
 8003e64:	2000054c 	.word	0x2000054c
 8003e68:	080142a0 	.word	0x080142a0
 8003e6c:	20000550 	.word	0x20000550
 8003e70:	080142c4 	.word	0x080142c4
 8003e74:	20000554 	.word	0x20000554
 8003e78:	080142e8 	.word	0x080142e8
 8003e7c:	20000558 	.word	0x20000558
 8003e80:	0801430c 	.word	0x0801430c
 8003e84:	2000055c 	.word	0x2000055c

08003e88 <ahrs_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ahrs_task */
void ahrs_task(void const * argument)
{
 8003e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8c:	b08c      	sub	sp, #48	@ 0x30
 8003e8e:	af06      	add	r7, sp, #24
 8003e90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ahrs_task */
	ibus_init(&huart2);
 8003e92:	4849      	ldr	r0, [pc, #292]	@ (8003fb8 <ahrs_task+0x130>)
 8003e94:	f7fd fa00 	bl	8001298 <ibus_init>
	gps_init(&huart3,57600);
 8003e98:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8003e9c:	4847      	ldr	r0, [pc, #284]	@ (8003fbc <ahrs_task+0x134>)
 8003e9e:	f7fe f967 	bl	8002170 <gps_init>
	attitude_ctrl_init();
 8003ea2:	f001 fcd5 	bl	8005850 <attitude_ctrl_init>
	initPWM(&htim3);
 8003ea6:	4846      	ldr	r0, [pc, #280]	@ (8003fc0 <ahrs_task+0x138>)
 8003ea8:	f7ff fe2e 	bl	8003b08 <initPWM>
	//ms5611_init(&hi2c2);
	//bmp280_init(&hi2c2);
	last_call = micros();
 8003eac:	4b45      	ldr	r3, [pc, #276]	@ (8003fc4 <ahrs_task+0x13c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eb4:	4b44      	ldr	r3, [pc, #272]	@ (8003fc8 <ahrs_task+0x140>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4413      	add	r3, r2
 8003eba:	4a44      	ldr	r2, [pc, #272]	@ (8003fcc <ahrs_task+0x144>)
 8003ebc:	6013      	str	r3, [r2, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10; // 100 hz loop
 8003ebe:	230a      	movs	r3, #10
 8003ec0:	613b      	str	r3, [r7, #16]
	xLastWakeTime = xTaskGetTickCount();
 8003ec2:	f00e fdb9 	bl	8012a38 <xTaskGetTickCount>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug

    float dt = (micros() - last_call)*(1e-6f);
 8003eca:	4b3e      	ldr	r3, [pc, #248]	@ (8003fc4 <ahrs_task+0x13c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8003fc8 <ahrs_task+0x140>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	441a      	add	r2, r3
 8003ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8003fcc <ahrs_task+0x144>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fc ff60 	bl	8000da4 <__aeabi_ui2f>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	493a      	ldr	r1, [pc, #232]	@ (8003fd0 <ahrs_task+0x148>)
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fc ffb3 	bl	8000e54 <__aeabi_fmul>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	617b      	str	r3, [r7, #20]
    last_call = micros();
 8003ef2:	4b34      	ldr	r3, [pc, #208]	@ (8003fc4 <ahrs_task+0x13c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003efa:	4b33      	ldr	r3, [pc, #204]	@ (8003fc8 <ahrs_task+0x140>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4413      	add	r3, r2
 8003f00:	4a32      	ldr	r2, [pc, #200]	@ (8003fcc <ahrs_task+0x144>)
 8003f02:	6013      	str	r3, [r2, #0]
    if(dt < 0)
 8003f04:	f04f 0100 	mov.w	r1, #0
 8003f08:	6978      	ldr	r0, [r7, #20]
 8003f0a:	f7fd f941 	bl	8001190 <__aeabi_fcmplt>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <ahrs_task+0x92>
		dt = 0;
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
	//timer_calculate_boottime();
    //ms5611_start();
    //bmp280_read_fixed(dt);
    ibusFrameComplete();
 8003f1a:	f7fd fa4b 	bl	80013b4 <ibusFrameComplete>
    update_ahrs(gyro_imu[0],gyro_imu[1],gyro_imu[2],acc_imu[0],acc_imu[1],acc_imu[2],mag_raw[0],mag_raw[1],mag_raw[2],dt);
 8003f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd4 <ahrs_task+0x14c>)
 8003f20:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003f24:	4b2b      	ldr	r3, [pc, #172]	@ (8003fd4 <ahrs_task+0x14c>)
 8003f26:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8003f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd4 <ahrs_task+0x14c>)
 8003f2c:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8003f30:	4b29      	ldr	r3, [pc, #164]	@ (8003fd8 <ahrs_task+0x150>)
 8003f32:	f9b3 8000 	ldrsh.w	r8, [r3]
 8003f36:	4b28      	ldr	r3, [pc, #160]	@ (8003fd8 <ahrs_task+0x150>)
 8003f38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f3c:	4a26      	ldr	r2, [pc, #152]	@ (8003fd8 <ahrs_task+0x150>)
 8003f3e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8003f42:	4926      	ldr	r1, [pc, #152]	@ (8003fdc <ahrs_task+0x154>)
 8003f44:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003f48:	4824      	ldr	r0, [pc, #144]	@ (8003fdc <ahrs_task+0x154>)
 8003f4a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8003f4e:	4c23      	ldr	r4, [pc, #140]	@ (8003fdc <ahrs_task+0x154>)
 8003f50:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 8003f54:	697d      	ldr	r5, [r7, #20]
 8003f56:	9505      	str	r5, [sp, #20]
 8003f58:	9404      	str	r4, [sp, #16]
 8003f5a:	9003      	str	r0, [sp, #12]
 8003f5c:	9102      	str	r1, [sp, #8]
 8003f5e:	9201      	str	r2, [sp, #4]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	4643      	mov	r3, r8
 8003f64:	4672      	mov	r2, lr
 8003f66:	4661      	mov	r1, ip
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f7fe fc1d 	bl	80027a8 <update_ahrs>
    attitude_ctrl(dt);
 8003f6e:	6978      	ldr	r0, [r7, #20]
 8003f70:	f001 fcea 	bl	8005948 <attitude_ctrl>
	//rate_stabilize(dt);

    if(ibusChannelData[CH5] < CHANNEL_HIGH ){
 8003f74:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe0 <ahrs_task+0x158>)
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d808      	bhi.n	8003f92 <ahrs_task+0x10a>
    	 vTaskSuspend(task2Handle);
 8003f80:	4b18      	ldr	r3, [pc, #96]	@ (8003fe4 <ahrs_task+0x15c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f00e fb1b 	bl	80125c0 <vTaskSuspend>
    	 black_box_reset = TRUE;
 8003f8a:	4b17      	ldr	r3, [pc, #92]	@ (8003fe8 <ahrs_task+0x160>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e004      	b.n	8003f9c <ahrs_task+0x114>
    }else{
    	 vTaskResume(task2Handle);
 8003f92:	4b14      	ldr	r3, [pc, #80]	@ (8003fe4 <ahrs_task+0x15c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f00e fbe2 	bl	8012760 <vTaskResume>
    }

    //vTaskSuspend(NULL);
    vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8003f9c:	f107 030c 	add.w	r3, r7, #12
 8003fa0:	6939      	ldr	r1, [r7, #16]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f00e fa56 	bl	8012454 <vTaskDelayUntil>
    stack_task_ahrs = uxTaskGetStackHighWaterMark( NULL );
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f00f f81f 	bl	8012fec <uxTaskGetStackHighWaterMark>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003fec <ahrs_task+0x164>)
 8003fb4:	801a      	strh	r2, [r3, #0]
  {
 8003fb6:	e788      	b.n	8003eca <ahrs_task+0x42>
 8003fb8:	20000a3c 	.word	0x20000a3c
 8003fbc:	20000a84 	.word	0x20000a84
 8003fc0:	20000964 	.word	0x20000964
 8003fc4:	20000544 	.word	0x20000544
 8003fc8:	20000548 	.word	0x20000548
 8003fcc:	200007d8 	.word	0x200007d8
 8003fd0:	358637bd 	.word	0x358637bd
 8003fd4:	200007c0 	.word	0x200007c0
 8003fd8:	200007c8 	.word	0x200007c8
 8003fdc:	200007d0 	.word	0x200007d0
 8003fe0:	200000d0 	.word	0x200000d0
 8003fe4:	20000550 	.word	0x20000550
 8003fe8:	200007dc 	.word	0x200007dc
 8003fec:	200007b4 	.word	0x200007b4

08003ff0 <blackbox>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blackbox */
void blackbox(void const * argument)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	@ 0x30
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blackbox */

	//vTaskSuspend(NULL);
	black_box_init();
 8003ff8:	f7fd fbf6 	bl	80017e8 <black_box_init>
	black_box_reset = TRUE;
 8003ffc:	4b94      	ldr	r3, [pc, #592]	@ (8004250 <blackbox+0x260>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	701a      	strb	r2, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;  // 25 ms
 8004002:	2332      	movs	r3, #50	@ 0x32
 8004004:	62fb      	str	r3, [r7, #44]	@ 0x2c
	xLastWakeTime = xTaskGetTickCount();
 8004006:	f00e fd17 	bl	8012a38 <xTaskGetTickCount>
 800400a:	4603      	mov	r3, r0
 800400c:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	static uint32_t start_time_ms;
	uint32_t current_time = micros();
 800400e:	4b91      	ldr	r3, [pc, #580]	@ (8004254 <blackbox+0x264>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004016:	4b90      	ldr	r3, [pc, #576]	@ (8004258 <blackbox+0x268>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4413      	add	r3, r2
 800401c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(black_box_reset){
 800401e:	4b8c      	ldr	r3, [pc, #560]	@ (8004250 <blackbox+0x260>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d012      	beq.n	800404c <blackbox+0x5c>
    	black_box_pack_str("----------------------------new data--------------------------------\n");
 8004026:	488d      	ldr	r0, [pc, #564]	@ (800425c <blackbox+0x26c>)
 8004028:	f7fd fcb0 	bl	800198c <black_box_pack_str>
    	black_box_reset = FALSE;
 800402c:	4b88      	ldr	r3, [pc, #544]	@ (8004250 <blackbox+0x260>)
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]
    	start_time_ms = millis();
 8004032:	4b88      	ldr	r3, [pc, #544]	@ (8004254 <blackbox+0x264>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800403a:	4b87      	ldr	r3, [pc, #540]	@ (8004258 <blackbox+0x268>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4413      	add	r3, r2
 8004040:	4a87      	ldr	r2, [pc, #540]	@ (8004260 <blackbox+0x270>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	099b      	lsrs	r3, r3, #6
 8004048:	4a86      	ldr	r2, [pc, #536]	@ (8004264 <blackbox+0x274>)
 800404a:	6013      	str	r3, [r2, #0]
    }


    uint32_t time_ms =  millis() - start_time_ms;
 800404c:	4b81      	ldr	r3, [pc, #516]	@ (8004254 <blackbox+0x264>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004054:	4b80      	ldr	r3, [pc, #512]	@ (8004258 <blackbox+0x268>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4413      	add	r3, r2
 800405a:	4a81      	ldr	r2, [pc, #516]	@ (8004260 <blackbox+0x270>)
 800405c:	fba2 2303 	umull	r2, r3, r2, r3
 8004060:	099a      	lsrs	r2, r3, #6
 8004062:	4b80      	ldr	r3, [pc, #512]	@ (8004264 <blackbox+0x274>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	627b      	str	r3, [r7, #36]	@ 0x24

	// control thortle 0 -> 100%
	int throtle = ((int)ibusChannelData[CH3] - 1000)*0.1;
 800406a:	4b7f      	ldr	r3, [pc, #508]	@ (8004268 <blackbox+0x278>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8004072:	4618      	mov	r0, r3
 8004074:	f7fc fa2e 	bl	80004d4 <__aeabi_i2d>
 8004078:	a373      	add	r3, pc, #460	@ (adr r3, 8004248 <blackbox+0x258>)
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f7fc fa93 	bl	80005a8 <__aeabi_dmul>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4610      	mov	r0, r2
 8004088:	4619      	mov	r1, r3
 800408a:	f7fc fd3d 	bl	8000b08 <__aeabi_d2iz>
 800408e:	4603      	mov	r3, r0
 8004090:	623b      	str	r3, [r7, #32]

	// tx signal 0 -> 100 %
	int srri = ((int)ibusChannelData[CH11] - 1000)*0.1;
 8004092:	4b75      	ldr	r3, [pc, #468]	@ (8004268 <blackbox+0x278>)
 8004094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004096:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc fa1a 	bl	80004d4 <__aeabi_i2d>
 80040a0:	a369      	add	r3, pc, #420	@ (adr r3, 8004248 <blackbox+0x258>)
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	f7fc fa7f 	bl	80005a8 <__aeabi_dmul>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4610      	mov	r0, r2
 80040b0:	4619      	mov	r1, r3
 80040b2:	f7fc fd29 	bl	8000b08 <__aeabi_d2iz>
 80040b6:	4603      	mov	r3, r0
 80040b8:	61fb      	str	r3, [r7, #28]

	/*** write time  ***/
    black_box_pack_int(time_ms);
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fd fbcd 	bl	800185c <black_box_pack_int>
    black_box_pack_char(' ');
 80040c2:	2020      	movs	r0, #32
 80040c4:	f7fd fc9a 	bl	80019fc <black_box_pack_char>
    black_box_pack_char(' ');
	black_box_pack_int(srri);
    black_box_pack_char(' ');
	*/

	black_box_pack_int(11111);
 80040c8:	f642 3067 	movw	r0, #11111	@ 0x2b67
 80040cc:	f7fd fbc6 	bl	800185c <black_box_pack_int>
    black_box_pack_char(' ');
 80040d0:	2020      	movs	r0, #32
 80040d2:	f7fd fc93 	bl	80019fc <black_box_pack_char>
	black_box_pack_int(2222);
 80040d6:	f640 00ae 	movw	r0, #2222	@ 0x8ae
 80040da:	f7fd fbbf 	bl	800185c <black_box_pack_int>
    black_box_pack_char(' ');
 80040de:	2020      	movs	r0, #32
 80040e0:	f7fd fc8c 	bl	80019fc <black_box_pack_char>
	black_box_pack_int(33333);
 80040e4:	f248 2035 	movw	r0, #33333	@ 0x8235
 80040e8:	f7fd fbb8 	bl	800185c <black_box_pack_int>
    black_box_pack_char(' ');
 80040ec:	2020      	movs	r0, #32
 80040ee:	f7fd fc85 	bl	80019fc <black_box_pack_char>
	black_box_pack_int(44444);
 80040f2:	f64a 509c 	movw	r0, #44444	@ 0xad9c
 80040f6:	f7fd fbb1 	bl	800185c <black_box_pack_int>
    black_box_pack_char(' ');
 80040fa:	2020      	movs	r0, #32
 80040fc:	f7fd fc7e 	bl	80019fc <black_box_pack_char>
	black_box_pack_int((int)pitch_desired*100);
	black_box_pack_char(' ');
	black_box_pack_int((int)v_estimate*100);
	black_box_pack_char(' ');
	*/
	black_box_pack_int(11111);
 8004100:	f642 3067 	movw	r0, #11111	@ 0x2b67
 8004104:	f7fd fbaa 	bl	800185c <black_box_pack_int>
	black_box_pack_char(' ');
 8004108:	2020      	movs	r0, #32
 800410a:	f7fd fc77 	bl	80019fc <black_box_pack_char>
	black_box_pack_int(2222);
 800410e:	f640 00ae 	movw	r0, #2222	@ 0x8ae
 8004112:	f7fd fba3 	bl	800185c <black_box_pack_int>
	black_box_pack_char(' ');
 8004116:	2020      	movs	r0, #32
 8004118:	f7fd fc70 	bl	80019fc <black_box_pack_char>
	black_box_pack_int(3333);// cm
 800411c:	f640 5005 	movw	r0, #3333	@ 0xd05
 8004120:	f7fd fb9c 	bl	800185c <black_box_pack_int>
	black_box_pack_char(' ');
 8004124:	2020      	movs	r0, #32
 8004126:	f7fd fc69 	bl	80019fc <black_box_pack_char>
	black_box_pack_int(4444);
 800412a:	f241 105c 	movw	r0, #4444	@ 0x115c
 800412e:	f7fd fb95 	bl	800185c <black_box_pack_int>
	black_box_pack_char(' ');
 8004132:	2020      	movs	r0, #32
 8004134:	f7fd fc62 	bl	80019fc <black_box_pack_char>
	black_box_pack_int(5555);
 8004138:	f241 50b3 	movw	r0, #5555	@ 0x15b3
 800413c:	f7fd fb8e 	bl	800185c <black_box_pack_int>
	black_box_pack_char(' ');
 8004140:	2020      	movs	r0, #32
 8004142:	f7fd fc5b 	bl	80019fc <black_box_pack_char>

	/*------- GPS ----------------------*/
	int16_t vx = _gps.velocity[0];  // cm/s
 8004146:	4b49      	ldr	r3, [pc, #292]	@ (800426c <blackbox+0x27c>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	837b      	strh	r3, [r7, #26]
    int16_t vy = _gps.velocity[1];  // cm/s
 800414c:	4b47      	ldr	r3, [pc, #284]	@ (800426c <blackbox+0x27c>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	833b      	strh	r3, [r7, #24]
    int16_t vz = _gps.velocity[2];  // cm/s
 8004152:	4b46      	ldr	r3, [pc, #280]	@ (800426c <blackbox+0x27c>)
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	82fb      	strh	r3, [r7, #22]
    int32_t ground_speed = sqrt(sq(vx) + sq(vy) + sq(vz)) ;
 8004158:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800415c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004160:	fb03 f202 	mul.w	r2, r3, r2
 8004164:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004168:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	441a      	add	r2, r3
 8004172:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004176:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800417a:	fb01 f303 	mul.w	r3, r1, r3
 800417e:	4413      	add	r3, r2
 8004180:	4618      	mov	r0, r3
 8004182:	f7fc f9a7 	bl	80004d4 <__aeabi_i2d>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	f00f fed1 	bl	8013f34 <sqrt>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4610      	mov	r0, r2
 8004198:	4619      	mov	r1, r3
 800419a:	f7fc fcb5 	bl	8000b08 <__aeabi_d2iz>
 800419e:	4603      	mov	r3, r0
 80041a0:	613b      	str	r3, [r7, #16]
	black_box_pack_char(' ');
	black_box_pack_int(_gps.fix);
	black_box_pack_char(' ');
	black_box_pack_int(ground_speed);
	*/
	black_box_pack_int(1234567890);
 80041a2:	4833      	ldr	r0, [pc, #204]	@ (8004270 <blackbox+0x280>)
 80041a4:	f7fd fb5a 	bl	800185c <black_box_pack_int>
	black_box_pack_char(' ');
 80041a8:	2020      	movs	r0, #32
 80041aa:	f7fd fc27 	bl	80019fc <black_box_pack_char>
	black_box_pack_int(1234567890);
 80041ae:	4830      	ldr	r0, [pc, #192]	@ (8004270 <blackbox+0x280>)
 80041b0:	f7fd fb54 	bl	800185c <black_box_pack_int>
	black_box_pack_char(' ');
 80041b4:	2020      	movs	r0, #32
 80041b6:	f7fd fc21 	bl	80019fc <black_box_pack_char>
	black_box_pack_int(33333);
 80041ba:	f248 2035 	movw	r0, #33333	@ 0x8235
 80041be:	f7fd fb4d 	bl	800185c <black_box_pack_int>
	black_box_pack_char(' ');
 80041c2:	2020      	movs	r0, #32
 80041c4:	f7fd fc1a 	bl	80019fc <black_box_pack_char>
	black_box_pack_int(30);
 80041c8:	201e      	movs	r0, #30
 80041ca:	f7fd fb47 	bl	800185c <black_box_pack_int>
	black_box_pack_char(' ');
 80041ce:	2020      	movs	r0, #32
 80041d0:	f7fd fc14 	bl	80019fc <black_box_pack_char>
	black_box_pack_int(3);
 80041d4:	2003      	movs	r0, #3
 80041d6:	f7fd fb41 	bl	800185c <black_box_pack_int>
	black_box_pack_char(' ');
 80041da:	2020      	movs	r0, #32
 80041dc:	f7fd fc0e 	bl	80019fc <black_box_pack_char>
	black_box_pack_int(22222);
 80041e0:	f245 60ce 	movw	r0, #22222	@ 0x56ce
 80041e4:	f7fd fb3a 	bl	800185c <black_box_pack_int>

	/*----- end line && load data to sd card- -----*/
	sdcard_fsize = black_box_get_file_size();
 80041e8:	f7fd fb2c 	bl	8001844 <black_box_get_file_size>
 80041ec:	4603      	mov	r3, r0
 80041ee:	4a21      	ldr	r2, [pc, #132]	@ (8004274 <blackbox+0x284>)
 80041f0:	6013      	str	r3, [r2, #0]
	black_box_pack_char('\n');
 80041f2:	200a      	movs	r0, #10
 80041f4:	f7fd fc02 	bl	80019fc <black_box_pack_char>
	black_box_load();
 80041f8:	f7fd fc1a 	bl	8001a30 <black_box_load>

	write_time = micros() - current_time;
 80041fc:	4b15      	ldr	r3, [pc, #84]	@ (8004254 <blackbox+0x264>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004204:	4b14      	ldr	r3, [pc, #80]	@ (8004258 <blackbox+0x268>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	441a      	add	r2, r3
 800420a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	4a1a      	ldr	r2, [pc, #104]	@ (8004278 <blackbox+0x288>)
 8004210:	6013      	str	r3, [r2, #0]
	if(write_time > 10 && puts_state != -1){
 8004212:	4b19      	ldr	r3, [pc, #100]	@ (8004278 <blackbox+0x288>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b0a      	cmp	r3, #10
 8004218:	d908      	bls.n	800422c <blackbox+0x23c>
 800421a:	4b18      	ldr	r3, [pc, #96]	@ (800427c <blackbox+0x28c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004222:	d003      	beq.n	800422c <blackbox+0x23c>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8004224:	2110      	movs	r1, #16
 8004226:	4816      	ldr	r0, [pc, #88]	@ (8004280 <blackbox+0x290>)
 8004228:	f003 fae9 	bl	80077fe <HAL_GPIO_TogglePin>
	}

	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 800422c:	f107 030c 	add.w	r3, r7, #12
 8004230:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004232:	4618      	mov	r0, r3
 8004234:	f00e f90e 	bl	8012454 <vTaskDelayUntil>
    stack_task_blackbox = uxTaskGetStackHighWaterMark( NULL );
 8004238:	2000      	movs	r0, #0
 800423a:	f00e fed7 	bl	8012fec <uxTaskGetStackHighWaterMark>
 800423e:	4603      	mov	r3, r0
 8004240:	b29a      	uxth	r2, r3
 8004242:	4b10      	ldr	r3, [pc, #64]	@ (8004284 <blackbox+0x294>)
 8004244:	801a      	strh	r2, [r3, #0]
  {
 8004246:	e6e2      	b.n	800400e <blackbox+0x1e>
 8004248:	9999999a 	.word	0x9999999a
 800424c:	3fb99999 	.word	0x3fb99999
 8004250:	200007dc 	.word	0x200007dc
 8004254:	20000544 	.word	0x20000544
 8004258:	20000548 	.word	0x20000548
 800425c:	08014328 	.word	0x08014328
 8004260:	10624dd3 	.word	0x10624dd3
 8004264:	200007e8 	.word	0x200007e8
 8004268:	200000d0 	.word	0x200000d0
 800426c:	200003a0 	.word	0x200003a0
 8004270:	499602d2 	.word	0x499602d2
 8004274:	200007e4 	.word	0x200007e4
 8004278:	200007e0 	.word	0x200007e0
 800427c:	20000354 	.word	0x20000354
 8004280:	40010800 	.word	0x40010800
 8004284:	200007bc 	.word	0x200007bc

08004288 <led_indicate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_indicate */
void led_indicate(void const * argument)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		delay = 500;
		vTaskSuspend(task2Handle);
	}
	*/
	if(_gps.fix > 1){
 8004290:	4b0c      	ldr	r3, [pc, #48]	@ (80042c4 <led_indicate+0x3c>)
 8004292:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004296:	2b01      	cmp	r3, #1
 8004298:	d903      	bls.n	80042a2 <led_indicate+0x1a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800429a:	2120      	movs	r1, #32
 800429c:	480a      	ldr	r0, [pc, #40]	@ (80042c8 <led_indicate+0x40>)
 800429e:	f003 faae 	bl	80077fe <HAL_GPIO_TogglePin>
	}
	stack_task_led = uxTaskGetStackHighWaterMark( NULL );
 80042a2:	2000      	movs	r0, #0
 80042a4:	f00e fea2 	bl	8012fec <uxTaskGetStackHighWaterMark>
 80042a8:	4603      	mov	r3, r0
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	4b07      	ldr	r3, [pc, #28]	@ (80042cc <led_indicate+0x44>)
 80042ae:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80042b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80042b4:	4806      	ldr	r0, [pc, #24]	@ (80042d0 <led_indicate+0x48>)
 80042b6:	f003 faa2 	bl	80077fe <HAL_GPIO_TogglePin>
    osDelay(100);
 80042ba:	2064      	movs	r0, #100	@ 0x64
 80042bc:	f00c ffc9 	bl	8011252 <osDelay>
	if(_gps.fix > 1){
 80042c0:	e7e6      	b.n	8004290 <led_indicate+0x8>
 80042c2:	bf00      	nop
 80042c4:	200003a0 	.word	0x200003a0
 80042c8:	40010800 	.word	0x40010800
 80042cc:	200007b6 	.word	0x200007b6
 80042d0:	40011000 	.word	0x40011000
 80042d4:	00000000 	.word	0x00000000

080042d8 <read_sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_sensor */
void read_sensor(void const * argument)
{
 80042d8:	b5b0      	push	{r4, r5, r7, lr}
 80042da:	b08e      	sub	sp, #56	@ 0x38
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_sensor */
  /* Infinite loop */
	int16_t gyso_offset[3] = {0,0,0};
 80042e0:	2300      	movs	r3, #0
 80042e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80042e4:	2300      	movs	r3, #0
 80042e6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80042e8:	2300      	movs	r3, #0
 80042ea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	axis3_t raw;
	uint8_t sample_count = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t gyro_add[3] = {0,0,0};
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	2300      	movs	r3, #0
 80042f8:	61bb      	str	r3, [r7, #24]
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
	uint8_t first_loop = 1;
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	compassInit();
 8004304:	f7fd fc2e 	bl	8001b64 <compassInit>
	mpu6050_init(&hi2c2);
 8004308:	488f      	ldr	r0, [pc, #572]	@ (8004548 <read_sensor+0x270>)
 800430a:	f7fd f939 	bl	8001580 <mpu6050_init>
	HAL_Delay(2000);
 800430e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004312:	f002 fb29 	bl	8006968 <HAL_Delay>
	imu_calibrate(&gyso_offset[0],&gyso_offset[1],&gyso_offset[2]);
 8004316:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800431a:	1d1a      	adds	r2, r3, #4
 800431c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004320:	1c99      	adds	r1, r3, #2
 8004322:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe f9c2 	bl	80026b0 <imu_calibrate>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2;
 800432c:	2302      	movs	r3, #2
 800432e:	633b      	str	r3, [r7, #48]	@ 0x30
	xLastWakeTime = xTaskGetTickCount();
 8004330:	f00e fb82 	bl	8012a38 <xTaskGetTickCount>
 8004334:	4603      	mov	r3, r0
 8004336:	613b      	str	r3, [r7, #16]

	for(;;)
	{
		mpu6050_gyro_get_raw(&raw);
 8004338:	f107 0320 	add.w	r3, r7, #32
 800433c:	4618      	mov	r0, r3
 800433e:	f7fd f971 	bl	8001624 <mpu6050_gyro_get_raw>
		gyro_add[0] += (raw.x - gyso_offset[0]);
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004348:	4619      	mov	r1, r3
 800434a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800434e:	1acb      	subs	r3, r1, r3
 8004350:	4413      	add	r3, r2
 8004352:	617b      	str	r3, [r7, #20]
		gyro_add[1] += (raw.y - gyso_offset[1]);
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800435a:	4619      	mov	r1, r3
 800435c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8004360:	1acb      	subs	r3, r1, r3
 8004362:	4413      	add	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
		gyro_add[2] += (raw.z - gyso_offset[2]);
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800436c:	4619      	mov	r1, r3
 800436e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8004372:	1acb      	subs	r3, r1, r3
 8004374:	4413      	add	r3, r2
 8004376:	61fb      	str	r3, [r7, #28]
		sample_count ++;
 8004378:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800437c:	3301      	adds	r3, #1
 800437e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if(sample_count >= 5){
 8004382:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004386:	2b04      	cmp	r3, #4
 8004388:	d937      	bls.n	80043fa <read_sensor+0x122>
		   axis3_t mag;
		   compass_get(&mag);
 800438a:	f107 0308 	add.w	r3, r7, #8
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd fc24 	bl	8001bdc <compass_get>
		   mag_raw[0] = mag.x;
 8004394:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004398:	4b6c      	ldr	r3, [pc, #432]	@ (800454c <read_sensor+0x274>)
 800439a:	801a      	strh	r2, [r3, #0]
		   mag_raw[1] = mag.y;
 800439c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80043a0:	4b6a      	ldr	r3, [pc, #424]	@ (800454c <read_sensor+0x274>)
 80043a2:	805a      	strh	r2, [r3, #2]
		   mag_raw[2] = mag.z;
 80043a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80043a8:	4b68      	ldr	r3, [pc, #416]	@ (800454c <read_sensor+0x274>)
 80043aa:	809a      	strh	r2, [r3, #4]

		   gyro_imu[0] = (int16_t)(gyro_add[0]/5);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	4a68      	ldr	r2, [pc, #416]	@ (8004550 <read_sensor+0x278>)
 80043b0:	fb82 1203 	smull	r1, r2, r2, r3
 80043b4:	1052      	asrs	r2, r2, #1
 80043b6:	17db      	asrs	r3, r3, #31
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	b21a      	sxth	r2, r3
 80043bc:	4b65      	ldr	r3, [pc, #404]	@ (8004554 <read_sensor+0x27c>)
 80043be:	801a      	strh	r2, [r3, #0]
		   gyro_imu[1] = (int16_t)(gyro_add[1]/5);
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	4a63      	ldr	r2, [pc, #396]	@ (8004550 <read_sensor+0x278>)
 80043c4:	fb82 1203 	smull	r1, r2, r2, r3
 80043c8:	1052      	asrs	r2, r2, #1
 80043ca:	17db      	asrs	r3, r3, #31
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	b21a      	sxth	r2, r3
 80043d0:	4b60      	ldr	r3, [pc, #384]	@ (8004554 <read_sensor+0x27c>)
 80043d2:	805a      	strh	r2, [r3, #2]
		   gyro_imu[2] = (int16_t)(gyro_add[2]/5);
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004550 <read_sensor+0x278>)
 80043d8:	fb82 1203 	smull	r1, r2, r2, r3
 80043dc:	1052      	asrs	r2, r2, #1
 80043de:	17db      	asrs	r3, r3, #31
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	b21a      	sxth	r2, r3
 80043e4:	4b5b      	ldr	r3, [pc, #364]	@ (8004554 <read_sensor+0x27c>)
 80043e6:	809a      	strh	r2, [r3, #4]
		   gyro_add[0] = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
		   gyro_add[1] = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61bb      	str	r3, [r7, #24]
		   gyro_add[2] = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
		   sample_count = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		   //vTaskResume(task1Handle);
		}

		raw.x = 0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	843b      	strh	r3, [r7, #32]
		raw.y = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	847b      	strh	r3, [r7, #34]	@ 0x22
		raw.z = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	84bb      	strh	r3, [r7, #36]	@ 0x24

		mpu6050_acc_get_raw(&raw);
 8004406:	f107 0320 	add.w	r3, r7, #32
 800440a:	4618      	mov	r0, r3
 800440c:	f7fd f946 	bl	800169c <mpu6050_acc_get_raw>
		if(first_loop){
 8004410:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00e      	beq.n	8004436 <read_sensor+0x15e>
			acc_imu[0] = raw.x;
 8004418:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800441c:	4b4e      	ldr	r3, [pc, #312]	@ (8004558 <read_sensor+0x280>)
 800441e:	801a      	strh	r2, [r3, #0]
			acc_imu[1] = raw.y;
 8004420:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8004424:	4b4c      	ldr	r3, [pc, #304]	@ (8004558 <read_sensor+0x280>)
 8004426:	805a      	strh	r2, [r3, #2]
			acc_imu[2] = raw.z;
 8004428:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800442c:	4b4a      	ldr	r3, [pc, #296]	@ (8004558 <read_sensor+0x280>)
 800442e:	809a      	strh	r2, [r3, #4]
			first_loop = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		}
		// low pass filter
		acc_imu[0] += 0.1*(raw.x - acc_imu[0]);
 8004436:	4b48      	ldr	r3, [pc, #288]	@ (8004558 <read_sensor+0x280>)
 8004438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc f849 	bl	80004d4 <__aeabi_i2d>
 8004442:	4604      	mov	r4, r0
 8004444:	460d      	mov	r5, r1
 8004446:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800444a:	461a      	mov	r2, r3
 800444c:	4b42      	ldr	r3, [pc, #264]	@ (8004558 <read_sensor+0x280>)
 800444e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	4618      	mov	r0, r3
 8004456:	f7fc f83d 	bl	80004d4 <__aeabi_i2d>
 800445a:	a339      	add	r3, pc, #228	@ (adr r3, 8004540 <read_sensor+0x268>)
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	f7fc f8a2 	bl	80005a8 <__aeabi_dmul>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4620      	mov	r0, r4
 800446a:	4629      	mov	r1, r5
 800446c:	f7fb fee6 	bl	800023c <__adddf3>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4610      	mov	r0, r2
 8004476:	4619      	mov	r1, r3
 8004478:	f7fc fb46 	bl	8000b08 <__aeabi_d2iz>
 800447c:	4603      	mov	r3, r0
 800447e:	b21a      	sxth	r2, r3
 8004480:	4b35      	ldr	r3, [pc, #212]	@ (8004558 <read_sensor+0x280>)
 8004482:	801a      	strh	r2, [r3, #0]
		acc_imu[1] += 0.1*(raw.y - acc_imu[1]);
 8004484:	4b34      	ldr	r3, [pc, #208]	@ (8004558 <read_sensor+0x280>)
 8004486:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800448a:	4618      	mov	r0, r3
 800448c:	f7fc f822 	bl	80004d4 <__aeabi_i2d>
 8004490:	4604      	mov	r4, r0
 8004492:	460d      	mov	r5, r1
 8004494:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004498:	461a      	mov	r2, r3
 800449a:	4b2f      	ldr	r3, [pc, #188]	@ (8004558 <read_sensor+0x280>)
 800449c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fc f816 	bl	80004d4 <__aeabi_i2d>
 80044a8:	a325      	add	r3, pc, #148	@ (adr r3, 8004540 <read_sensor+0x268>)
 80044aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ae:	f7fc f87b 	bl	80005a8 <__aeabi_dmul>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4620      	mov	r0, r4
 80044b8:	4629      	mov	r1, r5
 80044ba:	f7fb febf 	bl	800023c <__adddf3>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4610      	mov	r0, r2
 80044c4:	4619      	mov	r1, r3
 80044c6:	f7fc fb1f 	bl	8000b08 <__aeabi_d2iz>
 80044ca:	4603      	mov	r3, r0
 80044cc:	b21a      	sxth	r2, r3
 80044ce:	4b22      	ldr	r3, [pc, #136]	@ (8004558 <read_sensor+0x280>)
 80044d0:	805a      	strh	r2, [r3, #2]
		acc_imu[2] += 0.1*(raw.z - acc_imu[2]);
 80044d2:	4b21      	ldr	r3, [pc, #132]	@ (8004558 <read_sensor+0x280>)
 80044d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fb fffb 	bl	80004d4 <__aeabi_i2d>
 80044de:	4604      	mov	r4, r0
 80044e0:	460d      	mov	r5, r1
 80044e2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80044e6:	461a      	mov	r2, r3
 80044e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004558 <read_sensor+0x280>)
 80044ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fb ffef 	bl	80004d4 <__aeabi_i2d>
 80044f6:	a312      	add	r3, pc, #72	@ (adr r3, 8004540 <read_sensor+0x268>)
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f7fc f854 	bl	80005a8 <__aeabi_dmul>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4620      	mov	r0, r4
 8004506:	4629      	mov	r1, r5
 8004508:	f7fb fe98 	bl	800023c <__adddf3>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4610      	mov	r0, r2
 8004512:	4619      	mov	r1, r3
 8004514:	f7fc faf8 	bl	8000b08 <__aeabi_d2iz>
 8004518:	4603      	mov	r3, r0
 800451a:	b21a      	sxth	r2, r3
 800451c:	4b0e      	ldr	r3, [pc, #56]	@ (8004558 <read_sensor+0x280>)
 800451e:	809a      	strh	r2, [r3, #4]
	    stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 8004520:	2000      	movs	r0, #0
 8004522:	f00e fd63 	bl	8012fec <uxTaskGetStackHighWaterMark>
 8004526:	4603      	mov	r3, r0
 8004528:	b29a      	uxth	r2, r3
 800452a:	4b0c      	ldr	r3, [pc, #48]	@ (800455c <read_sensor+0x284>)
 800452c:	801a      	strh	r2, [r3, #0]
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800452e:	f107 0310 	add.w	r3, r7, #16
 8004532:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004534:	4618      	mov	r0, r3
 8004536:	f00d ff8d 	bl	8012454 <vTaskDelayUntil>
		mpu6050_gyro_get_raw(&raw);
 800453a:	e6fd      	b.n	8004338 <read_sensor+0x60>
 800453c:	f3af 8000 	nop.w
 8004540:	9999999a 	.word	0x9999999a
 8004544:	3fb99999 	.word	0x3fb99999
 8004548:	20000840 	.word	0x20000840
 800454c:	200007d0 	.word	0x200007d0
 8004550:	66666667 	.word	0x66666667
 8004554:	200007c0 	.word	0x200007c0
 8004558:	200007c8 	.word	0x200007c8
 800455c:	200007b8 	.word	0x200007b8

08004560 <mavlinkOSD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mavlinkOSD */
void mavlinkOSD(void const * argument)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mavlinkOSD */
	mavlinkInit(1,1,&huart1,57600);
 8004568:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 800456c:	4a0d      	ldr	r2, [pc, #52]	@ (80045a4 <mavlinkOSD+0x44>)
 800456e:	2101      	movs	r1, #1
 8004570:	2001      	movs	r0, #1
 8004572:	f002 f869 	bl	8006648 <mavlinkInit>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;  // 25 ms
 8004576:	2332      	movs	r3, #50	@ 0x32
 8004578:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 800457a:	f00e fa5d 	bl	8012a38 <xTaskGetTickCount>
 800457e:	4603      	mov	r3, r0
 8004580:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	mavlink_osd();
 8004582:	f002 f897 	bl	80066b4 <mavlink_osd>
	//mavlink_send_heartbeat();
	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8004586:	f107 0308 	add.w	r3, r7, #8
 800458a:	68f9      	ldr	r1, [r7, #12]
 800458c:	4618      	mov	r0, r3
 800458e:	f00d ff61 	bl	8012454 <vTaskDelayUntil>
    stack_task_mavOSD = uxTaskGetStackHighWaterMark( NULL );
 8004592:	2000      	movs	r0, #0
 8004594:	f00e fd2a 	bl	8012fec <uxTaskGetStackHighWaterMark>
 8004598:	4603      	mov	r3, r0
 800459a:	b29a      	uxth	r2, r3
 800459c:	4b02      	ldr	r3, [pc, #8]	@ (80045a8 <mavlinkOSD+0x48>)
 800459e:	801a      	strh	r2, [r3, #0]
	mavlink_osd();
 80045a0:	bf00      	nop
 80045a2:	e7ee      	b.n	8004582 <mavlinkOSD+0x22>
 80045a4:	200009f4 	.word	0x200009f4
 80045a8:	200007ba 	.word	0x200007ba

080045ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b2:	f107 0310 	add.w	r3, r7, #16
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	605a      	str	r2, [r3, #4]
 80045bc:	609a      	str	r2, [r3, #8]
 80045be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045c0:	4b46      	ldr	r3, [pc, #280]	@ (80046dc <MX_GPIO_Init+0x130>)
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	4a45      	ldr	r2, [pc, #276]	@ (80046dc <MX_GPIO_Init+0x130>)
 80045c6:	f043 0310 	orr.w	r3, r3, #16
 80045ca:	6193      	str	r3, [r2, #24]
 80045cc:	4b43      	ldr	r3, [pc, #268]	@ (80046dc <MX_GPIO_Init+0x130>)
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d8:	4b40      	ldr	r3, [pc, #256]	@ (80046dc <MX_GPIO_Init+0x130>)
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	4a3f      	ldr	r2, [pc, #252]	@ (80046dc <MX_GPIO_Init+0x130>)
 80045de:	f043 0304 	orr.w	r3, r3, #4
 80045e2:	6193      	str	r3, [r2, #24]
 80045e4:	4b3d      	ldr	r3, [pc, #244]	@ (80046dc <MX_GPIO_Init+0x130>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045f0:	4b3a      	ldr	r3, [pc, #232]	@ (80046dc <MX_GPIO_Init+0x130>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	4a39      	ldr	r2, [pc, #228]	@ (80046dc <MX_GPIO_Init+0x130>)
 80045f6:	f043 0308 	orr.w	r3, r3, #8
 80045fa:	6193      	str	r3, [r2, #24]
 80045fc:	4b37      	ldr	r3, [pc, #220]	@ (80046dc <MX_GPIO_Init+0x130>)
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004608:	4b34      	ldr	r3, [pc, #208]	@ (80046dc <MX_GPIO_Init+0x130>)
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	4a33      	ldr	r2, [pc, #204]	@ (80046dc <MX_GPIO_Init+0x130>)
 800460e:	f043 0320 	orr.w	r3, r3, #32
 8004612:	6193      	str	r3, [r2, #24]
 8004614:	4b31      	ldr	r3, [pc, #196]	@ (80046dc <MX_GPIO_Init+0x130>)
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004620:	2200      	movs	r2, #0
 8004622:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004626:	482e      	ldr	r0, [pc, #184]	@ (80046e0 <MX_GPIO_Init+0x134>)
 8004628:	f003 f8d1 	bl	80077ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800462c:	2200      	movs	r2, #0
 800462e:	2130      	movs	r1, #48	@ 0x30
 8004630:	482c      	ldr	r0, [pc, #176]	@ (80046e4 <MX_GPIO_Init+0x138>)
 8004632:	f003 f8cc 	bl	80077ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8004636:	2200      	movs	r2, #0
 8004638:	21c0      	movs	r1, #192	@ 0xc0
 800463a:	482b      	ldr	r0, [pc, #172]	@ (80046e8 <MX_GPIO_Init+0x13c>)
 800463c:	f003 f8c7 	bl	80077ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8004640:	2200      	movs	r2, #0
 8004642:	2118      	movs	r1, #24
 8004644:	4829      	ldr	r0, [pc, #164]	@ (80046ec <MX_GPIO_Init+0x140>)
 8004646:	f003 f8c2 	bl	80077ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800464a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800464e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004650:	2301      	movs	r3, #1
 8004652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004654:	2300      	movs	r3, #0
 8004656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004658:	2302      	movs	r3, #2
 800465a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800465c:	f107 0310 	add.w	r3, r7, #16
 8004660:	4619      	mov	r1, r3
 8004662:	481f      	ldr	r0, [pc, #124]	@ (80046e0 <MX_GPIO_Init+0x134>)
 8004664:	f002 ff08 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004668:	2330      	movs	r3, #48	@ 0x30
 800466a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800466c:	2301      	movs	r3, #1
 800466e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004670:	2300      	movs	r3, #0
 8004672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004674:	2302      	movs	r3, #2
 8004676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004678:	f107 0310 	add.w	r3, r7, #16
 800467c:	4619      	mov	r1, r3
 800467e:	4819      	ldr	r0, [pc, #100]	@ (80046e4 <MX_GPIO_Init+0x138>)
 8004680:	f002 fefa 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004684:	23c0      	movs	r3, #192	@ 0xc0
 8004686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004688:	2301      	movs	r3, #1
 800468a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004690:	2302      	movs	r3, #2
 8004692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004694:	f107 0310 	add.w	r3, r7, #16
 8004698:	4619      	mov	r1, r3
 800469a:	4813      	ldr	r0, [pc, #76]	@ (80046e8 <MX_GPIO_Init+0x13c>)
 800469c:	f002 feec 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80046a0:	2318      	movs	r3, #24
 80046a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046a4:	2301      	movs	r3, #1
 80046a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ac:	2302      	movs	r3, #2
 80046ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046b0:	f107 0310 	add.w	r3, r7, #16
 80046b4:	4619      	mov	r1, r3
 80046b6:	480d      	ldr	r0, [pc, #52]	@ (80046ec <MX_GPIO_Init+0x140>)
 80046b8:	f002 fede 	bl	8007478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80046bc:	2320      	movs	r3, #32
 80046be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80046c4:	2302      	movs	r3, #2
 80046c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046c8:	f107 0310 	add.w	r3, r7, #16
 80046cc:	4619      	mov	r1, r3
 80046ce:	4807      	ldr	r0, [pc, #28]	@ (80046ec <MX_GPIO_Init+0x140>)
 80046d0:	f002 fed2 	bl	8007478 <HAL_GPIO_Init>

}
 80046d4:	bf00      	nop
 80046d6:	3720      	adds	r7, #32
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40021000 	.word	0x40021000
 80046e0:	40011000 	.word	0x40011000
 80046e4:	40010800 	.word	0x40010800
 80046e8:	40011400 	.word	0x40011400
 80046ec:	40010c00 	.word	0x40010c00

080046f0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80046f4:	4b12      	ldr	r3, [pc, #72]	@ (8004740 <MX_I2C1_Init+0x50>)
 80046f6:	4a13      	ldr	r2, [pc, #76]	@ (8004744 <MX_I2C1_Init+0x54>)
 80046f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80046fa:	4b11      	ldr	r3, [pc, #68]	@ (8004740 <MX_I2C1_Init+0x50>)
 80046fc:	4a12      	ldr	r2, [pc, #72]	@ (8004748 <MX_I2C1_Init+0x58>)
 80046fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004700:	4b0f      	ldr	r3, [pc, #60]	@ (8004740 <MX_I2C1_Init+0x50>)
 8004702:	2200      	movs	r2, #0
 8004704:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004706:	4b0e      	ldr	r3, [pc, #56]	@ (8004740 <MX_I2C1_Init+0x50>)
 8004708:	2200      	movs	r2, #0
 800470a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800470c:	4b0c      	ldr	r3, [pc, #48]	@ (8004740 <MX_I2C1_Init+0x50>)
 800470e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004712:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004714:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <MX_I2C1_Init+0x50>)
 8004716:	2200      	movs	r2, #0
 8004718:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800471a:	4b09      	ldr	r3, [pc, #36]	@ (8004740 <MX_I2C1_Init+0x50>)
 800471c:	2200      	movs	r2, #0
 800471e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004720:	4b07      	ldr	r3, [pc, #28]	@ (8004740 <MX_I2C1_Init+0x50>)
 8004722:	2200      	movs	r2, #0
 8004724:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004726:	4b06      	ldr	r3, [pc, #24]	@ (8004740 <MX_I2C1_Init+0x50>)
 8004728:	2200      	movs	r2, #0
 800472a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800472c:	4804      	ldr	r0, [pc, #16]	@ (8004740 <MX_I2C1_Init+0x50>)
 800472e:	f003 f87f 	bl	8007830 <HAL_I2C_Init>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004738:	f000 f92a 	bl	8004990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800473c:	bf00      	nop
 800473e:	bd80      	pop	{r7, pc}
 8004740:	200007ec 	.word	0x200007ec
 8004744:	40005400 	.word	0x40005400
 8004748:	00061a80 	.word	0x00061a80

0800474c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004750:	4b12      	ldr	r3, [pc, #72]	@ (800479c <MX_I2C2_Init+0x50>)
 8004752:	4a13      	ldr	r2, [pc, #76]	@ (80047a0 <MX_I2C2_Init+0x54>)
 8004754:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8004756:	4b11      	ldr	r3, [pc, #68]	@ (800479c <MX_I2C2_Init+0x50>)
 8004758:	4a12      	ldr	r2, [pc, #72]	@ (80047a4 <MX_I2C2_Init+0x58>)
 800475a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800475c:	4b0f      	ldr	r3, [pc, #60]	@ (800479c <MX_I2C2_Init+0x50>)
 800475e:	2200      	movs	r2, #0
 8004760:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004762:	4b0e      	ldr	r3, [pc, #56]	@ (800479c <MX_I2C2_Init+0x50>)
 8004764:	2200      	movs	r2, #0
 8004766:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004768:	4b0c      	ldr	r3, [pc, #48]	@ (800479c <MX_I2C2_Init+0x50>)
 800476a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800476e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004770:	4b0a      	ldr	r3, [pc, #40]	@ (800479c <MX_I2C2_Init+0x50>)
 8004772:	2200      	movs	r2, #0
 8004774:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004776:	4b09      	ldr	r3, [pc, #36]	@ (800479c <MX_I2C2_Init+0x50>)
 8004778:	2200      	movs	r2, #0
 800477a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800477c:	4b07      	ldr	r3, [pc, #28]	@ (800479c <MX_I2C2_Init+0x50>)
 800477e:	2200      	movs	r2, #0
 8004780:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004782:	4b06      	ldr	r3, [pc, #24]	@ (800479c <MX_I2C2_Init+0x50>)
 8004784:	2200      	movs	r2, #0
 8004786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004788:	4804      	ldr	r0, [pc, #16]	@ (800479c <MX_I2C2_Init+0x50>)
 800478a:	f003 f851 	bl	8007830 <HAL_I2C_Init>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004794:	f000 f8fc 	bl	8004990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004798:	bf00      	nop
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000840 	.word	0x20000840
 80047a0:	40005800 	.word	0x40005800
 80047a4:	00061a80 	.word	0x00061a80

080047a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	@ 0x28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b0:	f107 0318 	add.w	r3, r7, #24
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004870 <HAL_I2C_MspInit+0xc8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d124      	bne.n	8004812 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004874 <HAL_I2C_MspInit+0xcc>)
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	4a29      	ldr	r2, [pc, #164]	@ (8004874 <HAL_I2C_MspInit+0xcc>)
 80047ce:	f043 0308 	orr.w	r3, r3, #8
 80047d2:	6193      	str	r3, [r2, #24]
 80047d4:	4b27      	ldr	r3, [pc, #156]	@ (8004874 <HAL_I2C_MspInit+0xcc>)
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047e0:	23c0      	movs	r3, #192	@ 0xc0
 80047e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047e4:	2312      	movs	r3, #18
 80047e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047e8:	2303      	movs	r3, #3
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ec:	f107 0318 	add.w	r3, r7, #24
 80047f0:	4619      	mov	r1, r3
 80047f2:	4821      	ldr	r0, [pc, #132]	@ (8004878 <HAL_I2C_MspInit+0xd0>)
 80047f4:	f002 fe40 	bl	8007478 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004874 <HAL_I2C_MspInit+0xcc>)
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004874 <HAL_I2C_MspInit+0xcc>)
 80047fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004802:	61d3      	str	r3, [r2, #28]
 8004804:	4b1b      	ldr	r3, [pc, #108]	@ (8004874 <HAL_I2C_MspInit+0xcc>)
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004810:	e029      	b.n	8004866 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a19      	ldr	r2, [pc, #100]	@ (800487c <HAL_I2C_MspInit+0xd4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d124      	bne.n	8004866 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800481c:	4b15      	ldr	r3, [pc, #84]	@ (8004874 <HAL_I2C_MspInit+0xcc>)
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	4a14      	ldr	r2, [pc, #80]	@ (8004874 <HAL_I2C_MspInit+0xcc>)
 8004822:	f043 0308 	orr.w	r3, r3, #8
 8004826:	6193      	str	r3, [r2, #24]
 8004828:	4b12      	ldr	r3, [pc, #72]	@ (8004874 <HAL_I2C_MspInit+0xcc>)
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004834:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800483a:	2312      	movs	r3, #18
 800483c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800483e:	2303      	movs	r3, #3
 8004840:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004842:	f107 0318 	add.w	r3, r7, #24
 8004846:	4619      	mov	r1, r3
 8004848:	480b      	ldr	r0, [pc, #44]	@ (8004878 <HAL_I2C_MspInit+0xd0>)
 800484a:	f002 fe15 	bl	8007478 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800484e:	4b09      	ldr	r3, [pc, #36]	@ (8004874 <HAL_I2C_MspInit+0xcc>)
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	4a08      	ldr	r2, [pc, #32]	@ (8004874 <HAL_I2C_MspInit+0xcc>)
 8004854:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004858:	61d3      	str	r3, [r2, #28]
 800485a:	4b06      	ldr	r3, [pc, #24]	@ (8004874 <HAL_I2C_MspInit+0xcc>)
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
}
 8004866:	bf00      	nop
 8004868:	3728      	adds	r7, #40	@ 0x28
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40005400 	.word	0x40005400
 8004874:	40021000 	.word	0x40021000
 8004878:	40010c00 	.word	0x40010c00
 800487c:	40005800 	.word	0x40005800

08004880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004884:	f002 f83e 	bl	8006904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004888:	f000 f81c 	bl	80048c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800488c:	f7ff fe8e 	bl	80045ac <MX_GPIO_Init>
  MX_DMA_Init();
 8004890:	f7ff fa1c 	bl	8003ccc <MX_DMA_Init>
  MX_I2C1_Init();
 8004894:	f7ff ff2c 	bl	80046f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004898:	f7ff ff58 	bl	800474c <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 800489c:	f000 f87e 	bl	800499c <MX_SDIO_SD_Init>
  MX_TIM7_Init();
 80048a0:	f000 fad4 	bl	8004e4c <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80048a4:	f000 fb96 	bl	8004fd4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80048a8:	f000 fbbe 	bl	8005028 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80048ac:	f000 fbe6 	bl	800507c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80048b0:	f000 fa40 	bl	8004d34 <MX_TIM3_Init>
  MX_FATFS_Init();
 80048b4:	f008 fe74 	bl	800d5a0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80048b8:	f7ff fa68 	bl	8003d8c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80048bc:	f00c fc76 	bl	80111ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80048c0:	bf00      	nop
 80048c2:	e7fd      	b.n	80048c0 <main+0x40>

080048c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b090      	sub	sp, #64	@ 0x40
 80048c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048ca:	f107 0318 	add.w	r3, r7, #24
 80048ce:	2228      	movs	r2, #40	@ 0x28
 80048d0:	2100      	movs	r1, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	f00f fadc 	bl	8013e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048d8:	1d3b      	adds	r3, r7, #4
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	605a      	str	r2, [r3, #4]
 80048e0:	609a      	str	r2, [r3, #8]
 80048e2:	60da      	str	r2, [r3, #12]
 80048e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80048e6:	2301      	movs	r3, #1
 80048e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80048ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80048ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80048f0:	2300      	movs	r3, #0
 80048f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80048f4:	2301      	movs	r3, #1
 80048f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048f8:	2302      	movs	r3, #2
 80048fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80048fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004900:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004902:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8004906:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004908:	f107 0318 	add.w	r3, r7, #24
 800490c:	4618      	mov	r0, r3
 800490e:	f004 fdd1 	bl	80094b4 <HAL_RCC_OscConfig>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004918:	f000 f83a 	bl	8004990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800491c:	230f      	movs	r3, #15
 800491e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004920:	2302      	movs	r3, #2
 8004922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004928:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800492c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004932:	1d3b      	adds	r3, r7, #4
 8004934:	2102      	movs	r1, #2
 8004936:	4618      	mov	r0, r3
 8004938:	f005 f83e 	bl	80099b8 <HAL_RCC_ClockConfig>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004942:	f000 f825 	bl	8004990 <Error_Handler>
  }
}
 8004946:	bf00      	nop
 8004948:	3740      	adds	r7, #64	@ 0x40
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004960:	d102      	bne.n	8004968 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8004962:	f001 ffe5 	bl	8006930 <HAL_IncTick>
  else if(htim->Instance == TIM7){
	  TIMER_CALLBACK();
  }

  /* USER CODE END Callback 1 */
}
 8004966:	e00b      	b.n	8004980 <HAL_TIM_PeriodElapsedCallback+0x30>
  else if(htim->Instance == TIM7){
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a06      	ldr	r2, [pc, #24]	@ (8004988 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d106      	bne.n	8004980 <HAL_TIM_PeriodElapsedCallback+0x30>
	  TIMER_CALLBACK();
 8004972:	4b06      	ldr	r3, [pc, #24]	@ (800498c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800497a:	33ff      	adds	r3, #255	@ 0xff
 800497c:	4a03      	ldr	r2, [pc, #12]	@ (800498c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800497e:	6013      	str	r3, [r2, #0]
}
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40001400 	.word	0x40001400
 800498c:	20000548 	.word	0x20000548

08004990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004994:	b672      	cpsid	i
}
 8004996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004998:	bf00      	nop
 800499a:	e7fd      	b.n	8004998 <Error_Handler+0x8>

0800499c <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80049a0:	4b0d      	ldr	r3, [pc, #52]	@ (80049d8 <MX_SDIO_SD_Init+0x3c>)
 80049a2:	4a0e      	ldr	r2, [pc, #56]	@ (80049dc <MX_SDIO_SD_Init+0x40>)
 80049a4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80049a6:	4b0c      	ldr	r3, [pc, #48]	@ (80049d8 <MX_SDIO_SD_Init+0x3c>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80049ac:	4b0a      	ldr	r3, [pc, #40]	@ (80049d8 <MX_SDIO_SD_Init+0x3c>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80049b2:	4b09      	ldr	r3, [pc, #36]	@ (80049d8 <MX_SDIO_SD_Init+0x3c>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80049b8:	4b07      	ldr	r3, [pc, #28]	@ (80049d8 <MX_SDIO_SD_Init+0x3c>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80049be:	4b06      	ldr	r3, [pc, #24]	@ (80049d8 <MX_SDIO_SD_Init+0x3c>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 255;
 80049c4:	4b04      	ldr	r3, [pc, #16]	@ (80049d8 <MX_SDIO_SD_Init+0x3c>)
 80049c6:	22ff      	movs	r2, #255	@ 0xff
 80049c8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.ClockDiv = 255;
 80049ca:	4b03      	ldr	r3, [pc, #12]	@ (80049d8 <MX_SDIO_SD_Init+0x3c>)
 80049cc:	22ff      	movs	r2, #255	@ 0xff
 80049ce:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 2 */

}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr
 80049d8:	20000894 	.word	0x20000894
 80049dc:	40018000 	.word	0x40018000

080049e0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08a      	sub	sp, #40	@ 0x28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e8:	f107 0318 	add.w	r3, r7, #24
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	605a      	str	r2, [r3, #4]
 80049f2:	609a      	str	r2, [r3, #8]
 80049f4:	60da      	str	r2, [r3, #12]
  if(sdHandle->Instance==SDIO)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a22      	ldr	r2, [pc, #136]	@ (8004a84 <HAL_SD_MspInit+0xa4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d13c      	bne.n	8004a7a <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004a00:	4b21      	ldr	r3, [pc, #132]	@ (8004a88 <HAL_SD_MspInit+0xa8>)
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	4a20      	ldr	r2, [pc, #128]	@ (8004a88 <HAL_SD_MspInit+0xa8>)
 8004a06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a0a:	6153      	str	r3, [r2, #20]
 8004a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004a88 <HAL_SD_MspInit+0xa8>)
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a18:	4b1b      	ldr	r3, [pc, #108]	@ (8004a88 <HAL_SD_MspInit+0xa8>)
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	4a1a      	ldr	r2, [pc, #104]	@ (8004a88 <HAL_SD_MspInit+0xa8>)
 8004a1e:	f043 0310 	orr.w	r3, r3, #16
 8004a22:	6193      	str	r3, [r2, #24]
 8004a24:	4b18      	ldr	r3, [pc, #96]	@ (8004a88 <HAL_SD_MspInit+0xa8>)
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a30:	4b15      	ldr	r3, [pc, #84]	@ (8004a88 <HAL_SD_MspInit+0xa8>)
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	4a14      	ldr	r2, [pc, #80]	@ (8004a88 <HAL_SD_MspInit+0xa8>)
 8004a36:	f043 0320 	orr.w	r3, r3, #32
 8004a3a:	6193      	str	r3, [r2, #24]
 8004a3c:	4b12      	ldr	r3, [pc, #72]	@ (8004a88 <HAL_SD_MspInit+0xa8>)
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8004a48:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8004a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a52:	2303      	movs	r3, #3
 8004a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a56:	f107 0318 	add.w	r3, r7, #24
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	480b      	ldr	r0, [pc, #44]	@ (8004a8c <HAL_SD_MspInit+0xac>)
 8004a5e:	f002 fd0b 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a62:	2304      	movs	r3, #4
 8004a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a66:	2302      	movs	r3, #2
 8004a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a6e:	f107 0318 	add.w	r3, r7, #24
 8004a72:	4619      	mov	r1, r3
 8004a74:	4806      	ldr	r0, [pc, #24]	@ (8004a90 <HAL_SD_MspInit+0xb0>)
 8004a76:	f002 fcff 	bl	8007478 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8004a7a:	bf00      	nop
 8004a7c:	3728      	adds	r7, #40	@ 0x28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40018000 	.word	0x40018000
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40011000 	.word	0x40011000
 8004a90:	40011400 	.word	0x40011400

08004a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004a9a:	4b18      	ldr	r3, [pc, #96]	@ (8004afc <HAL_MspInit+0x68>)
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	4a17      	ldr	r2, [pc, #92]	@ (8004afc <HAL_MspInit+0x68>)
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	6193      	str	r3, [r2, #24]
 8004aa6:	4b15      	ldr	r3, [pc, #84]	@ (8004afc <HAL_MspInit+0x68>)
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	60bb      	str	r3, [r7, #8]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ab2:	4b12      	ldr	r3, [pc, #72]	@ (8004afc <HAL_MspInit+0x68>)
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	4a11      	ldr	r2, [pc, #68]	@ (8004afc <HAL_MspInit+0x68>)
 8004ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004abc:	61d3      	str	r3, [r2, #28]
 8004abe:	4b0f      	ldr	r3, [pc, #60]	@ (8004afc <HAL_MspInit+0x68>)
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004aca:	2200      	movs	r2, #0
 8004acc:	210f      	movs	r1, #15
 8004ace:	f06f 0001 	mvn.w	r0, #1
 8004ad2:	f002 f822 	bl	8006b1a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b00 <HAL_MspInit+0x6c>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	4a04      	ldr	r2, [pc, #16]	@ (8004b00 <HAL_MspInit+0x6c>)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40010000 	.word	0x40010000

08004b04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08e      	sub	sp, #56	@ 0x38
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004b1a:	4b34      	ldr	r3, [pc, #208]	@ (8004bec <HAL_InitTick+0xe8>)
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	4a33      	ldr	r2, [pc, #204]	@ (8004bec <HAL_InitTick+0xe8>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	61d3      	str	r3, [r2, #28]
 8004b26:	4b31      	ldr	r3, [pc, #196]	@ (8004bec <HAL_InitTick+0xe8>)
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004b32:	f107 0210 	add.w	r2, r7, #16
 8004b36:	f107 0314 	add.w	r3, r7, #20
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f005 f8ab 	bl	8009c98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d103      	bne.n	8004b54 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004b4c:	f005 f87c 	bl	8009c48 <HAL_RCC_GetPCLK1Freq>
 8004b50:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b52:	e004      	b.n	8004b5e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004b54:	f005 f878 	bl	8009c48 <HAL_RCC_GetPCLK1Freq>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b60:	4a23      	ldr	r2, [pc, #140]	@ (8004bf0 <HAL_InitTick+0xec>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	0c9b      	lsrs	r3, r3, #18
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004b6c:	4b21      	ldr	r3, [pc, #132]	@ (8004bf4 <HAL_InitTick+0xf0>)
 8004b6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004b72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8004b74:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf4 <HAL_InitTick+0xf0>)
 8004b76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004b7a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8004b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf4 <HAL_InitTick+0xf0>)
 8004b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b80:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8004b82:	4b1c      	ldr	r3, [pc, #112]	@ (8004bf4 <HAL_InitTick+0xf0>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b88:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf4 <HAL_InitTick+0xf0>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b8e:	4b19      	ldr	r3, [pc, #100]	@ (8004bf4 <HAL_InitTick+0xf0>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8004b94:	4817      	ldr	r0, [pc, #92]	@ (8004bf4 <HAL_InitTick+0xf0>)
 8004b96:	f006 f855 	bl	800ac44 <HAL_TIM_Base_Init>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d11b      	bne.n	8004be0 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8004ba8:	4812      	ldr	r0, [pc, #72]	@ (8004bf4 <HAL_InitTick+0xf0>)
 8004baa:	f006 f89b 	bl	800ace4 <HAL_TIM_Base_Start_IT>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004bb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d111      	bne.n	8004be0 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004bbc:	201c      	movs	r0, #28
 8004bbe:	f001 ffc8 	bl	8006b52 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b0f      	cmp	r3, #15
 8004bc6:	d808      	bhi.n	8004bda <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8004bc8:	2200      	movs	r2, #0
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	201c      	movs	r0, #28
 8004bce:	f001 ffa4 	bl	8006b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004bd2:	4a09      	ldr	r2, [pc, #36]	@ (8004bf8 <HAL_InitTick+0xf4>)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	e002      	b.n	8004be0 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004be0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3738      	adds	r7, #56	@ 0x38
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	431bde83 	.word	0x431bde83
 8004bf4:	20000918 	.word	0x20000918
 8004bf8:	20000038 	.word	0x20000038

08004bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004c00:	bf00      	nop
 8004c02:	e7fd      	b.n	8004c00 <NMI_Handler+0x4>

08004c04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c08:	bf00      	nop
 8004c0a:	e7fd      	b.n	8004c08 <HardFault_Handler+0x4>

08004c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c10:	bf00      	nop
 8004c12:	e7fd      	b.n	8004c10 <MemManage_Handler+0x4>

08004c14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c18:	bf00      	nop
 8004c1a:	e7fd      	b.n	8004c18 <BusFault_Handler+0x4>

08004c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c20:	bf00      	nop
 8004c22:	e7fd      	b.n	8004c20 <UsageFault_Handler+0x4>

08004c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c28:	bf00      	nop
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004c34:	4802      	ldr	r0, [pc, #8]	@ (8004c40 <DMA1_Channel4_IRQHandler+0x10>)
 8004c36:	f002 f9b5 	bl	8006fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000acc 	.word	0x20000acc

08004c44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004c48:	4802      	ldr	r0, [pc, #8]	@ (8004c54 <TIM2_IRQHandler+0x10>)
 8004c4a:	f006 f9bd 	bl	800afc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004c4e:	bf00      	nop
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000918 	.word	0x20000918

08004c58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004c5c:	4802      	ldr	r0, [pc, #8]	@ (8004c68 <TIM3_IRQHandler+0x10>)
 8004c5e:	f006 f9b3 	bl	800afc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004c62:	bf00      	nop
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000964 	.word	0x20000964

08004c6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c70:	4802      	ldr	r0, [pc, #8]	@ (8004c7c <USART1_IRQHandler+0x10>)
 8004c72:	f007 f925 	bl	800bec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c76:	bf00      	nop
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	200009f4 	.word	0x200009f4

08004c80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004c84:	4802      	ldr	r0, [pc, #8]	@ (8004c90 <USART2_IRQHandler+0x10>)
 8004c86:	f007 f91b 	bl	800bec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004c8a:	bf00      	nop
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000a3c 	.word	0x20000a3c

08004c94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004c98:	4802      	ldr	r0, [pc, #8]	@ (8004ca4 <USART3_IRQHandler+0x10>)
 8004c9a:	f007 f911 	bl	800bec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000a84 	.word	0x20000a84

08004ca8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004cac:	4802      	ldr	r0, [pc, #8]	@ (8004cb8 <TIM7_IRQHandler+0x10>)
 8004cae:	f006 f98b 	bl	800afc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200009ac 	.word	0x200009ac

08004cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cc4:	4a14      	ldr	r2, [pc, #80]	@ (8004d18 <_sbrk+0x5c>)
 8004cc6:	4b15      	ldr	r3, [pc, #84]	@ (8004d1c <_sbrk+0x60>)
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cd0:	4b13      	ldr	r3, [pc, #76]	@ (8004d20 <_sbrk+0x64>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004cd8:	4b11      	ldr	r3, [pc, #68]	@ (8004d20 <_sbrk+0x64>)
 8004cda:	4a12      	ldr	r2, [pc, #72]	@ (8004d24 <_sbrk+0x68>)
 8004cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cde:	4b10      	ldr	r3, [pc, #64]	@ (8004d20 <_sbrk+0x64>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d207      	bcs.n	8004cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004cec:	f00f f8e8 	bl	8013ec0 <__errno>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	220c      	movs	r2, #12
 8004cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfa:	e009      	b.n	8004d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cfc:	4b08      	ldr	r3, [pc, #32]	@ (8004d20 <_sbrk+0x64>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d02:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <_sbrk+0x64>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	4a05      	ldr	r2, [pc, #20]	@ (8004d20 <_sbrk+0x64>)
 8004d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	2000c000 	.word	0x2000c000
 8004d1c:	00004000 	.word	0x00004000
 8004d20:	20000960 	.word	0x20000960
 8004d24:	20002da8 	.word	0x20002da8

08004d28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d2c:	bf00      	nop
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08e      	sub	sp, #56	@ 0x38
 8004d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	605a      	str	r2, [r3, #4]
 8004d44:	609a      	str	r2, [r3, #8]
 8004d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d48:	f107 0320 	add.w	r3, r7, #32
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d52:	1d3b      	adds	r3, r7, #4
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	605a      	str	r2, [r3, #4]
 8004d5a:	609a      	str	r2, [r3, #8]
 8004d5c:	60da      	str	r2, [r3, #12]
 8004d5e:	611a      	str	r2, [r3, #16]
 8004d60:	615a      	str	r2, [r3, #20]
 8004d62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004d64:	4b37      	ldr	r3, [pc, #220]	@ (8004e44 <MX_TIM3_Init+0x110>)
 8004d66:	4a38      	ldr	r2, [pc, #224]	@ (8004e48 <MX_TIM3_Init+0x114>)
 8004d68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8004d6a:	4b36      	ldr	r3, [pc, #216]	@ (8004e44 <MX_TIM3_Init+0x110>)
 8004d6c:	2247      	movs	r2, #71	@ 0x47
 8004d6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d70:	4b34      	ldr	r3, [pc, #208]	@ (8004e44 <MX_TIM3_Init+0x110>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004d76:	4b33      	ldr	r3, [pc, #204]	@ (8004e44 <MX_TIM3_Init+0x110>)
 8004d78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d7e:	4b31      	ldr	r3, [pc, #196]	@ (8004e44 <MX_TIM3_Init+0x110>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d84:	4b2f      	ldr	r3, [pc, #188]	@ (8004e44 <MX_TIM3_Init+0x110>)
 8004d86:	2280      	movs	r2, #128	@ 0x80
 8004d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004d8a:	482e      	ldr	r0, [pc, #184]	@ (8004e44 <MX_TIM3_Init+0x110>)
 8004d8c:	f005 ff5a 	bl	800ac44 <HAL_TIM_Base_Init>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004d96:	f7ff fdfb 	bl	8004990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004da0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004da4:	4619      	mov	r1, r3
 8004da6:	4827      	ldr	r0, [pc, #156]	@ (8004e44 <MX_TIM3_Init+0x110>)
 8004da8:	f006 fad8 	bl	800b35c <HAL_TIM_ConfigClockSource>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004db2:	f7ff fded 	bl	8004990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004db6:	4823      	ldr	r0, [pc, #140]	@ (8004e44 <MX_TIM3_Init+0x110>)
 8004db8:	f005 fff4 	bl	800ada4 <HAL_TIM_PWM_Init>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004dc2:	f7ff fde5 	bl	8004990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004dce:	f107 0320 	add.w	r3, r7, #32
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	481b      	ldr	r0, [pc, #108]	@ (8004e44 <MX_TIM3_Init+0x110>)
 8004dd6:	f006 fe8d 	bl	800baf4 <HAL_TIMEx_MasterConfigSynchronization>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004de0:	f7ff fdd6 	bl	8004990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004de4:	2360      	movs	r3, #96	@ 0x60
 8004de6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004df4:	1d3b      	adds	r3, r7, #4
 8004df6:	2200      	movs	r2, #0
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4812      	ldr	r0, [pc, #72]	@ (8004e44 <MX_TIM3_Init+0x110>)
 8004dfc:	f006 f9ec 	bl	800b1d8 <HAL_TIM_PWM_ConfigChannel>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004e06:	f7ff fdc3 	bl	8004990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e0a:	1d3b      	adds	r3, r7, #4
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	4619      	mov	r1, r3
 8004e10:	480c      	ldr	r0, [pc, #48]	@ (8004e44 <MX_TIM3_Init+0x110>)
 8004e12:	f006 f9e1 	bl	800b1d8 <HAL_TIM_PWM_ConfigChannel>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004e1c:	f7ff fdb8 	bl	8004990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004e20:	1d3b      	adds	r3, r7, #4
 8004e22:	2208      	movs	r2, #8
 8004e24:	4619      	mov	r1, r3
 8004e26:	4807      	ldr	r0, [pc, #28]	@ (8004e44 <MX_TIM3_Init+0x110>)
 8004e28:	f006 f9d6 	bl	800b1d8 <HAL_TIM_PWM_ConfigChannel>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8004e32:	f7ff fdad 	bl	8004990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004e36:	4803      	ldr	r0, [pc, #12]	@ (8004e44 <MX_TIM3_Init+0x110>)
 8004e38:	f000 f880 	bl	8004f3c <HAL_TIM_MspPostInit>

}
 8004e3c:	bf00      	nop
 8004e3e:	3738      	adds	r7, #56	@ 0x38
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20000964 	.word	0x20000964
 8004e48:	40000400 	.word	0x40000400

08004e4c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e52:	463b      	mov	r3, r7
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004e5a:	4b15      	ldr	r3, [pc, #84]	@ (8004eb0 <MX_TIM7_Init+0x64>)
 8004e5c:	4a15      	ldr	r2, [pc, #84]	@ (8004eb4 <MX_TIM7_Init+0x68>)
 8004e5e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8004e60:	4b13      	ldr	r3, [pc, #76]	@ (8004eb0 <MX_TIM7_Init+0x64>)
 8004e62:	2247      	movs	r2, #71	@ 0x47
 8004e64:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e66:	4b12      	ldr	r3, [pc, #72]	@ (8004eb0 <MX_TIM7_Init+0x64>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8004e6c:	4b10      	ldr	r3, [pc, #64]	@ (8004eb0 <MX_TIM7_Init+0x64>)
 8004e6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e72:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e74:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb0 <MX_TIM7_Init+0x64>)
 8004e76:	2280      	movs	r2, #128	@ 0x80
 8004e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004e7a:	480d      	ldr	r0, [pc, #52]	@ (8004eb0 <MX_TIM7_Init+0x64>)
 8004e7c:	f005 fee2 	bl	800ac44 <HAL_TIM_Base_Init>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004e86:	f7ff fd83 	bl	8004990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004e92:	463b      	mov	r3, r7
 8004e94:	4619      	mov	r1, r3
 8004e96:	4806      	ldr	r0, [pc, #24]	@ (8004eb0 <MX_TIM7_Init+0x64>)
 8004e98:	f006 fe2c 	bl	800baf4 <HAL_TIMEx_MasterConfigSynchronization>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8004ea2:	f7ff fd75 	bl	8004990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	200009ac 	.word	0x200009ac
 8004eb4:	40001400 	.word	0x40001400

08004eb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1a      	ldr	r2, [pc, #104]	@ (8004f30 <HAL_TIM_Base_MspInit+0x78>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d114      	bne.n	8004ef4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004eca:	4b1a      	ldr	r3, [pc, #104]	@ (8004f34 <HAL_TIM_Base_MspInit+0x7c>)
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	4a19      	ldr	r2, [pc, #100]	@ (8004f34 <HAL_TIM_Base_MspInit+0x7c>)
 8004ed0:	f043 0302 	orr.w	r3, r3, #2
 8004ed4:	61d3      	str	r3, [r2, #28]
 8004ed6:	4b17      	ldr	r3, [pc, #92]	@ (8004f34 <HAL_TIM_Base_MspInit+0x7c>)
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2105      	movs	r1, #5
 8004ee6:	201d      	movs	r0, #29
 8004ee8:	f001 fe17 	bl	8006b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004eec:	201d      	movs	r0, #29
 8004eee:	f001 fe30 	bl	8006b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004ef2:	e018      	b.n	8004f26 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8004f38 <HAL_TIM_Base_MspInit+0x80>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d113      	bne.n	8004f26 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004efe:	4b0d      	ldr	r3, [pc, #52]	@ (8004f34 <HAL_TIM_Base_MspInit+0x7c>)
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	4a0c      	ldr	r2, [pc, #48]	@ (8004f34 <HAL_TIM_Base_MspInit+0x7c>)
 8004f04:	f043 0320 	orr.w	r3, r3, #32
 8004f08:	61d3      	str	r3, [r2, #28]
 8004f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f34 <HAL_TIM_Base_MspInit+0x7c>)
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	60bb      	str	r3, [r7, #8]
 8004f14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8004f16:	2200      	movs	r2, #0
 8004f18:	2105      	movs	r1, #5
 8004f1a:	2037      	movs	r0, #55	@ 0x37
 8004f1c:	f001 fdfd 	bl	8006b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004f20:	2037      	movs	r0, #55	@ 0x37
 8004f22:	f001 fe16 	bl	8006b52 <HAL_NVIC_EnableIRQ>
}
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40001400 	.word	0x40001400

08004f3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f44:	f107 0310 	add.w	r3, r7, #16
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc4 <HAL_TIM_MspPostInit+0x88>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d12f      	bne.n	8004fbc <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc8 <HAL_TIM_MspPostInit+0x8c>)
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	4a19      	ldr	r2, [pc, #100]	@ (8004fc8 <HAL_TIM_MspPostInit+0x8c>)
 8004f62:	f043 0304 	orr.w	r3, r3, #4
 8004f66:	6193      	str	r3, [r2, #24]
 8004f68:	4b17      	ldr	r3, [pc, #92]	@ (8004fc8 <HAL_TIM_MspPostInit+0x8c>)
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f74:	4b14      	ldr	r3, [pc, #80]	@ (8004fc8 <HAL_TIM_MspPostInit+0x8c>)
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	4a13      	ldr	r2, [pc, #76]	@ (8004fc8 <HAL_TIM_MspPostInit+0x8c>)
 8004f7a:	f043 0308 	orr.w	r3, r3, #8
 8004f7e:	6193      	str	r3, [r2, #24]
 8004f80:	4b11      	ldr	r3, [pc, #68]	@ (8004fc8 <HAL_TIM_MspPostInit+0x8c>)
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	60bb      	str	r3, [r7, #8]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f8c:	23c0      	movs	r3, #192	@ 0xc0
 8004f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f90:	2302      	movs	r3, #2
 8004f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f94:	2302      	movs	r3, #2
 8004f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f98:	f107 0310 	add.w	r3, r7, #16
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	480b      	ldr	r0, [pc, #44]	@ (8004fcc <HAL_TIM_MspPostInit+0x90>)
 8004fa0:	f002 fa6a 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa8:	2302      	movs	r3, #2
 8004faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fac:	2302      	movs	r3, #2
 8004fae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fb0:	f107 0310 	add.w	r3, r7, #16
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4806      	ldr	r0, [pc, #24]	@ (8004fd0 <HAL_TIM_MspPostInit+0x94>)
 8004fb8:	f002 fa5e 	bl	8007478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004fbc:	bf00      	nop
 8004fbe:	3720      	adds	r7, #32
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	40010800 	.word	0x40010800
 8004fd0:	40010c00 	.word	0x40010c00

08004fd4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004fd8:	4b11      	ldr	r3, [pc, #68]	@ (8005020 <MX_USART1_UART_Init+0x4c>)
 8004fda:	4a12      	ldr	r2, [pc, #72]	@ (8005024 <MX_USART1_UART_Init+0x50>)
 8004fdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004fde:	4b10      	ldr	r3, [pc, #64]	@ (8005020 <MX_USART1_UART_Init+0x4c>)
 8004fe0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004fe4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8005020 <MX_USART1_UART_Init+0x4c>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004fec:	4b0c      	ldr	r3, [pc, #48]	@ (8005020 <MX_USART1_UART_Init+0x4c>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8005020 <MX_USART1_UART_Init+0x4c>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004ff8:	4b09      	ldr	r3, [pc, #36]	@ (8005020 <MX_USART1_UART_Init+0x4c>)
 8004ffa:	220c      	movs	r2, #12
 8004ffc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ffe:	4b08      	ldr	r3, [pc, #32]	@ (8005020 <MX_USART1_UART_Init+0x4c>)
 8005000:	2200      	movs	r2, #0
 8005002:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005004:	4b06      	ldr	r3, [pc, #24]	@ (8005020 <MX_USART1_UART_Init+0x4c>)
 8005006:	2200      	movs	r2, #0
 8005008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800500a:	4805      	ldr	r0, [pc, #20]	@ (8005020 <MX_USART1_UART_Init+0x4c>)
 800500c:	f006 fdf0 	bl	800bbf0 <HAL_UART_Init>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005016:	f7ff fcbb 	bl	8004990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800501a:	bf00      	nop
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	200009f4 	.word	0x200009f4
 8005024:	40013800 	.word	0x40013800

08005028 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800502c:	4b11      	ldr	r3, [pc, #68]	@ (8005074 <MX_USART2_UART_Init+0x4c>)
 800502e:	4a12      	ldr	r2, [pc, #72]	@ (8005078 <MX_USART2_UART_Init+0x50>)
 8005030:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005032:	4b10      	ldr	r3, [pc, #64]	@ (8005074 <MX_USART2_UART_Init+0x4c>)
 8005034:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005038:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800503a:	4b0e      	ldr	r3, [pc, #56]	@ (8005074 <MX_USART2_UART_Init+0x4c>)
 800503c:	2200      	movs	r2, #0
 800503e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005040:	4b0c      	ldr	r3, [pc, #48]	@ (8005074 <MX_USART2_UART_Init+0x4c>)
 8005042:	2200      	movs	r2, #0
 8005044:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005046:	4b0b      	ldr	r3, [pc, #44]	@ (8005074 <MX_USART2_UART_Init+0x4c>)
 8005048:	2200      	movs	r2, #0
 800504a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800504c:	4b09      	ldr	r3, [pc, #36]	@ (8005074 <MX_USART2_UART_Init+0x4c>)
 800504e:	220c      	movs	r2, #12
 8005050:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005052:	4b08      	ldr	r3, [pc, #32]	@ (8005074 <MX_USART2_UART_Init+0x4c>)
 8005054:	2200      	movs	r2, #0
 8005056:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005058:	4b06      	ldr	r3, [pc, #24]	@ (8005074 <MX_USART2_UART_Init+0x4c>)
 800505a:	2200      	movs	r2, #0
 800505c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800505e:	4805      	ldr	r0, [pc, #20]	@ (8005074 <MX_USART2_UART_Init+0x4c>)
 8005060:	f006 fdc6 	bl	800bbf0 <HAL_UART_Init>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800506a:	f7ff fc91 	bl	8004990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800506e:	bf00      	nop
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20000a3c 	.word	0x20000a3c
 8005078:	40004400 	.word	0x40004400

0800507c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005080:	4b11      	ldr	r3, [pc, #68]	@ (80050c8 <MX_USART3_UART_Init+0x4c>)
 8005082:	4a12      	ldr	r2, [pc, #72]	@ (80050cc <MX_USART3_UART_Init+0x50>)
 8005084:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005086:	4b10      	ldr	r3, [pc, #64]	@ (80050c8 <MX_USART3_UART_Init+0x4c>)
 8005088:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800508c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800508e:	4b0e      	ldr	r3, [pc, #56]	@ (80050c8 <MX_USART3_UART_Init+0x4c>)
 8005090:	2200      	movs	r2, #0
 8005092:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005094:	4b0c      	ldr	r3, [pc, #48]	@ (80050c8 <MX_USART3_UART_Init+0x4c>)
 8005096:	2200      	movs	r2, #0
 8005098:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800509a:	4b0b      	ldr	r3, [pc, #44]	@ (80050c8 <MX_USART3_UART_Init+0x4c>)
 800509c:	2200      	movs	r2, #0
 800509e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80050a0:	4b09      	ldr	r3, [pc, #36]	@ (80050c8 <MX_USART3_UART_Init+0x4c>)
 80050a2:	220c      	movs	r2, #12
 80050a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050a6:	4b08      	ldr	r3, [pc, #32]	@ (80050c8 <MX_USART3_UART_Init+0x4c>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80050ac:	4b06      	ldr	r3, [pc, #24]	@ (80050c8 <MX_USART3_UART_Init+0x4c>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80050b2:	4805      	ldr	r0, [pc, #20]	@ (80050c8 <MX_USART3_UART_Init+0x4c>)
 80050b4:	f006 fd9c 	bl	800bbf0 <HAL_UART_Init>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80050be:	f7ff fc67 	bl	8004990 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000a84 	.word	0x20000a84
 80050cc:	40004800 	.word	0x40004800

080050d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08e      	sub	sp, #56	@ 0x38
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	605a      	str	r2, [r3, #4]
 80050e2:	609a      	str	r2, [r3, #8]
 80050e4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a7c      	ldr	r2, [pc, #496]	@ (80052dc <HAL_UART_MspInit+0x20c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d161      	bne.n	80051b4 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80050f0:	4b7b      	ldr	r3, [pc, #492]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	4a7a      	ldr	r2, [pc, #488]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 80050f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050fa:	6193      	str	r3, [r2, #24]
 80050fc:	4b78      	ldr	r3, [pc, #480]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005104:	623b      	str	r3, [r7, #32]
 8005106:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005108:	4b75      	ldr	r3, [pc, #468]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	4a74      	ldr	r2, [pc, #464]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 800510e:	f043 0304 	orr.w	r3, r3, #4
 8005112:	6193      	str	r3, [r2, #24]
 8005114:	4b72      	ldr	r3, [pc, #456]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005120:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005124:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005126:	2302      	movs	r3, #2
 8005128:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800512a:	2303      	movs	r3, #3
 800512c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800512e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005132:	4619      	mov	r1, r3
 8005134:	486b      	ldr	r0, [pc, #428]	@ (80052e4 <HAL_UART_MspInit+0x214>)
 8005136:	f002 f99f 	bl	8007478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800513a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005140:	2300      	movs	r3, #0
 8005142:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005144:	2300      	movs	r3, #0
 8005146:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800514c:	4619      	mov	r1, r3
 800514e:	4865      	ldr	r0, [pc, #404]	@ (80052e4 <HAL_UART_MspInit+0x214>)
 8005150:	f002 f992 	bl	8007478 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005154:	4b64      	ldr	r3, [pc, #400]	@ (80052e8 <HAL_UART_MspInit+0x218>)
 8005156:	4a65      	ldr	r2, [pc, #404]	@ (80052ec <HAL_UART_MspInit+0x21c>)
 8005158:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800515a:	4b63      	ldr	r3, [pc, #396]	@ (80052e8 <HAL_UART_MspInit+0x218>)
 800515c:	2210      	movs	r2, #16
 800515e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005160:	4b61      	ldr	r3, [pc, #388]	@ (80052e8 <HAL_UART_MspInit+0x218>)
 8005162:	2200      	movs	r2, #0
 8005164:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005166:	4b60      	ldr	r3, [pc, #384]	@ (80052e8 <HAL_UART_MspInit+0x218>)
 8005168:	2280      	movs	r2, #128	@ 0x80
 800516a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800516c:	4b5e      	ldr	r3, [pc, #376]	@ (80052e8 <HAL_UART_MspInit+0x218>)
 800516e:	2200      	movs	r2, #0
 8005170:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005172:	4b5d      	ldr	r3, [pc, #372]	@ (80052e8 <HAL_UART_MspInit+0x218>)
 8005174:	2200      	movs	r2, #0
 8005176:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005178:	4b5b      	ldr	r3, [pc, #364]	@ (80052e8 <HAL_UART_MspInit+0x218>)
 800517a:	2200      	movs	r2, #0
 800517c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800517e:	4b5a      	ldr	r3, [pc, #360]	@ (80052e8 <HAL_UART_MspInit+0x218>)
 8005180:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005184:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005186:	4858      	ldr	r0, [pc, #352]	@ (80052e8 <HAL_UART_MspInit+0x218>)
 8005188:	f001 fcf2 	bl	8006b70 <HAL_DMA_Init>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8005192:	f7ff fbfd 	bl	8004990 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a53      	ldr	r2, [pc, #332]	@ (80052e8 <HAL_UART_MspInit+0x218>)
 800519a:	639a      	str	r2, [r3, #56]	@ 0x38
 800519c:	4a52      	ldr	r2, [pc, #328]	@ (80052e8 <HAL_UART_MspInit+0x218>)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80051a2:	2200      	movs	r2, #0
 80051a4:	2105      	movs	r1, #5
 80051a6:	2025      	movs	r0, #37	@ 0x25
 80051a8:	f001 fcb7 	bl	8006b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80051ac:	2025      	movs	r0, #37	@ 0x25
 80051ae:	f001 fcd0 	bl	8006b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80051b2:	e08e      	b.n	80052d2 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a4d      	ldr	r2, [pc, #308]	@ (80052f0 <HAL_UART_MspInit+0x220>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d138      	bne.n	8005230 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 80051be:	4b48      	ldr	r3, [pc, #288]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	4a47      	ldr	r2, [pc, #284]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 80051c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051c8:	61d3      	str	r3, [r2, #28]
 80051ca:	4b45      	ldr	r3, [pc, #276]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d2:	61bb      	str	r3, [r7, #24]
 80051d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051d6:	4b42      	ldr	r3, [pc, #264]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	4a41      	ldr	r2, [pc, #260]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 80051dc:	f043 0304 	orr.w	r3, r3, #4
 80051e0:	6193      	str	r3, [r2, #24]
 80051e2:	4b3f      	ldr	r3, [pc, #252]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051ee:	2304      	movs	r3, #4
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f2:	2302      	movs	r3, #2
 80051f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051f6:	2303      	movs	r3, #3
 80051f8:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051fe:	4619      	mov	r1, r3
 8005200:	4838      	ldr	r0, [pc, #224]	@ (80052e4 <HAL_UART_MspInit+0x214>)
 8005202:	f002 f939 	bl	8007478 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005206:	2308      	movs	r3, #8
 8005208:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800520a:	2300      	movs	r3, #0
 800520c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520e:	2300      	movs	r3, #0
 8005210:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005216:	4619      	mov	r1, r3
 8005218:	4832      	ldr	r0, [pc, #200]	@ (80052e4 <HAL_UART_MspInit+0x214>)
 800521a:	f002 f92d 	bl	8007478 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800521e:	2200      	movs	r2, #0
 8005220:	2105      	movs	r1, #5
 8005222:	2026      	movs	r0, #38	@ 0x26
 8005224:	f001 fc79 	bl	8006b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005228:	2026      	movs	r0, #38	@ 0x26
 800522a:	f001 fc92 	bl	8006b52 <HAL_NVIC_EnableIRQ>
}
 800522e:	e050      	b.n	80052d2 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART3)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a2f      	ldr	r2, [pc, #188]	@ (80052f4 <HAL_UART_MspInit+0x224>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d14b      	bne.n	80052d2 <HAL_UART_MspInit+0x202>
    __HAL_RCC_USART3_CLK_ENABLE();
 800523a:	4b29      	ldr	r3, [pc, #164]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	4a28      	ldr	r2, [pc, #160]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 8005240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005244:	61d3      	str	r3, [r2, #28]
 8005246:	4b26      	ldr	r3, [pc, #152]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005252:	4b23      	ldr	r3, [pc, #140]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	4a22      	ldr	r2, [pc, #136]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 8005258:	f043 0320 	orr.w	r3, r3, #32
 800525c:	6193      	str	r3, [r2, #24]
 800525e:	4b20      	ldr	r3, [pc, #128]	@ (80052e0 <HAL_UART_MspInit+0x210>)
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800526a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800526e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005270:	2302      	movs	r3, #2
 8005272:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005274:	2303      	movs	r3, #3
 8005276:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005278:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800527c:	4619      	mov	r1, r3
 800527e:	481e      	ldr	r0, [pc, #120]	@ (80052f8 <HAL_UART_MspInit+0x228>)
 8005280:	f002 f8fa 	bl	8007478 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005284:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800528a:	2300      	movs	r3, #0
 800528c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528e:	2300      	movs	r3, #0
 8005290:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005296:	4619      	mov	r1, r3
 8005298:	4817      	ldr	r0, [pc, #92]	@ (80052f8 <HAL_UART_MspInit+0x228>)
 800529a:	f002 f8ed 	bl	8007478 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 800529e:	4b17      	ldr	r3, [pc, #92]	@ (80052fc <HAL_UART_MspInit+0x22c>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80052aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ae:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80052b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80052ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80052bc:	4a0f      	ldr	r2, [pc, #60]	@ (80052fc <HAL_UART_MspInit+0x22c>)
 80052be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c0:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80052c2:	2200      	movs	r2, #0
 80052c4:	2105      	movs	r1, #5
 80052c6:	2027      	movs	r0, #39	@ 0x27
 80052c8:	f001 fc27 	bl	8006b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80052cc:	2027      	movs	r0, #39	@ 0x27
 80052ce:	f001 fc40 	bl	8006b52 <HAL_NVIC_EnableIRQ>
}
 80052d2:	bf00      	nop
 80052d4:	3738      	adds	r7, #56	@ 0x38
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	40013800 	.word	0x40013800
 80052e0:	40021000 	.word	0x40021000
 80052e4:	40010800 	.word	0x40010800
 80052e8:	20000acc 	.word	0x20000acc
 80052ec:	40020044 	.word	0x40020044
 80052f0:	40004400 	.word	0x40004400
 80052f4:	40004800 	.word	0x40004800
 80052f8:	40011400 	.word	0x40011400
 80052fc:	40010000 	.word	0x40010000

08005300 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005300:	f7ff fd12 	bl	8004d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005304:	480b      	ldr	r0, [pc, #44]	@ (8005334 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005306:	490c      	ldr	r1, [pc, #48]	@ (8005338 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005308:	4a0c      	ldr	r2, [pc, #48]	@ (800533c <LoopFillZerobss+0x16>)
  movs r3, #0
 800530a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800530c:	e002      	b.n	8005314 <LoopCopyDataInit>

0800530e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800530e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005312:	3304      	adds	r3, #4

08005314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005318:	d3f9      	bcc.n	800530e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800531a:	4a09      	ldr	r2, [pc, #36]	@ (8005340 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800531c:	4c09      	ldr	r4, [pc, #36]	@ (8005344 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800531e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005320:	e001      	b.n	8005326 <LoopFillZerobss>

08005322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005324:	3204      	adds	r2, #4

08005326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005328:	d3fb      	bcc.n	8005322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800532a:	f00e fdcf 	bl	8013ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800532e:	f7ff faa7 	bl	8004880 <main>
  bx lr
 8005332:	4770      	bx	lr
  ldr r0, =_sdata
 8005334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005338:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800533c:	08014a1c 	.word	0x08014a1c
  ldr r2, =_sbss
 8005340:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8005344:	20002da4 	.word	0x20002da4

08005348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005348:	e7fe      	b.n	8005348 <ADC1_2_IRQHandler>
	...

0800534c <AT24Cxx_get_max_addr>:
#include <stdio.h>

#include "AT24Cxx_stm32_hal.h"

uint16_t AT24Cxx_get_max_addr ( AT24Cxx_device_t* dev )
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	791b      	ldrb	r3, [r3, #4]
 8005358:	2b05      	cmp	r3, #5
 800535a:	d820      	bhi.n	800539e <AT24Cxx_get_max_addr+0x52>
 800535c:	a201      	add	r2, pc, #4	@ (adr r2, 8005364 <AT24Cxx_get_max_addr+0x18>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	0800537d 	.word	0x0800537d
 8005368:	08005381 	.word	0x08005381
 800536c:	08005387 	.word	0x08005387
 8005370:	0800538d 	.word	0x0800538d
 8005374:	08005393 	.word	0x08005393
 8005378:	08005399 	.word	0x08005399
	case AT24C01:
		return AT24C01_MAX_ADDR;
 800537c:	237f      	movs	r3, #127	@ 0x7f
 800537e:	e00f      	b.n	80053a0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C32:
		return AT24C32_MAX_ADDR;
 8005380:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005384:	e00c      	b.n	80053a0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C64:
		return AT24C64_MAX_ADDR;
 8005386:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800538a:	e009      	b.n	80053a0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C128:
		return AT24C128_MAX_ADDR;
 800538c:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8005390:	e006      	b.n	80053a0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C256:
		return AT24C256_MAX_ADDR;
 8005392:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005396:	e003      	b.n	80053a0 <AT24Cxx_get_max_addr+0x54>
		break;
		//not supported yet, will overflow
	case AT24C512:
		return AT24C512_MAX_ADDR;
 8005398:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800539c:	e000      	b.n	80053a0 <AT24Cxx_get_max_addr+0x54>
		break;
	default:
		return 0;
 800539e:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop

080053ac <AT24Cxx_get_pg_size>:

uint16_t AT24Cxx_get_pg_size ( AT24Cxx_device_t* dev )
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	791b      	ldrb	r3, [r3, #4]
 80053b8:	2b05      	cmp	r3, #5
 80053ba:	d81b      	bhi.n	80053f4 <AT24Cxx_get_pg_size+0x48>
 80053bc:	a201      	add	r2, pc, #4	@ (adr r2, 80053c4 <AT24Cxx_get_pg_size+0x18>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	080053dd 	.word	0x080053dd
 80053c8:	080053e1 	.word	0x080053e1
 80053cc:	080053e5 	.word	0x080053e5
 80053d0:	080053e9 	.word	0x080053e9
 80053d4:	080053ed 	.word	0x080053ed
 80053d8:	080053f1 	.word	0x080053f1
	case AT24C01:
		return AT24C01_PG_SIZE;
 80053dc:	2308      	movs	r3, #8
 80053de:	e00a      	b.n	80053f6 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C32:
		return AT24C32_PG_SIZE;
 80053e0:	2320      	movs	r3, #32
 80053e2:	e008      	b.n	80053f6 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C64:
		return AT24C64_PG_SIZE;
 80053e4:	2320      	movs	r3, #32
 80053e6:	e006      	b.n	80053f6 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C128:
		return AT24C128_PG_SIZE;
 80053e8:	2340      	movs	r3, #64	@ 0x40
 80053ea:	e004      	b.n	80053f6 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C256:
		return AT24C256_PG_SIZE;
 80053ec:	2340      	movs	r3, #64	@ 0x40
 80053ee:	e002      	b.n	80053f6 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C512:
		//not supported yet, will overflow
		return AT24C512_PG_SIZE;
 80053f0:	2380      	movs	r3, #128	@ 0x80
 80053f2:	e000      	b.n	80053f6 <AT24Cxx_get_pg_size+0x4a>
		break;
	default:
		return 0;
 80053f4:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr

08005400 <AT24Cxx_init>:

AT24Cxx_ERR_TypeDef AT24Cxx_init( AT24Cxx_devices_t* devices, 
	uint8_t init_dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	460b      	mov	r3, r1
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	72fb      	strb	r3, [r7, #11]
	//adds first device to AT32Cxx_devices array
	//further devices should be added by calling AT24Cxx_add_dev()
	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 800540e:	2114      	movs	r1, #20
 8005410:	2001      	movs	r0, #1
 8005412:	f00e fc73 	bl	8013cfc <calloc>
 8005416:	4603      	mov	r3, r0
 8005418:	613b      	str	r3, [r7, #16]
	if ( at == NULL )
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <AT24Cxx_init+0x26>
		return at_init_err;
 8005420:	f04f 33ff 	mov.w	r3, #4294967295
 8005424:	e028      	b.n	8005478 <AT24Cxx_init+0x78>

	for(uint8_t i = 0; i < 8; i++)
 8005426:	2300      	movs	r3, #0
 8005428:	75fb      	strb	r3, [r7, #23]
 800542a:	e007      	b.n	800543c <AT24Cxx_init+0x3c>
			devices->devices[i] = 0x00;
 800542c:	7dfa      	ldrb	r2, [r7, #23]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2100      	movs	r1, #0
 8005432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < 8; i++)
 8005436:	7dfb      	ldrb	r3, [r7, #23]
 8005438:	3301      	adds	r3, #1
 800543a:	75fb      	strb	r3, [r7, #23]
 800543c:	7dfb      	ldrb	r3, [r7, #23]
 800543e:	2b07      	cmp	r3, #7
 8005440:	d9f4      	bls.n	800542c <AT24Cxx_init+0x2c>

	at->dev_addr = init_dev_addr;
 8005442:	7afb      	ldrb	r3, [r7, #11]
 8005444:	b29a      	uxth	r2, r3
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2200      	movs	r2, #0
 800544e:	60da      	str	r2, [r3, #12]
	at->prev_dev = NULL;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2200      	movs	r2, #0
 8005454:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2205      	movs	r2, #5
 800545a:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2201      	movs	r2, #1
 8005466:	721a      	strb	r2, [r3, #8]
	devices->dev_count = 1;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[0] = at;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	601a      	str	r2, [r3, #0]

	return at_ok;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <AT24Cxx_add_dev>:

AT24Cxx_ERR_TypeDef AT24Cxx_add_dev( AT24Cxx_devices_t* devices, 
	uint8_t dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	460b      	mov	r3, r1
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	72fb      	strb	r3, [r7, #11]
	if(devices->dev_count == 0 || devices->dev_count > 8)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d004      	beq.n	80054a2 <AT24Cxx_add_dev+0x22>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d902      	bls.n	80054a8 <AT24Cxx_add_dev+0x28>
		return at_add_dev_err;
 80054a2:	f06f 0301 	mvn.w	r3, #1
 80054a6:	e03e      	b.n	8005526 <AT24Cxx_add_dev+0xa6>

	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 80054a8:	2114      	movs	r1, #20
 80054aa:	2001      	movs	r0, #1
 80054ac:	f00e fc26 	bl	8013cfc <calloc>
 80054b0:	4603      	mov	r3, r0
 80054b2:	617b      	str	r3, [r7, #20]
	if ( at == NULL )
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d102      	bne.n	80054c0 <AT24Cxx_add_dev+0x40>
		return at_add_dev_err;
 80054ba:	f06f 0301 	mvn.w	r3, #1
 80054be:	e032      	b.n	8005526 <AT24Cxx_add_dev+0xa6>

	at->dev_addr = dev_addr;
 80054c0:	7afb      	ldrb	r3, [r7, #11]
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2200      	movs	r2, #0
 80054cc:	60da      	str	r2, [r3, #12]
	at->prev_dev = devices->devices[devices->dev_count-1];
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054d4:	1e5a      	subs	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2205      	movs	r2, #5
 80054e4:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2201      	movs	r2, #1
 80054f0:	721a      	strb	r2, [r3, #8]
	devices->dev_count++;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054f8:	3301      	adds	r3, #1
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[devices->dev_count-1] = at;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005508:	1e5a      	subs	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6979      	ldr	r1, [r7, #20]
 800550e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//update previous device's next device
	devices->devices[devices->dev_count-2]->next_dev = at;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005518:	1e9a      	subs	r2, r3, #2
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	60da      	str	r2, [r3, #12]
	return at_ok;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <AT24Cxx_write_byte_buffer>:
	return at_w_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_write_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 800552e:	b5b0      	push	{r4, r5, r7, lr}
 8005530:	b08a      	sub	sp, #40	@ 0x28
 8005532:	af04      	add	r7, sp, #16
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	4611      	mov	r1, r2
 800553a:	461a      	mov	r2, r3
 800553c:	460b      	mov	r3, r1
 800553e:	80fb      	strh	r3, [r7, #6]
 8005540:	4613      	mov	r3, r2
 8005542:	80bb      	strh	r3, [r7, #4]
	//TODO checks

	uint8_t page_size = AT24Cxx_get_pg_size(dev);
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f7ff ff31 	bl	80053ac <AT24Cxx_get_pg_size>
 800554a:	4603      	mov	r3, r0
 800554c:	75bb      	strb	r3, [r7, #22]

	uint8_t page_remaining = page_size - mem_addr % page_size;
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	7dba      	ldrb	r2, [r7, #22]
 8005552:	fb93 f1f2 	sdiv	r1, r3, r2
 8005556:	fb01 f202 	mul.w	r2, r1, r2
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	b2db      	uxtb	r3, r3
 800555e:	7dba      	ldrb	r2, [r7, #22]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	757b      	strb	r3, [r7, #21]

	uint8_t page_writes = (buf_length - page_remaining) / page_size;
 8005564:	88ba      	ldrh	r2, [r7, #4]
 8005566:	7d7b      	ldrb	r3, [r7, #21]
 8005568:	1ad2      	subs	r2, r2, r3
 800556a:	7dbb      	ldrb	r3, [r7, #22]
 800556c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005570:	753b      	strb	r3, [r7, #20]
	uint8_t remainder_writes = (buf_length - page_remaining) % page_size;
 8005572:	88ba      	ldrh	r2, [r7, #4]
 8005574:	7d7b      	ldrb	r3, [r7, #21]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	7dba      	ldrb	r2, [r7, #22]
 800557a:	fb93 f1f2 	sdiv	r1, r3, r2
 800557e:	fb01 f202 	mul.w	r2, r1, r2
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	74fb      	strb	r3, [r7, #19]

	//finish first page
	if((mem_addr + page_remaining) > 0x00 &&
 8005586:	88fa      	ldrh	r2, [r7, #6]
 8005588:	7d7b      	ldrb	r3, [r7, #21]
 800558a:	4413      	add	r3, r2
 800558c:	2b00      	cmp	r3, #0
 800558e:	dd23      	ble.n	80055d8 <AT24Cxx_write_byte_buffer+0xaa>
		(mem_addr + page_remaining) < AT24Cxx_get_max_addr(dev)){
 8005590:	88fa      	ldrh	r2, [r7, #6]
 8005592:	7d7b      	ldrb	r3, [r7, #21]
 8005594:	18d4      	adds	r4, r2, r3
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7ff fed8 	bl	800534c <AT24Cxx_get_max_addr>
 800559c:	4603      	mov	r3, r0
	if((mem_addr + page_remaining) > 0x00 &&
 800559e:	429c      	cmp	r4, r3
 80055a0:	da1a      	bge.n	80055d8 <AT24Cxx_write_byte_buffer+0xaa>

		while(HAL_I2C_Mem_Write(dev->dev_port,
 80055a2:	bf00      	nop
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	88db      	ldrh	r3, [r3, #6]
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	b21b      	sxth	r3, r3
 80055b0:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80055b4:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Write(dev->dev_port,
 80055b6:	b299      	uxth	r1, r3
 80055b8:	7d7b      	ldrb	r3, [r7, #21]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	88fa      	ldrh	r2, [r7, #6]
 80055be:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80055c2:	9402      	str	r4, [sp, #8]
 80055c4:	9301      	str	r3, [sp, #4]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	2310      	movs	r3, #16
 80055cc:	f002 fdde 	bl	800818c <HAL_I2C_Mem_Write>
 80055d0:	4603      	mov	r3, r0
				(uint16_t) mem_addr,
				I2C_MEMADD_SIZE_16BIT,
				data_buf,
				page_remaining,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e6      	bne.n	80055a4 <AT24Cxx_write_byte_buffer+0x76>
	if((mem_addr + page_remaining) > 0x00 &&
 80055d6:	e002      	b.n	80055de <AT24Cxx_write_byte_buffer+0xb0>
	}else return at_w_bytes_err;
 80055d8:	f06f 0304 	mvn.w	r3, #4
 80055dc:	e0a5      	b.n	800572a <AT24Cxx_write_byte_buffer+0x1fc>

	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 80055de:	2300      	movs	r3, #0
 80055e0:	75fb      	strb	r3, [r7, #23]
 80055e2:	e04e      	b.n	8005682 <AT24Cxx_write_byte_buffer+0x154>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 80055e4:	88fa      	ldrh	r2, [r7, #6]
 80055e6:	7d7b      	ldrb	r3, [r7, #21]
 80055e8:	441a      	add	r2, r3
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
 80055ec:	7db9      	ldrb	r1, [r7, #22]
 80055ee:	fb01 f303 	mul.w	r3, r1, r3
 80055f2:	4413      	add	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	dd3e      	ble.n	8005676 <AT24Cxx_write_byte_buffer+0x148>
			(mem_addr + page_remaining + (current_page * page_size)) < AT24Cxx_get_max_addr(dev)){
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	7d7b      	ldrb	r3, [r7, #21]
 80055fc:	441a      	add	r2, r3
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
 8005600:	7db9      	ldrb	r1, [r7, #22]
 8005602:	fb01 f303 	mul.w	r3, r1, r3
 8005606:	18d4      	adds	r4, r2, r3
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f7ff fe9f 	bl	800534c <AT24Cxx_get_max_addr>
 800560e:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8005610:	429c      	cmp	r4, r3
 8005612:	da30      	bge.n	8005676 <AT24Cxx_write_byte_buffer+0x148>

				while(HAL_I2C_Mem_Write(dev->dev_port,
 8005614:	bf00      	nop
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6818      	ldr	r0, [r3, #0]
					AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	88db      	ldrh	r3, [r3, #6]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	b21b      	sxth	r3, r3
 8005622:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005626:	b21b      	sxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8005628:	b29c      	uxth	r4, r3
					(uint16_t) mem_addr + page_remaining + (current_page * page_size),
 800562a:	7d7b      	ldrb	r3, [r7, #21]
 800562c:	b29a      	uxth	r2, r3
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	4413      	add	r3, r2
 8005632:	b29a      	uxth	r2, r3
 8005634:	7dfb      	ldrb	r3, [r7, #23]
 8005636:	b29b      	uxth	r3, r3
 8005638:	7db9      	ldrb	r1, [r7, #22]
 800563a:	b289      	uxth	r1, r1
 800563c:	fb01 f303 	mul.w	r3, r1, r3
 8005640:	b29b      	uxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8005642:	4413      	add	r3, r2
 8005644:	b29d      	uxth	r5, r3
					I2C_MEMADD_SIZE_16BIT,
					data_buf + page_remaining + (current_page * page_size),
 8005646:	7d7b      	ldrb	r3, [r7, #21]
 8005648:	7dfa      	ldrb	r2, [r7, #23]
 800564a:	7db9      	ldrb	r1, [r7, #22]
 800564c:	fb01 f202 	mul.w	r2, r1, r2
 8005650:	4413      	add	r3, r2
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	4413      	add	r3, r2
 8005656:	7dba      	ldrb	r2, [r7, #22]
 8005658:	b292      	uxth	r2, r2
 800565a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800565e:	9102      	str	r1, [sp, #8]
 8005660:	9201      	str	r2, [sp, #4]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	2310      	movs	r3, #16
 8005666:	462a      	mov	r2, r5
 8005668:	4621      	mov	r1, r4
 800566a:	f002 fd8f 	bl	800818c <HAL_I2C_Mem_Write>
 800566e:	4603      	mov	r3, r0
					page_size,
					AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1d0      	bne.n	8005616 <AT24Cxx_write_byte_buffer+0xe8>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8005674:	e002      	b.n	800567c <AT24Cxx_write_byte_buffer+0x14e>
		}else return at_w_bytes_err;
 8005676:	f06f 0304 	mvn.w	r3, #4
 800567a:	e056      	b.n	800572a <AT24Cxx_write_byte_buffer+0x1fc>
	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 800567c:	7dfb      	ldrb	r3, [r7, #23]
 800567e:	3301      	adds	r3, #1
 8005680:	75fb      	strb	r3, [r7, #23]
 8005682:	7dfa      	ldrb	r2, [r7, #23]
 8005684:	7d3b      	ldrb	r3, [r7, #20]
 8005686:	429a      	cmp	r2, r3
 8005688:	d3ac      	bcc.n	80055e4 <AT24Cxx_write_byte_buffer+0xb6>
	}

	if(remainder_writes){
 800568a:	7cfb      	ldrb	r3, [r7, #19]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d04b      	beq.n	8005728 <AT24Cxx_write_byte_buffer+0x1fa>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8005690:	88fa      	ldrh	r2, [r7, #6]
 8005692:	7d7b      	ldrb	r3, [r7, #21]
 8005694:	441a      	add	r2, r3
 8005696:	7d3b      	ldrb	r3, [r7, #20]
 8005698:	7db9      	ldrb	r1, [r7, #22]
 800569a:	fb01 f303 	mul.w	r3, r1, r3
 800569e:	4413      	add	r3, r2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	dd3e      	ble.n	8005722 <AT24Cxx_write_byte_buffer+0x1f4>
			(mem_addr + page_remaining + (page_writes * page_size)) < AT24Cxx_get_max_addr(dev)){
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	7d7b      	ldrb	r3, [r7, #21]
 80056a8:	441a      	add	r2, r3
 80056aa:	7d3b      	ldrb	r3, [r7, #20]
 80056ac:	7db9      	ldrb	r1, [r7, #22]
 80056ae:	fb01 f303 	mul.w	r3, r1, r3
 80056b2:	18d4      	adds	r4, r2, r3
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f7ff fe49 	bl	800534c <AT24Cxx_get_max_addr>
 80056ba:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 80056bc:	429c      	cmp	r4, r3
 80056be:	da30      	bge.n	8005722 <AT24Cxx_write_byte_buffer+0x1f4>

			while(HAL_I2C_Mem_Write(dev->dev_port,
 80056c0:	bf00      	nop
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	88db      	ldrh	r3, [r3, #6]
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	b21b      	sxth	r3, r3
 80056ce:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80056d2:	b21b      	sxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 80056d4:	b29c      	uxth	r4, r3
				(uint16_t) mem_addr + page_remaining + (page_writes * page_size),
 80056d6:	7d7b      	ldrb	r3, [r7, #21]
 80056d8:	b29a      	uxth	r2, r3
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	4413      	add	r3, r2
 80056de:	b29a      	uxth	r2, r3
 80056e0:	7d3b      	ldrb	r3, [r7, #20]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	7db9      	ldrb	r1, [r7, #22]
 80056e6:	b289      	uxth	r1, r1
 80056e8:	fb01 f303 	mul.w	r3, r1, r3
 80056ec:	b29b      	uxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 80056ee:	4413      	add	r3, r2
 80056f0:	b29d      	uxth	r5, r3
				I2C_MEMADD_SIZE_16BIT,
				data_buf + page_remaining + (page_writes * page_size),
 80056f2:	7d7b      	ldrb	r3, [r7, #21]
 80056f4:	7d3a      	ldrb	r2, [r7, #20]
 80056f6:	7db9      	ldrb	r1, [r7, #22]
 80056f8:	fb01 f202 	mul.w	r2, r1, r2
 80056fc:	4413      	add	r3, r2
			while(HAL_I2C_Mem_Write(dev->dev_port,
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	4413      	add	r3, r2
 8005702:	7cfa      	ldrb	r2, [r7, #19]
 8005704:	b292      	uxth	r2, r2
 8005706:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800570a:	9102      	str	r1, [sp, #8]
 800570c:	9201      	str	r2, [sp, #4]
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	2310      	movs	r3, #16
 8005712:	462a      	mov	r2, r5
 8005714:	4621      	mov	r1, r4
 8005716:	f002 fd39 	bl	800818c <HAL_I2C_Mem_Write>
 800571a:	4603      	mov	r3, r0
				remainder_writes,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1d0      	bne.n	80056c2 <AT24Cxx_write_byte_buffer+0x194>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8005720:	e002      	b.n	8005728 <AT24Cxx_write_byte_buffer+0x1fa>
		}else return at_w_bytes_err;
 8005722:	f06f 0304 	mvn.w	r3, #4
 8005726:	e000      	b.n	800572a <AT24Cxx_write_byte_buffer+0x1fc>
	}

	return at_ok;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bdb0      	pop	{r4, r5, r7, pc}

08005732 <AT24Cxx_read_byte_buffer>:
	return at_r_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_read_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b088      	sub	sp, #32
 8005736:	af04      	add	r7, sp, #16
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	4611      	mov	r1, r2
 800573e:	461a      	mov	r2, r3
 8005740:	460b      	mov	r3, r1
 8005742:	80fb      	strh	r3, [r7, #6]
 8005744:	4613      	mov	r3, r2
 8005746:	80bb      	strh	r3, [r7, #4]
	if(mem_addr > 0x00 && mem_addr < AT24Cxx_get_max_addr(dev)){
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d022      	beq.n	8005794 <AT24Cxx_read_byte_buffer+0x62>
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff fdfc 	bl	800534c <AT24Cxx_get_max_addr>
 8005754:	4603      	mov	r3, r0
 8005756:	461a      	mov	r2, r3
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	4293      	cmp	r3, r2
 800575c:	d21a      	bcs.n	8005794 <AT24Cxx_read_byte_buffer+0x62>
		while(HAL_I2C_Mem_Read(dev->dev_port,
 800575e:	bf00      	nop
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_R | (dev->dev_addr << 1) ,
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	88db      	ldrh	r3, [r3, #6]
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	b21b      	sxth	r3, r3
 800576c:	f043 03a1 	orr.w	r3, r3, #161	@ 0xa1
 8005770:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8005772:	b299      	uxth	r1, r3
 8005774:	88fa      	ldrh	r2, [r7, #6]
 8005776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800577a:	9302      	str	r3, [sp, #8]
 800577c:	88bb      	ldrh	r3, [r7, #4]
 800577e:	9301      	str	r3, [sp, #4]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	2310      	movs	r3, #16
 8005786:	f002 fdfb 	bl	8008380 <HAL_I2C_Mem_Read>
 800578a:	4603      	mov	r3, r0
				(uint16_t) mem_addr, I2C_MEMADD_SIZE_16BIT, data_buf, buf_length,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e7      	bne.n	8005760 <AT24Cxx_read_byte_buffer+0x2e>
		return at_ok;
 8005790:	2300      	movs	r3, #0
 8005792:	e001      	b.n	8005798 <AT24Cxx_read_byte_buffer+0x66>
	}
	return at_r_bytes_err;
 8005794:	f06f 0306 	mvn.w	r3, #6
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static int constrain(int amt, int low, int high)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	da01      	bge.n	80057b8 <constrain+0x18>
        return low;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	e006      	b.n	80057c6 <constrain+0x26>
    else if (amt > high)
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	429a      	cmp	r2, r3
 80057be:	dd01      	ble.n	80057c4 <constrain+0x24>
        return high;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	e000      	b.n	80057c6 <constrain+0x26>
    else
        return amt;
 80057c4:	68fb      	ldr	r3, [r7, #12]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7fb fcd6 	bl	8001190 <__aeabi_fcmplt>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <constrainf+0x1e>
        return low;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	e009      	b.n	8005802 <constrainf+0x32>
    else if (amt > high)
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7fb fceb 	bl	80011cc <__aeabi_fcmpgt>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <constrainf+0x30>
        return high;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	e000      	b.n	8005802 <constrainf+0x32>
    else
        return amt;
 8005800:	68fb      	ldr	r3, [r7, #12]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
    float RC = 1 / (2 * M_PIf * f_cut);
 8005816:	490d      	ldr	r1, [pc, #52]	@ (800584c <pt1FilterGain+0x40>)
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7fb fb1b 	bl	8000e54 <__aeabi_fmul>
 800581e:	4603      	mov	r3, r0
 8005820:	4619      	mov	r1, r3
 8005822:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005826:	f7fb fbc9 	bl	8000fbc <__aeabi_fdiv>
 800582a:	4603      	mov	r3, r0
 800582c:	60fb      	str	r3, [r7, #12]
    return dT/ (RC + dT);
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f7fb fa07 	bl	8000c44 <__addsf3>
 8005836:	4603      	mov	r3, r0
 8005838:	4619      	mov	r1, r3
 800583a:	6838      	ldr	r0, [r7, #0]
 800583c:	f7fb fbbe 	bl	8000fbc <__aeabi_fdiv>
 8005840:	4603      	mov	r3, r0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40c90fdb 	.word	0x40c90fdb

08005850 <attitude_ctrl_init>:
float ab_speed_filted;

float v_estimate;
uint16_t servoL,servoR;

void attitude_ctrl_init(){
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af02      	add	r7, sp, #8

   speed_filter_reset = TRUE;
 8005856:	4b2d      	ldr	r3, [pc, #180]	@ (800590c <attitude_ctrl_init+0xbc>)
 8005858:	2201      	movs	r2, #1
 800585a:	701a      	strb	r2, [r3, #0]
   ab_speed_filted = 0.0f;
 800585c:	4b2c      	ldr	r3, [pc, #176]	@ (8005910 <attitude_ctrl_init+0xc0>)
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	601a      	str	r2, [r3, #0]
   // init pid 
   pid_init(&roll_angle_pid,4,0,0,F_CUT_OFF,100);
 8005864:	4b2b      	ldr	r3, [pc, #172]	@ (8005914 <attitude_ctrl_init+0xc4>)
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800587a:	4827      	ldr	r0, [pc, #156]	@ (8005918 <attitude_ctrl_init+0xc8>)
 800587c:	f7fe f83b 	bl	80038f6 <pid_init>
   pid_init(&roll_rate_pid,1.8,2.5,0,F_CUT_OFF,130);
 8005880:	4b26      	ldr	r3, [pc, #152]	@ (800591c <attitude_ctrl_init+0xcc>)
 8005882:	9301      	str	r3, [sp, #4]
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	4a24      	ldr	r2, [pc, #144]	@ (8005920 <attitude_ctrl_init+0xd0>)
 8005890:	4924      	ldr	r1, [pc, #144]	@ (8005924 <attitude_ctrl_init+0xd4>)
 8005892:	4825      	ldr	r0, [pc, #148]	@ (8005928 <attitude_ctrl_init+0xd8>)
 8005894:	f7fe f82f 	bl	80038f6 <pid_init>

   pid_init(&pitch_angle_pid,25,0,0,F_CUT_OFF,100);
 8005898:	4b1e      	ldr	r3, [pc, #120]	@ (8005914 <attitude_ctrl_init+0xc4>)
 800589a:	9301      	str	r3, [sp, #4]
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	4920      	ldr	r1, [pc, #128]	@ (800592c <attitude_ctrl_init+0xdc>)
 80058ac:	4820      	ldr	r0, [pc, #128]	@ (8005930 <attitude_ctrl_init+0xe0>)
 80058ae:	f7fe f822 	bl	80038f6 <pid_init>
   pid_init(&pitch_rate_pid,4,2.5,0,F_CUT_OFF,130);
 80058b2:	4b1a      	ldr	r3, [pc, #104]	@ (800591c <attitude_ctrl_init+0xcc>)
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	f04f 0300 	mov.w	r3, #0
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	4a17      	ldr	r2, [pc, #92]	@ (8005920 <attitude_ctrl_init+0xd0>)
 80058c2:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80058c6:	481b      	ldr	r0, [pc, #108]	@ (8005934 <attitude_ctrl_init+0xe4>)
 80058c8:	f7fe f815 	bl	80038f6 <pid_init>

   // rate 
   pid_init(&roll_rate_t,4,0,0,F_CUT_OFF,300);
 80058cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005938 <attitude_ctrl_init+0xe8>)
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80058e2:	4816      	ldr	r0, [pc, #88]	@ (800593c <attitude_ctrl_init+0xec>)
 80058e4:	f7fe f807 	bl	80038f6 <pid_init>
   pid_init(&pitch_rate_t,4,0,0,F_CUT_OFF,300);
 80058e8:	4b13      	ldr	r3, [pc, #76]	@ (8005938 <attitude_ctrl_init+0xe8>)
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80058fe:	4810      	ldr	r0, [pc, #64]	@ (8005940 <attitude_ctrl_init+0xf0>)
 8005900:	f7fd fff9 	bl	80038f6 <pid_init>

}
 8005904:	bf00      	nop
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000b18 	.word	0x20000b18
 8005910:	20000c08 	.word	0x20000c08
 8005914:	42c80000 	.word	0x42c80000
 8005918:	20000b64 	.word	0x20000b64
 800591c:	43020000 	.word	0x43020000
 8005920:	40200000 	.word	0x40200000
 8005924:	3fe66666 	.word	0x3fe66666
 8005928:	20000b1c 	.word	0x20000b1c
 800592c:	41c80000 	.word	0x41c80000
 8005930:	20000b88 	.word	0x20000b88
 8005934:	20000b40 	.word	0x20000b40
 8005938:	43960000 	.word	0x43960000
 800593c:	20000bac 	.word	0x20000bac
 8005940:	20000bd0 	.word	0x20000bd0
 8005944:	00000000 	.word	0x00000000

08005948 <attitude_ctrl>:

void attitude_ctrl(float dt){ 
 8005948:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800594c:	b098      	sub	sp, #96	@ 0x60
 800594e:	af02      	add	r7, sp, #8
 8005950:	6078      	str	r0, [r7, #4]
    if(dt < 0 || dt > MAX_WAIT_TIME){
 8005952:	f04f 0100 	mov.w	r1, #0
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fb fc1a 	bl	8001190 <__aeabi_fcmplt>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	f040 839b 	bne.w	800609a <attitude_ctrl+0x752>
 8005964:	4973      	ldr	r1, [pc, #460]	@ (8005b34 <attitude_ctrl+0x1ec>)
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fb fc30 	bl	80011cc <__aeabi_fcmpgt>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	f040 8393 	bne.w	800609a <attitude_ctrl+0x752>
        return;
    }

    float roll_rate_measurement = AHRS.roll_rate;
 8005974:	4b70      	ldr	r3, [pc, #448]	@ (8005b38 <attitude_ctrl+0x1f0>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	657b      	str	r3, [r7, #84]	@ 0x54
    float pitch_rate_measurement = AHRS.pitch_rate;
 800597a:	4b6f      	ldr	r3, [pc, #444]	@ (8005b38 <attitude_ctrl+0x1f0>)
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	653b      	str	r3, [r7, #80]	@ 0x50

    float roll_measurement = AHRS.roll;
 8005980:	4b6d      	ldr	r3, [pc, #436]	@ (8005b38 <attitude_ctrl+0x1f0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float pitch_measurement = AHRS.pitch;
 8005986:	4b6c      	ldr	r3, [pc, #432]	@ (8005b38 <attitude_ctrl+0x1f0>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	64bb      	str	r3, [r7, #72]	@ 0x48

    static float roll_pid_smooth = 0.0f;
    static float pitch_pid_smooth = 0.0f;


    roll_desired = ((int)ibusChannelData[0] - 1500)*0.1f;
 800598c:	4b6b      	ldr	r3, [pc, #428]	@ (8005b3c <attitude_ctrl+0x1f4>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005994:	4618      	mov	r0, r3
 8005996:	f7fb fa09 	bl	8000dac <__aeabi_i2f>
 800599a:	4603      	mov	r3, r0
 800599c:	4965      	ldr	r1, [pc, #404]	@ (8005b34 <attitude_ctrl+0x1ec>)
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fb fa58 	bl	8000e54 <__aeabi_fmul>
 80059a4:	4603      	mov	r3, r0
 80059a6:	461a      	mov	r2, r3
 80059a8:	4b65      	ldr	r3, [pc, #404]	@ (8005b40 <attitude_ctrl+0x1f8>)
 80059aa:	601a      	str	r2, [r3, #0]
	pitch_desired = ((int)ibusChannelData[1] - 1500)*-0.15f;
 80059ac:	4b63      	ldr	r3, [pc, #396]	@ (8005b3c <attitude_ctrl+0x1f4>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fb f9f9 	bl	8000dac <__aeabi_i2f>
 80059ba:	4603      	mov	r3, r0
 80059bc:	4961      	ldr	r1, [pc, #388]	@ (8005b44 <attitude_ctrl+0x1fc>)
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fb fa48 	bl	8000e54 <__aeabi_fmul>
 80059c4:	4603      	mov	r3, r0
 80059c6:	461a      	mov	r2, r3
 80059c8:	4b5f      	ldr	r3, [pc, #380]	@ (8005b48 <attitude_ctrl+0x200>)
 80059ca:	601a      	str	r2, [r3, #0]

    v_estimate = dynamic_speed_esitmate(dt);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fb7b 	bl	80060c8 <dynamic_speed_esitmate>
 80059d2:	4603      	mov	r3, r0
 80059d4:	4a5d      	ldr	r2, [pc, #372]	@ (8005b4c <attitude_ctrl+0x204>)
 80059d6:	6013      	str	r3, [r2, #0]
    if(v_estimate < 0)
 80059d8:	4b5c      	ldr	r3, [pc, #368]	@ (8005b4c <attitude_ctrl+0x204>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f04f 0100 	mov.w	r1, #0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fb fbd5 	bl	8001190 <__aeabi_fcmplt>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <attitude_ctrl+0xac>
    	v_estimate = 0;
 80059ec:	4b57      	ldr	r3, [pc, #348]	@ (8005b4c <attitude_ctrl+0x204>)
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]

    // pid scale with velocity
	float pid_velo_scale;
    if(_gps.fix > 1){
 80059f4:	4b56      	ldr	r3, [pc, #344]	@ (8005b50 <attitude_ctrl+0x208>)
 80059f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	f240 808d 	bls.w	8005b1a <attitude_ctrl+0x1d2>
        float vn = (float)_gps.velocity[0]/100;  // m
 8005a00:	4b53      	ldr	r3, [pc, #332]	@ (8005b50 <attitude_ctrl+0x208>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fb f9d1 	bl	8000dac <__aeabi_i2f>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	4951      	ldr	r1, [pc, #324]	@ (8005b54 <attitude_ctrl+0x20c>)
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fb fad4 	bl	8000fbc <__aeabi_fdiv>
 8005a14:	4603      	mov	r3, r0
 8005a16:	643b      	str	r3, [r7, #64]	@ 0x40
        float ve = (float)_gps.velocity[1]/100;  // m
 8005a18:	4b4d      	ldr	r3, [pc, #308]	@ (8005b50 <attitude_ctrl+0x208>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fb f9c5 	bl	8000dac <__aeabi_i2f>
 8005a22:	4603      	mov	r3, r0
 8005a24:	494b      	ldr	r1, [pc, #300]	@ (8005b54 <attitude_ctrl+0x20c>)
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fb fac8 	bl	8000fbc <__aeabi_fdiv>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        float vd = (float)_gps.velocity[2]/100;  // m
 8005a30:	4b47      	ldr	r3, [pc, #284]	@ (8005b50 <attitude_ctrl+0x208>)
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fb f9b9 	bl	8000dac <__aeabi_i2f>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	4945      	ldr	r1, [pc, #276]	@ (8005b54 <attitude_ctrl+0x20c>)
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fb fabc 	bl	8000fbc <__aeabi_fdiv>
 8005a44:	4603      	mov	r3, r0
 8005a46:	63bb      	str	r3, [r7, #56]	@ 0x38

        float absolute_velocity = sqrtf(sq(vn) + sq(ve) + sq(vd));
 8005a48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a4a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005a4c:	f7fb fa02 	bl	8000e54 <__aeabi_fmul>
 8005a50:	4603      	mov	r3, r0
 8005a52:	461c      	mov	r4, r3
 8005a54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a56:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005a58:	f7fb f9fc 	bl	8000e54 <__aeabi_fmul>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4620      	mov	r0, r4
 8005a62:	f7fb f8ef 	bl	8000c44 <__addsf3>
 8005a66:	4603      	mov	r3, r0
 8005a68:	461c      	mov	r4, r3
 8005a6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a6c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a6e:	f7fb f9f1 	bl	8000e54 <__aeabi_fmul>
 8005a72:	4603      	mov	r3, r0
 8005a74:	4619      	mov	r1, r3
 8005a76:	4620      	mov	r0, r4
 8005a78:	f7fb f8e4 	bl	8000c44 <__addsf3>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f00e fa7c 	bl	8013f7c <sqrtf>
 8005a84:	6378      	str	r0, [r7, #52]	@ 0x34
        absolute_velocity = constrainf(absolute_velocity,0,MAX_SPEED); 
 8005a86:	4a34      	ldr	r2, [pc, #208]	@ (8005b58 <attitude_ctrl+0x210>)
 8005a88:	f04f 0100 	mov.w	r1, #0
 8005a8c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005a8e:	f7ff fe9f 	bl	80057d0 <constrainf>
 8005a92:	6378      	str	r0, [r7, #52]	@ 0x34
        if(speed_filter_reset){
 8005a94:	4b31      	ldr	r3, [pc, #196]	@ (8005b5c <attitude_ctrl+0x214>)
 8005a96:	f993 3000 	ldrsb.w	r3, [r3]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <attitude_ctrl+0x162>
            ab_speed_filted = absolute_velocity;
 8005a9e:	4a30      	ldr	r2, [pc, #192]	@ (8005b60 <attitude_ctrl+0x218>)
 8005aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa2:	6013      	str	r3, [r2, #0]
            speed_filter_reset = FALSE;
 8005aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8005b5c <attitude_ctrl+0x214>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	701a      	strb	r2, [r3, #0]
        }
        ab_speed_filted += pt1FilterGain(10,dt)*(absolute_velocity - ab_speed_filted);
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	482d      	ldr	r0, [pc, #180]	@ (8005b64 <attitude_ctrl+0x21c>)
 8005aae:	f7ff fead 	bl	800580c <pt1FilterGain>
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8005b60 <attitude_ctrl+0x218>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005abc:	f7fb f8c0 	bl	8000c40 <__aeabi_fsub>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f7fb f9c5 	bl	8000e54 <__aeabi_fmul>
 8005aca:	4603      	mov	r3, r0
 8005acc:	461a      	mov	r2, r3
 8005ace:	4b24      	ldr	r3, [pc, #144]	@ (8005b60 <attitude_ctrl+0x218>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	f7fb f8b5 	bl	8000c44 <__addsf3>
 8005ada:	4603      	mov	r3, r0
 8005adc:	461a      	mov	r2, r3
 8005ade:	4b20      	ldr	r3, [pc, #128]	@ (8005b60 <attitude_ctrl+0x218>)
 8005ae0:	601a      	str	r2, [r3, #0]
        pid_velo_scale = 1.0/(1 + sq(ab_speed_filted)*0.001f);
 8005ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8005b60 <attitude_ctrl+0x218>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8005b60 <attitude_ctrl+0x218>)
 8005ae8:	6812      	ldr	r2, [r2, #0]
 8005aea:	4611      	mov	r1, r2
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fb f9b1 	bl	8000e54 <__aeabi_fmul>
 8005af2:	4603      	mov	r3, r0
 8005af4:	491c      	ldr	r1, [pc, #112]	@ (8005b68 <attitude_ctrl+0x220>)
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fb f9ac 	bl	8000e54 <__aeabi_fmul>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fb f89e 	bl	8000c44 <__addsf3>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005b10:	f7fb fa54 	bl	8000fbc <__aeabi_fdiv>
 8005b14:	4603      	mov	r3, r0
 8005b16:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b18:	e02b      	b.n	8005b72 <attitude_ctrl+0x22a>
    }
    else{
        speed_filter_reset = TRUE;
 8005b1a:	4b10      	ldr	r3, [pc, #64]	@ (8005b5c <attitude_ctrl+0x214>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	701a      	strb	r2, [r3, #0]

    	if(ibusChannelData[CH6] > CHANNEL_HIGH){
 8005b20:	4b06      	ldr	r3, [pc, #24]	@ (8005b3c <attitude_ctrl+0x1f4>)
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d91f      	bls.n	8005b6c <attitude_ctrl+0x224>
    		pid_velo_scale = 1;
 8005b2c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b32:	e01e      	b.n	8005b72 <attitude_ctrl+0x22a>
 8005b34:	3dcccccd 	.word	0x3dcccccd
 8005b38:	200004c8 	.word	0x200004c8
 8005b3c:	200000d0 	.word	0x200000d0
 8005b40:	20000b10 	.word	0x20000b10
 8005b44:	be19999a 	.word	0xbe19999a
 8005b48:	20000b14 	.word	0x20000b14
 8005b4c:	20000c0c 	.word	0x20000c0c
 8005b50:	200003a0 	.word	0x200003a0
 8005b54:	42c80000 	.word	0x42c80000
 8005b58:	41f00000 	.word	0x41f00000
 8005b5c:	20000b18 	.word	0x20000b18
 8005b60:	20000c08 	.word	0x20000c08
 8005b64:	41200000 	.word	0x41200000
 8005b68:	3a83126f 	.word	0x3a83126f
    	}else{
    		pid_velo_scale = 0.5f;
 8005b6c:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8005b70:	647b      	str	r3, [r7, #68]	@ 0x44
    	}
    }
    float v_ = constrainf(v_estimate - 15,0,15);
 8005b72:	4b30      	ldr	r3, [pc, #192]	@ (8005c34 <attitude_ctrl+0x2ec>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4930      	ldr	r1, [pc, #192]	@ (8005c38 <attitude_ctrl+0x2f0>)
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fb f861 	bl	8000c40 <__aeabi_fsub>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	4a2d      	ldr	r2, [pc, #180]	@ (8005c38 <attitude_ctrl+0x2f0>)
 8005b82:	f04f 0100 	mov.w	r1, #0
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fe22 	bl	80057d0 <constrainf>
 8005b8c:	6338      	str	r0, [r7, #48]	@ 0x30
	pid_velo_scale = 15.0f/(15.0f + sq(v_)*0.07f);
 8005b8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b92:	f7fb f95f 	bl	8000e54 <__aeabi_fmul>
 8005b96:	4603      	mov	r3, r0
 8005b98:	4928      	ldr	r1, [pc, #160]	@ (8005c3c <attitude_ctrl+0x2f4>)
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fb f95a 	bl	8000e54 <__aeabi_fmul>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	4925      	ldr	r1, [pc, #148]	@ (8005c38 <attitude_ctrl+0x2f0>)
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fb f84d 	bl	8000c44 <__addsf3>
 8005baa:	4603      	mov	r3, r0
 8005bac:	4619      	mov	r1, r3
 8005bae:	4822      	ldr	r0, [pc, #136]	@ (8005c38 <attitude_ctrl+0x2f0>)
 8005bb0:	f7fb fa04 	bl	8000fbc <__aeabi_fdiv>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	647b      	str	r3, [r7, #68]	@ 0x44

    const float pid_roll_vel_scale = constrainf(pid_velo_scale,0.5f,1.0f);
 8005bb8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005bbc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005bc0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8005bc2:	f7ff fe05 	bl	80057d0 <constrainf>
 8005bc6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const float pid_pitch_vel_scale = constrainf(pid_velo_scale,0.5f,1.0f);
 8005bc8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005bcc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005bd0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8005bd2:	f7ff fdfd 	bl	80057d0 <constrainf>
 8005bd6:	62b8      	str	r0, [r7, #40]	@ 0x28


    // stablize mode
    if(ibusChannelData[CH5] > CHANNEL_HIGH ){
 8005bd8:	4b19      	ldr	r3, [pc, #100]	@ (8005c40 <attitude_ctrl+0x2f8>)
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8005be0:	4293      	cmp	r3, r2
 8005be2:	f240 81ab 	bls.w	8005f3c <attitude_ctrl+0x5f4>
    	if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 8005be6:	4b16      	ldr	r3, [pc, #88]	@ (8005c40 <attitude_ctrl+0x2f8>)
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d930      	bls.n	8005c54 <attitude_ctrl+0x30c>
			roll_pid_rc_gain = ((int)ibusChannelData[CH7] - 1000)*0.002f;
 8005bf2:	4b13      	ldr	r3, [pc, #76]	@ (8005c40 <attitude_ctrl+0x2f8>)
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fb f8d6 	bl	8000dac <__aeabi_i2f>
 8005c00:	4603      	mov	r3, r0
 8005c02:	4910      	ldr	r1, [pc, #64]	@ (8005c44 <attitude_ctrl+0x2fc>)
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fb f925 	bl	8000e54 <__aeabi_fmul>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c48 <attitude_ctrl+0x300>)
 8005c10:	601a      	str	r2, [r3, #0]
			roll_trim = ((int)ibusChannelData[CH8] - 1500)*-0.1f;
 8005c12:	4b0b      	ldr	r3, [pc, #44]	@ (8005c40 <attitude_ctrl+0x2f8>)
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fb f8c6 	bl	8000dac <__aeabi_i2f>
 8005c20:	4603      	mov	r3, r0
 8005c22:	490a      	ldr	r1, [pc, #40]	@ (8005c4c <attitude_ctrl+0x304>)
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fb f915 	bl	8000e54 <__aeabi_fmul>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	4b08      	ldr	r3, [pc, #32]	@ (8005c50 <attitude_ctrl+0x308>)
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e02f      	b.n	8005c94 <attitude_ctrl+0x34c>
 8005c34:	20000c0c 	.word	0x20000c0c
 8005c38:	41700000 	.word	0x41700000
 8005c3c:	3d8f5c29 	.word	0x3d8f5c29
 8005c40:	200000d0 	.word	0x200000d0
 8005c44:	3b03126f 	.word	0x3b03126f
 8005c48:	20000bf8 	.word	0x20000bf8
 8005c4c:	bdcccccd 	.word	0xbdcccccd
 8005c50:	20000bfc 	.word	0x20000bfc
		}else{
			pitch_pid_rc_gain = ((int)ibusChannelData[CH7] - 1000)*0.002f;
 8005c54:	4ba2      	ldr	r3, [pc, #648]	@ (8005ee0 <attitude_ctrl+0x598>)
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fb f8a5 	bl	8000dac <__aeabi_i2f>
 8005c62:	4603      	mov	r3, r0
 8005c64:	499f      	ldr	r1, [pc, #636]	@ (8005ee4 <attitude_ctrl+0x59c>)
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fb f8f4 	bl	8000e54 <__aeabi_fmul>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	461a      	mov	r2, r3
 8005c70:	4b9d      	ldr	r3, [pc, #628]	@ (8005ee8 <attitude_ctrl+0x5a0>)
 8005c72:	601a      	str	r2, [r3, #0]
			pitch_trim = ((int)ibusChannelData[CH8] - 1500)*-0.1f;
 8005c74:	4b9a      	ldr	r3, [pc, #616]	@ (8005ee0 <attitude_ctrl+0x598>)
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fb f895 	bl	8000dac <__aeabi_i2f>
 8005c82:	4603      	mov	r3, r0
 8005c84:	4999      	ldr	r1, [pc, #612]	@ (8005eec <attitude_ctrl+0x5a4>)
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fb f8e4 	bl	8000e54 <__aeabi_fmul>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	461a      	mov	r2, r3
 8005c90:	4b97      	ldr	r3, [pc, #604]	@ (8005ef0 <attitude_ctrl+0x5a8>)
 8005c92:	601a      	str	r2, [r3, #0]
		}
        
        // roll axis
        float roll_rate_desired =  pid_calculate(&roll_angle_pid,roll_measurement,roll_desired + roll_trim,1.0f,dt);
 8005c94:	4b97      	ldr	r3, [pc, #604]	@ (8005ef4 <attitude_ctrl+0x5ac>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a97      	ldr	r2, [pc, #604]	@ (8005ef8 <attitude_ctrl+0x5b0>)
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fa ffd0 	bl	8000c44 <__addsf3>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005cb0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005cb2:	4892      	ldr	r0, [pc, #584]	@ (8005efc <attitude_ctrl+0x5b4>)
 8005cb4:	f7fd fe4a 	bl	800394c <pid_calculate>
 8005cb8:	61f8      	str	r0, [r7, #28]
        roll_rate_desired = constrainf(roll_rate_desired,-ROLL_RATE_LIMIT,ROLL_RATE_LIMIT);
 8005cba:	4a91      	ldr	r2, [pc, #580]	@ (8005f00 <attitude_ctrl+0x5b8>)
 8005cbc:	4991      	ldr	r1, [pc, #580]	@ (8005f04 <attitude_ctrl+0x5bc>)
 8005cbe:	69f8      	ldr	r0, [r7, #28]
 8005cc0:	f7ff fd86 	bl	80057d0 <constrainf>
 8005cc4:	61f8      	str	r0, [r7, #28]
        float r_rate_pid  =  pid_calculate(&roll_rate_pid, roll_rate_measurement,roll_rate_desired,pid_roll_vel_scale,dt);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cd0:	488d      	ldr	r0, [pc, #564]	@ (8005f08 <attitude_ctrl+0x5c0>)
 8005cd2:	f7fd fe3b 	bl	800394c <pid_calculate>
 8005cd6:	61b8      	str	r0, [r7, #24]
        //float FF_roll = roll_rate_desired*ff_roll_gain;
        //r_rate_pid = r_rate_pid + FF_roll;
        roll_pid_smooth += pt1FilterGain(4,dt)*(r_rate_pid - roll_pid_smooth);
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8005cde:	f7ff fd95 	bl	800580c <pt1FilterGain>
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	4b89      	ldr	r3, [pc, #548]	@ (8005f0c <attitude_ctrl+0x5c4>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	69b8      	ldr	r0, [r7, #24]
 8005cec:	f7fa ffa8 	bl	8000c40 <__aeabi_fsub>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f7fb f8ad 	bl	8000e54 <__aeabi_fmul>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4b83      	ldr	r3, [pc, #524]	@ (8005f0c <attitude_ctrl+0x5c4>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4619      	mov	r1, r3
 8005d04:	4610      	mov	r0, r2
 8005d06:	f7fa ff9d 	bl	8000c44 <__addsf3>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8005f0c <attitude_ctrl+0x5c4>)
 8005d10:	601a      	str	r2, [r3, #0]
        //pitch axiss
        float pitcj_rate_desired =  pid_calculate(&pitch_angle_pid,pitch_measurement,pitch_desired + pitch_trim,0.1f,dt);
 8005d12:	4b7f      	ldr	r3, [pc, #508]	@ (8005f10 <attitude_ctrl+0x5c8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a76      	ldr	r2, [pc, #472]	@ (8005ef0 <attitude_ctrl+0x5a8>)
 8005d18:	6812      	ldr	r2, [r2, #0]
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fa ff91 	bl	8000c44 <__addsf3>
 8005d22:	4603      	mov	r3, r0
 8005d24:	461a      	mov	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	4b7a      	ldr	r3, [pc, #488]	@ (8005f14 <attitude_ctrl+0x5cc>)
 8005d2c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005d2e:	487a      	ldr	r0, [pc, #488]	@ (8005f18 <attitude_ctrl+0x5d0>)
 8005d30:	f7fd fe0c 	bl	800394c <pid_calculate>
 8005d34:	6178      	str	r0, [r7, #20]
        pitcj_rate_desired = constrainf(pitcj_rate_desired,-PITCH_RATE_LIMIT,PITCH_RATE_LIMIT);
 8005d36:	4a79      	ldr	r2, [pc, #484]	@ (8005f1c <attitude_ctrl+0x5d4>)
 8005d38:	4979      	ldr	r1, [pc, #484]	@ (8005f20 <attitude_ctrl+0x5d8>)
 8005d3a:	6978      	ldr	r0, [r7, #20]
 8005d3c:	f7ff fd48 	bl	80057d0 <constrainf>
 8005d40:	6178      	str	r0, [r7, #20]
        float p_rate_pid  =  pid_calculate(&pitch_rate_pid, pitch_rate_measurement,pitcj_rate_desired,pid_pitch_vel_scale ,dt);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d4c:	4875      	ldr	r0, [pc, #468]	@ (8005f24 <attitude_ctrl+0x5dc>)
 8005d4e:	f7fd fdfd 	bl	800394c <pid_calculate>
 8005d52:	6138      	str	r0, [r7, #16]
        //float FF_pitch = pitcj_rate_desired*ff_pitch_gain;
        //p_rate_pid = p_rate_pid - FF_pitch;
        pitch_pid_smooth += pt1FilterGain(4,dt)*(p_rate_pid - pitch_pid_smooth);
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8005d5a:	f7ff fd57 	bl	800580c <pt1FilterGain>
 8005d5e:	4604      	mov	r4, r0
 8005d60:	4b71      	ldr	r3, [pc, #452]	@ (8005f28 <attitude_ctrl+0x5e0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4619      	mov	r1, r3
 8005d66:	6938      	ldr	r0, [r7, #16]
 8005d68:	f7fa ff6a 	bl	8000c40 <__aeabi_fsub>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4620      	mov	r0, r4
 8005d72:	f7fb f86f 	bl	8000e54 <__aeabi_fmul>
 8005d76:	4603      	mov	r3, r0
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4b6b      	ldr	r3, [pc, #428]	@ (8005f28 <attitude_ctrl+0x5e0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4610      	mov	r0, r2
 8005d82:	f7fa ff5f 	bl	8000c44 <__addsf3>
 8005d86:	4603      	mov	r3, r0
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4b67      	ldr	r3, [pc, #412]	@ (8005f28 <attitude_ctrl+0x5e0>)
 8005d8c:	601a      	str	r2, [r3, #0]

        //r_rate_pid = r_rate_pid * roll_pid_rc_gain;
        //p_rate_pid = p_rate_pid * pid_pitch_vel_scale;// * pitch_pid_rc_gain;

		if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 8005d8e:	4b54      	ldr	r3, [pc, #336]	@ (8005ee0 <attitude_ctrl+0x598>)
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d936      	bls.n	8005e08 <attitude_ctrl+0x4c0>
				int s1 = 1500 - ibusChannelData[CH2];
 8005d9a:	4b51      	ldr	r3, [pc, #324]	@ (8005ee0 <attitude_ctrl+0x598>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8005da2:	3304      	adds	r3, #4
 8005da4:	60bb      	str	r3, [r7, #8]

				servoL = 1500 - roll_pid_smooth - s1;// - pitch_pid_filted;
 8005da6:	4b59      	ldr	r3, [pc, #356]	@ (8005f0c <attitude_ctrl+0x5c4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4619      	mov	r1, r3
 8005dac:	485f      	ldr	r0, [pc, #380]	@ (8005f2c <attitude_ctrl+0x5e4>)
 8005dae:	f7fa ff47 	bl	8000c40 <__aeabi_fsub>
 8005db2:	4603      	mov	r3, r0
 8005db4:	461c      	mov	r4, r3
 8005db6:	68b8      	ldr	r0, [r7, #8]
 8005db8:	f7fa fff8 	bl	8000dac <__aeabi_i2f>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f7fa ff3d 	bl	8000c40 <__aeabi_fsub>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fb fa45 	bl	8001258 <__aeabi_f2uiz>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	4b57      	ldr	r3, [pc, #348]	@ (8005f30 <attitude_ctrl+0x5e8>)
 8005dd4:	801a      	strh	r2, [r3, #0]
				servoR = 1500 + roll_pid_smooth - s1;// - pitch_pid_filted;
 8005dd6:	4b4d      	ldr	r3, [pc, #308]	@ (8005f0c <attitude_ctrl+0x5c4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4954      	ldr	r1, [pc, #336]	@ (8005f2c <attitude_ctrl+0x5e4>)
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fa ff31 	bl	8000c44 <__addsf3>
 8005de2:	4603      	mov	r3, r0
 8005de4:	461c      	mov	r4, r3
 8005de6:	68b8      	ldr	r0, [r7, #8]
 8005de8:	f7fa ffe0 	bl	8000dac <__aeabi_i2f>
 8005dec:	4603      	mov	r3, r0
 8005dee:	4619      	mov	r1, r3
 8005df0:	4620      	mov	r0, r4
 8005df2:	f7fa ff25 	bl	8000c40 <__aeabi_fsub>
 8005df6:	4603      	mov	r3, r0
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fb fa2d 	bl	8001258 <__aeabi_f2uiz>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	4b4c      	ldr	r3, [pc, #304]	@ (8005f34 <attitude_ctrl+0x5ec>)
 8005e04:	801a      	strh	r2, [r3, #0]
 8005e06:	e057      	b.n	8005eb8 <attitude_ctrl+0x570>
		}else{
				int s1 = 1500 - ibusChannelData[CH1];
 8005e08:	4b35      	ldr	r3, [pc, #212]	@ (8005ee0 <attitude_ctrl+0x598>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8005e10:	3304      	adds	r3, #4
 8005e12:	60fb      	str	r3, [r7, #12]

				servoL = 1500 +  s1*0.5 + pitch_pid_smooth;
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7fa fb5d 	bl	80004d4 <__aeabi_i2d>
 8005e1a:	f04f 0200 	mov.w	r2, #0
 8005e1e:	4b46      	ldr	r3, [pc, #280]	@ (8005f38 <attitude_ctrl+0x5f0>)
 8005e20:	f7fa fbc2 	bl	80005a8 <__aeabi_dmul>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4610      	mov	r0, r2
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	a32a      	add	r3, pc, #168	@ (adr r3, 8005ed8 <attitude_ctrl+0x590>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f7fa fa03 	bl	800023c <__adddf3>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4614      	mov	r4, r2
 8005e3c:	461d      	mov	r5, r3
 8005e3e:	4b3a      	ldr	r3, [pc, #232]	@ (8005f28 <attitude_ctrl+0x5e0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fa fb58 	bl	80004f8 <__aeabi_f2d>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	4629      	mov	r1, r5
 8005e50:	f7fa f9f4 	bl	800023c <__adddf3>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4610      	mov	r0, r2
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	f7fa fe7c 	bl	8000b58 <__aeabi_d2uiz>
 8005e60:	4603      	mov	r3, r0
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	4b32      	ldr	r3, [pc, #200]	@ (8005f30 <attitude_ctrl+0x5e8>)
 8005e66:	801a      	strh	r2, [r3, #0]
				servoR = 1500 -  s1*0.5 + pitch_pid_smooth;
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7fa fb33 	bl	80004d4 <__aeabi_i2d>
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	4b31      	ldr	r3, [pc, #196]	@ (8005f38 <attitude_ctrl+0x5f0>)
 8005e74:	f7fa fb98 	bl	80005a8 <__aeabi_dmul>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	a116      	add	r1, pc, #88	@ (adr r1, 8005ed8 <attitude_ctrl+0x590>)
 8005e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e82:	f7fa f9d9 	bl	8000238 <__aeabi_dsub>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4614      	mov	r4, r2
 8005e8c:	461d      	mov	r5, r3
 8005e8e:	4b26      	ldr	r3, [pc, #152]	@ (8005f28 <attitude_ctrl+0x5e0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fa fb30 	bl	80004f8 <__aeabi_f2d>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	f7fa f9cc 	bl	800023c <__adddf3>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	4619      	mov	r1, r3
 8005eac:	f7fa fe54 	bl	8000b58 <__aeabi_d2uiz>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8005f34 <attitude_ctrl+0x5ec>)
 8005eb6:	801a      	strh	r2, [r3, #0]
		}

		if(ibusChannelData[CH10] > CHANNEL_HIGH ){
 8005eb8:	4b09      	ldr	r3, [pc, #36]	@ (8005ee0 <attitude_ctrl+0x598>)
 8005eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebc:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	f240 80c5 	bls.w	8006050 <attitude_ctrl+0x708>
			pitch_rate_pid.i_term = 0;
 8005ec6:	4b17      	ldr	r3, [pc, #92]	@ (8005f24 <attitude_ctrl+0x5dc>)
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	60da      	str	r2, [r3, #12]
			roll_rate_pid.i_term = 0;
 8005ece:	4b0e      	ldr	r3, [pc, #56]	@ (8005f08 <attitude_ctrl+0x5c0>)
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	60da      	str	r2, [r3, #12]
 8005ed6:	e0bb      	b.n	8006050 <attitude_ctrl+0x708>
 8005ed8:	00000000 	.word	0x00000000
 8005edc:	40977000 	.word	0x40977000
 8005ee0:	200000d0 	.word	0x200000d0
 8005ee4:	3b03126f 	.word	0x3b03126f
 8005ee8:	20000c00 	.word	0x20000c00
 8005eec:	bdcccccd 	.word	0xbdcccccd
 8005ef0:	20000c04 	.word	0x20000c04
 8005ef4:	20000b10 	.word	0x20000b10
 8005ef8:	20000bfc 	.word	0x20000bfc
 8005efc:	20000b64 	.word	0x20000b64
 8005f00:	42480000 	.word	0x42480000
 8005f04:	c2480000 	.word	0xc2480000
 8005f08:	20000b1c 	.word	0x20000b1c
 8005f0c:	20000c14 	.word	0x20000c14
 8005f10:	20000b14 	.word	0x20000b14
 8005f14:	3dcccccd 	.word	0x3dcccccd
 8005f18:	20000b88 	.word	0x20000b88
 8005f1c:	43960000 	.word	0x43960000
 8005f20:	c3960000 	.word	0xc3960000
 8005f24:	20000b40 	.word	0x20000b40
 8005f28:	20000c18 	.word	0x20000c18
 8005f2c:	44bb8000 	.word	0x44bb8000
 8005f30:	20000c10 	.word	0x20000c10
 8005f34:	20000c12 	.word	0x20000c12
 8005f38:	3fe00000 	.word	0x3fe00000
		}
        
    }
    // manual mode
    else{
        int s1 = 1500 - ibusChannelData[CH1];
 8005f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80060b0 <attitude_ctrl+0x768>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8005f44:	3304      	adds	r3, #4
 8005f46:	627b      	str	r3, [r7, #36]	@ 0x24
        int s2 = 1500 - ibusChannelData[CH2];
 8005f48:	4b59      	ldr	r3, [pc, #356]	@ (80060b0 <attitude_ctrl+0x768>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8005f50:	3304      	adds	r3, #4
 8005f52:	623b      	str	r3, [r7, #32]

        smooth_ch1 += 0.8*(s1*0.5 - smooth_ch1);
 8005f54:	4b57      	ldr	r3, [pc, #348]	@ (80060b4 <attitude_ctrl+0x76c>)
 8005f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fa faba 	bl	80004d4 <__aeabi_i2d>
 8005f60:	4604      	mov	r4, r0
 8005f62:	460d      	mov	r5, r1
 8005f64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f66:	f7fa fab5 	bl	80004d4 <__aeabi_i2d>
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	4b52      	ldr	r3, [pc, #328]	@ (80060b8 <attitude_ctrl+0x770>)
 8005f70:	f7fa fb1a 	bl	80005a8 <__aeabi_dmul>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4690      	mov	r8, r2
 8005f7a:	4699      	mov	r9, r3
 8005f7c:	4b4d      	ldr	r3, [pc, #308]	@ (80060b4 <attitude_ctrl+0x76c>)
 8005f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fa faa6 	bl	80004d4 <__aeabi_i2d>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	4649      	mov	r1, r9
 8005f90:	f7fa f952 	bl	8000238 <__aeabi_dsub>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	a342      	add	r3, pc, #264	@ (adr r3, 80060a8 <attitude_ctrl+0x760>)
 8005f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa2:	f7fa fb01 	bl	80005a8 <__aeabi_dmul>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4620      	mov	r0, r4
 8005fac:	4629      	mov	r1, r5
 8005fae:	f7fa f945 	bl	800023c <__adddf3>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f7fa fda5 	bl	8000b08 <__aeabi_d2iz>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	b21a      	sxth	r2, r3
 8005fc2:	4b3c      	ldr	r3, [pc, #240]	@ (80060b4 <attitude_ctrl+0x76c>)
 8005fc4:	801a      	strh	r2, [r3, #0]
        smooth_ch2 += 0.8*(s2 - smooth_ch2);
 8005fc6:	4b3d      	ldr	r3, [pc, #244]	@ (80060bc <attitude_ctrl+0x774>)
 8005fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fa fa81 	bl	80004d4 <__aeabi_i2d>
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	460d      	mov	r5, r1
 8005fd6:	4b39      	ldr	r3, [pc, #228]	@ (80060bc <attitude_ctrl+0x774>)
 8005fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	1a9b      	subs	r3, r3, r2
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fa fa76 	bl	80004d4 <__aeabi_i2d>
 8005fe8:	a32f      	add	r3, pc, #188	@ (adr r3, 80060a8 <attitude_ctrl+0x760>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	f7fa fadb 	bl	80005a8 <__aeabi_dmul>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	f7fa f91f 	bl	800023c <__adddf3>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4610      	mov	r0, r2
 8006004:	4619      	mov	r1, r3
 8006006:	f7fa fd7f 	bl	8000b08 <__aeabi_d2iz>
 800600a:	4603      	mov	r3, r0
 800600c:	b21a      	sxth	r2, r3
 800600e:	4b2b      	ldr	r3, [pc, #172]	@ (80060bc <attitude_ctrl+0x774>)
 8006010:	801a      	strh	r2, [r3, #0]
            
        servoL = 1500 + smooth_ch1 - smooth_ch2;
 8006012:	4b28      	ldr	r3, [pc, #160]	@ (80060b4 <attitude_ctrl+0x76c>)
 8006014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006018:	b29a      	uxth	r2, r3
 800601a:	4b28      	ldr	r3, [pc, #160]	@ (80060bc <attitude_ctrl+0x774>)
 800601c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006020:	b29b      	uxth	r3, r3
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	b29b      	uxth	r3, r3
 8006026:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800602a:	b29a      	uxth	r2, r3
 800602c:	4b24      	ldr	r3, [pc, #144]	@ (80060c0 <attitude_ctrl+0x778>)
 800602e:	801a      	strh	r2, [r3, #0]
        servoR = 1500 - smooth_ch1 - smooth_ch2;
 8006030:	4b20      	ldr	r3, [pc, #128]	@ (80060b4 <attitude_ctrl+0x76c>)
 8006032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006036:	b29a      	uxth	r2, r3
 8006038:	4b20      	ldr	r3, [pc, #128]	@ (80060bc <attitude_ctrl+0x774>)
 800603a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800603e:	b29b      	uxth	r3, r3
 8006040:	4413      	add	r3, r2
 8006042:	b29b      	uxth	r3, r3
 8006044:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006048:	3304      	adds	r3, #4
 800604a:	b29a      	uxth	r2, r3
 800604c:	4b1d      	ldr	r3, [pc, #116]	@ (80060c4 <attitude_ctrl+0x77c>)
 800604e:	801a      	strh	r2, [r3, #0]
        
    }

    servoL = constrain(servoL,SERVO_MIN_PWM,SERVO_MAX_PWM);
 8006050:	4b1b      	ldr	r3, [pc, #108]	@ (80060c0 <attitude_ctrl+0x778>)
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006058:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff fb9f 	bl	80057a0 <constrain>
 8006062:	4603      	mov	r3, r0
 8006064:	b29a      	uxth	r2, r3
 8006066:	4b16      	ldr	r3, [pc, #88]	@ (80060c0 <attitude_ctrl+0x778>)
 8006068:	801a      	strh	r2, [r3, #0]
    servoR = constrain(servoR,SERVO_MIN_PWM,SERVO_MAX_PWM);
 800606a:	4b16      	ldr	r3, [pc, #88]	@ (80060c4 <attitude_ctrl+0x77c>)
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006072:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006076:	4618      	mov	r0, r3
 8006078:	f7ff fb92 	bl	80057a0 <constrain>
 800607c:	4603      	mov	r3, r0
 800607e:	b29a      	uxth	r2, r3
 8006080:	4b10      	ldr	r3, [pc, #64]	@ (80060c4 <attitude_ctrl+0x77c>)
 8006082:	801a      	strh	r2, [r3, #0]

    write_pwm_ctrl(ibusChannelData[CH3],servoL,servoR);
 8006084:	4b0a      	ldr	r3, [pc, #40]	@ (80060b0 <attitude_ctrl+0x768>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	b29b      	uxth	r3, r3
 800608a:	4a0d      	ldr	r2, [pc, #52]	@ (80060c0 <attitude_ctrl+0x778>)
 800608c:	8811      	ldrh	r1, [r2, #0]
 800608e:	4a0d      	ldr	r2, [pc, #52]	@ (80060c4 <attitude_ctrl+0x77c>)
 8006090:	8812      	ldrh	r2, [r2, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f7fd fdca 	bl	8003c2c <write_pwm_ctrl>
 8006098:	e000      	b.n	800609c <attitude_ctrl+0x754>
        return;
 800609a:	bf00      	nop

}
 800609c:	3758      	adds	r7, #88	@ 0x58
 800609e:	46bd      	mov	sp, r7
 80060a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80060a4:	f3af 8000 	nop.w
 80060a8:	9999999a 	.word	0x9999999a
 80060ac:	3fe99999 	.word	0x3fe99999
 80060b0:	200000d0 	.word	0x200000d0
 80060b4:	20000bf4 	.word	0x20000bf4
 80060b8:	3fe00000 	.word	0x3fe00000
 80060bc:	20000bf6 	.word	0x20000bf6
 80060c0:	20000c10 	.word	0x20000c10
 80060c4:	20000c12 	.word	0x20000c12

080060c8 <dynamic_speed_esitmate>:
static float Cd = 0.01;
static float weigh = 0.8; // kg

static float velocity = 0;

float dynamic_speed_esitmate(float dt){
 80060c8:	b5b0      	push	{r4, r5, r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
    float Thrust = (float)(ibusChannelData[CH3] - 1000) * 0.009;
 80060d0:	4b41      	ldr	r3, [pc, #260]	@ (80061d8 <dynamic_speed_esitmate+0x110>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fa fe63 	bl	8000da4 <__aeabi_ui2f>
 80060de:	4603      	mov	r3, r0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fa fa09 	bl	80004f8 <__aeabi_f2d>
 80060e6:	a33a      	add	r3, pc, #232	@ (adr r3, 80061d0 <dynamic_speed_esitmate+0x108>)
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f7fa fa5c 	bl	80005a8 <__aeabi_dmul>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4610      	mov	r0, r2
 80060f6:	4619      	mov	r1, r3
 80060f8:	f7fa fd4e 	bl	8000b98 <__aeabi_d2f>
 80060fc:	4603      	mov	r3, r0
 80060fe:	60fb      	str	r3, [r7, #12]
    float acc = (Thrust - sign(velocity)*sq(velocity)*Cd + weigh * gravity * sin_approx(AHRS.pitch*RAD))/weigh;
 8006100:	4b36      	ldr	r3, [pc, #216]	@ (80061dc <dynamic_speed_esitmate+0x114>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f04f 0100 	mov.w	r1, #0
 8006108:	4618      	mov	r0, r3
 800610a:	f7fb f85f 	bl	80011cc <__aeabi_fcmpgt>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <dynamic_speed_esitmate+0x52>
 8006114:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
 8006118:	e000      	b.n	800611c <dynamic_speed_esitmate+0x54>
 800611a:	4c31      	ldr	r4, [pc, #196]	@ (80061e0 <dynamic_speed_esitmate+0x118>)
 800611c:	4b2f      	ldr	r3, [pc, #188]	@ (80061dc <dynamic_speed_esitmate+0x114>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a2e      	ldr	r2, [pc, #184]	@ (80061dc <dynamic_speed_esitmate+0x114>)
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	4611      	mov	r1, r2
 8006126:	4618      	mov	r0, r3
 8006128:	f7fa fe94 	bl	8000e54 <__aeabi_fmul>
 800612c:	4603      	mov	r3, r0
 800612e:	4619      	mov	r1, r3
 8006130:	4620      	mov	r0, r4
 8006132:	f7fa fe8f 	bl	8000e54 <__aeabi_fmul>
 8006136:	4603      	mov	r3, r0
 8006138:	461a      	mov	r2, r3
 800613a:	4b2a      	ldr	r3, [pc, #168]	@ (80061e4 <dynamic_speed_esitmate+0x11c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f7fa fe87 	bl	8000e54 <__aeabi_fmul>
 8006146:	4603      	mov	r3, r0
 8006148:	4619      	mov	r1, r3
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f7fa fd78 	bl	8000c40 <__aeabi_fsub>
 8006150:	4603      	mov	r3, r0
 8006152:	461c      	mov	r4, r3
 8006154:	4b24      	ldr	r3, [pc, #144]	@ (80061e8 <dynamic_speed_esitmate+0x120>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a24      	ldr	r2, [pc, #144]	@ (80061ec <dynamic_speed_esitmate+0x124>)
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	4611      	mov	r1, r2
 800615e:	4618      	mov	r0, r3
 8006160:	f7fa fe78 	bl	8000e54 <__aeabi_fmul>
 8006164:	4603      	mov	r3, r0
 8006166:	461d      	mov	r5, r3
 8006168:	4b21      	ldr	r3, [pc, #132]	@ (80061f0 <dynamic_speed_esitmate+0x128>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	4921      	ldr	r1, [pc, #132]	@ (80061f4 <dynamic_speed_esitmate+0x12c>)
 800616e:	4618      	mov	r0, r3
 8006170:	f7fa fe70 	bl	8000e54 <__aeabi_fmul>
 8006174:	4603      	mov	r3, r0
 8006176:	4618      	mov	r0, r3
 8006178:	f7fd f9de 	bl	8003538 <sin_approx>
 800617c:	4603      	mov	r3, r0
 800617e:	4619      	mov	r1, r3
 8006180:	4628      	mov	r0, r5
 8006182:	f7fa fe67 	bl	8000e54 <__aeabi_fmul>
 8006186:	4603      	mov	r3, r0
 8006188:	4619      	mov	r1, r3
 800618a:	4620      	mov	r0, r4
 800618c:	f7fa fd5a 	bl	8000c44 <__addsf3>
 8006190:	4603      	mov	r3, r0
 8006192:	461a      	mov	r2, r3
 8006194:	4b14      	ldr	r3, [pc, #80]	@ (80061e8 <dynamic_speed_esitmate+0x120>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f7fa ff0e 	bl	8000fbc <__aeabi_fdiv>
 80061a0:	4603      	mov	r3, r0
 80061a2:	60bb      	str	r3, [r7, #8]
    velocity += acc*dt;
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	68b8      	ldr	r0, [r7, #8]
 80061a8:	f7fa fe54 	bl	8000e54 <__aeabi_fmul>
 80061ac:	4603      	mov	r3, r0
 80061ae:	461a      	mov	r2, r3
 80061b0:	4b0a      	ldr	r3, [pc, #40]	@ (80061dc <dynamic_speed_esitmate+0x114>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4619      	mov	r1, r3
 80061b6:	4610      	mov	r0, r2
 80061b8:	f7fa fd44 	bl	8000c44 <__addsf3>
 80061bc:	4603      	mov	r3, r0
 80061be:	461a      	mov	r2, r3
 80061c0:	4b06      	ldr	r3, [pc, #24]	@ (80061dc <dynamic_speed_esitmate+0x114>)
 80061c2:	601a      	str	r2, [r3, #0]
    return velocity;
 80061c4:	4b05      	ldr	r3, [pc, #20]	@ (80061dc <dynamic_speed_esitmate+0x114>)
 80061c6:	681b      	ldr	r3, [r3, #0]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bdb0      	pop	{r4, r5, r7, pc}
 80061d0:	8d4fdf3b 	.word	0x8d4fdf3b
 80061d4:	3f826e97 	.word	0x3f826e97
 80061d8:	200000d0 	.word	0x200000d0
 80061dc:	20000c1c 	.word	0x20000c1c
 80061e0:	bf800000 	.word	0xbf800000
 80061e4:	20000030 	.word	0x20000030
 80061e8:	20000034 	.word	0x20000034
 80061ec:	2000002c 	.word	0x2000002c
 80061f0:	200004c8 	.word	0x200004c8
 80061f4:	3c8efa35 	.word	0x3c8efa35

080061f8 <mapI>:
}


#define Feq2Sec(F) (1.0f/F)

static int32_t mapI(int val, int min_in,int max_in,int min_out, int max_out){
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
   int out = (val - min_in)*(max_out - min_out)/(max_in - min_in);
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	6a39      	ldr	r1, [r7, #32]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	1a8a      	subs	r2, r1, r2
 8006212:	fb03 f202 	mul.w	r2, r3, r2
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	1acb      	subs	r3, r1, r3
 800621c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006220:	617b      	str	r3, [r7, #20]
}
 8006222:	bf00      	nop
 8006224:	4618      	mov	r0, r3
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr

0800622e <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	4603      	mov	r3, r0
 8006236:	6039      	str	r1, [r7, #0]
 8006238:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b2da      	uxtb	r2, r3
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	4053      	eors	r3, r2
 8006244:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8006246:	7bfb      	ldrb	r3, [r7, #15]
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	b25a      	sxtb	r2, r3
 800624c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006250:	4053      	eors	r3, r2
 8006252:	b25b      	sxtb	r3, r3
 8006254:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	881b      	ldrh	r3, [r3, #0]
 800625a:	0a1b      	lsrs	r3, r3, #8
 800625c:	b29b      	uxth	r3, r3
 800625e:	b21a      	sxth	r2, r3
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	b21b      	sxth	r3, r3
 8006266:	4053      	eors	r3, r2
 8006268:	b21a      	sxth	r2, r3
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	b21b      	sxth	r3, r3
 8006270:	4053      	eors	r3, r2
 8006272:	b21a      	sxth	r2, r3
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	091b      	lsrs	r3, r3, #4
 8006278:	b2db      	uxtb	r3, r3
 800627a:	b21b      	sxth	r3, r3
 800627c:	4053      	eors	r3, r2
 800627e:	b21b      	sxth	r3, r3
 8006280:	b29a      	uxth	r2, r3
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	801a      	strh	r2, [r3, #0]
}
 8006286:	bf00      	nop
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr

08006290 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800629e:	801a      	strh	r2, [r3, #0]
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr

080062aa <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	460b      	mov	r3, r1
 80062b4:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 80062b6:	f107 030e 	add.w	r3, r7, #14
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff ffe8 	bl	8006290 <crc_init>
	while (length--) {
 80062c0:	e009      	b.n	80062d6 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f107 020e 	add.w	r2, r7, #14
 80062ce:	4611      	mov	r1, r2
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff ffac 	bl	800622e <crc_accumulate>
	while (length--) {
 80062d6:	887b      	ldrh	r3, [r7, #2]
 80062d8:	1e5a      	subs	r2, r3, #1
 80062da:	807a      	strh	r2, [r7, #2]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1f0      	bne.n	80062c2 <crc_calculate+0x18>
        }
        return crcTmp;
 80062e0:	89fb      	ldrh	r3, [r7, #14]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b086      	sub	sp, #24
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	4613      	mov	r3, r2
 80062f6:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	617b      	str	r3, [r7, #20]
	while (length--) {
 80062fc:	e007      	b.n	800630e <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	617a      	str	r2, [r7, #20]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	68f9      	ldr	r1, [r7, #12]
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff ff90 	bl	800622e <crc_accumulate>
	while (length--) {
 800630e:	88fb      	ldrh	r3, [r7, #6]
 8006310:	1e5a      	subs	r2, r3, #1
 8006312:	80fa      	strh	r2, [r7, #6]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1f2      	bne.n	80062fe <crc_accumulate_buffer+0x14>
        }
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 800632e:	79fa      	ldrb	r2, [r7, #7]
 8006330:	4613      	mov	r3, r2
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4a03      	ldr	r2, [pc, #12]	@ (8006348 <mavlink_get_channel_status+0x24>)
 800633a:	4413      	add	r3, r2
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	bc80      	pop	{r7}
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000e04 	.word	0x20000e04

0800634c <mavlink_finalize_message_chan>:
						      uint8_t chan, uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
 800634c:	b590      	push	{r4, r7, lr}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	4608      	mov	r0, r1
 8006356:	4611      	mov	r1, r2
 8006358:	461a      	mov	r2, r3
 800635a:	4603      	mov	r3, r0
 800635c:	70fb      	strb	r3, [r7, #3]
 800635e:	460b      	mov	r3, r1
 8006360:	70bb      	strb	r3, [r7, #2]
 8006362:	4613      	mov	r3, r2
 8006364:	707b      	strb	r3, [r7, #1]
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	22fe      	movs	r2, #254	@ 0xfe
 800636a:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	7e3a      	ldrb	r2, [r7, #24]
 8006370:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	78fa      	ldrb	r2, [r7, #3]
 8006376:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	78ba      	ldrb	r2, [r7, #2]
 800637c:	719a      	strb	r2, [r3, #6]
	// One sequence number per component
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 800637e:	787b      	ldrb	r3, [r7, #1]
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff ffcf 	bl	8006324 <mavlink_get_channel_status>
 8006386:	4603      	mov	r3, r0
 8006388:	799a      	ldrb	r2, [r3, #6]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 800638e:	787b      	ldrb	r3, [r7, #1]
 8006390:	4618      	mov	r0, r3
 8006392:	f7ff ffc7 	bl	8006324 <mavlink_get_channel_status>
 8006396:	4603      	mov	r3, r0
 8006398:	799c      	ldrb	r4, [r3, #6]
 800639a:	787b      	ldrb	r3, [r7, #1]
 800639c:	4618      	mov	r0, r3
 800639e:	f7ff ffc1 	bl	8006324 <mavlink_get_channel_status>
 80063a2:	4603      	mov	r3, r0
 80063a4:	1c62      	adds	r2, r4, #1
 80063a6:	b2d2      	uxtb	r2, r2
 80063a8:	719a      	strb	r2, [r3, #6]
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3303      	adds	r3, #3
 80063ae:	2105      	movs	r1, #5
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff ff7a 	bl	80062aa <crc_calculate>
 80063b6:	4603      	mov	r3, r0
 80063b8:	461a      	mov	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f103 0108 	add.w	r1, r3, #8
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	78db      	ldrb	r3, [r3, #3]
 80063ca:	461a      	mov	r2, r3
 80063cc:	f7ff ff8d 	bl	80062ea <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &msg->checksum);
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	7f3b      	ldrb	r3, [r7, #28]
 80063d4:	4611      	mov	r1, r2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff ff29 	bl	800622e <crc_accumulate>
#endif
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	b299      	uxth	r1, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3308      	adds	r3, #8
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	78d2      	ldrb	r2, [r2, #3]
 80063ea:	4413      	add	r3, r2
 80063ec:	b2ca      	uxtb	r2, r1
 80063ee:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	0a1b      	lsrs	r3, r3, #8
 80063f8:	b299      	uxth	r1, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f103 0208 	add.w	r2, r3, #8
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	78db      	ldrb	r3, [r3, #3]
 8006404:	3301      	adds	r3, #1
 8006406:	4413      	add	r3, r2
 8006408:	b2ca      	uxtb	r2, r1
 800640a:	701a      	strb	r2, [r3, #0]

	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 800640c:	7e3b      	ldrb	r3, [r7, #24]
 800640e:	b29b      	uxth	r3, r3
 8006410:	3308      	adds	r3, #8
 8006412:	b29b      	uxth	r3, r3
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	bd90      	pop	{r4, r7, pc}

0800641c <mavlink_finalize_message>:
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
#if MAVLINK_CRC_EXTRA
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t length, uint8_t crc_extra)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af02      	add	r7, sp, #8
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	4608      	mov	r0, r1
 8006426:	4611      	mov	r1, r2
 8006428:	461a      	mov	r2, r3
 800642a:	4603      	mov	r3, r0
 800642c:	70fb      	strb	r3, [r7, #3]
 800642e:	460b      	mov	r3, r1
 8006430:	70bb      	strb	r3, [r7, #2]
 8006432:	4613      	mov	r3, r2
 8006434:	707b      	strb	r3, [r7, #1]
	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
 8006436:	78ba      	ldrb	r2, [r7, #2]
 8006438:	78f9      	ldrb	r1, [r7, #3]
 800643a:	7c3b      	ldrb	r3, [r7, #16]
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	787b      	ldrb	r3, [r7, #1]
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	2300      	movs	r3, #0
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7ff ff81 	bl	800634c <mavlink_finalize_message_chan>
 800644a:	4603      	mov	r3, r0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	1c99      	adds	r1, r3, #2
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	78db      	ldrb	r3, [r3, #3]
 8006466:	3306      	adds	r3, #6
 8006468:	461a      	mov	r2, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f00d fd54 	bl	8013f18 <memcpy>

	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	78db      	ldrb	r3, [r3, #3]
 8006474:	3306      	adds	r3, #6
 8006476:	461a      	mov	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4413      	add	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]

	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b29b      	uxth	r3, r3
 8006484:	b2da      	uxtb	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	0a1b      	lsrs	r3, r3, #8
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3301      	adds	r3, #1
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]

	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	78db      	ldrb	r3, [r3, #3]
 80064a0:	3308      	adds	r3, #8
 80064a2:	b29b      	uxth	r3, r3
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <mavlink_msg_heartbeat_pack>:
 * @param system_status System status flag, see MAV_STATE ENUM
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	603a      	str	r2, [r7, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	4603      	mov	r3, r0
 80064b8:	71fb      	strb	r3, [r7, #7]
 80064ba:	460b      	mov	r3, r1
 80064bc:	71bb      	strb	r3, [r7, #6]
 80064be:	4613      	mov	r3, r2
 80064c0:	717b      	strb	r3, [r7, #5]
	_mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
	mavlink_heartbeat_t packet;
	packet.custom_mode = custom_mode;
 80064c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c4:	60fb      	str	r3, [r7, #12]
	packet.type = type;
 80064c6:	797b      	ldrb	r3, [r7, #5]
 80064c8:	743b      	strb	r3, [r7, #16]
	packet.autopilot = autopilot;
 80064ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064ce:	747b      	strb	r3, [r7, #17]
	packet.base_mode = base_mode;
 80064d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064d4:	74bb      	strb	r3, [r7, #18]
	packet.system_status = system_status;
 80064d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80064da:	74fb      	strb	r3, [r7, #19]
	packet.mavlink_version = 3;
 80064dc:	2303      	movs	r3, #3
 80064de:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	3308      	adds	r3, #8
 80064e4:	f107 010c 	add.w	r1, r7, #12
 80064e8:	2209      	movs	r2, #9
 80064ea:	4618      	mov	r0, r3
 80064ec:	f00d fd14 	bl	8013f18 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2200      	movs	r2, #0
 80064f4:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 80064f6:	79ba      	ldrb	r2, [r7, #6]
 80064f8:	79f9      	ldrb	r1, [r7, #7]
 80064fa:	2332      	movs	r3, #50	@ 0x32
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	2309      	movs	r3, #9
 8006500:	6838      	ldr	r0, [r7, #0]
 8006502:	f7ff ff8b 	bl	800641c <mavlink_finalize_message>
 8006506:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
}
 8006508:	4618      	mov	r0, r3
 800650a:	3718      	adds	r7, #24
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <mavlink_msg_attitude_pack>:
 * @param yawspeed Yaw angular speed (rad/s)
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_attitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08e      	sub	sp, #56	@ 0x38
 8006514:	af02      	add	r7, sp, #8
 8006516:	60ba      	str	r2, [r7, #8]
 8006518:	607b      	str	r3, [r7, #4]
 800651a:	4603      	mov	r3, r0
 800651c:	73fb      	strb	r3, [r7, #15]
 800651e:	460b      	mov	r3, r1
 8006520:	73bb      	strb	r3, [r7, #14]
	_mav_put_float(buf, 24, yawspeed);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_ATTITUDE_LEN);
#else
	mavlink_attitude_t packet;
	packet.time_boot_ms = time_boot_ms;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	617b      	str	r3, [r7, #20]
	packet.roll = roll;
 8006526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006528:	61bb      	str	r3, [r7, #24]
	packet.pitch = pitch;
 800652a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800652c:	61fb      	str	r3, [r7, #28]
	packet.yaw = yaw;
 800652e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006530:	623b      	str	r3, [r7, #32]
	packet.rollspeed = rollspeed;
 8006532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
	packet.pitchspeed = pitchspeed;
 8006536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006538:	62bb      	str	r3, [r7, #40]	@ 0x28
	packet.yawspeed = yawspeed;
 800653a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800653c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	3308      	adds	r3, #8
 8006542:	f107 0114 	add.w	r1, r7, #20
 8006546:	221c      	movs	r2, #28
 8006548:	4618      	mov	r0, r3
 800654a:	f00d fce5 	bl	8013f18 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_ATTITUDE;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	221e      	movs	r2, #30
 8006552:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
 8006554:	7bba      	ldrb	r2, [r7, #14]
 8006556:	7bf9      	ldrb	r1, [r7, #15]
 8006558:	2327      	movs	r3, #39	@ 0x27
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	231c      	movs	r3, #28
 800655e:	68b8      	ldr	r0, [r7, #8]
 8006560:	f7ff ff5c 	bl	800641c <mavlink_finalize_message>
 8006564:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
}
 8006566:	4618      	mov	r0, r3
 8006568:	3730      	adds	r7, #48	@ 0x30
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <mavlink_msg_rc_channels_raw_pack>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rc_channels_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b08c      	sub	sp, #48	@ 0x30
 8006572:	af02      	add	r7, sp, #8
 8006574:	60ba      	str	r2, [r7, #8]
 8006576:	607b      	str	r3, [r7, #4]
 8006578:	4603      	mov	r3, r0
 800657a:	73fb      	strb	r3, [r7, #15]
 800657c:	460b      	mov	r3, r1
 800657e:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint8_t(buf, 21, rssi);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#else
	mavlink_rc_channels_raw_t packet;
	packet.time_boot_ms = time_boot_ms;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	613b      	str	r3, [r7, #16]
	packet.chan1_raw = chan1_raw;
 8006584:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006586:	82bb      	strh	r3, [r7, #20]
	packet.chan2_raw = chan2_raw;
 8006588:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800658a:	82fb      	strh	r3, [r7, #22]
	packet.chan3_raw = chan3_raw;
 800658c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800658e:	833b      	strh	r3, [r7, #24]
	packet.chan4_raw = chan4_raw;
 8006590:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006594:	837b      	strh	r3, [r7, #26]
	packet.chan5_raw = chan5_raw;
 8006596:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800659a:	83bb      	strh	r3, [r7, #28]
	packet.chan6_raw = chan6_raw;
 800659c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80065a0:	83fb      	strh	r3, [r7, #30]
	packet.chan7_raw = chan7_raw;
 80065a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80065a6:	843b      	strh	r3, [r7, #32]
	packet.chan8_raw = chan8_raw;
 80065a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80065ac:	847b      	strh	r3, [r7, #34]	@ 0x22
	packet.port = port;
 80065ae:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80065b2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	packet.rssi = rssi;
 80065b6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80065ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	3308      	adds	r3, #8
 80065c2:	f107 0110 	add.w	r1, r7, #16
 80065c6:	2216      	movs	r2, #22
 80065c8:	4618      	mov	r0, r3
 80065ca:	f00d fca5 	bl	8013f18 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_RC_CHANNELS_RAW;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2223      	movs	r2, #35	@ 0x23
 80065d2:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
 80065d4:	7bba      	ldrb	r2, [r7, #14]
 80065d6:	7bf9      	ldrb	r1, [r7, #15]
 80065d8:	23f4      	movs	r3, #244	@ 0xf4
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	2316      	movs	r3, #22
 80065de:	68b8      	ldr	r0, [r7, #8]
 80065e0:	f7ff ff1c 	bl	800641c <mavlink_finalize_message>
 80065e4:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3728      	adds	r7, #40	@ 0x28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <mavlink_msg_vfr_hud_pack>:
 * @param climb Current climb rate in meters/second
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b08c      	sub	sp, #48	@ 0x30
 80065f2:	af02      	add	r7, sp, #8
 80065f4:	60ba      	str	r2, [r7, #8]
 80065f6:	607b      	str	r3, [r7, #4]
 80065f8:	4603      	mov	r3, r0
 80065fa:	73fb      	strb	r3, [r7, #15]
 80065fc:	460b      	mov	r3, r1
 80065fe:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint16_t(buf, 18, throttle);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_VFR_HUD_LEN);
#else
	mavlink_vfr_hud_t packet;
	packet.airspeed = airspeed;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	617b      	str	r3, [r7, #20]
	packet.groundspeed = groundspeed;
 8006604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006606:	61bb      	str	r3, [r7, #24]
	packet.alt = alt;
 8006608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800660a:	61fb      	str	r3, [r7, #28]
	packet.climb = climb;
 800660c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800660e:	623b      	str	r3, [r7, #32]
	packet.heading = heading;
 8006610:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006612:	84bb      	strh	r3, [r7, #36]	@ 0x24
	packet.throttle = throttle;
 8006614:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006616:	84fb      	strh	r3, [r7, #38]	@ 0x26

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	3308      	adds	r3, #8
 800661c:	f107 0114 	add.w	r1, r7, #20
 8006620:	2214      	movs	r2, #20
 8006622:	4618      	mov	r0, r3
 8006624:	f00d fc78 	bl	8013f18 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	224a      	movs	r2, #74	@ 0x4a
 800662c:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 800662e:	7bba      	ldrb	r2, [r7, #14]
 8006630:	7bf9      	ldrb	r1, [r7, #15]
 8006632:	2314      	movs	r3, #20
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	2314      	movs	r3, #20
 8006638:	68b8      	ldr	r0, [r7, #8]
 800663a:	f7ff feef 	bl	800641c <mavlink_finalize_message>
 800663e:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
}
 8006640:	4618      	mov	r0, r3
 8006642:	3728      	adds	r7, #40	@ 0x28
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <mavlinkInit>:
static int isTxcpl;
uint32_t send_time_us;

extern float v_estimate;

void mavlinkInit(uint8_t syss_id, uint8_t comm_id,UART_HandleTypeDef *uartt,uint32_t baudrate){
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	60ba      	str	r2, [r7, #8]
 8006650:	607b      	str	r3, [r7, #4]
 8006652:	4603      	mov	r3, r0
 8006654:	73fb      	strb	r3, [r7, #15]
 8006656:	460b      	mov	r3, r1
 8006658:	73bb      	strb	r3, [r7, #14]
    isTxcpl = 1;
 800665a:	4b10      	ldr	r3, [pc, #64]	@ (800669c <mavlinkInit+0x54>)
 800665c:	2201      	movs	r2, #1
 800665e:	601a      	str	r2, [r3, #0]
    index_ =0;
 8006660:	4b0f      	ldr	r3, [pc, #60]	@ (80066a0 <mavlinkInit+0x58>)
 8006662:	2200      	movs	r2, #0
 8006664:	701a      	strb	r2, [r3, #0]
	sys_id  = syss_id;
 8006666:	4a0f      	ldr	r2, [pc, #60]	@ (80066a4 <mavlinkInit+0x5c>)
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	7013      	strb	r3, [r2, #0]
    com_id  = comm_id;
 800666c:	4a0e      	ldr	r2, [pc, #56]	@ (80066a8 <mavlinkInit+0x60>)
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	7013      	strb	r3, [r2, #0]
	uart = uartt;
 8006672:	4a0e      	ldr	r2, [pc, #56]	@ (80066ac <mavlinkInit+0x64>)
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	6013      	str	r3, [r2, #0]
    uartt->Init.BaudRate = baudrate;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(uartt);
 800667e:	68b8      	ldr	r0, [r7, #8]
 8006680:	f005 fab6 	bl	800bbf0 <HAL_UART_Init>
	HAL_UART_Receive_IT(uart, &data,1);
 8006684:	4b09      	ldr	r3, [pc, #36]	@ (80066ac <mavlinkInit+0x64>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2201      	movs	r2, #1
 800668a:	4909      	ldr	r1, [pc, #36]	@ (80066b0 <mavlinkInit+0x68>)
 800668c:	4618      	mov	r0, r3
 800668e:	f005 fb82 	bl	800bd96 <HAL_UART_Receive_IT>
}
 8006692:	bf00      	nop
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20000e00 	.word	0x20000e00
 80066a0:	20000d31 	.word	0x20000d31
 80066a4:	20000d32 	.word	0x20000d32
 80066a8:	20000d33 	.word	0x20000d33
 80066ac:	20000d34 	.word	0x20000d34
 80066b0:	20000d30 	.word	0x20000d30

080066b4 <mavlink_osd>:
*   Attitude
*   GPS 
*   RC signal
*   heartbeat
*/
void mavlink_osd(){
 80066b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066b6:	b093      	sub	sp, #76	@ 0x4c
 80066b8:	af0a      	add	r7, sp, #40	@ 0x28
	static uint8_t count_ = 0;
	static uint8_t count2_ = 0;
	if(isTxcpl)
 80066ba:	4b7c      	ldr	r3, [pc, #496]	@ (80068ac <mavlink_osd+0x1f8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 80ef 	beq.w	80068a2 <mavlink_osd+0x1ee>
	{
		switch (count_)
 80066c4:	4b7a      	ldr	r3, [pc, #488]	@ (80068b0 <mavlink_osd+0x1fc>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d071      	beq.n	80067b0 <mavlink_osd+0xfc>
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	f300 80d8 	bgt.w	8006882 <mavlink_osd+0x1ce>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <mavlink_osd+0x28>
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d02f      	beq.n	800673a <mavlink_osd+0x86>
 80066da:	e0d2      	b.n	8006882 <mavlink_osd+0x1ce>
		{
		// fast display
		case 0:  
			mavlink_msg_attitude_pack(sys_id,com_id,&msg,0,AHRS.roll*RAD,AHRS.pitch*RAD,0,0,0,0);
 80066dc:	4b75      	ldr	r3, [pc, #468]	@ (80068b4 <mavlink_osd+0x200>)
 80066de:	781c      	ldrb	r4, [r3, #0]
 80066e0:	4b75      	ldr	r3, [pc, #468]	@ (80068b8 <mavlink_osd+0x204>)
 80066e2:	781d      	ldrb	r5, [r3, #0]
 80066e4:	4b75      	ldr	r3, [pc, #468]	@ (80068bc <mavlink_osd+0x208>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4975      	ldr	r1, [pc, #468]	@ (80068c0 <mavlink_osd+0x20c>)
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fa fbb2 	bl	8000e54 <__aeabi_fmul>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461e      	mov	r6, r3
 80066f4:	4b71      	ldr	r3, [pc, #452]	@ (80068bc <mavlink_osd+0x208>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	4971      	ldr	r1, [pc, #452]	@ (80068c0 <mavlink_osd+0x20c>)
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fa fbaa 	bl	8000e54 <__aeabi_fmul>
 8006700:	4603      	mov	r3, r0
 8006702:	461a      	mov	r2, r3
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	9305      	str	r3, [sp, #20]
 800670a:	f04f 0300 	mov.w	r3, #0
 800670e:	9304      	str	r3, [sp, #16]
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	9303      	str	r3, [sp, #12]
 8006716:	f04f 0300 	mov.w	r3, #0
 800671a:	9302      	str	r3, [sp, #8]
 800671c:	9201      	str	r2, [sp, #4]
 800671e:	9600      	str	r6, [sp, #0]
 8006720:	2300      	movs	r3, #0
 8006722:	4a68      	ldr	r2, [pc, #416]	@ (80068c4 <mavlink_osd+0x210>)
 8006724:	4629      	mov	r1, r5
 8006726:	4620      	mov	r0, r4
 8006728:	f7ff fef2 	bl	8006510 <mavlink_msg_attitude_pack>
			count_ ++;
 800672c:	4b60      	ldr	r3, [pc, #384]	@ (80068b0 <mavlink_osd+0x1fc>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	3301      	adds	r3, #1
 8006732:	b2da      	uxtb	r2, r3
 8006734:	4b5e      	ldr	r3, [pc, #376]	@ (80068b0 <mavlink_osd+0x1fc>)
 8006736:	701a      	strb	r2, [r3, #0]
			break;
 8006738:	e0a3      	b.n	8006882 <mavlink_osd+0x1ce>
		case 1:  
			float airspeed = 314;    // osd in km/h
 800673a:	4b63      	ldr	r3, [pc, #396]	@ (80068c8 <mavlink_osd+0x214>)
 800673c:	61bb      	str	r3, [r7, #24]
			float groundspeed = 57;  // osd in km/h
 800673e:	4b63      	ldr	r3, [pc, #396]	@ (80068cc <mavlink_osd+0x218>)
 8006740:	617b      	str	r3, [r7, #20]
			uint16_t throttle = (ibusChannelData[CH3] - 1000)*0.1f;
 8006742:	4b63      	ldr	r3, [pc, #396]	@ (80068d0 <mavlink_osd+0x21c>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800674a:	4618      	mov	r0, r3
 800674c:	f7fa fb2a 	bl	8000da4 <__aeabi_ui2f>
 8006750:	4603      	mov	r3, r0
 8006752:	4960      	ldr	r1, [pc, #384]	@ (80068d4 <mavlink_osd+0x220>)
 8006754:	4618      	mov	r0, r3
 8006756:	f7fa fb7d 	bl	8000e54 <__aeabi_fmul>
 800675a:	4603      	mov	r3, r0
 800675c:	4618      	mov	r0, r3
 800675e:	f7fa fd7b 	bl	8001258 <__aeabi_f2uiz>
 8006762:	4603      	mov	r3, r0
 8006764:	827b      	strh	r3, [r7, #18]
			float alt = 333;
 8006766:	4b5c      	ldr	r3, [pc, #368]	@ (80068d8 <mavlink_osd+0x224>)
 8006768:	60fb      	str	r3, [r7, #12]
			float climb = 5;
 800676a:	4b5c      	ldr	r3, [pc, #368]	@ (80068dc <mavlink_osd+0x228>)
 800676c:	60bb      	str	r3, [r7, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 800676e:	4b51      	ldr	r3, [pc, #324]	@ (80068b4 <mavlink_osd+0x200>)
 8006770:	781c      	ldrb	r4, [r3, #0]
 8006772:	4b51      	ldr	r3, [pc, #324]	@ (80068b8 <mavlink_osd+0x204>)
 8006774:	781d      	ldrb	r5, [r3, #0]
						airspeed, groundspeed,AHRS.yaw, throttle,alt, climb);
 8006776:	4b51      	ldr	r3, [pc, #324]	@ (80068bc <mavlink_osd+0x208>)
 8006778:	689b      	ldr	r3, [r3, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 800677a:	4618      	mov	r0, r3
 800677c:	f7fa fd46 	bl	800120c <__aeabi_f2iz>
 8006780:	4603      	mov	r3, r0
 8006782:	b21b      	sxth	r3, r3
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	9204      	str	r2, [sp, #16]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	9203      	str	r2, [sp, #12]
 800678c:	8a7a      	ldrh	r2, [r7, #18]
 800678e:	9202      	str	r2, [sp, #8]
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	4a4a      	ldr	r2, [pc, #296]	@ (80068c4 <mavlink_osd+0x210>)
 800679a:	4629      	mov	r1, r5
 800679c:	4620      	mov	r0, r4
 800679e:	f7ff ff26 	bl	80065ee <mavlink_msg_vfr_hud_pack>
			count_ ++;
 80067a2:	4b43      	ldr	r3, [pc, #268]	@ (80068b0 <mavlink_osd+0x1fc>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	4b41      	ldr	r3, [pc, #260]	@ (80068b0 <mavlink_osd+0x1fc>)
 80067ac:	701a      	strb	r2, [r3, #0]
			break;
 80067ae:	e068      	b.n	8006882 <mavlink_osd+0x1ce>
		case 2:
			switch (count2_)
 80067b0:	4b4b      	ldr	r3, [pc, #300]	@ (80068e0 <mavlink_osd+0x22c>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d046      	beq.n	8006846 <mavlink_osd+0x192>
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	dc5f      	bgt.n	800687c <mavlink_osd+0x1c8>
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <mavlink_osd+0x112>
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d007      	beq.n	80067d4 <mavlink_osd+0x120>
 80067c4:	e05a      	b.n	800687c <mavlink_osd+0x1c8>
			{
			case 0:
				//mavlink_msg_gps_raw_int_pack(sys_id,com_id,&msg,
				//						0, _gps.fix,_gps.position[0],_gps.position[1],1200,
				//						1 , 1 , 2200,0 ,abs(v_estimate));
				count2_ ++;
 80067c6:	4b46      	ldr	r3, [pc, #280]	@ (80068e0 <mavlink_osd+0x22c>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	3301      	adds	r3, #1
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	4b44      	ldr	r3, [pc, #272]	@ (80068e0 <mavlink_osd+0x22c>)
 80067d0:	701a      	strb	r2, [r3, #0]

				break;
 80067d2:	e053      	b.n	800687c <mavlink_osd+0x1c8>
			case 1:
			    uint8_t rssi = mapI(ibusChannelData[CH11],1000,2000,0,255);
 80067d4:	4b3e      	ldr	r3, [pc, #248]	@ (80068d0 <mavlink_osd+0x21c>)
 80067d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d8:	4618      	mov	r0, r3
 80067da:	23ff      	movs	r3, #255	@ 0xff
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	2300      	movs	r3, #0
 80067e0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80067e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80067e8:	f7ff fd06 	bl	80061f8 <mapI>
 80067ec:	4603      	mov	r3, r0
 80067ee:	773b      	strb	r3, [r7, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 80067f0:	4b30      	ldr	r3, [pc, #192]	@ (80068b4 <mavlink_osd+0x200>)
 80067f2:	781c      	ldrb	r4, [r3, #0]
 80067f4:	4b30      	ldr	r3, [pc, #192]	@ (80068b8 <mavlink_osd+0x204>)
 80067f6:	781d      	ldrb	r5, [r3, #0]
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 80067f8:	4b35      	ldr	r3, [pc, #212]	@ (80068d0 <mavlink_osd+0x21c>)
 80067fa:	68db      	ldr	r3, [r3, #12]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 80067fc:	b29b      	uxth	r3, r3
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 80067fe:	4a34      	ldr	r2, [pc, #208]	@ (80068d0 <mavlink_osd+0x21c>)
 8006800:	6992      	ldr	r2, [r2, #24]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8006802:	b292      	uxth	r2, r2
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 8006804:	4932      	ldr	r1, [pc, #200]	@ (80068d0 <mavlink_osd+0x21c>)
 8006806:	69c9      	ldr	r1, [r1, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8006808:	b289      	uxth	r1, r1
 800680a:	7f38      	ldrb	r0, [r7, #28]
 800680c:	9009      	str	r0, [sp, #36]	@ 0x24
 800680e:	2000      	movs	r0, #0
 8006810:	9008      	str	r0, [sp, #32]
 8006812:	2000      	movs	r0, #0
 8006814:	9007      	str	r0, [sp, #28]
 8006816:	2000      	movs	r0, #0
 8006818:	9006      	str	r0, [sp, #24]
 800681a:	2000      	movs	r0, #0
 800681c:	9005      	str	r0, [sp, #20]
 800681e:	2000      	movs	r0, #0
 8006820:	9004      	str	r0, [sp, #16]
 8006822:	9103      	str	r1, [sp, #12]
 8006824:	9202      	str	r2, [sp, #8]
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	2300      	movs	r3, #0
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	2300      	movs	r3, #0
 800682e:	4a25      	ldr	r2, [pc, #148]	@ (80068c4 <mavlink_osd+0x210>)
 8006830:	4629      	mov	r1, r5
 8006832:	4620      	mov	r0, r4
 8006834:	f7ff fe9b 	bl	800656e <mavlink_msg_rc_channels_raw_pack>
						0,0,0,
						0,0,rssi);
				count2_ ++;
 8006838:	4b29      	ldr	r3, [pc, #164]	@ (80068e0 <mavlink_osd+0x22c>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	3301      	adds	r3, #1
 800683e:	b2da      	uxtb	r2, r3
 8006840:	4b27      	ldr	r3, [pc, #156]	@ (80068e0 <mavlink_osd+0x22c>)
 8006842:	701a      	strb	r2, [r3, #0]
				break;
 8006844:	e01a      	b.n	800687c <mavlink_osd+0x1c8>
			case 2: // send heartbeat
				uint8_t type = MAV_TYPE_FIXED_WING;
 8006846:	2301      	movs	r3, #1
 8006848:	77fb      	strb	r3, [r7, #31]
				uint8_t autopilot = MAV_AUTOPILOT_GENERIC;
 800684a:	2300      	movs	r3, #0
 800684c:	77bb      	strb	r3, [r7, #30]
				uint8_t base_mode = MAV_MODE_FLAG_TEST_ENABLED;
 800684e:	2302      	movs	r3, #2
 8006850:	777b      	strb	r3, [r7, #29]
				mavlink_msg_heartbeat_pack(sys_id,com_id,&msg,type,autopilot,base_mode,base_mode, MAV_STATE_UNINIT);
 8006852:	4b18      	ldr	r3, [pc, #96]	@ (80068b4 <mavlink_osd+0x200>)
 8006854:	7818      	ldrb	r0, [r3, #0]
 8006856:	4b18      	ldr	r3, [pc, #96]	@ (80068b8 <mavlink_osd+0x204>)
 8006858:	7819      	ldrb	r1, [r3, #0]
 800685a:	7f7b      	ldrb	r3, [r7, #29]
 800685c:	7ffa      	ldrb	r2, [r7, #31]
 800685e:	2400      	movs	r4, #0
 8006860:	9403      	str	r4, [sp, #12]
 8006862:	9302      	str	r3, [sp, #8]
 8006864:	7f7b      	ldrb	r3, [r7, #29]
 8006866:	9301      	str	r3, [sp, #4]
 8006868:	7fbb      	ldrb	r3, [r7, #30]
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	4613      	mov	r3, r2
 800686e:	4a15      	ldr	r2, [pc, #84]	@ (80068c4 <mavlink_osd+0x210>)
 8006870:	f7ff fe1c 	bl	80064ac <mavlink_msg_heartbeat_pack>
				count2_ = 0;
 8006874:	4b1a      	ldr	r3, [pc, #104]	@ (80068e0 <mavlink_osd+0x22c>)
 8006876:	2200      	movs	r2, #0
 8006878:	701a      	strb	r2, [r3, #0]
				break;
 800687a:	bf00      	nop
				                                     0,q,0,0,0,thrust);
		        count2_ = 0;
				break;
			*/
			}
			count_ = 0;
 800687c:	4b0c      	ldr	r3, [pc, #48]	@ (80068b0 <mavlink_osd+0x1fc>)
 800687e:	2200      	movs	r2, #0
 8006880:	701a      	strb	r2, [r3, #0]
		}
		uint16_t len_data = mavlink_msg_to_send_buffer(buffer__,&msg);
 8006882:	4910      	ldr	r1, [pc, #64]	@ (80068c4 <mavlink_osd+0x210>)
 8006884:	4817      	ldr	r0, [pc, #92]	@ (80068e4 <mavlink_osd+0x230>)
 8006886:	f7ff fde5 	bl	8006454 <mavlink_msg_to_send_buffer>
 800688a:	4603      	mov	r3, r0
 800688c:	80fb      	strh	r3, [r7, #6]
	    HAL_UART_Transmit_DMA(uart,buffer__,len_data);
 800688e:	4b16      	ldr	r3, [pc, #88]	@ (80068e8 <mavlink_osd+0x234>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	88fa      	ldrh	r2, [r7, #6]
 8006894:	4913      	ldr	r1, [pc, #76]	@ (80068e4 <mavlink_osd+0x230>)
 8006896:	4618      	mov	r0, r3
 8006898:	f005 faa2 	bl	800bde0 <HAL_UART_Transmit_DMA>
	    isTxcpl = 0;
 800689c:	4b03      	ldr	r3, [pc, #12]	@ (80068ac <mavlink_osd+0x1f8>)
 800689e:	2200      	movs	r2, #0
 80068a0:	601a      	str	r2, [r3, #0]
	}
}
 80068a2:	bf00      	nop
 80068a4:	3724      	adds	r7, #36	@ 0x24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20000e00 	.word	0x20000e00
 80068b0:	20000e34 	.word	0x20000e34
 80068b4:	20000d32 	.word	0x20000d32
 80068b8:	20000d33 	.word	0x20000d33
 80068bc:	200004c8 	.word	0x200004c8
 80068c0:	3c8efa35 	.word	0x3c8efa35
 80068c4:	20000c20 	.word	0x20000c20
 80068c8:	439d0000 	.word	0x439d0000
 80068cc:	42640000 	.word	0x42640000
 80068d0:	200000d0 	.word	0x200000d0
 80068d4:	3dcccccd 	.word	0x3dcccccd
 80068d8:	43a68000 	.word	0x43a68000
 80068dc:	40a00000 	.word	0x40a00000
 80068e0:	20000e35 	.word	0x20000e35
 80068e4:	20000d38 	.word	0x20000d38
 80068e8:	20000d34 	.word	0x20000d34

080068ec <mavlink_tx_cpl_callback>:
/*
 * 
 */
uint32_t temp;
void mavlink_tx_cpl_callback()
{   
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
	//send_time_us = millis() - temp;
	//temp = millis();
	isTxcpl = 1;
 80068f0:	4b03      	ldr	r3, [pc, #12]	@ (8006900 <mavlink_tx_cpl_callback+0x14>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	601a      	str	r2, [r3, #0]
}
 80068f6:	bf00      	nop
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc80      	pop	{r7}
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	20000e00 	.word	0x20000e00

08006904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006908:	4b08      	ldr	r3, [pc, #32]	@ (800692c <HAL_Init+0x28>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a07      	ldr	r2, [pc, #28]	@ (800692c <HAL_Init+0x28>)
 800690e:	f043 0310 	orr.w	r3, r3, #16
 8006912:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006914:	2003      	movs	r0, #3
 8006916:	f000 f8f5 	bl	8006b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800691a:	200f      	movs	r0, #15
 800691c:	f7fe f8f2 	bl	8004b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006920:	f7fe f8b8 	bl	8004a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	40022000 	.word	0x40022000

08006930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006934:	4b05      	ldr	r3, [pc, #20]	@ (800694c <HAL_IncTick+0x1c>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	4b05      	ldr	r3, [pc, #20]	@ (8006950 <HAL_IncTick+0x20>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4413      	add	r3, r2
 8006940:	4a03      	ldr	r2, [pc, #12]	@ (8006950 <HAL_IncTick+0x20>)
 8006942:	6013      	str	r3, [r2, #0]
}
 8006944:	bf00      	nop
 8006946:	46bd      	mov	sp, r7
 8006948:	bc80      	pop	{r7}
 800694a:	4770      	bx	lr
 800694c:	2000003c 	.word	0x2000003c
 8006950:	20000e38 	.word	0x20000e38

08006954 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  return uwTick;
 8006958:	4b02      	ldr	r3, [pc, #8]	@ (8006964 <HAL_GetTick+0x10>)
 800695a:	681b      	ldr	r3, [r3, #0]
}
 800695c:	4618      	mov	r0, r3
 800695e:	46bd      	mov	sp, r7
 8006960:	bc80      	pop	{r7}
 8006962:	4770      	bx	lr
 8006964:	20000e38 	.word	0x20000e38

08006968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006970:	f7ff fff0 	bl	8006954 <HAL_GetTick>
 8006974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006980:	d005      	beq.n	800698e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006982:	4b0a      	ldr	r3, [pc, #40]	@ (80069ac <HAL_Delay+0x44>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800698e:	bf00      	nop
 8006990:	f7ff ffe0 	bl	8006954 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	429a      	cmp	r2, r3
 800699e:	d8f7      	bhi.n	8006990 <HAL_Delay+0x28>
  {
  }
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	2000003c 	.word	0x2000003c

080069b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069c0:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <__NVIC_SetPriorityGrouping+0x44>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80069cc:	4013      	ands	r3, r2
 80069ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80069dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069e2:	4a04      	ldr	r2, [pc, #16]	@ (80069f4 <__NVIC_SetPriorityGrouping+0x44>)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	60d3      	str	r3, [r2, #12]
}
 80069e8:	bf00      	nop
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bc80      	pop	{r7}
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	e000ed00 	.word	0xe000ed00

080069f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069fc:	4b04      	ldr	r3, [pc, #16]	@ (8006a10 <__NVIC_GetPriorityGrouping+0x18>)
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	0a1b      	lsrs	r3, r3, #8
 8006a02:	f003 0307 	and.w	r3, r3, #7
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bc80      	pop	{r7}
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	e000ed00 	.word	0xe000ed00

08006a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	db0b      	blt.n	8006a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a26:	79fb      	ldrb	r3, [r7, #7]
 8006a28:	f003 021f 	and.w	r2, r3, #31
 8006a2c:	4906      	ldr	r1, [pc, #24]	@ (8006a48 <__NVIC_EnableIRQ+0x34>)
 8006a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	2001      	movs	r0, #1
 8006a36:	fa00 f202 	lsl.w	r2, r0, r2
 8006a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr
 8006a48:	e000e100 	.word	0xe000e100

08006a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	4603      	mov	r3, r0
 8006a54:	6039      	str	r1, [r7, #0]
 8006a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	db0a      	blt.n	8006a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	490c      	ldr	r1, [pc, #48]	@ (8006a98 <__NVIC_SetPriority+0x4c>)
 8006a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a6a:	0112      	lsls	r2, r2, #4
 8006a6c:	b2d2      	uxtb	r2, r2
 8006a6e:	440b      	add	r3, r1
 8006a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a74:	e00a      	b.n	8006a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	4908      	ldr	r1, [pc, #32]	@ (8006a9c <__NVIC_SetPriority+0x50>)
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	3b04      	subs	r3, #4
 8006a84:	0112      	lsls	r2, r2, #4
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	440b      	add	r3, r1
 8006a8a:	761a      	strb	r2, [r3, #24]
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bc80      	pop	{r7}
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	e000e100 	.word	0xe000e100
 8006a9c:	e000ed00 	.word	0xe000ed00

08006aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b089      	sub	sp, #36	@ 0x24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f003 0307 	and.w	r3, r3, #7
 8006ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f1c3 0307 	rsb	r3, r3, #7
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	bf28      	it	cs
 8006abe:	2304      	movcs	r3, #4
 8006ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	2b06      	cmp	r3, #6
 8006ac8:	d902      	bls.n	8006ad0 <NVIC_EncodePriority+0x30>
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	3b03      	subs	r3, #3
 8006ace:	e000      	b.n	8006ad2 <NVIC_EncodePriority+0x32>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	fa02 f303 	lsl.w	r3, r2, r3
 8006ade:	43da      	mvns	r2, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	401a      	ands	r2, r3
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	fa01 f303 	lsl.w	r3, r1, r3
 8006af2:	43d9      	mvns	r1, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006af8:	4313      	orrs	r3, r2
         );
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3724      	adds	r7, #36	@ 0x24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr

08006b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff ff4f 	bl	80069b0 <__NVIC_SetPriorityGrouping>
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b086      	sub	sp, #24
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	4603      	mov	r3, r0
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b2c:	f7ff ff64 	bl	80069f8 <__NVIC_GetPriorityGrouping>
 8006b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	6978      	ldr	r0, [r7, #20]
 8006b38:	f7ff ffb2 	bl	8006aa0 <NVIC_EncodePriority>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b42:	4611      	mov	r1, r2
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff ff81 	bl	8006a4c <__NVIC_SetPriority>
}
 8006b4a:	bf00      	nop
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	4603      	mov	r3, r0
 8006b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff ff57 	bl	8006a14 <__NVIC_EnableIRQ>
}
 8006b66:	bf00      	nop
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e059      	b.n	8006c3a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8006c44 <HAL_DMA_Init+0xd4>)
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d80f      	bhi.n	8006bb2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	4b2b      	ldr	r3, [pc, #172]	@ (8006c48 <HAL_DMA_Init+0xd8>)
 8006b9a:	4413      	add	r3, r2
 8006b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8006c4c <HAL_DMA_Init+0xdc>)
 8006b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba2:	091b      	lsrs	r3, r3, #4
 8006ba4:	009a      	lsls	r2, r3, #2
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a28      	ldr	r2, [pc, #160]	@ (8006c50 <HAL_DMA_Init+0xe0>)
 8006bae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006bb0:	e00e      	b.n	8006bd0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	4b26      	ldr	r3, [pc, #152]	@ (8006c54 <HAL_DMA_Init+0xe4>)
 8006bba:	4413      	add	r3, r2
 8006bbc:	4a23      	ldr	r2, [pc, #140]	@ (8006c4c <HAL_DMA_Init+0xdc>)
 8006bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc2:	091b      	lsrs	r3, r3, #4
 8006bc4:	009a      	lsls	r2, r3, #2
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a22      	ldr	r2, [pc, #136]	@ (8006c58 <HAL_DMA_Init+0xe8>)
 8006bce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006be6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006bea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr
 8006c44:	40020407 	.word	0x40020407
 8006c48:	bffdfff8 	.word	0xbffdfff8
 8006c4c:	cccccccd 	.word	0xcccccccd
 8006c50:	40020000 	.word	0x40020000
 8006c54:	bffdfbf8 	.word	0xbffdfbf8
 8006c58:	40020400 	.word	0x40020400

08006c5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d101      	bne.n	8006c7c <HAL_DMA_Start_IT+0x20>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e04b      	b.n	8006d14 <HAL_DMA_Start_IT+0xb8>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d13a      	bne.n	8006d06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0201 	bic.w	r2, r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	68b9      	ldr	r1, [r7, #8]
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fbb1 	bl	800741c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d008      	beq.n	8006cd4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f042 020e 	orr.w	r2, r2, #14
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	e00f      	b.n	8006cf4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 0204 	bic.w	r2, r2, #4
 8006ce2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 020a 	orr.w	r2, r2, #10
 8006cf2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0201 	orr.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	e005      	b.n	8006d12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006d0e:	2302      	movs	r3, #2
 8006d10:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d008      	beq.n	8006d46 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2204      	movs	r2, #4
 8006d38:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e020      	b.n	8006d88 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 020e 	bic.w	r2, r2, #14
 8006d54:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0201 	bic.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d6e:	2101      	movs	r1, #1
 8006d70:	fa01 f202 	lsl.w	r2, r1, r2
 8006d74:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bc80      	pop	{r7}
 8006d90:	4770      	bx	lr
	...

08006d94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d005      	beq.n	8006db8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2204      	movs	r2, #4
 8006db0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	73fb      	strb	r3, [r7, #15]
 8006db6:	e0d6      	b.n	8006f66 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 020e 	bic.w	r2, r2, #14
 8006dc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0201 	bic.w	r2, r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	4b64      	ldr	r3, [pc, #400]	@ (8006f70 <HAL_DMA_Abort_IT+0x1dc>)
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d958      	bls.n	8006e96 <HAL_DMA_Abort_IT+0x102>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a62      	ldr	r2, [pc, #392]	@ (8006f74 <HAL_DMA_Abort_IT+0x1e0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d04f      	beq.n	8006e8e <HAL_DMA_Abort_IT+0xfa>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a61      	ldr	r2, [pc, #388]	@ (8006f78 <HAL_DMA_Abort_IT+0x1e4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d048      	beq.n	8006e8a <HAL_DMA_Abort_IT+0xf6>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a5f      	ldr	r2, [pc, #380]	@ (8006f7c <HAL_DMA_Abort_IT+0x1e8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d040      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xf0>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a5e      	ldr	r2, [pc, #376]	@ (8006f80 <HAL_DMA_Abort_IT+0x1ec>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d038      	beq.n	8006e7e <HAL_DMA_Abort_IT+0xea>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a5c      	ldr	r2, [pc, #368]	@ (8006f84 <HAL_DMA_Abort_IT+0x1f0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d030      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xe4>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a5b      	ldr	r2, [pc, #364]	@ (8006f88 <HAL_DMA_Abort_IT+0x1f4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d028      	beq.n	8006e72 <HAL_DMA_Abort_IT+0xde>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a52      	ldr	r2, [pc, #328]	@ (8006f70 <HAL_DMA_Abort_IT+0x1dc>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d020      	beq.n	8006e6c <HAL_DMA_Abort_IT+0xd8>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a57      	ldr	r2, [pc, #348]	@ (8006f8c <HAL_DMA_Abort_IT+0x1f8>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d019      	beq.n	8006e68 <HAL_DMA_Abort_IT+0xd4>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a55      	ldr	r2, [pc, #340]	@ (8006f90 <HAL_DMA_Abort_IT+0x1fc>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d012      	beq.n	8006e64 <HAL_DMA_Abort_IT+0xd0>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a54      	ldr	r2, [pc, #336]	@ (8006f94 <HAL_DMA_Abort_IT+0x200>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00a      	beq.n	8006e5e <HAL_DMA_Abort_IT+0xca>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a52      	ldr	r2, [pc, #328]	@ (8006f98 <HAL_DMA_Abort_IT+0x204>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d102      	bne.n	8006e58 <HAL_DMA_Abort_IT+0xc4>
 8006e52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e56:	e01b      	b.n	8006e90 <HAL_DMA_Abort_IT+0xfc>
 8006e58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006e5c:	e018      	b.n	8006e90 <HAL_DMA_Abort_IT+0xfc>
 8006e5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e62:	e015      	b.n	8006e90 <HAL_DMA_Abort_IT+0xfc>
 8006e64:	2310      	movs	r3, #16
 8006e66:	e013      	b.n	8006e90 <HAL_DMA_Abort_IT+0xfc>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e011      	b.n	8006e90 <HAL_DMA_Abort_IT+0xfc>
 8006e6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e70:	e00e      	b.n	8006e90 <HAL_DMA_Abort_IT+0xfc>
 8006e72:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006e76:	e00b      	b.n	8006e90 <HAL_DMA_Abort_IT+0xfc>
 8006e78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006e7c:	e008      	b.n	8006e90 <HAL_DMA_Abort_IT+0xfc>
 8006e7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e82:	e005      	b.n	8006e90 <HAL_DMA_Abort_IT+0xfc>
 8006e84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e88:	e002      	b.n	8006e90 <HAL_DMA_Abort_IT+0xfc>
 8006e8a:	2310      	movs	r3, #16
 8006e8c:	e000      	b.n	8006e90 <HAL_DMA_Abort_IT+0xfc>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	4a42      	ldr	r2, [pc, #264]	@ (8006f9c <HAL_DMA_Abort_IT+0x208>)
 8006e92:	6053      	str	r3, [r2, #4]
 8006e94:	e057      	b.n	8006f46 <HAL_DMA_Abort_IT+0x1b2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a36      	ldr	r2, [pc, #216]	@ (8006f74 <HAL_DMA_Abort_IT+0x1e0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d04f      	beq.n	8006f40 <HAL_DMA_Abort_IT+0x1ac>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a34      	ldr	r2, [pc, #208]	@ (8006f78 <HAL_DMA_Abort_IT+0x1e4>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d048      	beq.n	8006f3c <HAL_DMA_Abort_IT+0x1a8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a33      	ldr	r2, [pc, #204]	@ (8006f7c <HAL_DMA_Abort_IT+0x1e8>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d040      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x1a2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a31      	ldr	r2, [pc, #196]	@ (8006f80 <HAL_DMA_Abort_IT+0x1ec>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d038      	beq.n	8006f30 <HAL_DMA_Abort_IT+0x19c>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a30      	ldr	r2, [pc, #192]	@ (8006f84 <HAL_DMA_Abort_IT+0x1f0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d030      	beq.n	8006f2a <HAL_DMA_Abort_IT+0x196>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8006f88 <HAL_DMA_Abort_IT+0x1f4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d028      	beq.n	8006f24 <HAL_DMA_Abort_IT+0x190>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a26      	ldr	r2, [pc, #152]	@ (8006f70 <HAL_DMA_Abort_IT+0x1dc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d020      	beq.n	8006f1e <HAL_DMA_Abort_IT+0x18a>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8006f8c <HAL_DMA_Abort_IT+0x1f8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d019      	beq.n	8006f1a <HAL_DMA_Abort_IT+0x186>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a29      	ldr	r2, [pc, #164]	@ (8006f90 <HAL_DMA_Abort_IT+0x1fc>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d012      	beq.n	8006f16 <HAL_DMA_Abort_IT+0x182>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a27      	ldr	r2, [pc, #156]	@ (8006f94 <HAL_DMA_Abort_IT+0x200>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00a      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x17c>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a26      	ldr	r2, [pc, #152]	@ (8006f98 <HAL_DMA_Abort_IT+0x204>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d102      	bne.n	8006f0a <HAL_DMA_Abort_IT+0x176>
 8006f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f08:	e01b      	b.n	8006f42 <HAL_DMA_Abort_IT+0x1ae>
 8006f0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006f0e:	e018      	b.n	8006f42 <HAL_DMA_Abort_IT+0x1ae>
 8006f10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f14:	e015      	b.n	8006f42 <HAL_DMA_Abort_IT+0x1ae>
 8006f16:	2310      	movs	r3, #16
 8006f18:	e013      	b.n	8006f42 <HAL_DMA_Abort_IT+0x1ae>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e011      	b.n	8006f42 <HAL_DMA_Abort_IT+0x1ae>
 8006f1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f22:	e00e      	b.n	8006f42 <HAL_DMA_Abort_IT+0x1ae>
 8006f24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006f28:	e00b      	b.n	8006f42 <HAL_DMA_Abort_IT+0x1ae>
 8006f2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006f2e:	e008      	b.n	8006f42 <HAL_DMA_Abort_IT+0x1ae>
 8006f30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f34:	e005      	b.n	8006f42 <HAL_DMA_Abort_IT+0x1ae>
 8006f36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f3a:	e002      	b.n	8006f42 <HAL_DMA_Abort_IT+0x1ae>
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	e000      	b.n	8006f42 <HAL_DMA_Abort_IT+0x1ae>
 8006f40:	2301      	movs	r3, #1
 8006f42:	4a17      	ldr	r2, [pc, #92]	@ (8006fa0 <HAL_DMA_Abort_IT+0x20c>)
 8006f44:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3
    } 
  }
  return status;
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	40020080 	.word	0x40020080
 8006f74:	40020008 	.word	0x40020008
 8006f78:	4002001c 	.word	0x4002001c
 8006f7c:	40020030 	.word	0x40020030
 8006f80:	40020044 	.word	0x40020044
 8006f84:	40020058 	.word	0x40020058
 8006f88:	4002006c 	.word	0x4002006c
 8006f8c:	40020408 	.word	0x40020408
 8006f90:	4002041c 	.word	0x4002041c
 8006f94:	40020430 	.word	0x40020430
 8006f98:	40020444 	.word	0x40020444
 8006f9c:	40020400 	.word	0x40020400
 8006fa0:	40020000 	.word	0x40020000

08006fa4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc0:	2204      	movs	r2, #4
 8006fc2:	409a      	lsls	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 80f1 	beq.w	80071b0 <HAL_DMA_IRQHandler+0x20c>
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 80eb 	beq.w	80071b0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0320 	and.w	r3, r3, #32
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d107      	bne.n	8006ff8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0204 	bic.w	r2, r2, #4
 8006ff6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	4b5f      	ldr	r3, [pc, #380]	@ (800717c <HAL_DMA_IRQHandler+0x1d8>)
 8007000:	429a      	cmp	r2, r3
 8007002:	d958      	bls.n	80070b6 <HAL_DMA_IRQHandler+0x112>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a5d      	ldr	r2, [pc, #372]	@ (8007180 <HAL_DMA_IRQHandler+0x1dc>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d04f      	beq.n	80070ae <HAL_DMA_IRQHandler+0x10a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a5c      	ldr	r2, [pc, #368]	@ (8007184 <HAL_DMA_IRQHandler+0x1e0>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d048      	beq.n	80070aa <HAL_DMA_IRQHandler+0x106>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a5a      	ldr	r2, [pc, #360]	@ (8007188 <HAL_DMA_IRQHandler+0x1e4>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d040      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x100>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a59      	ldr	r2, [pc, #356]	@ (800718c <HAL_DMA_IRQHandler+0x1e8>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d038      	beq.n	800709e <HAL_DMA_IRQHandler+0xfa>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a57      	ldr	r2, [pc, #348]	@ (8007190 <HAL_DMA_IRQHandler+0x1ec>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d030      	beq.n	8007098 <HAL_DMA_IRQHandler+0xf4>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a56      	ldr	r2, [pc, #344]	@ (8007194 <HAL_DMA_IRQHandler+0x1f0>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d028      	beq.n	8007092 <HAL_DMA_IRQHandler+0xee>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a4d      	ldr	r2, [pc, #308]	@ (800717c <HAL_DMA_IRQHandler+0x1d8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d020      	beq.n	800708c <HAL_DMA_IRQHandler+0xe8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a52      	ldr	r2, [pc, #328]	@ (8007198 <HAL_DMA_IRQHandler+0x1f4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d019      	beq.n	8007088 <HAL_DMA_IRQHandler+0xe4>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a50      	ldr	r2, [pc, #320]	@ (800719c <HAL_DMA_IRQHandler+0x1f8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d012      	beq.n	8007084 <HAL_DMA_IRQHandler+0xe0>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a4f      	ldr	r2, [pc, #316]	@ (80071a0 <HAL_DMA_IRQHandler+0x1fc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00a      	beq.n	800707e <HAL_DMA_IRQHandler+0xda>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a4d      	ldr	r2, [pc, #308]	@ (80071a4 <HAL_DMA_IRQHandler+0x200>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d102      	bne.n	8007078 <HAL_DMA_IRQHandler+0xd4>
 8007072:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007076:	e01b      	b.n	80070b0 <HAL_DMA_IRQHandler+0x10c>
 8007078:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800707c:	e018      	b.n	80070b0 <HAL_DMA_IRQHandler+0x10c>
 800707e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007082:	e015      	b.n	80070b0 <HAL_DMA_IRQHandler+0x10c>
 8007084:	2340      	movs	r3, #64	@ 0x40
 8007086:	e013      	b.n	80070b0 <HAL_DMA_IRQHandler+0x10c>
 8007088:	2304      	movs	r3, #4
 800708a:	e011      	b.n	80070b0 <HAL_DMA_IRQHandler+0x10c>
 800708c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007090:	e00e      	b.n	80070b0 <HAL_DMA_IRQHandler+0x10c>
 8007092:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007096:	e00b      	b.n	80070b0 <HAL_DMA_IRQHandler+0x10c>
 8007098:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800709c:	e008      	b.n	80070b0 <HAL_DMA_IRQHandler+0x10c>
 800709e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80070a2:	e005      	b.n	80070b0 <HAL_DMA_IRQHandler+0x10c>
 80070a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070a8:	e002      	b.n	80070b0 <HAL_DMA_IRQHandler+0x10c>
 80070aa:	2340      	movs	r3, #64	@ 0x40
 80070ac:	e000      	b.n	80070b0 <HAL_DMA_IRQHandler+0x10c>
 80070ae:	2304      	movs	r3, #4
 80070b0:	4a3d      	ldr	r2, [pc, #244]	@ (80071a8 <HAL_DMA_IRQHandler+0x204>)
 80070b2:	6053      	str	r3, [r2, #4]
 80070b4:	e057      	b.n	8007166 <HAL_DMA_IRQHandler+0x1c2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a31      	ldr	r2, [pc, #196]	@ (8007180 <HAL_DMA_IRQHandler+0x1dc>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d04f      	beq.n	8007160 <HAL_DMA_IRQHandler+0x1bc>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a2f      	ldr	r2, [pc, #188]	@ (8007184 <HAL_DMA_IRQHandler+0x1e0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d048      	beq.n	800715c <HAL_DMA_IRQHandler+0x1b8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a2e      	ldr	r2, [pc, #184]	@ (8007188 <HAL_DMA_IRQHandler+0x1e4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d040      	beq.n	8007156 <HAL_DMA_IRQHandler+0x1b2>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a2c      	ldr	r2, [pc, #176]	@ (800718c <HAL_DMA_IRQHandler+0x1e8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d038      	beq.n	8007150 <HAL_DMA_IRQHandler+0x1ac>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a2b      	ldr	r2, [pc, #172]	@ (8007190 <HAL_DMA_IRQHandler+0x1ec>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d030      	beq.n	800714a <HAL_DMA_IRQHandler+0x1a6>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a29      	ldr	r2, [pc, #164]	@ (8007194 <HAL_DMA_IRQHandler+0x1f0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d028      	beq.n	8007144 <HAL_DMA_IRQHandler+0x1a0>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a21      	ldr	r2, [pc, #132]	@ (800717c <HAL_DMA_IRQHandler+0x1d8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d020      	beq.n	800713e <HAL_DMA_IRQHandler+0x19a>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a25      	ldr	r2, [pc, #148]	@ (8007198 <HAL_DMA_IRQHandler+0x1f4>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d019      	beq.n	800713a <HAL_DMA_IRQHandler+0x196>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a24      	ldr	r2, [pc, #144]	@ (800719c <HAL_DMA_IRQHandler+0x1f8>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d012      	beq.n	8007136 <HAL_DMA_IRQHandler+0x192>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a22      	ldr	r2, [pc, #136]	@ (80071a0 <HAL_DMA_IRQHandler+0x1fc>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00a      	beq.n	8007130 <HAL_DMA_IRQHandler+0x18c>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a21      	ldr	r2, [pc, #132]	@ (80071a4 <HAL_DMA_IRQHandler+0x200>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d102      	bne.n	800712a <HAL_DMA_IRQHandler+0x186>
 8007124:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007128:	e01b      	b.n	8007162 <HAL_DMA_IRQHandler+0x1be>
 800712a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800712e:	e018      	b.n	8007162 <HAL_DMA_IRQHandler+0x1be>
 8007130:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007134:	e015      	b.n	8007162 <HAL_DMA_IRQHandler+0x1be>
 8007136:	2340      	movs	r3, #64	@ 0x40
 8007138:	e013      	b.n	8007162 <HAL_DMA_IRQHandler+0x1be>
 800713a:	2304      	movs	r3, #4
 800713c:	e011      	b.n	8007162 <HAL_DMA_IRQHandler+0x1be>
 800713e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007142:	e00e      	b.n	8007162 <HAL_DMA_IRQHandler+0x1be>
 8007144:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007148:	e00b      	b.n	8007162 <HAL_DMA_IRQHandler+0x1be>
 800714a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800714e:	e008      	b.n	8007162 <HAL_DMA_IRQHandler+0x1be>
 8007150:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007154:	e005      	b.n	8007162 <HAL_DMA_IRQHandler+0x1be>
 8007156:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800715a:	e002      	b.n	8007162 <HAL_DMA_IRQHandler+0x1be>
 800715c:	2340      	movs	r3, #64	@ 0x40
 800715e:	e000      	b.n	8007162 <HAL_DMA_IRQHandler+0x1be>
 8007160:	2304      	movs	r3, #4
 8007162:	4a12      	ldr	r2, [pc, #72]	@ (80071ac <HAL_DMA_IRQHandler+0x208>)
 8007164:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 8136 	beq.w	80073dc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007178:	e130      	b.n	80073dc <HAL_DMA_IRQHandler+0x438>
 800717a:	bf00      	nop
 800717c:	40020080 	.word	0x40020080
 8007180:	40020008 	.word	0x40020008
 8007184:	4002001c 	.word	0x4002001c
 8007188:	40020030 	.word	0x40020030
 800718c:	40020044 	.word	0x40020044
 8007190:	40020058 	.word	0x40020058
 8007194:	4002006c 	.word	0x4002006c
 8007198:	40020408 	.word	0x40020408
 800719c:	4002041c 	.word	0x4002041c
 80071a0:	40020430 	.word	0x40020430
 80071a4:	40020444 	.word	0x40020444
 80071a8:	40020400 	.word	0x40020400
 80071ac:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b4:	2202      	movs	r2, #2
 80071b6:	409a      	lsls	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4013      	ands	r3, r2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 80dd 	beq.w	800737c <HAL_DMA_IRQHandler+0x3d8>
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 80d7 	beq.w	800737c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0320 	and.w	r3, r3, #32
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10b      	bne.n	80071f4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 020a 	bic.w	r2, r2, #10
 80071ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	4b7b      	ldr	r3, [pc, #492]	@ (80073e8 <HAL_DMA_IRQHandler+0x444>)
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d958      	bls.n	80072b2 <HAL_DMA_IRQHandler+0x30e>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a79      	ldr	r2, [pc, #484]	@ (80073ec <HAL_DMA_IRQHandler+0x448>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d04f      	beq.n	80072aa <HAL_DMA_IRQHandler+0x306>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a78      	ldr	r2, [pc, #480]	@ (80073f0 <HAL_DMA_IRQHandler+0x44c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d048      	beq.n	80072a6 <HAL_DMA_IRQHandler+0x302>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a76      	ldr	r2, [pc, #472]	@ (80073f4 <HAL_DMA_IRQHandler+0x450>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d040      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x2fc>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a75      	ldr	r2, [pc, #468]	@ (80073f8 <HAL_DMA_IRQHandler+0x454>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d038      	beq.n	800729a <HAL_DMA_IRQHandler+0x2f6>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a73      	ldr	r2, [pc, #460]	@ (80073fc <HAL_DMA_IRQHandler+0x458>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d030      	beq.n	8007294 <HAL_DMA_IRQHandler+0x2f0>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a72      	ldr	r2, [pc, #456]	@ (8007400 <HAL_DMA_IRQHandler+0x45c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d028      	beq.n	800728e <HAL_DMA_IRQHandler+0x2ea>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a69      	ldr	r2, [pc, #420]	@ (80073e8 <HAL_DMA_IRQHandler+0x444>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d020      	beq.n	8007288 <HAL_DMA_IRQHandler+0x2e4>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a6e      	ldr	r2, [pc, #440]	@ (8007404 <HAL_DMA_IRQHandler+0x460>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d019      	beq.n	8007284 <HAL_DMA_IRQHandler+0x2e0>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a6c      	ldr	r2, [pc, #432]	@ (8007408 <HAL_DMA_IRQHandler+0x464>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d012      	beq.n	8007280 <HAL_DMA_IRQHandler+0x2dc>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a6b      	ldr	r2, [pc, #428]	@ (800740c <HAL_DMA_IRQHandler+0x468>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00a      	beq.n	800727a <HAL_DMA_IRQHandler+0x2d6>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a69      	ldr	r2, [pc, #420]	@ (8007410 <HAL_DMA_IRQHandler+0x46c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d102      	bne.n	8007274 <HAL_DMA_IRQHandler+0x2d0>
 800726e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007272:	e01b      	b.n	80072ac <HAL_DMA_IRQHandler+0x308>
 8007274:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007278:	e018      	b.n	80072ac <HAL_DMA_IRQHandler+0x308>
 800727a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800727e:	e015      	b.n	80072ac <HAL_DMA_IRQHandler+0x308>
 8007280:	2320      	movs	r3, #32
 8007282:	e013      	b.n	80072ac <HAL_DMA_IRQHandler+0x308>
 8007284:	2302      	movs	r3, #2
 8007286:	e011      	b.n	80072ac <HAL_DMA_IRQHandler+0x308>
 8007288:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800728c:	e00e      	b.n	80072ac <HAL_DMA_IRQHandler+0x308>
 800728e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007292:	e00b      	b.n	80072ac <HAL_DMA_IRQHandler+0x308>
 8007294:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007298:	e008      	b.n	80072ac <HAL_DMA_IRQHandler+0x308>
 800729a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800729e:	e005      	b.n	80072ac <HAL_DMA_IRQHandler+0x308>
 80072a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072a4:	e002      	b.n	80072ac <HAL_DMA_IRQHandler+0x308>
 80072a6:	2320      	movs	r3, #32
 80072a8:	e000      	b.n	80072ac <HAL_DMA_IRQHandler+0x308>
 80072aa:	2302      	movs	r3, #2
 80072ac:	4a59      	ldr	r2, [pc, #356]	@ (8007414 <HAL_DMA_IRQHandler+0x470>)
 80072ae:	6053      	str	r3, [r2, #4]
 80072b0:	e057      	b.n	8007362 <HAL_DMA_IRQHandler+0x3be>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a4d      	ldr	r2, [pc, #308]	@ (80073ec <HAL_DMA_IRQHandler+0x448>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d04f      	beq.n	800735c <HAL_DMA_IRQHandler+0x3b8>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a4b      	ldr	r2, [pc, #300]	@ (80073f0 <HAL_DMA_IRQHandler+0x44c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d048      	beq.n	8007358 <HAL_DMA_IRQHandler+0x3b4>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a4a      	ldr	r2, [pc, #296]	@ (80073f4 <HAL_DMA_IRQHandler+0x450>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d040      	beq.n	8007352 <HAL_DMA_IRQHandler+0x3ae>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a48      	ldr	r2, [pc, #288]	@ (80073f8 <HAL_DMA_IRQHandler+0x454>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d038      	beq.n	800734c <HAL_DMA_IRQHandler+0x3a8>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a47      	ldr	r2, [pc, #284]	@ (80073fc <HAL_DMA_IRQHandler+0x458>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d030      	beq.n	8007346 <HAL_DMA_IRQHandler+0x3a2>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a45      	ldr	r2, [pc, #276]	@ (8007400 <HAL_DMA_IRQHandler+0x45c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d028      	beq.n	8007340 <HAL_DMA_IRQHandler+0x39c>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a3d      	ldr	r2, [pc, #244]	@ (80073e8 <HAL_DMA_IRQHandler+0x444>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d020      	beq.n	800733a <HAL_DMA_IRQHandler+0x396>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a41      	ldr	r2, [pc, #260]	@ (8007404 <HAL_DMA_IRQHandler+0x460>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d019      	beq.n	8007336 <HAL_DMA_IRQHandler+0x392>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a40      	ldr	r2, [pc, #256]	@ (8007408 <HAL_DMA_IRQHandler+0x464>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d012      	beq.n	8007332 <HAL_DMA_IRQHandler+0x38e>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a3e      	ldr	r2, [pc, #248]	@ (800740c <HAL_DMA_IRQHandler+0x468>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00a      	beq.n	800732c <HAL_DMA_IRQHandler+0x388>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a3d      	ldr	r2, [pc, #244]	@ (8007410 <HAL_DMA_IRQHandler+0x46c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d102      	bne.n	8007326 <HAL_DMA_IRQHandler+0x382>
 8007320:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007324:	e01b      	b.n	800735e <HAL_DMA_IRQHandler+0x3ba>
 8007326:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800732a:	e018      	b.n	800735e <HAL_DMA_IRQHandler+0x3ba>
 800732c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007330:	e015      	b.n	800735e <HAL_DMA_IRQHandler+0x3ba>
 8007332:	2320      	movs	r3, #32
 8007334:	e013      	b.n	800735e <HAL_DMA_IRQHandler+0x3ba>
 8007336:	2302      	movs	r3, #2
 8007338:	e011      	b.n	800735e <HAL_DMA_IRQHandler+0x3ba>
 800733a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800733e:	e00e      	b.n	800735e <HAL_DMA_IRQHandler+0x3ba>
 8007340:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007344:	e00b      	b.n	800735e <HAL_DMA_IRQHandler+0x3ba>
 8007346:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800734a:	e008      	b.n	800735e <HAL_DMA_IRQHandler+0x3ba>
 800734c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007350:	e005      	b.n	800735e <HAL_DMA_IRQHandler+0x3ba>
 8007352:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007356:	e002      	b.n	800735e <HAL_DMA_IRQHandler+0x3ba>
 8007358:	2320      	movs	r3, #32
 800735a:	e000      	b.n	800735e <HAL_DMA_IRQHandler+0x3ba>
 800735c:	2302      	movs	r3, #2
 800735e:	4a2e      	ldr	r2, [pc, #184]	@ (8007418 <HAL_DMA_IRQHandler+0x474>)
 8007360:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736e:	2b00      	cmp	r3, #0
 8007370:	d034      	beq.n	80073dc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800737a:	e02f      	b.n	80073dc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007380:	2208      	movs	r2, #8
 8007382:	409a      	lsls	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4013      	ands	r3, r2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d028      	beq.n	80073de <HAL_DMA_IRQHandler+0x43a>
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f003 0308 	and.w	r3, r3, #8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d023      	beq.n	80073de <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 020e 	bic.w	r2, r2, #14
 80073a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ae:	2101      	movs	r1, #1
 80073b0:	fa01 f202 	lsl.w	r2, r1, r2
 80073b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d004      	beq.n	80073de <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
    }
  }
  return;
 80073dc:	bf00      	nop
 80073de:	bf00      	nop
}
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	40020080 	.word	0x40020080
 80073ec:	40020008 	.word	0x40020008
 80073f0:	4002001c 	.word	0x4002001c
 80073f4:	40020030 	.word	0x40020030
 80073f8:	40020044 	.word	0x40020044
 80073fc:	40020058 	.word	0x40020058
 8007400:	4002006c 	.word	0x4002006c
 8007404:	40020408 	.word	0x40020408
 8007408:	4002041c 	.word	0x4002041c
 800740c:	40020430 	.word	0x40020430
 8007410:	40020444 	.word	0x40020444
 8007414:	40020400 	.word	0x40020400
 8007418:	40020000 	.word	0x40020000

0800741c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007432:	2101      	movs	r1, #1
 8007434:	fa01 f202 	lsl.w	r2, r1, r2
 8007438:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2b10      	cmp	r3, #16
 8007448:	d108      	bne.n	800745c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800745a:	e007      	b.n	800746c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	60da      	str	r2, [r3, #12]
}
 800746c:	bf00      	nop
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	bc80      	pop	{r7}
 8007474:	4770      	bx	lr
	...

08007478 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007478:	b480      	push	{r7}
 800747a:	b08b      	sub	sp, #44	@ 0x2c
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007482:	2300      	movs	r3, #0
 8007484:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007486:	2300      	movs	r3, #0
 8007488:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800748a:	e179      	b.n	8007780 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800748c:	2201      	movs	r2, #1
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	fa02 f303 	lsl.w	r3, r2, r3
 8007494:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69fa      	ldr	r2, [r7, #28]
 800749c:	4013      	ands	r3, r2
 800749e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	f040 8168 	bne.w	800777a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	4a96      	ldr	r2, [pc, #600]	@ (8007708 <HAL_GPIO_Init+0x290>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d05e      	beq.n	8007572 <HAL_GPIO_Init+0xfa>
 80074b4:	4a94      	ldr	r2, [pc, #592]	@ (8007708 <HAL_GPIO_Init+0x290>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d875      	bhi.n	80075a6 <HAL_GPIO_Init+0x12e>
 80074ba:	4a94      	ldr	r2, [pc, #592]	@ (800770c <HAL_GPIO_Init+0x294>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d058      	beq.n	8007572 <HAL_GPIO_Init+0xfa>
 80074c0:	4a92      	ldr	r2, [pc, #584]	@ (800770c <HAL_GPIO_Init+0x294>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d86f      	bhi.n	80075a6 <HAL_GPIO_Init+0x12e>
 80074c6:	4a92      	ldr	r2, [pc, #584]	@ (8007710 <HAL_GPIO_Init+0x298>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d052      	beq.n	8007572 <HAL_GPIO_Init+0xfa>
 80074cc:	4a90      	ldr	r2, [pc, #576]	@ (8007710 <HAL_GPIO_Init+0x298>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d869      	bhi.n	80075a6 <HAL_GPIO_Init+0x12e>
 80074d2:	4a90      	ldr	r2, [pc, #576]	@ (8007714 <HAL_GPIO_Init+0x29c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d04c      	beq.n	8007572 <HAL_GPIO_Init+0xfa>
 80074d8:	4a8e      	ldr	r2, [pc, #568]	@ (8007714 <HAL_GPIO_Init+0x29c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d863      	bhi.n	80075a6 <HAL_GPIO_Init+0x12e>
 80074de:	4a8e      	ldr	r2, [pc, #568]	@ (8007718 <HAL_GPIO_Init+0x2a0>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d046      	beq.n	8007572 <HAL_GPIO_Init+0xfa>
 80074e4:	4a8c      	ldr	r2, [pc, #560]	@ (8007718 <HAL_GPIO_Init+0x2a0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d85d      	bhi.n	80075a6 <HAL_GPIO_Init+0x12e>
 80074ea:	2b12      	cmp	r3, #18
 80074ec:	d82a      	bhi.n	8007544 <HAL_GPIO_Init+0xcc>
 80074ee:	2b12      	cmp	r3, #18
 80074f0:	d859      	bhi.n	80075a6 <HAL_GPIO_Init+0x12e>
 80074f2:	a201      	add	r2, pc, #4	@ (adr r2, 80074f8 <HAL_GPIO_Init+0x80>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	08007573 	.word	0x08007573
 80074fc:	0800754d 	.word	0x0800754d
 8007500:	0800755f 	.word	0x0800755f
 8007504:	080075a1 	.word	0x080075a1
 8007508:	080075a7 	.word	0x080075a7
 800750c:	080075a7 	.word	0x080075a7
 8007510:	080075a7 	.word	0x080075a7
 8007514:	080075a7 	.word	0x080075a7
 8007518:	080075a7 	.word	0x080075a7
 800751c:	080075a7 	.word	0x080075a7
 8007520:	080075a7 	.word	0x080075a7
 8007524:	080075a7 	.word	0x080075a7
 8007528:	080075a7 	.word	0x080075a7
 800752c:	080075a7 	.word	0x080075a7
 8007530:	080075a7 	.word	0x080075a7
 8007534:	080075a7 	.word	0x080075a7
 8007538:	080075a7 	.word	0x080075a7
 800753c:	08007555 	.word	0x08007555
 8007540:	08007569 	.word	0x08007569
 8007544:	4a75      	ldr	r2, [pc, #468]	@ (800771c <HAL_GPIO_Init+0x2a4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d013      	beq.n	8007572 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800754a:	e02c      	b.n	80075a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	623b      	str	r3, [r7, #32]
          break;
 8007552:	e029      	b.n	80075a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	3304      	adds	r3, #4
 800755a:	623b      	str	r3, [r7, #32]
          break;
 800755c:	e024      	b.n	80075a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	3308      	adds	r3, #8
 8007564:	623b      	str	r3, [r7, #32]
          break;
 8007566:	e01f      	b.n	80075a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	330c      	adds	r3, #12
 800756e:	623b      	str	r3, [r7, #32]
          break;
 8007570:	e01a      	b.n	80075a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d102      	bne.n	8007580 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800757a:	2304      	movs	r3, #4
 800757c:	623b      	str	r3, [r7, #32]
          break;
 800757e:	e013      	b.n	80075a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d105      	bne.n	8007594 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007588:	2308      	movs	r3, #8
 800758a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	69fa      	ldr	r2, [r7, #28]
 8007590:	611a      	str	r2, [r3, #16]
          break;
 8007592:	e009      	b.n	80075a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007594:	2308      	movs	r3, #8
 8007596:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	615a      	str	r2, [r3, #20]
          break;
 800759e:	e003      	b.n	80075a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80075a0:	2300      	movs	r3, #0
 80075a2:	623b      	str	r3, [r7, #32]
          break;
 80075a4:	e000      	b.n	80075a8 <HAL_GPIO_Init+0x130>
          break;
 80075a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	2bff      	cmp	r3, #255	@ 0xff
 80075ac:	d801      	bhi.n	80075b2 <HAL_GPIO_Init+0x13a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	e001      	b.n	80075b6 <HAL_GPIO_Init+0x13e>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3304      	adds	r3, #4
 80075b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	2bff      	cmp	r3, #255	@ 0xff
 80075bc:	d802      	bhi.n	80075c4 <HAL_GPIO_Init+0x14c>
 80075be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	e002      	b.n	80075ca <HAL_GPIO_Init+0x152>
 80075c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c6:	3b08      	subs	r3, #8
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	210f      	movs	r1, #15
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	fa01 f303 	lsl.w	r3, r1, r3
 80075d8:	43db      	mvns	r3, r3
 80075da:	401a      	ands	r2, r3
 80075dc:	6a39      	ldr	r1, [r7, #32]
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	fa01 f303 	lsl.w	r3, r1, r3
 80075e4:	431a      	orrs	r2, r3
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 80c1 	beq.w	800777a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80075f8:	4b49      	ldr	r3, [pc, #292]	@ (8007720 <HAL_GPIO_Init+0x2a8>)
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	4a48      	ldr	r2, [pc, #288]	@ (8007720 <HAL_GPIO_Init+0x2a8>)
 80075fe:	f043 0301 	orr.w	r3, r3, #1
 8007602:	6193      	str	r3, [r2, #24]
 8007604:	4b46      	ldr	r3, [pc, #280]	@ (8007720 <HAL_GPIO_Init+0x2a8>)
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	60bb      	str	r3, [r7, #8]
 800760e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007610:	4a44      	ldr	r2, [pc, #272]	@ (8007724 <HAL_GPIO_Init+0x2ac>)
 8007612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007614:	089b      	lsrs	r3, r3, #2
 8007616:	3302      	adds	r3, #2
 8007618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800761c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007620:	f003 0303 	and.w	r3, r3, #3
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	220f      	movs	r2, #15
 8007628:	fa02 f303 	lsl.w	r3, r2, r3
 800762c:	43db      	mvns	r3, r3
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	4013      	ands	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a3c      	ldr	r2, [pc, #240]	@ (8007728 <HAL_GPIO_Init+0x2b0>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d01f      	beq.n	800767c <HAL_GPIO_Init+0x204>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a3b      	ldr	r2, [pc, #236]	@ (800772c <HAL_GPIO_Init+0x2b4>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d019      	beq.n	8007678 <HAL_GPIO_Init+0x200>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a3a      	ldr	r2, [pc, #232]	@ (8007730 <HAL_GPIO_Init+0x2b8>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d013      	beq.n	8007674 <HAL_GPIO_Init+0x1fc>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a39      	ldr	r2, [pc, #228]	@ (8007734 <HAL_GPIO_Init+0x2bc>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d00d      	beq.n	8007670 <HAL_GPIO_Init+0x1f8>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a38      	ldr	r2, [pc, #224]	@ (8007738 <HAL_GPIO_Init+0x2c0>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d007      	beq.n	800766c <HAL_GPIO_Init+0x1f4>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a37      	ldr	r2, [pc, #220]	@ (800773c <HAL_GPIO_Init+0x2c4>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d101      	bne.n	8007668 <HAL_GPIO_Init+0x1f0>
 8007664:	2305      	movs	r3, #5
 8007666:	e00a      	b.n	800767e <HAL_GPIO_Init+0x206>
 8007668:	2306      	movs	r3, #6
 800766a:	e008      	b.n	800767e <HAL_GPIO_Init+0x206>
 800766c:	2304      	movs	r3, #4
 800766e:	e006      	b.n	800767e <HAL_GPIO_Init+0x206>
 8007670:	2303      	movs	r3, #3
 8007672:	e004      	b.n	800767e <HAL_GPIO_Init+0x206>
 8007674:	2302      	movs	r3, #2
 8007676:	e002      	b.n	800767e <HAL_GPIO_Init+0x206>
 8007678:	2301      	movs	r3, #1
 800767a:	e000      	b.n	800767e <HAL_GPIO_Init+0x206>
 800767c:	2300      	movs	r3, #0
 800767e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007680:	f002 0203 	and.w	r2, r2, #3
 8007684:	0092      	lsls	r2, r2, #2
 8007686:	4093      	lsls	r3, r2
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4313      	orrs	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800768e:	4925      	ldr	r1, [pc, #148]	@ (8007724 <HAL_GPIO_Init+0x2ac>)
 8007690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007692:	089b      	lsrs	r3, r3, #2
 8007694:	3302      	adds	r3, #2
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d006      	beq.n	80076b6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80076a8:	4b25      	ldr	r3, [pc, #148]	@ (8007740 <HAL_GPIO_Init+0x2c8>)
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	4924      	ldr	r1, [pc, #144]	@ (8007740 <HAL_GPIO_Init+0x2c8>)
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	608b      	str	r3, [r1, #8]
 80076b4:	e006      	b.n	80076c4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80076b6:	4b22      	ldr	r3, [pc, #136]	@ (8007740 <HAL_GPIO_Init+0x2c8>)
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	43db      	mvns	r3, r3
 80076be:	4920      	ldr	r1, [pc, #128]	@ (8007740 <HAL_GPIO_Init+0x2c8>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d006      	beq.n	80076de <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80076d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007740 <HAL_GPIO_Init+0x2c8>)
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	491a      	ldr	r1, [pc, #104]	@ (8007740 <HAL_GPIO_Init+0x2c8>)
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60cb      	str	r3, [r1, #12]
 80076dc:	e006      	b.n	80076ec <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80076de:	4b18      	ldr	r3, [pc, #96]	@ (8007740 <HAL_GPIO_Init+0x2c8>)
 80076e0:	68da      	ldr	r2, [r3, #12]
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	43db      	mvns	r3, r3
 80076e6:	4916      	ldr	r1, [pc, #88]	@ (8007740 <HAL_GPIO_Init+0x2c8>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d025      	beq.n	8007744 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80076f8:	4b11      	ldr	r3, [pc, #68]	@ (8007740 <HAL_GPIO_Init+0x2c8>)
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	4910      	ldr	r1, [pc, #64]	@ (8007740 <HAL_GPIO_Init+0x2c8>)
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	4313      	orrs	r3, r2
 8007702:	604b      	str	r3, [r1, #4]
 8007704:	e025      	b.n	8007752 <HAL_GPIO_Init+0x2da>
 8007706:	bf00      	nop
 8007708:	10320000 	.word	0x10320000
 800770c:	10310000 	.word	0x10310000
 8007710:	10220000 	.word	0x10220000
 8007714:	10210000 	.word	0x10210000
 8007718:	10120000 	.word	0x10120000
 800771c:	10110000 	.word	0x10110000
 8007720:	40021000 	.word	0x40021000
 8007724:	40010000 	.word	0x40010000
 8007728:	40010800 	.word	0x40010800
 800772c:	40010c00 	.word	0x40010c00
 8007730:	40011000 	.word	0x40011000
 8007734:	40011400 	.word	0x40011400
 8007738:	40011800 	.word	0x40011800
 800773c:	40011c00 	.word	0x40011c00
 8007740:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007744:	4b15      	ldr	r3, [pc, #84]	@ (800779c <HAL_GPIO_Init+0x324>)
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	43db      	mvns	r3, r3
 800774c:	4913      	ldr	r1, [pc, #76]	@ (800779c <HAL_GPIO_Init+0x324>)
 800774e:	4013      	ands	r3, r2
 8007750:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d006      	beq.n	800776c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800775e:	4b0f      	ldr	r3, [pc, #60]	@ (800779c <HAL_GPIO_Init+0x324>)
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	490e      	ldr	r1, [pc, #56]	@ (800779c <HAL_GPIO_Init+0x324>)
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	4313      	orrs	r3, r2
 8007768:	600b      	str	r3, [r1, #0]
 800776a:	e006      	b.n	800777a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800776c:	4b0b      	ldr	r3, [pc, #44]	@ (800779c <HAL_GPIO_Init+0x324>)
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	43db      	mvns	r3, r3
 8007774:	4909      	ldr	r1, [pc, #36]	@ (800779c <HAL_GPIO_Init+0x324>)
 8007776:	4013      	ands	r3, r2
 8007778:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	3301      	adds	r3, #1
 800777e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007786:	fa22 f303 	lsr.w	r3, r2, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	f47f ae7e 	bne.w	800748c <HAL_GPIO_Init+0x14>
  }
}
 8007790:	bf00      	nop
 8007792:	bf00      	nop
 8007794:	372c      	adds	r7, #44	@ 0x2c
 8007796:	46bd      	mov	sp, r7
 8007798:	bc80      	pop	{r7}
 800779a:	4770      	bx	lr
 800779c:	40010400 	.word	0x40010400

080077a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	887b      	ldrh	r3, [r7, #2]
 80077b2:	4013      	ands	r3, r2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077b8:	2301      	movs	r3, #1
 80077ba:	73fb      	strb	r3, [r7, #15]
 80077bc:	e001      	b.n	80077c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bc80      	pop	{r7}
 80077cc:	4770      	bx	lr

080077ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	460b      	mov	r3, r1
 80077d8:	807b      	strh	r3, [r7, #2]
 80077da:	4613      	mov	r3, r2
 80077dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077de:	787b      	ldrb	r3, [r7, #1]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077e4:	887a      	ldrh	r2, [r7, #2]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80077ea:	e003      	b.n	80077f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80077ec:	887b      	ldrh	r3, [r7, #2]
 80077ee:	041a      	lsls	r2, r3, #16
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	611a      	str	r2, [r3, #16]
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bc80      	pop	{r7}
 80077fc:	4770      	bx	lr

080077fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80077fe:	b480      	push	{r7}
 8007800:	b085      	sub	sp, #20
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	460b      	mov	r3, r1
 8007808:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007810:	887a      	ldrh	r2, [r7, #2]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4013      	ands	r3, r2
 8007816:	041a      	lsls	r2, r3, #16
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	43d9      	mvns	r1, r3
 800781c:	887b      	ldrh	r3, [r7, #2]
 800781e:	400b      	ands	r3, r1
 8007820:	431a      	orrs	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	611a      	str	r2, [r3, #16]
}
 8007826:	bf00      	nop
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	bc80      	pop	{r7}
 800782e:	4770      	bx	lr

08007830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e12b      	b.n	8007a9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7fc ffa6 	bl	80047a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2224      	movs	r2, #36	@ 0x24
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0201 	bic.w	r2, r2, #1
 8007872:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007882:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007892:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007894:	f002 f9d8 	bl	8009c48 <HAL_RCC_GetPCLK1Freq>
 8007898:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	4a81      	ldr	r2, [pc, #516]	@ (8007aa4 <HAL_I2C_Init+0x274>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d807      	bhi.n	80078b4 <HAL_I2C_Init+0x84>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4a80      	ldr	r2, [pc, #512]	@ (8007aa8 <HAL_I2C_Init+0x278>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	bf94      	ite	ls
 80078ac:	2301      	movls	r3, #1
 80078ae:	2300      	movhi	r3, #0
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	e006      	b.n	80078c2 <HAL_I2C_Init+0x92>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4a7d      	ldr	r2, [pc, #500]	@ (8007aac <HAL_I2C_Init+0x27c>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	bf94      	ite	ls
 80078bc:	2301      	movls	r3, #1
 80078be:	2300      	movhi	r3, #0
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e0e7      	b.n	8007a9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4a78      	ldr	r2, [pc, #480]	@ (8007ab0 <HAL_I2C_Init+0x280>)
 80078ce:	fba2 2303 	umull	r2, r3, r2, r3
 80078d2:	0c9b      	lsrs	r3, r3, #18
 80078d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	4a6a      	ldr	r2, [pc, #424]	@ (8007aa4 <HAL_I2C_Init+0x274>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d802      	bhi.n	8007904 <HAL_I2C_Init+0xd4>
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	3301      	adds	r3, #1
 8007902:	e009      	b.n	8007918 <HAL_I2C_Init+0xe8>
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800790a:	fb02 f303 	mul.w	r3, r2, r3
 800790e:	4a69      	ldr	r2, [pc, #420]	@ (8007ab4 <HAL_I2C_Init+0x284>)
 8007910:	fba2 2303 	umull	r2, r3, r2, r3
 8007914:	099b      	lsrs	r3, r3, #6
 8007916:	3301      	adds	r3, #1
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	6812      	ldr	r2, [r2, #0]
 800791c:	430b      	orrs	r3, r1
 800791e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800792a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	495c      	ldr	r1, [pc, #368]	@ (8007aa4 <HAL_I2C_Init+0x274>)
 8007934:	428b      	cmp	r3, r1
 8007936:	d819      	bhi.n	800796c <HAL_I2C_Init+0x13c>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	1e59      	subs	r1, r3, #1
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	fbb1 f3f3 	udiv	r3, r1, r3
 8007946:	1c59      	adds	r1, r3, #1
 8007948:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800794c:	400b      	ands	r3, r1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00a      	beq.n	8007968 <HAL_I2C_Init+0x138>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	1e59      	subs	r1, r3, #1
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007960:	3301      	adds	r3, #1
 8007962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007966:	e051      	b.n	8007a0c <HAL_I2C_Init+0x1dc>
 8007968:	2304      	movs	r3, #4
 800796a:	e04f      	b.n	8007a0c <HAL_I2C_Init+0x1dc>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d111      	bne.n	8007998 <HAL_I2C_Init+0x168>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	1e58      	subs	r0, r3, #1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6859      	ldr	r1, [r3, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	440b      	add	r3, r1
 8007982:	fbb0 f3f3 	udiv	r3, r0, r3
 8007986:	3301      	adds	r3, #1
 8007988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800798c:	2b00      	cmp	r3, #0
 800798e:	bf0c      	ite	eq
 8007990:	2301      	moveq	r3, #1
 8007992:	2300      	movne	r3, #0
 8007994:	b2db      	uxtb	r3, r3
 8007996:	e012      	b.n	80079be <HAL_I2C_Init+0x18e>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	1e58      	subs	r0, r3, #1
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6859      	ldr	r1, [r3, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	440b      	add	r3, r1
 80079a6:	0099      	lsls	r1, r3, #2
 80079a8:	440b      	add	r3, r1
 80079aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80079ae:	3301      	adds	r3, #1
 80079b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	bf0c      	ite	eq
 80079b8:	2301      	moveq	r3, #1
 80079ba:	2300      	movne	r3, #0
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <HAL_I2C_Init+0x196>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e022      	b.n	8007a0c <HAL_I2C_Init+0x1dc>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10e      	bne.n	80079ec <HAL_I2C_Init+0x1bc>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	1e58      	subs	r0, r3, #1
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6859      	ldr	r1, [r3, #4]
 80079d6:	460b      	mov	r3, r1
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	440b      	add	r3, r1
 80079dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80079e0:	3301      	adds	r3, #1
 80079e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ea:	e00f      	b.n	8007a0c <HAL_I2C_Init+0x1dc>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	1e58      	subs	r0, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6859      	ldr	r1, [r3, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	440b      	add	r3, r1
 80079fa:	0099      	lsls	r1, r3, #2
 80079fc:	440b      	add	r3, r1
 80079fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a02:	3301      	adds	r3, #1
 8007a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	6809      	ldr	r1, [r1, #0]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	69da      	ldr	r2, [r3, #28]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007a3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	6911      	ldr	r1, [r2, #16]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	68d2      	ldr	r2, [r2, #12]
 8007a46:	4311      	orrs	r1, r2
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6812      	ldr	r2, [r2, #0]
 8007a4c:	430b      	orrs	r3, r1
 8007a4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	695a      	ldr	r2, [r3, #20]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0201 	orr.w	r2, r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	000186a0 	.word	0x000186a0
 8007aa8:	001e847f 	.word	0x001e847f
 8007aac:	003d08ff 	.word	0x003d08ff
 8007ab0:	431bde83 	.word	0x431bde83
 8007ab4:	10624dd3 	.word	0x10624dd3

08007ab8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b088      	sub	sp, #32
 8007abc:	af02      	add	r7, sp, #8
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	607a      	str	r2, [r7, #4]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	817b      	strh	r3, [r7, #10]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007acc:	f7fe ff42 	bl	8006954 <HAL_GetTick>
 8007ad0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	f040 80e0 	bne.w	8007ca0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	2319      	movs	r3, #25
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	4970      	ldr	r1, [pc, #448]	@ (8007cac <HAL_I2C_Master_Transmit+0x1f4>)
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f001 faac 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007af6:	2302      	movs	r3, #2
 8007af8:	e0d3      	b.n	8007ca2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_I2C_Master_Transmit+0x50>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e0cc      	b.n	8007ca2 <HAL_I2C_Master_Transmit+0x1ea>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d007      	beq.n	8007b2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f042 0201 	orr.w	r2, r2, #1
 8007b2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2221      	movs	r2, #33	@ 0x21
 8007b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2210      	movs	r2, #16
 8007b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	893a      	ldrh	r2, [r7, #8]
 8007b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4a50      	ldr	r2, [pc, #320]	@ (8007cb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8007b6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007b70:	8979      	ldrh	r1, [r7, #10]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	6a3a      	ldr	r2, [r7, #32]
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 ff98 	bl	8008aac <I2C_MasterRequestWrite>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e08d      	b.n	8007ca2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b86:	2300      	movs	r3, #0
 8007b88:	613b      	str	r3, [r7, #16]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	613b      	str	r3, [r7, #16]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	613b      	str	r3, [r7, #16]
 8007b9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007b9c:	e066      	b.n	8007c6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	6a39      	ldr	r1, [r7, #32]
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f001 fb6a 	bl	800927c <I2C_WaitOnTXEFlagUntilTimeout>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00d      	beq.n	8007bca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d107      	bne.n	8007bc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e06b      	b.n	8007ca2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bce:	781a      	ldrb	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	f003 0304 	and.w	r3, r3, #4
 8007c04:	2b04      	cmp	r3, #4
 8007c06:	d11b      	bne.n	8007c40 <HAL_I2C_Master_Transmit+0x188>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d017      	beq.n	8007c40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c14:	781a      	ldrb	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	6a39      	ldr	r1, [r7, #32]
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f001 fb61 	bl	800930c <I2C_WaitOnBTFFlagUntilTimeout>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00d      	beq.n	8007c6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d107      	bne.n	8007c68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e01a      	b.n	8007ca2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d194      	bne.n	8007b9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	e000      	b.n	8007ca2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007ca0:	2302      	movs	r3, #2
  }
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	00100002 	.word	0x00100002
 8007cb0:	ffff0000 	.word	0xffff0000

08007cb4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08c      	sub	sp, #48	@ 0x30
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	607a      	str	r2, [r7, #4]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	817b      	strh	r3, [r7, #10]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ccc:	f7fe fe42 	bl	8006954 <HAL_GetTick>
 8007cd0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	f040 824b 	bne.w	8008176 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	2319      	movs	r3, #25
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	497f      	ldr	r1, [pc, #508]	@ (8007ee8 <HAL_I2C_Master_Receive+0x234>)
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f001 f9ac 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	e23e      	b.n	8008178 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d101      	bne.n	8007d08 <HAL_I2C_Master_Receive+0x54>
 8007d04:	2302      	movs	r3, #2
 8007d06:	e237      	b.n	8008178 <HAL_I2C_Master_Receive+0x4c4>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d007      	beq.n	8007d2e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f042 0201 	orr.w	r2, r2, #1
 8007d2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2222      	movs	r2, #34	@ 0x22
 8007d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2210      	movs	r2, #16
 8007d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	893a      	ldrh	r2, [r7, #8]
 8007d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	4a5f      	ldr	r2, [pc, #380]	@ (8007eec <HAL_I2C_Master_Receive+0x238>)
 8007d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007d70:	8979      	ldrh	r1, [r7, #10]
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 ff1a 	bl	8008bb0 <I2C_MasterRequestRead>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e1f8      	b.n	8008178 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d113      	bne.n	8007db6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d8e:	2300      	movs	r3, #0
 8007d90:	61fb      	str	r3, [r7, #28]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	61fb      	str	r3, [r7, #28]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	61fb      	str	r3, [r7, #28]
 8007da2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	e1cc      	b.n	8008150 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d11e      	bne.n	8007dfc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007dce:	b672      	cpsid	i
}
 8007dd0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	61bb      	str	r3, [r7, #24]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	61bb      	str	r3, [r7, #24]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	61bb      	str	r3, [r7, #24]
 8007de6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007df6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007df8:	b662      	cpsie	i
}
 8007dfa:	e035      	b.n	8007e68 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d11e      	bne.n	8007e42 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e14:	b672      	cpsid	i
}
 8007e16:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e18:	2300      	movs	r3, #0
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	617b      	str	r3, [r7, #20]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007e3e:	b662      	cpsie	i
}
 8007e40:	e012      	b.n	8007e68 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007e50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e52:	2300      	movs	r3, #0
 8007e54:	613b      	str	r3, [r7, #16]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	613b      	str	r3, [r7, #16]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	613b      	str	r3, [r7, #16]
 8007e66:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007e68:	e172      	b.n	8008150 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	f200 811f 	bhi.w	80080b2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d123      	bne.n	8007ec4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f001 fa8b 	bl	800939c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e173      	b.n	8008178 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	691a      	ldr	r2, [r3, #16]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9a:	b2d2      	uxtb	r2, r2
 8007e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eac:	3b01      	subs	r3, #1
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007ec2:	e145      	b.n	8008150 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d152      	bne.n	8007f72 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	4906      	ldr	r1, [pc, #24]	@ (8007ef0 <HAL_I2C_Master_Receive+0x23c>)
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f001 f8b6 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d008      	beq.n	8007ef4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e148      	b.n	8008178 <HAL_I2C_Master_Receive+0x4c4>
 8007ee6:	bf00      	nop
 8007ee8:	00100002 	.word	0x00100002
 8007eec:	ffff0000 	.word	0xffff0000
 8007ef0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007ef4:	b672      	cpsid	i
}
 8007ef6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691a      	ldr	r2, [r3, #16]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	3b01      	subs	r3, #1
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007f3a:	b662      	cpsie	i
}
 8007f3c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	691a      	ldr	r2, [r3, #16]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f48:	b2d2      	uxtb	r2, r2
 8007f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007f70:	e0ee      	b.n	8008150 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f78:	2200      	movs	r2, #0
 8007f7a:	4981      	ldr	r1, [pc, #516]	@ (8008180 <HAL_I2C_Master_Receive+0x4cc>)
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f001 f863 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e0f5      	b.n	8008178 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f9c:	b672      	cpsid	i
}
 8007f9e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	691a      	ldr	r2, [r3, #16]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007faa:	b2d2      	uxtb	r2, r2
 8007fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007fd2:	4b6c      	ldr	r3, [pc, #432]	@ (8008184 <HAL_I2C_Master_Receive+0x4d0>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	08db      	lsrs	r3, r3, #3
 8007fd8:	4a6b      	ldr	r2, [pc, #428]	@ (8008188 <HAL_I2C_Master_Receive+0x4d4>)
 8007fda:	fba2 2303 	umull	r2, r3, r2, r3
 8007fde:	0a1a      	lsrs	r2, r3, #8
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	00da      	lsls	r2, r3, #3
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d118      	bne.n	800802a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2220      	movs	r2, #32
 8008002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008012:	f043 0220 	orr.w	r2, r3, #32
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800801a:	b662      	cpsie	i
}
 800801c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e0a6      	b.n	8008178 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b04      	cmp	r3, #4
 8008036:	d1d9      	bne.n	8007fec <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	691a      	ldr	r2, [r3, #16]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008052:	b2d2      	uxtb	r2, r2
 8008054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008064:	3b01      	subs	r3, #1
 8008066:	b29a      	uxth	r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008070:	b29b      	uxth	r3, r3
 8008072:	3b01      	subs	r3, #1
 8008074:	b29a      	uxth	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800807a:	b662      	cpsie	i
}
 800807c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	691a      	ldr	r2, [r3, #16]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008088:	b2d2      	uxtb	r2, r2
 800808a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800809a:	3b01      	subs	r3, #1
 800809c:	b29a      	uxth	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3b01      	subs	r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80080b0:	e04e      	b.n	8008150 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f001 f970 	bl	800939c <I2C_WaitOnRXNEFlagUntilTimeout>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e058      	b.n	8008178 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	691a      	ldr	r2, [r3, #16]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d0:	b2d2      	uxtb	r2, r2
 80080d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080e2:	3b01      	subs	r3, #1
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	3b01      	subs	r3, #1
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	2b04      	cmp	r3, #4
 8008104:	d124      	bne.n	8008150 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800810a:	2b03      	cmp	r3, #3
 800810c:	d107      	bne.n	800811e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800811c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	691a      	ldr	r2, [r3, #16]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008128:	b2d2      	uxtb	r2, r2
 800812a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800813a:	3b01      	subs	r3, #1
 800813c:	b29a      	uxth	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008146:	b29b      	uxth	r3, r3
 8008148:	3b01      	subs	r3, #1
 800814a:	b29a      	uxth	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008154:	2b00      	cmp	r3, #0
 8008156:	f47f ae88 	bne.w	8007e6a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2220      	movs	r2, #32
 800815e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	e000      	b.n	8008178 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8008176:	2302      	movs	r3, #2
  }
}
 8008178:	4618      	mov	r0, r3
 800817a:	3728      	adds	r7, #40	@ 0x28
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	00010004 	.word	0x00010004
 8008184:	20000028 	.word	0x20000028
 8008188:	14f8b589 	.word	0x14f8b589

0800818c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af02      	add	r7, sp, #8
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	4608      	mov	r0, r1
 8008196:	4611      	mov	r1, r2
 8008198:	461a      	mov	r2, r3
 800819a:	4603      	mov	r3, r0
 800819c:	817b      	strh	r3, [r7, #10]
 800819e:	460b      	mov	r3, r1
 80081a0:	813b      	strh	r3, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80081a6:	f7fe fbd5 	bl	8006954 <HAL_GetTick>
 80081aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b20      	cmp	r3, #32
 80081b6:	f040 80d9 	bne.w	800836c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	2319      	movs	r3, #25
 80081c0:	2201      	movs	r2, #1
 80081c2:	496d      	ldr	r1, [pc, #436]	@ (8008378 <HAL_I2C_Mem_Write+0x1ec>)
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 ff3f 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80081d0:	2302      	movs	r3, #2
 80081d2:	e0cc      	b.n	800836e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d101      	bne.n	80081e2 <HAL_I2C_Mem_Write+0x56>
 80081de:	2302      	movs	r3, #2
 80081e0:	e0c5      	b.n	800836e <HAL_I2C_Mem_Write+0x1e2>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d007      	beq.n	8008208 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008216:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2221      	movs	r2, #33	@ 0x21
 800821c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2240      	movs	r2, #64	@ 0x40
 8008224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6a3a      	ldr	r2, [r7, #32]
 8008232:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008238:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800823e:	b29a      	uxth	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4a4d      	ldr	r2, [pc, #308]	@ (800837c <HAL_I2C_Mem_Write+0x1f0>)
 8008248:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800824a:	88f8      	ldrh	r0, [r7, #6]
 800824c:	893a      	ldrh	r2, [r7, #8]
 800824e:	8979      	ldrh	r1, [r7, #10]
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	9301      	str	r3, [sp, #4]
 8008254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	4603      	mov	r3, r0
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 fd76 	bl	8008d4c <I2C_RequestMemoryWrite>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d052      	beq.n	800830c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e081      	b.n	800836e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f001 f804 	bl	800927c <I2C_WaitOnTXEFlagUntilTimeout>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00d      	beq.n	8008296 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827e:	2b04      	cmp	r3, #4
 8008280:	d107      	bne.n	8008292 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008290:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e06b      	b.n	800836e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800829a:	781a      	ldrb	r2, [r3, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082b0:	3b01      	subs	r3, #1
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082bc:	b29b      	uxth	r3, r3
 80082be:	3b01      	subs	r3, #1
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	695b      	ldr	r3, [r3, #20]
 80082cc:	f003 0304 	and.w	r3, r3, #4
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d11b      	bne.n	800830c <HAL_I2C_Mem_Write+0x180>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d017      	beq.n	800830c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e0:	781a      	ldrb	r2, [r3, #0]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082f6:	3b01      	subs	r3, #1
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008302:	b29b      	uxth	r3, r3
 8008304:	3b01      	subs	r3, #1
 8008306:	b29a      	uxth	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1aa      	bne.n	800826a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 fff7 	bl	800930c <I2C_WaitOnBTFFlagUntilTimeout>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00d      	beq.n	8008340 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008328:	2b04      	cmp	r3, #4
 800832a:	d107      	bne.n	800833c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800833a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e016      	b.n	800836e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800834e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2220      	movs	r2, #32
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	e000      	b.n	800836e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800836c:	2302      	movs	r3, #2
  }
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	00100002 	.word	0x00100002
 800837c:	ffff0000 	.word	0xffff0000

08008380 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08c      	sub	sp, #48	@ 0x30
 8008384:	af02      	add	r7, sp, #8
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	4608      	mov	r0, r1
 800838a:	4611      	mov	r1, r2
 800838c:	461a      	mov	r2, r3
 800838e:	4603      	mov	r3, r0
 8008390:	817b      	strh	r3, [r7, #10]
 8008392:	460b      	mov	r3, r1
 8008394:	813b      	strh	r3, [r7, #8]
 8008396:	4613      	mov	r3, r2
 8008398:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800839e:	f7fe fad9 	bl	8006954 <HAL_GetTick>
 80083a2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b20      	cmp	r3, #32
 80083ae:	f040 8244 	bne.w	800883a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80083b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	2319      	movs	r3, #25
 80083b8:	2201      	movs	r2, #1
 80083ba:	4982      	ldr	r1, [pc, #520]	@ (80085c4 <HAL_I2C_Mem_Read+0x244>)
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 fe43 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80083c8:	2302      	movs	r3, #2
 80083ca:	e237      	b.n	800883c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d101      	bne.n	80083da <HAL_I2C_Mem_Read+0x5a>
 80083d6:	2302      	movs	r3, #2
 80083d8:	e230      	b.n	800883c <HAL_I2C_Mem_Read+0x4bc>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0301 	and.w	r3, r3, #1
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d007      	beq.n	8008400 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f042 0201 	orr.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800840e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2222      	movs	r2, #34	@ 0x22
 8008414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2240      	movs	r2, #64	@ 0x40
 800841c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800842a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008430:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008436:	b29a      	uxth	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4a62      	ldr	r2, [pc, #392]	@ (80085c8 <HAL_I2C_Mem_Read+0x248>)
 8008440:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008442:	88f8      	ldrh	r0, [r7, #6]
 8008444:	893a      	ldrh	r2, [r7, #8]
 8008446:	8979      	ldrh	r1, [r7, #10]
 8008448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844a:	9301      	str	r3, [sp, #4]
 800844c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	4603      	mov	r3, r0
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 fd10 	bl	8008e78 <I2C_RequestMemoryRead>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e1ec      	b.n	800883c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008466:	2b00      	cmp	r3, #0
 8008468:	d113      	bne.n	8008492 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800846a:	2300      	movs	r3, #0
 800846c:	61fb      	str	r3, [r7, #28]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	61fb      	str	r3, [r7, #28]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	61fb      	str	r3, [r7, #28]
 800847e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	e1c0      	b.n	8008814 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008496:	2b01      	cmp	r3, #1
 8008498:	d11e      	bne.n	80084d8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80084aa:	b672      	cpsid	i
}
 80084ac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084ae:	2300      	movs	r3, #0
 80084b0:	61bb      	str	r3, [r7, #24]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	61bb      	str	r3, [r7, #24]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	61bb      	str	r3, [r7, #24]
 80084c2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80084d4:	b662      	cpsie	i
}
 80084d6:	e035      	b.n	8008544 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d11e      	bne.n	800851e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80084f0:	b672      	cpsid	i
}
 80084f2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084f4:	2300      	movs	r3, #0
 80084f6:	617b      	str	r3, [r7, #20]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008518:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800851a:	b662      	cpsie	i
}
 800851c:	e012      	b.n	8008544 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800852c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800852e:	2300      	movs	r3, #0
 8008530:	613b      	str	r3, [r7, #16]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	613b      	str	r3, [r7, #16]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	613b      	str	r3, [r7, #16]
 8008542:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008544:	e166      	b.n	8008814 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800854a:	2b03      	cmp	r3, #3
 800854c:	f200 811f 	bhi.w	800878e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008554:	2b01      	cmp	r3, #1
 8008556:	d123      	bne.n	80085a0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800855a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f000 ff1d 	bl	800939c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e167      	b.n	800883c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691a      	ldr	r2, [r3, #16]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008576:	b2d2      	uxtb	r2, r2
 8008578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857e:	1c5a      	adds	r2, r3, #1
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008588:	3b01      	subs	r3, #1
 800858a:	b29a      	uxth	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008594:	b29b      	uxth	r3, r3
 8008596:	3b01      	subs	r3, #1
 8008598:	b29a      	uxth	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800859e:	e139      	b.n	8008814 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d152      	bne.n	800864e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80085a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ae:	2200      	movs	r2, #0
 80085b0:	4906      	ldr	r1, [pc, #24]	@ (80085cc <HAL_I2C_Mem_Read+0x24c>)
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 fd48 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d008      	beq.n	80085d0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e13c      	b.n	800883c <HAL_I2C_Mem_Read+0x4bc>
 80085c2:	bf00      	nop
 80085c4:	00100002 	.word	0x00100002
 80085c8:	ffff0000 	.word	0xffff0000
 80085cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80085d0:	b672      	cpsid	i
}
 80085d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	691a      	ldr	r2, [r3, #16]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ee:	b2d2      	uxtb	r2, r2
 80085f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f6:	1c5a      	adds	r2, r3, #1
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008600:	3b01      	subs	r3, #1
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800860c:	b29b      	uxth	r3, r3
 800860e:	3b01      	subs	r3, #1
 8008610:	b29a      	uxth	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008616:	b662      	cpsie	i
}
 8008618:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	691a      	ldr	r2, [r3, #16]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008624:	b2d2      	uxtb	r2, r2
 8008626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862c:	1c5a      	adds	r2, r3, #1
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008636:	3b01      	subs	r3, #1
 8008638:	b29a      	uxth	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008642:	b29b      	uxth	r3, r3
 8008644:	3b01      	subs	r3, #1
 8008646:	b29a      	uxth	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800864c:	e0e2      	b.n	8008814 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008654:	2200      	movs	r2, #0
 8008656:	497b      	ldr	r1, [pc, #492]	@ (8008844 <HAL_I2C_Mem_Read+0x4c4>)
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 fcf5 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e0e9      	b.n	800883c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008676:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008678:	b672      	cpsid	i
}
 800867a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	691a      	ldr	r2, [r3, #16]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008686:	b2d2      	uxtb	r2, r2
 8008688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008698:	3b01      	subs	r3, #1
 800869a:	b29a      	uxth	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	3b01      	subs	r3, #1
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80086ae:	4b66      	ldr	r3, [pc, #408]	@ (8008848 <HAL_I2C_Mem_Read+0x4c8>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	08db      	lsrs	r3, r3, #3
 80086b4:	4a65      	ldr	r2, [pc, #404]	@ (800884c <HAL_I2C_Mem_Read+0x4cc>)
 80086b6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ba:	0a1a      	lsrs	r2, r3, #8
 80086bc:	4613      	mov	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	00da      	lsls	r2, r3, #3
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d118      	bne.n	8008706 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2220      	movs	r2, #32
 80086de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ee:	f043 0220 	orr.w	r2, r3, #32
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80086f6:	b662      	cpsie	i
}
 80086f8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e09a      	b.n	800883c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	f003 0304 	and.w	r3, r3, #4
 8008710:	2b04      	cmp	r3, #4
 8008712:	d1d9      	bne.n	80086c8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	691a      	ldr	r2, [r3, #16]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800872e:	b2d2      	uxtb	r2, r2
 8008730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008740:	3b01      	subs	r3, #1
 8008742:	b29a      	uxth	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800874c:	b29b      	uxth	r3, r3
 800874e:	3b01      	subs	r3, #1
 8008750:	b29a      	uxth	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008756:	b662      	cpsie	i
}
 8008758:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	691a      	ldr	r2, [r3, #16]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008764:	b2d2      	uxtb	r2, r2
 8008766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008776:	3b01      	subs	r3, #1
 8008778:	b29a      	uxth	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008782:	b29b      	uxth	r3, r3
 8008784:	3b01      	subs	r3, #1
 8008786:	b29a      	uxth	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800878c:	e042      	b.n	8008814 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800878e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008790:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 fe02 	bl	800939c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e04c      	b.n	800883c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	691a      	ldr	r2, [r3, #16]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ac:	b2d2      	uxtb	r2, r2
 80087ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b4:	1c5a      	adds	r2, r3, #1
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087be:	3b01      	subs	r3, #1
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	3b01      	subs	r3, #1
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	f003 0304 	and.w	r3, r3, #4
 80087de:	2b04      	cmp	r3, #4
 80087e0:	d118      	bne.n	8008814 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	691a      	ldr	r2, [r3, #16]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ec:	b2d2      	uxtb	r2, r2
 80087ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087fe:	3b01      	subs	r3, #1
 8008800:	b29a      	uxth	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800880a:	b29b      	uxth	r3, r3
 800880c:	3b01      	subs	r3, #1
 800880e:	b29a      	uxth	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008818:	2b00      	cmp	r3, #0
 800881a:	f47f ae94 	bne.w	8008546 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2220      	movs	r2, #32
 8008822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	e000      	b.n	800883c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800883a:	2302      	movs	r3, #2
  }
}
 800883c:	4618      	mov	r0, r3
 800883e:	3728      	adds	r7, #40	@ 0x28
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	00010004 	.word	0x00010004
 8008848:	20000028 	.word	0x20000028
 800884c:	14f8b589 	.word	0x14f8b589

08008850 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08a      	sub	sp, #40	@ 0x28
 8008854:	af02      	add	r7, sp, #8
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	607a      	str	r2, [r7, #4]
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	460b      	mov	r3, r1
 800885e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008860:	f7fe f878 	bl	8006954 <HAL_GetTick>
 8008864:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b20      	cmp	r3, #32
 8008874:	f040 8111 	bne.w	8008a9a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	2319      	movs	r3, #25
 800887e:	2201      	movs	r2, #1
 8008880:	4988      	ldr	r1, [pc, #544]	@ (8008aa4 <HAL_I2C_IsDeviceReady+0x254>)
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 fbe0 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800888e:	2302      	movs	r3, #2
 8008890:	e104      	b.n	8008a9c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008898:	2b01      	cmp	r3, #1
 800889a:	d101      	bne.n	80088a0 <HAL_I2C_IsDeviceReady+0x50>
 800889c:	2302      	movs	r3, #2
 800889e:	e0fd      	b.n	8008a9c <HAL_I2C_IsDeviceReady+0x24c>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d007      	beq.n	80088c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f042 0201 	orr.w	r2, r2, #1
 80088c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80088d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2224      	movs	r2, #36	@ 0x24
 80088da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4a70      	ldr	r2, [pc, #448]	@ (8008aa8 <HAL_I2C_IsDeviceReady+0x258>)
 80088e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80088f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2200      	movs	r2, #0
 8008902:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 fb9e 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00d      	beq.n	800892e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800891c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008920:	d103      	bne.n	800892a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008928:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e0b6      	b.n	8008a9c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800892e:	897b      	ldrh	r3, [r7, #10]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	461a      	mov	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800893c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800893e:	f7fe f809 	bl	8006954 <HAL_GetTick>
 8008942:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b02      	cmp	r3, #2
 8008950:	bf0c      	ite	eq
 8008952:	2301      	moveq	r3, #1
 8008954:	2300      	movne	r3, #0
 8008956:	b2db      	uxtb	r3, r3
 8008958:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008968:	bf0c      	ite	eq
 800896a:	2301      	moveq	r3, #1
 800896c:	2300      	movne	r3, #0
 800896e:	b2db      	uxtb	r3, r3
 8008970:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008972:	e025      	b.n	80089c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008974:	f7fd ffee 	bl	8006954 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	429a      	cmp	r2, r3
 8008982:	d302      	bcc.n	800898a <HAL_I2C_IsDeviceReady+0x13a>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d103      	bne.n	8008992 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	22a0      	movs	r2, #160	@ 0xa0
 800898e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b02      	cmp	r3, #2
 800899e:	bf0c      	ite	eq
 80089a0:	2301      	moveq	r3, #1
 80089a2:	2300      	movne	r3, #0
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089b6:	bf0c      	ite	eq
 80089b8:	2301      	moveq	r3, #1
 80089ba:	2300      	movne	r3, #0
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2ba0      	cmp	r3, #160	@ 0xa0
 80089ca:	d005      	beq.n	80089d8 <HAL_I2C_IsDeviceReady+0x188>
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d102      	bne.n	80089d8 <HAL_I2C_IsDeviceReady+0x188>
 80089d2:	7dbb      	ldrb	r3, [r7, #22]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0cd      	beq.n	8008974 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2220      	movs	r2, #32
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d129      	bne.n	8008a42 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089fe:	2300      	movs	r3, #0
 8008a00:	613b      	str	r3, [r7, #16]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	613b      	str	r3, [r7, #16]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	613b      	str	r3, [r7, #16]
 8008a12:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	2319      	movs	r3, #25
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	4921      	ldr	r1, [pc, #132]	@ (8008aa4 <HAL_I2C_IsDeviceReady+0x254>)
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f000 fb12 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d001      	beq.n	8008a2e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e036      	b.n	8008a9c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2220      	movs	r2, #32
 8008a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	e02c      	b.n	8008a9c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a50:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008a5a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	2319      	movs	r3, #25
 8008a62:	2201      	movs	r2, #1
 8008a64:	490f      	ldr	r1, [pc, #60]	@ (8008aa4 <HAL_I2C_IsDeviceReady+0x254>)
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f000 faee 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e012      	b.n	8008a9c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	f4ff af32 	bcc.w	80088ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2220      	movs	r2, #32
 8008a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e000      	b.n	8008a9c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008a9a:	2302      	movs	r3, #2
  }
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3720      	adds	r7, #32
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	00100002 	.word	0x00100002
 8008aa8:	ffff0000 	.word	0xffff0000

08008aac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b088      	sub	sp, #32
 8008ab0:	af02      	add	r7, sp, #8
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	607a      	str	r2, [r7, #4]
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b08      	cmp	r3, #8
 8008ac6:	d006      	beq.n	8008ad6 <I2C_MasterRequestWrite+0x2a>
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d003      	beq.n	8008ad6 <I2C_MasterRequestWrite+0x2a>
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008ad4:	d108      	bne.n	8008ae8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	e00b      	b.n	8008b00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aec:	2b12      	cmp	r3, #18
 8008aee:	d107      	bne.n	8008b00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008afe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f000 fa9b 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00d      	beq.n	8008b34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b26:	d103      	bne.n	8008b30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e035      	b.n	8008ba0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b3c:	d108      	bne.n	8008b50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b3e:	897b      	ldrh	r3, [r7, #10]
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	461a      	mov	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008b4c:	611a      	str	r2, [r3, #16]
 8008b4e:	e01b      	b.n	8008b88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008b50:	897b      	ldrh	r3, [r7, #10]
 8008b52:	11db      	asrs	r3, r3, #7
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	f003 0306 	and.w	r3, r3, #6
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	f063 030f 	orn	r3, r3, #15
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	490e      	ldr	r1, [pc, #56]	@ (8008ba8 <I2C_MasterRequestWrite+0xfc>)
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f000 fae4 	bl	800913c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e010      	b.n	8008ba0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008b7e:	897b      	ldrh	r3, [r7, #10]
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	4907      	ldr	r1, [pc, #28]	@ (8008bac <I2C_MasterRequestWrite+0x100>)
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 fad4 	bl	800913c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e000      	b.n	8008ba0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	00010008 	.word	0x00010008
 8008bac:	00010002 	.word	0x00010002

08008bb0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af02      	add	r7, sp, #8
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	607a      	str	r2, [r7, #4]
 8008bba:	603b      	str	r3, [r7, #0]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008bd4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	d006      	beq.n	8008bea <I2C_MasterRequestRead+0x3a>
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d003      	beq.n	8008bea <I2C_MasterRequestRead+0x3a>
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008be8:	d108      	bne.n	8008bfc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	e00b      	b.n	8008c14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c00:	2b11      	cmp	r3, #17
 8008c02:	d107      	bne.n	8008c14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 fa11 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00d      	beq.n	8008c48 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c3a:	d103      	bne.n	8008c44 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e079      	b.n	8008d3c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c50:	d108      	bne.n	8008c64 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008c52:	897b      	ldrh	r3, [r7, #10]
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	f043 0301 	orr.w	r3, r3, #1
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	611a      	str	r2, [r3, #16]
 8008c62:	e05f      	b.n	8008d24 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008c64:	897b      	ldrh	r3, [r7, #10]
 8008c66:	11db      	asrs	r3, r3, #7
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	f003 0306 	and.w	r3, r3, #6
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	f063 030f 	orn	r3, r3, #15
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	4930      	ldr	r1, [pc, #192]	@ (8008d44 <I2C_MasterRequestRead+0x194>)
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 fa5a 	bl	800913c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e054      	b.n	8008d3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008c92:	897b      	ldrh	r3, [r7, #10]
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	4929      	ldr	r1, [pc, #164]	@ (8008d48 <I2C_MasterRequestRead+0x198>)
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 fa4a 	bl	800913c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e044      	b.n	8008d3c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	613b      	str	r3, [r7, #16]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	613b      	str	r3, [r7, #16]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	613b      	str	r3, [r7, #16]
 8008cc6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008cd6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f000 f9af 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00d      	beq.n	8008d0c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cfe:	d103      	bne.n	8008d08 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d06:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e017      	b.n	8008d3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008d0c:	897b      	ldrh	r3, [r7, #10]
 8008d0e:	11db      	asrs	r3, r3, #7
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	f003 0306 	and.w	r3, r3, #6
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	f063 030e 	orn	r3, r3, #14
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	4907      	ldr	r1, [pc, #28]	@ (8008d48 <I2C_MasterRequestRead+0x198>)
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 fa06 	bl	800913c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e000      	b.n	8008d3c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	00010008 	.word	0x00010008
 8008d48:	00010002 	.word	0x00010002

08008d4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b088      	sub	sp, #32
 8008d50:	af02      	add	r7, sp, #8
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	4608      	mov	r0, r1
 8008d56:	4611      	mov	r1, r2
 8008d58:	461a      	mov	r2, r3
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	817b      	strh	r3, [r7, #10]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	813b      	strh	r3, [r7, #8]
 8008d62:	4613      	mov	r3, r2
 8008d64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 f960 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00d      	beq.n	8008daa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d9c:	d103      	bne.n	8008da6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008da4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e05f      	b.n	8008e6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008daa:	897b      	ldrh	r3, [r7, #10]
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	461a      	mov	r2, r3
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008db8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbc:	6a3a      	ldr	r2, [r7, #32]
 8008dbe:	492d      	ldr	r1, [pc, #180]	@ (8008e74 <I2C_RequestMemoryWrite+0x128>)
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 f9bb 	bl	800913c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d001      	beq.n	8008dd0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e04c      	b.n	8008e6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	617b      	str	r3, [r7, #20]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	617b      	str	r3, [r7, #20]
 8008de4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008de8:	6a39      	ldr	r1, [r7, #32]
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 fa46 	bl	800927c <I2C_WaitOnTXEFlagUntilTimeout>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00d      	beq.n	8008e12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	d107      	bne.n	8008e0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e02b      	b.n	8008e6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e12:	88fb      	ldrh	r3, [r7, #6]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d105      	bne.n	8008e24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e18:	893b      	ldrh	r3, [r7, #8]
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	611a      	str	r2, [r3, #16]
 8008e22:	e021      	b.n	8008e68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008e24:	893b      	ldrh	r3, [r7, #8]
 8008e26:	0a1b      	lsrs	r3, r3, #8
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e34:	6a39      	ldr	r1, [r7, #32]
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 fa20 	bl	800927c <I2C_WaitOnTXEFlagUntilTimeout>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00d      	beq.n	8008e5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e46:	2b04      	cmp	r3, #4
 8008e48:	d107      	bne.n	8008e5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e005      	b.n	8008e6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e5e:	893b      	ldrh	r3, [r7, #8]
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	00010002 	.word	0x00010002

08008e78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b088      	sub	sp, #32
 8008e7c:	af02      	add	r7, sp, #8
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	4608      	mov	r0, r1
 8008e82:	4611      	mov	r1, r2
 8008e84:	461a      	mov	r2, r3
 8008e86:	4603      	mov	r3, r0
 8008e88:	817b      	strh	r3, [r7, #10]
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	813b      	strh	r3, [r7, #8]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008ea0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008eb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 f8c2 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00d      	beq.n	8008ee6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ed8:	d103      	bne.n	8008ee2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ee0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e0aa      	b.n	800903c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008ee6:	897b      	ldrh	r3, [r7, #10]
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	461a      	mov	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008ef4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef8:	6a3a      	ldr	r2, [r7, #32]
 8008efa:	4952      	ldr	r1, [pc, #328]	@ (8009044 <I2C_RequestMemoryRead+0x1cc>)
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f000 f91d 	bl	800913c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e097      	b.n	800903c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	617b      	str	r3, [r7, #20]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	617b      	str	r3, [r7, #20]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	617b      	str	r3, [r7, #20]
 8008f20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f24:	6a39      	ldr	r1, [r7, #32]
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f000 f9a8 	bl	800927c <I2C_WaitOnTXEFlagUntilTimeout>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00d      	beq.n	8008f4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f36:	2b04      	cmp	r3, #4
 8008f38:	d107      	bne.n	8008f4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e076      	b.n	800903c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f4e:	88fb      	ldrh	r3, [r7, #6]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d105      	bne.n	8008f60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f54:	893b      	ldrh	r3, [r7, #8]
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	611a      	str	r2, [r3, #16]
 8008f5e:	e021      	b.n	8008fa4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008f60:	893b      	ldrh	r3, [r7, #8]
 8008f62:	0a1b      	lsrs	r3, r3, #8
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f70:	6a39      	ldr	r1, [r7, #32]
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f000 f982 	bl	800927c <I2C_WaitOnTXEFlagUntilTimeout>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00d      	beq.n	8008f9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	d107      	bne.n	8008f96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e050      	b.n	800903c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f9a:	893b      	ldrh	r3, [r7, #8]
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fa6:	6a39      	ldr	r1, [r7, #32]
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f000 f967 	bl	800927c <I2C_WaitOnTXEFlagUntilTimeout>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00d      	beq.n	8008fd0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d107      	bne.n	8008fcc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e035      	b.n	800903c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008fde:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 f82b 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00d      	beq.n	8009014 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009006:	d103      	bne.n	8009010 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800900e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e013      	b.n	800903c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009014:	897b      	ldrh	r3, [r7, #10]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	f043 0301 	orr.w	r3, r3, #1
 800901c:	b2da      	uxtb	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009026:	6a3a      	ldr	r2, [r7, #32]
 8009028:	4906      	ldr	r1, [pc, #24]	@ (8009044 <I2C_RequestMemoryRead+0x1cc>)
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 f886 	bl	800913c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e000      	b.n	800903c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3718      	adds	r7, #24
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	00010002 	.word	0x00010002

08009048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	4613      	mov	r3, r2
 8009056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009058:	e048      	b.n	80090ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009060:	d044      	beq.n	80090ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009062:	f7fd fc77 	bl	8006954 <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	429a      	cmp	r2, r3
 8009070:	d302      	bcc.n	8009078 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d139      	bne.n	80090ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	0c1b      	lsrs	r3, r3, #16
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b01      	cmp	r3, #1
 8009080:	d10d      	bne.n	800909e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	43da      	mvns	r2, r3
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	4013      	ands	r3, r2
 800908e:	b29b      	uxth	r3, r3
 8009090:	2b00      	cmp	r3, #0
 8009092:	bf0c      	ite	eq
 8009094:	2301      	moveq	r3, #1
 8009096:	2300      	movne	r3, #0
 8009098:	b2db      	uxtb	r3, r3
 800909a:	461a      	mov	r2, r3
 800909c:	e00c      	b.n	80090b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	43da      	mvns	r2, r3
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	4013      	ands	r3, r2
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	bf0c      	ite	eq
 80090b0:	2301      	moveq	r3, #1
 80090b2:	2300      	movne	r3, #0
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	461a      	mov	r2, r3
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d116      	bne.n	80090ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2220      	movs	r2, #32
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d8:	f043 0220 	orr.w	r2, r3, #32
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e023      	b.n	8009134 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	0c1b      	lsrs	r3, r3, #16
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d10d      	bne.n	8009112 <I2C_WaitOnFlagUntilTimeout+0xca>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	43da      	mvns	r2, r3
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	4013      	ands	r3, r2
 8009102:	b29b      	uxth	r3, r3
 8009104:	2b00      	cmp	r3, #0
 8009106:	bf0c      	ite	eq
 8009108:	2301      	moveq	r3, #1
 800910a:	2300      	movne	r3, #0
 800910c:	b2db      	uxtb	r3, r3
 800910e:	461a      	mov	r2, r3
 8009110:	e00c      	b.n	800912c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	43da      	mvns	r2, r3
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	4013      	ands	r3, r2
 800911e:	b29b      	uxth	r3, r3
 8009120:	2b00      	cmp	r3, #0
 8009122:	bf0c      	ite	eq
 8009124:	2301      	moveq	r3, #1
 8009126:	2300      	movne	r3, #0
 8009128:	b2db      	uxtb	r3, r3
 800912a:	461a      	mov	r2, r3
 800912c:	79fb      	ldrb	r3, [r7, #7]
 800912e:	429a      	cmp	r2, r3
 8009130:	d093      	beq.n	800905a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800914a:	e071      	b.n	8009230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800915a:	d123      	bne.n	80091a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800916a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009174:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2220      	movs	r2, #32
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009190:	f043 0204 	orr.w	r2, r3, #4
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e067      	b.n	8009274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091aa:	d041      	beq.n	8009230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091ac:	f7fd fbd2 	bl	8006954 <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d302      	bcc.n	80091c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d136      	bne.n	8009230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	0c1b      	lsrs	r3, r3, #16
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d10c      	bne.n	80091e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	43da      	mvns	r2, r3
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	4013      	ands	r3, r2
 80091d8:	b29b      	uxth	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	bf14      	ite	ne
 80091de:	2301      	movne	r3, #1
 80091e0:	2300      	moveq	r3, #0
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	e00b      	b.n	80091fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	43da      	mvns	r2, r3
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	4013      	ands	r3, r2
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	bf14      	ite	ne
 80091f8:	2301      	movne	r3, #1
 80091fa:	2300      	moveq	r3, #0
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d016      	beq.n	8009230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2220      	movs	r2, #32
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800921c:	f043 0220 	orr.w	r2, r3, #32
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e021      	b.n	8009274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	0c1b      	lsrs	r3, r3, #16
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b01      	cmp	r3, #1
 8009238:	d10c      	bne.n	8009254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	695b      	ldr	r3, [r3, #20]
 8009240:	43da      	mvns	r2, r3
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	4013      	ands	r3, r2
 8009246:	b29b      	uxth	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	bf14      	ite	ne
 800924c:	2301      	movne	r3, #1
 800924e:	2300      	moveq	r3, #0
 8009250:	b2db      	uxtb	r3, r3
 8009252:	e00b      	b.n	800926c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	43da      	mvns	r2, r3
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	4013      	ands	r3, r2
 8009260:	b29b      	uxth	r3, r3
 8009262:	2b00      	cmp	r3, #0
 8009264:	bf14      	ite	ne
 8009266:	2301      	movne	r3, #1
 8009268:	2300      	moveq	r3, #0
 800926a:	b2db      	uxtb	r3, r3
 800926c:	2b00      	cmp	r3, #0
 800926e:	f47f af6d 	bne.w	800914c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009288:	e034      	b.n	80092f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f000 f8e3 	bl	8009456 <I2C_IsAcknowledgeFailed>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e034      	b.n	8009304 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a0:	d028      	beq.n	80092f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092a2:	f7fd fb57 	bl	8006954 <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d302      	bcc.n	80092b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d11d      	bne.n	80092f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092c2:	2b80      	cmp	r3, #128	@ 0x80
 80092c4:	d016      	beq.n	80092f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2220      	movs	r2, #32
 80092d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e0:	f043 0220 	orr.w	r2, r3, #32
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e007      	b.n	8009304 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	695b      	ldr	r3, [r3, #20]
 80092fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092fe:	2b80      	cmp	r3, #128	@ 0x80
 8009300:	d1c3      	bne.n	800928a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009318:	e034      	b.n	8009384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 f89b 	bl	8009456 <I2C_IsAcknowledgeFailed>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e034      	b.n	8009394 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009330:	d028      	beq.n	8009384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009332:	f7fd fb0f 	bl	8006954 <HAL_GetTick>
 8009336:	4602      	mov	r2, r0
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	429a      	cmp	r2, r3
 8009340:	d302      	bcc.n	8009348 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d11d      	bne.n	8009384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	f003 0304 	and.w	r3, r3, #4
 8009352:	2b04      	cmp	r3, #4
 8009354:	d016      	beq.n	8009384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2220      	movs	r2, #32
 8009360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009370:	f043 0220 	orr.w	r2, r3, #32
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e007      	b.n	8009394 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	f003 0304 	and.w	r3, r3, #4
 800938e:	2b04      	cmp	r3, #4
 8009390:	d1c3      	bne.n	800931a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80093a8:	e049      	b.n	800943e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	695b      	ldr	r3, [r3, #20]
 80093b0:	f003 0310 	and.w	r3, r3, #16
 80093b4:	2b10      	cmp	r3, #16
 80093b6:	d119      	bne.n	80093ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f06f 0210 	mvn.w	r2, #16
 80093c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2220      	movs	r2, #32
 80093cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e030      	b.n	800944e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093ec:	f7fd fab2 	bl	8006954 <HAL_GetTick>
 80093f0:	4602      	mov	r2, r0
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d302      	bcc.n	8009402 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d11d      	bne.n	800943e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	695b      	ldr	r3, [r3, #20]
 8009408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800940c:	2b40      	cmp	r3, #64	@ 0x40
 800940e:	d016      	beq.n	800943e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2220      	movs	r2, #32
 800941a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800942a:	f043 0220 	orr.w	r2, r3, #32
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e007      	b.n	800944e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009448:	2b40      	cmp	r3, #64	@ 0x40
 800944a:	d1ae      	bne.n	80093aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009456:	b480      	push	{r7}
 8009458:	b083      	sub	sp, #12
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800946c:	d11b      	bne.n	80094a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009476:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2220      	movs	r2, #32
 8009482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009492:	f043 0204 	orr.w	r2, r3, #4
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e000      	b.n	80094a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bc80      	pop	{r7}
 80094b0:	4770      	bx	lr
	...

080094b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e272      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f000 8087 	beq.w	80095e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80094d4:	4b92      	ldr	r3, [pc, #584]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	f003 030c 	and.w	r3, r3, #12
 80094dc:	2b04      	cmp	r3, #4
 80094de:	d00c      	beq.n	80094fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80094e0:	4b8f      	ldr	r3, [pc, #572]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	f003 030c 	and.w	r3, r3, #12
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d112      	bne.n	8009512 <HAL_RCC_OscConfig+0x5e>
 80094ec:	4b8c      	ldr	r3, [pc, #560]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094f8:	d10b      	bne.n	8009512 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094fa:	4b89      	ldr	r3, [pc, #548]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d06c      	beq.n	80095e0 <HAL_RCC_OscConfig+0x12c>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d168      	bne.n	80095e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	e24c      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800951a:	d106      	bne.n	800952a <HAL_RCC_OscConfig+0x76>
 800951c:	4b80      	ldr	r3, [pc, #512]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a7f      	ldr	r2, [pc, #508]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 8009522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009526:	6013      	str	r3, [r2, #0]
 8009528:	e02e      	b.n	8009588 <HAL_RCC_OscConfig+0xd4>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10c      	bne.n	800954c <HAL_RCC_OscConfig+0x98>
 8009532:	4b7b      	ldr	r3, [pc, #492]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a7a      	ldr	r2, [pc, #488]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 8009538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800953c:	6013      	str	r3, [r2, #0]
 800953e:	4b78      	ldr	r3, [pc, #480]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a77      	ldr	r2, [pc, #476]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 8009544:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009548:	6013      	str	r3, [r2, #0]
 800954a:	e01d      	b.n	8009588 <HAL_RCC_OscConfig+0xd4>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009554:	d10c      	bne.n	8009570 <HAL_RCC_OscConfig+0xbc>
 8009556:	4b72      	ldr	r3, [pc, #456]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a71      	ldr	r2, [pc, #452]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 800955c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009560:	6013      	str	r3, [r2, #0]
 8009562:	4b6f      	ldr	r3, [pc, #444]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a6e      	ldr	r2, [pc, #440]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 8009568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800956c:	6013      	str	r3, [r2, #0]
 800956e:	e00b      	b.n	8009588 <HAL_RCC_OscConfig+0xd4>
 8009570:	4b6b      	ldr	r3, [pc, #428]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a6a      	ldr	r2, [pc, #424]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 8009576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	4b68      	ldr	r3, [pc, #416]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a67      	ldr	r2, [pc, #412]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 8009582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009586:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d013      	beq.n	80095b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009590:	f7fd f9e0 	bl	8006954 <HAL_GetTick>
 8009594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009596:	e008      	b.n	80095aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009598:	f7fd f9dc 	bl	8006954 <HAL_GetTick>
 800959c:	4602      	mov	r2, r0
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	2b64      	cmp	r3, #100	@ 0x64
 80095a4:	d901      	bls.n	80095aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e200      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095aa:	4b5d      	ldr	r3, [pc, #372]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d0f0      	beq.n	8009598 <HAL_RCC_OscConfig+0xe4>
 80095b6:	e014      	b.n	80095e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095b8:	f7fd f9cc 	bl	8006954 <HAL_GetTick>
 80095bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80095be:	e008      	b.n	80095d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80095c0:	f7fd f9c8 	bl	8006954 <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	2b64      	cmp	r3, #100	@ 0x64
 80095cc:	d901      	bls.n	80095d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e1ec      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80095d2:	4b53      	ldr	r3, [pc, #332]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1f0      	bne.n	80095c0 <HAL_RCC_OscConfig+0x10c>
 80095de:	e000      	b.n	80095e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0302 	and.w	r3, r3, #2
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d063      	beq.n	80096b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80095ee:	4b4c      	ldr	r3, [pc, #304]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	f003 030c 	and.w	r3, r3, #12
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00b      	beq.n	8009612 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80095fa:	4b49      	ldr	r3, [pc, #292]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	f003 030c 	and.w	r3, r3, #12
 8009602:	2b08      	cmp	r3, #8
 8009604:	d11c      	bne.n	8009640 <HAL_RCC_OscConfig+0x18c>
 8009606:	4b46      	ldr	r3, [pc, #280]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d116      	bne.n	8009640 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009612:	4b43      	ldr	r3, [pc, #268]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0302 	and.w	r3, r3, #2
 800961a:	2b00      	cmp	r3, #0
 800961c:	d005      	beq.n	800962a <HAL_RCC_OscConfig+0x176>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d001      	beq.n	800962a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e1c0      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800962a:	4b3d      	ldr	r3, [pc, #244]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	4939      	ldr	r1, [pc, #228]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 800963a:	4313      	orrs	r3, r2
 800963c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800963e:	e03a      	b.n	80096b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d020      	beq.n	800968a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009648:	4b36      	ldr	r3, [pc, #216]	@ (8009724 <HAL_RCC_OscConfig+0x270>)
 800964a:	2201      	movs	r2, #1
 800964c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800964e:	f7fd f981 	bl	8006954 <HAL_GetTick>
 8009652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009654:	e008      	b.n	8009668 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009656:	f7fd f97d 	bl	8006954 <HAL_GetTick>
 800965a:	4602      	mov	r2, r0
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	2b02      	cmp	r3, #2
 8009662:	d901      	bls.n	8009668 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e1a1      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009668:	4b2d      	ldr	r3, [pc, #180]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	2b00      	cmp	r3, #0
 8009672:	d0f0      	beq.n	8009656 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009674:	4b2a      	ldr	r3, [pc, #168]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	695b      	ldr	r3, [r3, #20]
 8009680:	00db      	lsls	r3, r3, #3
 8009682:	4927      	ldr	r1, [pc, #156]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 8009684:	4313      	orrs	r3, r2
 8009686:	600b      	str	r3, [r1, #0]
 8009688:	e015      	b.n	80096b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800968a:	4b26      	ldr	r3, [pc, #152]	@ (8009724 <HAL_RCC_OscConfig+0x270>)
 800968c:	2200      	movs	r2, #0
 800968e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009690:	f7fd f960 	bl	8006954 <HAL_GetTick>
 8009694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009696:	e008      	b.n	80096aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009698:	f7fd f95c 	bl	8006954 <HAL_GetTick>
 800969c:	4602      	mov	r2, r0
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d901      	bls.n	80096aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	e180      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 0302 	and.w	r3, r3, #2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1f0      	bne.n	8009698 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0308 	and.w	r3, r3, #8
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d03a      	beq.n	8009738 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d019      	beq.n	80096fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80096ca:	4b17      	ldr	r3, [pc, #92]	@ (8009728 <HAL_RCC_OscConfig+0x274>)
 80096cc:	2201      	movs	r2, #1
 80096ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096d0:	f7fd f940 	bl	8006954 <HAL_GetTick>
 80096d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096d6:	e008      	b.n	80096ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096d8:	f7fd f93c 	bl	8006954 <HAL_GetTick>
 80096dc:	4602      	mov	r2, r0
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d901      	bls.n	80096ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80096e6:	2303      	movs	r3, #3
 80096e8:	e160      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009720 <HAL_RCC_OscConfig+0x26c>)
 80096ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ee:	f003 0302 	and.w	r3, r3, #2
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d0f0      	beq.n	80096d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80096f6:	2001      	movs	r0, #1
 80096f8:	f000 fafe 	bl	8009cf8 <RCC_Delay>
 80096fc:	e01c      	b.n	8009738 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009728 <HAL_RCC_OscConfig+0x274>)
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009704:	f7fd f926 	bl	8006954 <HAL_GetTick>
 8009708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800970a:	e00f      	b.n	800972c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800970c:	f7fd f922 	bl	8006954 <HAL_GetTick>
 8009710:	4602      	mov	r2, r0
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	2b02      	cmp	r3, #2
 8009718:	d908      	bls.n	800972c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800971a:	2303      	movs	r3, #3
 800971c:	e146      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
 800971e:	bf00      	nop
 8009720:	40021000 	.word	0x40021000
 8009724:	42420000 	.word	0x42420000
 8009728:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800972c:	4b92      	ldr	r3, [pc, #584]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 800972e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1e9      	bne.n	800970c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0304 	and.w	r3, r3, #4
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 80a6 	beq.w	8009892 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009746:	2300      	movs	r3, #0
 8009748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800974a:	4b8b      	ldr	r3, [pc, #556]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10d      	bne.n	8009772 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009756:	4b88      	ldr	r3, [pc, #544]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 8009758:	69db      	ldr	r3, [r3, #28]
 800975a:	4a87      	ldr	r2, [pc, #540]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 800975c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009760:	61d3      	str	r3, [r2, #28]
 8009762:	4b85      	ldr	r3, [pc, #532]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800976a:	60bb      	str	r3, [r7, #8]
 800976c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800976e:	2301      	movs	r3, #1
 8009770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009772:	4b82      	ldr	r3, [pc, #520]	@ (800997c <HAL_RCC_OscConfig+0x4c8>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800977a:	2b00      	cmp	r3, #0
 800977c:	d118      	bne.n	80097b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800977e:	4b7f      	ldr	r3, [pc, #508]	@ (800997c <HAL_RCC_OscConfig+0x4c8>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a7e      	ldr	r2, [pc, #504]	@ (800997c <HAL_RCC_OscConfig+0x4c8>)
 8009784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800978a:	f7fd f8e3 	bl	8006954 <HAL_GetTick>
 800978e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009790:	e008      	b.n	80097a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009792:	f7fd f8df 	bl	8006954 <HAL_GetTick>
 8009796:	4602      	mov	r2, r0
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	2b64      	cmp	r3, #100	@ 0x64
 800979e:	d901      	bls.n	80097a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80097a0:	2303      	movs	r3, #3
 80097a2:	e103      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097a4:	4b75      	ldr	r3, [pc, #468]	@ (800997c <HAL_RCC_OscConfig+0x4c8>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d0f0      	beq.n	8009792 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d106      	bne.n	80097c6 <HAL_RCC_OscConfig+0x312>
 80097b8:	4b6f      	ldr	r3, [pc, #444]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 80097ba:	6a1b      	ldr	r3, [r3, #32]
 80097bc:	4a6e      	ldr	r2, [pc, #440]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 80097be:	f043 0301 	orr.w	r3, r3, #1
 80097c2:	6213      	str	r3, [r2, #32]
 80097c4:	e02d      	b.n	8009822 <HAL_RCC_OscConfig+0x36e>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10c      	bne.n	80097e8 <HAL_RCC_OscConfig+0x334>
 80097ce:	4b6a      	ldr	r3, [pc, #424]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	4a69      	ldr	r2, [pc, #420]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 80097d4:	f023 0301 	bic.w	r3, r3, #1
 80097d8:	6213      	str	r3, [r2, #32]
 80097da:	4b67      	ldr	r3, [pc, #412]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	4a66      	ldr	r2, [pc, #408]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 80097e0:	f023 0304 	bic.w	r3, r3, #4
 80097e4:	6213      	str	r3, [r2, #32]
 80097e6:	e01c      	b.n	8009822 <HAL_RCC_OscConfig+0x36e>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	2b05      	cmp	r3, #5
 80097ee:	d10c      	bne.n	800980a <HAL_RCC_OscConfig+0x356>
 80097f0:	4b61      	ldr	r3, [pc, #388]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 80097f2:	6a1b      	ldr	r3, [r3, #32]
 80097f4:	4a60      	ldr	r2, [pc, #384]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 80097f6:	f043 0304 	orr.w	r3, r3, #4
 80097fa:	6213      	str	r3, [r2, #32]
 80097fc:	4b5e      	ldr	r3, [pc, #376]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	4a5d      	ldr	r2, [pc, #372]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 8009802:	f043 0301 	orr.w	r3, r3, #1
 8009806:	6213      	str	r3, [r2, #32]
 8009808:	e00b      	b.n	8009822 <HAL_RCC_OscConfig+0x36e>
 800980a:	4b5b      	ldr	r3, [pc, #364]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	4a5a      	ldr	r2, [pc, #360]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 8009810:	f023 0301 	bic.w	r3, r3, #1
 8009814:	6213      	str	r3, [r2, #32]
 8009816:	4b58      	ldr	r3, [pc, #352]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	4a57      	ldr	r2, [pc, #348]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 800981c:	f023 0304 	bic.w	r3, r3, #4
 8009820:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d015      	beq.n	8009856 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800982a:	f7fd f893 	bl	8006954 <HAL_GetTick>
 800982e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009830:	e00a      	b.n	8009848 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009832:	f7fd f88f 	bl	8006954 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009840:	4293      	cmp	r3, r2
 8009842:	d901      	bls.n	8009848 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009844:	2303      	movs	r3, #3
 8009846:	e0b1      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009848:	4b4b      	ldr	r3, [pc, #300]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 800984a:	6a1b      	ldr	r3, [r3, #32]
 800984c:	f003 0302 	and.w	r3, r3, #2
 8009850:	2b00      	cmp	r3, #0
 8009852:	d0ee      	beq.n	8009832 <HAL_RCC_OscConfig+0x37e>
 8009854:	e014      	b.n	8009880 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009856:	f7fd f87d 	bl	8006954 <HAL_GetTick>
 800985a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800985c:	e00a      	b.n	8009874 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800985e:	f7fd f879 	bl	8006954 <HAL_GetTick>
 8009862:	4602      	mov	r2, r0
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800986c:	4293      	cmp	r3, r2
 800986e:	d901      	bls.n	8009874 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e09b      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009874:	4b40      	ldr	r3, [pc, #256]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	f003 0302 	and.w	r3, r3, #2
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1ee      	bne.n	800985e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009880:	7dfb      	ldrb	r3, [r7, #23]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d105      	bne.n	8009892 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009886:	4b3c      	ldr	r3, [pc, #240]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 8009888:	69db      	ldr	r3, [r3, #28]
 800988a:	4a3b      	ldr	r2, [pc, #236]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 800988c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009890:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	2b00      	cmp	r3, #0
 8009898:	f000 8087 	beq.w	80099aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800989c:	4b36      	ldr	r3, [pc, #216]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f003 030c 	and.w	r3, r3, #12
 80098a4:	2b08      	cmp	r3, #8
 80098a6:	d061      	beq.n	800996c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d146      	bne.n	800993e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098b0:	4b33      	ldr	r3, [pc, #204]	@ (8009980 <HAL_RCC_OscConfig+0x4cc>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098b6:	f7fd f84d 	bl	8006954 <HAL_GetTick>
 80098ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80098bc:	e008      	b.n	80098d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098be:	f7fd f849 	bl	8006954 <HAL_GetTick>
 80098c2:	4602      	mov	r2, r0
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d901      	bls.n	80098d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e06d      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80098d0:	4b29      	ldr	r3, [pc, #164]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1f0      	bne.n	80098be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098e4:	d108      	bne.n	80098f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80098e6:	4b24      	ldr	r3, [pc, #144]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	4921      	ldr	r1, [pc, #132]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 80098f4:	4313      	orrs	r3, r2
 80098f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098f8:	4b1f      	ldr	r3, [pc, #124]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a19      	ldr	r1, [r3, #32]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009908:	430b      	orrs	r3, r1
 800990a:	491b      	ldr	r1, [pc, #108]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 800990c:	4313      	orrs	r3, r2
 800990e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009910:	4b1b      	ldr	r3, [pc, #108]	@ (8009980 <HAL_RCC_OscConfig+0x4cc>)
 8009912:	2201      	movs	r2, #1
 8009914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009916:	f7fd f81d 	bl	8006954 <HAL_GetTick>
 800991a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800991c:	e008      	b.n	8009930 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800991e:	f7fd f819 	bl	8006954 <HAL_GetTick>
 8009922:	4602      	mov	r2, r0
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	2b02      	cmp	r3, #2
 800992a:	d901      	bls.n	8009930 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e03d      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009930:	4b11      	ldr	r3, [pc, #68]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009938:	2b00      	cmp	r3, #0
 800993a:	d0f0      	beq.n	800991e <HAL_RCC_OscConfig+0x46a>
 800993c:	e035      	b.n	80099aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800993e:	4b10      	ldr	r3, [pc, #64]	@ (8009980 <HAL_RCC_OscConfig+0x4cc>)
 8009940:	2200      	movs	r2, #0
 8009942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009944:	f7fd f806 	bl	8006954 <HAL_GetTick>
 8009948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800994a:	e008      	b.n	800995e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800994c:	f7fd f802 	bl	8006954 <HAL_GetTick>
 8009950:	4602      	mov	r2, r0
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	2b02      	cmp	r3, #2
 8009958:	d901      	bls.n	800995e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800995a:	2303      	movs	r3, #3
 800995c:	e026      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800995e:	4b06      	ldr	r3, [pc, #24]	@ (8009978 <HAL_RCC_OscConfig+0x4c4>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1f0      	bne.n	800994c <HAL_RCC_OscConfig+0x498>
 800996a:	e01e      	b.n	80099aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	69db      	ldr	r3, [r3, #28]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d107      	bne.n	8009984 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e019      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
 8009978:	40021000 	.word	0x40021000
 800997c:	40007000 	.word	0x40007000
 8009980:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009984:	4b0b      	ldr	r3, [pc, #44]	@ (80099b4 <HAL_RCC_OscConfig+0x500>)
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a1b      	ldr	r3, [r3, #32]
 8009994:	429a      	cmp	r2, r3
 8009996:	d106      	bne.n	80099a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d001      	beq.n	80099aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e000      	b.n	80099ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	40021000 	.word	0x40021000

080099b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e0d0      	b.n	8009b6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80099cc:	4b6a      	ldr	r3, [pc, #424]	@ (8009b78 <HAL_RCC_ClockConfig+0x1c0>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 0307 	and.w	r3, r3, #7
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d910      	bls.n	80099fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099da:	4b67      	ldr	r3, [pc, #412]	@ (8009b78 <HAL_RCC_ClockConfig+0x1c0>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f023 0207 	bic.w	r2, r3, #7
 80099e2:	4965      	ldr	r1, [pc, #404]	@ (8009b78 <HAL_RCC_ClockConfig+0x1c0>)
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099ea:	4b63      	ldr	r3, [pc, #396]	@ (8009b78 <HAL_RCC_ClockConfig+0x1c0>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0307 	and.w	r3, r3, #7
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d001      	beq.n	80099fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e0b8      	b.n	8009b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 0302 	and.w	r3, r3, #2
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d020      	beq.n	8009a4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 0304 	and.w	r3, r3, #4
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d005      	beq.n	8009a20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009a14:	4b59      	ldr	r3, [pc, #356]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	4a58      	ldr	r2, [pc, #352]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009a1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009a1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0308 	and.w	r3, r3, #8
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d005      	beq.n	8009a38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009a2c:	4b53      	ldr	r3, [pc, #332]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	4a52      	ldr	r2, [pc, #328]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009a32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8009a36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a38:	4b50      	ldr	r3, [pc, #320]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	494d      	ldr	r1, [pc, #308]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 0301 	and.w	r3, r3, #1
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d040      	beq.n	8009ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d107      	bne.n	8009a6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a5e:	4b47      	ldr	r3, [pc, #284]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d115      	bne.n	8009a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e07f      	b.n	8009b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d107      	bne.n	8009a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a76:	4b41      	ldr	r3, [pc, #260]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d109      	bne.n	8009a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e073      	b.n	8009b6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a86:	4b3d      	ldr	r3, [pc, #244]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d101      	bne.n	8009a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e06b      	b.n	8009b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a96:	4b39      	ldr	r3, [pc, #228]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	f023 0203 	bic.w	r2, r3, #3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	4936      	ldr	r1, [pc, #216]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009aa8:	f7fc ff54 	bl	8006954 <HAL_GetTick>
 8009aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009aae:	e00a      	b.n	8009ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ab0:	f7fc ff50 	bl	8006954 <HAL_GetTick>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d901      	bls.n	8009ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e053      	b.n	8009b6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f003 020c 	and.w	r2, r3, #12
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d1eb      	bne.n	8009ab0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009ad8:	4b27      	ldr	r3, [pc, #156]	@ (8009b78 <HAL_RCC_ClockConfig+0x1c0>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0307 	and.w	r3, r3, #7
 8009ae0:	683a      	ldr	r2, [r7, #0]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d210      	bcs.n	8009b08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ae6:	4b24      	ldr	r3, [pc, #144]	@ (8009b78 <HAL_RCC_ClockConfig+0x1c0>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f023 0207 	bic.w	r2, r3, #7
 8009aee:	4922      	ldr	r1, [pc, #136]	@ (8009b78 <HAL_RCC_ClockConfig+0x1c0>)
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009af6:	4b20      	ldr	r3, [pc, #128]	@ (8009b78 <HAL_RCC_ClockConfig+0x1c0>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 0307 	and.w	r3, r3, #7
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d001      	beq.n	8009b08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e032      	b.n	8009b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0304 	and.w	r3, r3, #4
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d008      	beq.n	8009b26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b14:	4b19      	ldr	r3, [pc, #100]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	4916      	ldr	r1, [pc, #88]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009b22:	4313      	orrs	r3, r2
 8009b24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 0308 	and.w	r3, r3, #8
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d009      	beq.n	8009b46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009b32:	4b12      	ldr	r3, [pc, #72]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	00db      	lsls	r3, r3, #3
 8009b40:	490e      	ldr	r1, [pc, #56]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009b42:	4313      	orrs	r3, r2
 8009b44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009b46:	f000 f821 	bl	8009b8c <HAL_RCC_GetSysClockFreq>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	091b      	lsrs	r3, r3, #4
 8009b52:	f003 030f 	and.w	r3, r3, #15
 8009b56:	490a      	ldr	r1, [pc, #40]	@ (8009b80 <HAL_RCC_ClockConfig+0x1c8>)
 8009b58:	5ccb      	ldrb	r3, [r1, r3]
 8009b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b5e:	4a09      	ldr	r2, [pc, #36]	@ (8009b84 <HAL_RCC_ClockConfig+0x1cc>)
 8009b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009b62:	4b09      	ldr	r3, [pc, #36]	@ (8009b88 <HAL_RCC_ClockConfig+0x1d0>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fa ffcc 	bl	8004b04 <HAL_InitTick>

  return HAL_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	40022000 	.word	0x40022000
 8009b7c:	40021000 	.word	0x40021000
 8009b80:	08014484 	.word	0x08014484
 8009b84:	20000028 	.word	0x20000028
 8009b88:	20000038 	.word	0x20000038

08009b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b087      	sub	sp, #28
 8009b90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]
 8009b96:	2300      	movs	r3, #0
 8009b98:	60bb      	str	r3, [r7, #8]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	617b      	str	r3, [r7, #20]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8009c20 <HAL_RCC_GetSysClockFreq+0x94>)
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f003 030c 	and.w	r3, r3, #12
 8009bb2:	2b04      	cmp	r3, #4
 8009bb4:	d002      	beq.n	8009bbc <HAL_RCC_GetSysClockFreq+0x30>
 8009bb6:	2b08      	cmp	r3, #8
 8009bb8:	d003      	beq.n	8009bc2 <HAL_RCC_GetSysClockFreq+0x36>
 8009bba:	e027      	b.n	8009c0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009bbc:	4b19      	ldr	r3, [pc, #100]	@ (8009c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8009bbe:	613b      	str	r3, [r7, #16]
      break;
 8009bc0:	e027      	b.n	8009c12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	0c9b      	lsrs	r3, r3, #18
 8009bc6:	f003 030f 	and.w	r3, r3, #15
 8009bca:	4a17      	ldr	r2, [pc, #92]	@ (8009c28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009bcc:	5cd3      	ldrb	r3, [r2, r3]
 8009bce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d010      	beq.n	8009bfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009bda:	4b11      	ldr	r3, [pc, #68]	@ (8009c20 <HAL_RCC_GetSysClockFreq+0x94>)
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	0c5b      	lsrs	r3, r3, #17
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	4a11      	ldr	r2, [pc, #68]	@ (8009c2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8009be6:	5cd3      	ldrb	r3, [r2, r3]
 8009be8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a0d      	ldr	r2, [pc, #52]	@ (8009c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8009bee:	fb03 f202 	mul.w	r2, r3, r2
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf8:	617b      	str	r3, [r7, #20]
 8009bfa:	e004      	b.n	8009c06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8009c30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009c00:	fb02 f303 	mul.w	r3, r2, r3
 8009c04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	613b      	str	r3, [r7, #16]
      break;
 8009c0a:	e002      	b.n	8009c12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009c0c:	4b05      	ldr	r3, [pc, #20]	@ (8009c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8009c0e:	613b      	str	r3, [r7, #16]
      break;
 8009c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009c12:	693b      	ldr	r3, [r7, #16]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	371c      	adds	r7, #28
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bc80      	pop	{r7}
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	40021000 	.word	0x40021000
 8009c24:	007a1200 	.word	0x007a1200
 8009c28:	0801449c 	.word	0x0801449c
 8009c2c:	080144ac 	.word	0x080144ac
 8009c30:	003d0900 	.word	0x003d0900

08009c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c34:	b480      	push	{r7}
 8009c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c38:	4b02      	ldr	r3, [pc, #8]	@ (8009c44 <HAL_RCC_GetHCLKFreq+0x10>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bc80      	pop	{r7}
 8009c42:	4770      	bx	lr
 8009c44:	20000028 	.word	0x20000028

08009c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009c4c:	f7ff fff2 	bl	8009c34 <HAL_RCC_GetHCLKFreq>
 8009c50:	4602      	mov	r2, r0
 8009c52:	4b05      	ldr	r3, [pc, #20]	@ (8009c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	0a1b      	lsrs	r3, r3, #8
 8009c58:	f003 0307 	and.w	r3, r3, #7
 8009c5c:	4903      	ldr	r1, [pc, #12]	@ (8009c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c5e:	5ccb      	ldrb	r3, [r1, r3]
 8009c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	40021000 	.word	0x40021000
 8009c6c:	08014494 	.word	0x08014494

08009c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009c74:	f7ff ffde 	bl	8009c34 <HAL_RCC_GetHCLKFreq>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	4b05      	ldr	r3, [pc, #20]	@ (8009c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	0adb      	lsrs	r3, r3, #11
 8009c80:	f003 0307 	and.w	r3, r3, #7
 8009c84:	4903      	ldr	r1, [pc, #12]	@ (8009c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c86:	5ccb      	ldrb	r3, [r1, r3]
 8009c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	40021000 	.word	0x40021000
 8009c94:	08014494 	.word	0x08014494

08009c98 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	220f      	movs	r2, #15
 8009ca6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009ca8:	4b11      	ldr	r3, [pc, #68]	@ (8009cf0 <HAL_RCC_GetClockConfig+0x58>)
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f003 0203 	and.w	r2, r3, #3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8009cf0 <HAL_RCC_GetClockConfig+0x58>)
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf0 <HAL_RCC_GetClockConfig+0x58>)
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009ccc:	4b08      	ldr	r3, [pc, #32]	@ (8009cf0 <HAL_RCC_GetClockConfig+0x58>)
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	08db      	lsrs	r3, r3, #3
 8009cd2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009cda:	4b06      	ldr	r3, [pc, #24]	@ (8009cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 0207 	and.w	r2, r3, #7
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8009ce6:	bf00      	nop
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bc80      	pop	{r7}
 8009cee:	4770      	bx	lr
 8009cf0:	40021000 	.word	0x40021000
 8009cf4:	40022000 	.word	0x40022000

08009cf8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009d00:	4b0a      	ldr	r3, [pc, #40]	@ (8009d2c <RCC_Delay+0x34>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a0a      	ldr	r2, [pc, #40]	@ (8009d30 <RCC_Delay+0x38>)
 8009d06:	fba2 2303 	umull	r2, r3, r2, r3
 8009d0a:	0a5b      	lsrs	r3, r3, #9
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	fb02 f303 	mul.w	r3, r2, r3
 8009d12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009d14:	bf00      	nop
  }
  while (Delay --);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	1e5a      	subs	r2, r3, #1
 8009d1a:	60fa      	str	r2, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1f9      	bne.n	8009d14 <RCC_Delay+0x1c>
}
 8009d20:	bf00      	nop
 8009d22:	bf00      	nop
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bc80      	pop	{r7}
 8009d2a:	4770      	bx	lr
 8009d2c:	20000028 	.word	0x20000028
 8009d30:	10624dd3 	.word	0x10624dd3

08009d34 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d101      	bne.n	8009d46 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e022      	b.n	8009d8c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d105      	bne.n	8009d5e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7fa fe41 	bl	80049e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2203      	movs	r2, #3
 8009d62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f814 	bl	8009d94 <HAL_SD_InitCard>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e00a      	b.n	8009d8c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009d94:	b5b0      	push	{r4, r5, r7, lr}
 8009d96:	b08e      	sub	sp, #56	@ 0x38
 8009d98:	af04      	add	r7, sp, #16
 8009d9a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009da4:	2300      	movs	r3, #0
 8009da6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009da8:	2300      	movs	r3, #0
 8009daa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009dac:	2300      	movs	r3, #0
 8009dae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009db0:	2376      	movs	r3, #118	@ 0x76
 8009db2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681d      	ldr	r5, [r3, #0]
 8009db8:	466c      	mov	r4, sp
 8009dba:	f107 0314 	add.w	r3, r7, #20
 8009dbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009dc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009dc6:	f107 0308 	add.w	r3, r7, #8
 8009dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009dcc:	4628      	mov	r0, r5
 8009dce:	f002 fec3 	bl	800cb58 <SDIO_Init>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8009dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d001      	beq.n	8009de4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	e04f      	b.n	8009e84 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009de4:	4b29      	ldr	r3, [pc, #164]	@ (8009e8c <HAL_SD_InitCard+0xf8>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f002 fef8 	bl	800cbe4 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009df4:	4b25      	ldr	r3, [pc, #148]	@ (8009e8c <HAL_SD_InitCard+0xf8>)
 8009df6:	2201      	movs	r2, #1
 8009df8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009dfa:	2002      	movs	r0, #2
 8009dfc:	f7fc fdb4 	bl	8006968 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fe69 	bl	800aad8 <SD_PowerON>
 8009e06:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00b      	beq.n	8009e26 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e1a:	6a3b      	ldr	r3, [r7, #32]
 8009e1c:	431a      	orrs	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e02e      	b.n	8009e84 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fd87 	bl	800a93a <SD_InitCard>
 8009e2c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e2e:	6a3b      	ldr	r3, [r7, #32]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00b      	beq.n	8009e4c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e40:	6a3b      	ldr	r3, [r7, #32]
 8009e42:	431a      	orrs	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e01b      	b.n	8009e84 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009e54:	4618      	mov	r0, r3
 8009e56:	f002 ff51 	bl	800ccfc <SDMMC_CmdBlockLength>
 8009e5a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00f      	beq.n	8009e82 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a0a      	ldr	r2, [pc, #40]	@ (8009e90 <HAL_SD_InitCard+0xfc>)
 8009e68:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	431a      	orrs	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e000      	b.n	8009e84 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3728      	adds	r7, #40	@ 0x28
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8009e8c:	423000a0 	.word	0x423000a0
 8009e90:	004005ff 	.word	0x004005ff

08009e94 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b092      	sub	sp, #72	@ 0x48
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009ea2:	f7fc fd57 	bl	8006954 <HAL_GetTick>
 8009ea6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d107      	bne.n	8009ec6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e1bd      	b.n	800a242 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	f040 81b0 	bne.w	800a234 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009eda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	441a      	add	r2, r3
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d907      	bls.n	8009ef8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eec:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e1a4      	b.n	800a242 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2203      	movs	r2, #3
 8009efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2200      	movs	r2, #0
 8009f06:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d002      	beq.n	8009f16 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f12:	025b      	lsls	r3, r3, #9
 8009f14:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f16:	f04f 33ff 	mov.w	r3, #4294967295
 8009f1a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	025b      	lsls	r3, r3, #9
 8009f20:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009f22:	2390      	movs	r3, #144	@ 0x90
 8009f24:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009f26:	2302      	movs	r3, #2
 8009f28:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f107 0214 	add.w	r2, r7, #20
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f002 feb2 	bl	800cca6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d90a      	bls.n	8009f5e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009f54:	4618      	mov	r0, r3
 8009f56:	f002 ff15 	bl	800cd84 <SDMMC_CmdReadMultiBlock>
 8009f5a:	6478      	str	r0, [r7, #68]	@ 0x44
 8009f5c:	e009      	b.n	8009f72 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2201      	movs	r2, #1
 8009f62:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f002 fee8 	bl	800cd40 <SDMMC_CmdReadSingleBlock>
 8009f70:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d012      	beq.n	8009f9e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a7a      	ldr	r2, [pc, #488]	@ (800a168 <HAL_SD_ReadBlocks+0x2d4>)
 8009f7e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f86:	431a      	orrs	r2, r3
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e151      	b.n	800a242 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009fa2:	e061      	b.n	800a068 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009faa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d03c      	beq.n	800a02c <HAL_SD_ReadBlocks+0x198>
 8009fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d039      	beq.n	800a02c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009fb8:	2300      	movs	r3, #0
 8009fba:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fbc:	e033      	b.n	800a026 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f002 fdf2 	bl	800cbac <SDIO_ReadFIFO>
 8009fc8:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe0:	0a1b      	lsrs	r3, r3, #8
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fe6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fea:	3301      	adds	r3, #1
 8009fec:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff6:	0c1b      	lsrs	r3, r3, #16
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ffc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a000:	3301      	adds	r3, #1
 800a002:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a006:	3b01      	subs	r3, #1
 800a008:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a00a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a00c:	0e1b      	lsrs	r3, r3, #24
 800a00e:	b2da      	uxtb	r2, r3
 800a010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a012:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a016:	3301      	adds	r3, #1
 800a018:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a01a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a01c:	3b01      	subs	r3, #1
 800a01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800a020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a022:	3301      	adds	r3, #1
 800a024:	643b      	str	r3, [r7, #64]	@ 0x40
 800a026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a028:	2b07      	cmp	r3, #7
 800a02a:	d9c8      	bls.n	8009fbe <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a02c:	f7fc fc92 	bl	8006954 <HAL_GetTick>
 800a030:	4602      	mov	r2, r0
 800a032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a038:	429a      	cmp	r2, r3
 800a03a:	d902      	bls.n	800a042 <HAL_SD_ReadBlocks+0x1ae>
 800a03c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d112      	bne.n	800a068 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a48      	ldr	r2, [pc, #288]	@ (800a168 <HAL_SD_ReadBlocks+0x2d4>)
 800a048:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a04e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a064:	2303      	movs	r3, #3
 800a066:	e0ec      	b.n	800a242 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a06e:	f240 332a 	movw	r3, #810	@ 0x32a
 800a072:	4013      	ands	r3, r2
 800a074:	2b00      	cmp	r3, #0
 800a076:	d095      	beq.n	8009fa4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a07e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a082:	2b00      	cmp	r3, #0
 800a084:	d022      	beq.n	800a0cc <HAL_SD_ReadBlocks+0x238>
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d91f      	bls.n	800a0cc <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a090:	2b03      	cmp	r3, #3
 800a092:	d01b      	beq.n	800a0cc <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4618      	mov	r0, r3
 800a09a:	f002 fed9 	bl	800ce50 <SDMMC_CmdStopTransfer>
 800a09e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a0a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d012      	beq.n	800a0cc <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a2f      	ldr	r2, [pc, #188]	@ (800a168 <HAL_SD_ReadBlocks+0x2d4>)
 800a0ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0b4:	431a      	orrs	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e0ba      	b.n	800a242 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d2:	f003 0308 	and.w	r3, r3, #8
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d012      	beq.n	800a100 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a22      	ldr	r2, [pc, #136]	@ (800a168 <HAL_SD_ReadBlocks+0x2d4>)
 800a0e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e6:	f043 0208 	orr.w	r2, r3, #8
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e0a0      	b.n	800a242 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a106:	f003 0302 	and.w	r3, r3, #2
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d012      	beq.n	800a134 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a15      	ldr	r2, [pc, #84]	@ (800a168 <HAL_SD_ReadBlocks+0x2d4>)
 800a114:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a11a:	f043 0202 	orr.w	r2, r3, #2
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	e086      	b.n	800a242 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a13a:	f003 0320 	and.w	r3, r3, #32
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d063      	beq.n	800a20a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a08      	ldr	r2, [pc, #32]	@ (800a168 <HAL_SD_ReadBlocks+0x2d4>)
 800a148:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a14e:	f043 0220 	orr.w	r2, r3, #32
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e06c      	b.n	800a242 <HAL_SD_ReadBlocks+0x3ae>
 800a168:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4618      	mov	r0, r3
 800a172:	f002 fd1b 	bl	800cbac <SDIO_ReadFIFO>
 800a176:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800a178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a17e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a182:	3301      	adds	r3, #1
 800a184:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a188:	3b01      	subs	r3, #1
 800a18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a18e:	0a1b      	lsrs	r3, r3, #8
 800a190:	b2da      	uxtb	r2, r3
 800a192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a194:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a198:	3301      	adds	r3, #1
 800a19a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a19c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a4:	0c1b      	lsrs	r3, r3, #16
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1aa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a1b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ba:	0e1b      	lsrs	r3, r3, #24
 800a1bc:	b2da      	uxtb	r2, r3
 800a1be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1c0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a1c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a1ce:	f7fc fbc1 	bl	8006954 <HAL_GetTick>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d902      	bls.n	800a1e4 <HAL_SD_ReadBlocks+0x350>
 800a1de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d112      	bne.n	800a20a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a18      	ldr	r2, [pc, #96]	@ (800a24c <HAL_SD_ReadBlocks+0x3b8>)
 800a1ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e01b      	b.n	800a242 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <HAL_SD_ReadBlocks+0x38a>
 800a218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1a6      	bne.n	800a16c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a226:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	e006      	b.n	800a242 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a238:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
  }
}
 800a242:	4618      	mov	r0, r3
 800a244:	3748      	adds	r7, #72	@ 0x48
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	004005ff 	.word	0x004005ff

0800a250 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b092      	sub	sp, #72	@ 0x48
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a25e:	f7fc fb79 	bl	8006954 <HAL_GetTick>
 800a262:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d107      	bne.n	800a282 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a276:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e166      	b.n	800a550 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	f040 8159 	bne.w	800a542 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a296:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	441a      	add	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d907      	bls.n	800a2b4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e14d      	b.n	800a550 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2203      	movs	r2, #3
 800a2b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d002      	beq.n	800a2d2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ce:	025b      	lsls	r3, r3, #9
 800a2d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	025b      	lsls	r3, r3, #9
 800a2dc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a2de:	2390      	movs	r3, #144	@ 0x90
 800a2e0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f107 0218 	add.w	r2, r7, #24
 800a2f6:	4611      	mov	r1, r2
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f002 fcd4 	bl	800cca6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d90a      	bls.n	800a31a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2220      	movs	r2, #32
 800a308:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a310:	4618      	mov	r0, r3
 800a312:	f002 fd7b 	bl	800ce0c <SDMMC_CmdWriteMultiBlock>
 800a316:	6478      	str	r0, [r7, #68]	@ 0x44
 800a318:	e009      	b.n	800a32e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2210      	movs	r2, #16
 800a31e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a326:	4618      	mov	r0, r3
 800a328:	f002 fd4e 	bl	800cdc8 <SDMMC_CmdWriteSingleBlock>
 800a32c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a32e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a330:	2b00      	cmp	r3, #0
 800a332:	d012      	beq.n	800a35a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a87      	ldr	r2, [pc, #540]	@ (800a558 <HAL_SD_WriteBlocks+0x308>)
 800a33a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a342:	431a      	orrs	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	e0fa      	b.n	800a550 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a35e:	e065      	b.n	800a42c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d040      	beq.n	800a3f0 <HAL_SD_WriteBlocks+0x1a0>
 800a36e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a370:	2b00      	cmp	r3, #0
 800a372:	d03d      	beq.n	800a3f0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a374:	2300      	movs	r3, #0
 800a376:	643b      	str	r3, [r7, #64]	@ 0x40
 800a378:	e037      	b.n	800a3ea <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800a37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a382:	3301      	adds	r3, #1
 800a384:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a388:	3b01      	subs	r3, #1
 800a38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	021a      	lsls	r2, r3, #8
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	4313      	orrs	r3, r2
 800a396:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a39a:	3301      	adds	r3, #1
 800a39c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a39e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a3a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	041a      	lsls	r2, r3, #16
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a3b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a3bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	061a      	lsls	r2, r3, #24
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a3c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f107 0214 	add.w	r2, r7, #20
 800a3dc:	4611      	mov	r1, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f002 fbf0 	bl	800cbc4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a3e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3ec:	2b07      	cmp	r3, #7
 800a3ee:	d9c4      	bls.n	800a37a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a3f0:	f7fc fab0 	bl	8006954 <HAL_GetTick>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d902      	bls.n	800a406 <HAL_SD_WriteBlocks+0x1b6>
 800a400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a402:	2b00      	cmp	r3, #0
 800a404:	d112      	bne.n	800a42c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a53      	ldr	r2, [pc, #332]	@ (800a558 <HAL_SD_WriteBlocks+0x308>)
 800a40c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a414:	431a      	orrs	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2200      	movs	r2, #0
 800a426:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a428:	2303      	movs	r3, #3
 800a42a:	e091      	b.n	800a550 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a432:	f240 331a 	movw	r3, #794	@ 0x31a
 800a436:	4013      	ands	r3, r2
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d091      	beq.n	800a360 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a446:	2b00      	cmp	r3, #0
 800a448:	d022      	beq.n	800a490 <HAL_SD_WriteBlocks+0x240>
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d91f      	bls.n	800a490 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a454:	2b03      	cmp	r3, #3
 800a456:	d01b      	beq.n	800a490 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f002 fcf7 	bl	800ce50 <SDMMC_CmdStopTransfer>
 800a462:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a466:	2b00      	cmp	r3, #0
 800a468:	d012      	beq.n	800a490 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a3a      	ldr	r2, [pc, #232]	@ (800a558 <HAL_SD_WriteBlocks+0x308>)
 800a470:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a478:	431a      	orrs	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2201      	movs	r2, #1
 800a482:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e05f      	b.n	800a550 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a496:	f003 0308 	and.w	r3, r3, #8
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d012      	beq.n	800a4c4 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a2d      	ldr	r2, [pc, #180]	@ (800a558 <HAL_SD_WriteBlocks+0x308>)
 800a4a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4aa:	f043 0208 	orr.w	r2, r3, #8
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e045      	b.n	800a550 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ca:	f003 0302 	and.w	r3, r3, #2
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d012      	beq.n	800a4f8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a20      	ldr	r2, [pc, #128]	@ (800a558 <HAL_SD_WriteBlocks+0x308>)
 800a4d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4de:	f043 0202 	orr.w	r2, r3, #2
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e02b      	b.n	800a550 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4fe:	f003 0310 	and.w	r3, r3, #16
 800a502:	2b00      	cmp	r3, #0
 800a504:	d012      	beq.n	800a52c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a13      	ldr	r2, [pc, #76]	@ (800a558 <HAL_SD_WriteBlocks+0x308>)
 800a50c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a512:	f043 0210 	orr.w	r2, r3, #16
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2201      	movs	r2, #1
 800a51e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	e011      	b.n	800a550 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a534:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2201      	movs	r2, #1
 800a53a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	e006      	b.n	800a550 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a546:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
  }
}
 800a550:	4618      	mov	r0, r3
 800a552:	3748      	adds	r7, #72	@ 0x48
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	004005ff 	.word	0x004005ff

0800a55c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a56a:	0f9b      	lsrs	r3, r3, #30
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a576:	0e9b      	lsrs	r3, r3, #26
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	f003 030f 	and.w	r3, r3, #15
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a588:	0e1b      	lsrs	r3, r3, #24
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	f003 0303 	and.w	r3, r3, #3
 800a590:	b2da      	uxtb	r2, r3
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a59a:	0c1b      	lsrs	r3, r3, #16
 800a59c:	b2da      	uxtb	r2, r3
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5a6:	0a1b      	lsrs	r3, r3, #8
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5b2:	b2da      	uxtb	r2, r3
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5bc:	0d1b      	lsrs	r3, r3, #20
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5c8:	0c1b      	lsrs	r3, r3, #16
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	f003 030f 	and.w	r3, r3, #15
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5da:	0bdb      	lsrs	r3, r3, #15
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	f003 0301 	and.w	r3, r3, #1
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5ec:	0b9b      	lsrs	r3, r3, #14
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	f003 0301 	and.w	r3, r3, #1
 800a5f4:	b2da      	uxtb	r2, r3
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5fe:	0b5b      	lsrs	r3, r3, #13
 800a600:	b2db      	uxtb	r3, r3
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	b2da      	uxtb	r2, r3
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a610:	0b1b      	lsrs	r3, r3, #12
 800a612:	b2db      	uxtb	r3, r3
 800a614:	f003 0301 	and.w	r3, r3, #1
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	2200      	movs	r2, #0
 800a622:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d163      	bne.n	800a6f4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a630:	009a      	lsls	r2, r3, #2
 800a632:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a636:	4013      	ands	r3, r2
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800a63c:	0f92      	lsrs	r2, r2, #30
 800a63e:	431a      	orrs	r2, r3
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a648:	0edb      	lsrs	r3, r3, #27
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	f003 0307 	and.w	r3, r3, #7
 800a650:	b2da      	uxtb	r2, r3
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a65a:	0e1b      	lsrs	r3, r3, #24
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	f003 0307 	and.w	r3, r3, #7
 800a662:	b2da      	uxtb	r2, r3
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a66c:	0d5b      	lsrs	r3, r3, #21
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	f003 0307 	and.w	r3, r3, #7
 800a674:	b2da      	uxtb	r2, r3
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a67e:	0c9b      	lsrs	r3, r3, #18
 800a680:	b2db      	uxtb	r3, r3
 800a682:	f003 0307 	and.w	r3, r3, #7
 800a686:	b2da      	uxtb	r2, r3
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a690:	0bdb      	lsrs	r3, r3, #15
 800a692:	b2db      	uxtb	r3, r3
 800a694:	f003 0307 	and.w	r3, r3, #7
 800a698:	b2da      	uxtb	r2, r3
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	1c5a      	adds	r2, r3, #1
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	7e1b      	ldrb	r3, [r3, #24]
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	f003 0307 	and.w	r3, r3, #7
 800a6b2:	3302      	adds	r3, #2
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a6be:	fb03 f202 	mul.w	r2, r3, r2
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	7a1b      	ldrb	r3, [r3, #8]
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	f003 030f 	and.w	r3, r3, #15
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	409a      	lsls	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800a6e0:	0a52      	lsrs	r2, r2, #9
 800a6e2:	fb03 f202 	mul.w	r2, r3, r2
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6f0:	661a      	str	r2, [r3, #96]	@ 0x60
 800a6f2:	e031      	b.n	800a758 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d11d      	bne.n	800a738 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a700:	041b      	lsls	r3, r3, #16
 800a702:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a70a:	0c1b      	lsrs	r3, r3, #16
 800a70c:	431a      	orrs	r2, r3
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	3301      	adds	r3, #1
 800a718:	029a      	lsls	r2, r3, #10
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a72c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	661a      	str	r2, [r3, #96]	@ 0x60
 800a736:	e00f      	b.n	800a758 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a58      	ldr	r2, [pc, #352]	@ (800a8a0 <HAL_SD_GetCardCSD+0x344>)
 800a73e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a744:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a754:	2301      	movs	r3, #1
 800a756:	e09d      	b.n	800a894 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a75c:	0b9b      	lsrs	r3, r3, #14
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	f003 0301 	and.w	r3, r3, #1
 800a764:	b2da      	uxtb	r2, r3
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a76e:	09db      	lsrs	r3, r3, #7
 800a770:	b2db      	uxtb	r3, r3
 800a772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a776:	b2da      	uxtb	r2, r3
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a780:	b2db      	uxtb	r3, r3
 800a782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a786:	b2da      	uxtb	r2, r3
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a790:	0fdb      	lsrs	r3, r3, #31
 800a792:	b2da      	uxtb	r2, r3
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a79c:	0f5b      	lsrs	r3, r3, #29
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	f003 0303 	and.w	r3, r3, #3
 800a7a4:	b2da      	uxtb	r2, r3
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7ae:	0e9b      	lsrs	r3, r3, #26
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	f003 0307 	and.w	r3, r3, #7
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7c0:	0d9b      	lsrs	r3, r3, #22
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	f003 030f 	and.w	r3, r3, #15
 800a7c8:	b2da      	uxtb	r2, r3
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7d2:	0d5b      	lsrs	r3, r3, #21
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	f003 0301 	and.w	r3, r3, #1
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7ee:	0c1b      	lsrs	r3, r3, #16
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	b2da      	uxtb	r2, r3
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a802:	0bdb      	lsrs	r3, r3, #15
 800a804:	b2db      	uxtb	r3, r3
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a816:	0b9b      	lsrs	r3, r3, #14
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	f003 0301 	and.w	r3, r3, #1
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a82a:	0b5b      	lsrs	r3, r3, #13
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	f003 0301 	and.w	r3, r3, #1
 800a832:	b2da      	uxtb	r2, r3
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a83e:	0b1b      	lsrs	r3, r3, #12
 800a840:	b2db      	uxtb	r3, r3
 800a842:	f003 0301 	and.w	r3, r3, #1
 800a846:	b2da      	uxtb	r2, r3
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a852:	0a9b      	lsrs	r3, r3, #10
 800a854:	b2db      	uxtb	r3, r3
 800a856:	f003 0303 	and.w	r3, r3, #3
 800a85a:	b2da      	uxtb	r2, r3
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a866:	0a1b      	lsrs	r3, r3, #8
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	f003 0303 	and.w	r3, r3, #3
 800a86e:	b2da      	uxtb	r2, r3
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a87a:	085b      	lsrs	r3, r3, #1
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a882:	b2da      	uxtb	r2, r3
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	bc80      	pop	{r7}
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	004005ff 	.word	0x004005ff

0800a8a4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bc80      	pop	{r7}
 800a8f8:	4770      	bx	lr

0800a8fa <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b086      	sub	sp, #24
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a902:	2300      	movs	r3, #0
 800a904:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a906:	f107 030c 	add.w	r3, r7, #12
 800a90a:	4619      	mov	r1, r3
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 f971 	bl	800abf4 <SD_SendStatus>
 800a912:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d005      	beq.n	800a926 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	431a      	orrs	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	0a5b      	lsrs	r3, r3, #9
 800a92a:	f003 030f 	and.w	r3, r3, #15
 800a92e:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a930:	693b      	ldr	r3, [r7, #16]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a93a:	b5b0      	push	{r4, r5, r7, lr}
 800a93c:	b094      	sub	sp, #80	@ 0x50
 800a93e:	af04      	add	r7, sp, #16
 800a940:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a942:	2301      	movs	r3, #1
 800a944:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f002 f957 	bl	800cbfe <SDIO_GetPowerState>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d102      	bne.n	800a95c <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a956:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a95a:	e0b8      	b.n	800aace <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a960:	2b03      	cmp	r3, #3
 800a962:	d02f      	beq.n	800a9c4 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4618      	mov	r0, r3
 800a96a:	f002 fb38 	bl	800cfde <SDMMC_CmdSendCID>
 800a96e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a972:	2b00      	cmp	r3, #0
 800a974:	d001      	beq.n	800a97a <SD_InitCard+0x40>
    {
      return errorstate;
 800a976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a978:	e0a9      	b.n	800aace <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2100      	movs	r1, #0
 800a980:	4618      	mov	r0, r3
 800a982:	f002 f97e 	bl	800cc82 <SDIO_GetResponse>
 800a986:	4602      	mov	r2, r0
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2104      	movs	r1, #4
 800a992:	4618      	mov	r0, r3
 800a994:	f002 f975 	bl	800cc82 <SDIO_GetResponse>
 800a998:	4602      	mov	r2, r0
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2108      	movs	r1, #8
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f002 f96c 	bl	800cc82 <SDIO_GetResponse>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	210c      	movs	r1, #12
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f002 f963 	bl	800cc82 <SDIO_GetResponse>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9c8:	2b03      	cmp	r3, #3
 800a9ca:	d00d      	beq.n	800a9e8 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f107 020e 	add.w	r2, r7, #14
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f002 fb3e 	bl	800d058 <SDMMC_CmdSetRelAdd>
 800a9dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <SD_InitCard+0xae>
    {
      return errorstate;
 800a9e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e6:	e072      	b.n	800aace <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ec:	2b03      	cmp	r3, #3
 800a9ee:	d036      	beq.n	800aa5e <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a9f0:	89fb      	ldrh	r3, [r7, #14]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa00:	041b      	lsls	r3, r3, #16
 800aa02:	4619      	mov	r1, r3
 800aa04:	4610      	mov	r0, r2
 800aa06:	f002 fb08 	bl	800d01a <SDMMC_CmdSendCSD>
 800aa0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <SD_InitCard+0xdc>
    {
      return errorstate;
 800aa12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa14:	e05b      	b.n	800aace <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f002 f930 	bl	800cc82 <SDIO_GetResponse>
 800aa22:	4602      	mov	r2, r0
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2104      	movs	r1, #4
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f002 f927 	bl	800cc82 <SDIO_GetResponse>
 800aa34:	4602      	mov	r2, r0
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2108      	movs	r1, #8
 800aa40:	4618      	mov	r0, r3
 800aa42:	f002 f91e 	bl	800cc82 <SDIO_GetResponse>
 800aa46:	4602      	mov	r2, r0
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	210c      	movs	r1, #12
 800aa52:	4618      	mov	r0, r3
 800aa54:	f002 f915 	bl	800cc82 <SDIO_GetResponse>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2104      	movs	r1, #4
 800aa64:	4618      	mov	r0, r3
 800aa66:	f002 f90c 	bl	800cc82 <SDIO_GetResponse>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	0d1a      	lsrs	r2, r3, #20
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aa72:	f107 0310 	add.w	r3, r7, #16
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7ff fd6f 	bl	800a55c <HAL_SD_GetCardCSD>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d002      	beq.n	800aa8a <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa84:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800aa88:	e021      	b.n	800aace <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6819      	ldr	r1, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa92:	041b      	lsls	r3, r3, #16
 800aa94:	2200      	movs	r2, #0
 800aa96:	461c      	mov	r4, r3
 800aa98:	4615      	mov	r5, r2
 800aa9a:	4622      	mov	r2, r4
 800aa9c:	462b      	mov	r3, r5
 800aa9e:	4608      	mov	r0, r1
 800aaa0:	f002 f9f8 	bl	800ce94 <SDMMC_CmdSelDesel>
 800aaa4:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800aaa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d001      	beq.n	800aab0 <SD_InitCard+0x176>
  {
    return errorstate;
 800aaac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaae:	e00e      	b.n	800aace <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681d      	ldr	r5, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	466c      	mov	r4, sp
 800aab8:	f103 0210 	add.w	r2, r3, #16
 800aabc:	ca07      	ldmia	r2, {r0, r1, r2}
 800aabe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aac2:	3304      	adds	r3, #4
 800aac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aac6:	4628      	mov	r0, r5
 800aac8:	f002 f846 	bl	800cb58 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3740      	adds	r7, #64	@ 0x40
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800aad8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aae0:	2300      	movs	r3, #0
 800aae2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aae4:	2300      	movs	r3, #0
 800aae6:	617b      	str	r3, [r7, #20]
 800aae8:	2300      	movs	r3, #0
 800aaea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f002 f9f2 	bl	800ceda <SDMMC_CmdGoIdleState>
 800aaf6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <SD_PowerON+0x2a>
  {
    return errorstate;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	e072      	b.n	800abe8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f002 fa05 	bl	800cf16 <SDMMC_CmdOperCond>
 800ab0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00d      	beq.n	800ab30 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f002 f9db 	bl	800ceda <SDMMC_CmdGoIdleState>
 800ab24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d004      	beq.n	800ab36 <SD_PowerON+0x5e>
    {
      return errorstate;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	e05b      	b.n	800abe8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d137      	bne.n	800abae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2100      	movs	r1, #0
 800ab44:	4618      	mov	r0, r3
 800ab46:	f002 fa05 	bl	800cf54 <SDMMC_CmdAppCommand>
 800ab4a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d02d      	beq.n	800abae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab52:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ab56:	e047      	b.n	800abe8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f002 f9f8 	bl	800cf54 <SDMMC_CmdAppCommand>
 800ab64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d001      	beq.n	800ab70 <SD_PowerON+0x98>
    {
      return errorstate;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	e03b      	b.n	800abe8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	491e      	ldr	r1, [pc, #120]	@ (800abf0 <SD_PowerON+0x118>)
 800ab76:	4618      	mov	r0, r3
 800ab78:	f002 fa0e 	bl	800cf98 <SDMMC_CmdAppOperCommand>
 800ab7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d002      	beq.n	800ab8a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab84:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ab88:	e02e      	b.n	800abe8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2100      	movs	r1, #0
 800ab90:	4618      	mov	r0, r3
 800ab92:	f002 f876 	bl	800cc82 <SDIO_GetResponse>
 800ab96:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	0fdb      	lsrs	r3, r3, #31
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d101      	bne.n	800aba4 <SD_PowerON+0xcc>
 800aba0:	2301      	movs	r3, #1
 800aba2:	e000      	b.n	800aba6 <SD_PowerON+0xce>
 800aba4:	2300      	movs	r3, #0
 800aba6:	613b      	str	r3, [r7, #16]

    count++;
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	3301      	adds	r3, #1
 800abac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d802      	bhi.n	800abbe <SD_PowerON+0xe6>
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d0cc      	beq.n	800ab58 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d902      	bls.n	800abce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800abc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800abcc:	e00c      	b.n	800abe8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d003      	beq.n	800abe0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	645a      	str	r2, [r3, #68]	@ 0x44
 800abde:	e002      	b.n	800abe6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	c1100000 	.word	0xc1100000

0800abf4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d102      	bne.n	800ac0a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ac04:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ac08:	e018      	b.n	800ac3c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac12:	041b      	lsls	r3, r3, #16
 800ac14:	4619      	mov	r1, r3
 800ac16:	4610      	mov	r0, r2
 800ac18:	f002 fa3f 	bl	800d09a <SDMMC_CmdSendStatus>
 800ac1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	e009      	b.n	800ac3c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f002 f827 	bl	800cc82 <SDIO_GetResponse>
 800ac34:	4602      	mov	r2, r0
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	e041      	b.n	800acda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d106      	bne.n	800ac70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f7fa f924 	bl	8004eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3304      	adds	r3, #4
 800ac80:	4619      	mov	r1, r3
 800ac82:	4610      	mov	r0, r2
 800ac84:	f000 fc56 	bl	800b534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3708      	adds	r7, #8
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
	...

0800ace4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d001      	beq.n	800acfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e044      	b.n	800ad86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2202      	movs	r2, #2
 800ad00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68da      	ldr	r2, [r3, #12]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f042 0201 	orr.w	r2, r2, #1
 800ad12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a1d      	ldr	r2, [pc, #116]	@ (800ad90 <HAL_TIM_Base_Start_IT+0xac>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d018      	beq.n	800ad50 <HAL_TIM_Base_Start_IT+0x6c>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a1c      	ldr	r2, [pc, #112]	@ (800ad94 <HAL_TIM_Base_Start_IT+0xb0>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d013      	beq.n	800ad50 <HAL_TIM_Base_Start_IT+0x6c>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad30:	d00e      	beq.n	800ad50 <HAL_TIM_Base_Start_IT+0x6c>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a18      	ldr	r2, [pc, #96]	@ (800ad98 <HAL_TIM_Base_Start_IT+0xb4>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d009      	beq.n	800ad50 <HAL_TIM_Base_Start_IT+0x6c>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a16      	ldr	r2, [pc, #88]	@ (800ad9c <HAL_TIM_Base_Start_IT+0xb8>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d004      	beq.n	800ad50 <HAL_TIM_Base_Start_IT+0x6c>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a15      	ldr	r2, [pc, #84]	@ (800ada0 <HAL_TIM_Base_Start_IT+0xbc>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d111      	bne.n	800ad74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	f003 0307 	and.w	r3, r3, #7
 800ad5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2b06      	cmp	r3, #6
 800ad60:	d010      	beq.n	800ad84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f042 0201 	orr.w	r2, r2, #1
 800ad70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad72:	e007      	b.n	800ad84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f042 0201 	orr.w	r2, r2, #1
 800ad82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3714      	adds	r7, #20
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bc80      	pop	{r7}
 800ad8e:	4770      	bx	lr
 800ad90:	40012c00 	.word	0x40012c00
 800ad94:	40013400 	.word	0x40013400
 800ad98:	40000400 	.word	0x40000400
 800ad9c:	40000800 	.word	0x40000800
 800ada0:	40000c00 	.word	0x40000c00

0800ada4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d101      	bne.n	800adb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e041      	b.n	800ae3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d106      	bne.n	800add0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f839 	bl	800ae42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2202      	movs	r2, #2
 800add4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	3304      	adds	r3, #4
 800ade0:	4619      	mov	r1, r3
 800ade2:	4610      	mov	r0, r2
 800ade4:	f000 fba6 	bl	800b534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2201      	movs	r2, #1
 800adfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ae42:	b480      	push	{r7}
 800ae44:	b083      	sub	sp, #12
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ae4a:	bf00      	nop
 800ae4c:	370c      	adds	r7, #12
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bc80      	pop	{r7}
 800ae52:	4770      	bx	lr

0800ae54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d109      	bne.n	800ae78 <HAL_TIM_PWM_Start+0x24>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	bf14      	ite	ne
 800ae70:	2301      	movne	r3, #1
 800ae72:	2300      	moveq	r3, #0
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	e022      	b.n	800aebe <HAL_TIM_PWM_Start+0x6a>
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	2b04      	cmp	r3, #4
 800ae7c:	d109      	bne.n	800ae92 <HAL_TIM_PWM_Start+0x3e>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	bf14      	ite	ne
 800ae8a:	2301      	movne	r3, #1
 800ae8c:	2300      	moveq	r3, #0
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	e015      	b.n	800aebe <HAL_TIM_PWM_Start+0x6a>
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	2b08      	cmp	r3, #8
 800ae96:	d109      	bne.n	800aeac <HAL_TIM_PWM_Start+0x58>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	bf14      	ite	ne
 800aea4:	2301      	movne	r3, #1
 800aea6:	2300      	moveq	r3, #0
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	e008      	b.n	800aebe <HAL_TIM_PWM_Start+0x6a>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	bf14      	ite	ne
 800aeb8:	2301      	movne	r3, #1
 800aeba:	2300      	moveq	r3, #0
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d001      	beq.n	800aec6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	e072      	b.n	800afac <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d104      	bne.n	800aed6 <HAL_TIM_PWM_Start+0x82>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2202      	movs	r2, #2
 800aed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aed4:	e013      	b.n	800aefe <HAL_TIM_PWM_Start+0xaa>
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b04      	cmp	r3, #4
 800aeda:	d104      	bne.n	800aee6 <HAL_TIM_PWM_Start+0x92>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2202      	movs	r2, #2
 800aee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aee4:	e00b      	b.n	800aefe <HAL_TIM_PWM_Start+0xaa>
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b08      	cmp	r3, #8
 800aeea:	d104      	bne.n	800aef6 <HAL_TIM_PWM_Start+0xa2>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2202      	movs	r2, #2
 800aef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aef4:	e003      	b.n	800aefe <HAL_TIM_PWM_Start+0xaa>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2202      	movs	r2, #2
 800aefa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2201      	movs	r2, #1
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	4618      	mov	r0, r3
 800af08:	f000 fdd0 	bl	800baac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a28      	ldr	r2, [pc, #160]	@ (800afb4 <HAL_TIM_PWM_Start+0x160>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d004      	beq.n	800af20 <HAL_TIM_PWM_Start+0xcc>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a27      	ldr	r2, [pc, #156]	@ (800afb8 <HAL_TIM_PWM_Start+0x164>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d101      	bne.n	800af24 <HAL_TIM_PWM_Start+0xd0>
 800af20:	2301      	movs	r3, #1
 800af22:	e000      	b.n	800af26 <HAL_TIM_PWM_Start+0xd2>
 800af24:	2300      	movs	r3, #0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d007      	beq.n	800af3a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800af38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a1d      	ldr	r2, [pc, #116]	@ (800afb4 <HAL_TIM_PWM_Start+0x160>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d018      	beq.n	800af76 <HAL_TIM_PWM_Start+0x122>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a1b      	ldr	r2, [pc, #108]	@ (800afb8 <HAL_TIM_PWM_Start+0x164>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d013      	beq.n	800af76 <HAL_TIM_PWM_Start+0x122>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af56:	d00e      	beq.n	800af76 <HAL_TIM_PWM_Start+0x122>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a17      	ldr	r2, [pc, #92]	@ (800afbc <HAL_TIM_PWM_Start+0x168>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d009      	beq.n	800af76 <HAL_TIM_PWM_Start+0x122>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a16      	ldr	r2, [pc, #88]	@ (800afc0 <HAL_TIM_PWM_Start+0x16c>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d004      	beq.n	800af76 <HAL_TIM_PWM_Start+0x122>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a14      	ldr	r2, [pc, #80]	@ (800afc4 <HAL_TIM_PWM_Start+0x170>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d111      	bne.n	800af9a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	f003 0307 	and.w	r3, r3, #7
 800af80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2b06      	cmp	r3, #6
 800af86:	d010      	beq.n	800afaa <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f042 0201 	orr.w	r2, r2, #1
 800af96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af98:	e007      	b.n	800afaa <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f042 0201 	orr.w	r2, r2, #1
 800afa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	40012c00 	.word	0x40012c00
 800afb8:	40013400 	.word	0x40013400
 800afbc:	40000400 	.word	0x40000400
 800afc0:	40000800 	.word	0x40000800
 800afc4:	40000c00 	.word	0x40000c00

0800afc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	f003 0302 	and.w	r3, r3, #2
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d122      	bne.n	800b024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	f003 0302 	and.w	r3, r3, #2
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d11b      	bne.n	800b024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f06f 0202 	mvn.w	r2, #2
 800aff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2201      	movs	r2, #1
 800affa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	f003 0303 	and.w	r3, r3, #3
 800b006:	2b00      	cmp	r3, #0
 800b008:	d003      	beq.n	800b012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fa76 	bl	800b4fc <HAL_TIM_IC_CaptureCallback>
 800b010:	e005      	b.n	800b01e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 fa69 	bl	800b4ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fa78 	bl	800b50e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	f003 0304 	and.w	r3, r3, #4
 800b02e:	2b04      	cmp	r3, #4
 800b030:	d122      	bne.n	800b078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	f003 0304 	and.w	r3, r3, #4
 800b03c:	2b04      	cmp	r3, #4
 800b03e:	d11b      	bne.n	800b078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f06f 0204 	mvn.w	r2, #4
 800b048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2202      	movs	r2, #2
 800b04e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d003      	beq.n	800b066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 fa4c 	bl	800b4fc <HAL_TIM_IC_CaptureCallback>
 800b064:	e005      	b.n	800b072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fa3f 	bl	800b4ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 fa4e 	bl	800b50e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	f003 0308 	and.w	r3, r3, #8
 800b082:	2b08      	cmp	r3, #8
 800b084:	d122      	bne.n	800b0cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	f003 0308 	and.w	r3, r3, #8
 800b090:	2b08      	cmp	r3, #8
 800b092:	d11b      	bne.n	800b0cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f06f 0208 	mvn.w	r2, #8
 800b09c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2204      	movs	r2, #4
 800b0a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	69db      	ldr	r3, [r3, #28]
 800b0aa:	f003 0303 	and.w	r3, r3, #3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fa22 	bl	800b4fc <HAL_TIM_IC_CaptureCallback>
 800b0b8:	e005      	b.n	800b0c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fa15 	bl	800b4ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fa24 	bl	800b50e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	f003 0310 	and.w	r3, r3, #16
 800b0d6:	2b10      	cmp	r3, #16
 800b0d8:	d122      	bne.n	800b120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	f003 0310 	and.w	r3, r3, #16
 800b0e4:	2b10      	cmp	r3, #16
 800b0e6:	d11b      	bne.n	800b120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f06f 0210 	mvn.w	r2, #16
 800b0f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2208      	movs	r2, #8
 800b0f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	69db      	ldr	r3, [r3, #28]
 800b0fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b102:	2b00      	cmp	r3, #0
 800b104:	d003      	beq.n	800b10e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f9f8 	bl	800b4fc <HAL_TIM_IC_CaptureCallback>
 800b10c:	e005      	b.n	800b11a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f9eb 	bl	800b4ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 f9fa 	bl	800b50e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	f003 0301 	and.w	r3, r3, #1
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d10e      	bne.n	800b14c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	f003 0301 	and.w	r3, r3, #1
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d107      	bne.n	800b14c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f06f 0201 	mvn.w	r2, #1
 800b144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f7f9 fc02 	bl	8004950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b156:	2b80      	cmp	r3, #128	@ 0x80
 800b158:	d10e      	bne.n	800b178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b164:	2b80      	cmp	r3, #128	@ 0x80
 800b166:	d107      	bne.n	800b178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fd33 	bl	800bbde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b182:	2b40      	cmp	r3, #64	@ 0x40
 800b184:	d10e      	bne.n	800b1a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b190:	2b40      	cmp	r3, #64	@ 0x40
 800b192:	d107      	bne.n	800b1a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b19c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 f9be 	bl	800b520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	f003 0320 	and.w	r3, r3, #32
 800b1ae:	2b20      	cmp	r3, #32
 800b1b0:	d10e      	bne.n	800b1d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	f003 0320 	and.w	r3, r3, #32
 800b1bc:	2b20      	cmp	r3, #32
 800b1be:	d107      	bne.n	800b1d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f06f 0220 	mvn.w	r2, #32
 800b1c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 fcfe 	bl	800bbcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b1d0:	bf00      	nop
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d101      	bne.n	800b1f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b1f2:	2302      	movs	r3, #2
 800b1f4:	e0ae      	b.n	800b354 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b0c      	cmp	r3, #12
 800b202:	f200 809f 	bhi.w	800b344 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b206:	a201      	add	r2, pc, #4	@ (adr r2, 800b20c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20c:	0800b241 	.word	0x0800b241
 800b210:	0800b345 	.word	0x0800b345
 800b214:	0800b345 	.word	0x0800b345
 800b218:	0800b345 	.word	0x0800b345
 800b21c:	0800b281 	.word	0x0800b281
 800b220:	0800b345 	.word	0x0800b345
 800b224:	0800b345 	.word	0x0800b345
 800b228:	0800b345 	.word	0x0800b345
 800b22c:	0800b2c3 	.word	0x0800b2c3
 800b230:	0800b345 	.word	0x0800b345
 800b234:	0800b345 	.word	0x0800b345
 800b238:	0800b345 	.word	0x0800b345
 800b23c:	0800b303 	.word	0x0800b303
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	68b9      	ldr	r1, [r7, #8]
 800b246:	4618      	mov	r0, r3
 800b248:	f000 f9ee 	bl	800b628 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	699a      	ldr	r2, [r3, #24]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f042 0208 	orr.w	r2, r2, #8
 800b25a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	699a      	ldr	r2, [r3, #24]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f022 0204 	bic.w	r2, r2, #4
 800b26a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	6999      	ldr	r1, [r3, #24]
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	691a      	ldr	r2, [r3, #16]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	430a      	orrs	r2, r1
 800b27c:	619a      	str	r2, [r3, #24]
      break;
 800b27e:	e064      	b.n	800b34a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	68b9      	ldr	r1, [r7, #8]
 800b286:	4618      	mov	r0, r3
 800b288:	f000 fa3e 	bl	800b708 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	699a      	ldr	r2, [r3, #24]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b29a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	699a      	ldr	r2, [r3, #24]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b2aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	6999      	ldr	r1, [r3, #24]
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	021a      	lsls	r2, r3, #8
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	430a      	orrs	r2, r1
 800b2be:	619a      	str	r2, [r3, #24]
      break;
 800b2c0:	e043      	b.n	800b34a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68b9      	ldr	r1, [r7, #8]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 fa91 	bl	800b7f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	69da      	ldr	r2, [r3, #28]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f042 0208 	orr.w	r2, r2, #8
 800b2dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	69da      	ldr	r2, [r3, #28]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f022 0204 	bic.w	r2, r2, #4
 800b2ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	69d9      	ldr	r1, [r3, #28]
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	691a      	ldr	r2, [r3, #16]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	430a      	orrs	r2, r1
 800b2fe:	61da      	str	r2, [r3, #28]
      break;
 800b300:	e023      	b.n	800b34a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	68b9      	ldr	r1, [r7, #8]
 800b308:	4618      	mov	r0, r3
 800b30a:	f000 fae5 	bl	800b8d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	69da      	ldr	r2, [r3, #28]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b31c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	69da      	ldr	r2, [r3, #28]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b32c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	69d9      	ldr	r1, [r3, #28]
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	021a      	lsls	r2, r3, #8
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	430a      	orrs	r2, r1
 800b340:	61da      	str	r2, [r3, #28]
      break;
 800b342:	e002      	b.n	800b34a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b344:	2301      	movs	r3, #1
 800b346:	75fb      	strb	r3, [r7, #23]
      break;
 800b348:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b352:	7dfb      	ldrb	r3, [r7, #23]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3718      	adds	r7, #24
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b370:	2b01      	cmp	r3, #1
 800b372:	d101      	bne.n	800b378 <HAL_TIM_ConfigClockSource+0x1c>
 800b374:	2302      	movs	r3, #2
 800b376:	e0b4      	b.n	800b4e2 <HAL_TIM_ConfigClockSource+0x186>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2202      	movs	r2, #2
 800b384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b39e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68ba      	ldr	r2, [r7, #8]
 800b3a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3b0:	d03e      	beq.n	800b430 <HAL_TIM_ConfigClockSource+0xd4>
 800b3b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3b6:	f200 8087 	bhi.w	800b4c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3be:	f000 8086 	beq.w	800b4ce <HAL_TIM_ConfigClockSource+0x172>
 800b3c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3c6:	d87f      	bhi.n	800b4c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3c8:	2b70      	cmp	r3, #112	@ 0x70
 800b3ca:	d01a      	beq.n	800b402 <HAL_TIM_ConfigClockSource+0xa6>
 800b3cc:	2b70      	cmp	r3, #112	@ 0x70
 800b3ce:	d87b      	bhi.n	800b4c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3d0:	2b60      	cmp	r3, #96	@ 0x60
 800b3d2:	d050      	beq.n	800b476 <HAL_TIM_ConfigClockSource+0x11a>
 800b3d4:	2b60      	cmp	r3, #96	@ 0x60
 800b3d6:	d877      	bhi.n	800b4c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3d8:	2b50      	cmp	r3, #80	@ 0x50
 800b3da:	d03c      	beq.n	800b456 <HAL_TIM_ConfigClockSource+0xfa>
 800b3dc:	2b50      	cmp	r3, #80	@ 0x50
 800b3de:	d873      	bhi.n	800b4c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3e0:	2b40      	cmp	r3, #64	@ 0x40
 800b3e2:	d058      	beq.n	800b496 <HAL_TIM_ConfigClockSource+0x13a>
 800b3e4:	2b40      	cmp	r3, #64	@ 0x40
 800b3e6:	d86f      	bhi.n	800b4c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3e8:	2b30      	cmp	r3, #48	@ 0x30
 800b3ea:	d064      	beq.n	800b4b6 <HAL_TIM_ConfigClockSource+0x15a>
 800b3ec:	2b30      	cmp	r3, #48	@ 0x30
 800b3ee:	d86b      	bhi.n	800b4c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3f0:	2b20      	cmp	r3, #32
 800b3f2:	d060      	beq.n	800b4b6 <HAL_TIM_ConfigClockSource+0x15a>
 800b3f4:	2b20      	cmp	r3, #32
 800b3f6:	d867      	bhi.n	800b4c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d05c      	beq.n	800b4b6 <HAL_TIM_ConfigClockSource+0x15a>
 800b3fc:	2b10      	cmp	r3, #16
 800b3fe:	d05a      	beq.n	800b4b6 <HAL_TIM_ConfigClockSource+0x15a>
 800b400:	e062      	b.n	800b4c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b412:	f000 fb2c 	bl	800ba6e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b424:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	609a      	str	r2, [r3, #8]
      break;
 800b42e:	e04f      	b.n	800b4d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b440:	f000 fb15 	bl	800ba6e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	689a      	ldr	r2, [r3, #8]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b452:	609a      	str	r2, [r3, #8]
      break;
 800b454:	e03c      	b.n	800b4d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b462:	461a      	mov	r2, r3
 800b464:	f000 fa8c 	bl	800b980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2150      	movs	r1, #80	@ 0x50
 800b46e:	4618      	mov	r0, r3
 800b470:	f000 fae3 	bl	800ba3a <TIM_ITRx_SetConfig>
      break;
 800b474:	e02c      	b.n	800b4d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b482:	461a      	mov	r2, r3
 800b484:	f000 faaa 	bl	800b9dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2160      	movs	r1, #96	@ 0x60
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 fad3 	bl	800ba3a <TIM_ITRx_SetConfig>
      break;
 800b494:	e01c      	b.n	800b4d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f000 fa6c 	bl	800b980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2140      	movs	r1, #64	@ 0x40
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f000 fac3 	bl	800ba3a <TIM_ITRx_SetConfig>
      break;
 800b4b4:	e00c      	b.n	800b4d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	4610      	mov	r0, r2
 800b4c2:	f000 faba 	bl	800ba3a <TIM_ITRx_SetConfig>
      break;
 800b4c6:	e003      	b.n	800b4d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	73fb      	strb	r3, [r7, #15]
      break;
 800b4cc:	e000      	b.n	800b4d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b4ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b083      	sub	sp, #12
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b4f2:	bf00      	nop
 800b4f4:	370c      	adds	r7, #12
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bc80      	pop	{r7}
 800b4fa:	4770      	bx	lr

0800b4fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b504:	bf00      	nop
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	bc80      	pop	{r7}
 800b50c:	4770      	bx	lr

0800b50e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b50e:	b480      	push	{r7}
 800b510:	b083      	sub	sp, #12
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b516:	bf00      	nop
 800b518:	370c      	adds	r7, #12
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bc80      	pop	{r7}
 800b51e:	4770      	bx	lr

0800b520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b528:	bf00      	nop
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bc80      	pop	{r7}
 800b530:	4770      	bx	lr
	...

0800b534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a33      	ldr	r2, [pc, #204]	@ (800b614 <TIM_Base_SetConfig+0xe0>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d013      	beq.n	800b574 <TIM_Base_SetConfig+0x40>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a32      	ldr	r2, [pc, #200]	@ (800b618 <TIM_Base_SetConfig+0xe4>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d00f      	beq.n	800b574 <TIM_Base_SetConfig+0x40>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b55a:	d00b      	beq.n	800b574 <TIM_Base_SetConfig+0x40>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	4a2f      	ldr	r2, [pc, #188]	@ (800b61c <TIM_Base_SetConfig+0xe8>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d007      	beq.n	800b574 <TIM_Base_SetConfig+0x40>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a2e      	ldr	r2, [pc, #184]	@ (800b620 <TIM_Base_SetConfig+0xec>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d003      	beq.n	800b574 <TIM_Base_SetConfig+0x40>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a2d      	ldr	r2, [pc, #180]	@ (800b624 <TIM_Base_SetConfig+0xf0>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d108      	bne.n	800b586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b57a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	68fa      	ldr	r2, [r7, #12]
 800b582:	4313      	orrs	r3, r2
 800b584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4a22      	ldr	r2, [pc, #136]	@ (800b614 <TIM_Base_SetConfig+0xe0>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d013      	beq.n	800b5b6 <TIM_Base_SetConfig+0x82>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a21      	ldr	r2, [pc, #132]	@ (800b618 <TIM_Base_SetConfig+0xe4>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d00f      	beq.n	800b5b6 <TIM_Base_SetConfig+0x82>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b59c:	d00b      	beq.n	800b5b6 <TIM_Base_SetConfig+0x82>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4a1e      	ldr	r2, [pc, #120]	@ (800b61c <TIM_Base_SetConfig+0xe8>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d007      	beq.n	800b5b6 <TIM_Base_SetConfig+0x82>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b620 <TIM_Base_SetConfig+0xec>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d003      	beq.n	800b5b6 <TIM_Base_SetConfig+0x82>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a1c      	ldr	r2, [pc, #112]	@ (800b624 <TIM_Base_SetConfig+0xf0>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d108      	bne.n	800b5c8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b5bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	695b      	ldr	r3, [r3, #20]
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	689a      	ldr	r2, [r3, #8]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a09      	ldr	r2, [pc, #36]	@ (800b614 <TIM_Base_SetConfig+0xe0>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d003      	beq.n	800b5fc <TIM_Base_SetConfig+0xc8>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a08      	ldr	r2, [pc, #32]	@ (800b618 <TIM_Base_SetConfig+0xe4>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d103      	bne.n	800b604 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	691a      	ldr	r2, [r3, #16]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2201      	movs	r2, #1
 800b608:	615a      	str	r2, [r3, #20]
}
 800b60a:	bf00      	nop
 800b60c:	3714      	adds	r7, #20
 800b60e:	46bd      	mov	sp, r7
 800b610:	bc80      	pop	{r7}
 800b612:	4770      	bx	lr
 800b614:	40012c00 	.word	0x40012c00
 800b618:	40013400 	.word	0x40013400
 800b61c:	40000400 	.word	0x40000400
 800b620:	40000800 	.word	0x40000800
 800b624:	40000c00 	.word	0x40000c00

0800b628 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b628:	b480      	push	{r7}
 800b62a:	b087      	sub	sp, #28
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a1b      	ldr	r3, [r3, #32]
 800b636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a1b      	ldr	r3, [r3, #32]
 800b63c:	f023 0201 	bic.w	r2, r3, #1
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	699b      	ldr	r3, [r3, #24]
 800b64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f023 0303 	bic.w	r3, r3, #3
 800b65e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	4313      	orrs	r3, r2
 800b668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f023 0302 	bic.w	r3, r3, #2
 800b670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	4313      	orrs	r3, r2
 800b67a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a20      	ldr	r2, [pc, #128]	@ (800b700 <TIM_OC1_SetConfig+0xd8>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d003      	beq.n	800b68c <TIM_OC1_SetConfig+0x64>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a1f      	ldr	r2, [pc, #124]	@ (800b704 <TIM_OC1_SetConfig+0xdc>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d10c      	bne.n	800b6a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	f023 0308 	bic.w	r3, r3, #8
 800b692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	697a      	ldr	r2, [r7, #20]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f023 0304 	bic.w	r3, r3, #4
 800b6a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a15      	ldr	r2, [pc, #84]	@ (800b700 <TIM_OC1_SetConfig+0xd8>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d003      	beq.n	800b6b6 <TIM_OC1_SetConfig+0x8e>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a14      	ldr	r2, [pc, #80]	@ (800b704 <TIM_OC1_SetConfig+0xdc>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d111      	bne.n	800b6da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b6c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	695b      	ldr	r3, [r3, #20]
 800b6ca:	693a      	ldr	r2, [r7, #16]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	699b      	ldr	r3, [r3, #24]
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	68fa      	ldr	r2, [r7, #12]
 800b6e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	685a      	ldr	r2, [r3, #4]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	697a      	ldr	r2, [r7, #20]
 800b6f2:	621a      	str	r2, [r3, #32]
}
 800b6f4:	bf00      	nop
 800b6f6:	371c      	adds	r7, #28
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bc80      	pop	{r7}
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	40012c00 	.word	0x40012c00
 800b704:	40013400 	.word	0x40013400

0800b708 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b708:	b480      	push	{r7}
 800b70a:	b087      	sub	sp, #28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6a1b      	ldr	r3, [r3, #32]
 800b716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a1b      	ldr	r3, [r3, #32]
 800b71c:	f023 0210 	bic.w	r2, r3, #16
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b73e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	021b      	lsls	r3, r3, #8
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	4313      	orrs	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	f023 0320 	bic.w	r3, r3, #32
 800b752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	011b      	lsls	r3, r3, #4
 800b75a:	697a      	ldr	r2, [r7, #20]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a21      	ldr	r2, [pc, #132]	@ (800b7e8 <TIM_OC2_SetConfig+0xe0>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d003      	beq.n	800b770 <TIM_OC2_SetConfig+0x68>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a20      	ldr	r2, [pc, #128]	@ (800b7ec <TIM_OC2_SetConfig+0xe4>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d10d      	bne.n	800b78c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	011b      	lsls	r3, r3, #4
 800b77e:	697a      	ldr	r2, [r7, #20]
 800b780:	4313      	orrs	r3, r2
 800b782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b78a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a16      	ldr	r2, [pc, #88]	@ (800b7e8 <TIM_OC2_SetConfig+0xe0>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d003      	beq.n	800b79c <TIM_OC2_SetConfig+0x94>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a15      	ldr	r2, [pc, #84]	@ (800b7ec <TIM_OC2_SetConfig+0xe4>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d113      	bne.n	800b7c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b7a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b7aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	695b      	ldr	r3, [r3, #20]
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	693a      	ldr	r2, [r7, #16]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	699b      	ldr	r3, [r3, #24]
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	693a      	ldr	r2, [r7, #16]
 800b7c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	697a      	ldr	r2, [r7, #20]
 800b7dc:	621a      	str	r2, [r3, #32]
}
 800b7de:	bf00      	nop
 800b7e0:	371c      	adds	r7, #28
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bc80      	pop	{r7}
 800b7e6:	4770      	bx	lr
 800b7e8:	40012c00 	.word	0x40012c00
 800b7ec:	40013400 	.word	0x40013400

0800b7f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b087      	sub	sp, #28
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6a1b      	ldr	r3, [r3, #32]
 800b804:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	69db      	ldr	r3, [r3, #28]
 800b816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b81e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f023 0303 	bic.w	r3, r3, #3
 800b826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	4313      	orrs	r3, r2
 800b830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	021b      	lsls	r3, r3, #8
 800b840:	697a      	ldr	r2, [r7, #20]
 800b842:	4313      	orrs	r3, r2
 800b844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4a21      	ldr	r2, [pc, #132]	@ (800b8d0 <TIM_OC3_SetConfig+0xe0>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d003      	beq.n	800b856 <TIM_OC3_SetConfig+0x66>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4a20      	ldr	r2, [pc, #128]	@ (800b8d4 <TIM_OC3_SetConfig+0xe4>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d10d      	bne.n	800b872 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b85c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	021b      	lsls	r3, r3, #8
 800b864:	697a      	ldr	r2, [r7, #20]
 800b866:	4313      	orrs	r3, r2
 800b868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a16      	ldr	r2, [pc, #88]	@ (800b8d0 <TIM_OC3_SetConfig+0xe0>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d003      	beq.n	800b882 <TIM_OC3_SetConfig+0x92>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4a15      	ldr	r2, [pc, #84]	@ (800b8d4 <TIM_OC3_SetConfig+0xe4>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d113      	bne.n	800b8aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	695b      	ldr	r3, [r3, #20]
 800b896:	011b      	lsls	r3, r3, #4
 800b898:	693a      	ldr	r2, [r7, #16]
 800b89a:	4313      	orrs	r3, r2
 800b89c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	699b      	ldr	r3, [r3, #24]
 800b8a2:	011b      	lsls	r3, r3, #4
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	693a      	ldr	r2, [r7, #16]
 800b8ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	685a      	ldr	r2, [r3, #4]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	697a      	ldr	r2, [r7, #20]
 800b8c2:	621a      	str	r2, [r3, #32]
}
 800b8c4:	bf00      	nop
 800b8c6:	371c      	adds	r7, #28
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bc80      	pop	{r7}
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop
 800b8d0:	40012c00 	.word	0x40012c00
 800b8d4:	40013400 	.word	0x40013400

0800b8d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b087      	sub	sp, #28
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a1b      	ldr	r3, [r3, #32]
 800b8e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a1b      	ldr	r3, [r3, #32]
 800b8ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	69db      	ldr	r3, [r3, #28]
 800b8fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b90e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	021b      	lsls	r3, r3, #8
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	4313      	orrs	r3, r2
 800b91a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	031b      	lsls	r3, r3, #12
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	4313      	orrs	r3, r2
 800b92e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a11      	ldr	r2, [pc, #68]	@ (800b978 <TIM_OC4_SetConfig+0xa0>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d003      	beq.n	800b940 <TIM_OC4_SetConfig+0x68>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a10      	ldr	r2, [pc, #64]	@ (800b97c <TIM_OC4_SetConfig+0xa4>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d109      	bne.n	800b954 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	695b      	ldr	r3, [r3, #20]
 800b94c:	019b      	lsls	r3, r3, #6
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	4313      	orrs	r3, r2
 800b952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	685a      	ldr	r2, [r3, #4]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	693a      	ldr	r2, [r7, #16]
 800b96c:	621a      	str	r2, [r3, #32]
}
 800b96e:	bf00      	nop
 800b970:	371c      	adds	r7, #28
 800b972:	46bd      	mov	sp, r7
 800b974:	bc80      	pop	{r7}
 800b976:	4770      	bx	lr
 800b978:	40012c00 	.word	0x40012c00
 800b97c:	40013400 	.word	0x40013400

0800b980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b980:	b480      	push	{r7}
 800b982:	b087      	sub	sp, #28
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6a1b      	ldr	r3, [r3, #32]
 800b990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	f023 0201 	bic.w	r2, r3, #1
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	699b      	ldr	r3, [r3, #24]
 800b9a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b9aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	011b      	lsls	r3, r3, #4
 800b9b0:	693a      	ldr	r2, [r7, #16]
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f023 030a 	bic.w	r3, r3, #10
 800b9bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b9be:	697a      	ldr	r2, [r7, #20]
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	693a      	ldr	r2, [r7, #16]
 800b9ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	697a      	ldr	r2, [r7, #20]
 800b9d0:	621a      	str	r2, [r3, #32]
}
 800b9d2:	bf00      	nop
 800b9d4:	371c      	adds	r7, #28
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bc80      	pop	{r7}
 800b9da:	4770      	bx	lr

0800b9dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b087      	sub	sp, #28
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6a1b      	ldr	r3, [r3, #32]
 800b9ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6a1b      	ldr	r3, [r3, #32]
 800b9f2:	f023 0210 	bic.w	r2, r3, #16
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	699b      	ldr	r3, [r3, #24]
 800b9fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ba06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	031b      	lsls	r3, r3, #12
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ba18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	011b      	lsls	r3, r3, #4
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	621a      	str	r2, [r3, #32]
}
 800ba30:	bf00      	nop
 800ba32:	371c      	adds	r7, #28
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bc80      	pop	{r7}
 800ba38:	4770      	bx	lr

0800ba3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba3a:	b480      	push	{r7}
 800ba3c:	b085      	sub	sp, #20
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	689b      	ldr	r3, [r3, #8]
 800ba48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	f043 0307 	orr.w	r3, r3, #7
 800ba5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	609a      	str	r2, [r3, #8]
}
 800ba64:	bf00      	nop
 800ba66:	3714      	adds	r7, #20
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bc80      	pop	{r7}
 800ba6c:	4770      	bx	lr

0800ba6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b087      	sub	sp, #28
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	60f8      	str	r0, [r7, #12]
 800ba76:	60b9      	str	r1, [r7, #8]
 800ba78:	607a      	str	r2, [r7, #4]
 800ba7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	021a      	lsls	r2, r3, #8
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	431a      	orrs	r2, r3
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	609a      	str	r2, [r3, #8]
}
 800baa2:	bf00      	nop
 800baa4:	371c      	adds	r7, #28
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bc80      	pop	{r7}
 800baaa:	4770      	bx	lr

0800baac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800baac:	b480      	push	{r7}
 800baae:	b087      	sub	sp, #28
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	f003 031f 	and.w	r3, r3, #31
 800babe:	2201      	movs	r2, #1
 800bac0:	fa02 f303 	lsl.w	r3, r2, r3
 800bac4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6a1a      	ldr	r2, [r3, #32]
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	43db      	mvns	r3, r3
 800bace:	401a      	ands	r2, r3
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6a1a      	ldr	r2, [r3, #32]
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	f003 031f 	and.w	r3, r3, #31
 800bade:	6879      	ldr	r1, [r7, #4]
 800bae0:	fa01 f303 	lsl.w	r3, r1, r3
 800bae4:	431a      	orrs	r2, r3
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	621a      	str	r2, [r3, #32]
}
 800baea:	bf00      	nop
 800baec:	371c      	adds	r7, #28
 800baee:	46bd      	mov	sp, r7
 800baf0:	bc80      	pop	{r7}
 800baf2:	4770      	bx	lr

0800baf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d101      	bne.n	800bb0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb08:	2302      	movs	r3, #2
 800bb0a:	e050      	b.n	800bbae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2202      	movs	r2, #2
 800bb18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a1b      	ldr	r2, [pc, #108]	@ (800bbb8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d018      	beq.n	800bb82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a19      	ldr	r2, [pc, #100]	@ (800bbbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d013      	beq.n	800bb82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb62:	d00e      	beq.n	800bb82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a15      	ldr	r2, [pc, #84]	@ (800bbc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d009      	beq.n	800bb82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a14      	ldr	r2, [pc, #80]	@ (800bbc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d004      	beq.n	800bb82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a12      	ldr	r2, [pc, #72]	@ (800bbc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d10c      	bne.n	800bb9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	4313      	orrs	r3, r2
 800bb92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3714      	adds	r7, #20
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bc80      	pop	{r7}
 800bbb6:	4770      	bx	lr
 800bbb8:	40012c00 	.word	0x40012c00
 800bbbc:	40013400 	.word	0x40013400
 800bbc0:	40000400 	.word	0x40000400
 800bbc4:	40000800 	.word	0x40000800
 800bbc8:	40000c00 	.word	0x40000c00

0800bbcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bbd4:	bf00      	nop
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bc80      	pop	{r7}
 800bbdc:	4770      	bx	lr

0800bbde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bbde:	b480      	push	{r7}
 800bbe0:	b083      	sub	sp, #12
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bbe6:	bf00      	nop
 800bbe8:	370c      	adds	r7, #12
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bc80      	pop	{r7}
 800bbee:	4770      	bx	lr

0800bbf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d101      	bne.n	800bc02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e042      	b.n	800bc88 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d106      	bne.n	800bc1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f7f9 fa5a 	bl	80050d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2224      	movs	r2, #36	@ 0x24
 800bc20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68da      	ldr	r2, [r3, #12]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bc32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 ff01 	bl	800ca3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	691a      	ldr	r2, [r3, #16]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bc48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	695a      	ldr	r2, [r3, #20]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bc58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	68da      	ldr	r2, [r3, #12]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bc68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2220      	movs	r2, #32
 800bc74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2220      	movs	r2, #32
 800bc7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b08a      	sub	sp, #40	@ 0x28
 800bc94:	af02      	add	r7, sp, #8
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	603b      	str	r3, [r7, #0]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bca0:	2300      	movs	r3, #0
 800bca2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	2b20      	cmp	r3, #32
 800bcae:	d16d      	bne.n	800bd8c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d002      	beq.n	800bcbc <HAL_UART_Transmit+0x2c>
 800bcb6:	88fb      	ldrh	r3, [r7, #6]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d101      	bne.n	800bcc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e066      	b.n	800bd8e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2221      	movs	r2, #33	@ 0x21
 800bcca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bcce:	f7fa fe41 	bl	8006954 <HAL_GetTick>
 800bcd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	88fa      	ldrh	r2, [r7, #6]
 800bcd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	88fa      	ldrh	r2, [r7, #6]
 800bcde:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bce8:	d108      	bne.n	800bcfc <HAL_UART_Transmit+0x6c>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d104      	bne.n	800bcfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	61bb      	str	r3, [r7, #24]
 800bcfa:	e003      	b.n	800bd04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bd00:	2300      	movs	r3, #0
 800bd02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bd04:	e02a      	b.n	800bd5c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	9300      	str	r3, [sp, #0]
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	2180      	movs	r1, #128	@ 0x80
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f000 fc29 	bl	800c568 <UART_WaitOnFlagUntilTimeout>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d001      	beq.n	800bd20 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800bd1c:	2303      	movs	r3, #3
 800bd1e:	e036      	b.n	800bd8e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d10b      	bne.n	800bd3e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	3302      	adds	r3, #2
 800bd3a:	61bb      	str	r3, [r7, #24]
 800bd3c:	e007      	b.n	800bd4e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	781a      	ldrb	r2, [r3, #0]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	3b01      	subs	r3, #1
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d1cf      	bne.n	800bd06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	2140      	movs	r1, #64	@ 0x40
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f000 fbf9 	bl	800c568 <UART_WaitOnFlagUntilTimeout>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d001      	beq.n	800bd80 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	e006      	b.n	800bd8e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2220      	movs	r2, #32
 800bd84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	e000      	b.n	800bd8e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800bd8c:	2302      	movs	r3, #2
  }
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3720      	adds	r7, #32
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b084      	sub	sp, #16
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	60f8      	str	r0, [r7, #12]
 800bd9e:	60b9      	str	r1, [r7, #8]
 800bda0:	4613      	mov	r3, r2
 800bda2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	2b20      	cmp	r3, #32
 800bdae:	d112      	bne.n	800bdd6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d002      	beq.n	800bdbc <HAL_UART_Receive_IT+0x26>
 800bdb6:	88fb      	ldrh	r3, [r7, #6]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d101      	bne.n	800bdc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e00b      	b.n	800bdd8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bdc6:	88fb      	ldrh	r3, [r7, #6]
 800bdc8:	461a      	mov	r2, r3
 800bdca:	68b9      	ldr	r1, [r7, #8]
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f000 fc39 	bl	800c644 <UART_Start_Receive_IT>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	e000      	b.n	800bdd8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800bdd6:	2302      	movs	r3, #2
  }
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3710      	adds	r7, #16
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b08c      	sub	sp, #48	@ 0x30
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	4613      	mov	r3, r2
 800bdec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	2b20      	cmp	r3, #32
 800bdf8:	d156      	bne.n	800bea8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d002      	beq.n	800be06 <HAL_UART_Transmit_DMA+0x26>
 800be00:	88fb      	ldrh	r3, [r7, #6]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d101      	bne.n	800be0a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	e04f      	b.n	800beaa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	88fa      	ldrh	r2, [r7, #6]
 800be14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	88fa      	ldrh	r2, [r7, #6]
 800be1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2221      	movs	r2, #33	@ 0x21
 800be26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be2e:	4a21      	ldr	r2, [pc, #132]	@ (800beb4 <HAL_UART_Transmit_DMA+0xd4>)
 800be30:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be36:	4a20      	ldr	r2, [pc, #128]	@ (800beb8 <HAL_UART_Transmit_DMA+0xd8>)
 800be38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be3e:	4a1f      	ldr	r2, [pc, #124]	@ (800bebc <HAL_UART_Transmit_DMA+0xdc>)
 800be40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be46:	2200      	movs	r2, #0
 800be48:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800be4a:	f107 0308 	add.w	r3, r7, #8
 800be4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800be54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be56:	6819      	ldr	r1, [r3, #0]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3304      	adds	r3, #4
 800be5e:	461a      	mov	r2, r3
 800be60:	88fb      	ldrh	r3, [r7, #6]
 800be62:	f7fa fefb 	bl	8006c5c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800be6e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	3314      	adds	r3, #20
 800be76:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	e853 3f00 	ldrex	r3, [r3]
 800be7e:	617b      	str	r3, [r7, #20]
   return(result);
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be86:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	3314      	adds	r3, #20
 800be8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be90:	627a      	str	r2, [r7, #36]	@ 0x24
 800be92:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be94:	6a39      	ldr	r1, [r7, #32]
 800be96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be98:	e841 2300 	strex	r3, r2, [r1]
 800be9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d1e5      	bne.n	800be70 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	e000      	b.n	800beaa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800bea8:	2302      	movs	r3, #2
  }
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3730      	adds	r7, #48	@ 0x30
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	0800c41f 	.word	0x0800c41f
 800beb8:	0800c4b9 	.word	0x0800c4b9
 800bebc:	0800c4d5 	.word	0x0800c4d5

0800bec0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b0ba      	sub	sp, #232	@ 0xe8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	695b      	ldr	r3, [r3, #20]
 800bee2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800bee6:	2300      	movs	r3, #0
 800bee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800beec:	2300      	movs	r3, #0
 800beee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bef6:	f003 030f 	and.w	r3, r3, #15
 800befa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800befe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10f      	bne.n	800bf26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bf06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf0a:	f003 0320 	and.w	r3, r3, #32
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d009      	beq.n	800bf26 <HAL_UART_IRQHandler+0x66>
 800bf12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf16:	f003 0320 	and.w	r3, r3, #32
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d003      	beq.n	800bf26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 fccd 	bl	800c8be <UART_Receive_IT>
      return;
 800bf24:	e25b      	b.n	800c3de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bf26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	f000 80de 	beq.w	800c0ec <HAL_UART_IRQHandler+0x22c>
 800bf30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf34:	f003 0301 	and.w	r3, r3, #1
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d106      	bne.n	800bf4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bf3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f000 80d1 	beq.w	800c0ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bf4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf4e:	f003 0301 	and.w	r3, r3, #1
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00b      	beq.n	800bf6e <HAL_UART_IRQHandler+0xae>
 800bf56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d005      	beq.n	800bf6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf66:	f043 0201 	orr.w	r2, r3, #1
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf72:	f003 0304 	and.w	r3, r3, #4
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00b      	beq.n	800bf92 <HAL_UART_IRQHandler+0xd2>
 800bf7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf7e:	f003 0301 	and.w	r3, r3, #1
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d005      	beq.n	800bf92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf8a:	f043 0202 	orr.w	r2, r3, #2
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf96:	f003 0302 	and.w	r3, r3, #2
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00b      	beq.n	800bfb6 <HAL_UART_IRQHandler+0xf6>
 800bf9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bfa2:	f003 0301 	and.w	r3, r3, #1
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d005      	beq.n	800bfb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfae:	f043 0204 	orr.w	r2, r3, #4
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bfb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfba:	f003 0308 	and.w	r3, r3, #8
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d011      	beq.n	800bfe6 <HAL_UART_IRQHandler+0x126>
 800bfc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfc6:	f003 0320 	and.w	r3, r3, #32
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d105      	bne.n	800bfda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bfce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bfd2:	f003 0301 	and.w	r3, r3, #1
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d005      	beq.n	800bfe6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfde:	f043 0208 	orr.w	r2, r3, #8
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f000 81f2 	beq.w	800c3d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bff4:	f003 0320 	and.w	r3, r3, #32
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d008      	beq.n	800c00e <HAL_UART_IRQHandler+0x14e>
 800bffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c000:	f003 0320 	and.w	r3, r3, #32
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 fc58 	bl	800c8be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	695b      	ldr	r3, [r3, #20]
 800c014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c018:	2b00      	cmp	r3, #0
 800c01a:	bf14      	ite	ne
 800c01c:	2301      	movne	r3, #1
 800c01e:	2300      	moveq	r3, #0
 800c020:	b2db      	uxtb	r3, r3
 800c022:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c02a:	f003 0308 	and.w	r3, r3, #8
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d103      	bne.n	800c03a <HAL_UART_IRQHandler+0x17a>
 800c032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c036:	2b00      	cmp	r3, #0
 800c038:	d04f      	beq.n	800c0da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 fb62 	bl	800c704 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d041      	beq.n	800c0d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	3314      	adds	r3, #20
 800c054:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c058:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c05c:	e853 3f00 	ldrex	r3, [r3]
 800c060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c064:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c068:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c06c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	3314      	adds	r3, #20
 800c076:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c07a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c07e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c082:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c086:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c08a:	e841 2300 	strex	r3, r2, [r1]
 800c08e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1d9      	bne.n	800c04e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d013      	beq.n	800c0ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0a6:	4a7e      	ldr	r2, [pc, #504]	@ (800c2a0 <HAL_UART_IRQHandler+0x3e0>)
 800c0a8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fa fe70 	bl	8006d94 <HAL_DMA_Abort_IT>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d016      	beq.n	800c0e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c0c4:	4610      	mov	r0, r2
 800c0c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0c8:	e00e      	b.n	800c0e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f993 	bl	800c3f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0d0:	e00a      	b.n	800c0e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 f98f 	bl	800c3f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0d8:	e006      	b.n	800c0e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 f98b 	bl	800c3f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c0e6:	e175      	b.n	800c3d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0e8:	bf00      	nop
    return;
 800c0ea:	e173      	b.n	800c3d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	f040 814f 	bne.w	800c394 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0fa:	f003 0310 	and.w	r3, r3, #16
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	f000 8148 	beq.w	800c394 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c108:	f003 0310 	and.w	r3, r3, #16
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f000 8141 	beq.w	800c394 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c112:	2300      	movs	r3, #0
 800c114:	60bb      	str	r3, [r7, #8]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	60bb      	str	r3, [r7, #8]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	60bb      	str	r3, [r7, #8]
 800c126:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	695b      	ldr	r3, [r3, #20]
 800c12e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c132:	2b00      	cmp	r3, #0
 800c134:	f000 80b6 	beq.w	800c2a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c144:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f000 8145 	beq.w	800c3d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c156:	429a      	cmp	r2, r3
 800c158:	f080 813e 	bcs.w	800c3d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c162:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c168:	699b      	ldr	r3, [r3, #24]
 800c16a:	2b20      	cmp	r3, #32
 800c16c:	f000 8088 	beq.w	800c280 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	330c      	adds	r3, #12
 800c176:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c17a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c17e:	e853 3f00 	ldrex	r3, [r3]
 800c182:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c186:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c18a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c18e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	330c      	adds	r3, #12
 800c198:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c19c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c1a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c1a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c1ac:	e841 2300 	strex	r3, r2, [r1]
 800c1b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c1b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1d9      	bne.n	800c170 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	3314      	adds	r3, #20
 800c1c2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1c6:	e853 3f00 	ldrex	r3, [r3]
 800c1ca:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c1cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c1ce:	f023 0301 	bic.w	r3, r3, #1
 800c1d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	3314      	adds	r3, #20
 800c1dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c1e0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c1e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c1e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c1ec:	e841 2300 	strex	r3, r2, [r1]
 800c1f0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c1f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d1e1      	bne.n	800c1bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	3314      	adds	r3, #20
 800c1fe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c200:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c202:	e853 3f00 	ldrex	r3, [r3]
 800c206:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c208:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c20a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c20e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	3314      	adds	r3, #20
 800c218:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c21c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c21e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c220:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c222:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c224:	e841 2300 	strex	r3, r2, [r1]
 800c228:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c22a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d1e3      	bne.n	800c1f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2220      	movs	r2, #32
 800c234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	330c      	adds	r3, #12
 800c244:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c248:	e853 3f00 	ldrex	r3, [r3]
 800c24c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c24e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c250:	f023 0310 	bic.w	r3, r3, #16
 800c254:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	330c      	adds	r3, #12
 800c25e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c262:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c264:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c266:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c268:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c26a:	e841 2300 	strex	r3, r2, [r1]
 800c26e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c272:	2b00      	cmp	r3, #0
 800c274:	d1e3      	bne.n	800c23e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fa fd4e 	bl	8006d1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2202      	movs	r2, #2
 800c284:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c28e:	b29b      	uxth	r3, r3
 800c290:	1ad3      	subs	r3, r2, r3
 800c292:	b29b      	uxth	r3, r3
 800c294:	4619      	mov	r1, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f8b6 	bl	800c408 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c29c:	e09c      	b.n	800c3d8 <HAL_UART_IRQHandler+0x518>
 800c29e:	bf00      	nop
 800c2a0:	0800c7c9 	.word	0x0800c7c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	1ad3      	subs	r3, r2, r3
 800c2b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f000 808e 	beq.w	800c3dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c2c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f000 8089 	beq.w	800c3dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	330c      	adds	r3, #12
 800c2d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d4:	e853 3f00 	ldrex	r3, [r3]
 800c2d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	330c      	adds	r3, #12
 800c2ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c2ee:	647a      	str	r2, [r7, #68]	@ 0x44
 800c2f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c2f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c2f6:	e841 2300 	strex	r3, r2, [r1]
 800c2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c2fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1e3      	bne.n	800c2ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	3314      	adds	r3, #20
 800c308:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30c:	e853 3f00 	ldrex	r3, [r3]
 800c310:	623b      	str	r3, [r7, #32]
   return(result);
 800c312:	6a3b      	ldr	r3, [r7, #32]
 800c314:	f023 0301 	bic.w	r3, r3, #1
 800c318:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3314      	adds	r3, #20
 800c322:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c326:	633a      	str	r2, [r7, #48]	@ 0x30
 800c328:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c32c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c32e:	e841 2300 	strex	r3, r2, [r1]
 800c332:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1e3      	bne.n	800c302 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2220      	movs	r2, #32
 800c33e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2200      	movs	r2, #0
 800c346:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	330c      	adds	r3, #12
 800c34e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	e853 3f00 	ldrex	r3, [r3]
 800c356:	60fb      	str	r3, [r7, #12]
   return(result);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f023 0310 	bic.w	r3, r3, #16
 800c35e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	330c      	adds	r3, #12
 800c368:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c36c:	61fa      	str	r2, [r7, #28]
 800c36e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c370:	69b9      	ldr	r1, [r7, #24]
 800c372:	69fa      	ldr	r2, [r7, #28]
 800c374:	e841 2300 	strex	r3, r2, [r1]
 800c378:	617b      	str	r3, [r7, #20]
   return(result);
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1e3      	bne.n	800c348 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2202      	movs	r2, #2
 800c384:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c386:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c38a:	4619      	mov	r1, r3
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 f83b 	bl	800c408 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c392:	e023      	b.n	800c3dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d009      	beq.n	800c3b4 <HAL_UART_IRQHandler+0x4f4>
 800c3a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d003      	beq.n	800c3b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 fa1f 	bl	800c7f0 <UART_Transmit_IT>
    return;
 800c3b2:	e014      	b.n	800c3de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c3b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00e      	beq.n	800c3de <HAL_UART_IRQHandler+0x51e>
 800c3c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d008      	beq.n	800c3de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 fa5e 	bl	800c88e <UART_EndTransmit_IT>
    return;
 800c3d2:	e004      	b.n	800c3de <HAL_UART_IRQHandler+0x51e>
    return;
 800c3d4:	bf00      	nop
 800c3d6:	e002      	b.n	800c3de <HAL_UART_IRQHandler+0x51e>
      return;
 800c3d8:	bf00      	nop
 800c3da:	e000      	b.n	800c3de <HAL_UART_IRQHandler+0x51e>
      return;
 800c3dc:	bf00      	nop
  }
}
 800c3de:	37e8      	adds	r7, #232	@ 0xe8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c3ec:	bf00      	nop
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bc80      	pop	{r7}
 800c3f4:	4770      	bx	lr

0800c3f6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c3f6:	b480      	push	{r7}
 800c3f8:	b083      	sub	sp, #12
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c3fe:	bf00      	nop
 800c400:	370c      	adds	r7, #12
 800c402:	46bd      	mov	sp, r7
 800c404:	bc80      	pop	{r7}
 800c406:	4770      	bx	lr

0800c408 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	460b      	mov	r3, r1
 800c412:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	bc80      	pop	{r7}
 800c41c:	4770      	bx	lr

0800c41e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b090      	sub	sp, #64	@ 0x40
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f003 0320 	and.w	r3, r3, #32
 800c436:	2b00      	cmp	r3, #0
 800c438:	d137      	bne.n	800c4aa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c43a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c43c:	2200      	movs	r2, #0
 800c43e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	3314      	adds	r3, #20
 800c446:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c44a:	e853 3f00 	ldrex	r3, [r3]
 800c44e:	623b      	str	r3, [r7, #32]
   return(result);
 800c450:	6a3b      	ldr	r3, [r7, #32]
 800c452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c456:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3314      	adds	r3, #20
 800c45e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c460:	633a      	str	r2, [r7, #48]	@ 0x30
 800c462:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c464:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c468:	e841 2300 	strex	r3, r2, [r1]
 800c46c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c470:	2b00      	cmp	r3, #0
 800c472:	d1e5      	bne.n	800c440 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	330c      	adds	r3, #12
 800c47a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	e853 3f00 	ldrex	r3, [r3]
 800c482:	60fb      	str	r3, [r7, #12]
   return(result);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c48a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c48c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	330c      	adds	r3, #12
 800c492:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c494:	61fa      	str	r2, [r7, #28]
 800c496:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c498:	69b9      	ldr	r1, [r7, #24]
 800c49a:	69fa      	ldr	r2, [r7, #28]
 800c49c:	e841 2300 	strex	r3, r2, [r1]
 800c4a0:	617b      	str	r3, [r7, #20]
   return(result);
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1e5      	bne.n	800c474 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4a8:	e002      	b.n	800c4b0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c4aa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c4ac:	f7f7 fc46 	bl	8003d3c <HAL_UART_TxCpltCallback>
}
 800c4b0:	bf00      	nop
 800c4b2:	3740      	adds	r7, #64	@ 0x40
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f7ff ff8c 	bl	800c3e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4cc:	bf00      	nop
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	695b      	ldr	r3, [r3, #20]
 800c4ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	bf14      	ite	ne
 800c4f4:	2301      	movne	r3, #1
 800c4f6:	2300      	moveq	r3, #0
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c502:	b2db      	uxtb	r3, r3
 800c504:	2b21      	cmp	r3, #33	@ 0x21
 800c506:	d108      	bne.n	800c51a <UART_DMAError+0x46>
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d005      	beq.n	800c51a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	2200      	movs	r2, #0
 800c512:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800c514:	68b8      	ldr	r0, [r7, #8]
 800c516:	f000 f8ce 	bl	800c6b6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	695b      	ldr	r3, [r3, #20]
 800c520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c524:	2b00      	cmp	r3, #0
 800c526:	bf14      	ite	ne
 800c528:	2301      	movne	r3, #1
 800c52a:	2300      	moveq	r3, #0
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b22      	cmp	r3, #34	@ 0x22
 800c53a:	d108      	bne.n	800c54e <UART_DMAError+0x7a>
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d005      	beq.n	800c54e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	2200      	movs	r2, #0
 800c546:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800c548:	68b8      	ldr	r0, [r7, #8]
 800c54a:	f000 f8db 	bl	800c704 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c552:	f043 0210 	orr.w	r2, r3, #16
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c55a:	68b8      	ldr	r0, [r7, #8]
 800c55c:	f7ff ff4b 	bl	800c3f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c560:	bf00      	nop
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b090      	sub	sp, #64	@ 0x40
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	603b      	str	r3, [r7, #0]
 800c574:	4613      	mov	r3, r2
 800c576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c578:	e050      	b.n	800c61c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c57a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c580:	d04c      	beq.n	800c61c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c584:	2b00      	cmp	r3, #0
 800c586:	d007      	beq.n	800c598 <UART_WaitOnFlagUntilTimeout+0x30>
 800c588:	f7fa f9e4 	bl	8006954 <HAL_GetTick>
 800c58c:	4602      	mov	r2, r0
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c594:	429a      	cmp	r2, r3
 800c596:	d241      	bcs.n	800c61c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	330c      	adds	r3, #12
 800c59e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a2:	e853 3f00 	ldrex	r3, [r3]
 800c5a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5aa:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800c5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	330c      	adds	r3, #12
 800c5b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c5b8:	637a      	str	r2, [r7, #52]	@ 0x34
 800c5ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c5be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5c0:	e841 2300 	strex	r3, r2, [r1]
 800c5c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1e5      	bne.n	800c598 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3314      	adds	r3, #20
 800c5d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	e853 3f00 	ldrex	r3, [r3]
 800c5da:	613b      	str	r3, [r7, #16]
   return(result);
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	f023 0301 	bic.w	r3, r3, #1
 800c5e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	3314      	adds	r3, #20
 800c5ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5ec:	623a      	str	r2, [r7, #32]
 800c5ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f0:	69f9      	ldr	r1, [r7, #28]
 800c5f2:	6a3a      	ldr	r2, [r7, #32]
 800c5f4:	e841 2300 	strex	r3, r2, [r1]
 800c5f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1e5      	bne.n	800c5cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2220      	movs	r2, #32
 800c604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2220      	movs	r2, #32
 800c60c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800c618:	2303      	movs	r3, #3
 800c61a:	e00f      	b.n	800c63c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	4013      	ands	r3, r2
 800c626:	68ba      	ldr	r2, [r7, #8]
 800c628:	429a      	cmp	r2, r3
 800c62a:	bf0c      	ite	eq
 800c62c:	2301      	moveq	r3, #1
 800c62e:	2300      	movne	r3, #0
 800c630:	b2db      	uxtb	r3, r3
 800c632:	461a      	mov	r2, r3
 800c634:	79fb      	ldrb	r3, [r7, #7]
 800c636:	429a      	cmp	r2, r3
 800c638:	d09f      	beq.n	800c57a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3740      	adds	r7, #64	@ 0x40
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c644:	b480      	push	{r7}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	4613      	mov	r3, r2
 800c650:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	88fa      	ldrh	r2, [r7, #6]
 800c65c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	88fa      	ldrh	r2, [r7, #6]
 800c662:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2200      	movs	r2, #0
 800c668:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2222      	movs	r2, #34	@ 0x22
 800c66e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	691b      	ldr	r3, [r3, #16]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d007      	beq.n	800c68a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68da      	ldr	r2, [r3, #12]
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c688:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	695a      	ldr	r2, [r3, #20]
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f042 0201 	orr.w	r2, r2, #1
 800c698:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	68da      	ldr	r2, [r3, #12]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f042 0220 	orr.w	r2, r2, #32
 800c6a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c6aa:	2300      	movs	r3, #0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3714      	adds	r7, #20
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bc80      	pop	{r7}
 800c6b4:	4770      	bx	lr

0800c6b6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c6b6:	b480      	push	{r7}
 800c6b8:	b089      	sub	sp, #36	@ 0x24
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	330c      	adds	r3, #12
 800c6c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	e853 3f00 	ldrex	r3, [r3]
 800c6cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c6d4:	61fb      	str	r3, [r7, #28]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	330c      	adds	r3, #12
 800c6dc:	69fa      	ldr	r2, [r7, #28]
 800c6de:	61ba      	str	r2, [r7, #24]
 800c6e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e2:	6979      	ldr	r1, [r7, #20]
 800c6e4:	69ba      	ldr	r2, [r7, #24]
 800c6e6:	e841 2300 	strex	r3, r2, [r1]
 800c6ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1e5      	bne.n	800c6be <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2220      	movs	r2, #32
 800c6f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800c6fa:	bf00      	nop
 800c6fc:	3724      	adds	r7, #36	@ 0x24
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bc80      	pop	{r7}
 800c702:	4770      	bx	lr

0800c704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c704:	b480      	push	{r7}
 800c706:	b095      	sub	sp, #84	@ 0x54
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	330c      	adds	r3, #12
 800c712:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c716:	e853 3f00 	ldrex	r3, [r3]
 800c71a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c71e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c722:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	330c      	adds	r3, #12
 800c72a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c72c:	643a      	str	r2, [r7, #64]	@ 0x40
 800c72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c730:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c732:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c734:	e841 2300 	strex	r3, r2, [r1]
 800c738:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1e5      	bne.n	800c70c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	3314      	adds	r3, #20
 800c746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c748:	6a3b      	ldr	r3, [r7, #32]
 800c74a:	e853 3f00 	ldrex	r3, [r3]
 800c74e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	f023 0301 	bic.w	r3, r3, #1
 800c756:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	3314      	adds	r3, #20
 800c75e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c762:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c764:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c768:	e841 2300 	strex	r3, r2, [r1]
 800c76c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1e5      	bne.n	800c740 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d119      	bne.n	800c7b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	330c      	adds	r3, #12
 800c782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	e853 3f00 	ldrex	r3, [r3]
 800c78a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	f023 0310 	bic.w	r3, r3, #16
 800c792:	647b      	str	r3, [r7, #68]	@ 0x44
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	330c      	adds	r3, #12
 800c79a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c79c:	61ba      	str	r2, [r7, #24]
 800c79e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a0:	6979      	ldr	r1, [r7, #20]
 800c7a2:	69ba      	ldr	r2, [r7, #24]
 800c7a4:	e841 2300 	strex	r3, r2, [r1]
 800c7a8:	613b      	str	r3, [r7, #16]
   return(result);
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1e5      	bne.n	800c77c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2220      	movs	r2, #32
 800c7b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c7be:	bf00      	nop
 800c7c0:	3754      	adds	r7, #84	@ 0x54
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bc80      	pop	{r7}
 800c7c6:	4770      	bx	lr

0800c7c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f7ff fe07 	bl	800c3f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7e8:	bf00      	nop
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b085      	sub	sp, #20
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	2b21      	cmp	r3, #33	@ 0x21
 800c802:	d13e      	bne.n	800c882 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c80c:	d114      	bne.n	800c838 <UART_Transmit_IT+0x48>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	691b      	ldr	r3, [r3, #16]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d110      	bne.n	800c838 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a1b      	ldr	r3, [r3, #32]
 800c81a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	881b      	ldrh	r3, [r3, #0]
 800c820:	461a      	mov	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c82a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6a1b      	ldr	r3, [r3, #32]
 800c830:	1c9a      	adds	r2, r3, #2
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	621a      	str	r2, [r3, #32]
 800c836:	e008      	b.n	800c84a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6a1b      	ldr	r3, [r3, #32]
 800c83c:	1c59      	adds	r1, r3, #1
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	6211      	str	r1, [r2, #32]
 800c842:	781a      	ldrb	r2, [r3, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c84e:	b29b      	uxth	r3, r3
 800c850:	3b01      	subs	r3, #1
 800c852:	b29b      	uxth	r3, r3
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	4619      	mov	r1, r3
 800c858:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d10f      	bne.n	800c87e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	68da      	ldr	r2, [r3, #12]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c86c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68da      	ldr	r2, [r3, #12]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c87c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c87e:	2300      	movs	r3, #0
 800c880:	e000      	b.n	800c884 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c882:	2302      	movs	r3, #2
  }
}
 800c884:	4618      	mov	r0, r3
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	bc80      	pop	{r7}
 800c88c:	4770      	bx	lr

0800c88e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b082      	sub	sp, #8
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68da      	ldr	r2, [r3, #12]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c8a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2220      	movs	r2, #32
 800c8aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7f7 fa44 	bl	8003d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b08c      	sub	sp, #48	@ 0x30
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b22      	cmp	r3, #34	@ 0x22
 800c8d0:	f040 80ae 	bne.w	800ca30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8dc:	d117      	bne.n	800c90e <UART_Receive_IT+0x50>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	691b      	ldr	r3, [r3, #16]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d113      	bne.n	800c90e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c900:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c906:	1c9a      	adds	r2, r3, #2
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	629a      	str	r2, [r3, #40]	@ 0x28
 800c90c:	e026      	b.n	800c95c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c912:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c914:	2300      	movs	r3, #0
 800c916:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c920:	d007      	beq.n	800c932 <UART_Receive_IT+0x74>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	689b      	ldr	r3, [r3, #8]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10a      	bne.n	800c940 <UART_Receive_IT+0x82>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	691b      	ldr	r3, [r3, #16]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d106      	bne.n	800c940 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c93c:	701a      	strb	r2, [r3, #0]
 800c93e:	e008      	b.n	800c952 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	b2db      	uxtb	r3, r3
 800c948:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c950:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c956:	1c5a      	adds	r2, r3, #1
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c960:	b29b      	uxth	r3, r3
 800c962:	3b01      	subs	r3, #1
 800c964:	b29b      	uxth	r3, r3
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	4619      	mov	r1, r3
 800c96a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d15d      	bne.n	800ca2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	68da      	ldr	r2, [r3, #12]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f022 0220 	bic.w	r2, r2, #32
 800c97e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68da      	ldr	r2, [r3, #12]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c98e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	695a      	ldr	r2, [r3, #20]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f022 0201 	bic.w	r2, r2, #1
 800c99e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2220      	movs	r2, #32
 800c9a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d135      	bne.n	800ca22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	330c      	adds	r3, #12
 800c9c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	e853 3f00 	ldrex	r3, [r3]
 800c9ca:	613b      	str	r3, [r7, #16]
   return(result);
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	f023 0310 	bic.w	r3, r3, #16
 800c9d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	330c      	adds	r3, #12
 800c9da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9dc:	623a      	str	r2, [r7, #32]
 800c9de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e0:	69f9      	ldr	r1, [r7, #28]
 800c9e2:	6a3a      	ldr	r2, [r7, #32]
 800c9e4:	e841 2300 	strex	r3, r2, [r1]
 800c9e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1e5      	bne.n	800c9bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f003 0310 	and.w	r3, r3, #16
 800c9fa:	2b10      	cmp	r3, #16
 800c9fc:	d10a      	bne.n	800ca14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c9fe:	2300      	movs	r3, #0
 800ca00:	60fb      	str	r3, [r7, #12]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	60fb      	str	r3, [r7, #12]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	60fb      	str	r3, [r7, #12]
 800ca12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ca18:	4619      	mov	r1, r3
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7ff fcf4 	bl	800c408 <HAL_UARTEx_RxEventCallback>
 800ca20:	e002      	b.n	800ca28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7f7 f970 	bl	8003d08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	e002      	b.n	800ca32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	e000      	b.n	800ca32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ca30:	2302      	movs	r3, #2
  }
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3730      	adds	r7, #48	@ 0x30
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
	...

0800ca3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	68da      	ldr	r2, [r3, #12]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	430a      	orrs	r2, r1
 800ca58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	689a      	ldr	r2, [r3, #8]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	691b      	ldr	r3, [r3, #16]
 800ca62:	431a      	orrs	r2, r3
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	695b      	ldr	r3, [r3, #20]
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800ca76:	f023 030c 	bic.w	r3, r3, #12
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	6812      	ldr	r2, [r2, #0]
 800ca7e:	68b9      	ldr	r1, [r7, #8]
 800ca80:	430b      	orrs	r3, r1
 800ca82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	695b      	ldr	r3, [r3, #20]
 800ca8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	699a      	ldr	r2, [r3, #24]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	430a      	orrs	r2, r1
 800ca98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a2c      	ldr	r2, [pc, #176]	@ (800cb50 <UART_SetConfig+0x114>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d103      	bne.n	800caac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800caa4:	f7fd f8e4 	bl	8009c70 <HAL_RCC_GetPCLK2Freq>
 800caa8:	60f8      	str	r0, [r7, #12]
 800caaa:	e002      	b.n	800cab2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800caac:	f7fd f8cc 	bl	8009c48 <HAL_RCC_GetPCLK1Freq>
 800cab0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cab2:	68fa      	ldr	r2, [r7, #12]
 800cab4:	4613      	mov	r3, r2
 800cab6:	009b      	lsls	r3, r3, #2
 800cab8:	4413      	add	r3, r2
 800caba:	009a      	lsls	r2, r3, #2
 800cabc:	441a      	add	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cac8:	4a22      	ldr	r2, [pc, #136]	@ (800cb54 <UART_SetConfig+0x118>)
 800caca:	fba2 2303 	umull	r2, r3, r2, r3
 800cace:	095b      	lsrs	r3, r3, #5
 800cad0:	0119      	lsls	r1, r3, #4
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	4613      	mov	r3, r2
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	4413      	add	r3, r2
 800cada:	009a      	lsls	r2, r3, #2
 800cadc:	441a      	add	r2, r3
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	fbb2 f2f3 	udiv	r2, r2, r3
 800cae8:	4b1a      	ldr	r3, [pc, #104]	@ (800cb54 <UART_SetConfig+0x118>)
 800caea:	fba3 0302 	umull	r0, r3, r3, r2
 800caee:	095b      	lsrs	r3, r3, #5
 800caf0:	2064      	movs	r0, #100	@ 0x64
 800caf2:	fb00 f303 	mul.w	r3, r0, r3
 800caf6:	1ad3      	subs	r3, r2, r3
 800caf8:	011b      	lsls	r3, r3, #4
 800cafa:	3332      	adds	r3, #50	@ 0x32
 800cafc:	4a15      	ldr	r2, [pc, #84]	@ (800cb54 <UART_SetConfig+0x118>)
 800cafe:	fba2 2303 	umull	r2, r3, r2, r3
 800cb02:	095b      	lsrs	r3, r3, #5
 800cb04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cb08:	4419      	add	r1, r3
 800cb0a:	68fa      	ldr	r2, [r7, #12]
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	4413      	add	r3, r2
 800cb12:	009a      	lsls	r2, r3, #2
 800cb14:	441a      	add	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	fbb2 f2f3 	udiv	r2, r2, r3
 800cb20:	4b0c      	ldr	r3, [pc, #48]	@ (800cb54 <UART_SetConfig+0x118>)
 800cb22:	fba3 0302 	umull	r0, r3, r3, r2
 800cb26:	095b      	lsrs	r3, r3, #5
 800cb28:	2064      	movs	r0, #100	@ 0x64
 800cb2a:	fb00 f303 	mul.w	r3, r0, r3
 800cb2e:	1ad3      	subs	r3, r2, r3
 800cb30:	011b      	lsls	r3, r3, #4
 800cb32:	3332      	adds	r3, #50	@ 0x32
 800cb34:	4a07      	ldr	r2, [pc, #28]	@ (800cb54 <UART_SetConfig+0x118>)
 800cb36:	fba2 2303 	umull	r2, r3, r2, r3
 800cb3a:	095b      	lsrs	r3, r3, #5
 800cb3c:	f003 020f 	and.w	r2, r3, #15
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	440a      	add	r2, r1
 800cb46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cb48:	bf00      	nop
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	40013800 	.word	0x40013800
 800cb54:	51eb851f 	.word	0x51eb851f

0800cb58 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800cb58:	b084      	sub	sp, #16
 800cb5a:	b480      	push	{r7}
 800cb5c:	b085      	sub	sp, #20
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
 800cb62:	f107 001c 	add.w	r0, r7, #28
 800cb66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cb6e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cb70:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cb72:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800cb76:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cb78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800cb7a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800cb7e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cb80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800cb82:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	4313      	orrs	r3, r2
 800cb88:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800cb92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	431a      	orrs	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cb9e:	2300      	movs	r3, #0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bc80      	pop	{r7}
 800cba8:	b004      	add	sp, #16
 800cbaa:	4770      	bx	lr

0800cbac <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	370c      	adds	r7, #12
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bc80      	pop	{r7}
 800cbc2:	4770      	bx	lr

0800cbc4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800cbd8:	2300      	movs	r3, #0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	370c      	adds	r7, #12
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bc80      	pop	{r7}
 800cbe2:	4770      	bx	lr

0800cbe4 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2203      	movs	r2, #3
 800cbf0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	370c      	adds	r7, #12
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bc80      	pop	{r7}
 800cbfc:	4770      	bx	lr

0800cbfe <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cbfe:	b480      	push	{r7}
 800cc00:	b083      	sub	sp, #12
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f003 0303 	and.w	r3, r3, #3
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	370c      	adds	r7, #12
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bc80      	pop	{r7}
 800cc16:	4770      	bx	lr

0800cc18 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cc36:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cc3c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cc42:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cc44:	68fa      	ldr	r2, [r7, #12]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800cc52:	f023 030f 	bic.w	r3, r3, #15
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	431a      	orrs	r2, r3
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cc5e:	2300      	movs	r3, #0
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bc80      	pop	{r7}
 800cc68:	4770      	bx	lr

0800cc6a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cc6a:	b480      	push	{r7}
 800cc6c:	b083      	sub	sp, #12
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	691b      	ldr	r3, [r3, #16]
 800cc76:	b2db      	uxtb	r3, r3
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	370c      	adds	r7, #12
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bc80      	pop	{r7}
 800cc80:	4770      	bx	lr

0800cc82 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cc82:	b480      	push	{r7}
 800cc84:	b085      	sub	sp, #20
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	3314      	adds	r3, #20
 800cc90:	461a      	mov	r2, r3
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	4413      	add	r3, r2
 800cc96:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
}  
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3714      	adds	r7, #20
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bc80      	pop	{r7}
 800cca4:	4770      	bx	lr

0800cca6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cca6:	b480      	push	{r7}
 800cca8:	b085      	sub	sp, #20
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	685a      	ldr	r2, [r3, #4]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cccc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ccd2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ccd8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cce4:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	431a      	orrs	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ccf0:	2300      	movs	r3, #0

}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bc80      	pop	{r7}
 800ccfa:	4770      	bx	lr

0800ccfc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b088      	sub	sp, #32
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cd0a:	2310      	movs	r3, #16
 800cd0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd0e:	2340      	movs	r3, #64	@ 0x40
 800cd10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd12:	2300      	movs	r3, #0
 800cd14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd1c:	f107 0308 	add.w	r3, r7, #8
 800cd20:	4619      	mov	r1, r3
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f7ff ff78 	bl	800cc18 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cd28:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd2c:	2110      	movs	r1, #16
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 f9d6 	bl	800d0e0 <SDMMC_GetCmdResp1>
 800cd34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd36:	69fb      	ldr	r3, [r7, #28]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3720      	adds	r7, #32
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b088      	sub	sp, #32
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cd4e:	2311      	movs	r3, #17
 800cd50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd52:	2340      	movs	r3, #64	@ 0x40
 800cd54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd56:	2300      	movs	r3, #0
 800cd58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd60:	f107 0308 	add.w	r3, r7, #8
 800cd64:	4619      	mov	r1, r3
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f7ff ff56 	bl	800cc18 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cd6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd70:	2111      	movs	r1, #17
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f9b4 	bl	800d0e0 <SDMMC_GetCmdResp1>
 800cd78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd7a:	69fb      	ldr	r3, [r7, #28]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3720      	adds	r7, #32
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b088      	sub	sp, #32
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cd92:	2312      	movs	r3, #18
 800cd94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd96:	2340      	movs	r3, #64	@ 0x40
 800cd98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cda2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cda4:	f107 0308 	add.w	r3, r7, #8
 800cda8:	4619      	mov	r1, r3
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f7ff ff34 	bl	800cc18 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cdb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdb4:	2112      	movs	r1, #18
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 f992 	bl	800d0e0 <SDMMC_GetCmdResp1>
 800cdbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdbe:	69fb      	ldr	r3, [r7, #28]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3720      	adds	r7, #32
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b088      	sub	sp, #32
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cdd6:	2318      	movs	r3, #24
 800cdd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cdda:	2340      	movs	r3, #64	@ 0x40
 800cddc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cdde:	2300      	movs	r3, #0
 800cde0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cde2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cde6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cde8:	f107 0308 	add.w	r3, r7, #8
 800cdec:	4619      	mov	r1, r3
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7ff ff12 	bl	800cc18 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cdf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdf8:	2118      	movs	r1, #24
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f970 	bl	800d0e0 <SDMMC_GetCmdResp1>
 800ce00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce02:	69fb      	ldr	r3, [r7, #28]
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3720      	adds	r7, #32
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b088      	sub	sp, #32
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ce1a:	2319      	movs	r3, #25
 800ce1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce1e:	2340      	movs	r3, #64	@ 0x40
 800ce20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce22:	2300      	movs	r3, #0
 800ce24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce2c:	f107 0308 	add.w	r3, r7, #8
 800ce30:	4619      	mov	r1, r3
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7ff fef0 	bl	800cc18 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ce38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce3c:	2119      	movs	r1, #25
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 f94e 	bl	800d0e0 <SDMMC_GetCmdResp1>
 800ce44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce46:	69fb      	ldr	r3, [r7, #28]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3720      	adds	r7, #32
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b088      	sub	sp, #32
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ce5c:	230c      	movs	r3, #12
 800ce5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce60:	2340      	movs	r3, #64	@ 0x40
 800ce62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce64:	2300      	movs	r3, #0
 800ce66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce6e:	f107 0308 	add.w	r3, r7, #8
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7ff fecf 	bl	800cc18 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ce7a:	4a05      	ldr	r2, [pc, #20]	@ (800ce90 <SDMMC_CmdStopTransfer+0x40>)
 800ce7c:	210c      	movs	r1, #12
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 f92e 	bl	800d0e0 <SDMMC_GetCmdResp1>
 800ce84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce86:	69fb      	ldr	r3, [r7, #28]
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3720      	adds	r7, #32
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}
 800ce90:	05f5e100 	.word	0x05f5e100

0800ce94 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b08a      	sub	sp, #40	@ 0x28
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cea4:	2307      	movs	r3, #7
 800cea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cea8:	2340      	movs	r3, #64	@ 0x40
 800ceaa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ceac:	2300      	movs	r3, #0
 800ceae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ceb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ceb4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ceb6:	f107 0310 	add.w	r3, r7, #16
 800ceba:	4619      	mov	r1, r3
 800cebc:	68f8      	ldr	r0, [r7, #12]
 800cebe:	f7ff feab 	bl	800cc18 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800cec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cec6:	2107      	movs	r1, #7
 800cec8:	68f8      	ldr	r0, [r7, #12]
 800ceca:	f000 f909 	bl	800d0e0 <SDMMC_GetCmdResp1>
 800cece:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800ced0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3728      	adds	r7, #40	@ 0x28
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ceda:	b580      	push	{r7, lr}
 800cedc:	b088      	sub	sp, #32
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cee2:	2300      	movs	r3, #0
 800cee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cee6:	2300      	movs	r3, #0
 800cee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ceea:	2300      	movs	r3, #0
 800ceec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ceee:	2300      	movs	r3, #0
 800cef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cef6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cef8:	f107 0308 	add.w	r3, r7, #8
 800cefc:	4619      	mov	r1, r3
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f7ff fe8a 	bl	800cc18 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f000 fb21 	bl	800d54c <SDMMC_GetCmdError>
 800cf0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf0c:	69fb      	ldr	r3, [r7, #28]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3720      	adds	r7, #32
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b088      	sub	sp, #32
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cf1e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800cf22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cf24:	2308      	movs	r3, #8
 800cf26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf28:	2340      	movs	r3, #64	@ 0x40
 800cf2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf36:	f107 0308 	add.w	r3, r7, #8
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f7ff fe6b 	bl	800cc18 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fab4 	bl	800d4b0 <SDMMC_GetCmdResp7>
 800cf48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf4a:	69fb      	ldr	r3, [r7, #28]
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3720      	adds	r7, #32
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b088      	sub	sp, #32
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cf62:	2337      	movs	r3, #55	@ 0x37
 800cf64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf66:	2340      	movs	r3, #64	@ 0x40
 800cf68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf74:	f107 0308 	add.w	r3, r7, #8
 800cf78:	4619      	mov	r1, r3
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f7ff fe4c 	bl	800cc18 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800cf80:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf84:	2137      	movs	r1, #55	@ 0x37
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 f8aa 	bl	800d0e0 <SDMMC_GetCmdResp1>
 800cf8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf8e:	69fb      	ldr	r3, [r7, #28]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3720      	adds	r7, #32
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b088      	sub	sp, #32
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cfa8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cfac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cfae:	2329      	movs	r3, #41	@ 0x29
 800cfb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cfb2:	2340      	movs	r3, #64	@ 0x40
 800cfb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfc0:	f107 0308 	add.w	r3, r7, #8
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f7ff fe26 	bl	800cc18 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 f9bd 	bl	800d34c <SDMMC_GetCmdResp3>
 800cfd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfd4:	69fb      	ldr	r3, [r7, #28]
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3720      	adds	r7, #32
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b088      	sub	sp, #32
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cfea:	2302      	movs	r3, #2
 800cfec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cfee:	23c0      	movs	r3, #192	@ 0xc0
 800cff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cff2:	2300      	movs	r3, #0
 800cff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cffa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cffc:	f107 0308 	add.w	r3, r7, #8
 800d000:	4619      	mov	r1, r3
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f7ff fe08 	bl	800cc18 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 f957 	bl	800d2bc <SDMMC_GetCmdResp2>
 800d00e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d010:	69fb      	ldr	r3, [r7, #28]
}
 800d012:	4618      	mov	r0, r3
 800d014:	3720      	adds	r7, #32
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}

0800d01a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b088      	sub	sp, #32
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
 800d022:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d028:	2309      	movs	r3, #9
 800d02a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d02c:	23c0      	movs	r3, #192	@ 0xc0
 800d02e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d030:	2300      	movs	r3, #0
 800d032:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d034:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d038:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d03a:	f107 0308 	add.w	r3, r7, #8
 800d03e:	4619      	mov	r1, r3
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f7ff fde9 	bl	800cc18 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 f938 	bl	800d2bc <SDMMC_GetCmdResp2>
 800d04c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d04e:	69fb      	ldr	r3, [r7, #28]
}
 800d050:	4618      	mov	r0, r3
 800d052:	3720      	adds	r7, #32
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b088      	sub	sp, #32
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d062:	2300      	movs	r3, #0
 800d064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d066:	2303      	movs	r3, #3
 800d068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d06a:	2340      	movs	r3, #64	@ 0x40
 800d06c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d06e:	2300      	movs	r3, #0
 800d070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d072:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d076:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d078:	f107 0308 	add.w	r3, r7, #8
 800d07c:	4619      	mov	r1, r3
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7ff fdca 	bl	800cc18 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d084:	683a      	ldr	r2, [r7, #0]
 800d086:	2103      	movs	r1, #3
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 f99b 	bl	800d3c4 <SDMMC_GetCmdResp6>
 800d08e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d090:	69fb      	ldr	r3, [r7, #28]
}
 800d092:	4618      	mov	r0, r3
 800d094:	3720      	adds	r7, #32
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}

0800d09a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d09a:	b580      	push	{r7, lr}
 800d09c:	b088      	sub	sp, #32
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	6078      	str	r0, [r7, #4]
 800d0a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d0a8:	230d      	movs	r3, #13
 800d0aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0ac:	2340      	movs	r3, #64	@ 0x40
 800d0ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0ba:	f107 0308 	add.w	r3, r7, #8
 800d0be:	4619      	mov	r1, r3
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f7ff fda9 	bl	800cc18 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d0c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0ca:	210d      	movs	r1, #13
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 f807 	bl	800d0e0 <SDMMC_GetCmdResp1>
 800d0d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0d4:	69fb      	ldr	r3, [r7, #28]
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3720      	adds	r7, #32
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
	...

0800d0e0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b088      	sub	sp, #32
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	607a      	str	r2, [r7, #4]
 800d0ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d0ee:	4b70      	ldr	r3, [pc, #448]	@ (800d2b0 <SDMMC_GetCmdResp1+0x1d0>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a70      	ldr	r2, [pc, #448]	@ (800d2b4 <SDMMC_GetCmdResp1+0x1d4>)
 800d0f4:	fba2 2303 	umull	r2, r3, r2, r3
 800d0f8:	0a5a      	lsrs	r2, r3, #9
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	fb02 f303 	mul.w	r3, r2, r3
 800d100:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	1e5a      	subs	r2, r3, #1
 800d106:	61fa      	str	r2, [r7, #28]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d102      	bne.n	800d112 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d10c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d110:	e0c9      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d116:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d0ef      	beq.n	800d102 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1ea      	bne.n	800d102 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d130:	f003 0304 	and.w	r3, r3, #4
 800d134:	2b00      	cmp	r3, #0
 800d136:	d004      	beq.n	800d142 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2204      	movs	r2, #4
 800d13c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d13e:	2304      	movs	r3, #4
 800d140:	e0b1      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d146:	f003 0301 	and.w	r3, r3, #1
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d004      	beq.n	800d158 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2201      	movs	r2, #1
 800d152:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d154:	2301      	movs	r3, #1
 800d156:	e0a6      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	22c5      	movs	r2, #197	@ 0xc5
 800d15c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	f7ff fd83 	bl	800cc6a <SDIO_GetCommandResponse>
 800d164:	4603      	mov	r3, r0
 800d166:	461a      	mov	r2, r3
 800d168:	7afb      	ldrb	r3, [r7, #11]
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d001      	beq.n	800d172 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d16e:	2301      	movs	r3, #1
 800d170:	e099      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d172:	2100      	movs	r1, #0
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f7ff fd84 	bl	800cc82 <SDIO_GetResponse>
 800d17a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d17c:	697a      	ldr	r2, [r7, #20]
 800d17e:	4b4e      	ldr	r3, [pc, #312]	@ (800d2b8 <SDMMC_GetCmdResp1+0x1d8>)
 800d180:	4013      	ands	r3, r2
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d186:	2300      	movs	r3, #0
 800d188:	e08d      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	da02      	bge.n	800d196 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d190:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d194:	e087      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d1a0:	2340      	movs	r3, #64	@ 0x40
 800d1a2:	e080      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d001      	beq.n	800d1b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d1ae:	2380      	movs	r3, #128	@ 0x80
 800d1b0:	e079      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d002      	beq.n	800d1c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d1bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d1c0:	e071      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d002      	beq.n	800d1d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d1cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d1d0:	e069      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d002      	beq.n	800d1e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d1dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1e0:	e061      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d002      	beq.n	800d1f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d1ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d1f0:	e059      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d002      	beq.n	800d202 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d1fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d200:	e051      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d002      	beq.n	800d212 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d20c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d210:	e049      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d21c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d220:	e041      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d002      	beq.n	800d232 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d22c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d230:	e039      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d002      	beq.n	800d242 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d23c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d240:	e031      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d002      	beq.n	800d252 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d24c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d250:	e029      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d002      	beq.n	800d262 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d25c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d260:	e021      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d002      	beq.n	800d272 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d26c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d270:	e019      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d002      	beq.n	800d282 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d27c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d280:	e011      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d002      	beq.n	800d292 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d28c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d290:	e009      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	f003 0308 	and.w	r3, r3, #8
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d29c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d2a0:	e001      	b.n	800d2a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d2a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3720      	adds	r7, #32
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	20000028 	.word	0x20000028
 800d2b4:	10624dd3 	.word	0x10624dd3
 800d2b8:	fdffe008 	.word	0xfdffe008

0800d2bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d2c4:	4b1f      	ldr	r3, [pc, #124]	@ (800d344 <SDMMC_GetCmdResp2+0x88>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4a1f      	ldr	r2, [pc, #124]	@ (800d348 <SDMMC_GetCmdResp2+0x8c>)
 800d2ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ce:	0a5b      	lsrs	r3, r3, #9
 800d2d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2d4:	fb02 f303 	mul.w	r3, r2, r3
 800d2d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	1e5a      	subs	r2, r3, #1
 800d2de:	60fa      	str	r2, [r7, #12]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d102      	bne.n	800d2ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d2e8:	e026      	b.n	800d338 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d0ef      	beq.n	800d2da <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d300:	2b00      	cmp	r3, #0
 800d302:	d1ea      	bne.n	800d2da <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d308:	f003 0304 	and.w	r3, r3, #4
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d004      	beq.n	800d31a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2204      	movs	r2, #4
 800d314:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d316:	2304      	movs	r3, #4
 800d318:	e00e      	b.n	800d338 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d31e:	f003 0301 	and.w	r3, r3, #1
 800d322:	2b00      	cmp	r3, #0
 800d324:	d004      	beq.n	800d330 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2201      	movs	r2, #1
 800d32a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d32c:	2301      	movs	r3, #1
 800d32e:	e003      	b.n	800d338 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	22c5      	movs	r2, #197	@ 0xc5
 800d334:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3714      	adds	r7, #20
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bc80      	pop	{r7}
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	20000028 	.word	0x20000028
 800d348:	10624dd3 	.word	0x10624dd3

0800d34c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b085      	sub	sp, #20
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d354:	4b19      	ldr	r3, [pc, #100]	@ (800d3bc <SDMMC_GetCmdResp3+0x70>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a19      	ldr	r2, [pc, #100]	@ (800d3c0 <SDMMC_GetCmdResp3+0x74>)
 800d35a:	fba2 2303 	umull	r2, r3, r2, r3
 800d35e:	0a5b      	lsrs	r3, r3, #9
 800d360:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d364:	fb02 f303 	mul.w	r3, r2, r3
 800d368:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	1e5a      	subs	r2, r3, #1
 800d36e:	60fa      	str	r2, [r7, #12]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d102      	bne.n	800d37a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d374:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d378:	e01b      	b.n	800d3b2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d37e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d386:	2b00      	cmp	r3, #0
 800d388:	d0ef      	beq.n	800d36a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d390:	2b00      	cmp	r3, #0
 800d392:	d1ea      	bne.n	800d36a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d398:	f003 0304 	and.w	r3, r3, #4
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d004      	beq.n	800d3aa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2204      	movs	r2, #4
 800d3a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3a6:	2304      	movs	r3, #4
 800d3a8:	e003      	b.n	800d3b2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	22c5      	movs	r2, #197	@ 0xc5
 800d3ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d3b0:	2300      	movs	r3, #0
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3714      	adds	r7, #20
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bc80      	pop	{r7}
 800d3ba:	4770      	bx	lr
 800d3bc:	20000028 	.word	0x20000028
 800d3c0:	10624dd3 	.word	0x10624dd3

0800d3c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b088      	sub	sp, #32
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	607a      	str	r2, [r7, #4]
 800d3d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d3d2:	4b35      	ldr	r3, [pc, #212]	@ (800d4a8 <SDMMC_GetCmdResp6+0xe4>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4a35      	ldr	r2, [pc, #212]	@ (800d4ac <SDMMC_GetCmdResp6+0xe8>)
 800d3d8:	fba2 2303 	umull	r2, r3, r2, r3
 800d3dc:	0a5b      	lsrs	r3, r3, #9
 800d3de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3e2:	fb02 f303 	mul.w	r3, r2, r3
 800d3e6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	1e5a      	subs	r2, r3, #1
 800d3ec:	61fa      	str	r2, [r7, #28]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d102      	bne.n	800d3f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d3f6:	e052      	b.n	800d49e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3fc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d3fe:	69bb      	ldr	r3, [r7, #24]
 800d400:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d404:	2b00      	cmp	r3, #0
 800d406:	d0ef      	beq.n	800d3e8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d1ea      	bne.n	800d3e8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d416:	f003 0304 	and.w	r3, r3, #4
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d004      	beq.n	800d428 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2204      	movs	r2, #4
 800d422:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d424:	2304      	movs	r3, #4
 800d426:	e03a      	b.n	800d49e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d42c:	f003 0301 	and.w	r3, r3, #1
 800d430:	2b00      	cmp	r3, #0
 800d432:	d004      	beq.n	800d43e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2201      	movs	r2, #1
 800d438:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d43a:	2301      	movs	r3, #1
 800d43c:	e02f      	b.n	800d49e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f7ff fc13 	bl	800cc6a <SDIO_GetCommandResponse>
 800d444:	4603      	mov	r3, r0
 800d446:	461a      	mov	r2, r3
 800d448:	7afb      	ldrb	r3, [r7, #11]
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d001      	beq.n	800d452 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d44e:	2301      	movs	r3, #1
 800d450:	e025      	b.n	800d49e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	22c5      	movs	r2, #197	@ 0xc5
 800d456:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d458:	2100      	movs	r1, #0
 800d45a:	68f8      	ldr	r0, [r7, #12]
 800d45c:	f7ff fc11 	bl	800cc82 <SDIO_GetResponse>
 800d460:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d106      	bne.n	800d47a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	0c1b      	lsrs	r3, r3, #16
 800d470:	b29a      	uxth	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d476:	2300      	movs	r3, #0
 800d478:	e011      	b.n	800d49e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d480:	2b00      	cmp	r3, #0
 800d482:	d002      	beq.n	800d48a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d488:	e009      	b.n	800d49e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d490:	2b00      	cmp	r3, #0
 800d492:	d002      	beq.n	800d49a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d494:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d498:	e001      	b.n	800d49e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d49a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3720      	adds	r7, #32
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	20000028 	.word	0x20000028
 800d4ac:	10624dd3 	.word	0x10624dd3

0800d4b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b085      	sub	sp, #20
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d4b8:	4b22      	ldr	r3, [pc, #136]	@ (800d544 <SDMMC_GetCmdResp7+0x94>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a22      	ldr	r2, [pc, #136]	@ (800d548 <SDMMC_GetCmdResp7+0x98>)
 800d4be:	fba2 2303 	umull	r2, r3, r2, r3
 800d4c2:	0a5b      	lsrs	r3, r3, #9
 800d4c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4c8:	fb02 f303 	mul.w	r3, r2, r3
 800d4cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	1e5a      	subs	r2, r3, #1
 800d4d2:	60fa      	str	r2, [r7, #12]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d102      	bne.n	800d4de <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d4d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d4dc:	e02c      	b.n	800d538 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d0ef      	beq.n	800d4ce <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d1ea      	bne.n	800d4ce <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4fc:	f003 0304 	and.w	r3, r3, #4
 800d500:	2b00      	cmp	r3, #0
 800d502:	d004      	beq.n	800d50e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2204      	movs	r2, #4
 800d508:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d50a:	2304      	movs	r3, #4
 800d50c:	e014      	b.n	800d538 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d512:	f003 0301 	and.w	r3, r3, #1
 800d516:	2b00      	cmp	r3, #0
 800d518:	d004      	beq.n	800d524 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2201      	movs	r2, #1
 800d51e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d520:	2301      	movs	r3, #1
 800d522:	e009      	b.n	800d538 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d002      	beq.n	800d536 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2240      	movs	r2, #64	@ 0x40
 800d534:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d536:	2300      	movs	r3, #0
  
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3714      	adds	r7, #20
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bc80      	pop	{r7}
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	20000028 	.word	0x20000028
 800d548:	10624dd3 	.word	0x10624dd3

0800d54c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b085      	sub	sp, #20
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d554:	4b10      	ldr	r3, [pc, #64]	@ (800d598 <SDMMC_GetCmdError+0x4c>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a10      	ldr	r2, [pc, #64]	@ (800d59c <SDMMC_GetCmdError+0x50>)
 800d55a:	fba2 2303 	umull	r2, r3, r2, r3
 800d55e:	0a5b      	lsrs	r3, r3, #9
 800d560:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d564:	fb02 f303 	mul.w	r3, r2, r3
 800d568:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	1e5a      	subs	r2, r3, #1
 800d56e:	60fa      	str	r2, [r7, #12]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d102      	bne.n	800d57a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d574:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d578:	e009      	b.n	800d58e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d57e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d582:	2b00      	cmp	r3, #0
 800d584:	d0f1      	beq.n	800d56a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	22c5      	movs	r2, #197	@ 0xc5
 800d58a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800d58c:	2300      	movs	r3, #0
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3714      	adds	r7, #20
 800d592:	46bd      	mov	sp, r7
 800d594:	bc80      	pop	{r7}
 800d596:	4770      	bx	lr
 800d598:	20000028 	.word	0x20000028
 800d59c:	10624dd3 	.word	0x10624dd3

0800d5a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d5a4:	4904      	ldr	r1, [pc, #16]	@ (800d5b8 <MX_FATFS_Init+0x18>)
 800d5a6:	4805      	ldr	r0, [pc, #20]	@ (800d5bc <MX_FATFS_Init+0x1c>)
 800d5a8:	f003 fc26 	bl	8010df8 <FATFS_LinkDriver>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	4b03      	ldr	r3, [pc, #12]	@ (800d5c0 <MX_FATFS_Init+0x20>)
 800d5b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d5b4:	bf00      	nop
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	20000e40 	.word	0x20000e40
 800d5bc:	08014540 	.word	0x08014540
 800d5c0:	20000e3c 	.word	0x20000e3c

0800d5c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d5c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bc80      	pop	{r7}
 800d5d0:	4770      	bx	lr
	...

0800d5d4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d5de:	f000 f86b 	bl	800d6b8 <BSP_SD_IsDetected>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d001      	beq.n	800d5ec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e005      	b.n	800d5f8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d5ec:	4804      	ldr	r0, [pc, #16]	@ (800d600 <BSP_SD_Init+0x2c>)
 800d5ee:	f7fc fba1 	bl	8009d34 <HAL_SD_Init>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800d5f6:	79fb      	ldrb	r3, [r7, #7]
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	20000894 	.word	0x20000894

0800d604 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b088      	sub	sp, #32
 800d608:	af02      	add	r7, sp, #8
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	607a      	str	r2, [r7, #4]
 800d610:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d612:	2300      	movs	r3, #0
 800d614:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	9300      	str	r3, [sp, #0]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	68ba      	ldr	r2, [r7, #8]
 800d61e:	68f9      	ldr	r1, [r7, #12]
 800d620:	4806      	ldr	r0, [pc, #24]	@ (800d63c <BSP_SD_ReadBlocks+0x38>)
 800d622:	f7fc fc37 	bl	8009e94 <HAL_SD_ReadBlocks>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d001      	beq.n	800d630 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d630:	7dfb      	ldrb	r3, [r7, #23]
}
 800d632:	4618      	mov	r0, r3
 800d634:	3718      	adds	r7, #24
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	20000894 	.word	0x20000894

0800d640 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b088      	sub	sp, #32
 800d644:	af02      	add	r7, sp, #8
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	607a      	str	r2, [r7, #4]
 800d64c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d64e:	2300      	movs	r3, #0
 800d650:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	9300      	str	r3, [sp, #0]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	68ba      	ldr	r2, [r7, #8]
 800d65a:	68f9      	ldr	r1, [r7, #12]
 800d65c:	4806      	ldr	r0, [pc, #24]	@ (800d678 <BSP_SD_WriteBlocks+0x38>)
 800d65e:	f7fc fdf7 	bl	800a250 <HAL_SD_WriteBlocks>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d001      	beq.n	800d66c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d668:	2301      	movs	r3, #1
 800d66a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d66c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3718      	adds	r7, #24
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	20000894 	.word	0x20000894

0800d67c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d680:	4805      	ldr	r0, [pc, #20]	@ (800d698 <BSP_SD_GetCardState+0x1c>)
 800d682:	f7fd f93a 	bl	800a8fa <HAL_SD_GetCardState>
 800d686:	4603      	mov	r3, r0
 800d688:	2b04      	cmp	r3, #4
 800d68a:	bf14      	ite	ne
 800d68c:	2301      	movne	r3, #1
 800d68e:	2300      	moveq	r3, #0
 800d690:	b2db      	uxtb	r3, r3
}
 800d692:	4618      	mov	r0, r3
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	20000894 	.word	0x20000894

0800d69c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d6a4:	6879      	ldr	r1, [r7, #4]
 800d6a6:	4803      	ldr	r0, [pc, #12]	@ (800d6b4 <BSP_SD_GetCardInfo+0x18>)
 800d6a8:	f7fd f8fc 	bl	800a8a4 <HAL_SD_GetCardInfo>
}
 800d6ac:	bf00      	nop
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	20000894 	.word	0x20000894

0800d6b8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b083      	sub	sp, #12
 800d6bc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800d6c2:	79fb      	ldrb	r3, [r7, #7]
 800d6c4:	b2db      	uxtb	r3, r3
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	370c      	adds	r7, #12
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bc80      	pop	{r7}
 800d6ce:	4770      	bx	lr

0800d6d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d6da:	79fb      	ldrb	r3, [r7, #7]
 800d6dc:	4a08      	ldr	r2, [pc, #32]	@ (800d700 <disk_status+0x30>)
 800d6de:	009b      	lsls	r3, r3, #2
 800d6e0:	4413      	add	r3, r2
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	79fa      	ldrb	r2, [r7, #7]
 800d6e8:	4905      	ldr	r1, [pc, #20]	@ (800d700 <disk_status+0x30>)
 800d6ea:	440a      	add	r2, r1
 800d6ec:	7a12      	ldrb	r2, [r2, #8]
 800d6ee:	4610      	mov	r0, r2
 800d6f0:	4798      	blx	r3
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3710      	adds	r7, #16
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	200012c4 	.word	0x200012c4

0800d704 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	4603      	mov	r3, r0
 800d70c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d70e:	2300      	movs	r3, #0
 800d710:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800d712:	79fb      	ldrb	r3, [r7, #7]
 800d714:	4a0d      	ldr	r2, [pc, #52]	@ (800d74c <disk_initialize+0x48>)
 800d716:	5cd3      	ldrb	r3, [r2, r3]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d111      	bne.n	800d740 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800d71c:	79fb      	ldrb	r3, [r7, #7]
 800d71e:	4a0b      	ldr	r2, [pc, #44]	@ (800d74c <disk_initialize+0x48>)
 800d720:	2101      	movs	r1, #1
 800d722:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d724:	79fb      	ldrb	r3, [r7, #7]
 800d726:	4a09      	ldr	r2, [pc, #36]	@ (800d74c <disk_initialize+0x48>)
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	4413      	add	r3, r2
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	79fa      	ldrb	r2, [r7, #7]
 800d732:	4906      	ldr	r1, [pc, #24]	@ (800d74c <disk_initialize+0x48>)
 800d734:	440a      	add	r2, r1
 800d736:	7a12      	ldrb	r2, [r2, #8]
 800d738:	4610      	mov	r0, r2
 800d73a:	4798      	blx	r3
 800d73c:	4603      	mov	r3, r0
 800d73e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d740:	7bfb      	ldrb	r3, [r7, #15]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	200012c4 	.word	0x200012c4

0800d750 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d750:	b590      	push	{r4, r7, lr}
 800d752:	b087      	sub	sp, #28
 800d754:	af00      	add	r7, sp, #0
 800d756:	60b9      	str	r1, [r7, #8]
 800d758:	607a      	str	r2, [r7, #4]
 800d75a:	603b      	str	r3, [r7, #0]
 800d75c:	4603      	mov	r3, r0
 800d75e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d760:	7bfb      	ldrb	r3, [r7, #15]
 800d762:	4a0a      	ldr	r2, [pc, #40]	@ (800d78c <disk_read+0x3c>)
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	4413      	add	r3, r2
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	689c      	ldr	r4, [r3, #8]
 800d76c:	7bfb      	ldrb	r3, [r7, #15]
 800d76e:	4a07      	ldr	r2, [pc, #28]	@ (800d78c <disk_read+0x3c>)
 800d770:	4413      	add	r3, r2
 800d772:	7a18      	ldrb	r0, [r3, #8]
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	68b9      	ldr	r1, [r7, #8]
 800d77a:	47a0      	blx	r4
 800d77c:	4603      	mov	r3, r0
 800d77e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d780:	7dfb      	ldrb	r3, [r7, #23]
}
 800d782:	4618      	mov	r0, r3
 800d784:	371c      	adds	r7, #28
 800d786:	46bd      	mov	sp, r7
 800d788:	bd90      	pop	{r4, r7, pc}
 800d78a:	bf00      	nop
 800d78c:	200012c4 	.word	0x200012c4

0800d790 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d790:	b590      	push	{r4, r7, lr}
 800d792:	b087      	sub	sp, #28
 800d794:	af00      	add	r7, sp, #0
 800d796:	60b9      	str	r1, [r7, #8]
 800d798:	607a      	str	r2, [r7, #4]
 800d79a:	603b      	str	r3, [r7, #0]
 800d79c:	4603      	mov	r3, r0
 800d79e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d7a0:	7bfb      	ldrb	r3, [r7, #15]
 800d7a2:	4a0a      	ldr	r2, [pc, #40]	@ (800d7cc <disk_write+0x3c>)
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	4413      	add	r3, r2
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	68dc      	ldr	r4, [r3, #12]
 800d7ac:	7bfb      	ldrb	r3, [r7, #15]
 800d7ae:	4a07      	ldr	r2, [pc, #28]	@ (800d7cc <disk_write+0x3c>)
 800d7b0:	4413      	add	r3, r2
 800d7b2:	7a18      	ldrb	r0, [r3, #8]
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	68b9      	ldr	r1, [r7, #8]
 800d7ba:	47a0      	blx	r4
 800d7bc:	4603      	mov	r3, r0
 800d7be:	75fb      	strb	r3, [r7, #23]
  return res;
 800d7c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	371c      	adds	r7, #28
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd90      	pop	{r4, r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	200012c4 	.word	0x200012c4

0800d7d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	603a      	str	r2, [r7, #0]
 800d7da:	71fb      	strb	r3, [r7, #7]
 800d7dc:	460b      	mov	r3, r1
 800d7de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d7e0:	79fb      	ldrb	r3, [r7, #7]
 800d7e2:	4a09      	ldr	r2, [pc, #36]	@ (800d808 <disk_ioctl+0x38>)
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	4413      	add	r3, r2
 800d7e8:	685b      	ldr	r3, [r3, #4]
 800d7ea:	691b      	ldr	r3, [r3, #16]
 800d7ec:	79fa      	ldrb	r2, [r7, #7]
 800d7ee:	4906      	ldr	r1, [pc, #24]	@ (800d808 <disk_ioctl+0x38>)
 800d7f0:	440a      	add	r2, r1
 800d7f2:	7a10      	ldrb	r0, [r2, #8]
 800d7f4:	79b9      	ldrb	r1, [r7, #6]
 800d7f6:	683a      	ldr	r2, [r7, #0]
 800d7f8:	4798      	blx	r3
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	73fb      	strb	r3, [r7, #15]
  return res;
 800d7fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d800:	4618      	mov	r0, r3
 800d802:	3710      	adds	r7, #16
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	200012c4 	.word	0x200012c4

0800d80c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d80c:	b480      	push	{r7}
 800d80e:	b087      	sub	sp, #28
 800d810:	af00      	add	r7, sp, #0
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800d820:	e007      	b.n	800d832 <mem_cpy+0x26>
		*d++ = *s++;
 800d822:	693a      	ldr	r2, [r7, #16]
 800d824:	1c53      	adds	r3, r2, #1
 800d826:	613b      	str	r3, [r7, #16]
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	1c59      	adds	r1, r3, #1
 800d82c:	6179      	str	r1, [r7, #20]
 800d82e:	7812      	ldrb	r2, [r2, #0]
 800d830:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	1e5a      	subs	r2, r3, #1
 800d836:	607a      	str	r2, [r7, #4]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d1f2      	bne.n	800d822 <mem_cpy+0x16>
}
 800d83c:	bf00      	nop
 800d83e:	bf00      	nop
 800d840:	371c      	adds	r7, #28
 800d842:	46bd      	mov	sp, r7
 800d844:	bc80      	pop	{r7}
 800d846:	4770      	bx	lr

0800d848 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d848:	b480      	push	{r7}
 800d84a:	b087      	sub	sp, #28
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800d858:	e005      	b.n	800d866 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	1c5a      	adds	r2, r3, #1
 800d85e:	617a      	str	r2, [r7, #20]
 800d860:	68ba      	ldr	r2, [r7, #8]
 800d862:	b2d2      	uxtb	r2, r2
 800d864:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	1e5a      	subs	r2, r3, #1
 800d86a:	607a      	str	r2, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d1f4      	bne.n	800d85a <mem_set+0x12>
}
 800d870:	bf00      	nop
 800d872:	bf00      	nop
 800d874:	371c      	adds	r7, #28
 800d876:	46bd      	mov	sp, r7
 800d878:	bc80      	pop	{r7}
 800d87a:	4770      	bx	lr

0800d87c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800d87c:	b480      	push	{r7}
 800d87e:	b089      	sub	sp, #36	@ 0x24
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	61fb      	str	r3, [r7, #28]
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d890:	2300      	movs	r3, #0
 800d892:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800d894:	bf00      	nop
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	1e5a      	subs	r2, r3, #1
 800d89a:	607a      	str	r2, [r7, #4]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00d      	beq.n	800d8bc <mem_cmp+0x40>
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	1c5a      	adds	r2, r3, #1
 800d8a4:	61fa      	str	r2, [r7, #28]
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	1c5a      	adds	r2, r3, #1
 800d8ae:	61ba      	str	r2, [r7, #24]
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	1acb      	subs	r3, r1, r3
 800d8b4:	617b      	str	r3, [r7, #20]
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d0ec      	beq.n	800d896 <mem_cmp+0x1a>
	return r;
 800d8bc:	697b      	ldr	r3, [r7, #20]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3724      	adds	r7, #36	@ 0x24
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bc80      	pop	{r7}
 800d8c6:	4770      	bx	lr

0800d8c8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d8d2:	e002      	b.n	800d8da <chk_chr+0x12>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	607b      	str	r3, [r7, #4]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d005      	beq.n	800d8ee <chk_chr+0x26>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d1f2      	bne.n	800d8d4 <chk_chr+0xc>
	return *str;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	781b      	ldrb	r3, [r3, #0]
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	370c      	adds	r7, #12
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bc80      	pop	{r7}
 800d8fa:	4770      	bx	lr

0800d8fc <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800d90a:	4618      	mov	r0, r3
 800d90c:	f003 fc06 	bl	801111c <ff_req_grant>
 800d910:	4603      	mov	r3, r0
}
 800d912:	4618      	mov	r0, r3
 800d914:	3708      	adds	r7, #8
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}

0800d91a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b082      	sub	sp, #8
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
 800d922:	460b      	mov	r3, r1
 800d924:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d011      	beq.n	800d950 <unlock_fs+0x36>
 800d92c:	78fb      	ldrb	r3, [r7, #3]
 800d92e:	2b0c      	cmp	r3, #12
 800d930:	d00e      	beq.n	800d950 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800d932:	78fb      	ldrb	r3, [r7, #3]
 800d934:	2b0b      	cmp	r3, #11
 800d936:	d00b      	beq.n	800d950 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800d938:	78fb      	ldrb	r3, [r7, #3]
 800d93a:	2b09      	cmp	r3, #9
 800d93c:	d008      	beq.n	800d950 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800d93e:	78fb      	ldrb	r3, [r7, #3]
 800d940:	2b0f      	cmp	r3, #15
 800d942:	d005      	beq.n	800d950 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800d94a:	4618      	mov	r0, r3
 800d94c:	f003 fbfb 	bl	8011146 <ff_rel_grant>
	}
}
 800d950:	bf00      	nop
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d962:	2300      	movs	r3, #0
 800d964:	60bb      	str	r3, [r7, #8]
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	60fb      	str	r3, [r7, #12]
 800d96a:	e038      	b.n	800d9de <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800d96c:	492f      	ldr	r1, [pc, #188]	@ (800da2c <chk_lock+0xd4>)
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	4613      	mov	r3, r2
 800d972:	005b      	lsls	r3, r3, #1
 800d974:	4413      	add	r3, r2
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	440b      	add	r3, r1
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d029      	beq.n	800d9d4 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800d980:	492a      	ldr	r1, [pc, #168]	@ (800da2c <chk_lock+0xd4>)
 800d982:	68fa      	ldr	r2, [r7, #12]
 800d984:	4613      	mov	r3, r2
 800d986:	005b      	lsls	r3, r3, #1
 800d988:	4413      	add	r3, r2
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	440b      	add	r3, r1
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800d996:	429a      	cmp	r2, r3
 800d998:	d11e      	bne.n	800d9d8 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800d99a:	4924      	ldr	r1, [pc, #144]	@ (800da2c <chk_lock+0xd4>)
 800d99c:	68fa      	ldr	r2, [r7, #12]
 800d99e:	4613      	mov	r3, r2
 800d9a0:	005b      	lsls	r3, r3, #1
 800d9a2:	4413      	add	r3, r2
 800d9a4:	009b      	lsls	r3, r3, #2
 800d9a6:	440b      	add	r3, r1
 800d9a8:	3304      	adds	r3, #4
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d110      	bne.n	800d9d8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800d9b6:	491d      	ldr	r1, [pc, #116]	@ (800da2c <chk_lock+0xd4>)
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	4613      	mov	r3, r2
 800d9bc:	005b      	lsls	r3, r3, #1
 800d9be:	4413      	add	r3, r2
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	440b      	add	r3, r1
 800d9c4:	3308      	adds	r3, #8
 800d9c6:	881a      	ldrh	r2, [r3, #0]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d102      	bne.n	800d9d8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800d9d2:	e007      	b.n	800d9e4 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	60fb      	str	r3, [r7, #12]
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d9c3      	bls.n	800d96c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	d109      	bne.n	800d9fe <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d102      	bne.n	800d9f6 <chk_lock+0x9e>
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	2b02      	cmp	r3, #2
 800d9f4:	d101      	bne.n	800d9fa <chk_lock+0xa2>
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	e013      	b.n	800da22 <chk_lock+0xca>
 800d9fa:	2312      	movs	r3, #18
 800d9fc:	e011      	b.n	800da22 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d10b      	bne.n	800da1c <chk_lock+0xc4>
 800da04:	4909      	ldr	r1, [pc, #36]	@ (800da2c <chk_lock+0xd4>)
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	4613      	mov	r3, r2
 800da0a:	005b      	lsls	r3, r3, #1
 800da0c:	4413      	add	r3, r2
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	440b      	add	r3, r1
 800da12:	330a      	adds	r3, #10
 800da14:	881b      	ldrh	r3, [r3, #0]
 800da16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da1a:	d101      	bne.n	800da20 <chk_lock+0xc8>
 800da1c:	2310      	movs	r3, #16
 800da1e:	e000      	b.n	800da22 <chk_lock+0xca>
 800da20:	2300      	movs	r3, #0
}
 800da22:	4618      	mov	r0, r3
 800da24:	3714      	adds	r7, #20
 800da26:	46bd      	mov	sp, r7
 800da28:	bc80      	pop	{r7}
 800da2a:	4770      	bx	lr
 800da2c:	200012ac 	.word	0x200012ac

0800da30 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800da36:	2300      	movs	r3, #0
 800da38:	607b      	str	r3, [r7, #4]
 800da3a:	e002      	b.n	800da42 <enq_lock+0x12>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	3301      	adds	r3, #1
 800da40:	607b      	str	r3, [r7, #4]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2b01      	cmp	r3, #1
 800da46:	d809      	bhi.n	800da5c <enq_lock+0x2c>
 800da48:	490a      	ldr	r1, [pc, #40]	@ (800da74 <enq_lock+0x44>)
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	4613      	mov	r3, r2
 800da4e:	005b      	lsls	r3, r3, #1
 800da50:	4413      	add	r3, r2
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	440b      	add	r3, r1
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1ef      	bne.n	800da3c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2b02      	cmp	r3, #2
 800da60:	bf14      	ite	ne
 800da62:	2301      	movne	r3, #1
 800da64:	2300      	moveq	r3, #0
 800da66:	b2db      	uxtb	r3, r3
}
 800da68:	4618      	mov	r0, r3
 800da6a:	370c      	adds	r7, #12
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bc80      	pop	{r7}
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	200012ac 	.word	0x200012ac

0800da78 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800da78:	b480      	push	{r7}
 800da7a:	b085      	sub	sp, #20
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800da82:	2300      	movs	r3, #0
 800da84:	60fb      	str	r3, [r7, #12]
 800da86:	e02b      	b.n	800dae0 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800da88:	4955      	ldr	r1, [pc, #340]	@ (800dbe0 <inc_lock+0x168>)
 800da8a:	68fa      	ldr	r2, [r7, #12]
 800da8c:	4613      	mov	r3, r2
 800da8e:	005b      	lsls	r3, r3, #1
 800da90:	4413      	add	r3, r2
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	440b      	add	r3, r1
 800da96:	681a      	ldr	r2, [r3, #0]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d11b      	bne.n	800dada <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800daa2:	494f      	ldr	r1, [pc, #316]	@ (800dbe0 <inc_lock+0x168>)
 800daa4:	68fa      	ldr	r2, [r7, #12]
 800daa6:	4613      	mov	r3, r2
 800daa8:	005b      	lsls	r3, r3, #1
 800daaa:	4413      	add	r3, r2
 800daac:	009b      	lsls	r3, r3, #2
 800daae:	440b      	add	r3, r1
 800dab0:	3304      	adds	r3, #4
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 800daba:	429a      	cmp	r2, r3
 800dabc:	d10d      	bne.n	800dada <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800dabe:	4948      	ldr	r1, [pc, #288]	@ (800dbe0 <inc_lock+0x168>)
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	4613      	mov	r3, r2
 800dac4:	005b      	lsls	r3, r3, #1
 800dac6:	4413      	add	r3, r2
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	440b      	add	r3, r1
 800dacc:	3308      	adds	r3, #8
 800dace:	881a      	ldrh	r2, [r3, #0]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d006      	beq.n	800dae8 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	3301      	adds	r3, #1
 800dade:	60fb      	str	r3, [r7, #12]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d9d0      	bls.n	800da88 <inc_lock+0x10>
 800dae6:	e000      	b.n	800daea <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800dae8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2b02      	cmp	r3, #2
 800daee:	d145      	bne.n	800db7c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800daf0:	2300      	movs	r3, #0
 800daf2:	60fb      	str	r3, [r7, #12]
 800daf4:	e002      	b.n	800dafc <inc_lock+0x84>
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	3301      	adds	r3, #1
 800dafa:	60fb      	str	r3, [r7, #12]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d809      	bhi.n	800db16 <inc_lock+0x9e>
 800db02:	4937      	ldr	r1, [pc, #220]	@ (800dbe0 <inc_lock+0x168>)
 800db04:	68fa      	ldr	r2, [r7, #12]
 800db06:	4613      	mov	r3, r2
 800db08:	005b      	lsls	r3, r3, #1
 800db0a:	4413      	add	r3, r2
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	440b      	add	r3, r1
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d1ef      	bne.n	800daf6 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2b02      	cmp	r3, #2
 800db1a:	d101      	bne.n	800db20 <inc_lock+0xa8>
 800db1c:	2300      	movs	r3, #0
 800db1e:	e05a      	b.n	800dbd6 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 800db26:	482e      	ldr	r0, [pc, #184]	@ (800dbe0 <inc_lock+0x168>)
 800db28:	68fa      	ldr	r2, [r7, #12]
 800db2a:	4613      	mov	r3, r2
 800db2c:	005b      	lsls	r3, r3, #1
 800db2e:	4413      	add	r3, r2
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	4403      	add	r3, r0
 800db34:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800db3c:	4828      	ldr	r0, [pc, #160]	@ (800dbe0 <inc_lock+0x168>)
 800db3e:	68fa      	ldr	r2, [r7, #12]
 800db40:	4613      	mov	r3, r2
 800db42:	005b      	lsls	r3, r3, #1
 800db44:	4413      	add	r3, r2
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	4403      	add	r3, r0
 800db4a:	3304      	adds	r3, #4
 800db4c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 800db54:	4922      	ldr	r1, [pc, #136]	@ (800dbe0 <inc_lock+0x168>)
 800db56:	68fa      	ldr	r2, [r7, #12]
 800db58:	4613      	mov	r3, r2
 800db5a:	005b      	lsls	r3, r3, #1
 800db5c:	4413      	add	r3, r2
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	440b      	add	r3, r1
 800db62:	3308      	adds	r3, #8
 800db64:	4602      	mov	r2, r0
 800db66:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800db68:	491d      	ldr	r1, [pc, #116]	@ (800dbe0 <inc_lock+0x168>)
 800db6a:	68fa      	ldr	r2, [r7, #12]
 800db6c:	4613      	mov	r3, r2
 800db6e:	005b      	lsls	r3, r3, #1
 800db70:	4413      	add	r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	440b      	add	r3, r1
 800db76:	330a      	adds	r3, #10
 800db78:	2200      	movs	r2, #0
 800db7a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00c      	beq.n	800db9c <inc_lock+0x124>
 800db82:	4917      	ldr	r1, [pc, #92]	@ (800dbe0 <inc_lock+0x168>)
 800db84:	68fa      	ldr	r2, [r7, #12]
 800db86:	4613      	mov	r3, r2
 800db88:	005b      	lsls	r3, r3, #1
 800db8a:	4413      	add	r3, r2
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	440b      	add	r3, r1
 800db90:	330a      	adds	r3, #10
 800db92:	881b      	ldrh	r3, [r3, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d001      	beq.n	800db9c <inc_lock+0x124>
 800db98:	2300      	movs	r3, #0
 800db9a:	e01c      	b.n	800dbd6 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d10b      	bne.n	800dbba <inc_lock+0x142>
 800dba2:	490f      	ldr	r1, [pc, #60]	@ (800dbe0 <inc_lock+0x168>)
 800dba4:	68fa      	ldr	r2, [r7, #12]
 800dba6:	4613      	mov	r3, r2
 800dba8:	005b      	lsls	r3, r3, #1
 800dbaa:	4413      	add	r3, r2
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	440b      	add	r3, r1
 800dbb0:	330a      	adds	r3, #10
 800dbb2:	881b      	ldrh	r3, [r3, #0]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	b299      	uxth	r1, r3
 800dbb8:	e001      	b.n	800dbbe <inc_lock+0x146>
 800dbba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800dbbe:	4808      	ldr	r0, [pc, #32]	@ (800dbe0 <inc_lock+0x168>)
 800dbc0:	68fa      	ldr	r2, [r7, #12]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	005b      	lsls	r3, r3, #1
 800dbc6:	4413      	add	r3, r2
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	4403      	add	r3, r0
 800dbcc:	330a      	adds	r3, #10
 800dbce:	460a      	mov	r2, r1
 800dbd0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	3301      	adds	r3, #1
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3714      	adds	r7, #20
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bc80      	pop	{r7}
 800dbde:	4770      	bx	lr
 800dbe0:	200012ac 	.word	0x200012ac

0800dbe4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b085      	sub	sp, #20
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800dbec:	2300      	movs	r3, #0
 800dbee:	60fb      	str	r3, [r7, #12]
 800dbf0:	e016      	b.n	800dc20 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dbf2:	4910      	ldr	r1, [pc, #64]	@ (800dc34 <clear_lock+0x50>)
 800dbf4:	68fa      	ldr	r2, [r7, #12]
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	005b      	lsls	r3, r3, #1
 800dbfa:	4413      	add	r3, r2
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	440b      	add	r3, r1
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d108      	bne.n	800dc1a <clear_lock+0x36>
 800dc08:	490a      	ldr	r1, [pc, #40]	@ (800dc34 <clear_lock+0x50>)
 800dc0a:	68fa      	ldr	r2, [r7, #12]
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	005b      	lsls	r3, r3, #1
 800dc10:	4413      	add	r3, r2
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	440b      	add	r3, r1
 800dc16:	2200      	movs	r2, #0
 800dc18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	60fb      	str	r3, [r7, #12]
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d9e5      	bls.n	800dbf2 <clear_lock+0xe>
	}
}
 800dc26:	bf00      	nop
 800dc28:	bf00      	nop
 800dc2a:	3714      	adds	r7, #20
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bc80      	pop	{r7}
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop
 800dc34:	200012ac 	.word	0x200012ac

0800dc38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b086      	sub	sp, #24
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800dc40:	2300      	movs	r3, #0
 800dc42:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d038      	beq.n	800dcc0 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800dc54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800dc5c:	6879      	ldr	r1, [r7, #4]
 800dc5e:	2301      	movs	r3, #1
 800dc60:	697a      	ldr	r2, [r7, #20]
 800dc62:	f7ff fd95 	bl	800d790 <disk_write>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d002      	beq.n	800dc72 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	73fb      	strb	r3, [r7, #15]
 800dc70:	e026      	b.n	800dcc0 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800dc80:	697a      	ldr	r2, [r7, #20]
 800dc82:	1ad2      	subs	r2, r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d218      	bcs.n	800dcc0 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800dc94:	613b      	str	r3, [r7, #16]
 800dc96:	e010      	b.n	800dcba <sync_window+0x82>
					wsect += fs->fsize;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800dc9e:	697a      	ldr	r2, [r7, #20]
 800dca0:	4413      	add	r3, r2
 800dca2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800dcaa:	6879      	ldr	r1, [r7, #4]
 800dcac:	2301      	movs	r3, #1
 800dcae:	697a      	ldr	r2, [r7, #20]
 800dcb0:	f7ff fd6e 	bl	800d790 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	613b      	str	r3, [r7, #16]
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d8eb      	bhi.n	800dc98 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800dcc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3718      	adds	r7, #24
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}

0800dcca <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b084      	sub	sp, #16
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
 800dcd2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800dcde:	683a      	ldr	r2, [r7, #0]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d01b      	beq.n	800dd1c <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f7ff ffa7 	bl	800dc38 <sync_window>
 800dcea:	4603      	mov	r3, r0
 800dcec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800dcee:	7bfb      	ldrb	r3, [r7, #15]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d113      	bne.n	800dd1c <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800dcfa:	6879      	ldr	r1, [r7, #4]
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	683a      	ldr	r2, [r7, #0]
 800dd00:	f7ff fd26 	bl	800d750 <disk_read>
 800dd04:	4603      	mov	r3, r0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d004      	beq.n	800dd14 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dd0a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd0e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dd10:	2301      	movs	r3, #1
 800dd12:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	683a      	ldr	r2, [r7, #0]
 800dd18:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
		}
	}
	return res;
 800dd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b084      	sub	sp, #16
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f7ff ff82 	bl	800dc38 <sync_window>
 800dd34:	4603      	mov	r3, r0
 800dd36:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dd38:	7bfb      	ldrb	r3, [r7, #15]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	f040 809b 	bne.w	800de76 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800dd46:	2b03      	cmp	r3, #3
 800dd48:	f040 8088 	bne.w	800de5c <sync_fs+0x136>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	f040 8082 	bne.w	800de5c <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd5e:	2100      	movs	r1, #0
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7ff fd71 	bl	800d848 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2255      	movs	r2, #85	@ 0x55
 800dd6a:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	22aa      	movs	r2, #170	@ 0xaa
 800dd72:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2252      	movs	r2, #82	@ 0x52
 800dd7a:	701a      	strb	r2, [r3, #0]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2252      	movs	r2, #82	@ 0x52
 800dd80:	705a      	strb	r2, [r3, #1]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2261      	movs	r2, #97	@ 0x61
 800dd86:	709a      	strb	r2, [r3, #2]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2241      	movs	r2, #65	@ 0x41
 800dd8c:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2272      	movs	r2, #114	@ 0x72
 800dd92:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2272      	movs	r2, #114	@ 0x72
 800dd9a:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2241      	movs	r2, #65	@ 0x41
 800dda2:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2261      	movs	r2, #97	@ 0x61
 800ddaa:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ddb4:	b2da      	uxtb	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	0a1b      	lsrs	r3, r3, #8
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	b2da      	uxtb	r2, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ddd6:	0c1b      	lsrs	r3, r3, #16
 800ddd8:	b2da      	uxtb	r2, r3
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dde6:	0e1b      	lsrs	r3, r3, #24
 800dde8:	b2da      	uxtb	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ddf6:	b2da      	uxtb	r2, r3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800de04:	b29b      	uxth	r3, r3
 800de06:	0a1b      	lsrs	r3, r3, #8
 800de08:	b29b      	uxth	r3, r3
 800de0a:	b2da      	uxtb	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800de18:	0c1b      	lsrs	r3, r3, #16
 800de1a:	b2da      	uxtb	r2, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800de28:	0e1b      	lsrs	r3, r3, #24
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800de38:	1c5a      	adds	r2, r3, #1
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800de46:	6879      	ldr	r1, [r7, #4]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800de4e:	2301      	movs	r3, #1
 800de50:	f7ff fc9e 	bl	800d790 <disk_write>
			fs->fsi_flag = 0;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2200      	movs	r2, #0
 800de58:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800de62:	2200      	movs	r2, #0
 800de64:	2100      	movs	r1, #0
 800de66:	4618      	mov	r0, r3
 800de68:	f7ff fcb2 	bl	800d7d0 <disk_ioctl>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d001      	beq.n	800de76 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800de72:	2301      	movs	r3, #1
 800de74:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800de76:	7bfb      	ldrb	r3, [r7, #15]
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	3b02      	subs	r3, #2
 800de8e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800de96:	3b02      	subs	r3, #2
 800de98:	683a      	ldr	r2, [r7, #0]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d301      	bcc.n	800dea2 <clust2sect+0x22>
 800de9e:	2300      	movs	r3, #0
 800dea0:	e00a      	b.n	800deb8 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800dea8:	461a      	mov	r2, r3
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	fb03 f202 	mul.w	r2, r3, r2
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800deb6:	4413      	add	r3, r2
}
 800deb8:	4618      	mov	r0, r3
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	bc80      	pop	{r7}
 800dec0:	4770      	bx	lr

0800dec2 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b086      	sub	sp, #24
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
 800deca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	2b01      	cmp	r3, #1
 800ded0:	d905      	bls.n	800dede <get_fat+0x1c>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ded8:	683a      	ldr	r2, [r7, #0]
 800deda:	429a      	cmp	r2, r3
 800dedc:	d302      	bcc.n	800dee4 <get_fat+0x22>
		val = 1;	/* Internal error */
 800dede:	2301      	movs	r3, #1
 800dee0:	617b      	str	r3, [r7, #20]
 800dee2:	e0a2      	b.n	800e02a <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dee4:	f04f 33ff 	mov.w	r3, #4294967295
 800dee8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800def0:	2b03      	cmp	r3, #3
 800def2:	d067      	beq.n	800dfc4 <get_fat+0x102>
 800def4:	2b03      	cmp	r3, #3
 800def6:	f300 808e 	bgt.w	800e016 <get_fat+0x154>
 800defa:	2b01      	cmp	r3, #1
 800defc:	d002      	beq.n	800df04 <get_fat+0x42>
 800defe:	2b02      	cmp	r3, #2
 800df00:	d03f      	beq.n	800df82 <get_fat+0xc0>
 800df02:	e088      	b.n	800e016 <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	60fb      	str	r3, [r7, #12]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	085b      	lsrs	r3, r3, #1
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	4413      	add	r3, r2
 800df10:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	0a5b      	lsrs	r3, r3, #9
 800df1c:	4413      	add	r3, r2
 800df1e:	4619      	mov	r1, r3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f7ff fed2 	bl	800dcca <move_window>
 800df26:	4603      	mov	r3, r0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d177      	bne.n	800e01c <get_fat+0x15a>
			wc = fs->win.d8[bc++ % SS(fs)];
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	1c5a      	adds	r2, r3, #1
 800df30:	60fa      	str	r2, [r7, #12]
 800df32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	5cd3      	ldrb	r3, [r2, r3]
 800df3a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	0a5b      	lsrs	r3, r3, #9
 800df46:	4413      	add	r3, r2
 800df48:	4619      	mov	r1, r3
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f7ff febd 	bl	800dcca <move_window>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d164      	bne.n	800e020 <get_fat+0x15e>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	5cd3      	ldrb	r3, [r2, r3]
 800df60:	021b      	lsls	r3, r3, #8
 800df62:	68ba      	ldr	r2, [r7, #8]
 800df64:	4313      	orrs	r3, r2
 800df66:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	f003 0301 	and.w	r3, r3, #1
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d002      	beq.n	800df78 <get_fat+0xb6>
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	091b      	lsrs	r3, r3, #4
 800df76:	e002      	b.n	800df7e <get_fat+0xbc>
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df7e:	617b      	str	r3, [r7, #20]
			break;
 800df80:	e053      	b.n	800e02a <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	0a1b      	lsrs	r3, r3, #8
 800df8c:	4413      	add	r3, r2
 800df8e:	4619      	mov	r1, r3
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f7ff fe9a 	bl	800dcca <move_window>
 800df96:	4603      	mov	r3, r0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d143      	bne.n	800e024 <get_fat+0x162>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	005b      	lsls	r3, r3, #1
 800dfa0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	3301      	adds	r3, #1
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	021b      	lsls	r3, r3, #8
 800dfb2:	b21a      	sxth	r2, r3
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	b21b      	sxth	r3, r3
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	b21b      	sxth	r3, r3
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	617b      	str	r3, [r7, #20]
			break;
 800dfc2:	e032      	b.n	800e02a <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	09db      	lsrs	r3, r3, #7
 800dfce:	4413      	add	r3, r2
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7ff fe79 	bl	800dcca <move_window>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d124      	bne.n	800e028 <get_fat+0x166>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	4413      	add	r3, r2
 800dfea:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	3303      	adds	r3, #3
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	061a      	lsls	r2, r3, #24
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	3302      	adds	r3, #2
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	041b      	lsls	r3, r3, #16
 800dffc:	431a      	orrs	r2, r3
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	3301      	adds	r3, #1
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	021b      	lsls	r3, r3, #8
 800e006:	4313      	orrs	r3, r2
 800e008:	693a      	ldr	r2, [r7, #16]
 800e00a:	7812      	ldrb	r2, [r2, #0]
 800e00c:	4313      	orrs	r3, r2
 800e00e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e012:	617b      	str	r3, [r7, #20]
			break;
 800e014:	e009      	b.n	800e02a <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 800e016:	2301      	movs	r3, #1
 800e018:	617b      	str	r3, [r7, #20]
 800e01a:	e006      	b.n	800e02a <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e01c:	bf00      	nop
 800e01e:	e004      	b.n	800e02a <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e020:	bf00      	nop
 800e022:	e002      	b.n	800e02a <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e024:	bf00      	nop
 800e026:	e000      	b.n	800e02a <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e028:	bf00      	nop
		}
	}

	return val;
 800e02a:	697b      	ldr	r3, [r7, #20]
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3718      	adds	r7, #24
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b088      	sub	sp, #32
 800e038:	af00      	add	r7, sp, #0
 800e03a:	60f8      	str	r0, [r7, #12]
 800e03c:	60b9      	str	r1, [r7, #8]
 800e03e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	2b01      	cmp	r3, #1
 800e044:	d905      	bls.n	800e052 <put_fat+0x1e>
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e04c:	68ba      	ldr	r2, [r7, #8]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d302      	bcc.n	800e058 <put_fat+0x24>
		res = FR_INT_ERR;
 800e052:	2302      	movs	r3, #2
 800e054:	77fb      	strb	r3, [r7, #31]
 800e056:	e0f6      	b.n	800e246 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e05e:	2b03      	cmp	r3, #3
 800e060:	f000 809e 	beq.w	800e1a0 <put_fat+0x16c>
 800e064:	2b03      	cmp	r3, #3
 800e066:	f300 80e4 	bgt.w	800e232 <put_fat+0x1fe>
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	d002      	beq.n	800e074 <put_fat+0x40>
 800e06e:	2b02      	cmp	r3, #2
 800e070:	d06f      	beq.n	800e152 <put_fat+0x11e>
 800e072:	e0de      	b.n	800e232 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	617b      	str	r3, [r7, #20]
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	085b      	lsrs	r3, r3, #1
 800e07c:	697a      	ldr	r2, [r7, #20]
 800e07e:	4413      	add	r3, r2
 800e080:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	0a5b      	lsrs	r3, r3, #9
 800e08c:	4413      	add	r3, r2
 800e08e:	4619      	mov	r1, r3
 800e090:	68f8      	ldr	r0, [r7, #12]
 800e092:	f7ff fe1a 	bl	800dcca <move_window>
 800e096:	4603      	mov	r3, r0
 800e098:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e09a:	7ffb      	ldrb	r3, [r7, #31]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f040 80cb 	bne.w	800e238 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	1c5a      	adds	r2, r3, #1
 800e0a6:	617a      	str	r2, [r7, #20]
 800e0a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0ac:	68fa      	ldr	r2, [r7, #12]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	f003 0301 	and.w	r3, r3, #1
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d00d      	beq.n	800e0d8 <put_fat+0xa4>
 800e0bc:	69bb      	ldr	r3, [r7, #24]
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	b25b      	sxtb	r3, r3
 800e0c2:	f003 030f 	and.w	r3, r3, #15
 800e0c6:	b25a      	sxtb	r2, r3
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	011b      	lsls	r3, r3, #4
 800e0ce:	b25b      	sxtb	r3, r3
 800e0d0:	4313      	orrs	r3, r2
 800e0d2:	b25b      	sxtb	r3, r3
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	e001      	b.n	800e0dc <put_fat+0xa8>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	69ba      	ldr	r2, [r7, #24]
 800e0de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	0a5b      	lsrs	r3, r3, #9
 800e0f2:	4413      	add	r3, r2
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	68f8      	ldr	r0, [r7, #12]
 800e0f8:	f7ff fde7 	bl	800dcca <move_window>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e100:	7ffb      	ldrb	r3, [r7, #31]
 800e102:	2b00      	cmp	r3, #0
 800e104:	f040 809a 	bne.w	800e23c <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e10e:	68fa      	ldr	r2, [r7, #12]
 800e110:	4413      	add	r3, r2
 800e112:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	f003 0301 	and.w	r3, r3, #1
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d003      	beq.n	800e126 <put_fat+0xf2>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	091b      	lsrs	r3, r3, #4
 800e122:	b2db      	uxtb	r3, r3
 800e124:	e00e      	b.n	800e144 <put_fat+0x110>
 800e126:	69bb      	ldr	r3, [r7, #24]
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	b25b      	sxtb	r3, r3
 800e12c:	f023 030f 	bic.w	r3, r3, #15
 800e130:	b25a      	sxtb	r2, r3
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	0a1b      	lsrs	r3, r3, #8
 800e136:	b25b      	sxtb	r3, r3
 800e138:	f003 030f 	and.w	r3, r3, #15
 800e13c:	b25b      	sxtb	r3, r3
 800e13e:	4313      	orrs	r3, r2
 800e140:	b25b      	sxtb	r3, r3
 800e142:	b2db      	uxtb	r3, r3
 800e144:	69ba      	ldr	r2, [r7, #24]
 800e146:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2201      	movs	r2, #1
 800e14c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800e150:	e079      	b.n	800e246 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	0a1b      	lsrs	r3, r3, #8
 800e15c:	4413      	add	r3, r2
 800e15e:	4619      	mov	r1, r3
 800e160:	68f8      	ldr	r0, [r7, #12]
 800e162:	f7ff fdb2 	bl	800dcca <move_window>
 800e166:	4603      	mov	r3, r0
 800e168:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e16a:	7ffb      	ldrb	r3, [r7, #31]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d167      	bne.n	800e240 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	005b      	lsls	r3, r3, #1
 800e174:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	4413      	add	r3, r2
 800e17c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	b2da      	uxtb	r2, r3
 800e182:	69bb      	ldr	r3, [r7, #24]
 800e184:	701a      	strb	r2, [r3, #0]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	b29b      	uxth	r3, r3
 800e18a:	0a1b      	lsrs	r3, r3, #8
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	3301      	adds	r3, #1
 800e192:	b2d2      	uxtb	r2, r2
 800e194:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2201      	movs	r2, #1
 800e19a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800e19e:	e052      	b.n	800e246 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	09db      	lsrs	r3, r3, #7
 800e1aa:	4413      	add	r3, r2
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f7ff fd8b 	bl	800dcca <move_window>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e1b8:	7ffb      	ldrb	r3, [r7, #31]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d142      	bne.n	800e244 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e1c6:	68fa      	ldr	r2, [r7, #12]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	3303      	adds	r3, #3
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	061a      	lsls	r2, r3, #24
 800e1d4:	69bb      	ldr	r3, [r7, #24]
 800e1d6:	3302      	adds	r3, #2
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	041b      	lsls	r3, r3, #16
 800e1dc:	431a      	orrs	r2, r3
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	021b      	lsls	r3, r3, #8
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	69ba      	ldr	r2, [r7, #24]
 800e1ea:	7812      	ldrb	r2, [r2, #0]
 800e1ec:	4313      	orrs	r3, r2
 800e1ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	b2da      	uxtb	r2, r3
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	701a      	strb	r2, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	b29b      	uxth	r3, r3
 800e204:	0a1b      	lsrs	r3, r3, #8
 800e206:	b29a      	uxth	r2, r3
 800e208:	69bb      	ldr	r3, [r7, #24]
 800e20a:	3301      	adds	r3, #1
 800e20c:	b2d2      	uxtb	r2, r2
 800e20e:	701a      	strb	r2, [r3, #0]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	0c1a      	lsrs	r2, r3, #16
 800e214:	69bb      	ldr	r3, [r7, #24]
 800e216:	3302      	adds	r3, #2
 800e218:	b2d2      	uxtb	r2, r2
 800e21a:	701a      	strb	r2, [r3, #0]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	0e1a      	lsrs	r2, r3, #24
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	3303      	adds	r3, #3
 800e224:	b2d2      	uxtb	r2, r2
 800e226:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2201      	movs	r2, #1
 800e22c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800e230:	e009      	b.n	800e246 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800e232:	2302      	movs	r3, #2
 800e234:	77fb      	strb	r3, [r7, #31]
 800e236:	e006      	b.n	800e246 <put_fat+0x212>
			if (res != FR_OK) break;
 800e238:	bf00      	nop
 800e23a:	e004      	b.n	800e246 <put_fat+0x212>
			if (res != FR_OK) break;
 800e23c:	bf00      	nop
 800e23e:	e002      	b.n	800e246 <put_fat+0x212>
			if (res != FR_OK) break;
 800e240:	bf00      	nop
 800e242:	e000      	b.n	800e246 <put_fat+0x212>
			if (res != FR_OK) break;
 800e244:	bf00      	nop
		}
	}

	return res;
 800e246:	7ffb      	ldrb	r3, [r7, #31]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3720      	adds	r7, #32
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d905      	bls.n	800e26c <remove_chain+0x1c>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e266:	683a      	ldr	r2, [r7, #0]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d302      	bcc.n	800e272 <remove_chain+0x22>
		res = FR_INT_ERR;
 800e26c:	2302      	movs	r3, #2
 800e26e:	73fb      	strb	r3, [r7, #15]
 800e270:	e043      	b.n	800e2fa <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800e272:	2300      	movs	r3, #0
 800e274:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800e276:	e036      	b.n	800e2e6 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800e278:	6839      	ldr	r1, [r7, #0]
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7ff fe21 	bl	800dec2 <get_fat>
 800e280:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d035      	beq.n	800e2f4 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d102      	bne.n	800e294 <remove_chain+0x44>
 800e28e:	2302      	movs	r3, #2
 800e290:	73fb      	strb	r3, [r7, #15]
 800e292:	e032      	b.n	800e2fa <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e29a:	d102      	bne.n	800e2a2 <remove_chain+0x52>
 800e29c:	2301      	movs	r3, #1
 800e29e:	73fb      	strb	r3, [r7, #15]
 800e2a0:	e02b      	b.n	800e2fa <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	6839      	ldr	r1, [r7, #0]
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7ff fec4 	bl	800e034 <put_fat>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800e2b0:	7bfb      	ldrb	r3, [r7, #15]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d120      	bne.n	800e2f8 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c0:	d00f      	beq.n	800e2e2 <remove_chain+0x92>
				fs->free_clust++;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e2c8:	1c5a      	adds	r2, r3, #1
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				fs->fsi_flag |= 1;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800e2d6:	f043 0301 	orr.w	r3, r3, #1
 800e2da:	b2da      	uxtb	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e2ec:	683a      	ldr	r2, [r7, #0]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d3c2      	bcc.n	800e278 <remove_chain+0x28>
 800e2f2:	e002      	b.n	800e2fa <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800e2f4:	bf00      	nop
 800e2f6:	e000      	b.n	800e2fa <remove_chain+0xaa>
			if (res != FR_OK) break;
 800e2f8:	bf00      	nop
		}
	}

	return res;
 800e2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3710      	adds	r7, #16
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d10f      	bne.n	800e334 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e31a:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d005      	beq.n	800e32e <create_chain+0x2a>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e328:	693a      	ldr	r2, [r7, #16]
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d31c      	bcc.n	800e368 <create_chain+0x64>
 800e32e:	2301      	movs	r3, #1
 800e330:	613b      	str	r3, [r7, #16]
 800e332:	e019      	b.n	800e368 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800e334:	6839      	ldr	r1, [r7, #0]
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f7ff fdc3 	bl	800dec2 <get_fat>
 800e33c:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	2b01      	cmp	r3, #1
 800e342:	d801      	bhi.n	800e348 <create_chain+0x44>
 800e344:	2301      	movs	r3, #1
 800e346:	e076      	b.n	800e436 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e34e:	d101      	bne.n	800e354 <create_chain+0x50>
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	e070      	b.n	800e436 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e35a:	68ba      	ldr	r2, [r7, #8]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d201      	bcs.n	800e364 <create_chain+0x60>
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	e068      	b.n	800e436 <create_chain+0x132>
		scl = clst;
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	3301      	adds	r3, #1
 800e370:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e378:	697a      	ldr	r2, [r7, #20]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d307      	bcc.n	800e38e <create_chain+0x8a>
			ncl = 2;
 800e37e:	2302      	movs	r3, #2
 800e380:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800e382:	697a      	ldr	r2, [r7, #20]
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	429a      	cmp	r2, r3
 800e388:	d901      	bls.n	800e38e <create_chain+0x8a>
 800e38a:	2300      	movs	r3, #0
 800e38c:	e053      	b.n	800e436 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800e38e:	6979      	ldr	r1, [r7, #20]
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f7ff fd96 	bl	800dec2 <get_fat>
 800e396:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d00e      	beq.n	800e3bc <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a4:	d002      	beq.n	800e3ac <create_chain+0xa8>
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d101      	bne.n	800e3b0 <create_chain+0xac>
			return cs;
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	e042      	b.n	800e436 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800e3b0:	697a      	ldr	r2, [r7, #20]
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d1d9      	bne.n	800e36c <create_chain+0x68>
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	e03c      	b.n	800e436 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800e3bc:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800e3be:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 800e3c2:	6979      	ldr	r1, [r7, #20]
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f7ff fe35 	bl	800e034 <put_fat>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800e3ce:	7bfb      	ldrb	r3, [r7, #15]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d109      	bne.n	800e3e8 <create_chain+0xe4>
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d006      	beq.n	800e3e8 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800e3da:	697a      	ldr	r2, [r7, #20]
 800e3dc:	6839      	ldr	r1, [r7, #0]
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f7ff fe28 	bl	800e034 <put_fat>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800e3e8:	7bfb      	ldrb	r3, [r7, #15]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d11a      	bne.n	800e424 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	697a      	ldr	r2, [r7, #20]
 800e3f2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e400:	d018      	beq.n	800e434 <create_chain+0x130>
			fs->free_clust--;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e408:	1e5a      	subs	r2, r3, #1
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			fs->fsi_flag |= 1;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800e416:	f043 0301 	orr.w	r3, r3, #1
 800e41a:	b2da      	uxtb	r2, r3
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 800e422:	e007      	b.n	800e434 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800e424:	7bfb      	ldrb	r3, [r7, #15]
 800e426:	2b01      	cmp	r3, #1
 800e428:	d102      	bne.n	800e430 <create_chain+0x12c>
 800e42a:	f04f 33ff 	mov.w	r3, #4294967295
 800e42e:	e000      	b.n	800e432 <create_chain+0x12e>
 800e430:	2301      	movs	r3, #1
 800e432:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800e434:	697b      	ldr	r3, [r7, #20]
}
 800e436:	4618      	mov	r0, r3
 800e438:	3718      	adds	r7, #24
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800e43e:	b480      	push	{r7}
 800e440:	b087      	sub	sp, #28
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
 800e446:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800e44e:	3304      	adds	r3, #4
 800e450:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	0a5b      	lsrs	r3, r3, #9
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800e45c:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800e460:	fbb3 f3f2 	udiv	r3, r3, r2
 800e464:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	1d1a      	adds	r2, r3, #4
 800e46a:	613a      	str	r2, [r7, #16]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d101      	bne.n	800e47a <clmt_clust+0x3c>
 800e476:	2300      	movs	r3, #0
 800e478:	e010      	b.n	800e49c <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800e47a:	697a      	ldr	r2, [r7, #20]
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d307      	bcc.n	800e492 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800e482:	697a      	ldr	r2, [r7, #20]
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	1ad3      	subs	r3, r2, r3
 800e488:	617b      	str	r3, [r7, #20]
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	3304      	adds	r3, #4
 800e48e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e490:	e7e9      	b.n	800e466 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800e492:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	681a      	ldr	r2, [r3, #0]
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	4413      	add	r3, r2
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	371c      	adds	r7, #28
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bc80      	pop	{r7}
 800e4a4:	4770      	bx	lr

0800e4a6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800e4a6:	b580      	push	{r7, lr}
 800e4a8:	b086      	sub	sp, #24
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
 800e4ae:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800e4c0:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	d007      	beq.n	800e4d8 <dir_sdi+0x32>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e4ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e4d2:	697a      	ldr	r2, [r7, #20]
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d301      	bcc.n	800e4dc <dir_sdi+0x36>
		return FR_INT_ERR;
 800e4d8:	2302      	movs	r3, #2
 800e4da:	e074      	b.n	800e5c6 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d10c      	bne.n	800e4fc <dir_sdi+0x56>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e4e8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e4ec:	2b03      	cmp	r3, #3
 800e4ee:	d105      	bne.n	800e4fc <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e4f6:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800e4fa:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d111      	bne.n	800e526 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e508:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800e50c:	461a      	mov	r2, r3
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	4293      	cmp	r3, r2
 800e512:	d301      	bcc.n	800e518 <dir_sdi+0x72>
			return FR_INT_ERR;
 800e514:	2302      	movs	r3, #2
 800e516:	e056      	b.n	800e5c6 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e51e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800e522:	613b      	str	r3, [r7, #16]
 800e524:	e032      	b.n	800e58c <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e52c:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800e530:	011b      	lsls	r3, r3, #4
 800e532:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800e534:	e01e      	b.n	800e574 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e53c:	6979      	ldr	r1, [r7, #20]
 800e53e:	4618      	mov	r0, r3
 800e540:	f7ff fcbf 	bl	800dec2 <get_fat>
 800e544:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e54c:	d101      	bne.n	800e552 <dir_sdi+0xac>
 800e54e:	2301      	movs	r3, #1
 800e550:	e039      	b.n	800e5c6 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	2b01      	cmp	r3, #1
 800e556:	d907      	bls.n	800e568 <dir_sdi+0xc2>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e55e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e562:	697a      	ldr	r2, [r7, #20]
 800e564:	429a      	cmp	r2, r3
 800e566:	d301      	bcc.n	800e56c <dir_sdi+0xc6>
				return FR_INT_ERR;
 800e568:	2302      	movs	r3, #2
 800e56a:	e02c      	b.n	800e5c6 <dir_sdi+0x120>
			idx -= ic;
 800e56c:	683a      	ldr	r2, [r7, #0]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	1ad3      	subs	r3, r2, r3
 800e572:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800e574:	683a      	ldr	r2, [r7, #0]
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d2dc      	bcs.n	800e536 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e582:	6979      	ldr	r1, [r7, #20]
 800e584:	4618      	mov	r0, r3
 800e586:	f7ff fc7b 	bl	800de80 <clust2sect>
 800e58a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	697a      	ldr	r2, [r7, #20]
 800e590:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d101      	bne.n	800e59e <dir_sdi+0xf8>
 800e59a:	2302      	movs	r3, #2
 800e59c:	e013      	b.n	800e5c6 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	091a      	lsrs	r2, r3, #4
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	441a      	add	r2, r3
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	f003 030f 	and.w	r3, r3, #15
 800e5ba:	015b      	lsls	r3, r3, #5
 800e5bc:	441a      	add	r2, r3
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800e5c4:	2300      	movs	r3, #0
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3718      	adds	r7, #24
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}

0800e5ce <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e5ce:	b590      	push	{r4, r7, lr}
 800e5d0:	b087      	sub	sp, #28
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
 800e5d6:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800e5de:	3301      	adds	r3, #1
 800e5e0:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d004      	beq.n	800e5f4 <dir_next+0x26>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d101      	bne.n	800e5f8 <dir_next+0x2a>
		return FR_NO_FILE;
 800e5f4:	2304      	movs	r3, #4
 800e5f6:	e0dd      	b.n	800e7b4 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f003 030f 	and.w	r3, r3, #15
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	f040 80c6 	bne.w	800e790 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e60a:	1c5a      	adds	r2, r3, #1
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d10b      	bne.n	800e634 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e622:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800e626:	461a      	mov	r2, r3
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	4293      	cmp	r3, r2
 800e62c:	f0c0 80b0 	bcc.w	800e790 <dir_next+0x1c2>
				return FR_NO_FILE;
 800e630:	2304      	movs	r3, #4
 800e632:	e0bf      	b.n	800e7b4 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	091b      	lsrs	r3, r3, #4
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800e63e:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800e642:	3a01      	subs	r2, #1
 800e644:	4013      	ands	r3, r2
 800e646:	2b00      	cmp	r3, #0
 800e648:	f040 80a2 	bne.w	800e790 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800e658:	4619      	mov	r1, r3
 800e65a:	4610      	mov	r0, r2
 800e65c:	f7ff fc31 	bl	800dec2 <get_fat>
 800e660:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	2b01      	cmp	r3, #1
 800e666:	d801      	bhi.n	800e66c <dir_next+0x9e>
 800e668:	2302      	movs	r3, #2
 800e66a:	e0a3      	b.n	800e7b4 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e672:	d101      	bne.n	800e678 <dir_next+0xaa>
 800e674:	2301      	movs	r3, #1
 800e676:	e09d      	b.n	800e7b4 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e67e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e682:	697a      	ldr	r2, [r7, #20]
 800e684:	429a      	cmp	r2, r3
 800e686:	d374      	bcc.n	800e772 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d101      	bne.n	800e692 <dir_next+0xc4>
 800e68e:	2304      	movs	r3, #4
 800e690:	e090      	b.n	800e7b4 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800e69e:	4619      	mov	r1, r3
 800e6a0:	4610      	mov	r0, r2
 800e6a2:	f7ff fe2f 	bl	800e304 <create_chain>
 800e6a6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d101      	bne.n	800e6b2 <dir_next+0xe4>
 800e6ae:	2307      	movs	r3, #7
 800e6b0:	e080      	b.n	800e7b4 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d101      	bne.n	800e6bc <dir_next+0xee>
 800e6b8:	2302      	movs	r3, #2
 800e6ba:	e07b      	b.n	800e7b4 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6c2:	d101      	bne.n	800e6c8 <dir_next+0xfa>
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	e075      	b.n	800e7b4 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7ff fab2 	bl	800dc38 <sync_window>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d001      	beq.n	800e6de <dir_next+0x110>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	e06a      	b.n	800e7b4 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e6e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7ff f8ac 	bl	800d848 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 800e6fc:	6979      	ldr	r1, [r7, #20]
 800e6fe:	4610      	mov	r0, r2
 800e700:	f7ff fbbe 	bl	800de80 <clust2sect>
 800e704:	4603      	mov	r3, r0
 800e706:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800e70a:	2300      	movs	r3, #0
 800e70c:	613b      	str	r3, [r7, #16]
 800e70e:	e01b      	b.n	800e748 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e716:	2201      	movs	r2, #1
 800e718:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e722:	4618      	mov	r0, r3
 800e724:	f7ff fa88 	bl	800dc38 <sync_window>
 800e728:	4603      	mov	r3, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d001      	beq.n	800e732 <dir_next+0x164>
 800e72e:	2301      	movs	r3, #1
 800e730:	e040      	b.n	800e7b4 <dir_next+0x1e6>
						dp->fs->winsect++;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e738:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800e73c:	3201      	adds	r2, #1
 800e73e:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	3301      	adds	r3, #1
 800e746:	613b      	str	r3, [r7, #16]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e74e:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800e752:	461a      	mov	r2, r3
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	4293      	cmp	r3, r2
 800e758:	d3da      	bcc.n	800e710 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e760:	f8d3 1230 	ldr.w	r1, [r3, #560]	@ 0x230
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e76a:	693a      	ldr	r2, [r7, #16]
 800e76c:	1a8a      	subs	r2, r1, r2
 800e76e:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	697a      	ldr	r2, [r7, #20]
 800e776:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e780:	6979      	ldr	r1, [r7, #20]
 800e782:	4618      	mov	r0, r3
 800e784:	f7ff fb7c 	bl	800de80 <clust2sect>
 800e788:	4602      	mov	r2, r0
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	b29a      	uxth	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f003 030f 	and.w	r3, r3, #15
 800e7a8:	015b      	lsls	r3, r3, #5
 800e7aa:	441a      	add	r2, r3
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800e7b2:	2300      	movs	r3, #0
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	371c      	adds	r7, #28
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd90      	pop	{r4, r7, pc}

0800e7bc <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b084      	sub	sp, #16
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800e7c6:	2100      	movs	r1, #0
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7ff fe6c 	bl	800e4a6 <dir_sdi>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e7d2:	7bfb      	ldrb	r3, [r7, #15]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d131      	bne.n	800e83c <dir_alloc+0x80>
		n = 0;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	4610      	mov	r0, r2
 800e7ec:	f7ff fa6d 	bl	800dcca <move_window>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800e7f4:	7bfb      	ldrb	r3, [r7, #15]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d11f      	bne.n	800e83a <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	2be5      	cmp	r3, #229	@ 0xe5
 800e804:	d005      	beq.n	800e812 <dir_alloc+0x56>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d107      	bne.n	800e822 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	3301      	adds	r3, #1
 800e816:	60bb      	str	r3, [r7, #8]
 800e818:	68ba      	ldr	r2, [r7, #8]
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d102      	bne.n	800e826 <dir_alloc+0x6a>
 800e820:	e00c      	b.n	800e83c <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e822:	2300      	movs	r3, #0
 800e824:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800e826:	2101      	movs	r1, #1
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f7ff fed0 	bl	800e5ce <dir_next>
 800e82e:	4603      	mov	r3, r0
 800e830:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800e832:	7bfb      	ldrb	r3, [r7, #15]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d0d1      	beq.n	800e7dc <dir_alloc+0x20>
 800e838:	e000      	b.n	800e83c <dir_alloc+0x80>
			if (res != FR_OK) break;
 800e83a:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e83c:	7bfb      	ldrb	r3, [r7, #15]
 800e83e:	2b04      	cmp	r3, #4
 800e840:	d101      	bne.n	800e846 <dir_alloc+0x8a>
 800e842:	2307      	movs	r3, #7
 800e844:	73fb      	strb	r3, [r7, #15]
	return res;
 800e846:	7bfb      	ldrb	r3, [r7, #15]
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3710      	adds	r7, #16
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800e850:	b480      	push	{r7}
 800e852:	b085      	sub	sp, #20
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	331b      	adds	r3, #27
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	021b      	lsls	r3, r3, #8
 800e862:	b21a      	sxth	r2, r3
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	331a      	adds	r3, #26
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	b21b      	sxth	r3, r3
 800e86c:	4313      	orrs	r3, r2
 800e86e:	b21b      	sxth	r3, r3
 800e870:	b29b      	uxth	r3, r3
 800e872:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e87a:	2b03      	cmp	r3, #3
 800e87c:	d10f      	bne.n	800e89e <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	3315      	adds	r3, #21
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	021b      	lsls	r3, r3, #8
 800e886:	b21a      	sxth	r2, r3
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	3314      	adds	r3, #20
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	b21b      	sxth	r3, r3
 800e890:	4313      	orrs	r3, r2
 800e892:	b21b      	sxth	r3, r3
 800e894:	b29b      	uxth	r3, r3
 800e896:	041b      	lsls	r3, r3, #16
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	4313      	orrs	r3, r2
 800e89c:	60fb      	str	r3, [r7, #12]

	return cl;
 800e89e:	68fb      	ldr	r3, [r7, #12]
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3714      	adds	r7, #20
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bc80      	pop	{r7}
 800e8a8:	4770      	bx	lr

0800e8aa <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800e8aa:	b480      	push	{r7}
 800e8ac:	b083      	sub	sp, #12
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
 800e8b2:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	331a      	adds	r3, #26
 800e8b8:	683a      	ldr	r2, [r7, #0]
 800e8ba:	b2d2      	uxtb	r2, r2
 800e8bc:	701a      	strb	r2, [r3, #0]
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	0a1b      	lsrs	r3, r3, #8
 800e8c4:	b29a      	uxth	r2, r3
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	331b      	adds	r3, #27
 800e8ca:	b2d2      	uxtb	r2, r2
 800e8cc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	0c1a      	lsrs	r2, r3, #16
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	3314      	adds	r3, #20
 800e8d6:	b2d2      	uxtb	r2, r2
 800e8d8:	701a      	strb	r2, [r3, #0]
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	0c1b      	lsrs	r3, r3, #16
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	0a1b      	lsrs	r3, r3, #8
 800e8e2:	b29a      	uxth	r2, r3
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	3315      	adds	r3, #21
 800e8e8:	b2d2      	uxtb	r2, r2
 800e8ea:	701a      	strb	r2, [r3, #0]
}
 800e8ec:	bf00      	nop
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bc80      	pop	{r7}
 800e8f4:	4770      	bx	lr
	...

0800e8f8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b086      	sub	sp, #24
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e90a:	1e5a      	subs	r2, r3, #1
 800e90c:	4613      	mov	r3, r2
 800e90e:	005b      	lsls	r3, r3, #1
 800e910:	4413      	add	r3, r2
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	4413      	add	r3, r2
 800e916:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800e918:	2300      	movs	r3, #0
 800e91a:	613b      	str	r3, [r7, #16]
 800e91c:	2301      	movs	r3, #1
 800e91e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800e920:	4a2b      	ldr	r2, [pc, #172]	@ (800e9d0 <cmp_lfn+0xd8>)
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	4413      	add	r3, r2
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	3301      	adds	r3, #1
 800e92a:	683a      	ldr	r2, [r7, #0]
 800e92c:	4413      	add	r3, r2
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	021b      	lsls	r3, r3, #8
 800e932:	b21a      	sxth	r2, r3
 800e934:	4926      	ldr	r1, [pc, #152]	@ (800e9d0 <cmp_lfn+0xd8>)
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	440b      	add	r3, r1
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	4619      	mov	r1, r3
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	440b      	add	r3, r1
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	b21b      	sxth	r3, r3
 800e946:	4313      	orrs	r3, r2
 800e948:	b21b      	sxth	r3, r3
 800e94a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800e94c:	89fb      	ldrh	r3, [r7, #14]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d019      	beq.n	800e986 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800e952:	89bb      	ldrh	r3, [r7, #12]
 800e954:	4618      	mov	r0, r3
 800e956:	f002 fb87 	bl	8011068 <ff_wtoupper>
 800e95a:	4603      	mov	r3, r0
 800e95c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	2bfe      	cmp	r3, #254	@ 0xfe
 800e962:	d80e      	bhi.n	800e982 <cmp_lfn+0x8a>
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	1c5a      	adds	r2, r3, #1
 800e968:	617a      	str	r2, [r7, #20]
 800e96a:	005b      	lsls	r3, r3, #1
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	4413      	add	r3, r2
 800e970:	881b      	ldrh	r3, [r3, #0]
 800e972:	4618      	mov	r0, r3
 800e974:	f002 fb78 	bl	8011068 <ff_wtoupper>
 800e978:	4603      	mov	r3, r0
 800e97a:	461a      	mov	r2, r3
 800e97c:	89fb      	ldrh	r3, [r7, #14]
 800e97e:	4293      	cmp	r3, r2
 800e980:	d008      	beq.n	800e994 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800e982:	2300      	movs	r3, #0
 800e984:	e01f      	b.n	800e9c6 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800e986:	89bb      	ldrh	r3, [r7, #12]
 800e988:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d001      	beq.n	800e994 <cmp_lfn+0x9c>
 800e990:	2300      	movs	r3, #0
 800e992:	e018      	b.n	800e9c6 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	3301      	adds	r3, #1
 800e998:	613b      	str	r3, [r7, #16]
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	2b0c      	cmp	r3, #12
 800e99e:	d9bf      	bls.n	800e920 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d00b      	beq.n	800e9c4 <cmp_lfn+0xcc>
 800e9ac:	89fb      	ldrh	r3, [r7, #14]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d008      	beq.n	800e9c4 <cmp_lfn+0xcc>
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	005b      	lsls	r3, r3, #1
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	881b      	ldrh	r3, [r3, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d001      	beq.n	800e9c4 <cmp_lfn+0xcc>
		return 0;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	e000      	b.n	800e9c6 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800e9c4:	2301      	movs	r3, #1
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3718      	adds	r7, #24
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	08014530 	.word	0x08014530

0800e9d4 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b089      	sub	sp, #36	@ 0x24
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	4611      	mov	r1, r2
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	71fb      	strb	r3, [r7, #7]
 800e9e6:	4613      	mov	r3, r2
 800e9e8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	330d      	adds	r3, #13
 800e9ee:	79ba      	ldrb	r2, [r7, #6]
 800e9f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	330b      	adds	r3, #11
 800e9f6:	220f      	movs	r2, #15
 800e9f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	330c      	adds	r3, #12
 800e9fe:	2200      	movs	r2, #0
 800ea00:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	331a      	adds	r3, #26
 800ea06:	2200      	movs	r2, #0
 800ea08:	701a      	strb	r2, [r3, #0]
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	331b      	adds	r3, #27
 800ea0e:	2200      	movs	r2, #0
 800ea10:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800ea12:	79fb      	ldrb	r3, [r7, #7]
 800ea14:	1e5a      	subs	r2, r3, #1
 800ea16:	4613      	mov	r3, r2
 800ea18:	005b      	lsls	r3, r3, #1
 800ea1a:	4413      	add	r3, r2
 800ea1c:	009b      	lsls	r3, r3, #2
 800ea1e:	4413      	add	r3, r2
 800ea20:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ea22:	2300      	movs	r3, #0
 800ea24:	82fb      	strh	r3, [r7, #22]
 800ea26:	2300      	movs	r3, #0
 800ea28:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800ea2a:	8afb      	ldrh	r3, [r7, #22]
 800ea2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d007      	beq.n	800ea44 <fit_lfn+0x70>
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	1c5a      	adds	r2, r3, #1
 800ea38:	61fa      	str	r2, [r7, #28]
 800ea3a:	005b      	lsls	r3, r3, #1
 800ea3c:	68fa      	ldr	r2, [r7, #12]
 800ea3e:	4413      	add	r3, r2
 800ea40:	881b      	ldrh	r3, [r3, #0]
 800ea42:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800ea44:	4a1c      	ldr	r2, [pc, #112]	@ (800eab8 <fit_lfn+0xe4>)
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	4413      	add	r3, r2
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	4413      	add	r3, r2
 800ea52:	8afa      	ldrh	r2, [r7, #22]
 800ea54:	b2d2      	uxtb	r2, r2
 800ea56:	701a      	strb	r2, [r3, #0]
 800ea58:	8afb      	ldrh	r3, [r7, #22]
 800ea5a:	0a1b      	lsrs	r3, r3, #8
 800ea5c:	b299      	uxth	r1, r3
 800ea5e:	4a16      	ldr	r2, [pc, #88]	@ (800eab8 <fit_lfn+0xe4>)
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	4413      	add	r3, r2
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	3301      	adds	r3, #1
 800ea68:	68ba      	ldr	r2, [r7, #8]
 800ea6a:	4413      	add	r3, r2
 800ea6c:	b2ca      	uxtb	r2, r1
 800ea6e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800ea70:	8afb      	ldrh	r3, [r7, #22]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d102      	bne.n	800ea7c <fit_lfn+0xa8>
 800ea76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ea7a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	61bb      	str	r3, [r7, #24]
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	2b0c      	cmp	r3, #12
 800ea86:	d9d0      	bls.n	800ea2a <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800ea88:	8afb      	ldrh	r3, [r7, #22]
 800ea8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d006      	beq.n	800eaa0 <fit_lfn+0xcc>
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	005b      	lsls	r3, r3, #1
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	4413      	add	r3, r2
 800ea9a:	881b      	ldrh	r3, [r3, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d103      	bne.n	800eaa8 <fit_lfn+0xd4>
 800eaa0:	79fb      	ldrb	r3, [r7, #7]
 800eaa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eaa6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	79fa      	ldrb	r2, [r7, #7]
 800eaac:	701a      	strb	r2, [r3, #0]
}
 800eaae:	bf00      	nop
 800eab0:	3724      	adds	r7, #36	@ 0x24
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bc80      	pop	{r7}
 800eab6:	4770      	bx	lr
 800eab8:	08014530 	.word	0x08014530

0800eabc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b08c      	sub	sp, #48	@ 0x30
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	607a      	str	r2, [r7, #4]
 800eac8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800eaca:	220b      	movs	r2, #11
 800eacc:	68b9      	ldr	r1, [r7, #8]
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f7fe fe9c 	bl	800d80c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	2b05      	cmp	r3, #5
 800ead8:	d92b      	bls.n	800eb32 <gen_numname+0x76>
		sr = seq;
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800eade:	e022      	b.n	800eb26 <gen_numname+0x6a>
			wc = *lfn++;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	1c9a      	adds	r2, r3, #2
 800eae4:	607a      	str	r2, [r7, #4]
 800eae6:	881b      	ldrh	r3, [r3, #0]
 800eae8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800eaea:	2300      	movs	r3, #0
 800eaec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eaee:	e017      	b.n	800eb20 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	005a      	lsls	r2, r3, #1
 800eaf4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eaf6:	f003 0301 	and.w	r3, r3, #1
 800eafa:	4413      	add	r3, r2
 800eafc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800eafe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eb00:	085b      	lsrs	r3, r3, #1
 800eb02:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d005      	beq.n	800eb1a <gen_numname+0x5e>
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800eb14:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800eb18:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800eb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eb20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb22:	2b0f      	cmp	r3, #15
 800eb24:	d9e4      	bls.n	800eaf0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	881b      	ldrh	r3, [r3, #0]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1d8      	bne.n	800eae0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800eb32:	2307      	movs	r3, #7
 800eb34:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	f003 030f 	and.w	r3, r3, #15
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	3330      	adds	r3, #48	@ 0x30
 800eb42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800eb46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb4a:	2b39      	cmp	r3, #57	@ 0x39
 800eb4c:	d904      	bls.n	800eb58 <gen_numname+0x9c>
 800eb4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb52:	3307      	adds	r3, #7
 800eb54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800eb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb5a:	1e5a      	subs	r2, r3, #1
 800eb5c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800eb5e:	3330      	adds	r3, #48	@ 0x30
 800eb60:	443b      	add	r3, r7
 800eb62:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800eb66:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	091b      	lsrs	r3, r3, #4
 800eb6e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d1df      	bne.n	800eb36 <gen_numname+0x7a>
	ns[i] = '~';
 800eb76:	f107 0214 	add.w	r2, r7, #20
 800eb7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb7c:	4413      	add	r3, r2
 800eb7e:	227e      	movs	r2, #126	@ 0x7e
 800eb80:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800eb82:	2300      	movs	r3, #0
 800eb84:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb86:	e002      	b.n	800eb8e <gen_numname+0xd2>
 800eb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d205      	bcs.n	800eba2 <gen_numname+0xe6>
 800eb96:	68fa      	ldr	r2, [r7, #12]
 800eb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb9a:	4413      	add	r3, r2
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	2b20      	cmp	r3, #32
 800eba0:	d1f2      	bne.n	800eb88 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eba4:	2b07      	cmp	r3, #7
 800eba6:	d807      	bhi.n	800ebb8 <gen_numname+0xfc>
 800eba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebaa:	1c5a      	adds	r2, r3, #1
 800ebac:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ebae:	3330      	adds	r3, #48	@ 0x30
 800ebb0:	443b      	add	r3, r7
 800ebb2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ebb6:	e000      	b.n	800ebba <gen_numname+0xfe>
 800ebb8:	2120      	movs	r1, #32
 800ebba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebbc:	1c5a      	adds	r2, r3, #1
 800ebbe:	627a      	str	r2, [r7, #36]	@ 0x24
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	460a      	mov	r2, r1
 800ebc6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ebc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebca:	2b07      	cmp	r3, #7
 800ebcc:	d9e9      	bls.n	800eba2 <gen_numname+0xe6>
}
 800ebce:	bf00      	nop
 800ebd0:	bf00      	nop
 800ebd2:	3730      	adds	r7, #48	@ 0x30
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b085      	sub	sp, #20
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ebe4:	230b      	movs	r3, #11
 800ebe6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800ebe8:	7bfb      	ldrb	r3, [r7, #15]
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	0852      	lsrs	r2, r2, #1
 800ebee:	01db      	lsls	r3, r3, #7
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	b2da      	uxtb	r2, r3
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	1c59      	adds	r1, r3, #1
 800ebf8:	6079      	str	r1, [r7, #4]
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	73fb      	strb	r3, [r7, #15]
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	3b01      	subs	r3, #1
 800ec04:	60bb      	str	r3, [r7, #8]
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1ed      	bne.n	800ebe8 <sum_sfn+0x10>
	return sum;
 800ec0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3714      	adds	r7, #20
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bc80      	pop	{r7}
 800ec16:	4770      	bx	lr

0800ec18 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b086      	sub	sp, #24
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ec20:	2100      	movs	r1, #0
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f7ff fc3f 	bl	800e4a6 <dir_sdi>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ec2c:	7dfb      	ldrb	r3, [r7, #23]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d001      	beq.n	800ec36 <dir_find+0x1e>
 800ec32:	7dfb      	ldrb	r3, [r7, #23]
 800ec34:	e0ac      	b.n	800ed90 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ec36:	23ff      	movs	r3, #255	@ 0xff
 800ec38:	753b      	strb	r3, [r7, #20]
 800ec3a:	7d3b      	ldrb	r3, [r7, #20]
 800ec3c:	757b      	strb	r3, [r7, #21]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ec44:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ec54:	4619      	mov	r1, r3
 800ec56:	4610      	mov	r0, r2
 800ec58:	f7ff f837 	bl	800dcca <move_window>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ec60:	7dfb      	ldrb	r3, [r7, #23]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	f040 808e 	bne.w	800ed84 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ec6e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ec76:	7dbb      	ldrb	r3, [r7, #22]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d102      	bne.n	800ec82 <dir_find+0x6a>
 800ec7c:	2304      	movs	r3, #4
 800ec7e:	75fb      	strb	r3, [r7, #23]
 800ec80:	e085      	b.n	800ed8e <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	330b      	adds	r3, #11
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ec8c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ec8e:	7dbb      	ldrb	r3, [r7, #22]
 800ec90:	2be5      	cmp	r3, #229	@ 0xe5
 800ec92:	d007      	beq.n	800eca4 <dir_find+0x8c>
 800ec94:	7bfb      	ldrb	r3, [r7, #15]
 800ec96:	f003 0308 	and.w	r3, r3, #8
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00a      	beq.n	800ecb4 <dir_find+0x9c>
 800ec9e:	7bfb      	ldrb	r3, [r7, #15]
 800eca0:	2b0f      	cmp	r3, #15
 800eca2:	d007      	beq.n	800ecb4 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800eca4:	23ff      	movs	r3, #255	@ 0xff
 800eca6:	757b      	strb	r3, [r7, #21]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ecae:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
 800ecb2:	e05c      	b.n	800ed6e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ecb4:	7bfb      	ldrb	r3, [r7, #15]
 800ecb6:	2b0f      	cmp	r3, #15
 800ecb8:	d133      	bne.n	800ed22 <dir_find+0x10a>
				if (dp->lfn) {
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d054      	beq.n	800ed6e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ecc4:	7dbb      	ldrb	r3, [r7, #22]
 800ecc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d00e      	beq.n	800ecec <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	7b5b      	ldrb	r3, [r3, #13]
 800ecd2:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800ecd4:	7dbb      	ldrb	r3, [r7, #22]
 800ecd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ecda:	75bb      	strb	r3, [r7, #22]
 800ecdc:	7dbb      	ldrb	r3, [r7, #22]
 800ecde:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800ecec:	7dba      	ldrb	r2, [r7, #22]
 800ecee:	7d7b      	ldrb	r3, [r7, #21]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d113      	bne.n	800ed1c <dir_find+0x104>
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	330d      	adds	r3, #13
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	7d3a      	ldrb	r2, [r7, #20]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d10d      	bne.n	800ed1c <dir_find+0x104>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800ed06:	6939      	ldr	r1, [r7, #16]
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7ff fdf5 	bl	800e8f8 <cmp_lfn>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d003      	beq.n	800ed1c <dir_find+0x104>
 800ed14:	7d7b      	ldrb	r3, [r7, #21]
 800ed16:	3b01      	subs	r3, #1
 800ed18:	b2db      	uxtb	r3, r3
 800ed1a:	e000      	b.n	800ed1e <dir_find+0x106>
 800ed1c:	23ff      	movs	r3, #255	@ 0xff
 800ed1e:	757b      	strb	r3, [r7, #21]
 800ed20:	e025      	b.n	800ed6e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ed22:	7d7b      	ldrb	r3, [r7, #21]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d107      	bne.n	800ed38 <dir_find+0x120>
 800ed28:	6938      	ldr	r0, [r7, #16]
 800ed2a:	f7ff ff55 	bl	800ebd8 <sum_sfn>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	461a      	mov	r2, r3
 800ed32:	7d3b      	ldrb	r3, [r7, #20]
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d027      	beq.n	800ed88 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ed3e:	330b      	adds	r3, #11
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	f003 0301 	and.w	r3, r3, #1
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d10a      	bne.n	800ed60 <dir_find+0x148>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ed50:	220b      	movs	r2, #11
 800ed52:	4619      	mov	r1, r3
 800ed54:	6938      	ldr	r0, [r7, #16]
 800ed56:	f7fe fd91 	bl	800d87c <mem_cmp>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d015      	beq.n	800ed8c <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ed60:	23ff      	movs	r3, #255	@ 0xff
 800ed62:	757b      	strb	r3, [r7, #21]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed6a:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800ed6e:	2100      	movs	r1, #0
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f7ff fc2c 	bl	800e5ce <dir_next>
 800ed76:	4603      	mov	r3, r0
 800ed78:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ed7a:	7dfb      	ldrb	r3, [r7, #23]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	f43f af63 	beq.w	800ec48 <dir_find+0x30>
 800ed82:	e004      	b.n	800ed8e <dir_find+0x176>
		if (res != FR_OK) break;
 800ed84:	bf00      	nop
 800ed86:	e002      	b.n	800ed8e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ed88:	bf00      	nop
 800ed8a:	e000      	b.n	800ed8e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ed8c:	bf00      	nop

	return res;
 800ed8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3718      	adds	r7, #24
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b08c      	sub	sp, #48	@ 0x30
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800eda6:	623b      	str	r3, [r7, #32]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800edae:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800edb0:	f107 030c 	add.w	r3, r7, #12
 800edb4:	220c      	movs	r2, #12
 800edb6:	6a39      	ldr	r1, [r7, #32]
 800edb8:	4618      	mov	r0, r3
 800edba:	f7fe fd27 	bl	800d80c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800edbe:	7dfb      	ldrb	r3, [r7, #23]
 800edc0:	f003 0301 	and.w	r3, r3, #1
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d037      	beq.n	800ee38 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800edc8:	6a3b      	ldr	r3, [r7, #32]
 800edca:	330b      	adds	r3, #11
 800edcc:	2200      	movs	r2, #0
 800edce:	701a      	strb	r2, [r3, #0]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2200      	movs	r2, #0
 800edd4:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		for (n = 1; n < 100; n++) {
 800edd8:	2301      	movs	r3, #1
 800edda:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eddc:	e013      	b.n	800ee06 <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800edde:	f107 010c 	add.w	r1, r7, #12
 800ede2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ede4:	69fa      	ldr	r2, [r7, #28]
 800ede6:	6a38      	ldr	r0, [r7, #32]
 800ede8:	f7ff fe68 	bl	800eabc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f7ff ff13 	bl	800ec18 <dir_find>
 800edf2:	4603      	mov	r3, r0
 800edf4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800edf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d106      	bne.n	800ee0e <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 800ee00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee02:	3301      	adds	r3, #1
 800ee04:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ee06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee08:	2b63      	cmp	r3, #99	@ 0x63
 800ee0a:	d9e8      	bls.n	800edde <dir_register+0x46>
 800ee0c:	e000      	b.n	800ee10 <dir_register+0x78>
			if (res != FR_OK) break;
 800ee0e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ee10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee12:	2b64      	cmp	r3, #100	@ 0x64
 800ee14:	d101      	bne.n	800ee1a <dir_register+0x82>
 800ee16:	2307      	movs	r3, #7
 800ee18:	e0c5      	b.n	800efa6 <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ee1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ee1e:	2b04      	cmp	r3, #4
 800ee20:	d002      	beq.n	800ee28 <dir_register+0x90>
 800ee22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ee26:	e0be      	b.n	800efa6 <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800ee28:	6a3b      	ldr	r3, [r7, #32]
 800ee2a:	330b      	adds	r3, #11
 800ee2c:	7dfa      	ldrb	r2, [r7, #23]
 800ee2e:	701a      	strb	r2, [r3, #0]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	69fa      	ldr	r2, [r7, #28]
 800ee34:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800ee38:	7dfb      	ldrb	r3, [r7, #23]
 800ee3a:	f003 0302 	and.w	r3, r3, #2
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d014      	beq.n	800ee6c <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800ee42:	2300      	movs	r3, #0
 800ee44:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ee46:	e002      	b.n	800ee4e <dir_register+0xb6>
 800ee48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ee4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	69fa      	ldr	r2, [r7, #28]
 800ee54:	4413      	add	r3, r2
 800ee56:	881b      	ldrh	r3, [r3, #0]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d1f5      	bne.n	800ee48 <dir_register+0xb0>
		nent = (n + 25) / 13;
 800ee5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee5e:	3319      	adds	r3, #25
 800ee60:	4a53      	ldr	r2, [pc, #332]	@ (800efb0 <dir_register+0x218>)
 800ee62:	fba2 2303 	umull	r2, r3, r2, r3
 800ee66:	089b      	lsrs	r3, r3, #2
 800ee68:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee6a:	e001      	b.n	800ee70 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ee70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f7ff fca2 	bl	800e7bc <dir_alloc>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ee7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d153      	bne.n	800ef2e <dir_register+0x196>
 800ee86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee88:	3b01      	subs	r3, #1
 800ee8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d04d      	beq.n	800ef2e <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800ee98:	461a      	mov	r2, r3
 800ee9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee9c:	1ad3      	subs	r3, r2, r3
 800ee9e:	4619      	mov	r1, r3
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f7ff fb00 	bl	800e4a6 <dir_sdi>
 800eea6:	4603      	mov	r3, r0
 800eea8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800eeac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d13c      	bne.n	800ef2e <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7ff fe8c 	bl	800ebd8 <sum_sfn>
 800eec0:	4603      	mov	r3, r0
 800eec2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800eed0:	4619      	mov	r1, r3
 800eed2:	4610      	mov	r0, r2
 800eed4:	f7fe fef9 	bl	800dcca <move_window>
 800eed8:	4603      	mov	r3, r0
 800eeda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800eede:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d122      	bne.n	800ef2c <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8d3 1214 	ldr.w	r1, [r3, #532]	@ 0x214
 800eef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef4:	b2da      	uxtb	r2, r3
 800eef6:	7efb      	ldrb	r3, [r7, #27]
 800eef8:	f7ff fd6c 	bl	800e9d4 <fit_lfn>
				dp->fs->wflag = 1;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ef02:	2201      	movs	r2, #1
 800ef04:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = dir_next(dp, 0);	/* Next entry */
 800ef08:	2100      	movs	r1, #0
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f7ff fb5f 	bl	800e5ce <dir_next>
 800ef10:	4603      	mov	r3, r0
 800ef12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800ef16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d107      	bne.n	800ef2e <dir_register+0x196>
 800ef1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef20:	3b01      	subs	r3, #1
 800ef22:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d1cc      	bne.n	800eec4 <dir_register+0x12c>
 800ef2a:	e000      	b.n	800ef2e <dir_register+0x196>
				if (res != FR_OK) break;
 800ef2c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800ef2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d135      	bne.n	800efa2 <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ef42:	4619      	mov	r1, r3
 800ef44:	4610      	mov	r0, r2
 800ef46:	f7fe fec0 	bl	800dcca <move_window>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ef50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d124      	bne.n	800efa2 <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ef5e:	2220      	movs	r2, #32
 800ef60:	2100      	movs	r1, #0
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7fe fc70 	bl	800d848 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ef74:	220b      	movs	r2, #11
 800ef76:	4619      	mov	r1, r3
 800ef78:	f7fe fc48 	bl	800d80c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ef82:	330b      	adds	r3, #11
 800ef84:	781a      	ldrb	r2, [r3, #0]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ef8c:	330c      	adds	r3, #12
 800ef8e:	f002 0218 	and.w	r2, r2, #24
 800ef92:	b2d2      	uxtb	r2, r2
 800ef94:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 800efa2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3730      	adds	r7, #48	@ 0x30
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
 800efae:	bf00      	nop
 800efb0:	4ec4ec4f 	.word	0x4ec4ec4f

0800efb4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b08a      	sub	sp, #40	@ 0x28
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	613b      	str	r3, [r7, #16]
 800efc4:	e002      	b.n	800efcc <create_name+0x18>
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	3301      	adds	r3, #1
 800efca:	613b      	str	r3, [r7, #16]
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	2b2f      	cmp	r3, #47	@ 0x2f
 800efd2:	d0f8      	beq.n	800efc6 <create_name+0x12>
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	2b5c      	cmp	r3, #92	@ 0x5c
 800efda:	d0f4      	beq.n	800efc6 <create_name+0x12>
	lfn = dp->lfn;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800efe2:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800efe4:	2300      	movs	r3, #0
 800efe6:	617b      	str	r3, [r7, #20]
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800efec:	69bb      	ldr	r3, [r7, #24]
 800efee:	1c5a      	adds	r2, r3, #1
 800eff0:	61ba      	str	r2, [r7, #24]
 800eff2:	693a      	ldr	r2, [r7, #16]
 800eff4:	4413      	add	r3, r2
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800effa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800effc:	2b1f      	cmp	r3, #31
 800effe:	d92f      	bls.n	800f060 <create_name+0xac>
 800f000:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f002:	2b2f      	cmp	r3, #47	@ 0x2f
 800f004:	d02c      	beq.n	800f060 <create_name+0xac>
 800f006:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f008:	2b5c      	cmp	r3, #92	@ 0x5c
 800f00a:	d029      	beq.n	800f060 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	2bfe      	cmp	r3, #254	@ 0xfe
 800f010:	d901      	bls.n	800f016 <create_name+0x62>
			return FR_INVALID_NAME;
 800f012:	2306      	movs	r3, #6
 800f014:	e182      	b.n	800f31c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f016:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f01c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f01e:	2101      	movs	r1, #1
 800f020:	4618      	mov	r0, r3
 800f022:	f001 ffe7 	bl	8010ff4 <ff_convert>
 800f026:	4603      	mov	r3, r0
 800f028:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f02a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d101      	bne.n	800f034 <create_name+0x80>
 800f030:	2306      	movs	r3, #6
 800f032:	e173      	b.n	800f31c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800f034:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f036:	2b7f      	cmp	r3, #127	@ 0x7f
 800f038:	d809      	bhi.n	800f04e <create_name+0x9a>
 800f03a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f03c:	4619      	mov	r1, r3
 800f03e:	488e      	ldr	r0, [pc, #568]	@ (800f278 <create_name+0x2c4>)
 800f040:	f7fe fc42 	bl	800d8c8 <chk_chr>
 800f044:	4603      	mov	r3, r0
 800f046:	2b00      	cmp	r3, #0
 800f048:	d001      	beq.n	800f04e <create_name+0x9a>
			return FR_INVALID_NAME;
 800f04a:	2306      	movs	r3, #6
 800f04c:	e166      	b.n	800f31c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	1c5a      	adds	r2, r3, #1
 800f052:	617a      	str	r2, [r7, #20]
 800f054:	005b      	lsls	r3, r3, #1
 800f056:	68fa      	ldr	r2, [r7, #12]
 800f058:	4413      	add	r3, r2
 800f05a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f05c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f05e:	e7c5      	b.n	800efec <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f060:	693a      	ldr	r2, [r7, #16]
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	441a      	add	r2, r3
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800f06a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f06c:	2b1f      	cmp	r3, #31
 800f06e:	d801      	bhi.n	800f074 <create_name+0xc0>
 800f070:	2304      	movs	r3, #4
 800f072:	e000      	b.n	800f076 <create_name+0xc2>
 800f074:	2300      	movs	r3, #0
 800f076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800f07a:	e011      	b.n	800f0a0 <create_name+0xec>
		w = lfn[di - 1];
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f082:	3b01      	subs	r3, #1
 800f084:	005b      	lsls	r3, r3, #1
 800f086:	68fa      	ldr	r2, [r7, #12]
 800f088:	4413      	add	r3, r2
 800f08a:	881b      	ldrh	r3, [r3, #0]
 800f08c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800f08e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f090:	2b20      	cmp	r3, #32
 800f092:	d002      	beq.n	800f09a <create_name+0xe6>
 800f094:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f096:	2b2e      	cmp	r3, #46	@ 0x2e
 800f098:	d106      	bne.n	800f0a8 <create_name+0xf4>
		di--;
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	3b01      	subs	r3, #1
 800f09e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d1ea      	bne.n	800f07c <create_name+0xc8>
 800f0a6:	e000      	b.n	800f0aa <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 800f0a8:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d101      	bne.n	800f0b4 <create_name+0x100>
 800f0b0:	2306      	movs	r3, #6
 800f0b2:	e133      	b.n	800f31c <create_name+0x368>

	lfn[di] = 0;						/* LFN is created */
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	005b      	lsls	r3, r3, #1
 800f0b8:	68fa      	ldr	r2, [r7, #12]
 800f0ba:	4413      	add	r3, r2
 800f0bc:	2200      	movs	r2, #0
 800f0be:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f0c6:	220b      	movs	r2, #11
 800f0c8:	2120      	movs	r1, #32
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fe fbbc 	bl	800d848 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	61bb      	str	r3, [r7, #24]
 800f0d4:	e002      	b.n	800f0dc <create_name+0x128>
 800f0d6:	69bb      	ldr	r3, [r7, #24]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	61bb      	str	r3, [r7, #24]
 800f0dc:	69bb      	ldr	r3, [r7, #24]
 800f0de:	005b      	lsls	r3, r3, #1
 800f0e0:	68fa      	ldr	r2, [r7, #12]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	881b      	ldrh	r3, [r3, #0]
 800f0e6:	2b20      	cmp	r3, #32
 800f0e8:	d0f5      	beq.n	800f0d6 <create_name+0x122>
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	005b      	lsls	r3, r3, #1
 800f0ee:	68fa      	ldr	r2, [r7, #12]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	881b      	ldrh	r3, [r3, #0]
 800f0f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f0f6:	d0ee      	beq.n	800f0d6 <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d009      	beq.n	800f112 <create_name+0x15e>
 800f0fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f102:	f043 0303 	orr.w	r3, r3, #3
 800f106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f10a:	e002      	b.n	800f112 <create_name+0x15e>
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	3b01      	subs	r3, #1
 800f110:	617b      	str	r3, [r7, #20]
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d009      	beq.n	800f12c <create_name+0x178>
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f11e:	3b01      	subs	r3, #1
 800f120:	005b      	lsls	r3, r3, #1
 800f122:	68fa      	ldr	r2, [r7, #12]
 800f124:	4413      	add	r3, r2
 800f126:	881b      	ldrh	r3, [r3, #0]
 800f128:	2b2e      	cmp	r3, #46	@ 0x2e
 800f12a:	d1ef      	bne.n	800f10c <create_name+0x158>

	b = i = 0; ni = 8;
 800f12c:	2300      	movs	r3, #0
 800f12e:	623b      	str	r3, [r7, #32]
 800f130:	2300      	movs	r3, #0
 800f132:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f136:	2308      	movs	r3, #8
 800f138:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f13a:	69bb      	ldr	r3, [r7, #24]
 800f13c:	1c5a      	adds	r2, r3, #1
 800f13e:	61ba      	str	r2, [r7, #24]
 800f140:	005b      	lsls	r3, r3, #1
 800f142:	68fa      	ldr	r2, [r7, #12]
 800f144:	4413      	add	r3, r2
 800f146:	881b      	ldrh	r3, [r3, #0]
 800f148:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f14a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	f000 8090 	beq.w	800f272 <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f152:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f154:	2b20      	cmp	r3, #32
 800f156:	d006      	beq.n	800f166 <create_name+0x1b2>
 800f158:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f15a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f15c:	d10a      	bne.n	800f174 <create_name+0x1c0>
 800f15e:	69ba      	ldr	r2, [r7, #24]
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	429a      	cmp	r2, r3
 800f164:	d006      	beq.n	800f174 <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 800f166:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f16a:	f043 0303 	orr.w	r3, r3, #3
 800f16e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f172:	e07d      	b.n	800f270 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f174:	6a3a      	ldr	r2, [r7, #32]
 800f176:	69fb      	ldr	r3, [r7, #28]
 800f178:	429a      	cmp	r2, r3
 800f17a:	d203      	bcs.n	800f184 <create_name+0x1d0>
 800f17c:	69ba      	ldr	r2, [r7, #24]
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	429a      	cmp	r2, r3
 800f182:	d123      	bne.n	800f1cc <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	2b0b      	cmp	r3, #11
 800f188:	d106      	bne.n	800f198 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 800f18a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f18e:	f043 0303 	orr.w	r3, r3, #3
 800f192:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f196:	e076      	b.n	800f286 <create_name+0x2d2>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f198:	69ba      	ldr	r2, [r7, #24]
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d005      	beq.n	800f1ac <create_name+0x1f8>
 800f1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1a4:	f043 0303 	orr.w	r3, r3, #3
 800f1a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800f1ac:	69ba      	ldr	r2, [r7, #24]
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d867      	bhi.n	800f284 <create_name+0x2d0>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	61bb      	str	r3, [r7, #24]
 800f1b8:	2308      	movs	r3, #8
 800f1ba:	623b      	str	r3, [r7, #32]
 800f1bc:	230b      	movs	r3, #11
 800f1be:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f1c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f1ca:	e051      	b.n	800f270 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f1cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f1ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800f1d0:	d914      	bls.n	800f1fc <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f1d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f1d4:	2100      	movs	r1, #0
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f001 ff0c 	bl	8010ff4 <ff_convert>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f1e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d004      	beq.n	800f1f0 <create_name+0x23c>
 800f1e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f1e8:	3b80      	subs	r3, #128	@ 0x80
 800f1ea:	4a24      	ldr	r2, [pc, #144]	@ (800f27c <create_name+0x2c8>)
 800f1ec:	5cd3      	ldrb	r3, [r2, r3]
 800f1ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1f4:	f043 0302 	orr.w	r3, r3, #2
 800f1f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f1fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d007      	beq.n	800f212 <create_name+0x25e>
 800f202:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f204:	4619      	mov	r1, r3
 800f206:	481e      	ldr	r0, [pc, #120]	@ (800f280 <create_name+0x2cc>)
 800f208:	f7fe fb5e 	bl	800d8c8 <chk_chr>
 800f20c:	4603      	mov	r3, r0
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d008      	beq.n	800f224 <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f212:	235f      	movs	r3, #95	@ 0x5f
 800f214:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800f216:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f21a:	f043 0303 	orr.w	r3, r3, #3
 800f21e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f222:	e01b      	b.n	800f25c <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f224:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f226:	2b40      	cmp	r3, #64	@ 0x40
 800f228:	d909      	bls.n	800f23e <create_name+0x28a>
 800f22a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f22c:	2b5a      	cmp	r3, #90	@ 0x5a
 800f22e:	d806      	bhi.n	800f23e <create_name+0x28a>
					b |= 2;
 800f230:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f234:	f043 0302 	orr.w	r3, r3, #2
 800f238:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f23c:	e00e      	b.n	800f25c <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f23e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f240:	2b60      	cmp	r3, #96	@ 0x60
 800f242:	d90b      	bls.n	800f25c <create_name+0x2a8>
 800f244:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f246:	2b7a      	cmp	r3, #122	@ 0x7a
 800f248:	d808      	bhi.n	800f25c <create_name+0x2a8>
						b |= 1; w -= 0x20;
 800f24a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f24e:	f043 0301 	orr.w	r3, r3, #1
 800f252:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f256:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f258:	3b20      	subs	r3, #32
 800f25a:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800f262:	6a3b      	ldr	r3, [r7, #32]
 800f264:	1c59      	adds	r1, r3, #1
 800f266:	6239      	str	r1, [r7, #32]
 800f268:	4413      	add	r3, r2
 800f26a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f26c:	b2d2      	uxtb	r2, r2
 800f26e:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800f270:	e763      	b.n	800f13a <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 800f272:	bf00      	nop
 800f274:	e007      	b.n	800f286 <create_name+0x2d2>
 800f276:	bf00      	nop
 800f278:	08014370 	.word	0x08014370
 800f27c:	080144b0 	.word	0x080144b0
 800f280:	0801437c 	.word	0x0801437c
			if (si > di) break;			/* No extension */
 800f284:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	2be5      	cmp	r3, #229	@ 0xe5
 800f290:	d104      	bne.n	800f29c <create_name+0x2e8>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f298:	2205      	movs	r2, #5
 800f29a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800f29c:	69fb      	ldr	r3, [r7, #28]
 800f29e:	2b08      	cmp	r3, #8
 800f2a0:	d104      	bne.n	800f2ac <create_name+0x2f8>
 800f2a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800f2ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f2b0:	f003 030c 	and.w	r3, r3, #12
 800f2b4:	2b0c      	cmp	r3, #12
 800f2b6:	d005      	beq.n	800f2c4 <create_name+0x310>
 800f2b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f2bc:	f003 0303 	and.w	r3, r3, #3
 800f2c0:	2b03      	cmp	r3, #3
 800f2c2:	d105      	bne.n	800f2d0 <create_name+0x31c>
		cf |= NS_LFN;
 800f2c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f2c8:	f043 0302 	orr.w	r3, r3, #2
 800f2cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f2d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f2d4:	f003 0302 	and.w	r3, r3, #2
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d117      	bne.n	800f30c <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f2dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f2e0:	f003 0303 	and.w	r3, r3, #3
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d105      	bne.n	800f2f4 <create_name+0x340>
 800f2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f2ec:	f043 0310 	orr.w	r3, r3, #16
 800f2f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f2f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f2f8:	f003 030c 	and.w	r3, r3, #12
 800f2fc:	2b04      	cmp	r3, #4
 800f2fe:	d105      	bne.n	800f30c <create_name+0x358>
 800f300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f304:	f043 0308 	orr.w	r3, r3, #8
 800f308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f312:	330b      	adds	r3, #11
 800f314:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800f318:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f31a:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3728      	adds	r7, #40	@ 0x28
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b084      	sub	sp, #16
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	2b2f      	cmp	r3, #47	@ 0x2f
 800f334:	d003      	beq.n	800f33e <follow_path+0x1a>
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	2b5c      	cmp	r3, #92	@ 0x5c
 800f33c:	d102      	bne.n	800f344 <follow_path+0x20>
		path++;
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	3301      	adds	r3, #1
 800f342:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2200      	movs	r2, #0
 800f348:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	2b1f      	cmp	r3, #31
 800f352:	d80a      	bhi.n	800f36a <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800f354:	2100      	movs	r1, #0
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f7ff f8a5 	bl	800e4a6 <dir_sdi>
 800f35c:	4603      	mov	r3, r0
 800f35e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2200      	movs	r2, #0
 800f364:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800f368:	e045      	b.n	800f3f6 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f36a:	463b      	mov	r3, r7
 800f36c:	4619      	mov	r1, r3
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7ff fe20 	bl	800efb4 <create_name>
 800f374:	4603      	mov	r3, r0
 800f376:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f378:	7bfb      	ldrb	r3, [r7, #15]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d136      	bne.n	800f3ec <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f7ff fc4a 	bl	800ec18 <dir_find>
 800f384:	4603      	mov	r3, r0
 800f386:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f38e:	7adb      	ldrb	r3, [r3, #11]
 800f390:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800f392:	7bfb      	ldrb	r3, [r7, #15]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d00a      	beq.n	800f3ae <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f398:	7bfb      	ldrb	r3, [r7, #15]
 800f39a:	2b04      	cmp	r3, #4
 800f39c:	d128      	bne.n	800f3f0 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f39e:	7bbb      	ldrb	r3, [r7, #14]
 800f3a0:	f003 0304 	and.w	r3, r3, #4
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d123      	bne.n	800f3f0 <follow_path+0xcc>
 800f3a8:	2305      	movs	r3, #5
 800f3aa:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800f3ac:	e020      	b.n	800f3f0 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f3ae:	7bbb      	ldrb	r3, [r7, #14]
 800f3b0:	f003 0304 	and.w	r3, r3, #4
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d11d      	bne.n	800f3f4 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f3be:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	330b      	adds	r3, #11
 800f3c4:	781b      	ldrb	r3, [r3, #0]
 800f3c6:	f003 0310 	and.w	r3, r3, #16
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d102      	bne.n	800f3d4 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800f3ce:	2305      	movs	r3, #5
 800f3d0:	73fb      	strb	r3, [r7, #15]
 800f3d2:	e010      	b.n	800f3f6 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f3da:	68b9      	ldr	r1, [r7, #8]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7ff fa37 	bl	800e850 <ld_clust>
 800f3e2:	4602      	mov	r2, r0
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f3ea:	e7be      	b.n	800f36a <follow_path+0x46>
			if (res != FR_OK) break;
 800f3ec:	bf00      	nop
 800f3ee:	e002      	b.n	800f3f6 <follow_path+0xd2>
				break;
 800f3f0:	bf00      	nop
 800f3f2:	e000      	b.n	800f3f6 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f3f4:	bf00      	nop
		}
	}

	return res;
 800f3f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3710      	adds	r7, #16
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f400:	b480      	push	{r7}
 800f402:	b087      	sub	sp, #28
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f408:	f04f 33ff 	mov.w	r3, #4294967295
 800f40c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d031      	beq.n	800f47a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	617b      	str	r3, [r7, #20]
 800f41c:	e002      	b.n	800f424 <get_ldnumber+0x24>
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	3301      	adds	r3, #1
 800f422:	617b      	str	r3, [r7, #20]
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	2b1f      	cmp	r3, #31
 800f42a:	d903      	bls.n	800f434 <get_ldnumber+0x34>
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	2b3a      	cmp	r3, #58	@ 0x3a
 800f432:	d1f4      	bne.n	800f41e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	2b3a      	cmp	r3, #58	@ 0x3a
 800f43a:	d11c      	bne.n	800f476 <get_ldnumber+0x76>
			tp = *path;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	1c5a      	adds	r2, r3, #1
 800f446:	60fa      	str	r2, [r7, #12]
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	3b30      	subs	r3, #48	@ 0x30
 800f44c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	2b09      	cmp	r3, #9
 800f452:	d80e      	bhi.n	800f472 <get_ldnumber+0x72>
 800f454:	68fa      	ldr	r2, [r7, #12]
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d10a      	bne.n	800f472 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d107      	bne.n	800f472 <get_ldnumber+0x72>
					vol = (int)i;
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	3301      	adds	r3, #1
 800f46a:	617b      	str	r3, [r7, #20]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	697a      	ldr	r2, [r7, #20]
 800f470:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	e002      	b.n	800f47c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f476:	2300      	movs	r3, #0
 800f478:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f47a:	693b      	ldr	r3, [r7, #16]
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	371c      	adds	r7, #28
 800f480:	46bd      	mov	sp, r7
 800f482:	bc80      	pop	{r7}
 800f484:	4770      	bx	lr
	...

0800f488 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f04f 32ff 	mov.w	r2, #4294967295
 800f4a0:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800f4a4:	6839      	ldr	r1, [r7, #0]
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f7fe fc0f 	bl	800dcca <move_window>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d001      	beq.n	800f4b6 <check_fs+0x2e>
		return 3;
 800f4b2:	2303      	movs	r3, #3
 800f4b4:	e04a      	b.n	800f54c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f4bc:	3301      	adds	r3, #1
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	021b      	lsls	r3, r3, #8
 800f4c2:	b21a      	sxth	r2, r3
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800f4ca:	b21b      	sxth	r3, r3
 800f4cc:	4313      	orrs	r3, r2
 800f4ce:	b21b      	sxth	r3, r3
 800f4d0:	4a20      	ldr	r2, [pc, #128]	@ (800f554 <check_fs+0xcc>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d001      	beq.n	800f4da <check_fs+0x52>
		return 2;
 800f4d6:	2302      	movs	r3, #2
 800f4d8:	e038      	b.n	800f54c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	3336      	adds	r3, #54	@ 0x36
 800f4de:	3303      	adds	r3, #3
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	061a      	lsls	r2, r3, #24
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	3336      	adds	r3, #54	@ 0x36
 800f4e8:	3302      	adds	r3, #2
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	041b      	lsls	r3, r3, #16
 800f4ee:	431a      	orrs	r2, r3
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	3336      	adds	r3, #54	@ 0x36
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	021b      	lsls	r3, r3, #8
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	687a      	ldr	r2, [r7, #4]
 800f4fe:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 800f502:	4313      	orrs	r3, r2
 800f504:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f508:	4a13      	ldr	r2, [pc, #76]	@ (800f558 <check_fs+0xd0>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d101      	bne.n	800f512 <check_fs+0x8a>
		return 0;
 800f50e:	2300      	movs	r3, #0
 800f510:	e01c      	b.n	800f54c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	3352      	adds	r3, #82	@ 0x52
 800f516:	3303      	adds	r3, #3
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	061a      	lsls	r2, r3, #24
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	3352      	adds	r3, #82	@ 0x52
 800f520:	3302      	adds	r3, #2
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	041b      	lsls	r3, r3, #16
 800f526:	431a      	orrs	r2, r3
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	3352      	adds	r3, #82	@ 0x52
 800f52c:	3301      	adds	r3, #1
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	021b      	lsls	r3, r3, #8
 800f532:	4313      	orrs	r3, r2
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800f53a:	4313      	orrs	r3, r2
 800f53c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f540:	4a05      	ldr	r2, [pc, #20]	@ (800f558 <check_fs+0xd0>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d101      	bne.n	800f54a <check_fs+0xc2>
		return 0;
 800f546:	2300      	movs	r3, #0
 800f548:	e000      	b.n	800f54c <check_fs+0xc4>

	return 1;
 800f54a:	2301      	movs	r3, #1
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3708      	adds	r7, #8
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}
 800f554:	ffffaa55 	.word	0xffffaa55
 800f558:	00544146 	.word	0x00544146

0800f55c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b096      	sub	sp, #88	@ 0x58
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	4613      	mov	r3, r2
 800f568:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2200      	movs	r2, #0
 800f56e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f570:	68b8      	ldr	r0, [r7, #8]
 800f572:	f7ff ff45 	bl	800f400 <get_ldnumber>
 800f576:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	da01      	bge.n	800f582 <find_volume+0x26>
 800f57e:	230b      	movs	r3, #11
 800f580:	e2b0      	b.n	800fae4 <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f582:	4aa1      	ldr	r2, [pc, #644]	@ (800f808 <find_volume+0x2ac>)
 800f584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f58a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d101      	bne.n	800f596 <find_volume+0x3a>
 800f592:	230c      	movs	r3, #12
 800f594:	e2a6      	b.n	800fae4 <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 800f596:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f598:	f7fe f9b0 	bl	800d8fc <lock_fs>
 800f59c:	4603      	mov	r3, r0
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d101      	bne.n	800f5a6 <find_volume+0x4a>
 800f5a2:	230f      	movs	r3, #15
 800f5a4:	e29e      	b.n	800fae4 <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5aa:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800f5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d01b      	beq.n	800f5ee <find_volume+0x92>
		stat = disk_status(fs->drv);
 800f5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b8:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7fe f887 	bl	800d6d0 <disk_status>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f5c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f5cc:	f003 0301 	and.w	r3, r3, #1
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d10c      	bne.n	800f5ee <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800f5d4:	79fb      	ldrb	r3, [r7, #7]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d007      	beq.n	800f5ea <find_volume+0x8e>
 800f5da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f5de:	f003 0304 	and.w	r3, r3, #4
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d001      	beq.n	800f5ea <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 800f5e6:	230a      	movs	r3, #10
 800f5e8:	e27c      	b.n	800fae4 <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	e27a      	b.n	800fae4 <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f5f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5f8:	b2da      	uxtb	r2, r3
 800f5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5fc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f602:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f606:	4618      	mov	r0, r3
 800f608:	f7fe f87c 	bl	800d704 <disk_initialize>
 800f60c:	4603      	mov	r3, r0
 800f60e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800f612:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f616:	f003 0301 	and.w	r3, r3, #1
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d001      	beq.n	800f622 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f61e:	2303      	movs	r3, #3
 800f620:	e260      	b.n	800fae4 <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800f622:	79fb      	ldrb	r3, [r7, #7]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d007      	beq.n	800f638 <find_volume+0xdc>
 800f628:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f62c:	f003 0304 	and.w	r3, r3, #4
 800f630:	2b00      	cmp	r3, #0
 800f632:	d001      	beq.n	800f638 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800f634:	230a      	movs	r3, #10
 800f636:	e255      	b.n	800fae4 <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800f638:	2300      	movs	r3, #0
 800f63a:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800f63c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f63e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f640:	f7ff ff22 	bl	800f488 <check_fs>
 800f644:	4603      	mov	r3, r0
 800f646:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800f64a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f64e:	2b01      	cmp	r3, #1
 800f650:	d153      	bne.n	800f6fa <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800f652:	2300      	movs	r3, #0
 800f654:	643b      	str	r3, [r7, #64]	@ 0x40
 800f656:	e028      	b.n	800f6aa <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800f658:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f65a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f65c:	011b      	lsls	r3, r3, #4
 800f65e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f662:	4413      	add	r3, r2
 800f664:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800f666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f668:	3304      	adds	r3, #4
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d012      	beq.n	800f696 <find_volume+0x13a>
 800f670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f672:	330b      	adds	r3, #11
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	061a      	lsls	r2, r3, #24
 800f678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f67a:	330a      	adds	r3, #10
 800f67c:	781b      	ldrb	r3, [r3, #0]
 800f67e:	041b      	lsls	r3, r3, #16
 800f680:	431a      	orrs	r2, r3
 800f682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f684:	3309      	adds	r3, #9
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	021b      	lsls	r3, r3, #8
 800f68a:	4313      	orrs	r3, r2
 800f68c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f68e:	3208      	adds	r2, #8
 800f690:	7812      	ldrb	r2, [r2, #0]
 800f692:	431a      	orrs	r2, r3
 800f694:	e000      	b.n	800f698 <find_volume+0x13c>
 800f696:	2200      	movs	r2, #0
 800f698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f69a:	009b      	lsls	r3, r3, #2
 800f69c:	3358      	adds	r3, #88	@ 0x58
 800f69e:	443b      	add	r3, r7
 800f6a0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800f6a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800f6aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6ac:	2b03      	cmp	r3, #3
 800f6ae:	d9d3      	bls.n	800f658 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f6b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d002      	beq.n	800f6c0 <find_volume+0x164>
 800f6ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800f6c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6c2:	009b      	lsls	r3, r3, #2
 800f6c4:	3358      	adds	r3, #88	@ 0x58
 800f6c6:	443b      	add	r3, r7
 800f6c8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f6cc:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800f6ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d005      	beq.n	800f6e0 <find_volume+0x184>
 800f6d4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f6d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f6d8:	f7ff fed6 	bl	800f488 <check_fs>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	e000      	b.n	800f6e2 <find_volume+0x186>
 800f6e0:	2302      	movs	r3, #2
 800f6e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800f6e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d005      	beq.n	800f6fa <find_volume+0x19e>
 800f6ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800f6f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6f6:	2b03      	cmp	r3, #3
 800f6f8:	d9e2      	bls.n	800f6c0 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f6fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f6fe:	2b03      	cmp	r3, #3
 800f700:	d101      	bne.n	800f706 <find_volume+0x1aa>
 800f702:	2301      	movs	r3, #1
 800f704:	e1ee      	b.n	800fae4 <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800f706:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d001      	beq.n	800f712 <find_volume+0x1b6>
 800f70e:	230d      	movs	r3, #13
 800f710:	e1e8      	b.n	800fae4 <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f714:	7b1b      	ldrb	r3, [r3, #12]
 800f716:	021b      	lsls	r3, r3, #8
 800f718:	b21a      	sxth	r2, r3
 800f71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f71c:	7adb      	ldrb	r3, [r3, #11]
 800f71e:	b21b      	sxth	r3, r3
 800f720:	4313      	orrs	r3, r2
 800f722:	b21b      	sxth	r3, r3
 800f724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f728:	d001      	beq.n	800f72e <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 800f72a:	230d      	movs	r3, #13
 800f72c:	e1da      	b.n	800fae4 <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800f72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f730:	7ddb      	ldrb	r3, [r3, #23]
 800f732:	021b      	lsls	r3, r3, #8
 800f734:	b21a      	sxth	r2, r3
 800f736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f738:	7d9b      	ldrb	r3, [r3, #22]
 800f73a:	b21b      	sxth	r3, r3
 800f73c:	4313      	orrs	r3, r2
 800f73e:	b21b      	sxth	r3, r3
 800f740:	b29b      	uxth	r3, r3
 800f742:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800f744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f746:	2b00      	cmp	r3, #0
 800f748:	d112      	bne.n	800f770 <find_volume+0x214>
 800f74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f74c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800f750:	061a      	lsls	r2, r3, #24
 800f752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f754:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800f758:	041b      	lsls	r3, r3, #16
 800f75a:	431a      	orrs	r2, r3
 800f75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f75e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800f762:	021b      	lsls	r3, r3, #8
 800f764:	4313      	orrs	r3, r2
 800f766:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f768:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800f76c:	4313      	orrs	r3, r2
 800f76e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 800f770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f772:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f774:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800f778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f77a:	7c1a      	ldrb	r2, [r3, #16]
 800f77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f77e:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800f782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f784:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800f788:	2b01      	cmp	r3, #1
 800f78a:	d006      	beq.n	800f79a <find_volume+0x23e>
 800f78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f78e:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800f792:	2b02      	cmp	r3, #2
 800f794:	d001      	beq.n	800f79a <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 800f796:	230d      	movs	r3, #13
 800f798:	e1a4      	b.n	800fae4 <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800f79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f79c:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7a4:	fb02 f303 	mul.w	r3, r2, r3
 800f7a8:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800f7aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ac:	7b5a      	ldrb	r2, [r3, #13]
 800f7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b0:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800f7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b6:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d00a      	beq.n	800f7d4 <find_volume+0x278>
 800f7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c0:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c8:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f7cc:	3b01      	subs	r3, #1
 800f7ce:	4013      	ands	r3, r2
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d001      	beq.n	800f7d8 <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 800f7d4:	230d      	movs	r3, #13
 800f7d6:	e185      	b.n	800fae4 <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800f7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7da:	7c9b      	ldrb	r3, [r3, #18]
 800f7dc:	021b      	lsls	r3, r3, #8
 800f7de:	b21a      	sxth	r2, r3
 800f7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e2:	7c5b      	ldrb	r3, [r3, #17]
 800f7e4:	b21b      	sxth	r3, r3
 800f7e6:	4313      	orrs	r3, r2
 800f7e8:	b21b      	sxth	r3, r3
 800f7ea:	b29a      	uxth	r2, r3
 800f7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ee:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800f7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7f4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800f7f8:	f003 030f 	and.w	r3, r3, #15
 800f7fc:	b29b      	uxth	r3, r3
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d004      	beq.n	800f80c <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 800f802:	230d      	movs	r3, #13
 800f804:	e16e      	b.n	800fae4 <find_volume+0x588>
 800f806:	bf00      	nop
 800f808:	200012a4 	.word	0x200012a4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800f80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f80e:	7d1b      	ldrb	r3, [r3, #20]
 800f810:	021b      	lsls	r3, r3, #8
 800f812:	b21a      	sxth	r2, r3
 800f814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f816:	7cdb      	ldrb	r3, [r3, #19]
 800f818:	b21b      	sxth	r3, r3
 800f81a:	4313      	orrs	r3, r2
 800f81c:	b21b      	sxth	r3, r3
 800f81e:	b29b      	uxth	r3, r3
 800f820:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800f822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f824:	2b00      	cmp	r3, #0
 800f826:	d112      	bne.n	800f84e <find_volume+0x2f2>
 800f828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f82a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800f82e:	061a      	lsls	r2, r3, #24
 800f830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f832:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800f836:	041b      	lsls	r3, r3, #16
 800f838:	431a      	orrs	r2, r3
 800f83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f83c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800f840:	021b      	lsls	r3, r3, #8
 800f842:	4313      	orrs	r3, r2
 800f844:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f846:	f892 2020 	ldrb.w	r2, [r2, #32]
 800f84a:	4313      	orrs	r3, r2
 800f84c:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800f84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f850:	7bdb      	ldrb	r3, [r3, #15]
 800f852:	021b      	lsls	r3, r3, #8
 800f854:	b21a      	sxth	r2, r3
 800f856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f858:	7b9b      	ldrb	r3, [r3, #14]
 800f85a:	b21b      	sxth	r3, r3
 800f85c:	4313      	orrs	r3, r2
 800f85e:	b21b      	sxth	r3, r3
 800f860:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800f862:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f864:	2b00      	cmp	r3, #0
 800f866:	d101      	bne.n	800f86c <find_volume+0x310>
 800f868:	230d      	movs	r3, #13
 800f86a:	e13b      	b.n	800fae4 <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800f86c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f86e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f870:	4413      	add	r3, r2
 800f872:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f874:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 800f878:	0912      	lsrs	r2, r2, #4
 800f87a:	b292      	uxth	r2, r2
 800f87c:	4413      	add	r3, r2
 800f87e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f880:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f884:	429a      	cmp	r2, r3
 800f886:	d201      	bcs.n	800f88c <find_volume+0x330>
 800f888:	230d      	movs	r3, #13
 800f88a:	e12b      	b.n	800fae4 <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800f88c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f890:	1ad3      	subs	r3, r2, r3
 800f892:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f894:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800f898:	fbb3 f3f2 	udiv	r3, r3, r2
 800f89c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800f89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d101      	bne.n	800f8a8 <find_volume+0x34c>
 800f8a4:	230d      	movs	r3, #13
 800f8a6:	e11d      	b.n	800fae4 <find_volume+0x588>
	fmt = FS_FAT12;
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8b0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f8b4:	4293      	cmp	r3, r2
 800f8b6:	d902      	bls.n	800f8be <find_volume+0x362>
 800f8b8:	2302      	movs	r3, #2
 800f8ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800f8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8c0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	d902      	bls.n	800f8ce <find_volume+0x372>
 800f8c8:	2303      	movs	r3, #3
 800f8ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800f8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8d0:	1c9a      	adds	r2, r3, #2
 800f8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8d4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
	fs->volbase = bsect;								/* Volume start sector */
 800f8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f8dc:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800f8e0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f8e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8e4:	441a      	add	r2, r3
 800f8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8e8:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 800f8ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f0:	441a      	add	r2, r3
 800f8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8f4:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (fmt == FS_FAT32) {
 800f8f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f8fc:	2b03      	cmp	r3, #3
 800f8fe:	d121      	bne.n	800f944 <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800f900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f902:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800f906:	2b00      	cmp	r3, #0
 800f908:	d001      	beq.n	800f90e <find_volume+0x3b2>
 800f90a:	230d      	movs	r3, #13
 800f90c:	e0ea      	b.n	800fae4 <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800f90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f910:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f914:	061a      	lsls	r2, r3, #24
 800f916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f918:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f91c:	041b      	lsls	r3, r3, #16
 800f91e:	431a      	orrs	r2, r3
 800f920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f922:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f926:	021b      	lsls	r3, r3, #8
 800f928:	4313      	orrs	r3, r2
 800f92a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f92c:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 800f930:	431a      	orrs	r2, r3
 800f932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f934:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800f938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f93a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	647b      	str	r3, [r7, #68]	@ 0x44
 800f942:	e025      	b.n	800f990 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800f944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f946:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d101      	bne.n	800f952 <find_volume+0x3f6>
 800f94e:	230d      	movs	r3, #13
 800f950:	e0c8      	b.n	800fae4 <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800f952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f954:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f95a:	441a      	add	r2, r3
 800f95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f95e:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f962:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f966:	2b02      	cmp	r3, #2
 800f968:	d104      	bne.n	800f974 <find_volume+0x418>
 800f96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f96c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f970:	005b      	lsls	r3, r3, #1
 800f972:	e00c      	b.n	800f98e <find_volume+0x432>
 800f974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f976:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800f97a:	4613      	mov	r3, r2
 800f97c:	005b      	lsls	r3, r3, #1
 800f97e:	4413      	add	r3, r2
 800f980:	085a      	lsrs	r2, r3, #1
 800f982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f984:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f988:	f003 0301 	and.w	r3, r3, #1
 800f98c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800f98e:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800f990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f992:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800f996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f998:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f99c:	0a5b      	lsrs	r3, r3, #9
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d201      	bcs.n	800f9a6 <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 800f9a2:	230d      	movs	r3, #13
 800f9a4:	e09e      	b.n	800fae4 <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800f9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f9ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800f9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800f9b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9b8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800f9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9be:	2280      	movs	r2, #128	@ 0x80
 800f9c0:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800f9c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f9c8:	2b03      	cmp	r3, #3
 800f9ca:	d177      	bne.n	800fabc <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800f9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f9d2:	021b      	lsls	r3, r3, #8
 800f9d4:	b21a      	sxth	r2, r3
 800f9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f9dc:	b21b      	sxth	r3, r3
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	b21b      	sxth	r3, r3
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d16a      	bne.n	800fabc <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 800f9e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9e8:	3301      	adds	r3, #1
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f9ee:	f7fe f96c 	bl	800dcca <move_window>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d161      	bne.n	800fabc <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 800f9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fa00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa02:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 800fa06:	021b      	lsls	r3, r3, #8
 800fa08:	b21a      	sxth	r2, r3
 800fa0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa0c:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800fa10:	b21b      	sxth	r3, r3
 800fa12:	4313      	orrs	r3, r2
 800fa14:	b21b      	sxth	r3, r3
 800fa16:	4a35      	ldr	r2, [pc, #212]	@ (800faec <find_volume+0x590>)
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d14f      	bne.n	800fabc <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800fa1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa1e:	78db      	ldrb	r3, [r3, #3]
 800fa20:	061a      	lsls	r2, r3, #24
 800fa22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa24:	789b      	ldrb	r3, [r3, #2]
 800fa26:	041b      	lsls	r3, r3, #16
 800fa28:	431a      	orrs	r2, r3
 800fa2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa2c:	785b      	ldrb	r3, [r3, #1]
 800fa2e:	021b      	lsls	r3, r3, #8
 800fa30:	4313      	orrs	r3, r2
 800fa32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fa34:	7812      	ldrb	r2, [r2, #0]
 800fa36:	4313      	orrs	r3, r2
 800fa38:	4a2d      	ldr	r2, [pc, #180]	@ (800faf0 <find_volume+0x594>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d13e      	bne.n	800fabc <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800fa3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa40:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 800fa44:	061a      	lsls	r2, r3, #24
 800fa46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa48:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 800fa4c:	041b      	lsls	r3, r3, #16
 800fa4e:	431a      	orrs	r2, r3
 800fa50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa52:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 800fa56:	021b      	lsls	r3, r3, #8
 800fa58:	4313      	orrs	r3, r2
 800fa5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fa5c:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 800fa60:	4313      	orrs	r3, r2
 800fa62:	4a24      	ldr	r2, [pc, #144]	@ (800faf4 <find_volume+0x598>)
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d129      	bne.n	800fabc <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800fa68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa6a:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800fa6e:	061a      	lsls	r2, r3, #24
 800fa70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa72:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 800fa76:	041b      	lsls	r3, r3, #16
 800fa78:	431a      	orrs	r2, r3
 800fa7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa7c:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 800fa80:	021b      	lsls	r3, r3, #8
 800fa82:	4313      	orrs	r3, r2
 800fa84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fa86:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800fa8a:	431a      	orrs	r2, r3
 800fa8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800fa92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa94:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800fa98:	061a      	lsls	r2, r3, #24
 800fa9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa9c:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 800faa0:	041b      	lsls	r3, r3, #16
 800faa2:	431a      	orrs	r2, r3
 800faa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faa6:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800faaa:	021b      	lsls	r3, r3, #8
 800faac:	4313      	orrs	r3, r2
 800faae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fab0:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 800fab4:	431a      	orrs	r2, r3
 800fab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800fabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fabe:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800fac2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800fac6:	4b0c      	ldr	r3, [pc, #48]	@ (800faf8 <find_volume+0x59c>)
 800fac8:	881b      	ldrh	r3, [r3, #0]
 800faca:	3301      	adds	r3, #1
 800facc:	b29a      	uxth	r2, r3
 800face:	4b0a      	ldr	r3, [pc, #40]	@ (800faf8 <find_volume+0x59c>)
 800fad0:	801a      	strh	r2, [r3, #0]
 800fad2:	4b09      	ldr	r3, [pc, #36]	@ (800faf8 <find_volume+0x59c>)
 800fad4:	881a      	ldrh	r2, [r3, #0]
 800fad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fad8:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800fadc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fade:	f7fe f881 	bl	800dbe4 <clear_lock>
#endif

	return FR_OK;
 800fae2:	2300      	movs	r3, #0
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3758      	adds	r7, #88	@ 0x58
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}
 800faec:	ffffaa55 	.word	0xffffaa55
 800faf0:	41615252 	.word	0x41615252
 800faf4:	61417272 	.word	0x61417272
 800faf8:	200012a8 	.word	0x200012a8

0800fafc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b084      	sub	sp, #16
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d022      	beq.n	800fb54 <validate+0x58>
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d01d      	beq.n	800fb54 <validate+0x58>
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fb1e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d016      	beq.n	800fb54 <validate+0x58>
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fb2c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d10c      	bne.n	800fb54 <validate+0x58>
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fb40:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7fd fdc3 	bl	800d6d0 <disk_status>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	f003 0301 	and.w	r3, r3, #1
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d001      	beq.n	800fb58 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800fb54:	2309      	movs	r3, #9
 800fb56:	e00b      	b.n	800fb70 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fd fecc 	bl	800d8fc <lock_fs>
 800fb64:	4603      	mov	r3, r0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d101      	bne.n	800fb6e <validate+0x72>
 800fb6a:	230f      	movs	r3, #15
 800fb6c:	e000      	b.n	800fb70 <validate+0x74>

	return FR_OK;
 800fb6e:	2300      	movs	r3, #0
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3710      	adds	r7, #16
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b088      	sub	sp, #32
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	4613      	mov	r3, r2
 800fb84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800fb8a:	f107 0310 	add.w	r3, r7, #16
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7ff fc36 	bl	800f400 <get_ldnumber>
 800fb94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb96:	69fb      	ldr	r3, [r7, #28]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	da01      	bge.n	800fba0 <f_mount+0x28>
 800fb9c:	230b      	movs	r3, #11
 800fb9e:	e04c      	b.n	800fc3a <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fba0:	4a28      	ldr	r2, [pc, #160]	@ (800fc44 <f_mount+0xcc>)
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fba8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fbaa:	69bb      	ldr	r3, [r7, #24]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d011      	beq.n	800fbd4 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 800fbb0:	69b8      	ldr	r0, [r7, #24]
 800fbb2:	f7fe f817 	bl	800dbe4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800fbb6:	69bb      	ldr	r3, [r7, #24]
 800fbb8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f001 faa1 	bl	8011104 <ff_del_syncobj>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d101      	bne.n	800fbcc <f_mount+0x54>
 800fbc8:	2302      	movs	r3, #2
 800fbca:	e036      	b.n	800fc3a <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d011      	beq.n	800fbfe <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800fbe2:	69fb      	ldr	r3, [r7, #28]
 800fbe4:	b2da      	uxtb	r2, r3
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 800fbec:	4619      	mov	r1, r3
 800fbee:	4610      	mov	r0, r2
 800fbf0:	f001 fa68 	bl	80110c4 <ff_cre_syncobj>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d101      	bne.n	800fbfe <f_mount+0x86>
 800fbfa:	2302      	movs	r3, #2
 800fbfc:	e01d      	b.n	800fc3a <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fbfe:	68fa      	ldr	r2, [r7, #12]
 800fc00:	4910      	ldr	r1, [pc, #64]	@ (800fc44 <f_mount+0xcc>)
 800fc02:	69fb      	ldr	r3, [r7, #28]
 800fc04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d002      	beq.n	800fc14 <f_mount+0x9c>
 800fc0e:	79fb      	ldrb	r3, [r7, #7]
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	d001      	beq.n	800fc18 <f_mount+0xa0>
 800fc14:	2300      	movs	r3, #0
 800fc16:	e010      	b.n	800fc3a <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800fc18:	f107 0108 	add.w	r1, r7, #8
 800fc1c:	f107 030c 	add.w	r3, r7, #12
 800fc20:	2200      	movs	r2, #0
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7ff fc9a 	bl	800f55c <find_volume>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	7dfa      	ldrb	r2, [r7, #23]
 800fc30:	4611      	mov	r1, r2
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fd fe71 	bl	800d91a <unlock_fs>
 800fc38:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3720      	adds	r7, #32
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	200012a4 	.word	0x200012a4

0800fc48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fc54:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800fc58:	6018      	str	r0, [r3, #0]
 800fc5a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fc5e:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 800fc62:	6019      	str	r1, [r3, #0]
 800fc64:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fc68:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fc6c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800fc6e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fc72:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d101      	bne.n	800fc80 <f_open+0x38>
 800fc7c:	2309      	movs	r3, #9
 800fc7e:	e267      	b.n	8010150 <f_open+0x508>
	fp->fs = 0;			/* Clear file object */
 800fc80:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fc84:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800fc90:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fc94:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fc98:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800fc9c:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 800fca0:	7812      	ldrb	r2, [r2, #0]
 800fca2:	f002 021f 	and.w	r2, r2, #31
 800fca6:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800fca8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fcac:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	f023 0301 	bic.w	r3, r3, #1
 800fcb6:	b2da      	uxtb	r2, r3
 800fcb8:	f107 0108 	add.w	r1, r7, #8
 800fcbc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800fcc0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7ff fc49 	bl	800f55c <find_volume>
 800fcca:	4603      	mov	r3, r0
 800fccc:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800fcd0:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	f040 822d 	bne.w	8010134 <f_open+0x4ec>
		INIT_BUF(dj);
 800fcda:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fcde:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fce2:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 800fce6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 800fcea:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fcee:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fcf2:	f107 0214 	add.w	r2, r7, #20
 800fcf6:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 800fcfa:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fcfe:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 800fd02:	681a      	ldr	r2, [r3, #0]
 800fd04:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800fd08:	4611      	mov	r1, r2
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7ff fb0a 	bl	800f324 <follow_path>
 800fd10:	4603      	mov	r3, r0
 800fd12:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
		dir = dj.dir;
 800fd16:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fd1a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fd1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fd22:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fd26:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d11b      	bne.n	800fd66 <f_open+0x11e>
			if (!dir)	/* Default directory itself */
 800fd2e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d103      	bne.n	800fd3e <f_open+0xf6>
				res = FR_INVALID_NAME;
 800fd36:	2306      	movs	r3, #6
 800fd38:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800fd3c:	e013      	b.n	800fd66 <f_open+0x11e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fd3e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fd42:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	bf8c      	ite	hi
 800fd4c:	2301      	movhi	r3, #1
 800fd4e:	2300      	movls	r3, #0
 800fd50:	b2db      	uxtb	r3, r3
 800fd52:	461a      	mov	r2, r3
 800fd54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800fd58:	4611      	mov	r1, r2
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7fd fdfc 	bl	800d958 <chk_lock>
 800fd60:	4603      	mov	r3, r0
 800fd62:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fd66:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fd6a:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	f003 031c 	and.w	r3, r3, #28
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	f000 80e6 	beq.w	800ff46 <f_open+0x2fe>
			if (res != FR_OK) {					/* No file, create new */
 800fd7a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d027      	beq.n	800fdd2 <f_open+0x18a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800fd82:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800fd86:	2b04      	cmp	r3, #4
 800fd88:	d10e      	bne.n	800fda8 <f_open+0x160>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fd8a:	f7fd fe51 	bl	800da30 <enq_lock>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d006      	beq.n	800fda2 <f_open+0x15a>
 800fd94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7fe fffd 	bl	800ed98 <dir_register>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	e000      	b.n	800fda4 <f_open+0x15c>
 800fda2:	2312      	movs	r3, #18
 800fda4:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fda8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fdac:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fdb0:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800fdb4:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 800fdb8:	7812      	ldrb	r2, [r2, #0]
 800fdba:	f042 0208 	orr.w	r2, r2, #8
 800fdbe:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800fdc0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fdc4:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fdc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fdcc:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
 800fdd0:	e017      	b.n	800fe02 <f_open+0x1ba>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fdd2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fdd6:	330b      	adds	r3, #11
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	f003 0311 	and.w	r3, r3, #17
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d003      	beq.n	800fdea <f_open+0x1a2>
					res = FR_DENIED;
 800fde2:	2307      	movs	r3, #7
 800fde4:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800fde8:	e00b      	b.n	800fe02 <f_open+0x1ba>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800fdea:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fdee:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	f003 0304 	and.w	r3, r3, #4
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d002      	beq.n	800fe02 <f_open+0x1ba>
						res = FR_EXIST;
 800fdfc:	2308      	movs	r3, #8
 800fdfe:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fe02:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	f040 80c1 	bne.w	800ff8e <f_open+0x346>
 800fe0c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fe10:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fe14:	781b      	ldrb	r3, [r3, #0]
 800fe16:	f003 0308 	and.w	r3, r3, #8
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	f000 80b7 	beq.w	800ff8e <f_open+0x346>
				dw = GET_FATTIME();				/* Created time */
 800fe20:	f7fd fbd0 	bl	800d5c4 <get_fattime>
 800fe24:	f8c7 044c 	str.w	r0, [r7, #1100]	@ 0x44c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800fe28:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fe2c:	330e      	adds	r3, #14
 800fe2e:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 800fe32:	b2d2      	uxtb	r2, r2
 800fe34:	701a      	strb	r2, [r3, #0]
 800fe36:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800fe3a:	b29b      	uxth	r3, r3
 800fe3c:	0a1b      	lsrs	r3, r3, #8
 800fe3e:	b29a      	uxth	r2, r3
 800fe40:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fe44:	330f      	adds	r3, #15
 800fe46:	b2d2      	uxtb	r2, r2
 800fe48:	701a      	strb	r2, [r3, #0]
 800fe4a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800fe4e:	0c1a      	lsrs	r2, r3, #16
 800fe50:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fe54:	3310      	adds	r3, #16
 800fe56:	b2d2      	uxtb	r2, r2
 800fe58:	701a      	strb	r2, [r3, #0]
 800fe5a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800fe5e:	0e1a      	lsrs	r2, r3, #24
 800fe60:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fe64:	3311      	adds	r3, #17
 800fe66:	b2d2      	uxtb	r2, r2
 800fe68:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800fe6a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fe6e:	330b      	adds	r3, #11
 800fe70:	2200      	movs	r2, #0
 800fe72:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800fe74:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fe78:	331c      	adds	r3, #28
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	701a      	strb	r2, [r3, #0]
 800fe7e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fe82:	331d      	adds	r3, #29
 800fe84:	2200      	movs	r2, #0
 800fe86:	701a      	strb	r2, [r3, #0]
 800fe88:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fe8c:	331e      	adds	r3, #30
 800fe8e:	2200      	movs	r2, #0
 800fe90:	701a      	strb	r2, [r3, #0]
 800fe92:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800fe96:	331f      	adds	r3, #31
 800fe98:	2200      	movs	r2, #0
 800fe9a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800fe9c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fea0:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fea4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fea8:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 800feac:	4618      	mov	r0, r3
 800feae:	f7fe fccf 	bl	800e850 <ld_clust>
 800feb2:	f8c7 0448 	str.w	r0, [r7, #1096]	@ 0x448
				st_clust(dir, 0);				/* cluster = 0 */
 800feb6:	2100      	movs	r1, #0
 800feb8:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 800febc:	f7fe fcf5 	bl	800e8aa <st_clust>
				dj.fs->wflag = 1;
 800fec0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fec4:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fec8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fecc:	2201      	movs	r2, #1
 800fece:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800fed2:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d059      	beq.n	800ff8e <f_open+0x346>
					dw = dj.fs->winsect;
 800feda:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fede:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fee2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fee6:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800feea:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
					res = remove_chain(dj.fs, cl);
 800feee:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fef2:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800fef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fefa:	f8d7 1448 	ldr.w	r1, [r7, #1096]	@ 0x448
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fe f9a6 	bl	800e250 <remove_chain>
 800ff04:	4603      	mov	r3, r0
 800ff06:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
					if (res == FR_OK) {
 800ff0a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d13d      	bne.n	800ff8e <f_open+0x346>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800ff12:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ff16:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800ff1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ff1e:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 800ff22:	3a01      	subs	r2, #1
 800ff24:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
						res = move_window(dj.fs, dw);
 800ff28:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ff2c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800ff30:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ff34:	f8d7 144c 	ldr.w	r1, [r7, #1100]	@ 0x44c
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7fd fec6 	bl	800dcca <move_window>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800ff44:	e023      	b.n	800ff8e <f_open+0x346>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800ff46:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d11f      	bne.n	800ff8e <f_open+0x346>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800ff4e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800ff52:	330b      	adds	r3, #11
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	f003 0310 	and.w	r3, r3, #16
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d003      	beq.n	800ff66 <f_open+0x31e>
					res = FR_NO_FILE;
 800ff5e:	2304      	movs	r3, #4
 800ff60:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800ff64:	e013      	b.n	800ff8e <f_open+0x346>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800ff66:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ff6a:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800ff6e:	781b      	ldrb	r3, [r3, #0]
 800ff70:	f003 0302 	and.w	r3, r3, #2
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d00a      	beq.n	800ff8e <f_open+0x346>
 800ff78:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800ff7c:	330b      	adds	r3, #11
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	f003 0301 	and.w	r3, r3, #1
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d002      	beq.n	800ff8e <f_open+0x346>
						res = FR_DENIED;
 800ff88:	2307      	movs	r3, #7
 800ff8a:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
		}
		if (res == FR_OK) {
 800ff8e:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d151      	bne.n	801003a <f_open+0x3f2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ff96:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ff9a:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	f003 0308 	and.w	r3, r3, #8
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d00b      	beq.n	800ffc0 <f_open+0x378>
				mode |= FA__WRITTEN;
 800ffa8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ffac:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800ffb0:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800ffb4:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 800ffb8:	7812      	ldrb	r2, [r2, #0]
 800ffba:	f042 0220 	orr.w	r2, r2, #32
 800ffbe:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800ffc0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ffc4:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800ffc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ffcc:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800ffd0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ffd4:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 800ffde:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ffe2:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 800ffec:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fff0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fff4:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800fff8:	781b      	ldrb	r3, [r3, #0]
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	bf8c      	ite	hi
 800fffe:	2301      	movhi	r3, #1
 8010000:	2300      	movls	r3, #0
 8010002:	b2db      	uxtb	r3, r3
 8010004:	461a      	mov	r2, r3
 8010006:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801000a:	4611      	mov	r1, r2
 801000c:	4618      	mov	r0, r3
 801000e:	f7fd fd33 	bl	800da78 <inc_lock>
 8010012:	4602      	mov	r2, r0
 8010014:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010018:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8010022:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010026:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8010030:	2b00      	cmp	r3, #0
 8010032:	d102      	bne.n	801003a <f_open+0x3f2>
 8010034:	2302      	movs	r3, #2
 8010036:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 801003a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 801003e:	2b00      	cmp	r3, #0
 8010040:	d178      	bne.n	8010134 <f_open+0x4ec>
			fp->flag = mode;					/* File access mode */
 8010042:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010046:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8010050:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 8010054:	7812      	ldrb	r2, [r2, #0]
 8010056:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 801005a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801005e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	2200      	movs	r2, #0
 8010066:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 801006a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801006e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010072:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010076:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 801007a:	4618      	mov	r0, r3
 801007c:	f7fe fbe8 	bl	800e850 <ld_clust>
 8010080:	4602      	mov	r2, r0
 8010082:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010086:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8010090:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010094:	331f      	adds	r3, #31
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	061a      	lsls	r2, r3, #24
 801009a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 801009e:	331e      	adds	r3, #30
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	041b      	lsls	r3, r3, #16
 80100a4:	431a      	orrs	r2, r3
 80100a6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80100aa:	331d      	adds	r3, #29
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	021b      	lsls	r3, r3, #8
 80100b0:	4313      	orrs	r3, r2
 80100b2:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 80100b6:	321c      	adds	r2, #28
 80100b8:	7812      	ldrb	r2, [r2, #0]
 80100ba:	431a      	orrs	r2, r3
 80100bc:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80100c0:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 80100ca:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80100ce:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	2200      	movs	r2, #0
 80100d6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 80100da:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80100de:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	2200      	movs	r2, #0
 80100e6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80100ea:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80100ee:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	2200      	movs	r2, #0
 80100f6:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80100fa:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80100fe:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010102:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010106:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801010a:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 8010114:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010118:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010122:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8010126:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801012a:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8010134:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010138:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 801013c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010140:	f897 2457 	ldrb.w	r2, [r7, #1111]	@ 0x457
 8010144:	4611      	mov	r1, r2
 8010146:	4618      	mov	r0, r3
 8010148:	f7fd fbe7 	bl	800d91a <unlock_fs>
 801014c:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
}
 8010150:	4618      	mov	r0, r3
 8010152:	f507 678b 	add.w	r7, r7, #1112	@ 0x458
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}

0801015a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801015a:	b580      	push	{r7, lr}
 801015c:	b08a      	sub	sp, #40	@ 0x28
 801015e:	af00      	add	r7, sp, #0
 8010160:	60f8      	str	r0, [r7, #12]
 8010162:	60b9      	str	r1, [r7, #8]
 8010164:	607a      	str	r2, [r7, #4]
 8010166:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	2200      	movs	r2, #0
 8010170:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8010172:	68f8      	ldr	r0, [r7, #12]
 8010174:	f7ff fcc2 	bl	800fafc <validate>
 8010178:	4603      	mov	r3, r0
 801017a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801017c:	7dfb      	ldrb	r3, [r7, #23]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d009      	beq.n	8010196 <f_write+0x3c>
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010188:	7dfa      	ldrb	r2, [r7, #23]
 801018a:	4611      	mov	r1, r2
 801018c:	4618      	mov	r0, r3
 801018e:	f7fd fbc4 	bl	800d91a <unlock_fs>
 8010192:	7dfb      	ldrb	r3, [r7, #23]
 8010194:	e1d4      	b.n	8010540 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 801019c:	2b00      	cmp	r3, #0
 801019e:	d00d      	beq.n	80101bc <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80101ac:	4619      	mov	r1, r3
 80101ae:	4610      	mov	r0, r2
 80101b0:	f7fd fbb3 	bl	800d91a <unlock_fs>
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80101ba:	e1c1      	b.n	8010540 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80101c2:	f003 0302 	and.w	r3, r3, #2
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d108      	bne.n	80101dc <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80101d0:	2107      	movs	r1, #7
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7fd fba1 	bl	800d91a <unlock_fs>
 80101d8:	2307      	movs	r3, #7
 80101da:	e1b1      	b.n	8010540 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	441a      	add	r2, r3
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80101ec:	429a      	cmp	r2, r3
 80101ee:	f080 8182 	bcs.w	80104f6 <f_write+0x39c>
 80101f2:	2300      	movs	r3, #0
 80101f4:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80101f6:	e17e      	b.n	80104f6 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80101fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010202:	2b00      	cmp	r3, #0
 8010204:	f040 813e 	bne.w	8010484 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 801020e:	0a5b      	lsrs	r3, r3, #9
 8010210:	b2da      	uxtb	r2, r3
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010218:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 801021c:	3b01      	subs	r3, #1
 801021e:	b2db      	uxtb	r3, r3
 8010220:	4013      	ands	r3, r2
 8010222:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8010224:	7dbb      	ldrb	r3, [r7, #22]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d15f      	bne.n	80102ea <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010230:	2b00      	cmp	r3, #0
 8010232:	d10f      	bne.n	8010254 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801023a:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 801023c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801023e:	2b00      	cmp	r3, #0
 8010240:	d121      	bne.n	8010286 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010248:	2100      	movs	r1, #0
 801024a:	4618      	mov	r0, r3
 801024c:	f7fe f85a 	bl	800e304 <create_chain>
 8010250:	6278      	str	r0, [r7, #36]	@ 0x24
 8010252:	e018      	b.n	8010286 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 801025a:	2b00      	cmp	r3, #0
 801025c:	d008      	beq.n	8010270 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010264:	4619      	mov	r1, r3
 8010266:	68f8      	ldr	r0, [r7, #12]
 8010268:	f7fe f8e9 	bl	800e43e <clmt_clust>
 801026c:	6278      	str	r0, [r7, #36]	@ 0x24
 801026e:	e00a      	b.n	8010286 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801027c:	4619      	mov	r1, r3
 801027e:	4610      	mov	r0, r2
 8010280:	f7fe f840 	bl	800e304 <create_chain>
 8010284:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010288:	2b00      	cmp	r3, #0
 801028a:	f000 8139 	beq.w	8010500 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 801028e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010290:	2b01      	cmp	r3, #1
 8010292:	d10c      	bne.n	80102ae <f_write+0x154>
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2202      	movs	r2, #2
 8010298:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80102a2:	2102      	movs	r1, #2
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7fd fb38 	bl	800d91a <unlock_fs>
 80102aa:	2302      	movs	r3, #2
 80102ac:	e148      	b.n	8010540 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80102ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b4:	d10c      	bne.n	80102d0 <f_write+0x176>
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	2201      	movs	r2, #1
 80102ba:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80102c4:	2101      	movs	r1, #1
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7fd fb27 	bl	800d91a <unlock_fs>
 80102cc:	2301      	movs	r3, #1
 80102ce:	e137      	b.n	8010540 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80102d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d103      	bne.n	80102ea <f_write+0x190>
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80102e6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80102f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d024      	beq.n	8010342 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80102fe:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8010302:	68f9      	ldr	r1, [r7, #12]
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 801030a:	2301      	movs	r3, #1
 801030c:	f7fd fa40 	bl	800d790 <disk_write>
 8010310:	4603      	mov	r3, r0
 8010312:	2b00      	cmp	r3, #0
 8010314:	d00c      	beq.n	8010330 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2201      	movs	r2, #1
 801031a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010324:	2101      	movs	r1, #1
 8010326:	4618      	mov	r0, r3
 8010328:	f7fd faf7 	bl	800d91a <unlock_fs>
 801032c:	2301      	movs	r3, #1
 801032e:	e107      	b.n	8010540 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801033a:	b2da      	uxtb	r2, r3
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801034e:	4619      	mov	r1, r3
 8010350:	4610      	mov	r0, r2
 8010352:	f7fd fd95 	bl	800de80 <clust2sect>
 8010356:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d10c      	bne.n	8010378 <f_write+0x21e>
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2202      	movs	r2, #2
 8010362:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801036c:	2102      	movs	r1, #2
 801036e:	4618      	mov	r0, r3
 8010370:	f7fd fad3 	bl	800d91a <unlock_fs>
 8010374:	2302      	movs	r3, #2
 8010376:	e0e3      	b.n	8010540 <f_write+0x3e6>
			sect += csect;
 8010378:	7dbb      	ldrb	r3, [r7, #22]
 801037a:	693a      	ldr	r2, [r7, #16]
 801037c:	4413      	add	r3, r2
 801037e:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	0a5b      	lsrs	r3, r3, #9
 8010384:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d04f      	beq.n	801042c <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 801038c:	7dba      	ldrb	r2, [r7, #22]
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	4413      	add	r3, r2
 8010392:	68fa      	ldr	r2, [r7, #12]
 8010394:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8010398:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 801039c:	4293      	cmp	r3, r2
 801039e:	d908      	bls.n	80103b2 <f_write+0x258>
					cc = fp->fs->csize - csect;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80103a6:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80103aa:	461a      	mov	r2, r3
 80103ac:	7dbb      	ldrb	r3, [r7, #22]
 80103ae:	1ad3      	subs	r3, r2, r3
 80103b0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80103b8:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	693a      	ldr	r2, [r7, #16]
 80103c0:	69b9      	ldr	r1, [r7, #24]
 80103c2:	f7fd f9e5 	bl	800d790 <disk_write>
 80103c6:	4603      	mov	r3, r0
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d00c      	beq.n	80103e6 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2201      	movs	r2, #1
 80103d0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80103da:	2101      	movs	r1, #1
 80103dc:	4618      	mov	r0, r3
 80103de:	f7fd fa9c 	bl	800d91a <unlock_fs>
 80103e2:	2301      	movs	r3, #1
 80103e4:	e0ac      	b.n	8010540 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	1ad3      	subs	r3, r2, r3
 80103f0:	69fa      	ldr	r2, [r7, #28]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d916      	bls.n	8010424 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80103f6:	68f8      	ldr	r0, [r7, #12]
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	1ad3      	subs	r3, r2, r3
 8010402:	025b      	lsls	r3, r3, #9
 8010404:	69ba      	ldr	r2, [r7, #24]
 8010406:	4413      	add	r3, r2
 8010408:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801040c:	4619      	mov	r1, r3
 801040e:	f7fd f9fd 	bl	800d80c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010418:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801041c:	b2da      	uxtb	r2, r3
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8010424:	69fb      	ldr	r3, [r7, #28]
 8010426:	025b      	lsls	r3, r3, #9
 8010428:	623b      	str	r3, [r7, #32]
				continue;
 801042a:	e04e      	b.n	80104ca <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010432:	693a      	ldr	r2, [r7, #16]
 8010434:	429a      	cmp	r2, r3
 8010436:	d021      	beq.n	801047c <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010444:	429a      	cmp	r2, r3
 8010446:	d219      	bcs.n	801047c <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801044e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8010452:	68f9      	ldr	r1, [r7, #12]
 8010454:	2301      	movs	r3, #1
 8010456:	693a      	ldr	r2, [r7, #16]
 8010458:	f7fd f97a 	bl	800d750 <disk_read>
 801045c:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 801045e:	2b00      	cmp	r3, #0
 8010460:	d00c      	beq.n	801047c <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	2201      	movs	r2, #1
 8010466:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010470:	2101      	movs	r1, #1
 8010472:	4618      	mov	r0, r3
 8010474:	f7fd fa51 	bl	800d91a <unlock_fs>
 8010478:	2301      	movs	r3, #1
 801047a:	e061      	b.n	8010540 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	693a      	ldr	r2, [r7, #16]
 8010480:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 801048a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801048e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8010492:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8010494:	6a3a      	ldr	r2, [r7, #32]
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	429a      	cmp	r2, r3
 801049a:	d901      	bls.n	80104a0 <f_write+0x346>
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80104a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104aa:	68fa      	ldr	r2, [r7, #12]
 80104ac:	4413      	add	r3, r2
 80104ae:	6a3a      	ldr	r2, [r7, #32]
 80104b0:	69b9      	ldr	r1, [r7, #24]
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7fd f9aa 	bl	800d80c <mem_cpy>
		fp->flag |= FA__DIRTY;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80104be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104c2:	b2da      	uxtb	r2, r3
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80104ca:	69ba      	ldr	r2, [r7, #24]
 80104cc:	6a3b      	ldr	r3, [r7, #32]
 80104ce:	4413      	add	r3, r2
 80104d0:	61bb      	str	r3, [r7, #24]
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80104d8:	6a3b      	ldr	r3, [r7, #32]
 80104da:	441a      	add	r2, r3
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	681a      	ldr	r2, [r3, #0]
 80104e6:	6a3b      	ldr	r3, [r7, #32]
 80104e8:	441a      	add	r2, r3
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	601a      	str	r2, [r3, #0]
 80104ee:	687a      	ldr	r2, [r7, #4]
 80104f0:	6a3b      	ldr	r3, [r7, #32]
 80104f2:	1ad3      	subs	r3, r2, r3
 80104f4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	f47f ae7d 	bne.w	80101f8 <f_write+0x9e>
 80104fe:	e000      	b.n	8010502 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010500:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801050e:	429a      	cmp	r2, r3
 8010510:	d905      	bls.n	801051e <f_write+0x3c4>
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010524:	f043 0320 	orr.w	r3, r3, #32
 8010528:	b2da      	uxtb	r2, r3
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010536:	2100      	movs	r1, #0
 8010538:	4618      	mov	r0, r3
 801053a:	f7fd f9ee 	bl	800d91a <unlock_fs>
 801053e:	2300      	movs	r3, #0
}
 8010540:	4618      	mov	r0, r3
 8010542:	3728      	adds	r7, #40	@ 0x28
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b086      	sub	sp, #24
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f7ff fad3 	bl	800fafc <validate>
 8010556:	4603      	mov	r3, r0
 8010558:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801055a:	7dfb      	ldrb	r3, [r7, #23]
 801055c:	2b00      	cmp	r3, #0
 801055e:	f040 80af 	bne.w	80106c0 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010568:	f003 0320 	and.w	r3, r3, #32
 801056c:	2b00      	cmp	r3, #0
 801056e:	f000 80a7 	beq.w	80106c0 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801057c:	2b00      	cmp	r3, #0
 801057e:	d020      	beq.n	80105c2 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010586:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 801058a:	6879      	ldr	r1, [r7, #4]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8010592:	2301      	movs	r3, #1
 8010594:	f7fd f8fc 	bl	800d790 <disk_write>
 8010598:	4603      	mov	r3, r0
 801059a:	2b00      	cmp	r3, #0
 801059c:	d008      	beq.n	80105b0 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80105a4:	2101      	movs	r1, #1
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7fd f9b7 	bl	800d91a <unlock_fs>
 80105ac:	2301      	movs	r3, #1
 80105ae:	e090      	b.n	80106d2 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80105b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105ba:	b2da      	uxtb	r2, r3
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80105ce:	4619      	mov	r1, r3
 80105d0:	4610      	mov	r0, r2
 80105d2:	f7fd fb7a 	bl	800dcca <move_window>
 80105d6:	4603      	mov	r3, r0
 80105d8:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80105da:	7dfb      	ldrb	r3, [r7, #23]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d16f      	bne.n	80106c0 <f_sync+0x178>
				dir = fp->dir_ptr;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80105e6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	330b      	adds	r3, #11
 80105ec:	781a      	ldrb	r2, [r3, #0]
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	330b      	adds	r3, #11
 80105f2:	f042 0220 	orr.w	r2, r2, #32
 80105f6:	b2d2      	uxtb	r2, r2
 80105f8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	331c      	adds	r3, #28
 8010604:	b2d2      	uxtb	r2, r2
 8010606:	701a      	strb	r2, [r3, #0]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801060e:	b29b      	uxth	r3, r3
 8010610:	0a1b      	lsrs	r3, r3, #8
 8010612:	b29a      	uxth	r2, r3
 8010614:	693b      	ldr	r3, [r7, #16]
 8010616:	331d      	adds	r3, #29
 8010618:	b2d2      	uxtb	r2, r2
 801061a:	701a      	strb	r2, [r3, #0]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010622:	0c1a      	lsrs	r2, r3, #16
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	331e      	adds	r3, #30
 8010628:	b2d2      	uxtb	r2, r2
 801062a:	701a      	strb	r2, [r3, #0]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010632:	0e1a      	lsrs	r2, r3, #24
 8010634:	693b      	ldr	r3, [r7, #16]
 8010636:	331f      	adds	r3, #31
 8010638:	b2d2      	uxtb	r2, r2
 801063a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010642:	4619      	mov	r1, r3
 8010644:	6938      	ldr	r0, [r7, #16]
 8010646:	f7fe f930 	bl	800e8aa <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 801064a:	f7fc ffbb 	bl	800d5c4 <get_fattime>
 801064e:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8010650:	693b      	ldr	r3, [r7, #16]
 8010652:	3316      	adds	r3, #22
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	b2d2      	uxtb	r2, r2
 8010658:	701a      	strb	r2, [r3, #0]
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	b29b      	uxth	r3, r3
 801065e:	0a1b      	lsrs	r3, r3, #8
 8010660:	b29a      	uxth	r2, r3
 8010662:	693b      	ldr	r3, [r7, #16]
 8010664:	3317      	adds	r3, #23
 8010666:	b2d2      	uxtb	r2, r2
 8010668:	701a      	strb	r2, [r3, #0]
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	0c1a      	lsrs	r2, r3, #16
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	3318      	adds	r3, #24
 8010672:	b2d2      	uxtb	r2, r2
 8010674:	701a      	strb	r2, [r3, #0]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	0e1a      	lsrs	r2, r3, #24
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	3319      	adds	r3, #25
 801067e:	b2d2      	uxtb	r2, r2
 8010680:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	3312      	adds	r3, #18
 8010686:	2200      	movs	r2, #0
 8010688:	701a      	strb	r2, [r3, #0]
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	3313      	adds	r3, #19
 801068e:	2200      	movs	r2, #0
 8010690:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010698:	f023 0320 	bic.w	r3, r3, #32
 801069c:	b2da      	uxtb	r2, r3
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80106aa:	2201      	movs	r2, #1
 80106ac:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fd fb35 	bl	800dd26 <sync_fs>
 80106bc:	4603      	mov	r3, r0
 80106be:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80106c6:	7dfa      	ldrb	r2, [r7, #23]
 80106c8:	4611      	mov	r1, r2
 80106ca:	4618      	mov	r0, r3
 80106cc:	f7fd f925 	bl	800d91a <unlock_fs>
 80106d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3718      	adds	r7, #24
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}

080106da <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80106da:	b580      	push	{r7, lr}
 80106dc:	b090      	sub	sp, #64	@ 0x40
 80106de:	af00      	add	r7, sp, #0
 80106e0:	6078      	str	r0, [r7, #4]
 80106e2:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f7ff fa09 	bl	800fafc <validate>
 80106ea:	4603      	mov	r3, r0
 80106ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80106f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d00b      	beq.n	8010710 <f_lseek+0x36>
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80106fe:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8010702:	4611      	mov	r1, r2
 8010704:	4618      	mov	r0, r3
 8010706:	f7fd f908 	bl	800d91a <unlock_fs>
 801070a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801070e:	e2af      	b.n	8010c70 <f_lseek+0x596>
	if (fp->err)						/* Check error */
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8010716:	2b00      	cmp	r3, #0
 8010718:	d00d      	beq.n	8010736 <f_lseek+0x5c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8010726:	4619      	mov	r1, r3
 8010728:	4610      	mov	r0, r2
 801072a:	f7fd f8f6 	bl	800d91a <unlock_fs>
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8010734:	e29c      	b.n	8010c70 <f_lseek+0x596>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 801073c:	2b00      	cmp	r3, #0
 801073e:	f000 8115 	beq.w	801096c <f_lseek+0x292>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010748:	d172      	bne.n	8010830 <f_lseek+0x156>
			tbl = fp->cltbl;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8010750:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010754:	1d1a      	adds	r2, r3, #4
 8010756:	627a      	str	r2, [r7, #36]	@ 0x24
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	617b      	str	r3, [r7, #20]
 801075c:	2302      	movs	r3, #2
 801075e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010766:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8010768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801076a:	2b00      	cmp	r3, #0
 801076c:	d04f      	beq.n	801080e <f_lseek+0x134>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801076e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010770:	613b      	str	r3, [r7, #16]
 8010772:	2300      	movs	r3, #0
 8010774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010778:	3302      	adds	r3, #2
 801077a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801077c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801077e:	60fb      	str	r3, [r7, #12]
 8010780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010782:	3301      	adds	r3, #1
 8010784:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801078c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801078e:	4618      	mov	r0, r3
 8010790:	f7fd fb97 	bl	800dec2 <get_fat>
 8010794:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8010796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010798:	2b01      	cmp	r3, #1
 801079a:	d80c      	bhi.n	80107b6 <f_lseek+0xdc>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2202      	movs	r2, #2
 80107a0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80107aa:	2102      	movs	r1, #2
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7fd f8b4 	bl	800d91a <unlock_fs>
 80107b2:	2302      	movs	r3, #2
 80107b4:	e25c      	b.n	8010c70 <f_lseek+0x596>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80107b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107bc:	d10c      	bne.n	80107d8 <f_lseek+0xfe>
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2201      	movs	r2, #1
 80107c2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80107cc:	2101      	movs	r1, #1
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fd f8a3 	bl	800d91a <unlock_fs>
 80107d4:	2301      	movs	r3, #1
 80107d6:	e24b      	b.n	8010c70 <f_lseek+0x596>
					} while (cl == pcl + 1);
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	3301      	adds	r3, #1
 80107dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107de:	429a      	cmp	r2, r3
 80107e0:	d0cc      	beq.n	801077c <f_lseek+0xa2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80107e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d809      	bhi.n	80107fe <f_lseek+0x124>
						*tbl++ = ncl; *tbl++ = tcl;
 80107ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ec:	1d1a      	adds	r2, r3, #4
 80107ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80107f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107f2:	601a      	str	r2, [r3, #0]
 80107f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107f6:	1d1a      	adds	r2, r3, #4
 80107f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80107fa:	693a      	ldr	r2, [r7, #16]
 80107fc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010804:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801080a:	429a      	cmp	r2, r3
 801080c:	d3af      	bcc.n	801076e <f_lseek+0x94>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8010814:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010816:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8010818:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	429a      	cmp	r2, r3
 801081e:	d803      	bhi.n	8010828 <f_lseek+0x14e>
				*tbl = 0;		/* Terminate table */
 8010820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010822:	2200      	movs	r2, #0
 8010824:	601a      	str	r2, [r3, #0]
 8010826:	e218      	b.n	8010c5a <f_lseek+0x580>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010828:	2311      	movs	r3, #17
 801082a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801082e:	e214      	b.n	8010c5a <f_lseek+0x580>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010836:	683a      	ldr	r2, [r7, #0]
 8010838:	429a      	cmp	r2, r3
 801083a:	d903      	bls.n	8010844 <f_lseek+0x16a>
				ofs = fp->fsize;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010842:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	683a      	ldr	r2, [r7, #0]
 8010848:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			if (ofs) {
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	f000 8203 	beq.w	8010c5a <f_lseek+0x580>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	3b01      	subs	r3, #1
 8010858:	4619      	mov	r1, r3
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f7fd fdef 	bl	800e43e <clmt_clust>
 8010860:	4602      	mov	r2, r0
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010874:	4619      	mov	r1, r3
 8010876:	4610      	mov	r0, r2
 8010878:	f7fd fb02 	bl	800de80 <clust2sect>
 801087c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 801087e:	69bb      	ldr	r3, [r7, #24]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d10c      	bne.n	801089e <f_lseek+0x1c4>
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2202      	movs	r2, #2
 8010888:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010892:	2102      	movs	r1, #2
 8010894:	4618      	mov	r0, r3
 8010896:	f7fd f840 	bl	800d91a <unlock_fs>
 801089a:	2302      	movs	r3, #2
 801089c:	e1e8      	b.n	8010c70 <f_lseek+0x596>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	3b01      	subs	r3, #1
 80108a2:	0a5b      	lsrs	r3, r3, #9
 80108a4:	687a      	ldr	r2, [r7, #4]
 80108a6:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80108aa:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80108ae:	3a01      	subs	r2, #1
 80108b0:	4013      	ands	r3, r2
 80108b2:	69ba      	ldr	r2, [r7, #24]
 80108b4:	4413      	add	r3, r2
 80108b6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80108be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	f000 81c9 	beq.w	8010c5a <f_lseek+0x580>
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80108ce:	69ba      	ldr	r2, [r7, #24]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	f000 81c2 	beq.w	8010c5a <f_lseek+0x580>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80108dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d024      	beq.n	801092e <f_lseek+0x254>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80108ea:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80108ee:	6879      	ldr	r1, [r7, #4]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80108f6:	2301      	movs	r3, #1
 80108f8:	f7fc ff4a 	bl	800d790 <disk_write>
 80108fc:	4603      	mov	r3, r0
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d00c      	beq.n	801091c <f_lseek+0x242>
							ABORT(fp->fs, FR_DISK_ERR);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2201      	movs	r2, #1
 8010906:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010910:	2101      	movs	r1, #1
 8010912:	4618      	mov	r0, r3
 8010914:	f7fd f801 	bl	800d91a <unlock_fs>
 8010918:	2301      	movs	r3, #1
 801091a:	e1a9      	b.n	8010c70 <f_lseek+0x596>
						fp->flag &= ~FA__DIRTY;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010922:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010926:	b2da      	uxtb	r2, r3
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010934:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8010938:	6879      	ldr	r1, [r7, #4]
 801093a:	2301      	movs	r3, #1
 801093c:	69ba      	ldr	r2, [r7, #24]
 801093e:	f7fc ff07 	bl	800d750 <disk_read>
 8010942:	4603      	mov	r3, r0
 8010944:	2b00      	cmp	r3, #0
 8010946:	d00c      	beq.n	8010962 <f_lseek+0x288>
						ABORT(fp->fs, FR_DISK_ERR);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2201      	movs	r2, #1
 801094c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010956:	2101      	movs	r1, #1
 8010958:	4618      	mov	r0, r3
 801095a:	f7fc ffde 	bl	800d91a <unlock_fs>
 801095e:	2301      	movs	r3, #1
 8010960:	e186      	b.n	8010c70 <f_lseek+0x596>
#endif
					fp->dsect = dsc;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	69ba      	ldr	r2, [r7, #24]
 8010966:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 801096a:	e176      	b.n	8010c5a <f_lseek+0x580>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010972:	683a      	ldr	r2, [r7, #0]
 8010974:	429a      	cmp	r2, r3
 8010976:	d90a      	bls.n	801098e <f_lseek+0x2b4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801097e:	f003 0302 	and.w	r3, r3, #2
 8010982:	2b00      	cmp	r3, #0
 8010984:	d103      	bne.n	801098e <f_lseek+0x2b4>
#endif
			) ofs = fp->fsize;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801098c:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010994:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010996:	2300      	movs	r3, #0
 8010998:	637b      	str	r3, [r7, #52]	@ 0x34
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801099e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
		if (ofs) {
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	f000 80ea 	beq.w	8010b7e <f_lseek+0x4a4>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80109b0:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80109b4:	025b      	lsls	r3, r3, #9
 80109b6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80109b8:	6a3b      	ldr	r3, [r7, #32]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d01e      	beq.n	80109fc <f_lseek+0x322>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	1e5a      	subs	r2, r3, #1
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80109c8:	6a3b      	ldr	r3, [r7, #32]
 80109ca:	1e59      	subs	r1, r3, #1
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d312      	bcc.n	80109fc <f_lseek+0x322>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80109d6:	6a3b      	ldr	r3, [r7, #32]
 80109d8:	1e5a      	subs	r2, r3, #1
 80109da:	69fb      	ldr	r3, [r7, #28]
 80109dc:	425b      	negs	r3, r3
 80109de:	401a      	ands	r2, r3
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				ofs -= fp->fptr;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80109ec:	683a      	ldr	r2, [r7, #0]
 80109ee:	1ad3      	subs	r3, r2, r3
 80109f0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80109f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80109fa:	e037      	b.n	8010a6c <f_lseek+0x392>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010a02:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d12c      	bne.n	8010a64 <f_lseek+0x38a>
					clst = create_chain(fp->fs, 0);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010a10:	2100      	movs	r1, #0
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fd fc76 	bl	800e304 <create_chain>
 8010a18:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8010a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a1c:	2b01      	cmp	r3, #1
 8010a1e:	d10c      	bne.n	8010a3a <f_lseek+0x360>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2202      	movs	r2, #2
 8010a24:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010a2e:	2102      	movs	r1, #2
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7fc ff72 	bl	800d91a <unlock_fs>
 8010a36:	2302      	movs	r3, #2
 8010a38:	e11a      	b.n	8010c70 <f_lseek+0x596>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8010a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a40:	d10c      	bne.n	8010a5c <f_lseek+0x382>
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2201      	movs	r2, #1
 8010a46:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010a50:	2101      	movs	r1, #1
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7fc ff61 	bl	800d91a <unlock_fs>
 8010a58:	2301      	movs	r3, #1
 8010a5a:	e109      	b.n	8010c70 <f_lseek+0x596>
					fp->sclust = clst;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010a60:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				}
#endif
				fp->clust = clst;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010a68:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			}
			if (clst != 0) {
 8010a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	f000 8085 	beq.w	8010b7e <f_lseek+0x4a4>
				while (ofs > bcs) {						/* Cluster following loop */
 8010a74:	e055      	b.n	8010b22 <f_lseek+0x448>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010a7c:	f003 0302 	and.w	r3, r3, #2
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d00d      	beq.n	8010aa0 <f_lseek+0x3c6>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010a8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7fd fc39 	bl	800e304 <create_chain>
 8010a92:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8010a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d10a      	bne.n	8010ab0 <f_lseek+0x3d6>
							ofs = bcs; break;
 8010a9a:	69fb      	ldr	r3, [r7, #28]
 8010a9c:	603b      	str	r3, [r7, #0]
 8010a9e:	e044      	b.n	8010b2a <f_lseek+0x450>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010aa6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7fd fa0a 	bl	800dec2 <get_fat>
 8010aae:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8010ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ab6:	d10c      	bne.n	8010ad2 <f_lseek+0x3f8>
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2201      	movs	r2, #1
 8010abc:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010ac6:	2101      	movs	r1, #1
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7fc ff26 	bl	800d91a <unlock_fs>
 8010ace:	2301      	movs	r3, #1
 8010ad0:	e0ce      	b.n	8010c70 <f_lseek+0x596>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8010ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ad4:	2b01      	cmp	r3, #1
 8010ad6:	d907      	bls.n	8010ae8 <f_lseek+0x40e>
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010ade:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010ae2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d30c      	bcc.n	8010b02 <f_lseek+0x428>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2202      	movs	r2, #2
 8010aec:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010af6:	2102      	movs	r1, #2
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7fc ff0e 	bl	800d91a <unlock_fs>
 8010afe:	2302      	movs	r3, #2
 8010b00:	e0b6      	b.n	8010c70 <f_lseek+0x596>
					fp->clust = clst;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
					fp->fptr += bcs;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010b10:	69fb      	ldr	r3, [r7, #28]
 8010b12:	441a      	add	r2, r3
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
					ofs -= bcs;
 8010b1a:	683a      	ldr	r2, [r7, #0]
 8010b1c:	69fb      	ldr	r3, [r7, #28]
 8010b1e:	1ad3      	subs	r3, r2, r3
 8010b20:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8010b22:	683a      	ldr	r2, [r7, #0]
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d8a5      	bhi.n	8010a76 <f_lseek+0x39c>
				}
				fp->fptr += ofs;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	441a      	add	r2, r3
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				if (ofs % SS(fp->fs)) {
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d01c      	beq.n	8010b7e <f_lseek+0x4a4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010b4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f7fd f997 	bl	800de80 <clust2sect>
 8010b52:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8010b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d10c      	bne.n	8010b74 <f_lseek+0x49a>
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2202      	movs	r2, #2
 8010b5e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010b68:	2102      	movs	r1, #2
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fc fed5 	bl	800d91a <unlock_fs>
 8010b70:	2302      	movs	r3, #2
 8010b72:	e07d      	b.n	8010c70 <f_lseek+0x596>
					nsect += ofs / SS(fp->fs);
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	0a5b      	lsrs	r3, r3, #9
 8010b78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010b7a:	4413      	add	r3, r2
 8010b7c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d04f      	beq.n	8010c2c <f_lseek+0x552>
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010b92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d049      	beq.n	8010c2c <f_lseek+0x552>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d024      	beq.n	8010bf0 <f_lseek+0x516>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010bac:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8010bb0:	6879      	ldr	r1, [r7, #4]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8010bb8:	2301      	movs	r3, #1
 8010bba:	f7fc fde9 	bl	800d790 <disk_write>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d00c      	beq.n	8010bde <f_lseek+0x504>
					ABORT(fp->fs, FR_DISK_ERR);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2201      	movs	r2, #1
 8010bc8:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010bd2:	2101      	movs	r1, #1
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7fc fea0 	bl	800d91a <unlock_fs>
 8010bda:	2301      	movs	r3, #1
 8010bdc:	e048      	b.n	8010c70 <f_lseek+0x596>
				fp->flag &= ~FA__DIRTY;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010be4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010be8:	b2da      	uxtb	r2, r3
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010bf6:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8010bfa:	6879      	ldr	r1, [r7, #4]
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c00:	f7fc fda6 	bl	800d750 <disk_read>
 8010c04:	4603      	mov	r3, r0
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d00c      	beq.n	8010c24 <f_lseek+0x54a>
				ABORT(fp->fs, FR_DISK_ERR);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2201      	movs	r2, #1
 8010c0e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010c18:	2101      	movs	r1, #1
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7fc fe7d 	bl	800d91a <unlock_fs>
 8010c20:	2301      	movs	r3, #1
 8010c22:	e025      	b.n	8010c70 <f_lseek+0x596>
#endif
			fp->dsect = nsect;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c28:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d90e      	bls.n	8010c5a <f_lseek+0x580>
			fp->fsize = fp->fptr;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->flag |= FA__WRITTEN;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010c4e:	f043 0320 	orr.w	r3, r3, #32
 8010c52:	b2da      	uxtb	r2, r3
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010c60:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8010c64:	4611      	mov	r1, r2
 8010c66:	4618      	mov	r0, r3
 8010c68:	f7fc fe57 	bl	800d91a <unlock_fs>
 8010c6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	3740      	adds	r7, #64	@ 0x40
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}

08010c78 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b084      	sub	sp, #16
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	460b      	mov	r3, r1
 8010c82:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8010c84:	78fb      	ldrb	r3, [r7, #3]
 8010c86:	2b0a      	cmp	r3, #10
 8010c88:	d103      	bne.n	8010c92 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8010c8a:	210d      	movs	r1, #13
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f7ff fff3 	bl	8010c78 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	db25      	blt.n	8010cea <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	1c5a      	adds	r2, r3, #1
 8010ca2:	60fa      	str	r2, [r7, #12]
 8010ca4:	687a      	ldr	r2, [r7, #4]
 8010ca6:	4413      	add	r3, r2
 8010ca8:	78fa      	ldrb	r2, [r7, #3]
 8010caa:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	2b3c      	cmp	r3, #60	@ 0x3c
 8010cb0:	dd12      	ble.n	8010cd8 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	6818      	ldr	r0, [r3, #0]
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f103 010c 	add.w	r1, r3, #12
 8010cbc:	68fa      	ldr	r2, [r7, #12]
 8010cbe:	f107 0308 	add.w	r3, r7, #8
 8010cc2:	f7ff fa4a 	bl	801015a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8010cc6:	68ba      	ldr	r2, [r7, #8]
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d101      	bne.n	8010cd2 <putc_bfd+0x5a>
 8010cce:	2300      	movs	r3, #0
 8010cd0:	e001      	b.n	8010cd6 <putc_bfd+0x5e>
 8010cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8010cd6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	68fa      	ldr	r2, [r7, #12]
 8010cdc:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	689b      	ldr	r3, [r3, #8]
 8010ce2:	1c5a      	adds	r2, r3, #1
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	609a      	str	r2, [r3, #8]
 8010ce8:	e000      	b.n	8010cec <putc_bfd+0x74>
	if (i < 0) return;
 8010cea:	bf00      	nop
}
 8010cec:	3710      	adds	r7, #16
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8010cf2:	b590      	push	{r4, r7, lr}
 8010cf4:	b097      	sub	sp, #92	@ 0x5c
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
 8010cfa:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8010d00:	2300      	movs	r3, #0
 8010d02:	613b      	str	r3, [r7, #16]
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8010d08:	e009      	b.n	8010d1e <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	1c5a      	adds	r2, r3, #1
 8010d0e:	607a      	str	r2, [r7, #4]
 8010d10:	781a      	ldrb	r2, [r3, #0]
 8010d12:	f107 030c 	add.w	r3, r7, #12
 8010d16:	4611      	mov	r1, r2
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7ff ffad 	bl	8010c78 <putc_bfd>
	while (*str)			/* Put the string */
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	781b      	ldrb	r3, [r3, #0]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d1f1      	bne.n	8010d0a <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	db15      	blt.n	8010d58 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8010d2c:	68f8      	ldr	r0, [r7, #12]
 8010d2e:	693b      	ldr	r3, [r7, #16]
 8010d30:	461c      	mov	r4, r3
 8010d32:	f107 0208 	add.w	r2, r7, #8
 8010d36:	f107 030c 	add.w	r3, r7, #12
 8010d3a:	f103 010c 	add.w	r1, r3, #12
 8010d3e:	4613      	mov	r3, r2
 8010d40:	4622      	mov	r2, r4
 8010d42:	f7ff fa0a 	bl	801015a <f_write>
 8010d46:	4603      	mov	r3, r0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d105      	bne.n	8010d58 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8010d4c:	693b      	ldr	r3, [r7, #16]
 8010d4e:	68ba      	ldr	r2, [r7, #8]
 8010d50:	4293      	cmp	r3, r2
 8010d52:	d101      	bne.n	8010d58 <f_puts+0x66>
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	e001      	b.n	8010d5c <f_puts+0x6a>
	return EOF;
 8010d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	375c      	adds	r7, #92	@ 0x5c
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd90      	pop	{r4, r7, pc}

08010d64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b087      	sub	sp, #28
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	60f8      	str	r0, [r7, #12]
 8010d6c:	60b9      	str	r1, [r7, #8]
 8010d6e:	4613      	mov	r3, r2
 8010d70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010d72:	2301      	movs	r3, #1
 8010d74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010d76:	2300      	movs	r3, #0
 8010d78:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8010d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8010df4 <FATFS_LinkDriverEx+0x90>)
 8010d7c:	7a5b      	ldrb	r3, [r3, #9]
 8010d7e:	b2db      	uxtb	r3, r3
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d831      	bhi.n	8010de8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010d84:	4b1b      	ldr	r3, [pc, #108]	@ (8010df4 <FATFS_LinkDriverEx+0x90>)
 8010d86:	7a5b      	ldrb	r3, [r3, #9]
 8010d88:	b2db      	uxtb	r3, r3
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	4b19      	ldr	r3, [pc, #100]	@ (8010df4 <FATFS_LinkDriverEx+0x90>)
 8010d8e:	2100      	movs	r1, #0
 8010d90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8010d92:	4b18      	ldr	r3, [pc, #96]	@ (8010df4 <FATFS_LinkDriverEx+0x90>)
 8010d94:	7a5b      	ldrb	r3, [r3, #9]
 8010d96:	b2db      	uxtb	r3, r3
 8010d98:	4a16      	ldr	r2, [pc, #88]	@ (8010df4 <FATFS_LinkDriverEx+0x90>)
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	4413      	add	r3, r2
 8010d9e:	68fa      	ldr	r2, [r7, #12]
 8010da0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8010da2:	4b14      	ldr	r3, [pc, #80]	@ (8010df4 <FATFS_LinkDriverEx+0x90>)
 8010da4:	7a5b      	ldrb	r3, [r3, #9]
 8010da6:	b2db      	uxtb	r3, r3
 8010da8:	461a      	mov	r2, r3
 8010daa:	4b12      	ldr	r3, [pc, #72]	@ (8010df4 <FATFS_LinkDriverEx+0x90>)
 8010dac:	4413      	add	r3, r2
 8010dae:	79fa      	ldrb	r2, [r7, #7]
 8010db0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010db2:	4b10      	ldr	r3, [pc, #64]	@ (8010df4 <FATFS_LinkDriverEx+0x90>)
 8010db4:	7a5b      	ldrb	r3, [r3, #9]
 8010db6:	b2db      	uxtb	r3, r3
 8010db8:	1c5a      	adds	r2, r3, #1
 8010dba:	b2d1      	uxtb	r1, r2
 8010dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8010df4 <FATFS_LinkDriverEx+0x90>)
 8010dbe:	7251      	strb	r1, [r2, #9]
 8010dc0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010dc2:	7dbb      	ldrb	r3, [r7, #22]
 8010dc4:	3330      	adds	r3, #48	@ 0x30
 8010dc6:	b2da      	uxtb	r2, r3
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	3301      	adds	r3, #1
 8010dd0:	223a      	movs	r2, #58	@ 0x3a
 8010dd2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	3302      	adds	r3, #2
 8010dd8:	222f      	movs	r2, #47	@ 0x2f
 8010dda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	3303      	adds	r3, #3
 8010de0:	2200      	movs	r2, #0
 8010de2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010de4:	2300      	movs	r3, #0
 8010de6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8010de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	371c      	adds	r7, #28
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bc80      	pop	{r7}
 8010df2:	4770      	bx	lr
 8010df4:	200012c4 	.word	0x200012c4

08010df8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b082      	sub	sp, #8
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
 8010e00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010e02:	2200      	movs	r2, #0
 8010e04:	6839      	ldr	r1, [r7, #0]
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f7ff ffac 	bl	8010d64 <FATFS_LinkDriverEx>
 8010e0c:	4603      	mov	r3, r0
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3708      	adds	r7, #8
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}
	...

08010e18 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	4603      	mov	r3, r0
 8010e20:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010e22:	4b0b      	ldr	r3, [pc, #44]	@ (8010e50 <SD_initialize+0x38>)
 8010e24:	2201      	movs	r2, #1
 8010e26:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8010e28:	f7fc fbd4 	bl	800d5d4 <BSP_SD_Init>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d107      	bne.n	8010e42 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010e32:	4b07      	ldr	r3, [pc, #28]	@ (8010e50 <SD_initialize+0x38>)
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	b2db      	uxtb	r3, r3
 8010e38:	f023 0301 	bic.w	r3, r3, #1
 8010e3c:	b2da      	uxtb	r2, r3
 8010e3e:	4b04      	ldr	r3, [pc, #16]	@ (8010e50 <SD_initialize+0x38>)
 8010e40:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010e42:	4b03      	ldr	r3, [pc, #12]	@ (8010e50 <SD_initialize+0x38>)
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	b2db      	uxtb	r3, r3
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3708      	adds	r7, #8
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}
 8010e50:	2000003d 	.word	0x2000003d

08010e54 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8010e8c <SD_status+0x38>)
 8010e60:	2201      	movs	r2, #1
 8010e62:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010e64:	f7fc fc0a 	bl	800d67c <BSP_SD_GetCardState>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d107      	bne.n	8010e7e <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010e6e:	4b07      	ldr	r3, [pc, #28]	@ (8010e8c <SD_status+0x38>)
 8010e70:	781b      	ldrb	r3, [r3, #0]
 8010e72:	b2db      	uxtb	r3, r3
 8010e74:	f023 0301 	bic.w	r3, r3, #1
 8010e78:	b2da      	uxtb	r2, r3
 8010e7a:	4b04      	ldr	r3, [pc, #16]	@ (8010e8c <SD_status+0x38>)
 8010e7c:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8010e7e:	4b03      	ldr	r3, [pc, #12]	@ (8010e8c <SD_status+0x38>)
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	b2db      	uxtb	r3, r3
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3708      	adds	r7, #8
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}
 8010e8c:	2000003d 	.word	0x2000003d

08010e90 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b086      	sub	sp, #24
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	60b9      	str	r1, [r7, #8]
 8010e98:	607a      	str	r2, [r7, #4]
 8010e9a:	603b      	str	r3, [r7, #0]
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8010ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8010ee4 <SD_read+0x54>)
 8010ea6:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8010ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8010ee8 <SD_read+0x58>)
 8010eaa:	683a      	ldr	r2, [r7, #0]
 8010eac:	6879      	ldr	r1, [r7, #4]
 8010eae:	68b8      	ldr	r0, [r7, #8]
 8010eb0:	f7fc fba8 	bl	800d604 <BSP_SD_ReadBlocks>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d10e      	bne.n	8010ed8 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010eba:	e006      	b.n	8010eca <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	1e5a      	subs	r2, r3, #1
 8010ec0:	613a      	str	r2, [r7, #16]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d101      	bne.n	8010eca <SD_read+0x3a>
      {
        return RES_ERROR;
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	e007      	b.n	8010eda <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010eca:	f7fc fbd7 	bl	800d67c <BSP_SD_GetCardState>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d1f3      	bne.n	8010ebc <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8010ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3718      	adds	r7, #24
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	000186a0 	.word	0x000186a0
 8010ee8:	05f5e100 	.word	0x05f5e100

08010eec <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b086      	sub	sp, #24
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60b9      	str	r1, [r7, #8]
 8010ef4:	607a      	str	r2, [r7, #4]
 8010ef6:	603b      	str	r3, [r7, #0]
 8010ef8:	4603      	mov	r3, r0
 8010efa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010efc:	2301      	movs	r3, #1
 8010efe:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8010f00:	4b0f      	ldr	r3, [pc, #60]	@ (8010f40 <SD_write+0x54>)
 8010f02:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8010f04:	4b0f      	ldr	r3, [pc, #60]	@ (8010f44 <SD_write+0x58>)
 8010f06:	683a      	ldr	r2, [r7, #0]
 8010f08:	6879      	ldr	r1, [r7, #4]
 8010f0a:	68b8      	ldr	r0, [r7, #8]
 8010f0c:	f7fc fb98 	bl	800d640 <BSP_SD_WriteBlocks>
 8010f10:	4603      	mov	r3, r0
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d10e      	bne.n	8010f34 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010f16:	e006      	b.n	8010f26 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	1e5a      	subs	r2, r3, #1
 8010f1c:	613a      	str	r2, [r7, #16]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d101      	bne.n	8010f26 <SD_write+0x3a>
      {
        return RES_ERROR;
 8010f22:	2301      	movs	r3, #1
 8010f24:	e007      	b.n	8010f36 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010f26:	f7fc fba9 	bl	800d67c <BSP_SD_GetCardState>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d1f3      	bne.n	8010f18 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8010f30:	2300      	movs	r3, #0
 8010f32:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8010f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3718      	adds	r7, #24
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
 8010f3e:	bf00      	nop
 8010f40:	000186a0 	.word	0x000186a0
 8010f44:	05f5e100 	.word	0x05f5e100

08010f48 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b08c      	sub	sp, #48	@ 0x30
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	4603      	mov	r3, r0
 8010f50:	603a      	str	r2, [r7, #0]
 8010f52:	71fb      	strb	r3, [r7, #7]
 8010f54:	460b      	mov	r3, r1
 8010f56:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010f58:	2301      	movs	r3, #1
 8010f5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010f5e:	4b24      	ldr	r3, [pc, #144]	@ (8010ff0 <SD_ioctl+0xa8>)
 8010f60:	781b      	ldrb	r3, [r3, #0]
 8010f62:	b2db      	uxtb	r3, r3
 8010f64:	f003 0301 	and.w	r3, r3, #1
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d001      	beq.n	8010f70 <SD_ioctl+0x28>
 8010f6c:	2303      	movs	r3, #3
 8010f6e:	e03b      	b.n	8010fe8 <SD_ioctl+0xa0>
  
  switch (cmd)
 8010f70:	79bb      	ldrb	r3, [r7, #6]
 8010f72:	2b03      	cmp	r3, #3
 8010f74:	d833      	bhi.n	8010fde <SD_ioctl+0x96>
 8010f76:	a201      	add	r2, pc, #4	@ (adr r2, 8010f7c <SD_ioctl+0x34>)
 8010f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f7c:	08010f8d 	.word	0x08010f8d
 8010f80:	08010f95 	.word	0x08010f95
 8010f84:	08010fad 	.word	0x08010fad
 8010f88:	08010fc7 	.word	0x08010fc7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010f92:	e027      	b.n	8010fe4 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010f94:	f107 030c 	add.w	r3, r7, #12
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f7fc fb7f 	bl	800d69c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010faa:	e01b      	b.n	8010fe4 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010fac:	f107 030c 	add.w	r3, r7, #12
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7fc fb73 	bl	800d69c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fb8:	b29a      	uxth	r2, r3
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010fc4:	e00e      	b.n	8010fe4 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010fc6:	f107 030c 	add.w	r3, r7, #12
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7fc fb66 	bl	800d69c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8010fd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010fdc:	e002      	b.n	8010fe4 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8010fde:	2304      	movs	r3, #4
 8010fe0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 8010fe4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3730      	adds	r7, #48	@ 0x30
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	2000003d 	.word	0x2000003d

08010ff4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8010ff4:	b480      	push	{r7}
 8010ff6:	b085      	sub	sp, #20
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	6039      	str	r1, [r7, #0]
 8010ffe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011000:	88fb      	ldrh	r3, [r7, #6]
 8011002:	2b7f      	cmp	r3, #127	@ 0x7f
 8011004:	d802      	bhi.n	801100c <ff_convert+0x18>
		c = chr;
 8011006:	88fb      	ldrh	r3, [r7, #6]
 8011008:	81fb      	strh	r3, [r7, #14]
 801100a:	e025      	b.n	8011058 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d00b      	beq.n	801102a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011012:	88fb      	ldrh	r3, [r7, #6]
 8011014:	2bff      	cmp	r3, #255	@ 0xff
 8011016:	d805      	bhi.n	8011024 <ff_convert+0x30>
 8011018:	88fb      	ldrh	r3, [r7, #6]
 801101a:	3b80      	subs	r3, #128	@ 0x80
 801101c:	4a11      	ldr	r2, [pc, #68]	@ (8011064 <ff_convert+0x70>)
 801101e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011022:	e000      	b.n	8011026 <ff_convert+0x32>
 8011024:	2300      	movs	r3, #0
 8011026:	81fb      	strh	r3, [r7, #14]
 8011028:	e016      	b.n	8011058 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 801102a:	2300      	movs	r3, #0
 801102c:	81fb      	strh	r3, [r7, #14]
 801102e:	e009      	b.n	8011044 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011030:	89fb      	ldrh	r3, [r7, #14]
 8011032:	4a0c      	ldr	r2, [pc, #48]	@ (8011064 <ff_convert+0x70>)
 8011034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011038:	88fa      	ldrh	r2, [r7, #6]
 801103a:	429a      	cmp	r2, r3
 801103c:	d006      	beq.n	801104c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801103e:	89fb      	ldrh	r3, [r7, #14]
 8011040:	3301      	adds	r3, #1
 8011042:	81fb      	strh	r3, [r7, #14]
 8011044:	89fb      	ldrh	r3, [r7, #14]
 8011046:	2b7f      	cmp	r3, #127	@ 0x7f
 8011048:	d9f2      	bls.n	8011030 <ff_convert+0x3c>
 801104a:	e000      	b.n	801104e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801104c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801104e:	89fb      	ldrh	r3, [r7, #14]
 8011050:	3380      	adds	r3, #128	@ 0x80
 8011052:	b29b      	uxth	r3, r3
 8011054:	b2db      	uxtb	r3, r3
 8011056:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011058:	89fb      	ldrh	r3, [r7, #14]
}
 801105a:	4618      	mov	r0, r3
 801105c:	3714      	adds	r7, #20
 801105e:	46bd      	mov	sp, r7
 8011060:	bc80      	pop	{r7}
 8011062:	4770      	bx	lr
 8011064:	08014554 	.word	0x08014554

08011068 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8011068:	b480      	push	{r7}
 801106a:	b085      	sub	sp, #20
 801106c:	af00      	add	r7, sp, #0
 801106e:	4603      	mov	r3, r0
 8011070:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8011072:	2300      	movs	r3, #0
 8011074:	60fb      	str	r3, [r7, #12]
 8011076:	e002      	b.n	801107e <ff_wtoupper+0x16>
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	3301      	adds	r3, #1
 801107c:	60fb      	str	r3, [r7, #12]
 801107e:	4a0f      	ldr	r2, [pc, #60]	@ (80110bc <ff_wtoupper+0x54>)
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d006      	beq.n	8011098 <ff_wtoupper+0x30>
 801108a:	4a0c      	ldr	r2, [pc, #48]	@ (80110bc <ff_wtoupper+0x54>)
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011092:	88fa      	ldrh	r2, [r7, #6]
 8011094:	429a      	cmp	r2, r3
 8011096:	d1ef      	bne.n	8011078 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8011098:	4a08      	ldr	r2, [pc, #32]	@ (80110bc <ff_wtoupper+0x54>)
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d004      	beq.n	80110ae <ff_wtoupper+0x46>
 80110a4:	4a06      	ldr	r2, [pc, #24]	@ (80110c0 <ff_wtoupper+0x58>)
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110ac:	e000      	b.n	80110b0 <ff_wtoupper+0x48>
 80110ae:	88fb      	ldrh	r3, [r7, #6]
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	3714      	adds	r7, #20
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bc80      	pop	{r7}
 80110b8:	4770      	bx	lr
 80110ba:	bf00      	nop
 80110bc:	08014654 	.word	0x08014654
 80110c0:	08014834 	.word	0x08014834

080110c4 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b086      	sub	sp, #24
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	4603      	mov	r3, r0
 80110cc:	6039      	str	r1, [r7, #0]
 80110ce:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 80110d0:	2300      	movs	r3, #0
 80110d2:	60fb      	str	r3, [r7, #12]
 80110d4:	2300      	movs	r3, #0
 80110d6:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 80110d8:	f107 030c 	add.w	r3, r7, #12
 80110dc:	2101      	movs	r1, #1
 80110de:	4618      	mov	r0, r3
 80110e0:	f000 f8cb 	bl	801127a <osSemaphoreCreate>
 80110e4:	4602      	mov	r2, r0
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	bf14      	ite	ne
 80110f2:	2301      	movne	r3, #1
 80110f4:	2300      	moveq	r3, #0
 80110f6:	b2db      	uxtb	r3, r3
 80110f8:	617b      	str	r3, [r7, #20]
  
  return ret;
 80110fa:	697b      	ldr	r3, [r7, #20]
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3718      	adds	r7, #24
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}

08011104 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b082      	sub	sp, #8
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f000 f96b 	bl	80113e8 <osSemaphoreDelete>
  return 1;
 8011112:	2301      	movs	r3, #1
}
 8011114:	4618      	mov	r0, r3
 8011116:	3708      	adds	r7, #8
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b084      	sub	sp, #16
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011124:	2300      	movs	r3, #0
 8011126:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8011128:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f000 f8d7 	bl	80112e0 <osSemaphoreWait>
 8011132:	4603      	mov	r3, r0
 8011134:	2b00      	cmp	r3, #0
 8011136:	d101      	bne.n	801113c <ff_req_grant+0x20>
  {
    ret = 1;
 8011138:	2301      	movs	r3, #1
 801113a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 801113c:	68fb      	ldr	r3, [r7, #12]
}
 801113e:	4618      	mov	r0, r3
 8011140:	3710      	adds	r7, #16
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}

08011146 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011146:	b580      	push	{r7, lr}
 8011148:	b082      	sub	sp, #8
 801114a:	af00      	add	r7, sp, #0
 801114c:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f000 f914 	bl	801137c <osSemaphoreRelease>
}
 8011154:	bf00      	nop
 8011156:	3708      	adds	r7, #8
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}

0801115c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801115c:	b480      	push	{r7}
 801115e:	b085      	sub	sp, #20
 8011160:	af00      	add	r7, sp, #0
 8011162:	4603      	mov	r3, r0
 8011164:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011166:	2300      	movs	r3, #0
 8011168:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801116a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801116e:	2b84      	cmp	r3, #132	@ 0x84
 8011170:	d005      	beq.n	801117e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011172:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	4413      	add	r3, r2
 801117a:	3303      	adds	r3, #3
 801117c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801117e:	68fb      	ldr	r3, [r7, #12]
}
 8011180:	4618      	mov	r0, r3
 8011182:	3714      	adds	r7, #20
 8011184:	46bd      	mov	sp, r7
 8011186:	bc80      	pop	{r7}
 8011188:	4770      	bx	lr

0801118a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801118a:	b480      	push	{r7}
 801118c:	b083      	sub	sp, #12
 801118e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011190:	f3ef 8305 	mrs	r3, IPSR
 8011194:	607b      	str	r3, [r7, #4]
  return(result);
 8011196:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011198:	2b00      	cmp	r3, #0
 801119a:	bf14      	ite	ne
 801119c:	2301      	movne	r3, #1
 801119e:	2300      	moveq	r3, #0
 80111a0:	b2db      	uxtb	r3, r3
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	370c      	adds	r7, #12
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bc80      	pop	{r7}
 80111aa:	4770      	bx	lr

080111ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80111b0:	f001 fb34 	bl	801281c <vTaskStartScheduler>
  
  return osOK;
 80111b4:	2300      	movs	r3, #0
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	bd80      	pop	{r7, pc}

080111ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80111ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111bc:	b089      	sub	sp, #36	@ 0x24
 80111be:	af04      	add	r7, sp, #16
 80111c0:	6078      	str	r0, [r7, #4]
 80111c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	695b      	ldr	r3, [r3, #20]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d020      	beq.n	801120e <osThreadCreate+0x54>
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	699b      	ldr	r3, [r3, #24]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d01c      	beq.n	801120e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	685c      	ldr	r4, [r3, #4]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	691e      	ldr	r6, [r3, #16]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7ff ffb8 	bl	801115c <makeFreeRtosPriority>
 80111ec:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	695b      	ldr	r3, [r3, #20]
 80111f2:	687a      	ldr	r2, [r7, #4]
 80111f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80111f6:	9202      	str	r2, [sp, #8]
 80111f8:	9301      	str	r3, [sp, #4]
 80111fa:	9100      	str	r1, [sp, #0]
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	4632      	mov	r2, r6
 8011200:	4629      	mov	r1, r5
 8011202:	4620      	mov	r0, r4
 8011204:	f000 ff90 	bl	8012128 <xTaskCreateStatic>
 8011208:	4603      	mov	r3, r0
 801120a:	60fb      	str	r3, [r7, #12]
 801120c:	e01c      	b.n	8011248 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	685c      	ldr	r4, [r3, #4]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801121a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011222:	4618      	mov	r0, r3
 8011224:	f7ff ff9a 	bl	801115c <makeFreeRtosPriority>
 8011228:	4602      	mov	r2, r0
 801122a:	f107 030c 	add.w	r3, r7, #12
 801122e:	9301      	str	r3, [sp, #4]
 8011230:	9200      	str	r2, [sp, #0]
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	4632      	mov	r2, r6
 8011236:	4629      	mov	r1, r5
 8011238:	4620      	mov	r0, r4
 801123a:	f000 ffd4 	bl	80121e6 <xTaskCreate>
 801123e:	4603      	mov	r3, r0
 8011240:	2b01      	cmp	r3, #1
 8011242:	d001      	beq.n	8011248 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011244:	2300      	movs	r3, #0
 8011246:	e000      	b.n	801124a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011248:	68fb      	ldr	r3, [r7, #12]
}
 801124a:	4618      	mov	r0, r3
 801124c:	3714      	adds	r7, #20
 801124e:	46bd      	mov	sp, r7
 8011250:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011252 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011252:	b580      	push	{r7, lr}
 8011254:	b084      	sub	sp, #16
 8011256:	af00      	add	r7, sp, #0
 8011258:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d001      	beq.n	8011268 <osDelay+0x16>
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	e000      	b.n	801126a <osDelay+0x18>
 8011268:	2301      	movs	r3, #1
 801126a:	4618      	mov	r0, r3
 801126c:	f001 f972 	bl	8012554 <vTaskDelay>
  
  return osOK;
 8011270:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011272:	4618      	mov	r0, r3
 8011274:	3710      	adds	r7, #16
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}

0801127a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801127a:	b580      	push	{r7, lr}
 801127c:	b086      	sub	sp, #24
 801127e:	af02      	add	r7, sp, #8
 8011280:	6078      	str	r0, [r7, #4]
 8011282:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d00f      	beq.n	80112ac <osSemaphoreCreate+0x32>
    if (count == 1) {
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	2b01      	cmp	r3, #1
 8011290:	d10a      	bne.n	80112a8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	685b      	ldr	r3, [r3, #4]
 8011296:	2203      	movs	r2, #3
 8011298:	9200      	str	r2, [sp, #0]
 801129a:	2200      	movs	r2, #0
 801129c:	2100      	movs	r1, #0
 801129e:	2001      	movs	r0, #1
 80112a0:	f000 f9ce 	bl	8011640 <xQueueGenericCreateStatic>
 80112a4:	4603      	mov	r3, r0
 80112a6:	e016      	b.n	80112d6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80112a8:	2300      	movs	r3, #0
 80112aa:	e014      	b.n	80112d6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	d110      	bne.n	80112d4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80112b2:	2203      	movs	r2, #3
 80112b4:	2100      	movs	r1, #0
 80112b6:	2001      	movs	r0, #1
 80112b8:	f000 fa3e 	bl	8011738 <xQueueGenericCreate>
 80112bc:	60f8      	str	r0, [r7, #12]
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d005      	beq.n	80112d0 <osSemaphoreCreate+0x56>
 80112c4:	2300      	movs	r3, #0
 80112c6:	2200      	movs	r2, #0
 80112c8:	2100      	movs	r1, #0
 80112ca:	68f8      	ldr	r0, [r7, #12]
 80112cc:	f000 fa92 	bl	80117f4 <xQueueGenericSend>
      return sema;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	e000      	b.n	80112d6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80112d4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	3710      	adds	r7, #16
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}
	...

080112e0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80112ea:	2300      	movs	r3, #0
 80112ec:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d101      	bne.n	80112f8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80112f4:	2380      	movs	r3, #128	@ 0x80
 80112f6:	e03a      	b.n	801136e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80112f8:	2300      	movs	r3, #0
 80112fa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011302:	d103      	bne.n	801130c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011304:	f04f 33ff 	mov.w	r3, #4294967295
 8011308:	60fb      	str	r3, [r7, #12]
 801130a:	e009      	b.n	8011320 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d006      	beq.n	8011320 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d101      	bne.n	8011320 <osSemaphoreWait+0x40>
      ticks = 1;
 801131c:	2301      	movs	r3, #1
 801131e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011320:	f7ff ff33 	bl	801118a <inHandlerMode>
 8011324:	4603      	mov	r3, r0
 8011326:	2b00      	cmp	r3, #0
 8011328:	d017      	beq.n	801135a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801132a:	f107 0308 	add.w	r3, r7, #8
 801132e:	461a      	mov	r2, r3
 8011330:	2100      	movs	r1, #0
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f000 fd00 	bl	8011d38 <xQueueReceiveFromISR>
 8011338:	4603      	mov	r3, r0
 801133a:	2b01      	cmp	r3, #1
 801133c:	d001      	beq.n	8011342 <osSemaphoreWait+0x62>
      return osErrorOS;
 801133e:	23ff      	movs	r3, #255	@ 0xff
 8011340:	e015      	b.n	801136e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d011      	beq.n	801136c <osSemaphoreWait+0x8c>
 8011348:	4b0b      	ldr	r3, [pc, #44]	@ (8011378 <osSemaphoreWait+0x98>)
 801134a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801134e:	601a      	str	r2, [r3, #0]
 8011350:	f3bf 8f4f 	dsb	sy
 8011354:	f3bf 8f6f 	isb	sy
 8011358:	e008      	b.n	801136c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801135a:	68f9      	ldr	r1, [r7, #12]
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f000 fbdb 	bl	8011b18 <xQueueSemaphoreTake>
 8011362:	4603      	mov	r3, r0
 8011364:	2b01      	cmp	r3, #1
 8011366:	d001      	beq.n	801136c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011368:	23ff      	movs	r3, #255	@ 0xff
 801136a:	e000      	b.n	801136e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 801136c:	2300      	movs	r3, #0
}
 801136e:	4618      	mov	r0, r3
 8011370:	3710      	adds	r7, #16
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
 8011376:	bf00      	nop
 8011378:	e000ed04 	.word	0xe000ed04

0801137c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011384:	2300      	movs	r3, #0
 8011386:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011388:	2300      	movs	r3, #0
 801138a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801138c:	f7ff fefd 	bl	801118a <inHandlerMode>
 8011390:	4603      	mov	r3, r0
 8011392:	2b00      	cmp	r3, #0
 8011394:	d016      	beq.n	80113c4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011396:	f107 0308 	add.w	r3, r7, #8
 801139a:	4619      	mov	r1, r3
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f000 fb2b 	bl	80119f8 <xQueueGiveFromISR>
 80113a2:	4603      	mov	r3, r0
 80113a4:	2b01      	cmp	r3, #1
 80113a6:	d001      	beq.n	80113ac <osSemaphoreRelease+0x30>
      return osErrorOS;
 80113a8:	23ff      	movs	r3, #255	@ 0xff
 80113aa:	e017      	b.n	80113dc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d013      	beq.n	80113da <osSemaphoreRelease+0x5e>
 80113b2:	4b0c      	ldr	r3, [pc, #48]	@ (80113e4 <osSemaphoreRelease+0x68>)
 80113b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80113b8:	601a      	str	r2, [r3, #0]
 80113ba:	f3bf 8f4f 	dsb	sy
 80113be:	f3bf 8f6f 	isb	sy
 80113c2:	e00a      	b.n	80113da <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80113c4:	2300      	movs	r3, #0
 80113c6:	2200      	movs	r2, #0
 80113c8:	2100      	movs	r1, #0
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f000 fa12 	bl	80117f4 <xQueueGenericSend>
 80113d0:	4603      	mov	r3, r0
 80113d2:	2b01      	cmp	r3, #1
 80113d4:	d001      	beq.n	80113da <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80113d6:	23ff      	movs	r3, #255	@ 0xff
 80113d8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80113da:	68fb      	ldr	r3, [r7, #12]
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3710      	adds	r7, #16
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	e000ed04 	.word	0xe000ed04

080113e8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80113f0:	f7ff fecb 	bl	801118a <inHandlerMode>
 80113f4:	4603      	mov	r3, r0
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d001      	beq.n	80113fe <osSemaphoreDelete+0x16>
    return osErrorISR;
 80113fa:	2382      	movs	r3, #130	@ 0x82
 80113fc:	e003      	b.n	8011406 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80113fe:	6878      	ldr	r0, [r7, #4]
 8011400:	f000 fd1c 	bl	8011e3c <vQueueDelete>

  return osOK; 
 8011404:	2300      	movs	r3, #0
}
 8011406:	4618      	mov	r0, r3
 8011408:	3708      	adds	r7, #8
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}

0801140e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801140e:	b480      	push	{r7}
 8011410:	b083      	sub	sp, #12
 8011412:	af00      	add	r7, sp, #0
 8011414:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f103 0208 	add.w	r2, r3, #8
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f04f 32ff 	mov.w	r2, #4294967295
 8011426:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f103 0208 	add.w	r2, r3, #8
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	f103 0208 	add.w	r2, r3, #8
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2200      	movs	r2, #0
 8011440:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011442:	bf00      	nop
 8011444:	370c      	adds	r7, #12
 8011446:	46bd      	mov	sp, r7
 8011448:	bc80      	pop	{r7}
 801144a:	4770      	bx	lr

0801144c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801144c:	b480      	push	{r7}
 801144e:	b083      	sub	sp, #12
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2200      	movs	r2, #0
 8011458:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801145a:	bf00      	nop
 801145c:	370c      	adds	r7, #12
 801145e:	46bd      	mov	sp, r7
 8011460:	bc80      	pop	{r7}
 8011462:	4770      	bx	lr

08011464 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011464:	b480      	push	{r7}
 8011466:	b085      	sub	sp, #20
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	68fa      	ldr	r2, [r7, #12]
 8011478:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	689a      	ldr	r2, [r3, #8]
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	689b      	ldr	r3, [r3, #8]
 8011486:	683a      	ldr	r2, [r7, #0]
 8011488:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	683a      	ldr	r2, [r7, #0]
 801148e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	687a      	ldr	r2, [r7, #4]
 8011494:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	1c5a      	adds	r2, r3, #1
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	601a      	str	r2, [r3, #0]
}
 80114a0:	bf00      	nop
 80114a2:	3714      	adds	r7, #20
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bc80      	pop	{r7}
 80114a8:	4770      	bx	lr

080114aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80114aa:	b480      	push	{r7}
 80114ac:	b085      	sub	sp, #20
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	6078      	str	r0, [r7, #4]
 80114b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114c0:	d103      	bne.n	80114ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	691b      	ldr	r3, [r3, #16]
 80114c6:	60fb      	str	r3, [r7, #12]
 80114c8:	e00c      	b.n	80114e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	3308      	adds	r3, #8
 80114ce:	60fb      	str	r3, [r7, #12]
 80114d0:	e002      	b.n	80114d8 <vListInsert+0x2e>
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	685b      	ldr	r3, [r3, #4]
 80114d6:	60fb      	str	r3, [r7, #12]
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	68ba      	ldr	r2, [r7, #8]
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d2f6      	bcs.n	80114d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	685a      	ldr	r2, [r3, #4]
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	683a      	ldr	r2, [r7, #0]
 80114f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	68fa      	ldr	r2, [r7, #12]
 80114f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	683a      	ldr	r2, [r7, #0]
 80114fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	687a      	ldr	r2, [r7, #4]
 8011504:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	1c5a      	adds	r2, r3, #1
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	601a      	str	r2, [r3, #0]
}
 8011510:	bf00      	nop
 8011512:	3714      	adds	r7, #20
 8011514:	46bd      	mov	sp, r7
 8011516:	bc80      	pop	{r7}
 8011518:	4770      	bx	lr

0801151a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801151a:	b480      	push	{r7}
 801151c:	b085      	sub	sp, #20
 801151e:	af00      	add	r7, sp, #0
 8011520:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	691b      	ldr	r3, [r3, #16]
 8011526:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	685b      	ldr	r3, [r3, #4]
 801152c:	687a      	ldr	r2, [r7, #4]
 801152e:	6892      	ldr	r2, [r2, #8]
 8011530:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	689b      	ldr	r3, [r3, #8]
 8011536:	687a      	ldr	r2, [r7, #4]
 8011538:	6852      	ldr	r2, [r2, #4]
 801153a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	687a      	ldr	r2, [r7, #4]
 8011542:	429a      	cmp	r2, r3
 8011544:	d103      	bne.n	801154e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	689a      	ldr	r2, [r3, #8]
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2200      	movs	r2, #0
 8011552:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	1e5a      	subs	r2, r3, #1
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	681b      	ldr	r3, [r3, #0]
}
 8011562:	4618      	mov	r0, r3
 8011564:	3714      	adds	r7, #20
 8011566:	46bd      	mov	sp, r7
 8011568:	bc80      	pop	{r7}
 801156a:	4770      	bx	lr

0801156c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b084      	sub	sp, #16
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d10b      	bne.n	8011598 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011584:	f383 8811 	msr	BASEPRI, r3
 8011588:	f3bf 8f6f 	isb	sy
 801158c:	f3bf 8f4f 	dsb	sy
 8011590:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011592:	bf00      	nop
 8011594:	bf00      	nop
 8011596:	e7fd      	b.n	8011594 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011598:	f002 f8d0 	bl	801373c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80115a4:	68f9      	ldr	r1, [r7, #12]
 80115a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80115a8:	fb01 f303 	mul.w	r3, r1, r3
 80115ac:	441a      	add	r2, r3
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	2200      	movs	r2, #0
 80115b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	681a      	ldr	r2, [r3, #0]
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	681a      	ldr	r2, [r3, #0]
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80115c8:	3b01      	subs	r3, #1
 80115ca:	68f9      	ldr	r1, [r7, #12]
 80115cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80115ce:	fb01 f303 	mul.w	r3, r1, r3
 80115d2:	441a      	add	r2, r3
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	22ff      	movs	r2, #255	@ 0xff
 80115dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	22ff      	movs	r2, #255	@ 0xff
 80115e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d114      	bne.n	8011618 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	691b      	ldr	r3, [r3, #16]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d01a      	beq.n	801162c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	3310      	adds	r3, #16
 80115fa:	4618      	mov	r0, r3
 80115fc:	f001 fb6a 	bl	8012cd4 <xTaskRemoveFromEventList>
 8011600:	4603      	mov	r3, r0
 8011602:	2b00      	cmp	r3, #0
 8011604:	d012      	beq.n	801162c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011606:	4b0d      	ldr	r3, [pc, #52]	@ (801163c <xQueueGenericReset+0xd0>)
 8011608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801160c:	601a      	str	r2, [r3, #0]
 801160e:	f3bf 8f4f 	dsb	sy
 8011612:	f3bf 8f6f 	isb	sy
 8011616:	e009      	b.n	801162c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	3310      	adds	r3, #16
 801161c:	4618      	mov	r0, r3
 801161e:	f7ff fef6 	bl	801140e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	3324      	adds	r3, #36	@ 0x24
 8011626:	4618      	mov	r0, r3
 8011628:	f7ff fef1 	bl	801140e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801162c:	f002 f8b6 	bl	801379c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011630:	2301      	movs	r3, #1
}
 8011632:	4618      	mov	r0, r3
 8011634:	3710      	adds	r7, #16
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	e000ed04 	.word	0xe000ed04

08011640 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011640:	b580      	push	{r7, lr}
 8011642:	b08e      	sub	sp, #56	@ 0x38
 8011644:	af02      	add	r7, sp, #8
 8011646:	60f8      	str	r0, [r7, #12]
 8011648:	60b9      	str	r1, [r7, #8]
 801164a:	607a      	str	r2, [r7, #4]
 801164c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d10b      	bne.n	801166c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8011654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011658:	f383 8811 	msr	BASEPRI, r3
 801165c:	f3bf 8f6f 	isb	sy
 8011660:	f3bf 8f4f 	dsb	sy
 8011664:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011666:	bf00      	nop
 8011668:	bf00      	nop
 801166a:	e7fd      	b.n	8011668 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d10b      	bne.n	801168a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8011672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011676:	f383 8811 	msr	BASEPRI, r3
 801167a:	f3bf 8f6f 	isb	sy
 801167e:	f3bf 8f4f 	dsb	sy
 8011682:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011684:	bf00      	nop
 8011686:	bf00      	nop
 8011688:	e7fd      	b.n	8011686 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d002      	beq.n	8011696 <xQueueGenericCreateStatic+0x56>
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d001      	beq.n	801169a <xQueueGenericCreateStatic+0x5a>
 8011696:	2301      	movs	r3, #1
 8011698:	e000      	b.n	801169c <xQueueGenericCreateStatic+0x5c>
 801169a:	2300      	movs	r3, #0
 801169c:	2b00      	cmp	r3, #0
 801169e:	d10b      	bne.n	80116b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80116a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116a4:	f383 8811 	msr	BASEPRI, r3
 80116a8:	f3bf 8f6f 	isb	sy
 80116ac:	f3bf 8f4f 	dsb	sy
 80116b0:	623b      	str	r3, [r7, #32]
}
 80116b2:	bf00      	nop
 80116b4:	bf00      	nop
 80116b6:	e7fd      	b.n	80116b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d102      	bne.n	80116c4 <xQueueGenericCreateStatic+0x84>
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d101      	bne.n	80116c8 <xQueueGenericCreateStatic+0x88>
 80116c4:	2301      	movs	r3, #1
 80116c6:	e000      	b.n	80116ca <xQueueGenericCreateStatic+0x8a>
 80116c8:	2300      	movs	r3, #0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d10b      	bne.n	80116e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80116ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116d2:	f383 8811 	msr	BASEPRI, r3
 80116d6:	f3bf 8f6f 	isb	sy
 80116da:	f3bf 8f4f 	dsb	sy
 80116de:	61fb      	str	r3, [r7, #28]
}
 80116e0:	bf00      	nop
 80116e2:	bf00      	nop
 80116e4:	e7fd      	b.n	80116e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80116e6:	2348      	movs	r3, #72	@ 0x48
 80116e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	2b48      	cmp	r3, #72	@ 0x48
 80116ee:	d00b      	beq.n	8011708 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80116f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116f4:	f383 8811 	msr	BASEPRI, r3
 80116f8:	f3bf 8f6f 	isb	sy
 80116fc:	f3bf 8f4f 	dsb	sy
 8011700:	61bb      	str	r3, [r7, #24]
}
 8011702:	bf00      	nop
 8011704:	bf00      	nop
 8011706:	e7fd      	b.n	8011704 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801170c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801170e:	2b00      	cmp	r3, #0
 8011710:	d00d      	beq.n	801172e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011714:	2201      	movs	r2, #1
 8011716:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801171a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801171e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011720:	9300      	str	r3, [sp, #0]
 8011722:	4613      	mov	r3, r2
 8011724:	687a      	ldr	r2, [r7, #4]
 8011726:	68b9      	ldr	r1, [r7, #8]
 8011728:	68f8      	ldr	r0, [r7, #12]
 801172a:	f000 f844 	bl	80117b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801172e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8011730:	4618      	mov	r0, r3
 8011732:	3730      	adds	r7, #48	@ 0x30
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}

08011738 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011738:	b580      	push	{r7, lr}
 801173a:	b08a      	sub	sp, #40	@ 0x28
 801173c:	af02      	add	r7, sp, #8
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	4613      	mov	r3, r2
 8011744:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d10b      	bne.n	8011764 <xQueueGenericCreate+0x2c>
	__asm volatile
 801174c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011750:	f383 8811 	msr	BASEPRI, r3
 8011754:	f3bf 8f6f 	isb	sy
 8011758:	f3bf 8f4f 	dsb	sy
 801175c:	613b      	str	r3, [r7, #16]
}
 801175e:	bf00      	nop
 8011760:	bf00      	nop
 8011762:	e7fd      	b.n	8011760 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d102      	bne.n	8011770 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801176a:	2300      	movs	r3, #0
 801176c:	61fb      	str	r3, [r7, #28]
 801176e:	e004      	b.n	801177a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	68ba      	ldr	r2, [r7, #8]
 8011774:	fb02 f303 	mul.w	r3, r2, r3
 8011778:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801177a:	69fb      	ldr	r3, [r7, #28]
 801177c:	3348      	adds	r3, #72	@ 0x48
 801177e:	4618      	mov	r0, r3
 8011780:	f002 f8de 	bl	8013940 <pvPortMalloc>
 8011784:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011786:	69bb      	ldr	r3, [r7, #24]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d00f      	beq.n	80117ac <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 801178c:	69bb      	ldr	r3, [r7, #24]
 801178e:	3348      	adds	r3, #72	@ 0x48
 8011790:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011792:	69bb      	ldr	r3, [r7, #24]
 8011794:	2200      	movs	r2, #0
 8011796:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801179a:	79fa      	ldrb	r2, [r7, #7]
 801179c:	69bb      	ldr	r3, [r7, #24]
 801179e:	9300      	str	r3, [sp, #0]
 80117a0:	4613      	mov	r3, r2
 80117a2:	697a      	ldr	r2, [r7, #20]
 80117a4:	68b9      	ldr	r1, [r7, #8]
 80117a6:	68f8      	ldr	r0, [r7, #12]
 80117a8:	f000 f805 	bl	80117b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80117ac:	69bb      	ldr	r3, [r7, #24]
	}
 80117ae:	4618      	mov	r0, r3
 80117b0:	3720      	adds	r7, #32
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}

080117b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80117b6:	b580      	push	{r7, lr}
 80117b8:	b084      	sub	sp, #16
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	60f8      	str	r0, [r7, #12]
 80117be:	60b9      	str	r1, [r7, #8]
 80117c0:	607a      	str	r2, [r7, #4]
 80117c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d103      	bne.n	80117d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80117ca:	69bb      	ldr	r3, [r7, #24]
 80117cc:	69ba      	ldr	r2, [r7, #24]
 80117ce:	601a      	str	r2, [r3, #0]
 80117d0:	e002      	b.n	80117d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80117d2:	69bb      	ldr	r3, [r7, #24]
 80117d4:	687a      	ldr	r2, [r7, #4]
 80117d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80117d8:	69bb      	ldr	r3, [r7, #24]
 80117da:	68fa      	ldr	r2, [r7, #12]
 80117dc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80117de:	69bb      	ldr	r3, [r7, #24]
 80117e0:	68ba      	ldr	r2, [r7, #8]
 80117e2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80117e4:	2101      	movs	r1, #1
 80117e6:	69b8      	ldr	r0, [r7, #24]
 80117e8:	f7ff fec0 	bl	801156c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80117ec:	bf00      	nop
 80117ee:	3710      	adds	r7, #16
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b08e      	sub	sp, #56	@ 0x38
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	607a      	str	r2, [r7, #4]
 8011800:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011802:	2300      	movs	r3, #0
 8011804:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801180a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801180c:	2b00      	cmp	r3, #0
 801180e:	d10b      	bne.n	8011828 <xQueueGenericSend+0x34>
	__asm volatile
 8011810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011814:	f383 8811 	msr	BASEPRI, r3
 8011818:	f3bf 8f6f 	isb	sy
 801181c:	f3bf 8f4f 	dsb	sy
 8011820:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011822:	bf00      	nop
 8011824:	bf00      	nop
 8011826:	e7fd      	b.n	8011824 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d103      	bne.n	8011836 <xQueueGenericSend+0x42>
 801182e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011832:	2b00      	cmp	r3, #0
 8011834:	d101      	bne.n	801183a <xQueueGenericSend+0x46>
 8011836:	2301      	movs	r3, #1
 8011838:	e000      	b.n	801183c <xQueueGenericSend+0x48>
 801183a:	2300      	movs	r3, #0
 801183c:	2b00      	cmp	r3, #0
 801183e:	d10b      	bne.n	8011858 <xQueueGenericSend+0x64>
	__asm volatile
 8011840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011844:	f383 8811 	msr	BASEPRI, r3
 8011848:	f3bf 8f6f 	isb	sy
 801184c:	f3bf 8f4f 	dsb	sy
 8011850:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011852:	bf00      	nop
 8011854:	bf00      	nop
 8011856:	e7fd      	b.n	8011854 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	2b02      	cmp	r3, #2
 801185c:	d103      	bne.n	8011866 <xQueueGenericSend+0x72>
 801185e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011862:	2b01      	cmp	r3, #1
 8011864:	d101      	bne.n	801186a <xQueueGenericSend+0x76>
 8011866:	2301      	movs	r3, #1
 8011868:	e000      	b.n	801186c <xQueueGenericSend+0x78>
 801186a:	2300      	movs	r3, #0
 801186c:	2b00      	cmp	r3, #0
 801186e:	d10b      	bne.n	8011888 <xQueueGenericSend+0x94>
	__asm volatile
 8011870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011874:	f383 8811 	msr	BASEPRI, r3
 8011878:	f3bf 8f6f 	isb	sy
 801187c:	f3bf 8f4f 	dsb	sy
 8011880:	623b      	str	r3, [r7, #32]
}
 8011882:	bf00      	nop
 8011884:	bf00      	nop
 8011886:	e7fd      	b.n	8011884 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011888:	f001 fc20 	bl	80130cc <xTaskGetSchedulerState>
 801188c:	4603      	mov	r3, r0
 801188e:	2b00      	cmp	r3, #0
 8011890:	d102      	bne.n	8011898 <xQueueGenericSend+0xa4>
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d101      	bne.n	801189c <xQueueGenericSend+0xa8>
 8011898:	2301      	movs	r3, #1
 801189a:	e000      	b.n	801189e <xQueueGenericSend+0xaa>
 801189c:	2300      	movs	r3, #0
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d10b      	bne.n	80118ba <xQueueGenericSend+0xc6>
	__asm volatile
 80118a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118a6:	f383 8811 	msr	BASEPRI, r3
 80118aa:	f3bf 8f6f 	isb	sy
 80118ae:	f3bf 8f4f 	dsb	sy
 80118b2:	61fb      	str	r3, [r7, #28]
}
 80118b4:	bf00      	nop
 80118b6:	bf00      	nop
 80118b8:	e7fd      	b.n	80118b6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80118ba:	f001 ff3f 	bl	801373c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80118be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80118c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d302      	bcc.n	80118d0 <xQueueGenericSend+0xdc>
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	2b02      	cmp	r3, #2
 80118ce:	d129      	bne.n	8011924 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80118d0:	683a      	ldr	r2, [r7, #0]
 80118d2:	68b9      	ldr	r1, [r7, #8]
 80118d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80118d6:	f000 faec 	bl	8011eb2 <prvCopyDataToQueue>
 80118da:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80118dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d010      	beq.n	8011906 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80118e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118e6:	3324      	adds	r3, #36	@ 0x24
 80118e8:	4618      	mov	r0, r3
 80118ea:	f001 f9f3 	bl	8012cd4 <xTaskRemoveFromEventList>
 80118ee:	4603      	mov	r3, r0
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d013      	beq.n	801191c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80118f4:	4b3f      	ldr	r3, [pc, #252]	@ (80119f4 <xQueueGenericSend+0x200>)
 80118f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80118fa:	601a      	str	r2, [r3, #0]
 80118fc:	f3bf 8f4f 	dsb	sy
 8011900:	f3bf 8f6f 	isb	sy
 8011904:	e00a      	b.n	801191c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011908:	2b00      	cmp	r3, #0
 801190a:	d007      	beq.n	801191c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801190c:	4b39      	ldr	r3, [pc, #228]	@ (80119f4 <xQueueGenericSend+0x200>)
 801190e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011912:	601a      	str	r2, [r3, #0]
 8011914:	f3bf 8f4f 	dsb	sy
 8011918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801191c:	f001 ff3e 	bl	801379c <vPortExitCritical>
				return pdPASS;
 8011920:	2301      	movs	r3, #1
 8011922:	e063      	b.n	80119ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d103      	bne.n	8011932 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801192a:	f001 ff37 	bl	801379c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801192e:	2300      	movs	r3, #0
 8011930:	e05c      	b.n	80119ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011934:	2b00      	cmp	r3, #0
 8011936:	d106      	bne.n	8011946 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011938:	f107 0314 	add.w	r3, r7, #20
 801193c:	4618      	mov	r0, r3
 801193e:	f001 fa2d 	bl	8012d9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011942:	2301      	movs	r3, #1
 8011944:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011946:	f001 ff29 	bl	801379c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801194a:	f000 ffc9 	bl	80128e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801194e:	f001 fef5 	bl	801373c <vPortEnterCritical>
 8011952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011958:	b25b      	sxtb	r3, r3
 801195a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801195e:	d103      	bne.n	8011968 <xQueueGenericSend+0x174>
 8011960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011962:	2200      	movs	r2, #0
 8011964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801196a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801196e:	b25b      	sxtb	r3, r3
 8011970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011974:	d103      	bne.n	801197e <xQueueGenericSend+0x18a>
 8011976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011978:	2200      	movs	r2, #0
 801197a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801197e:	f001 ff0d 	bl	801379c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011982:	1d3a      	adds	r2, r7, #4
 8011984:	f107 0314 	add.w	r3, r7, #20
 8011988:	4611      	mov	r1, r2
 801198a:	4618      	mov	r0, r3
 801198c:	f001 fa1c 	bl	8012dc8 <xTaskCheckForTimeOut>
 8011990:	4603      	mov	r3, r0
 8011992:	2b00      	cmp	r3, #0
 8011994:	d124      	bne.n	80119e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011996:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011998:	f000 fb83 	bl	80120a2 <prvIsQueueFull>
 801199c:	4603      	mov	r3, r0
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d018      	beq.n	80119d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80119a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119a4:	3310      	adds	r3, #16
 80119a6:	687a      	ldr	r2, [r7, #4]
 80119a8:	4611      	mov	r1, r2
 80119aa:	4618      	mov	r0, r3
 80119ac:	f001 f96c 	bl	8012c88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80119b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80119b2:	f000 fb0e 	bl	8011fd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80119b6:	f000 ffa1 	bl	80128fc <xTaskResumeAll>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b00      	cmp	r3, #0
 80119be:	f47f af7c 	bne.w	80118ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80119c2:	4b0c      	ldr	r3, [pc, #48]	@ (80119f4 <xQueueGenericSend+0x200>)
 80119c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80119c8:	601a      	str	r2, [r3, #0]
 80119ca:	f3bf 8f4f 	dsb	sy
 80119ce:	f3bf 8f6f 	isb	sy
 80119d2:	e772      	b.n	80118ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80119d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80119d6:	f000 fafc 	bl	8011fd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80119da:	f000 ff8f 	bl	80128fc <xTaskResumeAll>
 80119de:	e76c      	b.n	80118ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80119e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80119e2:	f000 faf6 	bl	8011fd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80119e6:	f000 ff89 	bl	80128fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80119ea:	2300      	movs	r3, #0
		}
	}
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3738      	adds	r7, #56	@ 0x38
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	e000ed04 	.word	0xe000ed04

080119f8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b08e      	sub	sp, #56	@ 0x38
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d10b      	bne.n	8011a24 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8011a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a10:	f383 8811 	msr	BASEPRI, r3
 8011a14:	f3bf 8f6f 	isb	sy
 8011a18:	f3bf 8f4f 	dsb	sy
 8011a1c:	623b      	str	r3, [r7, #32]
}
 8011a1e:	bf00      	nop
 8011a20:	bf00      	nop
 8011a22:	e7fd      	b.n	8011a20 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d00b      	beq.n	8011a44 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8011a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a30:	f383 8811 	msr	BASEPRI, r3
 8011a34:	f3bf 8f6f 	isb	sy
 8011a38:	f3bf 8f4f 	dsb	sy
 8011a3c:	61fb      	str	r3, [r7, #28]
}
 8011a3e:	bf00      	nop
 8011a40:	bf00      	nop
 8011a42:	e7fd      	b.n	8011a40 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8011a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d103      	bne.n	8011a54 <xQueueGiveFromISR+0x5c>
 8011a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d101      	bne.n	8011a58 <xQueueGiveFromISR+0x60>
 8011a54:	2301      	movs	r3, #1
 8011a56:	e000      	b.n	8011a5a <xQueueGiveFromISR+0x62>
 8011a58:	2300      	movs	r3, #0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d10b      	bne.n	8011a76 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8011a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a62:	f383 8811 	msr	BASEPRI, r3
 8011a66:	f3bf 8f6f 	isb	sy
 8011a6a:	f3bf 8f4f 	dsb	sy
 8011a6e:	61bb      	str	r3, [r7, #24]
}
 8011a70:	bf00      	nop
 8011a72:	bf00      	nop
 8011a74:	e7fd      	b.n	8011a72 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011a76:	f001 ff23 	bl	80138c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011a7a:	f3ef 8211 	mrs	r2, BASEPRI
 8011a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a82:	f383 8811 	msr	BASEPRI, r3
 8011a86:	f3bf 8f6f 	isb	sy
 8011a8a:	f3bf 8f4f 	dsb	sy
 8011a8e:	617a      	str	r2, [r7, #20]
 8011a90:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011a92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a9a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011aa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	d22b      	bcs.n	8011afe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011aac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ab2:	1c5a      	adds	r2, r3, #1
 8011ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ab6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011ab8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ac0:	d112      	bne.n	8011ae8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d016      	beq.n	8011af8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011acc:	3324      	adds	r3, #36	@ 0x24
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f001 f900 	bl	8012cd4 <xTaskRemoveFromEventList>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d00e      	beq.n	8011af8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d00b      	beq.n	8011af8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	2201      	movs	r2, #1
 8011ae4:	601a      	str	r2, [r3, #0]
 8011ae6:	e007      	b.n	8011af8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011aec:	3301      	adds	r3, #1
 8011aee:	b2db      	uxtb	r3, r3
 8011af0:	b25a      	sxtb	r2, r3
 8011af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011af8:	2301      	movs	r3, #1
 8011afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8011afc:	e001      	b.n	8011b02 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011afe:	2300      	movs	r3, #0
 8011b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b04:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011b0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3738      	adds	r7, #56	@ 0x38
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}

08011b18 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b08e      	sub	sp, #56	@ 0x38
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
 8011b20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011b22:	2300      	movs	r3, #0
 8011b24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d10b      	bne.n	8011b4c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8011b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b38:	f383 8811 	msr	BASEPRI, r3
 8011b3c:	f3bf 8f6f 	isb	sy
 8011b40:	f3bf 8f4f 	dsb	sy
 8011b44:	623b      	str	r3, [r7, #32]
}
 8011b46:	bf00      	nop
 8011b48:	bf00      	nop
 8011b4a:	e7fd      	b.n	8011b48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d00b      	beq.n	8011b6c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8011b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b58:	f383 8811 	msr	BASEPRI, r3
 8011b5c:	f3bf 8f6f 	isb	sy
 8011b60:	f3bf 8f4f 	dsb	sy
 8011b64:	61fb      	str	r3, [r7, #28]
}
 8011b66:	bf00      	nop
 8011b68:	bf00      	nop
 8011b6a:	e7fd      	b.n	8011b68 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b6c:	f001 faae 	bl	80130cc <xTaskGetSchedulerState>
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d102      	bne.n	8011b7c <xQueueSemaphoreTake+0x64>
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d101      	bne.n	8011b80 <xQueueSemaphoreTake+0x68>
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	e000      	b.n	8011b82 <xQueueSemaphoreTake+0x6a>
 8011b80:	2300      	movs	r3, #0
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d10b      	bne.n	8011b9e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8011b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b8a:	f383 8811 	msr	BASEPRI, r3
 8011b8e:	f3bf 8f6f 	isb	sy
 8011b92:	f3bf 8f4f 	dsb	sy
 8011b96:	61bb      	str	r3, [r7, #24]
}
 8011b98:	bf00      	nop
 8011b9a:	bf00      	nop
 8011b9c:	e7fd      	b.n	8011b9a <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b9e:	f001 fdcd 	bl	801373c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ba6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d024      	beq.n	8011bf8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bb0:	1e5a      	subs	r2, r3, #1
 8011bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bb4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d104      	bne.n	8011bc8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8011bbe:	f001 fc53 	bl	8013468 <pvTaskIncrementMutexHeldCount>
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bc6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bca:	691b      	ldr	r3, [r3, #16]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d00f      	beq.n	8011bf0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bd2:	3310      	adds	r3, #16
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f001 f87d 	bl	8012cd4 <xTaskRemoveFromEventList>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d007      	beq.n	8011bf0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011be0:	4b54      	ldr	r3, [pc, #336]	@ (8011d34 <xQueueSemaphoreTake+0x21c>)
 8011be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011be6:	601a      	str	r2, [r3, #0]
 8011be8:	f3bf 8f4f 	dsb	sy
 8011bec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011bf0:	f001 fdd4 	bl	801379c <vPortExitCritical>
				return pdPASS;
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	e098      	b.n	8011d2a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d112      	bne.n	8011c24 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d00b      	beq.n	8011c1c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8011c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c08:	f383 8811 	msr	BASEPRI, r3
 8011c0c:	f3bf 8f6f 	isb	sy
 8011c10:	f3bf 8f4f 	dsb	sy
 8011c14:	617b      	str	r3, [r7, #20]
}
 8011c16:	bf00      	nop
 8011c18:	bf00      	nop
 8011c1a:	e7fd      	b.n	8011c18 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011c1c:	f001 fdbe 	bl	801379c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011c20:	2300      	movs	r3, #0
 8011c22:	e082      	b.n	8011d2a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d106      	bne.n	8011c38 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011c2a:	f107 030c 	add.w	r3, r7, #12
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f001 f8b4 	bl	8012d9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011c34:	2301      	movs	r3, #1
 8011c36:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011c38:	f001 fdb0 	bl	801379c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011c3c:	f000 fe50 	bl	80128e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011c40:	f001 fd7c 	bl	801373c <vPortEnterCritical>
 8011c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011c4a:	b25b      	sxtb	r3, r3
 8011c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c50:	d103      	bne.n	8011c5a <xQueueSemaphoreTake+0x142>
 8011c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c54:	2200      	movs	r2, #0
 8011c56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011c60:	b25b      	sxtb	r3, r3
 8011c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c66:	d103      	bne.n	8011c70 <xQueueSemaphoreTake+0x158>
 8011c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011c70:	f001 fd94 	bl	801379c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011c74:	463a      	mov	r2, r7
 8011c76:	f107 030c 	add.w	r3, r7, #12
 8011c7a:	4611      	mov	r1, r2
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f001 f8a3 	bl	8012dc8 <xTaskCheckForTimeOut>
 8011c82:	4603      	mov	r3, r0
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d132      	bne.n	8011cee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011c88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011c8a:	f000 f9f4 	bl	8012076 <prvIsQueueEmpty>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d026      	beq.n	8011ce2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d109      	bne.n	8011cb0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8011c9c:	f001 fd4e 	bl	801373c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8011ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ca2:	685b      	ldr	r3, [r3, #4]
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f001 fa2f 	bl	8013108 <xTaskPriorityInherit>
 8011caa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8011cac:	f001 fd76 	bl	801379c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cb2:	3324      	adds	r3, #36	@ 0x24
 8011cb4:	683a      	ldr	r2, [r7, #0]
 8011cb6:	4611      	mov	r1, r2
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f000 ffe5 	bl	8012c88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011cbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011cc0:	f000 f987 	bl	8011fd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011cc4:	f000 fe1a 	bl	80128fc <xTaskResumeAll>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	f47f af67 	bne.w	8011b9e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8011cd0:	4b18      	ldr	r3, [pc, #96]	@ (8011d34 <xQueueSemaphoreTake+0x21c>)
 8011cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011cd6:	601a      	str	r2, [r3, #0]
 8011cd8:	f3bf 8f4f 	dsb	sy
 8011cdc:	f3bf 8f6f 	isb	sy
 8011ce0:	e75d      	b.n	8011b9e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011ce2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011ce4:	f000 f975 	bl	8011fd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ce8:	f000 fe08 	bl	80128fc <xTaskResumeAll>
 8011cec:	e757      	b.n	8011b9e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011cee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011cf0:	f000 f96f 	bl	8011fd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011cf4:	f000 fe02 	bl	80128fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011cf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011cfa:	f000 f9bc 	bl	8012076 <prvIsQueueEmpty>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	f43f af4c 	beq.w	8011b9e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d00d      	beq.n	8011d28 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8011d0c:	f001 fd16 	bl	801373c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011d10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011d12:	f000 f8b7 	bl	8011e84 <prvGetDisinheritPriorityAfterTimeout>
 8011d16:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8011d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d1a:	685b      	ldr	r3, [r3, #4]
 8011d1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f001 fb00 	bl	8013324 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011d24:	f001 fd3a 	bl	801379c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011d28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3738      	adds	r7, #56	@ 0x38
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}
 8011d32:	bf00      	nop
 8011d34:	e000ed04 	.word	0xe000ed04

08011d38 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b08e      	sub	sp, #56	@ 0x38
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	60f8      	str	r0, [r7, #12]
 8011d40:	60b9      	str	r1, [r7, #8]
 8011d42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d10b      	bne.n	8011d66 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8011d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d52:	f383 8811 	msr	BASEPRI, r3
 8011d56:	f3bf 8f6f 	isb	sy
 8011d5a:	f3bf 8f4f 	dsb	sy
 8011d5e:	623b      	str	r3, [r7, #32]
}
 8011d60:	bf00      	nop
 8011d62:	bf00      	nop
 8011d64:	e7fd      	b.n	8011d62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d103      	bne.n	8011d74 <xQueueReceiveFromISR+0x3c>
 8011d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d101      	bne.n	8011d78 <xQueueReceiveFromISR+0x40>
 8011d74:	2301      	movs	r3, #1
 8011d76:	e000      	b.n	8011d7a <xQueueReceiveFromISR+0x42>
 8011d78:	2300      	movs	r3, #0
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d10b      	bne.n	8011d96 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8011d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d82:	f383 8811 	msr	BASEPRI, r3
 8011d86:	f3bf 8f6f 	isb	sy
 8011d8a:	f3bf 8f4f 	dsb	sy
 8011d8e:	61fb      	str	r3, [r7, #28]
}
 8011d90:	bf00      	nop
 8011d92:	bf00      	nop
 8011d94:	e7fd      	b.n	8011d92 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d96:	f001 fd93 	bl	80138c0 <vPortValidateInterruptPriority>
	__asm volatile
 8011d9a:	f3ef 8211 	mrs	r2, BASEPRI
 8011d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011da2:	f383 8811 	msr	BASEPRI, r3
 8011da6:	f3bf 8f6f 	isb	sy
 8011daa:	f3bf 8f4f 	dsb	sy
 8011dae:	61ba      	str	r2, [r7, #24]
 8011db0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011db2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d02f      	beq.n	8011e22 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011dc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011dcc:	68b9      	ldr	r1, [r7, #8]
 8011dce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011dd0:	f000 f8d9 	bl	8011f86 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dd6:	1e5a      	subs	r2, r3, #1
 8011dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dda:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011ddc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011de4:	d112      	bne.n	8011e0c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011de8:	691b      	ldr	r3, [r3, #16]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d016      	beq.n	8011e1c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011df0:	3310      	adds	r3, #16
 8011df2:	4618      	mov	r0, r3
 8011df4:	f000 ff6e 	bl	8012cd4 <xTaskRemoveFromEventList>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d00e      	beq.n	8011e1c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d00b      	beq.n	8011e1c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2201      	movs	r2, #1
 8011e08:	601a      	str	r2, [r3, #0]
 8011e0a:	e007      	b.n	8011e1c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011e10:	3301      	adds	r3, #1
 8011e12:	b2db      	uxtb	r3, r3
 8011e14:	b25a      	sxtb	r2, r3
 8011e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e20:	e001      	b.n	8011e26 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8011e22:	2300      	movs	r3, #0
 8011e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	f383 8811 	msr	BASEPRI, r3
}
 8011e30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3738      	adds	r7, #56	@ 0x38
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}

08011e3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b084      	sub	sp, #16
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d10b      	bne.n	8011e66 <vQueueDelete+0x2a>
	__asm volatile
 8011e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e52:	f383 8811 	msr	BASEPRI, r3
 8011e56:	f3bf 8f6f 	isb	sy
 8011e5a:	f3bf 8f4f 	dsb	sy
 8011e5e:	60bb      	str	r3, [r7, #8]
}
 8011e60:	bf00      	nop
 8011e62:	bf00      	nop
 8011e64:	e7fd      	b.n	8011e62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011e66:	68f8      	ldr	r0, [r7, #12]
 8011e68:	f000 f934 	bl	80120d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d102      	bne.n	8011e7c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8011e76:	68f8      	ldr	r0, [r7, #12]
 8011e78:	f001 fe2a 	bl	8013ad0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011e7c:	bf00      	nop
 8011e7e:	3710      	adds	r7, #16
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}

08011e84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011e84:	b480      	push	{r7}
 8011e86:	b085      	sub	sp, #20
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d006      	beq.n	8011ea2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	f1c3 0307 	rsb	r3, r3, #7
 8011e9e:	60fb      	str	r3, [r7, #12]
 8011ea0:	e001      	b.n	8011ea6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011ea6:	68fb      	ldr	r3, [r7, #12]
	}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3714      	adds	r7, #20
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bc80      	pop	{r7}
 8011eb0:	4770      	bx	lr

08011eb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011eb2:	b580      	push	{r7, lr}
 8011eb4:	b086      	sub	sp, #24
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	60f8      	str	r0, [r7, #12]
 8011eba:	60b9      	str	r1, [r7, #8]
 8011ebc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ec6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d10d      	bne.n	8011eec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d14d      	bne.n	8011f74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	4618      	mov	r0, r3
 8011ede:	f001 f999 	bl	8013214 <xTaskPriorityDisinherit>
 8011ee2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	605a      	str	r2, [r3, #4]
 8011eea:	e043      	b.n	8011f74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d119      	bne.n	8011f26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	6898      	ldr	r0, [r3, #8]
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011efa:	461a      	mov	r2, r3
 8011efc:	68b9      	ldr	r1, [r7, #8]
 8011efe:	f002 f80b 	bl	8013f18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	689a      	ldr	r2, [r3, #8]
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f0a:	441a      	add	r2, r3
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	689a      	ldr	r2, [r3, #8]
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	685b      	ldr	r3, [r3, #4]
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d32b      	bcc.n	8011f74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	681a      	ldr	r2, [r3, #0]
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	609a      	str	r2, [r3, #8]
 8011f24:	e026      	b.n	8011f74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	68d8      	ldr	r0, [r3, #12]
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f2e:	461a      	mov	r2, r3
 8011f30:	68b9      	ldr	r1, [r7, #8]
 8011f32:	f001 fff1 	bl	8013f18 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	68da      	ldr	r2, [r3, #12]
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f3e:	425b      	negs	r3, r3
 8011f40:	441a      	add	r2, r3
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	68da      	ldr	r2, [r3, #12]
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d207      	bcs.n	8011f62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	685a      	ldr	r2, [r3, #4]
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f5a:	425b      	negs	r3, r3
 8011f5c:	441a      	add	r2, r3
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2b02      	cmp	r3, #2
 8011f66:	d105      	bne.n	8011f74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d002      	beq.n	8011f74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	3b01      	subs	r3, #1
 8011f72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	1c5a      	adds	r2, r3, #1
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8011f7c:	697b      	ldr	r3, [r7, #20]
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3718      	adds	r7, #24
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}

08011f86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011f86:	b580      	push	{r7, lr}
 8011f88:	b082      	sub	sp, #8
 8011f8a:	af00      	add	r7, sp, #0
 8011f8c:	6078      	str	r0, [r7, #4]
 8011f8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d018      	beq.n	8011fca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	68da      	ldr	r2, [r3, #12]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011fa0:	441a      	add	r2, r3
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	68da      	ldr	r2, [r3, #12]
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	d303      	bcc.n	8011fba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681a      	ldr	r2, [r3, #0]
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	68d9      	ldr	r1, [r3, #12]
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	6838      	ldr	r0, [r7, #0]
 8011fc6:	f001 ffa7 	bl	8013f18 <memcpy>
	}
}
 8011fca:	bf00      	nop
 8011fcc:	3708      	adds	r7, #8
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}

08011fd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011fd2:	b580      	push	{r7, lr}
 8011fd4:	b084      	sub	sp, #16
 8011fd6:	af00      	add	r7, sp, #0
 8011fd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011fda:	f001 fbaf 	bl	801373c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011fe4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011fe6:	e011      	b.n	801200c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d012      	beq.n	8012016 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	3324      	adds	r3, #36	@ 0x24
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f000 fe6d 	bl	8012cd4 <xTaskRemoveFromEventList>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d001      	beq.n	8012004 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012000:	f000 ff46 	bl	8012e90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012004:	7bfb      	ldrb	r3, [r7, #15]
 8012006:	3b01      	subs	r3, #1
 8012008:	b2db      	uxtb	r3, r3
 801200a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801200c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012010:	2b00      	cmp	r3, #0
 8012012:	dce9      	bgt.n	8011fe8 <prvUnlockQueue+0x16>
 8012014:	e000      	b.n	8012018 <prvUnlockQueue+0x46>
					break;
 8012016:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	22ff      	movs	r2, #255	@ 0xff
 801201c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8012020:	f001 fbbc 	bl	801379c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012024:	f001 fb8a 	bl	801373c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801202e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012030:	e011      	b.n	8012056 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	691b      	ldr	r3, [r3, #16]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d012      	beq.n	8012060 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	3310      	adds	r3, #16
 801203e:	4618      	mov	r0, r3
 8012040:	f000 fe48 	bl	8012cd4 <xTaskRemoveFromEventList>
 8012044:	4603      	mov	r3, r0
 8012046:	2b00      	cmp	r3, #0
 8012048:	d001      	beq.n	801204e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801204a:	f000 ff21 	bl	8012e90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801204e:	7bbb      	ldrb	r3, [r7, #14]
 8012050:	3b01      	subs	r3, #1
 8012052:	b2db      	uxtb	r3, r3
 8012054:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012056:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801205a:	2b00      	cmp	r3, #0
 801205c:	dce9      	bgt.n	8012032 <prvUnlockQueue+0x60>
 801205e:	e000      	b.n	8012062 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012060:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	22ff      	movs	r2, #255	@ 0xff
 8012066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801206a:	f001 fb97 	bl	801379c <vPortExitCritical>
}
 801206e:	bf00      	nop
 8012070:	3710      	adds	r7, #16
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}

08012076 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012076:	b580      	push	{r7, lr}
 8012078:	b084      	sub	sp, #16
 801207a:	af00      	add	r7, sp, #0
 801207c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801207e:	f001 fb5d 	bl	801373c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012086:	2b00      	cmp	r3, #0
 8012088:	d102      	bne.n	8012090 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801208a:	2301      	movs	r3, #1
 801208c:	60fb      	str	r3, [r7, #12]
 801208e:	e001      	b.n	8012094 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012090:	2300      	movs	r3, #0
 8012092:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012094:	f001 fb82 	bl	801379c <vPortExitCritical>

	return xReturn;
 8012098:	68fb      	ldr	r3, [r7, #12]
}
 801209a:	4618      	mov	r0, r3
 801209c:	3710      	adds	r7, #16
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}

080120a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80120a2:	b580      	push	{r7, lr}
 80120a4:	b084      	sub	sp, #16
 80120a6:	af00      	add	r7, sp, #0
 80120a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80120aa:	f001 fb47 	bl	801373c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d102      	bne.n	80120c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80120ba:	2301      	movs	r3, #1
 80120bc:	60fb      	str	r3, [r7, #12]
 80120be:	e001      	b.n	80120c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80120c0:	2300      	movs	r3, #0
 80120c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80120c4:	f001 fb6a 	bl	801379c <vPortExitCritical>

	return xReturn;
 80120c8:	68fb      	ldr	r3, [r7, #12]
}
 80120ca:	4618      	mov	r0, r3
 80120cc:	3710      	adds	r7, #16
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}
	...

080120d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80120d4:	b480      	push	{r7}
 80120d6:	b085      	sub	sp, #20
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80120dc:	2300      	movs	r3, #0
 80120de:	60fb      	str	r3, [r7, #12]
 80120e0:	e016      	b.n	8012110 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80120e2:	4a10      	ldr	r2, [pc, #64]	@ (8012124 <vQueueUnregisterQueue+0x50>)
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	00db      	lsls	r3, r3, #3
 80120e8:	4413      	add	r3, r2
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	687a      	ldr	r2, [r7, #4]
 80120ee:	429a      	cmp	r2, r3
 80120f0:	d10b      	bne.n	801210a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80120f2:	4a0c      	ldr	r2, [pc, #48]	@ (8012124 <vQueueUnregisterQueue+0x50>)
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	2100      	movs	r1, #0
 80120f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80120fc:	4a09      	ldr	r2, [pc, #36]	@ (8012124 <vQueueUnregisterQueue+0x50>)
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	00db      	lsls	r3, r3, #3
 8012102:	4413      	add	r3, r2
 8012104:	2200      	movs	r2, #0
 8012106:	605a      	str	r2, [r3, #4]
				break;
 8012108:	e006      	b.n	8012118 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	3301      	adds	r3, #1
 801210e:	60fb      	str	r3, [r7, #12]
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2b07      	cmp	r3, #7
 8012114:	d9e5      	bls.n	80120e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012116:	bf00      	nop
 8012118:	bf00      	nop
 801211a:	3714      	adds	r7, #20
 801211c:	46bd      	mov	sp, r7
 801211e:	bc80      	pop	{r7}
 8012120:	4770      	bx	lr
 8012122:	bf00      	nop
 8012124:	200012d0 	.word	0x200012d0

08012128 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012128:	b580      	push	{r7, lr}
 801212a:	b08e      	sub	sp, #56	@ 0x38
 801212c:	af04      	add	r7, sp, #16
 801212e:	60f8      	str	r0, [r7, #12]
 8012130:	60b9      	str	r1, [r7, #8]
 8012132:	607a      	str	r2, [r7, #4]
 8012134:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012138:	2b00      	cmp	r3, #0
 801213a:	d10b      	bne.n	8012154 <xTaskCreateStatic+0x2c>
	__asm volatile
 801213c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012140:	f383 8811 	msr	BASEPRI, r3
 8012144:	f3bf 8f6f 	isb	sy
 8012148:	f3bf 8f4f 	dsb	sy
 801214c:	623b      	str	r3, [r7, #32]
}
 801214e:	bf00      	nop
 8012150:	bf00      	nop
 8012152:	e7fd      	b.n	8012150 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012156:	2b00      	cmp	r3, #0
 8012158:	d10b      	bne.n	8012172 <xTaskCreateStatic+0x4a>
	__asm volatile
 801215a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801215e:	f383 8811 	msr	BASEPRI, r3
 8012162:	f3bf 8f6f 	isb	sy
 8012166:	f3bf 8f4f 	dsb	sy
 801216a:	61fb      	str	r3, [r7, #28]
}
 801216c:	bf00      	nop
 801216e:	bf00      	nop
 8012170:	e7fd      	b.n	801216e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012172:	2354      	movs	r3, #84	@ 0x54
 8012174:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	2b54      	cmp	r3, #84	@ 0x54
 801217a:	d00b      	beq.n	8012194 <xTaskCreateStatic+0x6c>
	__asm volatile
 801217c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012180:	f383 8811 	msr	BASEPRI, r3
 8012184:	f3bf 8f6f 	isb	sy
 8012188:	f3bf 8f4f 	dsb	sy
 801218c:	61bb      	str	r3, [r7, #24]
}
 801218e:	bf00      	nop
 8012190:	bf00      	nop
 8012192:	e7fd      	b.n	8012190 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012196:	2b00      	cmp	r3, #0
 8012198:	d01e      	beq.n	80121d8 <xTaskCreateStatic+0xb0>
 801219a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801219c:	2b00      	cmp	r3, #0
 801219e:	d01b      	beq.n	80121d8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80121a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121a2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80121a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80121a8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80121aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ac:	2202      	movs	r2, #2
 80121ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80121b2:	2300      	movs	r3, #0
 80121b4:	9303      	str	r3, [sp, #12]
 80121b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b8:	9302      	str	r3, [sp, #8]
 80121ba:	f107 0314 	add.w	r3, r7, #20
 80121be:	9301      	str	r3, [sp, #4]
 80121c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121c2:	9300      	str	r3, [sp, #0]
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	687a      	ldr	r2, [r7, #4]
 80121c8:	68b9      	ldr	r1, [r7, #8]
 80121ca:	68f8      	ldr	r0, [r7, #12]
 80121cc:	f000 f850 	bl	8012270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80121d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80121d2:	f000 f8d5 	bl	8012380 <prvAddNewTaskToReadyList>
 80121d6:	e001      	b.n	80121dc <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80121d8:	2300      	movs	r3, #0
 80121da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80121dc:	697b      	ldr	r3, [r7, #20]
	}
 80121de:	4618      	mov	r0, r3
 80121e0:	3728      	adds	r7, #40	@ 0x28
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}

080121e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80121e6:	b580      	push	{r7, lr}
 80121e8:	b08c      	sub	sp, #48	@ 0x30
 80121ea:	af04      	add	r7, sp, #16
 80121ec:	60f8      	str	r0, [r7, #12]
 80121ee:	60b9      	str	r1, [r7, #8]
 80121f0:	603b      	str	r3, [r7, #0]
 80121f2:	4613      	mov	r3, r2
 80121f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121f6:	88fb      	ldrh	r3, [r7, #6]
 80121f8:	009b      	lsls	r3, r3, #2
 80121fa:	4618      	mov	r0, r3
 80121fc:	f001 fba0 	bl	8013940 <pvPortMalloc>
 8012200:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d00e      	beq.n	8012226 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8012208:	2054      	movs	r0, #84	@ 0x54
 801220a:	f001 fb99 	bl	8013940 <pvPortMalloc>
 801220e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012210:	69fb      	ldr	r3, [r7, #28]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d003      	beq.n	801221e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012216:	69fb      	ldr	r3, [r7, #28]
 8012218:	697a      	ldr	r2, [r7, #20]
 801221a:	631a      	str	r2, [r3, #48]	@ 0x30
 801221c:	e005      	b.n	801222a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801221e:	6978      	ldr	r0, [r7, #20]
 8012220:	f001 fc56 	bl	8013ad0 <vPortFree>
 8012224:	e001      	b.n	801222a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012226:	2300      	movs	r3, #0
 8012228:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801222a:	69fb      	ldr	r3, [r7, #28]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d017      	beq.n	8012260 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012230:	69fb      	ldr	r3, [r7, #28]
 8012232:	2200      	movs	r2, #0
 8012234:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012238:	88fa      	ldrh	r2, [r7, #6]
 801223a:	2300      	movs	r3, #0
 801223c:	9303      	str	r3, [sp, #12]
 801223e:	69fb      	ldr	r3, [r7, #28]
 8012240:	9302      	str	r3, [sp, #8]
 8012242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012244:	9301      	str	r3, [sp, #4]
 8012246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012248:	9300      	str	r3, [sp, #0]
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	68b9      	ldr	r1, [r7, #8]
 801224e:	68f8      	ldr	r0, [r7, #12]
 8012250:	f000 f80e 	bl	8012270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012254:	69f8      	ldr	r0, [r7, #28]
 8012256:	f000 f893 	bl	8012380 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801225a:	2301      	movs	r3, #1
 801225c:	61bb      	str	r3, [r7, #24]
 801225e:	e002      	b.n	8012266 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012260:	f04f 33ff 	mov.w	r3, #4294967295
 8012264:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012266:	69bb      	ldr	r3, [r7, #24]
	}
 8012268:	4618      	mov	r0, r3
 801226a:	3720      	adds	r7, #32
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}

08012270 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b088      	sub	sp, #32
 8012274:	af00      	add	r7, sp, #0
 8012276:	60f8      	str	r0, [r7, #12]
 8012278:	60b9      	str	r1, [r7, #8]
 801227a:	607a      	str	r2, [r7, #4]
 801227c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801227e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012280:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	009b      	lsls	r3, r3, #2
 8012286:	461a      	mov	r2, r3
 8012288:	21a5      	movs	r1, #165	@ 0xa5
 801228a:	f001 fe01 	bl	8013e90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801228e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012298:	3b01      	subs	r3, #1
 801229a:	009b      	lsls	r3, r3, #2
 801229c:	4413      	add	r3, r2
 801229e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80122a0:	69bb      	ldr	r3, [r7, #24]
 80122a2:	f023 0307 	bic.w	r3, r3, #7
 80122a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80122a8:	69bb      	ldr	r3, [r7, #24]
 80122aa:	f003 0307 	and.w	r3, r3, #7
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d00b      	beq.n	80122ca <prvInitialiseNewTask+0x5a>
	__asm volatile
 80122b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122b6:	f383 8811 	msr	BASEPRI, r3
 80122ba:	f3bf 8f6f 	isb	sy
 80122be:	f3bf 8f4f 	dsb	sy
 80122c2:	617b      	str	r3, [r7, #20]
}
 80122c4:	bf00      	nop
 80122c6:	bf00      	nop
 80122c8:	e7fd      	b.n	80122c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80122ca:	2300      	movs	r3, #0
 80122cc:	61fb      	str	r3, [r7, #28]
 80122ce:	e012      	b.n	80122f6 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80122d0:	68ba      	ldr	r2, [r7, #8]
 80122d2:	69fb      	ldr	r3, [r7, #28]
 80122d4:	4413      	add	r3, r2
 80122d6:	7819      	ldrb	r1, [r3, #0]
 80122d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122da:	69fb      	ldr	r3, [r7, #28]
 80122dc:	4413      	add	r3, r2
 80122de:	3334      	adds	r3, #52	@ 0x34
 80122e0:	460a      	mov	r2, r1
 80122e2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80122e4:	68ba      	ldr	r2, [r7, #8]
 80122e6:	69fb      	ldr	r3, [r7, #28]
 80122e8:	4413      	add	r3, r2
 80122ea:	781b      	ldrb	r3, [r3, #0]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d006      	beq.n	80122fe <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80122f0:	69fb      	ldr	r3, [r7, #28]
 80122f2:	3301      	adds	r3, #1
 80122f4:	61fb      	str	r3, [r7, #28]
 80122f6:	69fb      	ldr	r3, [r7, #28]
 80122f8:	2b0f      	cmp	r3, #15
 80122fa:	d9e9      	bls.n	80122d0 <prvInitialiseNewTask+0x60>
 80122fc:	e000      	b.n	8012300 <prvInitialiseNewTask+0x90>
		{
			break;
 80122fe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012302:	2200      	movs	r2, #0
 8012304:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801230a:	2b06      	cmp	r3, #6
 801230c:	d901      	bls.n	8012312 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801230e:	2306      	movs	r3, #6
 8012310:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012314:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012316:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801231a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801231c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801231e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012320:	2200      	movs	r2, #0
 8012322:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012326:	3304      	adds	r3, #4
 8012328:	4618      	mov	r0, r3
 801232a:	f7ff f88f 	bl	801144c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801232e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012330:	3318      	adds	r3, #24
 8012332:	4618      	mov	r0, r3
 8012334:	f7ff f88a 	bl	801144c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801233a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801233c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801233e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012340:	f1c3 0207 	rsb	r2, r3, #7
 8012344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012346:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801234a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801234c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801234e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012350:	2200      	movs	r2, #0
 8012352:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012356:	2200      	movs	r2, #0
 8012358:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801235c:	683a      	ldr	r2, [r7, #0]
 801235e:	68f9      	ldr	r1, [r7, #12]
 8012360:	69b8      	ldr	r0, [r7, #24]
 8012362:	f001 f8fb 	bl	801355c <pxPortInitialiseStack>
 8012366:	4602      	mov	r2, r0
 8012368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801236a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 801236c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801236e:	2b00      	cmp	r3, #0
 8012370:	d002      	beq.n	8012378 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012376:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012378:	bf00      	nop
 801237a:	3720      	adds	r7, #32
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}

08012380 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b082      	sub	sp, #8
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012388:	f001 f9d8 	bl	801373c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801238c:	4b2a      	ldr	r3, [pc, #168]	@ (8012438 <prvAddNewTaskToReadyList+0xb8>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	3301      	adds	r3, #1
 8012392:	4a29      	ldr	r2, [pc, #164]	@ (8012438 <prvAddNewTaskToReadyList+0xb8>)
 8012394:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012396:	4b29      	ldr	r3, [pc, #164]	@ (801243c <prvAddNewTaskToReadyList+0xbc>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d109      	bne.n	80123b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801239e:	4a27      	ldr	r2, [pc, #156]	@ (801243c <prvAddNewTaskToReadyList+0xbc>)
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80123a4:	4b24      	ldr	r3, [pc, #144]	@ (8012438 <prvAddNewTaskToReadyList+0xb8>)
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d110      	bne.n	80123ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80123ac:	f000 fd94 	bl	8012ed8 <prvInitialiseTaskLists>
 80123b0:	e00d      	b.n	80123ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80123b2:	4b23      	ldr	r3, [pc, #140]	@ (8012440 <prvAddNewTaskToReadyList+0xc0>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d109      	bne.n	80123ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80123ba:	4b20      	ldr	r3, [pc, #128]	@ (801243c <prvAddNewTaskToReadyList+0xbc>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123c4:	429a      	cmp	r2, r3
 80123c6:	d802      	bhi.n	80123ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80123c8:	4a1c      	ldr	r2, [pc, #112]	@ (801243c <prvAddNewTaskToReadyList+0xbc>)
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80123ce:	4b1d      	ldr	r3, [pc, #116]	@ (8012444 <prvAddNewTaskToReadyList+0xc4>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	3301      	adds	r3, #1
 80123d4:	4a1b      	ldr	r2, [pc, #108]	@ (8012444 <prvAddNewTaskToReadyList+0xc4>)
 80123d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123dc:	2201      	movs	r2, #1
 80123de:	409a      	lsls	r2, r3
 80123e0:	4b19      	ldr	r3, [pc, #100]	@ (8012448 <prvAddNewTaskToReadyList+0xc8>)
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	4313      	orrs	r3, r2
 80123e6:	4a18      	ldr	r2, [pc, #96]	@ (8012448 <prvAddNewTaskToReadyList+0xc8>)
 80123e8:	6013      	str	r3, [r2, #0]
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123ee:	4613      	mov	r3, r2
 80123f0:	009b      	lsls	r3, r3, #2
 80123f2:	4413      	add	r3, r2
 80123f4:	009b      	lsls	r3, r3, #2
 80123f6:	4a15      	ldr	r2, [pc, #84]	@ (801244c <prvAddNewTaskToReadyList+0xcc>)
 80123f8:	441a      	add	r2, r3
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	3304      	adds	r3, #4
 80123fe:	4619      	mov	r1, r3
 8012400:	4610      	mov	r0, r2
 8012402:	f7ff f82f 	bl	8011464 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012406:	f001 f9c9 	bl	801379c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801240a:	4b0d      	ldr	r3, [pc, #52]	@ (8012440 <prvAddNewTaskToReadyList+0xc0>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d00e      	beq.n	8012430 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012412:	4b0a      	ldr	r3, [pc, #40]	@ (801243c <prvAddNewTaskToReadyList+0xbc>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801241c:	429a      	cmp	r2, r3
 801241e:	d207      	bcs.n	8012430 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012420:	4b0b      	ldr	r3, [pc, #44]	@ (8012450 <prvAddNewTaskToReadyList+0xd0>)
 8012422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012426:	601a      	str	r2, [r3, #0]
 8012428:	f3bf 8f4f 	dsb	sy
 801242c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012430:	bf00      	nop
 8012432:	3708      	adds	r7, #8
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}
 8012438:	20001410 	.word	0x20001410
 801243c:	20001310 	.word	0x20001310
 8012440:	2000141c 	.word	0x2000141c
 8012444:	2000142c 	.word	0x2000142c
 8012448:	20001418 	.word	0x20001418
 801244c:	20001314 	.word	0x20001314
 8012450:	e000ed04 	.word	0xe000ed04

08012454 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8012454:	b580      	push	{r7, lr}
 8012456:	b08a      	sub	sp, #40	@ 0x28
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
 801245c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801245e:	2300      	movs	r3, #0
 8012460:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d10b      	bne.n	8012480 <vTaskDelayUntil+0x2c>
	__asm volatile
 8012468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801246c:	f383 8811 	msr	BASEPRI, r3
 8012470:	f3bf 8f6f 	isb	sy
 8012474:	f3bf 8f4f 	dsb	sy
 8012478:	617b      	str	r3, [r7, #20]
}
 801247a:	bf00      	nop
 801247c:	bf00      	nop
 801247e:	e7fd      	b.n	801247c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d10b      	bne.n	801249e <vTaskDelayUntil+0x4a>
	__asm volatile
 8012486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801248a:	f383 8811 	msr	BASEPRI, r3
 801248e:	f3bf 8f6f 	isb	sy
 8012492:	f3bf 8f4f 	dsb	sy
 8012496:	613b      	str	r3, [r7, #16]
}
 8012498:	bf00      	nop
 801249a:	bf00      	nop
 801249c:	e7fd      	b.n	801249a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 801249e:	4b2a      	ldr	r3, [pc, #168]	@ (8012548 <vTaskDelayUntil+0xf4>)
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d00b      	beq.n	80124be <vTaskDelayUntil+0x6a>
	__asm volatile
 80124a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124aa:	f383 8811 	msr	BASEPRI, r3
 80124ae:	f3bf 8f6f 	isb	sy
 80124b2:	f3bf 8f4f 	dsb	sy
 80124b6:	60fb      	str	r3, [r7, #12]
}
 80124b8:	bf00      	nop
 80124ba:	bf00      	nop
 80124bc:	e7fd      	b.n	80124ba <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80124be:	f000 fa0f 	bl	80128e0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80124c2:	4b22      	ldr	r3, [pc, #136]	@ (801254c <vTaskDelayUntil+0xf8>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	683a      	ldr	r2, [r7, #0]
 80124ce:	4413      	add	r3, r2
 80124d0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	6a3a      	ldr	r2, [r7, #32]
 80124d8:	429a      	cmp	r2, r3
 80124da:	d20b      	bcs.n	80124f4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	69fa      	ldr	r2, [r7, #28]
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d211      	bcs.n	801250a <vTaskDelayUntil+0xb6>
 80124e6:	69fa      	ldr	r2, [r7, #28]
 80124e8:	6a3b      	ldr	r3, [r7, #32]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d90d      	bls.n	801250a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80124ee:	2301      	movs	r3, #1
 80124f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80124f2:	e00a      	b.n	801250a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	69fa      	ldr	r2, [r7, #28]
 80124fa:	429a      	cmp	r2, r3
 80124fc:	d303      	bcc.n	8012506 <vTaskDelayUntil+0xb2>
 80124fe:	69fa      	ldr	r2, [r7, #28]
 8012500:	6a3b      	ldr	r3, [r7, #32]
 8012502:	429a      	cmp	r2, r3
 8012504:	d901      	bls.n	801250a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8012506:	2301      	movs	r3, #1
 8012508:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	69fa      	ldr	r2, [r7, #28]
 801250e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8012510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012512:	2b00      	cmp	r3, #0
 8012514:	d006      	beq.n	8012524 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8012516:	69fa      	ldr	r2, [r7, #28]
 8012518:	6a3b      	ldr	r3, [r7, #32]
 801251a:	1ad3      	subs	r3, r2, r3
 801251c:	2100      	movs	r1, #0
 801251e:	4618      	mov	r0, r3
 8012520:	f000 ffb6 	bl	8013490 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8012524:	f000 f9ea 	bl	80128fc <xTaskResumeAll>
 8012528:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801252a:	69bb      	ldr	r3, [r7, #24]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d107      	bne.n	8012540 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8012530:	4b07      	ldr	r3, [pc, #28]	@ (8012550 <vTaskDelayUntil+0xfc>)
 8012532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012536:	601a      	str	r2, [r3, #0]
 8012538:	f3bf 8f4f 	dsb	sy
 801253c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012540:	bf00      	nop
 8012542:	3728      	adds	r7, #40	@ 0x28
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}
 8012548:	20001438 	.word	0x20001438
 801254c:	20001414 	.word	0x20001414
 8012550:	e000ed04 	.word	0xe000ed04

08012554 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012554:	b580      	push	{r7, lr}
 8012556:	b084      	sub	sp, #16
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801255c:	2300      	movs	r3, #0
 801255e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d018      	beq.n	8012598 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012566:	4b14      	ldr	r3, [pc, #80]	@ (80125b8 <vTaskDelay+0x64>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d00b      	beq.n	8012586 <vTaskDelay+0x32>
	__asm volatile
 801256e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012572:	f383 8811 	msr	BASEPRI, r3
 8012576:	f3bf 8f6f 	isb	sy
 801257a:	f3bf 8f4f 	dsb	sy
 801257e:	60bb      	str	r3, [r7, #8]
}
 8012580:	bf00      	nop
 8012582:	bf00      	nop
 8012584:	e7fd      	b.n	8012582 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012586:	f000 f9ab 	bl	80128e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801258a:	2100      	movs	r1, #0
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f000 ff7f 	bl	8013490 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012592:	f000 f9b3 	bl	80128fc <xTaskResumeAll>
 8012596:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d107      	bne.n	80125ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801259e:	4b07      	ldr	r3, [pc, #28]	@ (80125bc <vTaskDelay+0x68>)
 80125a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80125a4:	601a      	str	r2, [r3, #0]
 80125a6:	f3bf 8f4f 	dsb	sy
 80125aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80125ae:	bf00      	nop
 80125b0:	3710      	adds	r7, #16
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	bf00      	nop
 80125b8:	20001438 	.word	0x20001438
 80125bc:	e000ed04 	.word	0xe000ed04

080125c0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b084      	sub	sp, #16
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80125c8:	f001 f8b8 	bl	801373c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d102      	bne.n	80125d8 <vTaskSuspend+0x18>
 80125d2:	4b3d      	ldr	r3, [pc, #244]	@ (80126c8 <vTaskSuspend+0x108>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	e000      	b.n	80125da <vTaskSuspend+0x1a>
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	3304      	adds	r3, #4
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7fe ff9a 	bl	801151a <uxListRemove>
 80125e6:	4603      	mov	r3, r0
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d115      	bne.n	8012618 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125f0:	4936      	ldr	r1, [pc, #216]	@ (80126cc <vTaskSuspend+0x10c>)
 80125f2:	4613      	mov	r3, r2
 80125f4:	009b      	lsls	r3, r3, #2
 80125f6:	4413      	add	r3, r2
 80125f8:	009b      	lsls	r3, r3, #2
 80125fa:	440b      	add	r3, r1
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d10a      	bne.n	8012618 <vTaskSuspend+0x58>
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012606:	2201      	movs	r2, #1
 8012608:	fa02 f303 	lsl.w	r3, r2, r3
 801260c:	43da      	mvns	r2, r3
 801260e:	4b30      	ldr	r3, [pc, #192]	@ (80126d0 <vTaskSuspend+0x110>)
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	4013      	ands	r3, r2
 8012614:	4a2e      	ldr	r2, [pc, #184]	@ (80126d0 <vTaskSuspend+0x110>)
 8012616:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801261c:	2b00      	cmp	r3, #0
 801261e:	d004      	beq.n	801262a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	3318      	adds	r3, #24
 8012624:	4618      	mov	r0, r3
 8012626:	f7fe ff78 	bl	801151a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	3304      	adds	r3, #4
 801262e:	4619      	mov	r1, r3
 8012630:	4828      	ldr	r0, [pc, #160]	@ (80126d4 <vTaskSuspend+0x114>)
 8012632:	f7fe ff17 	bl	8011464 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801263c:	b2db      	uxtb	r3, r3
 801263e:	2b01      	cmp	r3, #1
 8012640:	d103      	bne.n	801264a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	2200      	movs	r2, #0
 8012646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801264a:	f001 f8a7 	bl	801379c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801264e:	4b22      	ldr	r3, [pc, #136]	@ (80126d8 <vTaskSuspend+0x118>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d005      	beq.n	8012662 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8012656:	f001 f871 	bl	801373c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801265a:	f000 fd13 	bl	8013084 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801265e:	f001 f89d 	bl	801379c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8012662:	4b19      	ldr	r3, [pc, #100]	@ (80126c8 <vTaskSuspend+0x108>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	68fa      	ldr	r2, [r7, #12]
 8012668:	429a      	cmp	r2, r3
 801266a:	d128      	bne.n	80126be <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 801266c:	4b1a      	ldr	r3, [pc, #104]	@ (80126d8 <vTaskSuspend+0x118>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d018      	beq.n	80126a6 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8012674:	4b19      	ldr	r3, [pc, #100]	@ (80126dc <vTaskSuspend+0x11c>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d00b      	beq.n	8012694 <vTaskSuspend+0xd4>
	__asm volatile
 801267c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012680:	f383 8811 	msr	BASEPRI, r3
 8012684:	f3bf 8f6f 	isb	sy
 8012688:	f3bf 8f4f 	dsb	sy
 801268c:	60bb      	str	r3, [r7, #8]
}
 801268e:	bf00      	nop
 8012690:	bf00      	nop
 8012692:	e7fd      	b.n	8012690 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8012694:	4b12      	ldr	r3, [pc, #72]	@ (80126e0 <vTaskSuspend+0x120>)
 8012696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801269a:	601a      	str	r2, [r3, #0]
 801269c:	f3bf 8f4f 	dsb	sy
 80126a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80126a4:	e00b      	b.n	80126be <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80126a6:	4b0b      	ldr	r3, [pc, #44]	@ (80126d4 <vTaskSuspend+0x114>)
 80126a8:	681a      	ldr	r2, [r3, #0]
 80126aa:	4b0e      	ldr	r3, [pc, #56]	@ (80126e4 <vTaskSuspend+0x124>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d103      	bne.n	80126ba <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 80126b2:	4b05      	ldr	r3, [pc, #20]	@ (80126c8 <vTaskSuspend+0x108>)
 80126b4:	2200      	movs	r2, #0
 80126b6:	601a      	str	r2, [r3, #0]
	}
 80126b8:	e001      	b.n	80126be <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 80126ba:	f000 fa89 	bl	8012bd0 <vTaskSwitchContext>
	}
 80126be:	bf00      	nop
 80126c0:	3710      	adds	r7, #16
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
 80126c6:	bf00      	nop
 80126c8:	20001310 	.word	0x20001310
 80126cc:	20001314 	.word	0x20001314
 80126d0:	20001418 	.word	0x20001418
 80126d4:	200013fc 	.word	0x200013fc
 80126d8:	2000141c 	.word	0x2000141c
 80126dc:	20001438 	.word	0x20001438
 80126e0:	e000ed04 	.word	0xe000ed04
 80126e4:	20001410 	.word	0x20001410

080126e8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80126e8:	b480      	push	{r7}
 80126ea:	b087      	sub	sp, #28
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80126f0:	2300      	movs	r3, #0
 80126f2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d10b      	bne.n	8012716 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 80126fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012702:	f383 8811 	msr	BASEPRI, r3
 8012706:	f3bf 8f6f 	isb	sy
 801270a:	f3bf 8f4f 	dsb	sy
 801270e:	60fb      	str	r3, [r7, #12]
}
 8012710:	bf00      	nop
 8012712:	bf00      	nop
 8012714:	e7fd      	b.n	8012712 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012716:	693b      	ldr	r3, [r7, #16]
 8012718:	695b      	ldr	r3, [r3, #20]
 801271a:	4a0f      	ldr	r2, [pc, #60]	@ (8012758 <prvTaskIsTaskSuspended+0x70>)
 801271c:	4293      	cmp	r3, r2
 801271e:	d101      	bne.n	8012724 <prvTaskIsTaskSuspended+0x3c>
 8012720:	2301      	movs	r3, #1
 8012722:	e000      	b.n	8012726 <prvTaskIsTaskSuspended+0x3e>
 8012724:	2300      	movs	r3, #0
 8012726:	2b00      	cmp	r3, #0
 8012728:	d00f      	beq.n	801274a <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801272e:	4a0b      	ldr	r2, [pc, #44]	@ (801275c <prvTaskIsTaskSuspended+0x74>)
 8012730:	4293      	cmp	r3, r2
 8012732:	d00a      	beq.n	801274a <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012738:	2b00      	cmp	r3, #0
 801273a:	d101      	bne.n	8012740 <prvTaskIsTaskSuspended+0x58>
 801273c:	2301      	movs	r3, #1
 801273e:	e000      	b.n	8012742 <prvTaskIsTaskSuspended+0x5a>
 8012740:	2300      	movs	r3, #0
 8012742:	2b00      	cmp	r3, #0
 8012744:	d001      	beq.n	801274a <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 8012746:	2301      	movs	r3, #1
 8012748:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801274a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801274c:	4618      	mov	r0, r3
 801274e:	371c      	adds	r7, #28
 8012750:	46bd      	mov	sp, r7
 8012752:	bc80      	pop	{r7}
 8012754:	4770      	bx	lr
 8012756:	bf00      	nop
 8012758:	200013fc 	.word	0x200013fc
 801275c:	200013d0 	.word	0x200013d0

08012760 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8012760:	b580      	push	{r7, lr}
 8012762:	b084      	sub	sp, #16
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d10b      	bne.n	801278a <vTaskResume+0x2a>
	__asm volatile
 8012772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012776:	f383 8811 	msr	BASEPRI, r3
 801277a:	f3bf 8f6f 	isb	sy
 801277e:	f3bf 8f4f 	dsb	sy
 8012782:	60bb      	str	r3, [r7, #8]
}
 8012784:	bf00      	nop
 8012786:	bf00      	nop
 8012788:	e7fd      	b.n	8012786 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d039      	beq.n	8012804 <vTaskResume+0xa4>
 8012790:	4b1e      	ldr	r3, [pc, #120]	@ (801280c <vTaskResume+0xac>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	68fa      	ldr	r2, [r7, #12]
 8012796:	429a      	cmp	r2, r3
 8012798:	d034      	beq.n	8012804 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 801279a:	f000 ffcf 	bl	801373c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801279e:	68f8      	ldr	r0, [r7, #12]
 80127a0:	f7ff ffa2 	bl	80126e8 <prvTaskIsTaskSuspended>
 80127a4:	4603      	mov	r3, r0
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d02a      	beq.n	8012800 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	3304      	adds	r3, #4
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7fe feb3 	bl	801151a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127b8:	2201      	movs	r2, #1
 80127ba:	409a      	lsls	r2, r3
 80127bc:	4b14      	ldr	r3, [pc, #80]	@ (8012810 <vTaskResume+0xb0>)
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	4313      	orrs	r3, r2
 80127c2:	4a13      	ldr	r2, [pc, #76]	@ (8012810 <vTaskResume+0xb0>)
 80127c4:	6013      	str	r3, [r2, #0]
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127ca:	4613      	mov	r3, r2
 80127cc:	009b      	lsls	r3, r3, #2
 80127ce:	4413      	add	r3, r2
 80127d0:	009b      	lsls	r3, r3, #2
 80127d2:	4a10      	ldr	r2, [pc, #64]	@ (8012814 <vTaskResume+0xb4>)
 80127d4:	441a      	add	r2, r3
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	3304      	adds	r3, #4
 80127da:	4619      	mov	r1, r3
 80127dc:	4610      	mov	r0, r2
 80127de:	f7fe fe41 	bl	8011464 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127e6:	4b09      	ldr	r3, [pc, #36]	@ (801280c <vTaskResume+0xac>)
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127ec:	429a      	cmp	r2, r3
 80127ee:	d307      	bcc.n	8012800 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80127f0:	4b09      	ldr	r3, [pc, #36]	@ (8012818 <vTaskResume+0xb8>)
 80127f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80127f6:	601a      	str	r2, [r3, #0]
 80127f8:	f3bf 8f4f 	dsb	sy
 80127fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8012800:	f000 ffcc 	bl	801379c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012804:	bf00      	nop
 8012806:	3710      	adds	r7, #16
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}
 801280c:	20001310 	.word	0x20001310
 8012810:	20001418 	.word	0x20001418
 8012814:	20001314 	.word	0x20001314
 8012818:	e000ed04 	.word	0xe000ed04

0801281c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b08a      	sub	sp, #40	@ 0x28
 8012820:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012822:	2300      	movs	r3, #0
 8012824:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012826:	2300      	movs	r3, #0
 8012828:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801282a:	463a      	mov	r2, r7
 801282c:	1d39      	adds	r1, r7, #4
 801282e:	f107 0308 	add.w	r3, r7, #8
 8012832:	4618      	mov	r0, r3
 8012834:	f7f1 fa92 	bl	8003d5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012838:	6839      	ldr	r1, [r7, #0]
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	68ba      	ldr	r2, [r7, #8]
 801283e:	9202      	str	r2, [sp, #8]
 8012840:	9301      	str	r3, [sp, #4]
 8012842:	2300      	movs	r3, #0
 8012844:	9300      	str	r3, [sp, #0]
 8012846:	2300      	movs	r3, #0
 8012848:	460a      	mov	r2, r1
 801284a:	491f      	ldr	r1, [pc, #124]	@ (80128c8 <vTaskStartScheduler+0xac>)
 801284c:	481f      	ldr	r0, [pc, #124]	@ (80128cc <vTaskStartScheduler+0xb0>)
 801284e:	f7ff fc6b 	bl	8012128 <xTaskCreateStatic>
 8012852:	4603      	mov	r3, r0
 8012854:	4a1e      	ldr	r2, [pc, #120]	@ (80128d0 <vTaskStartScheduler+0xb4>)
 8012856:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012858:	4b1d      	ldr	r3, [pc, #116]	@ (80128d0 <vTaskStartScheduler+0xb4>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d002      	beq.n	8012866 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012860:	2301      	movs	r3, #1
 8012862:	617b      	str	r3, [r7, #20]
 8012864:	e001      	b.n	801286a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012866:	2300      	movs	r3, #0
 8012868:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	2b01      	cmp	r3, #1
 801286e:	d116      	bne.n	801289e <vTaskStartScheduler+0x82>
	__asm volatile
 8012870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012874:	f383 8811 	msr	BASEPRI, r3
 8012878:	f3bf 8f6f 	isb	sy
 801287c:	f3bf 8f4f 	dsb	sy
 8012880:	613b      	str	r3, [r7, #16]
}
 8012882:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012884:	4b13      	ldr	r3, [pc, #76]	@ (80128d4 <vTaskStartScheduler+0xb8>)
 8012886:	f04f 32ff 	mov.w	r2, #4294967295
 801288a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801288c:	4b12      	ldr	r3, [pc, #72]	@ (80128d8 <vTaskStartScheduler+0xbc>)
 801288e:	2201      	movs	r2, #1
 8012890:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8012892:	4b12      	ldr	r3, [pc, #72]	@ (80128dc <vTaskStartScheduler+0xc0>)
 8012894:	2200      	movs	r2, #0
 8012896:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012898:	f000 fede 	bl	8013658 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801289c:	e00f      	b.n	80128be <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801289e:	697b      	ldr	r3, [r7, #20]
 80128a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128a4:	d10b      	bne.n	80128be <vTaskStartScheduler+0xa2>
	__asm volatile
 80128a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128aa:	f383 8811 	msr	BASEPRI, r3
 80128ae:	f3bf 8f6f 	isb	sy
 80128b2:	f3bf 8f4f 	dsb	sy
 80128b6:	60fb      	str	r3, [r7, #12]
}
 80128b8:	bf00      	nop
 80128ba:	bf00      	nop
 80128bc:	e7fd      	b.n	80128ba <vTaskStartScheduler+0x9e>
}
 80128be:	bf00      	nop
 80128c0:	3718      	adds	r7, #24
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}
 80128c6:	bf00      	nop
 80128c8:	080143b8 	.word	0x080143b8
 80128cc:	08012ea9 	.word	0x08012ea9
 80128d0:	20001434 	.word	0x20001434
 80128d4:	20001430 	.word	0x20001430
 80128d8:	2000141c 	.word	0x2000141c
 80128dc:	20001414 	.word	0x20001414

080128e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80128e0:	b480      	push	{r7}
 80128e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80128e4:	4b04      	ldr	r3, [pc, #16]	@ (80128f8 <vTaskSuspendAll+0x18>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	3301      	adds	r3, #1
 80128ea:	4a03      	ldr	r2, [pc, #12]	@ (80128f8 <vTaskSuspendAll+0x18>)
 80128ec:	6013      	str	r3, [r2, #0]
}
 80128ee:	bf00      	nop
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bc80      	pop	{r7}
 80128f4:	4770      	bx	lr
 80128f6:	bf00      	nop
 80128f8:	20001438 	.word	0x20001438

080128fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012902:	2300      	movs	r3, #0
 8012904:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012906:	2300      	movs	r3, #0
 8012908:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801290a:	4b42      	ldr	r3, [pc, #264]	@ (8012a14 <xTaskResumeAll+0x118>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d10b      	bne.n	801292a <xTaskResumeAll+0x2e>
	__asm volatile
 8012912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012916:	f383 8811 	msr	BASEPRI, r3
 801291a:	f3bf 8f6f 	isb	sy
 801291e:	f3bf 8f4f 	dsb	sy
 8012922:	603b      	str	r3, [r7, #0]
}
 8012924:	bf00      	nop
 8012926:	bf00      	nop
 8012928:	e7fd      	b.n	8012926 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801292a:	f000 ff07 	bl	801373c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801292e:	4b39      	ldr	r3, [pc, #228]	@ (8012a14 <xTaskResumeAll+0x118>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	3b01      	subs	r3, #1
 8012934:	4a37      	ldr	r2, [pc, #220]	@ (8012a14 <xTaskResumeAll+0x118>)
 8012936:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012938:	4b36      	ldr	r3, [pc, #216]	@ (8012a14 <xTaskResumeAll+0x118>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d161      	bne.n	8012a04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012940:	4b35      	ldr	r3, [pc, #212]	@ (8012a18 <xTaskResumeAll+0x11c>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d05d      	beq.n	8012a04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012948:	e02e      	b.n	80129a8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 801294a:	4b34      	ldr	r3, [pc, #208]	@ (8012a1c <xTaskResumeAll+0x120>)
 801294c:	68db      	ldr	r3, [r3, #12]
 801294e:	68db      	ldr	r3, [r3, #12]
 8012950:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	3318      	adds	r3, #24
 8012956:	4618      	mov	r0, r3
 8012958:	f7fe fddf 	bl	801151a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	3304      	adds	r3, #4
 8012960:	4618      	mov	r0, r3
 8012962:	f7fe fdda 	bl	801151a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801296a:	2201      	movs	r2, #1
 801296c:	409a      	lsls	r2, r3
 801296e:	4b2c      	ldr	r3, [pc, #176]	@ (8012a20 <xTaskResumeAll+0x124>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	4313      	orrs	r3, r2
 8012974:	4a2a      	ldr	r2, [pc, #168]	@ (8012a20 <xTaskResumeAll+0x124>)
 8012976:	6013      	str	r3, [r2, #0]
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801297c:	4613      	mov	r3, r2
 801297e:	009b      	lsls	r3, r3, #2
 8012980:	4413      	add	r3, r2
 8012982:	009b      	lsls	r3, r3, #2
 8012984:	4a27      	ldr	r2, [pc, #156]	@ (8012a24 <xTaskResumeAll+0x128>)
 8012986:	441a      	add	r2, r3
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	3304      	adds	r3, #4
 801298c:	4619      	mov	r1, r3
 801298e:	4610      	mov	r0, r2
 8012990:	f7fe fd68 	bl	8011464 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012998:	4b23      	ldr	r3, [pc, #140]	@ (8012a28 <xTaskResumeAll+0x12c>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801299e:	429a      	cmp	r2, r3
 80129a0:	d302      	bcc.n	80129a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80129a2:	4b22      	ldr	r3, [pc, #136]	@ (8012a2c <xTaskResumeAll+0x130>)
 80129a4:	2201      	movs	r2, #1
 80129a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80129a8:	4b1c      	ldr	r3, [pc, #112]	@ (8012a1c <xTaskResumeAll+0x120>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d1cc      	bne.n	801294a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d001      	beq.n	80129ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80129b6:	f000 fb65 	bl	8013084 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80129ba:	4b1d      	ldr	r3, [pc, #116]	@ (8012a30 <xTaskResumeAll+0x134>)
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d010      	beq.n	80129e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80129c6:	f000 f845 	bl	8012a54 <xTaskIncrementTick>
 80129ca:	4603      	mov	r3, r0
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d002      	beq.n	80129d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80129d0:	4b16      	ldr	r3, [pc, #88]	@ (8012a2c <xTaskResumeAll+0x130>)
 80129d2:	2201      	movs	r2, #1
 80129d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	3b01      	subs	r3, #1
 80129da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d1f1      	bne.n	80129c6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80129e2:	4b13      	ldr	r3, [pc, #76]	@ (8012a30 <xTaskResumeAll+0x134>)
 80129e4:	2200      	movs	r2, #0
 80129e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80129e8:	4b10      	ldr	r3, [pc, #64]	@ (8012a2c <xTaskResumeAll+0x130>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d009      	beq.n	8012a04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80129f0:	2301      	movs	r3, #1
 80129f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80129f4:	4b0f      	ldr	r3, [pc, #60]	@ (8012a34 <xTaskResumeAll+0x138>)
 80129f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80129fa:	601a      	str	r2, [r3, #0]
 80129fc:	f3bf 8f4f 	dsb	sy
 8012a00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012a04:	f000 feca 	bl	801379c <vPortExitCritical>

	return xAlreadyYielded;
 8012a08:	68bb      	ldr	r3, [r7, #8]
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3710      	adds	r7, #16
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	20001438 	.word	0x20001438
 8012a18:	20001410 	.word	0x20001410
 8012a1c:	200013d0 	.word	0x200013d0
 8012a20:	20001418 	.word	0x20001418
 8012a24:	20001314 	.word	0x20001314
 8012a28:	20001310 	.word	0x20001310
 8012a2c:	20001424 	.word	0x20001424
 8012a30:	20001420 	.word	0x20001420
 8012a34:	e000ed04 	.word	0xe000ed04

08012a38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012a38:	b480      	push	{r7}
 8012a3a:	b083      	sub	sp, #12
 8012a3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012a3e:	4b04      	ldr	r3, [pc, #16]	@ (8012a50 <xTaskGetTickCount+0x18>)
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012a44:	687b      	ldr	r3, [r7, #4]
}
 8012a46:	4618      	mov	r0, r3
 8012a48:	370c      	adds	r7, #12
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bc80      	pop	{r7}
 8012a4e:	4770      	bx	lr
 8012a50:	20001414 	.word	0x20001414

08012a54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b086      	sub	sp, #24
 8012a58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a5e:	4b51      	ldr	r3, [pc, #324]	@ (8012ba4 <xTaskIncrementTick+0x150>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	f040 808e 	bne.w	8012b84 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012a68:	4b4f      	ldr	r3, [pc, #316]	@ (8012ba8 <xTaskIncrementTick+0x154>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	3301      	adds	r3, #1
 8012a6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012a70:	4a4d      	ldr	r2, [pc, #308]	@ (8012ba8 <xTaskIncrementTick+0x154>)
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012a76:	693b      	ldr	r3, [r7, #16]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d121      	bne.n	8012ac0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8012a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8012bac <xTaskIncrementTick+0x158>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d00b      	beq.n	8012a9e <xTaskIncrementTick+0x4a>
	__asm volatile
 8012a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a8a:	f383 8811 	msr	BASEPRI, r3
 8012a8e:	f3bf 8f6f 	isb	sy
 8012a92:	f3bf 8f4f 	dsb	sy
 8012a96:	603b      	str	r3, [r7, #0]
}
 8012a98:	bf00      	nop
 8012a9a:	bf00      	nop
 8012a9c:	e7fd      	b.n	8012a9a <xTaskIncrementTick+0x46>
 8012a9e:	4b43      	ldr	r3, [pc, #268]	@ (8012bac <xTaskIncrementTick+0x158>)
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	60fb      	str	r3, [r7, #12]
 8012aa4:	4b42      	ldr	r3, [pc, #264]	@ (8012bb0 <xTaskIncrementTick+0x15c>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	4a40      	ldr	r2, [pc, #256]	@ (8012bac <xTaskIncrementTick+0x158>)
 8012aaa:	6013      	str	r3, [r2, #0]
 8012aac:	4a40      	ldr	r2, [pc, #256]	@ (8012bb0 <xTaskIncrementTick+0x15c>)
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	6013      	str	r3, [r2, #0]
 8012ab2:	4b40      	ldr	r3, [pc, #256]	@ (8012bb4 <xTaskIncrementTick+0x160>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	3301      	adds	r3, #1
 8012ab8:	4a3e      	ldr	r2, [pc, #248]	@ (8012bb4 <xTaskIncrementTick+0x160>)
 8012aba:	6013      	str	r3, [r2, #0]
 8012abc:	f000 fae2 	bl	8013084 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012ac0:	4b3d      	ldr	r3, [pc, #244]	@ (8012bb8 <xTaskIncrementTick+0x164>)
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	693a      	ldr	r2, [r7, #16]
 8012ac6:	429a      	cmp	r2, r3
 8012ac8:	d34d      	bcc.n	8012b66 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012aca:	4b38      	ldr	r3, [pc, #224]	@ (8012bac <xTaskIncrementTick+0x158>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d101      	bne.n	8012ad8 <xTaskIncrementTick+0x84>
 8012ad4:	2301      	movs	r3, #1
 8012ad6:	e000      	b.n	8012ada <xTaskIncrementTick+0x86>
 8012ad8:	2300      	movs	r3, #0
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d004      	beq.n	8012ae8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ade:	4b36      	ldr	r3, [pc, #216]	@ (8012bb8 <xTaskIncrementTick+0x164>)
 8012ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ae4:	601a      	str	r2, [r3, #0]
					break;
 8012ae6:	e03e      	b.n	8012b66 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012ae8:	4b30      	ldr	r3, [pc, #192]	@ (8012bac <xTaskIncrementTick+0x158>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	68db      	ldr	r3, [r3, #12]
 8012af0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	685b      	ldr	r3, [r3, #4]
 8012af6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012af8:	693a      	ldr	r2, [r7, #16]
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	429a      	cmp	r2, r3
 8012afe:	d203      	bcs.n	8012b08 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012b00:	4a2d      	ldr	r2, [pc, #180]	@ (8012bb8 <xTaskIncrementTick+0x164>)
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	6013      	str	r3, [r2, #0]
						break;
 8012b06:	e02e      	b.n	8012b66 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	3304      	adds	r3, #4
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f7fe fd04 	bl	801151a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d004      	beq.n	8012b24 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	3318      	adds	r3, #24
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f7fe fcfb 	bl	801151a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b28:	2201      	movs	r2, #1
 8012b2a:	409a      	lsls	r2, r3
 8012b2c:	4b23      	ldr	r3, [pc, #140]	@ (8012bbc <xTaskIncrementTick+0x168>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	4313      	orrs	r3, r2
 8012b32:	4a22      	ldr	r2, [pc, #136]	@ (8012bbc <xTaskIncrementTick+0x168>)
 8012b34:	6013      	str	r3, [r2, #0]
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b3a:	4613      	mov	r3, r2
 8012b3c:	009b      	lsls	r3, r3, #2
 8012b3e:	4413      	add	r3, r2
 8012b40:	009b      	lsls	r3, r3, #2
 8012b42:	4a1f      	ldr	r2, [pc, #124]	@ (8012bc0 <xTaskIncrementTick+0x16c>)
 8012b44:	441a      	add	r2, r3
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	3304      	adds	r3, #4
 8012b4a:	4619      	mov	r1, r3
 8012b4c:	4610      	mov	r0, r2
 8012b4e:	f7fe fc89 	bl	8011464 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b56:	4b1b      	ldr	r3, [pc, #108]	@ (8012bc4 <xTaskIncrementTick+0x170>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d3b4      	bcc.n	8012aca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012b60:	2301      	movs	r3, #1
 8012b62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b64:	e7b1      	b.n	8012aca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012b66:	4b17      	ldr	r3, [pc, #92]	@ (8012bc4 <xTaskIncrementTick+0x170>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b6c:	4914      	ldr	r1, [pc, #80]	@ (8012bc0 <xTaskIncrementTick+0x16c>)
 8012b6e:	4613      	mov	r3, r2
 8012b70:	009b      	lsls	r3, r3, #2
 8012b72:	4413      	add	r3, r2
 8012b74:	009b      	lsls	r3, r3, #2
 8012b76:	440b      	add	r3, r1
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	2b01      	cmp	r3, #1
 8012b7c:	d907      	bls.n	8012b8e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8012b7e:	2301      	movs	r3, #1
 8012b80:	617b      	str	r3, [r7, #20]
 8012b82:	e004      	b.n	8012b8e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012b84:	4b10      	ldr	r3, [pc, #64]	@ (8012bc8 <xTaskIncrementTick+0x174>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	3301      	adds	r3, #1
 8012b8a:	4a0f      	ldr	r2, [pc, #60]	@ (8012bc8 <xTaskIncrementTick+0x174>)
 8012b8c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8012bcc <xTaskIncrementTick+0x178>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d001      	beq.n	8012b9a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8012b96:	2301      	movs	r3, #1
 8012b98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012b9a:	697b      	ldr	r3, [r7, #20]
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3718      	adds	r7, #24
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}
 8012ba4:	20001438 	.word	0x20001438
 8012ba8:	20001414 	.word	0x20001414
 8012bac:	200013c8 	.word	0x200013c8
 8012bb0:	200013cc 	.word	0x200013cc
 8012bb4:	20001428 	.word	0x20001428
 8012bb8:	20001430 	.word	0x20001430
 8012bbc:	20001418 	.word	0x20001418
 8012bc0:	20001314 	.word	0x20001314
 8012bc4:	20001310 	.word	0x20001310
 8012bc8:	20001420 	.word	0x20001420
 8012bcc:	20001424 	.word	0x20001424

08012bd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012bd0:	b480      	push	{r7}
 8012bd2:	b087      	sub	sp, #28
 8012bd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012bd6:	4b27      	ldr	r3, [pc, #156]	@ (8012c74 <vTaskSwitchContext+0xa4>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d003      	beq.n	8012be6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012bde:	4b26      	ldr	r3, [pc, #152]	@ (8012c78 <vTaskSwitchContext+0xa8>)
 8012be0:	2201      	movs	r2, #1
 8012be2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012be4:	e040      	b.n	8012c68 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8012be6:	4b24      	ldr	r3, [pc, #144]	@ (8012c78 <vTaskSwitchContext+0xa8>)
 8012be8:	2200      	movs	r2, #0
 8012bea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8012bec:	4b23      	ldr	r3, [pc, #140]	@ (8012c7c <vTaskSwitchContext+0xac>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	fab3 f383 	clz	r3, r3
 8012bf8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012bfa:	7afb      	ldrb	r3, [r7, #11]
 8012bfc:	f1c3 031f 	rsb	r3, r3, #31
 8012c00:	617b      	str	r3, [r7, #20]
 8012c02:	491f      	ldr	r1, [pc, #124]	@ (8012c80 <vTaskSwitchContext+0xb0>)
 8012c04:	697a      	ldr	r2, [r7, #20]
 8012c06:	4613      	mov	r3, r2
 8012c08:	009b      	lsls	r3, r3, #2
 8012c0a:	4413      	add	r3, r2
 8012c0c:	009b      	lsls	r3, r3, #2
 8012c0e:	440b      	add	r3, r1
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d10b      	bne.n	8012c2e <vTaskSwitchContext+0x5e>
	__asm volatile
 8012c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c1a:	f383 8811 	msr	BASEPRI, r3
 8012c1e:	f3bf 8f6f 	isb	sy
 8012c22:	f3bf 8f4f 	dsb	sy
 8012c26:	607b      	str	r3, [r7, #4]
}
 8012c28:	bf00      	nop
 8012c2a:	bf00      	nop
 8012c2c:	e7fd      	b.n	8012c2a <vTaskSwitchContext+0x5a>
 8012c2e:	697a      	ldr	r2, [r7, #20]
 8012c30:	4613      	mov	r3, r2
 8012c32:	009b      	lsls	r3, r3, #2
 8012c34:	4413      	add	r3, r2
 8012c36:	009b      	lsls	r3, r3, #2
 8012c38:	4a11      	ldr	r2, [pc, #68]	@ (8012c80 <vTaskSwitchContext+0xb0>)
 8012c3a:	4413      	add	r3, r2
 8012c3c:	613b      	str	r3, [r7, #16]
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	685b      	ldr	r3, [r3, #4]
 8012c42:	685a      	ldr	r2, [r3, #4]
 8012c44:	693b      	ldr	r3, [r7, #16]
 8012c46:	605a      	str	r2, [r3, #4]
 8012c48:	693b      	ldr	r3, [r7, #16]
 8012c4a:	685a      	ldr	r2, [r3, #4]
 8012c4c:	693b      	ldr	r3, [r7, #16]
 8012c4e:	3308      	adds	r3, #8
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d104      	bne.n	8012c5e <vTaskSwitchContext+0x8e>
 8012c54:	693b      	ldr	r3, [r7, #16]
 8012c56:	685b      	ldr	r3, [r3, #4]
 8012c58:	685a      	ldr	r2, [r3, #4]
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	605a      	str	r2, [r3, #4]
 8012c5e:	693b      	ldr	r3, [r7, #16]
 8012c60:	685b      	ldr	r3, [r3, #4]
 8012c62:	68db      	ldr	r3, [r3, #12]
 8012c64:	4a07      	ldr	r2, [pc, #28]	@ (8012c84 <vTaskSwitchContext+0xb4>)
 8012c66:	6013      	str	r3, [r2, #0]
}
 8012c68:	bf00      	nop
 8012c6a:	371c      	adds	r7, #28
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bc80      	pop	{r7}
 8012c70:	4770      	bx	lr
 8012c72:	bf00      	nop
 8012c74:	20001438 	.word	0x20001438
 8012c78:	20001424 	.word	0x20001424
 8012c7c:	20001418 	.word	0x20001418
 8012c80:	20001314 	.word	0x20001314
 8012c84:	20001310 	.word	0x20001310

08012c88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b084      	sub	sp, #16
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d10b      	bne.n	8012cb0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8012c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c9c:	f383 8811 	msr	BASEPRI, r3
 8012ca0:	f3bf 8f6f 	isb	sy
 8012ca4:	f3bf 8f4f 	dsb	sy
 8012ca8:	60fb      	str	r3, [r7, #12]
}
 8012caa:	bf00      	nop
 8012cac:	bf00      	nop
 8012cae:	e7fd      	b.n	8012cac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012cb0:	4b07      	ldr	r3, [pc, #28]	@ (8012cd0 <vTaskPlaceOnEventList+0x48>)
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	3318      	adds	r3, #24
 8012cb6:	4619      	mov	r1, r3
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	f7fe fbf6 	bl	80114aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012cbe:	2101      	movs	r1, #1
 8012cc0:	6838      	ldr	r0, [r7, #0]
 8012cc2:	f000 fbe5 	bl	8013490 <prvAddCurrentTaskToDelayedList>
}
 8012cc6:	bf00      	nop
 8012cc8:	3710      	adds	r7, #16
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}
 8012cce:	bf00      	nop
 8012cd0:	20001310 	.word	0x20001310

08012cd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b086      	sub	sp, #24
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	68db      	ldr	r3, [r3, #12]
 8012ce0:	68db      	ldr	r3, [r3, #12]
 8012ce2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012ce4:	693b      	ldr	r3, [r7, #16]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d10b      	bne.n	8012d02 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8012cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cee:	f383 8811 	msr	BASEPRI, r3
 8012cf2:	f3bf 8f6f 	isb	sy
 8012cf6:	f3bf 8f4f 	dsb	sy
 8012cfa:	60fb      	str	r3, [r7, #12]
}
 8012cfc:	bf00      	nop
 8012cfe:	bf00      	nop
 8012d00:	e7fd      	b.n	8012cfe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	3318      	adds	r3, #24
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7fe fc07 	bl	801151a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8012d84 <xTaskRemoveFromEventList+0xb0>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d11c      	bne.n	8012d4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	3304      	adds	r3, #4
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7fe fbfe 	bl	801151a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012d1e:	693b      	ldr	r3, [r7, #16]
 8012d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d22:	2201      	movs	r2, #1
 8012d24:	409a      	lsls	r2, r3
 8012d26:	4b18      	ldr	r3, [pc, #96]	@ (8012d88 <xTaskRemoveFromEventList+0xb4>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	4313      	orrs	r3, r2
 8012d2c:	4a16      	ldr	r2, [pc, #88]	@ (8012d88 <xTaskRemoveFromEventList+0xb4>)
 8012d2e:	6013      	str	r3, [r2, #0]
 8012d30:	693b      	ldr	r3, [r7, #16]
 8012d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d34:	4613      	mov	r3, r2
 8012d36:	009b      	lsls	r3, r3, #2
 8012d38:	4413      	add	r3, r2
 8012d3a:	009b      	lsls	r3, r3, #2
 8012d3c:	4a13      	ldr	r2, [pc, #76]	@ (8012d8c <xTaskRemoveFromEventList+0xb8>)
 8012d3e:	441a      	add	r2, r3
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	3304      	adds	r3, #4
 8012d44:	4619      	mov	r1, r3
 8012d46:	4610      	mov	r0, r2
 8012d48:	f7fe fb8c 	bl	8011464 <vListInsertEnd>
 8012d4c:	e005      	b.n	8012d5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012d4e:	693b      	ldr	r3, [r7, #16]
 8012d50:	3318      	adds	r3, #24
 8012d52:	4619      	mov	r1, r3
 8012d54:	480e      	ldr	r0, [pc, #56]	@ (8012d90 <xTaskRemoveFromEventList+0xbc>)
 8012d56:	f7fe fb85 	bl	8011464 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012d5a:	693b      	ldr	r3, [r7, #16]
 8012d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8012d94 <xTaskRemoveFromEventList+0xc0>)
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d905      	bls.n	8012d74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012d68:	2301      	movs	r3, #1
 8012d6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8012d98 <xTaskRemoveFromEventList+0xc4>)
 8012d6e:	2201      	movs	r2, #1
 8012d70:	601a      	str	r2, [r3, #0]
 8012d72:	e001      	b.n	8012d78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012d74:	2300      	movs	r3, #0
 8012d76:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8012d78:	697b      	ldr	r3, [r7, #20]
}
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	3718      	adds	r7, #24
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}
 8012d82:	bf00      	nop
 8012d84:	20001438 	.word	0x20001438
 8012d88:	20001418 	.word	0x20001418
 8012d8c:	20001314 	.word	0x20001314
 8012d90:	200013d0 	.word	0x200013d0
 8012d94:	20001310 	.word	0x20001310
 8012d98:	20001424 	.word	0x20001424

08012d9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b083      	sub	sp, #12
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012da4:	4b06      	ldr	r3, [pc, #24]	@ (8012dc0 <vTaskInternalSetTimeOutState+0x24>)
 8012da6:	681a      	ldr	r2, [r3, #0]
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012dac:	4b05      	ldr	r3, [pc, #20]	@ (8012dc4 <vTaskInternalSetTimeOutState+0x28>)
 8012dae:	681a      	ldr	r2, [r3, #0]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	605a      	str	r2, [r3, #4]
}
 8012db4:	bf00      	nop
 8012db6:	370c      	adds	r7, #12
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bc80      	pop	{r7}
 8012dbc:	4770      	bx	lr
 8012dbe:	bf00      	nop
 8012dc0:	20001428 	.word	0x20001428
 8012dc4:	20001414 	.word	0x20001414

08012dc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b088      	sub	sp, #32
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d10b      	bne.n	8012df0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8012dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ddc:	f383 8811 	msr	BASEPRI, r3
 8012de0:	f3bf 8f6f 	isb	sy
 8012de4:	f3bf 8f4f 	dsb	sy
 8012de8:	613b      	str	r3, [r7, #16]
}
 8012dea:	bf00      	nop
 8012dec:	bf00      	nop
 8012dee:	e7fd      	b.n	8012dec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d10b      	bne.n	8012e0e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8012df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dfa:	f383 8811 	msr	BASEPRI, r3
 8012dfe:	f3bf 8f6f 	isb	sy
 8012e02:	f3bf 8f4f 	dsb	sy
 8012e06:	60fb      	str	r3, [r7, #12]
}
 8012e08:	bf00      	nop
 8012e0a:	bf00      	nop
 8012e0c:	e7fd      	b.n	8012e0a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8012e0e:	f000 fc95 	bl	801373c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012e12:	4b1d      	ldr	r3, [pc, #116]	@ (8012e88 <xTaskCheckForTimeOut+0xc0>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	685b      	ldr	r3, [r3, #4]
 8012e1c:	69ba      	ldr	r2, [r7, #24]
 8012e1e:	1ad3      	subs	r3, r2, r3
 8012e20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e2a:	d102      	bne.n	8012e32 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	61fb      	str	r3, [r7, #28]
 8012e30:	e023      	b.n	8012e7a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	4b15      	ldr	r3, [pc, #84]	@ (8012e8c <xTaskCheckForTimeOut+0xc4>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d007      	beq.n	8012e4e <xTaskCheckForTimeOut+0x86>
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	685b      	ldr	r3, [r3, #4]
 8012e42:	69ba      	ldr	r2, [r7, #24]
 8012e44:	429a      	cmp	r2, r3
 8012e46:	d302      	bcc.n	8012e4e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012e48:	2301      	movs	r3, #1
 8012e4a:	61fb      	str	r3, [r7, #28]
 8012e4c:	e015      	b.n	8012e7a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	697a      	ldr	r2, [r7, #20]
 8012e54:	429a      	cmp	r2, r3
 8012e56:	d20b      	bcs.n	8012e70 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	681a      	ldr	r2, [r3, #0]
 8012e5c:	697b      	ldr	r3, [r7, #20]
 8012e5e:	1ad2      	subs	r2, r2, r3
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f7ff ff99 	bl	8012d9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	61fb      	str	r3, [r7, #28]
 8012e6e:	e004      	b.n	8012e7a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	2200      	movs	r2, #0
 8012e74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012e76:	2301      	movs	r3, #1
 8012e78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012e7a:	f000 fc8f 	bl	801379c <vPortExitCritical>

	return xReturn;
 8012e7e:	69fb      	ldr	r3, [r7, #28]
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3720      	adds	r7, #32
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}
 8012e88:	20001414 	.word	0x20001414
 8012e8c:	20001428 	.word	0x20001428

08012e90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012e90:	b480      	push	{r7}
 8012e92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012e94:	4b03      	ldr	r3, [pc, #12]	@ (8012ea4 <vTaskMissedYield+0x14>)
 8012e96:	2201      	movs	r2, #1
 8012e98:	601a      	str	r2, [r3, #0]
}
 8012e9a:	bf00      	nop
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bc80      	pop	{r7}
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop
 8012ea4:	20001424 	.word	0x20001424

08012ea8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b082      	sub	sp, #8
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012eb0:	f000 f852 	bl	8012f58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012eb4:	4b06      	ldr	r3, [pc, #24]	@ (8012ed0 <prvIdleTask+0x28>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	2b01      	cmp	r3, #1
 8012eba:	d9f9      	bls.n	8012eb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012ebc:	4b05      	ldr	r3, [pc, #20]	@ (8012ed4 <prvIdleTask+0x2c>)
 8012ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012ec2:	601a      	str	r2, [r3, #0]
 8012ec4:	f3bf 8f4f 	dsb	sy
 8012ec8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012ecc:	e7f0      	b.n	8012eb0 <prvIdleTask+0x8>
 8012ece:	bf00      	nop
 8012ed0:	20001314 	.word	0x20001314
 8012ed4:	e000ed04 	.word	0xe000ed04

08012ed8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b082      	sub	sp, #8
 8012edc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012ede:	2300      	movs	r3, #0
 8012ee0:	607b      	str	r3, [r7, #4]
 8012ee2:	e00c      	b.n	8012efe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012ee4:	687a      	ldr	r2, [r7, #4]
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	009b      	lsls	r3, r3, #2
 8012eea:	4413      	add	r3, r2
 8012eec:	009b      	lsls	r3, r3, #2
 8012eee:	4a12      	ldr	r2, [pc, #72]	@ (8012f38 <prvInitialiseTaskLists+0x60>)
 8012ef0:	4413      	add	r3, r2
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7fe fa8b 	bl	801140e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	3301      	adds	r3, #1
 8012efc:	607b      	str	r3, [r7, #4]
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	2b06      	cmp	r3, #6
 8012f02:	d9ef      	bls.n	8012ee4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012f04:	480d      	ldr	r0, [pc, #52]	@ (8012f3c <prvInitialiseTaskLists+0x64>)
 8012f06:	f7fe fa82 	bl	801140e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012f0a:	480d      	ldr	r0, [pc, #52]	@ (8012f40 <prvInitialiseTaskLists+0x68>)
 8012f0c:	f7fe fa7f 	bl	801140e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012f10:	480c      	ldr	r0, [pc, #48]	@ (8012f44 <prvInitialiseTaskLists+0x6c>)
 8012f12:	f7fe fa7c 	bl	801140e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012f16:	480c      	ldr	r0, [pc, #48]	@ (8012f48 <prvInitialiseTaskLists+0x70>)
 8012f18:	f7fe fa79 	bl	801140e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012f1c:	480b      	ldr	r0, [pc, #44]	@ (8012f4c <prvInitialiseTaskLists+0x74>)
 8012f1e:	f7fe fa76 	bl	801140e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012f22:	4b0b      	ldr	r3, [pc, #44]	@ (8012f50 <prvInitialiseTaskLists+0x78>)
 8012f24:	4a05      	ldr	r2, [pc, #20]	@ (8012f3c <prvInitialiseTaskLists+0x64>)
 8012f26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012f28:	4b0a      	ldr	r3, [pc, #40]	@ (8012f54 <prvInitialiseTaskLists+0x7c>)
 8012f2a:	4a05      	ldr	r2, [pc, #20]	@ (8012f40 <prvInitialiseTaskLists+0x68>)
 8012f2c:	601a      	str	r2, [r3, #0]
}
 8012f2e:	bf00      	nop
 8012f30:	3708      	adds	r7, #8
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd80      	pop	{r7, pc}
 8012f36:	bf00      	nop
 8012f38:	20001314 	.word	0x20001314
 8012f3c:	200013a0 	.word	0x200013a0
 8012f40:	200013b4 	.word	0x200013b4
 8012f44:	200013d0 	.word	0x200013d0
 8012f48:	200013e4 	.word	0x200013e4
 8012f4c:	200013fc 	.word	0x200013fc
 8012f50:	200013c8 	.word	0x200013c8
 8012f54:	200013cc 	.word	0x200013cc

08012f58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012f5e:	e019      	b.n	8012f94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012f60:	f000 fbec 	bl	801373c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8012f64:	4b10      	ldr	r3, [pc, #64]	@ (8012fa8 <prvCheckTasksWaitingTermination+0x50>)
 8012f66:	68db      	ldr	r3, [r3, #12]
 8012f68:	68db      	ldr	r3, [r3, #12]
 8012f6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	3304      	adds	r3, #4
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7fe fad2 	bl	801151a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012f76:	4b0d      	ldr	r3, [pc, #52]	@ (8012fac <prvCheckTasksWaitingTermination+0x54>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	3b01      	subs	r3, #1
 8012f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8012fac <prvCheckTasksWaitingTermination+0x54>)
 8012f7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012f80:	4b0b      	ldr	r3, [pc, #44]	@ (8012fb0 <prvCheckTasksWaitingTermination+0x58>)
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	3b01      	subs	r3, #1
 8012f86:	4a0a      	ldr	r2, [pc, #40]	@ (8012fb0 <prvCheckTasksWaitingTermination+0x58>)
 8012f88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012f8a:	f000 fc07 	bl	801379c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f000 f848 	bl	8013024 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012f94:	4b06      	ldr	r3, [pc, #24]	@ (8012fb0 <prvCheckTasksWaitingTermination+0x58>)
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d1e1      	bne.n	8012f60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012f9c:	bf00      	nop
 8012f9e:	bf00      	nop
 8012fa0:	3708      	adds	r7, #8
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}
 8012fa6:	bf00      	nop
 8012fa8:	200013e4 	.word	0x200013e4
 8012fac:	20001410 	.word	0x20001410
 8012fb0:	200013f8 	.word	0x200013f8

08012fb4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8012fb4:	b480      	push	{r7}
 8012fb6:	b085      	sub	sp, #20
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012fc0:	e005      	b.n	8012fce <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	3301      	adds	r3, #1
 8012fc6:	607b      	str	r3, [r7, #4]
			ulCount++;
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	3301      	adds	r3, #1
 8012fcc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	781b      	ldrb	r3, [r3, #0]
 8012fd2:	2ba5      	cmp	r3, #165	@ 0xa5
 8012fd4:	d0f5      	beq.n	8012fc2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	089b      	lsrs	r3, r3, #2
 8012fda:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	b29b      	uxth	r3, r3
	}
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	3714      	adds	r7, #20
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bc80      	pop	{r7}
 8012fe8:	4770      	bx	lr
	...

08012fec <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b086      	sub	sp, #24
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d102      	bne.n	8013000 <uxTaskGetStackHighWaterMark+0x14>
 8012ffa:	4b09      	ldr	r3, [pc, #36]	@ (8013020 <uxTaskGetStackHighWaterMark+0x34>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	e000      	b.n	8013002 <uxTaskGetStackHighWaterMark+0x16>
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013008:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 801300a:	6938      	ldr	r0, [r7, #16]
 801300c:	f7ff ffd2 	bl	8012fb4 <prvTaskCheckFreeStackSpace>
 8013010:	4603      	mov	r3, r0
 8013012:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8013014:	68fb      	ldr	r3, [r7, #12]
	}
 8013016:	4618      	mov	r0, r3
 8013018:	3718      	adds	r7, #24
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
 801301e:	bf00      	nop
 8013020:	20001310 	.word	0x20001310

08013024 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013024:	b580      	push	{r7, lr}
 8013026:	b084      	sub	sp, #16
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8013032:	2b00      	cmp	r3, #0
 8013034:	d108      	bne.n	8013048 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801303a:	4618      	mov	r0, r3
 801303c:	f000 fd48 	bl	8013ad0 <vPortFree>
				vPortFree( pxTCB );
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f000 fd45 	bl	8013ad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013046:	e019      	b.n	801307c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801304e:	2b01      	cmp	r3, #1
 8013050:	d103      	bne.n	801305a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013052:	6878      	ldr	r0, [r7, #4]
 8013054:	f000 fd3c 	bl	8013ad0 <vPortFree>
	}
 8013058:	e010      	b.n	801307c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8013060:	2b02      	cmp	r3, #2
 8013062:	d00b      	beq.n	801307c <prvDeleteTCB+0x58>
	__asm volatile
 8013064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013068:	f383 8811 	msr	BASEPRI, r3
 801306c:	f3bf 8f6f 	isb	sy
 8013070:	f3bf 8f4f 	dsb	sy
 8013074:	60fb      	str	r3, [r7, #12]
}
 8013076:	bf00      	nop
 8013078:	bf00      	nop
 801307a:	e7fd      	b.n	8013078 <prvDeleteTCB+0x54>
	}
 801307c:	bf00      	nop
 801307e:	3710      	adds	r7, #16
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}

08013084 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013084:	b480      	push	{r7}
 8013086:	b083      	sub	sp, #12
 8013088:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801308a:	4b0e      	ldr	r3, [pc, #56]	@ (80130c4 <prvResetNextTaskUnblockTime+0x40>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d101      	bne.n	8013098 <prvResetNextTaskUnblockTime+0x14>
 8013094:	2301      	movs	r3, #1
 8013096:	e000      	b.n	801309a <prvResetNextTaskUnblockTime+0x16>
 8013098:	2300      	movs	r3, #0
 801309a:	2b00      	cmp	r3, #0
 801309c:	d004      	beq.n	80130a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801309e:	4b0a      	ldr	r3, [pc, #40]	@ (80130c8 <prvResetNextTaskUnblockTime+0x44>)
 80130a0:	f04f 32ff 	mov.w	r2, #4294967295
 80130a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80130a6:	e008      	b.n	80130ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80130a8:	4b06      	ldr	r3, [pc, #24]	@ (80130c4 <prvResetNextTaskUnblockTime+0x40>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	68db      	ldr	r3, [r3, #12]
 80130ae:	68db      	ldr	r3, [r3, #12]
 80130b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	685b      	ldr	r3, [r3, #4]
 80130b6:	4a04      	ldr	r2, [pc, #16]	@ (80130c8 <prvResetNextTaskUnblockTime+0x44>)
 80130b8:	6013      	str	r3, [r2, #0]
}
 80130ba:	bf00      	nop
 80130bc:	370c      	adds	r7, #12
 80130be:	46bd      	mov	sp, r7
 80130c0:	bc80      	pop	{r7}
 80130c2:	4770      	bx	lr
 80130c4:	200013c8 	.word	0x200013c8
 80130c8:	20001430 	.word	0x20001430

080130cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80130cc:	b480      	push	{r7}
 80130ce:	b083      	sub	sp, #12
 80130d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80130d2:	4b0b      	ldr	r3, [pc, #44]	@ (8013100 <xTaskGetSchedulerState+0x34>)
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d102      	bne.n	80130e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80130da:	2301      	movs	r3, #1
 80130dc:	607b      	str	r3, [r7, #4]
 80130de:	e008      	b.n	80130f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80130e0:	4b08      	ldr	r3, [pc, #32]	@ (8013104 <xTaskGetSchedulerState+0x38>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d102      	bne.n	80130ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80130e8:	2302      	movs	r3, #2
 80130ea:	607b      	str	r3, [r7, #4]
 80130ec:	e001      	b.n	80130f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80130ee:	2300      	movs	r3, #0
 80130f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80130f2:	687b      	ldr	r3, [r7, #4]
	}
 80130f4:	4618      	mov	r0, r3
 80130f6:	370c      	adds	r7, #12
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bc80      	pop	{r7}
 80130fc:	4770      	bx	lr
 80130fe:	bf00      	nop
 8013100:	2000141c 	.word	0x2000141c
 8013104:	20001438 	.word	0x20001438

08013108 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013108:	b580      	push	{r7, lr}
 801310a:	b084      	sub	sp, #16
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013114:	2300      	movs	r3, #0
 8013116:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d06e      	beq.n	80131fc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801311e:	68bb      	ldr	r3, [r7, #8]
 8013120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013122:	4b39      	ldr	r3, [pc, #228]	@ (8013208 <xTaskPriorityInherit+0x100>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013128:	429a      	cmp	r2, r3
 801312a:	d25e      	bcs.n	80131ea <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	699b      	ldr	r3, [r3, #24]
 8013130:	2b00      	cmp	r3, #0
 8013132:	db06      	blt.n	8013142 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013134:	4b34      	ldr	r3, [pc, #208]	@ (8013208 <xTaskPriorityInherit+0x100>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801313a:	f1c3 0207 	rsb	r2, r3, #7
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	6959      	ldr	r1, [r3, #20]
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801314a:	4613      	mov	r3, r2
 801314c:	009b      	lsls	r3, r3, #2
 801314e:	4413      	add	r3, r2
 8013150:	009b      	lsls	r3, r3, #2
 8013152:	4a2e      	ldr	r2, [pc, #184]	@ (801320c <xTaskPriorityInherit+0x104>)
 8013154:	4413      	add	r3, r2
 8013156:	4299      	cmp	r1, r3
 8013158:	d101      	bne.n	801315e <xTaskPriorityInherit+0x56>
 801315a:	2301      	movs	r3, #1
 801315c:	e000      	b.n	8013160 <xTaskPriorityInherit+0x58>
 801315e:	2300      	movs	r3, #0
 8013160:	2b00      	cmp	r3, #0
 8013162:	d03a      	beq.n	80131da <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	3304      	adds	r3, #4
 8013168:	4618      	mov	r0, r3
 801316a:	f7fe f9d6 	bl	801151a <uxListRemove>
 801316e:	4603      	mov	r3, r0
 8013170:	2b00      	cmp	r3, #0
 8013172:	d115      	bne.n	80131a0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013178:	4924      	ldr	r1, [pc, #144]	@ (801320c <xTaskPriorityInherit+0x104>)
 801317a:	4613      	mov	r3, r2
 801317c:	009b      	lsls	r3, r3, #2
 801317e:	4413      	add	r3, r2
 8013180:	009b      	lsls	r3, r3, #2
 8013182:	440b      	add	r3, r1
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d10a      	bne.n	80131a0 <xTaskPriorityInherit+0x98>
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801318e:	2201      	movs	r2, #1
 8013190:	fa02 f303 	lsl.w	r3, r2, r3
 8013194:	43da      	mvns	r2, r3
 8013196:	4b1e      	ldr	r3, [pc, #120]	@ (8013210 <xTaskPriorityInherit+0x108>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	4013      	ands	r3, r2
 801319c:	4a1c      	ldr	r2, [pc, #112]	@ (8013210 <xTaskPriorityInherit+0x108>)
 801319e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80131a0:	4b19      	ldr	r3, [pc, #100]	@ (8013208 <xTaskPriorityInherit+0x100>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131a6:	68bb      	ldr	r3, [r7, #8]
 80131a8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131ae:	2201      	movs	r2, #1
 80131b0:	409a      	lsls	r2, r3
 80131b2:	4b17      	ldr	r3, [pc, #92]	@ (8013210 <xTaskPriorityInherit+0x108>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	4313      	orrs	r3, r2
 80131b8:	4a15      	ldr	r2, [pc, #84]	@ (8013210 <xTaskPriorityInherit+0x108>)
 80131ba:	6013      	str	r3, [r2, #0]
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131c0:	4613      	mov	r3, r2
 80131c2:	009b      	lsls	r3, r3, #2
 80131c4:	4413      	add	r3, r2
 80131c6:	009b      	lsls	r3, r3, #2
 80131c8:	4a10      	ldr	r2, [pc, #64]	@ (801320c <xTaskPriorityInherit+0x104>)
 80131ca:	441a      	add	r2, r3
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	3304      	adds	r3, #4
 80131d0:	4619      	mov	r1, r3
 80131d2:	4610      	mov	r0, r2
 80131d4:	f7fe f946 	bl	8011464 <vListInsertEnd>
 80131d8:	e004      	b.n	80131e4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80131da:	4b0b      	ldr	r3, [pc, #44]	@ (8013208 <xTaskPriorityInherit+0x100>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80131e4:	2301      	movs	r3, #1
 80131e6:	60fb      	str	r3, [r7, #12]
 80131e8:	e008      	b.n	80131fc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80131ee:	4b06      	ldr	r3, [pc, #24]	@ (8013208 <xTaskPriorityInherit+0x100>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d201      	bcs.n	80131fc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80131f8:	2301      	movs	r3, #1
 80131fa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80131fc:	68fb      	ldr	r3, [r7, #12]
	}
 80131fe:	4618      	mov	r0, r3
 8013200:	3710      	adds	r7, #16
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}
 8013206:	bf00      	nop
 8013208:	20001310 	.word	0x20001310
 801320c:	20001314 	.word	0x20001314
 8013210:	20001418 	.word	0x20001418

08013214 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013214:	b580      	push	{r7, lr}
 8013216:	b086      	sub	sp, #24
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013220:	2300      	movs	r3, #0
 8013222:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d070      	beq.n	801330c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801322a:	4b3b      	ldr	r3, [pc, #236]	@ (8013318 <xTaskPriorityDisinherit+0x104>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	693a      	ldr	r2, [r7, #16]
 8013230:	429a      	cmp	r2, r3
 8013232:	d00b      	beq.n	801324c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8013234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013238:	f383 8811 	msr	BASEPRI, r3
 801323c:	f3bf 8f6f 	isb	sy
 8013240:	f3bf 8f4f 	dsb	sy
 8013244:	60fb      	str	r3, [r7, #12]
}
 8013246:	bf00      	nop
 8013248:	bf00      	nop
 801324a:	e7fd      	b.n	8013248 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801324c:	693b      	ldr	r3, [r7, #16]
 801324e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013250:	2b00      	cmp	r3, #0
 8013252:	d10b      	bne.n	801326c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8013254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013258:	f383 8811 	msr	BASEPRI, r3
 801325c:	f3bf 8f6f 	isb	sy
 8013260:	f3bf 8f4f 	dsb	sy
 8013264:	60bb      	str	r3, [r7, #8]
}
 8013266:	bf00      	nop
 8013268:	bf00      	nop
 801326a:	e7fd      	b.n	8013268 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013270:	1e5a      	subs	r2, r3, #1
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013276:	693b      	ldr	r3, [r7, #16]
 8013278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801327a:	693b      	ldr	r3, [r7, #16]
 801327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801327e:	429a      	cmp	r2, r3
 8013280:	d044      	beq.n	801330c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013282:	693b      	ldr	r3, [r7, #16]
 8013284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013286:	2b00      	cmp	r3, #0
 8013288:	d140      	bne.n	801330c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801328a:	693b      	ldr	r3, [r7, #16]
 801328c:	3304      	adds	r3, #4
 801328e:	4618      	mov	r0, r3
 8013290:	f7fe f943 	bl	801151a <uxListRemove>
 8013294:	4603      	mov	r3, r0
 8013296:	2b00      	cmp	r3, #0
 8013298:	d115      	bne.n	80132c6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801329e:	491f      	ldr	r1, [pc, #124]	@ (801331c <xTaskPriorityDisinherit+0x108>)
 80132a0:	4613      	mov	r3, r2
 80132a2:	009b      	lsls	r3, r3, #2
 80132a4:	4413      	add	r3, r2
 80132a6:	009b      	lsls	r3, r3, #2
 80132a8:	440b      	add	r3, r1
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d10a      	bne.n	80132c6 <xTaskPriorityDisinherit+0xb2>
 80132b0:	693b      	ldr	r3, [r7, #16]
 80132b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132b4:	2201      	movs	r2, #1
 80132b6:	fa02 f303 	lsl.w	r3, r2, r3
 80132ba:	43da      	mvns	r2, r3
 80132bc:	4b18      	ldr	r3, [pc, #96]	@ (8013320 <xTaskPriorityDisinherit+0x10c>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	4013      	ands	r3, r2
 80132c2:	4a17      	ldr	r2, [pc, #92]	@ (8013320 <xTaskPriorityDisinherit+0x10c>)
 80132c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80132ca:	693b      	ldr	r3, [r7, #16]
 80132cc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132ce:	693b      	ldr	r3, [r7, #16]
 80132d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132d2:	f1c3 0207 	rsb	r2, r3, #7
 80132d6:	693b      	ldr	r3, [r7, #16]
 80132d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132de:	2201      	movs	r2, #1
 80132e0:	409a      	lsls	r2, r3
 80132e2:	4b0f      	ldr	r3, [pc, #60]	@ (8013320 <xTaskPriorityDisinherit+0x10c>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	4313      	orrs	r3, r2
 80132e8:	4a0d      	ldr	r2, [pc, #52]	@ (8013320 <xTaskPriorityDisinherit+0x10c>)
 80132ea:	6013      	str	r3, [r2, #0]
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132f0:	4613      	mov	r3, r2
 80132f2:	009b      	lsls	r3, r3, #2
 80132f4:	4413      	add	r3, r2
 80132f6:	009b      	lsls	r3, r3, #2
 80132f8:	4a08      	ldr	r2, [pc, #32]	@ (801331c <xTaskPriorityDisinherit+0x108>)
 80132fa:	441a      	add	r2, r3
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	3304      	adds	r3, #4
 8013300:	4619      	mov	r1, r3
 8013302:	4610      	mov	r0, r2
 8013304:	f7fe f8ae 	bl	8011464 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013308:	2301      	movs	r3, #1
 801330a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801330c:	697b      	ldr	r3, [r7, #20]
	}
 801330e:	4618      	mov	r0, r3
 8013310:	3718      	adds	r7, #24
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	20001310 	.word	0x20001310
 801331c:	20001314 	.word	0x20001314
 8013320:	20001418 	.word	0x20001418

08013324 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013324:	b580      	push	{r7, lr}
 8013326:	b088      	sub	sp, #32
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013332:	2301      	movs	r3, #1
 8013334:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2b00      	cmp	r3, #0
 801333a:	f000 808a 	beq.w	8013452 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801333e:	69bb      	ldr	r3, [r7, #24]
 8013340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013342:	2b00      	cmp	r3, #0
 8013344:	d10b      	bne.n	801335e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8013346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801334a:	f383 8811 	msr	BASEPRI, r3
 801334e:	f3bf 8f6f 	isb	sy
 8013352:	f3bf 8f4f 	dsb	sy
 8013356:	60fb      	str	r3, [r7, #12]
}
 8013358:	bf00      	nop
 801335a:	bf00      	nop
 801335c:	e7fd      	b.n	801335a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801335e:	69bb      	ldr	r3, [r7, #24]
 8013360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013362:	683a      	ldr	r2, [r7, #0]
 8013364:	429a      	cmp	r2, r3
 8013366:	d902      	bls.n	801336e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	61fb      	str	r3, [r7, #28]
 801336c:	e002      	b.n	8013374 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801336e:	69bb      	ldr	r3, [r7, #24]
 8013370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013372:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013378:	69fa      	ldr	r2, [r7, #28]
 801337a:	429a      	cmp	r2, r3
 801337c:	d069      	beq.n	8013452 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801337e:	69bb      	ldr	r3, [r7, #24]
 8013380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013382:	697a      	ldr	r2, [r7, #20]
 8013384:	429a      	cmp	r2, r3
 8013386:	d164      	bne.n	8013452 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013388:	4b34      	ldr	r3, [pc, #208]	@ (801345c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	69ba      	ldr	r2, [r7, #24]
 801338e:	429a      	cmp	r2, r3
 8013390:	d10b      	bne.n	80133aa <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8013392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013396:	f383 8811 	msr	BASEPRI, r3
 801339a:	f3bf 8f6f 	isb	sy
 801339e:	f3bf 8f4f 	dsb	sy
 80133a2:	60bb      	str	r3, [r7, #8]
}
 80133a4:	bf00      	nop
 80133a6:	bf00      	nop
 80133a8:	e7fd      	b.n	80133a6 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80133aa:	69bb      	ldr	r3, [r7, #24]
 80133ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133ae:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80133b0:	69bb      	ldr	r3, [r7, #24]
 80133b2:	69fa      	ldr	r2, [r7, #28]
 80133b4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80133b6:	69bb      	ldr	r3, [r7, #24]
 80133b8:	699b      	ldr	r3, [r3, #24]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	db04      	blt.n	80133c8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133be:	69fb      	ldr	r3, [r7, #28]
 80133c0:	f1c3 0207 	rsb	r2, r3, #7
 80133c4:	69bb      	ldr	r3, [r7, #24]
 80133c6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80133c8:	69bb      	ldr	r3, [r7, #24]
 80133ca:	6959      	ldr	r1, [r3, #20]
 80133cc:	693a      	ldr	r2, [r7, #16]
 80133ce:	4613      	mov	r3, r2
 80133d0:	009b      	lsls	r3, r3, #2
 80133d2:	4413      	add	r3, r2
 80133d4:	009b      	lsls	r3, r3, #2
 80133d6:	4a22      	ldr	r2, [pc, #136]	@ (8013460 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80133d8:	4413      	add	r3, r2
 80133da:	4299      	cmp	r1, r3
 80133dc:	d101      	bne.n	80133e2 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80133de:	2301      	movs	r3, #1
 80133e0:	e000      	b.n	80133e4 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 80133e2:	2300      	movs	r3, #0
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d034      	beq.n	8013452 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80133e8:	69bb      	ldr	r3, [r7, #24]
 80133ea:	3304      	adds	r3, #4
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7fe f894 	bl	801151a <uxListRemove>
 80133f2:	4603      	mov	r3, r0
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d115      	bne.n	8013424 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80133f8:	69bb      	ldr	r3, [r7, #24]
 80133fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80133fc:	4918      	ldr	r1, [pc, #96]	@ (8013460 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80133fe:	4613      	mov	r3, r2
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	4413      	add	r3, r2
 8013404:	009b      	lsls	r3, r3, #2
 8013406:	440b      	add	r3, r1
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d10a      	bne.n	8013424 <vTaskPriorityDisinheritAfterTimeout+0x100>
 801340e:	69bb      	ldr	r3, [r7, #24]
 8013410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013412:	2201      	movs	r2, #1
 8013414:	fa02 f303 	lsl.w	r3, r2, r3
 8013418:	43da      	mvns	r2, r3
 801341a:	4b12      	ldr	r3, [pc, #72]	@ (8013464 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	4013      	ands	r3, r2
 8013420:	4a10      	ldr	r2, [pc, #64]	@ (8013464 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8013422:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013428:	2201      	movs	r2, #1
 801342a:	409a      	lsls	r2, r3
 801342c:	4b0d      	ldr	r3, [pc, #52]	@ (8013464 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	4313      	orrs	r3, r2
 8013432:	4a0c      	ldr	r2, [pc, #48]	@ (8013464 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8013434:	6013      	str	r3, [r2, #0]
 8013436:	69bb      	ldr	r3, [r7, #24]
 8013438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801343a:	4613      	mov	r3, r2
 801343c:	009b      	lsls	r3, r3, #2
 801343e:	4413      	add	r3, r2
 8013440:	009b      	lsls	r3, r3, #2
 8013442:	4a07      	ldr	r2, [pc, #28]	@ (8013460 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8013444:	441a      	add	r2, r3
 8013446:	69bb      	ldr	r3, [r7, #24]
 8013448:	3304      	adds	r3, #4
 801344a:	4619      	mov	r1, r3
 801344c:	4610      	mov	r0, r2
 801344e:	f7fe f809 	bl	8011464 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013452:	bf00      	nop
 8013454:	3720      	adds	r7, #32
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	20001310 	.word	0x20001310
 8013460:	20001314 	.word	0x20001314
 8013464:	20001418 	.word	0x20001418

08013468 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8013468:	b480      	push	{r7}
 801346a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801346c:	4b07      	ldr	r3, [pc, #28]	@ (801348c <pvTaskIncrementMutexHeldCount+0x24>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d004      	beq.n	801347e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013474:	4b05      	ldr	r3, [pc, #20]	@ (801348c <pvTaskIncrementMutexHeldCount+0x24>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801347a:	3201      	adds	r2, #1
 801347c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801347e:	4b03      	ldr	r3, [pc, #12]	@ (801348c <pvTaskIncrementMutexHeldCount+0x24>)
 8013480:	681b      	ldr	r3, [r3, #0]
	}
 8013482:	4618      	mov	r0, r3
 8013484:	46bd      	mov	sp, r7
 8013486:	bc80      	pop	{r7}
 8013488:	4770      	bx	lr
 801348a:	bf00      	nop
 801348c:	20001310 	.word	0x20001310

08013490 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b084      	sub	sp, #16
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
 8013498:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801349a:	4b29      	ldr	r3, [pc, #164]	@ (8013540 <prvAddCurrentTaskToDelayedList+0xb0>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134a0:	4b28      	ldr	r3, [pc, #160]	@ (8013544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	3304      	adds	r3, #4
 80134a6:	4618      	mov	r0, r3
 80134a8:	f7fe f837 	bl	801151a <uxListRemove>
 80134ac:	4603      	mov	r3, r0
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d10b      	bne.n	80134ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80134b2:	4b24      	ldr	r3, [pc, #144]	@ (8013544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134b8:	2201      	movs	r2, #1
 80134ba:	fa02 f303 	lsl.w	r3, r2, r3
 80134be:	43da      	mvns	r2, r3
 80134c0:	4b21      	ldr	r3, [pc, #132]	@ (8013548 <prvAddCurrentTaskToDelayedList+0xb8>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	4013      	ands	r3, r2
 80134c6:	4a20      	ldr	r2, [pc, #128]	@ (8013548 <prvAddCurrentTaskToDelayedList+0xb8>)
 80134c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134d0:	d10a      	bne.n	80134e8 <prvAddCurrentTaskToDelayedList+0x58>
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d007      	beq.n	80134e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80134d8:	4b1a      	ldr	r3, [pc, #104]	@ (8013544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	3304      	adds	r3, #4
 80134de:	4619      	mov	r1, r3
 80134e0:	481a      	ldr	r0, [pc, #104]	@ (801354c <prvAddCurrentTaskToDelayedList+0xbc>)
 80134e2:	f7fd ffbf 	bl	8011464 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80134e6:	e026      	b.n	8013536 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80134e8:	68fa      	ldr	r2, [r7, #12]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	4413      	add	r3, r2
 80134ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80134f0:	4b14      	ldr	r3, [pc, #80]	@ (8013544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	68ba      	ldr	r2, [r7, #8]
 80134f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80134f8:	68ba      	ldr	r2, [r7, #8]
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d209      	bcs.n	8013514 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013500:	4b13      	ldr	r3, [pc, #76]	@ (8013550 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013502:	681a      	ldr	r2, [r3, #0]
 8013504:	4b0f      	ldr	r3, [pc, #60]	@ (8013544 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	3304      	adds	r3, #4
 801350a:	4619      	mov	r1, r3
 801350c:	4610      	mov	r0, r2
 801350e:	f7fd ffcc 	bl	80114aa <vListInsert>
}
 8013512:	e010      	b.n	8013536 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013514:	4b0f      	ldr	r3, [pc, #60]	@ (8013554 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013516:	681a      	ldr	r2, [r3, #0]
 8013518:	4b0a      	ldr	r3, [pc, #40]	@ (8013544 <prvAddCurrentTaskToDelayedList+0xb4>)
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	3304      	adds	r3, #4
 801351e:	4619      	mov	r1, r3
 8013520:	4610      	mov	r0, r2
 8013522:	f7fd ffc2 	bl	80114aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013526:	4b0c      	ldr	r3, [pc, #48]	@ (8013558 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	68ba      	ldr	r2, [r7, #8]
 801352c:	429a      	cmp	r2, r3
 801352e:	d202      	bcs.n	8013536 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013530:	4a09      	ldr	r2, [pc, #36]	@ (8013558 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013532:	68bb      	ldr	r3, [r7, #8]
 8013534:	6013      	str	r3, [r2, #0]
}
 8013536:	bf00      	nop
 8013538:	3710      	adds	r7, #16
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}
 801353e:	bf00      	nop
 8013540:	20001414 	.word	0x20001414
 8013544:	20001310 	.word	0x20001310
 8013548:	20001418 	.word	0x20001418
 801354c:	200013fc 	.word	0x200013fc
 8013550:	200013cc 	.word	0x200013cc
 8013554:	200013c8 	.word	0x200013c8
 8013558:	20001430 	.word	0x20001430

0801355c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801355c:	b480      	push	{r7}
 801355e:	b085      	sub	sp, #20
 8013560:	af00      	add	r7, sp, #0
 8013562:	60f8      	str	r0, [r7, #12]
 8013564:	60b9      	str	r1, [r7, #8]
 8013566:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	3b04      	subs	r3, #4
 801356c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	3b04      	subs	r3, #4
 801357a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	f023 0201 	bic.w	r2, r3, #1
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	3b04      	subs	r3, #4
 801358a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801358c:	4a08      	ldr	r2, [pc, #32]	@ (80135b0 <pxPortInitialiseStack+0x54>)
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	3b14      	subs	r3, #20
 8013596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	3b20      	subs	r3, #32
 80135a2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80135a4:	68fb      	ldr	r3, [r7, #12]
}
 80135a6:	4618      	mov	r0, r3
 80135a8:	3714      	adds	r7, #20
 80135aa:	46bd      	mov	sp, r7
 80135ac:	bc80      	pop	{r7}
 80135ae:	4770      	bx	lr
 80135b0:	080135b5 	.word	0x080135b5

080135b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80135b4:	b480      	push	{r7}
 80135b6:	b085      	sub	sp, #20
 80135b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80135ba:	2300      	movs	r3, #0
 80135bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80135be:	4b12      	ldr	r3, [pc, #72]	@ (8013608 <prvTaskExitError+0x54>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135c6:	d00b      	beq.n	80135e0 <prvTaskExitError+0x2c>
	__asm volatile
 80135c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135cc:	f383 8811 	msr	BASEPRI, r3
 80135d0:	f3bf 8f6f 	isb	sy
 80135d4:	f3bf 8f4f 	dsb	sy
 80135d8:	60fb      	str	r3, [r7, #12]
}
 80135da:	bf00      	nop
 80135dc:	bf00      	nop
 80135de:	e7fd      	b.n	80135dc <prvTaskExitError+0x28>
	__asm volatile
 80135e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135e4:	f383 8811 	msr	BASEPRI, r3
 80135e8:	f3bf 8f6f 	isb	sy
 80135ec:	f3bf 8f4f 	dsb	sy
 80135f0:	60bb      	str	r3, [r7, #8]
}
 80135f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80135f4:	bf00      	nop
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d0fc      	beq.n	80135f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80135fc:	bf00      	nop
 80135fe:	bf00      	nop
 8013600:	3714      	adds	r7, #20
 8013602:	46bd      	mov	sp, r7
 8013604:	bc80      	pop	{r7}
 8013606:	4770      	bx	lr
 8013608:	20000040 	.word	0x20000040
 801360c:	00000000 	.word	0x00000000

08013610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013610:	4b07      	ldr	r3, [pc, #28]	@ (8013630 <pxCurrentTCBConst2>)
 8013612:	6819      	ldr	r1, [r3, #0]
 8013614:	6808      	ldr	r0, [r1, #0]
 8013616:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801361a:	f380 8809 	msr	PSP, r0
 801361e:	f3bf 8f6f 	isb	sy
 8013622:	f04f 0000 	mov.w	r0, #0
 8013626:	f380 8811 	msr	BASEPRI, r0
 801362a:	f04e 0e0d 	orr.w	lr, lr, #13
 801362e:	4770      	bx	lr

08013630 <pxCurrentTCBConst2>:
 8013630:	20001310 	.word	0x20001310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013634:	bf00      	nop
 8013636:	bf00      	nop

08013638 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8013638:	4806      	ldr	r0, [pc, #24]	@ (8013654 <prvPortStartFirstTask+0x1c>)
 801363a:	6800      	ldr	r0, [r0, #0]
 801363c:	6800      	ldr	r0, [r0, #0]
 801363e:	f380 8808 	msr	MSP, r0
 8013642:	b662      	cpsie	i
 8013644:	b661      	cpsie	f
 8013646:	f3bf 8f4f 	dsb	sy
 801364a:	f3bf 8f6f 	isb	sy
 801364e:	df00      	svc	0
 8013650:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013652:	bf00      	nop
 8013654:	e000ed08 	.word	0xe000ed08

08013658 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b084      	sub	sp, #16
 801365c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801365e:	4b32      	ldr	r3, [pc, #200]	@ (8013728 <xPortStartScheduler+0xd0>)
 8013660:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	781b      	ldrb	r3, [r3, #0]
 8013666:	b2db      	uxtb	r3, r3
 8013668:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	22ff      	movs	r2, #255	@ 0xff
 801366e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	b2db      	uxtb	r3, r3
 8013676:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013678:	78fb      	ldrb	r3, [r7, #3]
 801367a:	b2db      	uxtb	r3, r3
 801367c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8013680:	b2da      	uxtb	r2, r3
 8013682:	4b2a      	ldr	r3, [pc, #168]	@ (801372c <xPortStartScheduler+0xd4>)
 8013684:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013686:	4b2a      	ldr	r3, [pc, #168]	@ (8013730 <xPortStartScheduler+0xd8>)
 8013688:	2207      	movs	r2, #7
 801368a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801368c:	e009      	b.n	80136a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801368e:	4b28      	ldr	r3, [pc, #160]	@ (8013730 <xPortStartScheduler+0xd8>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	3b01      	subs	r3, #1
 8013694:	4a26      	ldr	r2, [pc, #152]	@ (8013730 <xPortStartScheduler+0xd8>)
 8013696:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013698:	78fb      	ldrb	r3, [r7, #3]
 801369a:	b2db      	uxtb	r3, r3
 801369c:	005b      	lsls	r3, r3, #1
 801369e:	b2db      	uxtb	r3, r3
 80136a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80136a2:	78fb      	ldrb	r3, [r7, #3]
 80136a4:	b2db      	uxtb	r3, r3
 80136a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80136aa:	2b80      	cmp	r3, #128	@ 0x80
 80136ac:	d0ef      	beq.n	801368e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80136ae:	4b20      	ldr	r3, [pc, #128]	@ (8013730 <xPortStartScheduler+0xd8>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	f1c3 0307 	rsb	r3, r3, #7
 80136b6:	2b04      	cmp	r3, #4
 80136b8:	d00b      	beq.n	80136d2 <xPortStartScheduler+0x7a>
	__asm volatile
 80136ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136be:	f383 8811 	msr	BASEPRI, r3
 80136c2:	f3bf 8f6f 	isb	sy
 80136c6:	f3bf 8f4f 	dsb	sy
 80136ca:	60bb      	str	r3, [r7, #8]
}
 80136cc:	bf00      	nop
 80136ce:	bf00      	nop
 80136d0:	e7fd      	b.n	80136ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80136d2:	4b17      	ldr	r3, [pc, #92]	@ (8013730 <xPortStartScheduler+0xd8>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	021b      	lsls	r3, r3, #8
 80136d8:	4a15      	ldr	r2, [pc, #84]	@ (8013730 <xPortStartScheduler+0xd8>)
 80136da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80136dc:	4b14      	ldr	r3, [pc, #80]	@ (8013730 <xPortStartScheduler+0xd8>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80136e4:	4a12      	ldr	r2, [pc, #72]	@ (8013730 <xPortStartScheduler+0xd8>)
 80136e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	b2da      	uxtb	r2, r3
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80136f0:	4b10      	ldr	r3, [pc, #64]	@ (8013734 <xPortStartScheduler+0xdc>)
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	4a0f      	ldr	r2, [pc, #60]	@ (8013734 <xPortStartScheduler+0xdc>)
 80136f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80136fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80136fc:	4b0d      	ldr	r3, [pc, #52]	@ (8013734 <xPortStartScheduler+0xdc>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	4a0c      	ldr	r2, [pc, #48]	@ (8013734 <xPortStartScheduler+0xdc>)
 8013702:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013706:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013708:	f000 f8b8 	bl	801387c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801370c:	4b0a      	ldr	r3, [pc, #40]	@ (8013738 <xPortStartScheduler+0xe0>)
 801370e:	2200      	movs	r2, #0
 8013710:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013712:	f7ff ff91 	bl	8013638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013716:	f7ff fa5b 	bl	8012bd0 <vTaskSwitchContext>
	prvTaskExitError();
 801371a:	f7ff ff4b 	bl	80135b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801371e:	2300      	movs	r3, #0
}
 8013720:	4618      	mov	r0, r3
 8013722:	3710      	adds	r7, #16
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}
 8013728:	e000e400 	.word	0xe000e400
 801372c:	2000143c 	.word	0x2000143c
 8013730:	20001440 	.word	0x20001440
 8013734:	e000ed20 	.word	0xe000ed20
 8013738:	20000040 	.word	0x20000040

0801373c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801373c:	b480      	push	{r7}
 801373e:	b083      	sub	sp, #12
 8013740:	af00      	add	r7, sp, #0
	__asm volatile
 8013742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013746:	f383 8811 	msr	BASEPRI, r3
 801374a:	f3bf 8f6f 	isb	sy
 801374e:	f3bf 8f4f 	dsb	sy
 8013752:	607b      	str	r3, [r7, #4]
}
 8013754:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013756:	4b0f      	ldr	r3, [pc, #60]	@ (8013794 <vPortEnterCritical+0x58>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	3301      	adds	r3, #1
 801375c:	4a0d      	ldr	r2, [pc, #52]	@ (8013794 <vPortEnterCritical+0x58>)
 801375e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013760:	4b0c      	ldr	r3, [pc, #48]	@ (8013794 <vPortEnterCritical+0x58>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	2b01      	cmp	r3, #1
 8013766:	d110      	bne.n	801378a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013768:	4b0b      	ldr	r3, [pc, #44]	@ (8013798 <vPortEnterCritical+0x5c>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	b2db      	uxtb	r3, r3
 801376e:	2b00      	cmp	r3, #0
 8013770:	d00b      	beq.n	801378a <vPortEnterCritical+0x4e>
	__asm volatile
 8013772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013776:	f383 8811 	msr	BASEPRI, r3
 801377a:	f3bf 8f6f 	isb	sy
 801377e:	f3bf 8f4f 	dsb	sy
 8013782:	603b      	str	r3, [r7, #0]
}
 8013784:	bf00      	nop
 8013786:	bf00      	nop
 8013788:	e7fd      	b.n	8013786 <vPortEnterCritical+0x4a>
	}
}
 801378a:	bf00      	nop
 801378c:	370c      	adds	r7, #12
 801378e:	46bd      	mov	sp, r7
 8013790:	bc80      	pop	{r7}
 8013792:	4770      	bx	lr
 8013794:	20000040 	.word	0x20000040
 8013798:	e000ed04 	.word	0xe000ed04

0801379c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801379c:	b480      	push	{r7}
 801379e:	b083      	sub	sp, #12
 80137a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80137a2:	4b12      	ldr	r3, [pc, #72]	@ (80137ec <vPortExitCritical+0x50>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d10b      	bne.n	80137c2 <vPortExitCritical+0x26>
	__asm volatile
 80137aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137ae:	f383 8811 	msr	BASEPRI, r3
 80137b2:	f3bf 8f6f 	isb	sy
 80137b6:	f3bf 8f4f 	dsb	sy
 80137ba:	607b      	str	r3, [r7, #4]
}
 80137bc:	bf00      	nop
 80137be:	bf00      	nop
 80137c0:	e7fd      	b.n	80137be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80137c2:	4b0a      	ldr	r3, [pc, #40]	@ (80137ec <vPortExitCritical+0x50>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	3b01      	subs	r3, #1
 80137c8:	4a08      	ldr	r2, [pc, #32]	@ (80137ec <vPortExitCritical+0x50>)
 80137ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80137cc:	4b07      	ldr	r3, [pc, #28]	@ (80137ec <vPortExitCritical+0x50>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d105      	bne.n	80137e0 <vPortExitCritical+0x44>
 80137d4:	2300      	movs	r3, #0
 80137d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	f383 8811 	msr	BASEPRI, r3
}
 80137de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80137e0:	bf00      	nop
 80137e2:	370c      	adds	r7, #12
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bc80      	pop	{r7}
 80137e8:	4770      	bx	lr
 80137ea:	bf00      	nop
 80137ec:	20000040 	.word	0x20000040

080137f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80137f0:	f3ef 8009 	mrs	r0, PSP
 80137f4:	f3bf 8f6f 	isb	sy
 80137f8:	4b0d      	ldr	r3, [pc, #52]	@ (8013830 <pxCurrentTCBConst>)
 80137fa:	681a      	ldr	r2, [r3, #0]
 80137fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013800:	6010      	str	r0, [r2, #0]
 8013802:	e92d 4008 	stmdb	sp!, {r3, lr}
 8013806:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801380a:	f380 8811 	msr	BASEPRI, r0
 801380e:	f7ff f9df 	bl	8012bd0 <vTaskSwitchContext>
 8013812:	f04f 0000 	mov.w	r0, #0
 8013816:	f380 8811 	msr	BASEPRI, r0
 801381a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801381e:	6819      	ldr	r1, [r3, #0]
 8013820:	6808      	ldr	r0, [r1, #0]
 8013822:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013826:	f380 8809 	msr	PSP, r0
 801382a:	f3bf 8f6f 	isb	sy
 801382e:	4770      	bx	lr

08013830 <pxCurrentTCBConst>:
 8013830:	20001310 	.word	0x20001310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013834:	bf00      	nop
 8013836:	bf00      	nop

08013838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b082      	sub	sp, #8
 801383c:	af00      	add	r7, sp, #0
	__asm volatile
 801383e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013842:	f383 8811 	msr	BASEPRI, r3
 8013846:	f3bf 8f6f 	isb	sy
 801384a:	f3bf 8f4f 	dsb	sy
 801384e:	607b      	str	r3, [r7, #4]
}
 8013850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013852:	f7ff f8ff 	bl	8012a54 <xTaskIncrementTick>
 8013856:	4603      	mov	r3, r0
 8013858:	2b00      	cmp	r3, #0
 801385a:	d003      	beq.n	8013864 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801385c:	4b06      	ldr	r3, [pc, #24]	@ (8013878 <SysTick_Handler+0x40>)
 801385e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013862:	601a      	str	r2, [r3, #0]
 8013864:	2300      	movs	r3, #0
 8013866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	f383 8811 	msr	BASEPRI, r3
}
 801386e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013870:	bf00      	nop
 8013872:	3708      	adds	r7, #8
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}
 8013878:	e000ed04 	.word	0xe000ed04

0801387c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801387c:	b480      	push	{r7}
 801387e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013880:	4b0a      	ldr	r3, [pc, #40]	@ (80138ac <vPortSetupTimerInterrupt+0x30>)
 8013882:	2200      	movs	r2, #0
 8013884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013886:	4b0a      	ldr	r3, [pc, #40]	@ (80138b0 <vPortSetupTimerInterrupt+0x34>)
 8013888:	2200      	movs	r2, #0
 801388a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801388c:	4b09      	ldr	r3, [pc, #36]	@ (80138b4 <vPortSetupTimerInterrupt+0x38>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	4a09      	ldr	r2, [pc, #36]	@ (80138b8 <vPortSetupTimerInterrupt+0x3c>)
 8013892:	fba2 2303 	umull	r2, r3, r2, r3
 8013896:	099b      	lsrs	r3, r3, #6
 8013898:	4a08      	ldr	r2, [pc, #32]	@ (80138bc <vPortSetupTimerInterrupt+0x40>)
 801389a:	3b01      	subs	r3, #1
 801389c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801389e:	4b03      	ldr	r3, [pc, #12]	@ (80138ac <vPortSetupTimerInterrupt+0x30>)
 80138a0:	2207      	movs	r2, #7
 80138a2:	601a      	str	r2, [r3, #0]
}
 80138a4:	bf00      	nop
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bc80      	pop	{r7}
 80138aa:	4770      	bx	lr
 80138ac:	e000e010 	.word	0xe000e010
 80138b0:	e000e018 	.word	0xe000e018
 80138b4:	20000028 	.word	0x20000028
 80138b8:	10624dd3 	.word	0x10624dd3
 80138bc:	e000e014 	.word	0xe000e014

080138c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80138c0:	b480      	push	{r7}
 80138c2:	b085      	sub	sp, #20
 80138c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80138c6:	f3ef 8305 	mrs	r3, IPSR
 80138ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	2b0f      	cmp	r3, #15
 80138d0:	d915      	bls.n	80138fe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80138d2:	4a17      	ldr	r2, [pc, #92]	@ (8013930 <vPortValidateInterruptPriority+0x70>)
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	4413      	add	r3, r2
 80138d8:	781b      	ldrb	r3, [r3, #0]
 80138da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80138dc:	4b15      	ldr	r3, [pc, #84]	@ (8013934 <vPortValidateInterruptPriority+0x74>)
 80138de:	781b      	ldrb	r3, [r3, #0]
 80138e0:	7afa      	ldrb	r2, [r7, #11]
 80138e2:	429a      	cmp	r2, r3
 80138e4:	d20b      	bcs.n	80138fe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80138e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138ea:	f383 8811 	msr	BASEPRI, r3
 80138ee:	f3bf 8f6f 	isb	sy
 80138f2:	f3bf 8f4f 	dsb	sy
 80138f6:	607b      	str	r3, [r7, #4]
}
 80138f8:	bf00      	nop
 80138fa:	bf00      	nop
 80138fc:	e7fd      	b.n	80138fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80138fe:	4b0e      	ldr	r3, [pc, #56]	@ (8013938 <vPortValidateInterruptPriority+0x78>)
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013906:	4b0d      	ldr	r3, [pc, #52]	@ (801393c <vPortValidateInterruptPriority+0x7c>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	429a      	cmp	r2, r3
 801390c:	d90b      	bls.n	8013926 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 801390e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013912:	f383 8811 	msr	BASEPRI, r3
 8013916:	f3bf 8f6f 	isb	sy
 801391a:	f3bf 8f4f 	dsb	sy
 801391e:	603b      	str	r3, [r7, #0]
}
 8013920:	bf00      	nop
 8013922:	bf00      	nop
 8013924:	e7fd      	b.n	8013922 <vPortValidateInterruptPriority+0x62>
	}
 8013926:	bf00      	nop
 8013928:	3714      	adds	r7, #20
 801392a:	46bd      	mov	sp, r7
 801392c:	bc80      	pop	{r7}
 801392e:	4770      	bx	lr
 8013930:	e000e3f0 	.word	0xe000e3f0
 8013934:	2000143c 	.word	0x2000143c
 8013938:	e000ed0c 	.word	0xe000ed0c
 801393c:	20001440 	.word	0x20001440

08013940 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b08a      	sub	sp, #40	@ 0x28
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013948:	2300      	movs	r3, #0
 801394a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801394c:	f7fe ffc8 	bl	80128e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013950:	4b5a      	ldr	r3, [pc, #360]	@ (8013abc <pvPortMalloc+0x17c>)
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d101      	bne.n	801395c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013958:	f000 f916 	bl	8013b88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801395c:	4b58      	ldr	r3, [pc, #352]	@ (8013ac0 <pvPortMalloc+0x180>)
 801395e:	681a      	ldr	r2, [r3, #0]
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	4013      	ands	r3, r2
 8013964:	2b00      	cmp	r3, #0
 8013966:	f040 8090 	bne.w	8013a8a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d01e      	beq.n	80139ae <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8013970:	2208      	movs	r2, #8
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	4413      	add	r3, r2
 8013976:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f003 0307 	and.w	r3, r3, #7
 801397e:	2b00      	cmp	r3, #0
 8013980:	d015      	beq.n	80139ae <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f023 0307 	bic.w	r3, r3, #7
 8013988:	3308      	adds	r3, #8
 801398a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	f003 0307 	and.w	r3, r3, #7
 8013992:	2b00      	cmp	r3, #0
 8013994:	d00b      	beq.n	80139ae <pvPortMalloc+0x6e>
	__asm volatile
 8013996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801399a:	f383 8811 	msr	BASEPRI, r3
 801399e:	f3bf 8f6f 	isb	sy
 80139a2:	f3bf 8f4f 	dsb	sy
 80139a6:	617b      	str	r3, [r7, #20]
}
 80139a8:	bf00      	nop
 80139aa:	bf00      	nop
 80139ac:	e7fd      	b.n	80139aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d06a      	beq.n	8013a8a <pvPortMalloc+0x14a>
 80139b4:	4b43      	ldr	r3, [pc, #268]	@ (8013ac4 <pvPortMalloc+0x184>)
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	687a      	ldr	r2, [r7, #4]
 80139ba:	429a      	cmp	r2, r3
 80139bc:	d865      	bhi.n	8013a8a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80139be:	4b42      	ldr	r3, [pc, #264]	@ (8013ac8 <pvPortMalloc+0x188>)
 80139c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80139c2:	4b41      	ldr	r3, [pc, #260]	@ (8013ac8 <pvPortMalloc+0x188>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80139c8:	e004      	b.n	80139d4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80139ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80139ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80139d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139d6:	685b      	ldr	r3, [r3, #4]
 80139d8:	687a      	ldr	r2, [r7, #4]
 80139da:	429a      	cmp	r2, r3
 80139dc:	d903      	bls.n	80139e6 <pvPortMalloc+0xa6>
 80139de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d1f1      	bne.n	80139ca <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80139e6:	4b35      	ldr	r3, [pc, #212]	@ (8013abc <pvPortMalloc+0x17c>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80139ec:	429a      	cmp	r2, r3
 80139ee:	d04c      	beq.n	8013a8a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80139f0:	6a3b      	ldr	r3, [r7, #32]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	2208      	movs	r2, #8
 80139f6:	4413      	add	r3, r2
 80139f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80139fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	6a3b      	ldr	r3, [r7, #32]
 8013a00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a04:	685a      	ldr	r2, [r3, #4]
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	1ad2      	subs	r2, r2, r3
 8013a0a:	2308      	movs	r3, #8
 8013a0c:	005b      	lsls	r3, r3, #1
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d920      	bls.n	8013a54 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	4413      	add	r3, r2
 8013a18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013a1a:	69bb      	ldr	r3, [r7, #24]
 8013a1c:	f003 0307 	and.w	r3, r3, #7
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d00b      	beq.n	8013a3c <pvPortMalloc+0xfc>
	__asm volatile
 8013a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a28:	f383 8811 	msr	BASEPRI, r3
 8013a2c:	f3bf 8f6f 	isb	sy
 8013a30:	f3bf 8f4f 	dsb	sy
 8013a34:	613b      	str	r3, [r7, #16]
}
 8013a36:	bf00      	nop
 8013a38:	bf00      	nop
 8013a3a:	e7fd      	b.n	8013a38 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a3e:	685a      	ldr	r2, [r3, #4]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	1ad2      	subs	r2, r2, r3
 8013a44:	69bb      	ldr	r3, [r7, #24]
 8013a46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a4a:	687a      	ldr	r2, [r7, #4]
 8013a4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013a4e:	69b8      	ldr	r0, [r7, #24]
 8013a50:	f000 f8fc 	bl	8013c4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013a54:	4b1b      	ldr	r3, [pc, #108]	@ (8013ac4 <pvPortMalloc+0x184>)
 8013a56:	681a      	ldr	r2, [r3, #0]
 8013a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a5a:	685b      	ldr	r3, [r3, #4]
 8013a5c:	1ad3      	subs	r3, r2, r3
 8013a5e:	4a19      	ldr	r2, [pc, #100]	@ (8013ac4 <pvPortMalloc+0x184>)
 8013a60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013a62:	4b18      	ldr	r3, [pc, #96]	@ (8013ac4 <pvPortMalloc+0x184>)
 8013a64:	681a      	ldr	r2, [r3, #0]
 8013a66:	4b19      	ldr	r3, [pc, #100]	@ (8013acc <pvPortMalloc+0x18c>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	d203      	bcs.n	8013a76 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013a6e:	4b15      	ldr	r3, [pc, #84]	@ (8013ac4 <pvPortMalloc+0x184>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	4a16      	ldr	r2, [pc, #88]	@ (8013acc <pvPortMalloc+0x18c>)
 8013a74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a78:	685a      	ldr	r2, [r3, #4]
 8013a7a:	4b11      	ldr	r3, [pc, #68]	@ (8013ac0 <pvPortMalloc+0x180>)
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	431a      	orrs	r2, r3
 8013a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a86:	2200      	movs	r2, #0
 8013a88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013a8a:	f7fe ff37 	bl	80128fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013a8e:	69fb      	ldr	r3, [r7, #28]
 8013a90:	f003 0307 	and.w	r3, r3, #7
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d00b      	beq.n	8013ab0 <pvPortMalloc+0x170>
	__asm volatile
 8013a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a9c:	f383 8811 	msr	BASEPRI, r3
 8013aa0:	f3bf 8f6f 	isb	sy
 8013aa4:	f3bf 8f4f 	dsb	sy
 8013aa8:	60fb      	str	r3, [r7, #12]
}
 8013aaa:	bf00      	nop
 8013aac:	bf00      	nop
 8013aae:	e7fd      	b.n	8013aac <pvPortMalloc+0x16c>
	return pvReturn;
 8013ab0:	69fb      	ldr	r3, [r7, #28]
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	3728      	adds	r7, #40	@ 0x28
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}
 8013aba:	bf00      	nop
 8013abc:	20002c4c 	.word	0x20002c4c
 8013ac0:	20002c58 	.word	0x20002c58
 8013ac4:	20002c50 	.word	0x20002c50
 8013ac8:	20002c44 	.word	0x20002c44
 8013acc:	20002c54 	.word	0x20002c54

08013ad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b086      	sub	sp, #24
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d04a      	beq.n	8013b78 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013ae2:	2308      	movs	r3, #8
 8013ae4:	425b      	negs	r3, r3
 8013ae6:	697a      	ldr	r2, [r7, #20]
 8013ae8:	4413      	add	r3, r2
 8013aea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013aec:	697b      	ldr	r3, [r7, #20]
 8013aee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013af0:	693b      	ldr	r3, [r7, #16]
 8013af2:	685a      	ldr	r2, [r3, #4]
 8013af4:	4b22      	ldr	r3, [pc, #136]	@ (8013b80 <vPortFree+0xb0>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	4013      	ands	r3, r2
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d10b      	bne.n	8013b16 <vPortFree+0x46>
	__asm volatile
 8013afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b02:	f383 8811 	msr	BASEPRI, r3
 8013b06:	f3bf 8f6f 	isb	sy
 8013b0a:	f3bf 8f4f 	dsb	sy
 8013b0e:	60fb      	str	r3, [r7, #12]
}
 8013b10:	bf00      	nop
 8013b12:	bf00      	nop
 8013b14:	e7fd      	b.n	8013b12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013b16:	693b      	ldr	r3, [r7, #16]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d00b      	beq.n	8013b36 <vPortFree+0x66>
	__asm volatile
 8013b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b22:	f383 8811 	msr	BASEPRI, r3
 8013b26:	f3bf 8f6f 	isb	sy
 8013b2a:	f3bf 8f4f 	dsb	sy
 8013b2e:	60bb      	str	r3, [r7, #8]
}
 8013b30:	bf00      	nop
 8013b32:	bf00      	nop
 8013b34:	e7fd      	b.n	8013b32 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013b36:	693b      	ldr	r3, [r7, #16]
 8013b38:	685a      	ldr	r2, [r3, #4]
 8013b3a:	4b11      	ldr	r3, [pc, #68]	@ (8013b80 <vPortFree+0xb0>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	4013      	ands	r3, r2
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d019      	beq.n	8013b78 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d115      	bne.n	8013b78 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013b4c:	693b      	ldr	r3, [r7, #16]
 8013b4e:	685a      	ldr	r2, [r3, #4]
 8013b50:	4b0b      	ldr	r3, [pc, #44]	@ (8013b80 <vPortFree+0xb0>)
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	43db      	mvns	r3, r3
 8013b56:	401a      	ands	r2, r3
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013b5c:	f7fe fec0 	bl	80128e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013b60:	693b      	ldr	r3, [r7, #16]
 8013b62:	685a      	ldr	r2, [r3, #4]
 8013b64:	4b07      	ldr	r3, [pc, #28]	@ (8013b84 <vPortFree+0xb4>)
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	4413      	add	r3, r2
 8013b6a:	4a06      	ldr	r2, [pc, #24]	@ (8013b84 <vPortFree+0xb4>)
 8013b6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013b6e:	6938      	ldr	r0, [r7, #16]
 8013b70:	f000 f86c 	bl	8013c4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013b74:	f7fe fec2 	bl	80128fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013b78:	bf00      	nop
 8013b7a:	3718      	adds	r7, #24
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}
 8013b80:	20002c58 	.word	0x20002c58
 8013b84:	20002c50 	.word	0x20002c50

08013b88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013b88:	b480      	push	{r7}
 8013b8a:	b085      	sub	sp, #20
 8013b8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013b8e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8013b92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013b94:	4b27      	ldr	r3, [pc, #156]	@ (8013c34 <prvHeapInit+0xac>)
 8013b96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	f003 0307 	and.w	r3, r3, #7
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d00c      	beq.n	8013bbc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	3307      	adds	r3, #7
 8013ba6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	f023 0307 	bic.w	r3, r3, #7
 8013bae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013bb0:	68ba      	ldr	r2, [r7, #8]
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	1ad3      	subs	r3, r2, r3
 8013bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8013c34 <prvHeapInit+0xac>)
 8013bb8:	4413      	add	r3, r2
 8013bba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8013c38 <prvHeapInit+0xb0>)
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8013c38 <prvHeapInit+0xb0>)
 8013bc8:	2200      	movs	r2, #0
 8013bca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	68ba      	ldr	r2, [r7, #8]
 8013bd0:	4413      	add	r3, r2
 8013bd2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013bd4:	2208      	movs	r2, #8
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	1a9b      	subs	r3, r3, r2
 8013bda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	f023 0307 	bic.w	r3, r3, #7
 8013be2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	4a15      	ldr	r2, [pc, #84]	@ (8013c3c <prvHeapInit+0xb4>)
 8013be8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013bea:	4b14      	ldr	r3, [pc, #80]	@ (8013c3c <prvHeapInit+0xb4>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	2200      	movs	r2, #0
 8013bf0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013bf2:	4b12      	ldr	r3, [pc, #72]	@ (8013c3c <prvHeapInit+0xb4>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	68fa      	ldr	r2, [r7, #12]
 8013c02:	1ad2      	subs	r2, r2, r3
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013c08:	4b0c      	ldr	r3, [pc, #48]	@ (8013c3c <prvHeapInit+0xb4>)
 8013c0a:	681a      	ldr	r2, [r3, #0]
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	685b      	ldr	r3, [r3, #4]
 8013c14:	4a0a      	ldr	r2, [pc, #40]	@ (8013c40 <prvHeapInit+0xb8>)
 8013c16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	685b      	ldr	r3, [r3, #4]
 8013c1c:	4a09      	ldr	r2, [pc, #36]	@ (8013c44 <prvHeapInit+0xbc>)
 8013c1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013c20:	4b09      	ldr	r3, [pc, #36]	@ (8013c48 <prvHeapInit+0xc0>)
 8013c22:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013c26:	601a      	str	r2, [r3, #0]
}
 8013c28:	bf00      	nop
 8013c2a:	3714      	adds	r7, #20
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bc80      	pop	{r7}
 8013c30:	4770      	bx	lr
 8013c32:	bf00      	nop
 8013c34:	20001444 	.word	0x20001444
 8013c38:	20002c44 	.word	0x20002c44
 8013c3c:	20002c4c 	.word	0x20002c4c
 8013c40:	20002c54 	.word	0x20002c54
 8013c44:	20002c50 	.word	0x20002c50
 8013c48:	20002c58 	.word	0x20002c58

08013c4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013c4c:	b480      	push	{r7}
 8013c4e:	b085      	sub	sp, #20
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013c54:	4b27      	ldr	r3, [pc, #156]	@ (8013cf4 <prvInsertBlockIntoFreeList+0xa8>)
 8013c56:	60fb      	str	r3, [r7, #12]
 8013c58:	e002      	b.n	8013c60 <prvInsertBlockIntoFreeList+0x14>
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	60fb      	str	r3, [r7, #12]
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	687a      	ldr	r2, [r7, #4]
 8013c66:	429a      	cmp	r2, r3
 8013c68:	d8f7      	bhi.n	8013c5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	685b      	ldr	r3, [r3, #4]
 8013c72:	68ba      	ldr	r2, [r7, #8]
 8013c74:	4413      	add	r3, r2
 8013c76:	687a      	ldr	r2, [r7, #4]
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d108      	bne.n	8013c8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	685a      	ldr	r2, [r3, #4]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	685b      	ldr	r3, [r3, #4]
 8013c84:	441a      	add	r2, r3
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	685b      	ldr	r3, [r3, #4]
 8013c96:	68ba      	ldr	r2, [r7, #8]
 8013c98:	441a      	add	r2, r3
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d118      	bne.n	8013cd4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	681a      	ldr	r2, [r3, #0]
 8013ca6:	4b14      	ldr	r3, [pc, #80]	@ (8013cf8 <prvInsertBlockIntoFreeList+0xac>)
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	429a      	cmp	r2, r3
 8013cac:	d00d      	beq.n	8013cca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	685a      	ldr	r2, [r3, #4]
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	685b      	ldr	r3, [r3, #4]
 8013cb8:	441a      	add	r2, r3
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	681a      	ldr	r2, [r3, #0]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	601a      	str	r2, [r3, #0]
 8013cc8:	e008      	b.n	8013cdc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013cca:	4b0b      	ldr	r3, [pc, #44]	@ (8013cf8 <prvInsertBlockIntoFreeList+0xac>)
 8013ccc:	681a      	ldr	r2, [r3, #0]
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	601a      	str	r2, [r3, #0]
 8013cd2:	e003      	b.n	8013cdc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	681a      	ldr	r2, [r3, #0]
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013cdc:	68fa      	ldr	r2, [r7, #12]
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	d002      	beq.n	8013cea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	687a      	ldr	r2, [r7, #4]
 8013ce8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013cea:	bf00      	nop
 8013cec:	3714      	adds	r7, #20
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bc80      	pop	{r7}
 8013cf2:	4770      	bx	lr
 8013cf4:	20002c44 	.word	0x20002c44
 8013cf8:	20002c4c 	.word	0x20002c4c

08013cfc <calloc>:
 8013cfc:	4b02      	ldr	r3, [pc, #8]	@ (8013d08 <calloc+0xc>)
 8013cfe:	460a      	mov	r2, r1
 8013d00:	4601      	mov	r1, r0
 8013d02:	6818      	ldr	r0, [r3, #0]
 8013d04:	f000 b802 	b.w	8013d0c <_calloc_r>
 8013d08:	20000044 	.word	0x20000044

08013d0c <_calloc_r>:
 8013d0c:	b570      	push	{r4, r5, r6, lr}
 8013d0e:	fba1 5402 	umull	r5, r4, r1, r2
 8013d12:	b93c      	cbnz	r4, 8013d24 <_calloc_r+0x18>
 8013d14:	4629      	mov	r1, r5
 8013d16:	f000 f82f 	bl	8013d78 <_malloc_r>
 8013d1a:	4606      	mov	r6, r0
 8013d1c:	b928      	cbnz	r0, 8013d2a <_calloc_r+0x1e>
 8013d1e:	2600      	movs	r6, #0
 8013d20:	4630      	mov	r0, r6
 8013d22:	bd70      	pop	{r4, r5, r6, pc}
 8013d24:	220c      	movs	r2, #12
 8013d26:	6002      	str	r2, [r0, #0]
 8013d28:	e7f9      	b.n	8013d1e <_calloc_r+0x12>
 8013d2a:	462a      	mov	r2, r5
 8013d2c:	4621      	mov	r1, r4
 8013d2e:	f000 f8af 	bl	8013e90 <memset>
 8013d32:	e7f5      	b.n	8013d20 <_calloc_r+0x14>

08013d34 <sbrk_aligned>:
 8013d34:	b570      	push	{r4, r5, r6, lr}
 8013d36:	4e0f      	ldr	r6, [pc, #60]	@ (8013d74 <sbrk_aligned+0x40>)
 8013d38:	460c      	mov	r4, r1
 8013d3a:	6831      	ldr	r1, [r6, #0]
 8013d3c:	4605      	mov	r5, r0
 8013d3e:	b911      	cbnz	r1, 8013d46 <sbrk_aligned+0x12>
 8013d40:	f000 f8ae 	bl	8013ea0 <_sbrk_r>
 8013d44:	6030      	str	r0, [r6, #0]
 8013d46:	4621      	mov	r1, r4
 8013d48:	4628      	mov	r0, r5
 8013d4a:	f000 f8a9 	bl	8013ea0 <_sbrk_r>
 8013d4e:	1c43      	adds	r3, r0, #1
 8013d50:	d103      	bne.n	8013d5a <sbrk_aligned+0x26>
 8013d52:	f04f 34ff 	mov.w	r4, #4294967295
 8013d56:	4620      	mov	r0, r4
 8013d58:	bd70      	pop	{r4, r5, r6, pc}
 8013d5a:	1cc4      	adds	r4, r0, #3
 8013d5c:	f024 0403 	bic.w	r4, r4, #3
 8013d60:	42a0      	cmp	r0, r4
 8013d62:	d0f8      	beq.n	8013d56 <sbrk_aligned+0x22>
 8013d64:	1a21      	subs	r1, r4, r0
 8013d66:	4628      	mov	r0, r5
 8013d68:	f000 f89a 	bl	8013ea0 <_sbrk_r>
 8013d6c:	3001      	adds	r0, #1
 8013d6e:	d1f2      	bne.n	8013d56 <sbrk_aligned+0x22>
 8013d70:	e7ef      	b.n	8013d52 <sbrk_aligned+0x1e>
 8013d72:	bf00      	nop
 8013d74:	20002c5c 	.word	0x20002c5c

08013d78 <_malloc_r>:
 8013d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d7c:	1ccd      	adds	r5, r1, #3
 8013d7e:	f025 0503 	bic.w	r5, r5, #3
 8013d82:	3508      	adds	r5, #8
 8013d84:	2d0c      	cmp	r5, #12
 8013d86:	bf38      	it	cc
 8013d88:	250c      	movcc	r5, #12
 8013d8a:	2d00      	cmp	r5, #0
 8013d8c:	4606      	mov	r6, r0
 8013d8e:	db01      	blt.n	8013d94 <_malloc_r+0x1c>
 8013d90:	42a9      	cmp	r1, r5
 8013d92:	d904      	bls.n	8013d9e <_malloc_r+0x26>
 8013d94:	230c      	movs	r3, #12
 8013d96:	6033      	str	r3, [r6, #0]
 8013d98:	2000      	movs	r0, #0
 8013d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013e74 <_malloc_r+0xfc>
 8013da2:	f000 f869 	bl	8013e78 <__malloc_lock>
 8013da6:	f8d8 3000 	ldr.w	r3, [r8]
 8013daa:	461c      	mov	r4, r3
 8013dac:	bb44      	cbnz	r4, 8013e00 <_malloc_r+0x88>
 8013dae:	4629      	mov	r1, r5
 8013db0:	4630      	mov	r0, r6
 8013db2:	f7ff ffbf 	bl	8013d34 <sbrk_aligned>
 8013db6:	1c43      	adds	r3, r0, #1
 8013db8:	4604      	mov	r4, r0
 8013dba:	d158      	bne.n	8013e6e <_malloc_r+0xf6>
 8013dbc:	f8d8 4000 	ldr.w	r4, [r8]
 8013dc0:	4627      	mov	r7, r4
 8013dc2:	2f00      	cmp	r7, #0
 8013dc4:	d143      	bne.n	8013e4e <_malloc_r+0xd6>
 8013dc6:	2c00      	cmp	r4, #0
 8013dc8:	d04b      	beq.n	8013e62 <_malloc_r+0xea>
 8013dca:	6823      	ldr	r3, [r4, #0]
 8013dcc:	4639      	mov	r1, r7
 8013dce:	4630      	mov	r0, r6
 8013dd0:	eb04 0903 	add.w	r9, r4, r3
 8013dd4:	f000 f864 	bl	8013ea0 <_sbrk_r>
 8013dd8:	4581      	cmp	r9, r0
 8013dda:	d142      	bne.n	8013e62 <_malloc_r+0xea>
 8013ddc:	6821      	ldr	r1, [r4, #0]
 8013dde:	4630      	mov	r0, r6
 8013de0:	1a6d      	subs	r5, r5, r1
 8013de2:	4629      	mov	r1, r5
 8013de4:	f7ff ffa6 	bl	8013d34 <sbrk_aligned>
 8013de8:	3001      	adds	r0, #1
 8013dea:	d03a      	beq.n	8013e62 <_malloc_r+0xea>
 8013dec:	6823      	ldr	r3, [r4, #0]
 8013dee:	442b      	add	r3, r5
 8013df0:	6023      	str	r3, [r4, #0]
 8013df2:	f8d8 3000 	ldr.w	r3, [r8]
 8013df6:	685a      	ldr	r2, [r3, #4]
 8013df8:	bb62      	cbnz	r2, 8013e54 <_malloc_r+0xdc>
 8013dfa:	f8c8 7000 	str.w	r7, [r8]
 8013dfe:	e00f      	b.n	8013e20 <_malloc_r+0xa8>
 8013e00:	6822      	ldr	r2, [r4, #0]
 8013e02:	1b52      	subs	r2, r2, r5
 8013e04:	d420      	bmi.n	8013e48 <_malloc_r+0xd0>
 8013e06:	2a0b      	cmp	r2, #11
 8013e08:	d917      	bls.n	8013e3a <_malloc_r+0xc2>
 8013e0a:	1961      	adds	r1, r4, r5
 8013e0c:	42a3      	cmp	r3, r4
 8013e0e:	6025      	str	r5, [r4, #0]
 8013e10:	bf18      	it	ne
 8013e12:	6059      	strne	r1, [r3, #4]
 8013e14:	6863      	ldr	r3, [r4, #4]
 8013e16:	bf08      	it	eq
 8013e18:	f8c8 1000 	streq.w	r1, [r8]
 8013e1c:	5162      	str	r2, [r4, r5]
 8013e1e:	604b      	str	r3, [r1, #4]
 8013e20:	4630      	mov	r0, r6
 8013e22:	f000 f82f 	bl	8013e84 <__malloc_unlock>
 8013e26:	f104 000b 	add.w	r0, r4, #11
 8013e2a:	1d23      	adds	r3, r4, #4
 8013e2c:	f020 0007 	bic.w	r0, r0, #7
 8013e30:	1ac2      	subs	r2, r0, r3
 8013e32:	bf1c      	itt	ne
 8013e34:	1a1b      	subne	r3, r3, r0
 8013e36:	50a3      	strne	r3, [r4, r2]
 8013e38:	e7af      	b.n	8013d9a <_malloc_r+0x22>
 8013e3a:	6862      	ldr	r2, [r4, #4]
 8013e3c:	42a3      	cmp	r3, r4
 8013e3e:	bf0c      	ite	eq
 8013e40:	f8c8 2000 	streq.w	r2, [r8]
 8013e44:	605a      	strne	r2, [r3, #4]
 8013e46:	e7eb      	b.n	8013e20 <_malloc_r+0xa8>
 8013e48:	4623      	mov	r3, r4
 8013e4a:	6864      	ldr	r4, [r4, #4]
 8013e4c:	e7ae      	b.n	8013dac <_malloc_r+0x34>
 8013e4e:	463c      	mov	r4, r7
 8013e50:	687f      	ldr	r7, [r7, #4]
 8013e52:	e7b6      	b.n	8013dc2 <_malloc_r+0x4a>
 8013e54:	461a      	mov	r2, r3
 8013e56:	685b      	ldr	r3, [r3, #4]
 8013e58:	42a3      	cmp	r3, r4
 8013e5a:	d1fb      	bne.n	8013e54 <_malloc_r+0xdc>
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	6053      	str	r3, [r2, #4]
 8013e60:	e7de      	b.n	8013e20 <_malloc_r+0xa8>
 8013e62:	230c      	movs	r3, #12
 8013e64:	4630      	mov	r0, r6
 8013e66:	6033      	str	r3, [r6, #0]
 8013e68:	f000 f80c 	bl	8013e84 <__malloc_unlock>
 8013e6c:	e794      	b.n	8013d98 <_malloc_r+0x20>
 8013e6e:	6005      	str	r5, [r0, #0]
 8013e70:	e7d6      	b.n	8013e20 <_malloc_r+0xa8>
 8013e72:	bf00      	nop
 8013e74:	20002c60 	.word	0x20002c60

08013e78 <__malloc_lock>:
 8013e78:	4801      	ldr	r0, [pc, #4]	@ (8013e80 <__malloc_lock+0x8>)
 8013e7a:	f000 b84b 	b.w	8013f14 <__retarget_lock_acquire_recursive>
 8013e7e:	bf00      	nop
 8013e80:	20002da0 	.word	0x20002da0

08013e84 <__malloc_unlock>:
 8013e84:	4801      	ldr	r0, [pc, #4]	@ (8013e8c <__malloc_unlock+0x8>)
 8013e86:	f000 b846 	b.w	8013f16 <__retarget_lock_release_recursive>
 8013e8a:	bf00      	nop
 8013e8c:	20002da0 	.word	0x20002da0

08013e90 <memset>:
 8013e90:	4603      	mov	r3, r0
 8013e92:	4402      	add	r2, r0
 8013e94:	4293      	cmp	r3, r2
 8013e96:	d100      	bne.n	8013e9a <memset+0xa>
 8013e98:	4770      	bx	lr
 8013e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8013e9e:	e7f9      	b.n	8013e94 <memset+0x4>

08013ea0 <_sbrk_r>:
 8013ea0:	b538      	push	{r3, r4, r5, lr}
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	4d05      	ldr	r5, [pc, #20]	@ (8013ebc <_sbrk_r+0x1c>)
 8013ea6:	4604      	mov	r4, r0
 8013ea8:	4608      	mov	r0, r1
 8013eaa:	602b      	str	r3, [r5, #0]
 8013eac:	f7f0 ff06 	bl	8004cbc <_sbrk>
 8013eb0:	1c43      	adds	r3, r0, #1
 8013eb2:	d102      	bne.n	8013eba <_sbrk_r+0x1a>
 8013eb4:	682b      	ldr	r3, [r5, #0]
 8013eb6:	b103      	cbz	r3, 8013eba <_sbrk_r+0x1a>
 8013eb8:	6023      	str	r3, [r4, #0]
 8013eba:	bd38      	pop	{r3, r4, r5, pc}
 8013ebc:	20002d9c 	.word	0x20002d9c

08013ec0 <__errno>:
 8013ec0:	4b01      	ldr	r3, [pc, #4]	@ (8013ec8 <__errno+0x8>)
 8013ec2:	6818      	ldr	r0, [r3, #0]
 8013ec4:	4770      	bx	lr
 8013ec6:	bf00      	nop
 8013ec8:	20000044 	.word	0x20000044

08013ecc <__libc_init_array>:
 8013ecc:	b570      	push	{r4, r5, r6, lr}
 8013ece:	2600      	movs	r6, #0
 8013ed0:	4d0c      	ldr	r5, [pc, #48]	@ (8013f04 <__libc_init_array+0x38>)
 8013ed2:	4c0d      	ldr	r4, [pc, #52]	@ (8013f08 <__libc_init_array+0x3c>)
 8013ed4:	1b64      	subs	r4, r4, r5
 8013ed6:	10a4      	asrs	r4, r4, #2
 8013ed8:	42a6      	cmp	r6, r4
 8013eda:	d109      	bne.n	8013ef0 <__libc_init_array+0x24>
 8013edc:	f000 f9ae 	bl	801423c <_init>
 8013ee0:	2600      	movs	r6, #0
 8013ee2:	4d0a      	ldr	r5, [pc, #40]	@ (8013f0c <__libc_init_array+0x40>)
 8013ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8013f10 <__libc_init_array+0x44>)
 8013ee6:	1b64      	subs	r4, r4, r5
 8013ee8:	10a4      	asrs	r4, r4, #2
 8013eea:	42a6      	cmp	r6, r4
 8013eec:	d105      	bne.n	8013efa <__libc_init_array+0x2e>
 8013eee:	bd70      	pop	{r4, r5, r6, pc}
 8013ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ef4:	4798      	blx	r3
 8013ef6:	3601      	adds	r6, #1
 8013ef8:	e7ee      	b.n	8013ed8 <__libc_init_array+0xc>
 8013efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8013efe:	4798      	blx	r3
 8013f00:	3601      	adds	r6, #1
 8013f02:	e7f2      	b.n	8013eea <__libc_init_array+0x1e>
 8013f04:	08014a14 	.word	0x08014a14
 8013f08:	08014a14 	.word	0x08014a14
 8013f0c:	08014a14 	.word	0x08014a14
 8013f10:	08014a18 	.word	0x08014a18

08013f14 <__retarget_lock_acquire_recursive>:
 8013f14:	4770      	bx	lr

08013f16 <__retarget_lock_release_recursive>:
 8013f16:	4770      	bx	lr

08013f18 <memcpy>:
 8013f18:	440a      	add	r2, r1
 8013f1a:	4291      	cmp	r1, r2
 8013f1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013f20:	d100      	bne.n	8013f24 <memcpy+0xc>
 8013f22:	4770      	bx	lr
 8013f24:	b510      	push	{r4, lr}
 8013f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f2a:	4291      	cmp	r1, r2
 8013f2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013f30:	d1f9      	bne.n	8013f26 <memcpy+0xe>
 8013f32:	bd10      	pop	{r4, pc}

08013f34 <sqrt>:
 8013f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f36:	4606      	mov	r6, r0
 8013f38:	460f      	mov	r7, r1
 8013f3a:	f000 f839 	bl	8013fb0 <__ieee754_sqrt>
 8013f3e:	4632      	mov	r2, r6
 8013f40:	4604      	mov	r4, r0
 8013f42:	460d      	mov	r5, r1
 8013f44:	463b      	mov	r3, r7
 8013f46:	4630      	mov	r0, r6
 8013f48:	4639      	mov	r1, r7
 8013f4a:	f7ec fdc7 	bl	8000adc <__aeabi_dcmpun>
 8013f4e:	b990      	cbnz	r0, 8013f76 <sqrt+0x42>
 8013f50:	2200      	movs	r2, #0
 8013f52:	2300      	movs	r3, #0
 8013f54:	4630      	mov	r0, r6
 8013f56:	4639      	mov	r1, r7
 8013f58:	f7ec fd98 	bl	8000a8c <__aeabi_dcmplt>
 8013f5c:	b158      	cbz	r0, 8013f76 <sqrt+0x42>
 8013f5e:	f7ff ffaf 	bl	8013ec0 <__errno>
 8013f62:	2321      	movs	r3, #33	@ 0x21
 8013f64:	2200      	movs	r2, #0
 8013f66:	6003      	str	r3, [r0, #0]
 8013f68:	2300      	movs	r3, #0
 8013f6a:	4610      	mov	r0, r2
 8013f6c:	4619      	mov	r1, r3
 8013f6e:	f7ec fc45 	bl	80007fc <__aeabi_ddiv>
 8013f72:	4604      	mov	r4, r0
 8013f74:	460d      	mov	r5, r1
 8013f76:	4620      	mov	r0, r4
 8013f78:	4629      	mov	r1, r5
 8013f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013f7c <sqrtf>:
 8013f7c:	b538      	push	{r3, r4, r5, lr}
 8013f7e:	4605      	mov	r5, r0
 8013f80:	f000 f8ec 	bl	801415c <__ieee754_sqrtf>
 8013f84:	4629      	mov	r1, r5
 8013f86:	4604      	mov	r4, r0
 8013f88:	4628      	mov	r0, r5
 8013f8a:	f7ed f929 	bl	80011e0 <__aeabi_fcmpun>
 8013f8e:	b968      	cbnz	r0, 8013fac <sqrtf+0x30>
 8013f90:	2100      	movs	r1, #0
 8013f92:	4628      	mov	r0, r5
 8013f94:	f7ed f8fc 	bl	8001190 <__aeabi_fcmplt>
 8013f98:	b140      	cbz	r0, 8013fac <sqrtf+0x30>
 8013f9a:	f7ff ff91 	bl	8013ec0 <__errno>
 8013f9e:	2321      	movs	r3, #33	@ 0x21
 8013fa0:	2100      	movs	r1, #0
 8013fa2:	6003      	str	r3, [r0, #0]
 8013fa4:	4608      	mov	r0, r1
 8013fa6:	f7ed f809 	bl	8000fbc <__aeabi_fdiv>
 8013faa:	4604      	mov	r4, r0
 8013fac:	4620      	mov	r0, r4
 8013fae:	bd38      	pop	{r3, r4, r5, pc}

08013fb0 <__ieee754_sqrt>:
 8013fb0:	4a67      	ldr	r2, [pc, #412]	@ (8014150 <__ieee754_sqrt+0x1a0>)
 8013fb2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fb6:	438a      	bics	r2, r1
 8013fb8:	4606      	mov	r6, r0
 8013fba:	460f      	mov	r7, r1
 8013fbc:	460b      	mov	r3, r1
 8013fbe:	4604      	mov	r4, r0
 8013fc0:	d10e      	bne.n	8013fe0 <__ieee754_sqrt+0x30>
 8013fc2:	4602      	mov	r2, r0
 8013fc4:	f7ec faf0 	bl	80005a8 <__aeabi_dmul>
 8013fc8:	4602      	mov	r2, r0
 8013fca:	460b      	mov	r3, r1
 8013fcc:	4630      	mov	r0, r6
 8013fce:	4639      	mov	r1, r7
 8013fd0:	f7ec f934 	bl	800023c <__adddf3>
 8013fd4:	4606      	mov	r6, r0
 8013fd6:	460f      	mov	r7, r1
 8013fd8:	4630      	mov	r0, r6
 8013fda:	4639      	mov	r1, r7
 8013fdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fe0:	2900      	cmp	r1, #0
 8013fe2:	dc0c      	bgt.n	8013ffe <__ieee754_sqrt+0x4e>
 8013fe4:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8013fe8:	4302      	orrs	r2, r0
 8013fea:	d0f5      	beq.n	8013fd8 <__ieee754_sqrt+0x28>
 8013fec:	b189      	cbz	r1, 8014012 <__ieee754_sqrt+0x62>
 8013fee:	4602      	mov	r2, r0
 8013ff0:	f7ec f922 	bl	8000238 <__aeabi_dsub>
 8013ff4:	4602      	mov	r2, r0
 8013ff6:	460b      	mov	r3, r1
 8013ff8:	f7ec fc00 	bl	80007fc <__aeabi_ddiv>
 8013ffc:	e7ea      	b.n	8013fd4 <__ieee754_sqrt+0x24>
 8013ffe:	150a      	asrs	r2, r1, #20
 8014000:	d115      	bne.n	801402e <__ieee754_sqrt+0x7e>
 8014002:	2100      	movs	r1, #0
 8014004:	e009      	b.n	801401a <__ieee754_sqrt+0x6a>
 8014006:	0ae3      	lsrs	r3, r4, #11
 8014008:	3a15      	subs	r2, #21
 801400a:	0564      	lsls	r4, r4, #21
 801400c:	2b00      	cmp	r3, #0
 801400e:	d0fa      	beq.n	8014006 <__ieee754_sqrt+0x56>
 8014010:	e7f7      	b.n	8014002 <__ieee754_sqrt+0x52>
 8014012:	460a      	mov	r2, r1
 8014014:	e7fa      	b.n	801400c <__ieee754_sqrt+0x5c>
 8014016:	005b      	lsls	r3, r3, #1
 8014018:	3101      	adds	r1, #1
 801401a:	02d8      	lsls	r0, r3, #11
 801401c:	d5fb      	bpl.n	8014016 <__ieee754_sqrt+0x66>
 801401e:	1e48      	subs	r0, r1, #1
 8014020:	1a12      	subs	r2, r2, r0
 8014022:	f1c1 0020 	rsb	r0, r1, #32
 8014026:	fa24 f000 	lsr.w	r0, r4, r0
 801402a:	4303      	orrs	r3, r0
 801402c:	408c      	lsls	r4, r1
 801402e:	2600      	movs	r6, #0
 8014030:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8014034:	2116      	movs	r1, #22
 8014036:	07d2      	lsls	r2, r2, #31
 8014038:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 801403c:	4632      	mov	r2, r6
 801403e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014046:	bf5c      	itt	pl
 8014048:	005b      	lslpl	r3, r3, #1
 801404a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 801404e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014052:	bf58      	it	pl
 8014054:	0064      	lslpl	r4, r4, #1
 8014056:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 801405a:	107f      	asrs	r7, r7, #1
 801405c:	0064      	lsls	r4, r4, #1
 801405e:	1815      	adds	r5, r2, r0
 8014060:	429d      	cmp	r5, r3
 8014062:	bfde      	ittt	le
 8014064:	182a      	addle	r2, r5, r0
 8014066:	1b5b      	suble	r3, r3, r5
 8014068:	1836      	addle	r6, r6, r0
 801406a:	0fe5      	lsrs	r5, r4, #31
 801406c:	3901      	subs	r1, #1
 801406e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8014072:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8014076:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801407a:	d1f0      	bne.n	801405e <__ieee754_sqrt+0xae>
 801407c:	460d      	mov	r5, r1
 801407e:	f04f 0a20 	mov.w	sl, #32
 8014082:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8014086:	429a      	cmp	r2, r3
 8014088:	eb01 0c00 	add.w	ip, r1, r0
 801408c:	db02      	blt.n	8014094 <__ieee754_sqrt+0xe4>
 801408e:	d113      	bne.n	80140b8 <__ieee754_sqrt+0x108>
 8014090:	45a4      	cmp	ip, r4
 8014092:	d811      	bhi.n	80140b8 <__ieee754_sqrt+0x108>
 8014094:	f1bc 0f00 	cmp.w	ip, #0
 8014098:	eb0c 0100 	add.w	r1, ip, r0
 801409c:	da42      	bge.n	8014124 <__ieee754_sqrt+0x174>
 801409e:	2900      	cmp	r1, #0
 80140a0:	db40      	blt.n	8014124 <__ieee754_sqrt+0x174>
 80140a2:	f102 0e01 	add.w	lr, r2, #1
 80140a6:	1a9b      	subs	r3, r3, r2
 80140a8:	4672      	mov	r2, lr
 80140aa:	45a4      	cmp	ip, r4
 80140ac:	bf88      	it	hi
 80140ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80140b2:	eba4 040c 	sub.w	r4, r4, ip
 80140b6:	4405      	add	r5, r0
 80140b8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80140bc:	f1ba 0a01 	subs.w	sl, sl, #1
 80140c0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80140c4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80140c8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80140cc:	d1db      	bne.n	8014086 <__ieee754_sqrt+0xd6>
 80140ce:	431c      	orrs	r4, r3
 80140d0:	d01a      	beq.n	8014108 <__ieee754_sqrt+0x158>
 80140d2:	4c20      	ldr	r4, [pc, #128]	@ (8014154 <__ieee754_sqrt+0x1a4>)
 80140d4:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8014158 <__ieee754_sqrt+0x1a8>
 80140d8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80140dc:	e9db 2300 	ldrd	r2, r3, [fp]
 80140e0:	f7ec f8aa 	bl	8000238 <__aeabi_dsub>
 80140e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80140e8:	4602      	mov	r2, r0
 80140ea:	460b      	mov	r3, r1
 80140ec:	4640      	mov	r0, r8
 80140ee:	4649      	mov	r1, r9
 80140f0:	f7ec fcd6 	bl	8000aa0 <__aeabi_dcmple>
 80140f4:	b140      	cbz	r0, 8014108 <__ieee754_sqrt+0x158>
 80140f6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80140fa:	e9db 2300 	ldrd	r2, r3, [fp]
 80140fe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8014102:	d111      	bne.n	8014128 <__ieee754_sqrt+0x178>
 8014104:	4655      	mov	r5, sl
 8014106:	3601      	adds	r6, #1
 8014108:	1072      	asrs	r2, r6, #1
 801410a:	086b      	lsrs	r3, r5, #1
 801410c:	07f1      	lsls	r1, r6, #31
 801410e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8014112:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8014116:	bf48      	it	mi
 8014118:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801411c:	4618      	mov	r0, r3
 801411e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8014122:	e757      	b.n	8013fd4 <__ieee754_sqrt+0x24>
 8014124:	4696      	mov	lr, r2
 8014126:	e7be      	b.n	80140a6 <__ieee754_sqrt+0xf6>
 8014128:	f7ec f888 	bl	800023c <__adddf3>
 801412c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014130:	4602      	mov	r2, r0
 8014132:	460b      	mov	r3, r1
 8014134:	4640      	mov	r0, r8
 8014136:	4649      	mov	r1, r9
 8014138:	f7ec fca8 	bl	8000a8c <__aeabi_dcmplt>
 801413c:	b120      	cbz	r0, 8014148 <__ieee754_sqrt+0x198>
 801413e:	1ca8      	adds	r0, r5, #2
 8014140:	bf08      	it	eq
 8014142:	3601      	addeq	r6, #1
 8014144:	3502      	adds	r5, #2
 8014146:	e7df      	b.n	8014108 <__ieee754_sqrt+0x158>
 8014148:	1c6b      	adds	r3, r5, #1
 801414a:	f023 0501 	bic.w	r5, r3, #1
 801414e:	e7db      	b.n	8014108 <__ieee754_sqrt+0x158>
 8014150:	7ff00000 	.word	0x7ff00000
 8014154:	200000a0 	.word	0x200000a0
 8014158:	20000098 	.word	0x20000098

0801415c <__ieee754_sqrtf>:
 801415c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8014160:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8014164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014168:	4603      	mov	r3, r0
 801416a:	4604      	mov	r4, r0
 801416c:	d30a      	bcc.n	8014184 <__ieee754_sqrtf+0x28>
 801416e:	4601      	mov	r1, r0
 8014170:	f7ec fe70 	bl	8000e54 <__aeabi_fmul>
 8014174:	4601      	mov	r1, r0
 8014176:	4620      	mov	r0, r4
 8014178:	f7ec fd64 	bl	8000c44 <__addsf3>
 801417c:	4604      	mov	r4, r0
 801417e:	4620      	mov	r0, r4
 8014180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014184:	2a00      	cmp	r2, #0
 8014186:	d0fa      	beq.n	801417e <__ieee754_sqrtf+0x22>
 8014188:	2800      	cmp	r0, #0
 801418a:	da06      	bge.n	801419a <__ieee754_sqrtf+0x3e>
 801418c:	4601      	mov	r1, r0
 801418e:	f7ec fd57 	bl	8000c40 <__aeabi_fsub>
 8014192:	4601      	mov	r1, r0
 8014194:	f7ec ff12 	bl	8000fbc <__aeabi_fdiv>
 8014198:	e7f0      	b.n	801417c <__ieee754_sqrtf+0x20>
 801419a:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 801419e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80141a2:	d03e      	beq.n	8014222 <__ieee754_sqrtf+0xc6>
 80141a4:	2400      	movs	r4, #0
 80141a6:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 80141aa:	07ca      	lsls	r2, r1, #31
 80141ac:	f04f 0019 	mov.w	r0, #25
 80141b0:	4626      	mov	r6, r4
 80141b2:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80141b6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80141ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80141be:	bf58      	it	pl
 80141c0:	005b      	lslpl	r3, r3, #1
 80141c2:	106d      	asrs	r5, r5, #1
 80141c4:	005b      	lsls	r3, r3, #1
 80141c6:	1872      	adds	r2, r6, r1
 80141c8:	429a      	cmp	r2, r3
 80141ca:	bfcf      	iteee	gt
 80141cc:	461a      	movgt	r2, r3
 80141ce:	1856      	addle	r6, r2, r1
 80141d0:	1864      	addle	r4, r4, r1
 80141d2:	1a9a      	suble	r2, r3, r2
 80141d4:	3801      	subs	r0, #1
 80141d6:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80141da:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80141de:	d1f2      	bne.n	80141c6 <__ieee754_sqrtf+0x6a>
 80141e0:	b1ba      	cbz	r2, 8014212 <__ieee754_sqrtf+0xb6>
 80141e2:	4e14      	ldr	r6, [pc, #80]	@ (8014234 <__ieee754_sqrtf+0xd8>)
 80141e4:	4f14      	ldr	r7, [pc, #80]	@ (8014238 <__ieee754_sqrtf+0xdc>)
 80141e6:	6830      	ldr	r0, [r6, #0]
 80141e8:	6839      	ldr	r1, [r7, #0]
 80141ea:	f7ec fd29 	bl	8000c40 <__aeabi_fsub>
 80141ee:	f8d6 8000 	ldr.w	r8, [r6]
 80141f2:	4601      	mov	r1, r0
 80141f4:	4640      	mov	r0, r8
 80141f6:	f7ec ffd5 	bl	80011a4 <__aeabi_fcmple>
 80141fa:	b150      	cbz	r0, 8014212 <__ieee754_sqrtf+0xb6>
 80141fc:	6830      	ldr	r0, [r6, #0]
 80141fe:	6839      	ldr	r1, [r7, #0]
 8014200:	f7ec fd20 	bl	8000c44 <__addsf3>
 8014204:	6836      	ldr	r6, [r6, #0]
 8014206:	4601      	mov	r1, r0
 8014208:	4630      	mov	r0, r6
 801420a:	f7ec ffc1 	bl	8001190 <__aeabi_fcmplt>
 801420e:	b168      	cbz	r0, 801422c <__ieee754_sqrtf+0xd0>
 8014210:	3402      	adds	r4, #2
 8014212:	1064      	asrs	r4, r4, #1
 8014214:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8014218:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 801421c:	e7af      	b.n	801417e <__ieee754_sqrtf+0x22>
 801421e:	005b      	lsls	r3, r3, #1
 8014220:	3201      	adds	r2, #1
 8014222:	0218      	lsls	r0, r3, #8
 8014224:	d5fb      	bpl.n	801421e <__ieee754_sqrtf+0xc2>
 8014226:	3a01      	subs	r2, #1
 8014228:	1a89      	subs	r1, r1, r2
 801422a:	e7bb      	b.n	80141a4 <__ieee754_sqrtf+0x48>
 801422c:	3401      	adds	r4, #1
 801422e:	f024 0401 	bic.w	r4, r4, #1
 8014232:	e7ee      	b.n	8014212 <__ieee754_sqrtf+0xb6>
 8014234:	200000ac 	.word	0x200000ac
 8014238:	200000a8 	.word	0x200000a8

0801423c <_init>:
 801423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801423e:	bf00      	nop
 8014240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014242:	bc08      	pop	{r3}
 8014244:	469e      	mov	lr, r3
 8014246:	4770      	bx	lr

08014248 <_fini>:
 8014248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801424a:	bf00      	nop
 801424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801424e:	bc08      	pop	{r3}
 8014250:	469e      	mov	lr, r3
 8014252:	4770      	bx	lr
